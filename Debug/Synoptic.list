
Synoptic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eafc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004848  0800ec90  0800ec90  0001ec90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080134d8  080134d8  000301e4  2**0
                  CONTENTS
  4 .ARM          00000008  080134d8  080134d8  000234d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080134e0  080134e0  000301e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080134e0  080134e0  000234e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080134e4  080134e4  000234e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  080134e8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002bc  200001e4  080136cc  000301e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004a0  080136cc  000304a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c72a  00000000  00000000  00030214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040a6  00000000  00000000  0004c93e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001608  00000000  00000000  000509e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001410  00000000  00000000  00051ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ad9f  00000000  00000000  00053400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e114  00000000  00000000  0007e19f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f79fb  00000000  00000000  0009c2b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00193cae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000073a4  00000000  00000000  00193d00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ec74 	.word	0x0800ec74

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	0800ec74 	.word	0x0800ec74

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c7c:	f000 b974 	b.w	8000f68 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9d08      	ldr	r5, [sp, #32]
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	468e      	mov	lr, r1
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d14d      	bne.n	8000d42 <__udivmoddi4+0xaa>
 8000ca6:	428a      	cmp	r2, r1
 8000ca8:	4694      	mov	ip, r2
 8000caa:	d969      	bls.n	8000d80 <__udivmoddi4+0xe8>
 8000cac:	fab2 f282 	clz	r2, r2
 8000cb0:	b152      	cbz	r2, 8000cc8 <__udivmoddi4+0x30>
 8000cb2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cb6:	f1c2 0120 	rsb	r1, r2, #32
 8000cba:	fa20 f101 	lsr.w	r1, r0, r1
 8000cbe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cc2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cc6:	4094      	lsls	r4, r2
 8000cc8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ccc:	0c21      	lsrs	r1, r4, #16
 8000cce:	fbbe f6f8 	udiv	r6, lr, r8
 8000cd2:	fa1f f78c 	uxth.w	r7, ip
 8000cd6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cda:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cde:	fb06 f107 	mul.w	r1, r6, r7
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	d90a      	bls.n	8000cfc <__udivmoddi4+0x64>
 8000ce6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cea:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cee:	f080 811f 	bcs.w	8000f30 <__udivmoddi4+0x298>
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	f240 811c 	bls.w	8000f30 <__udivmoddi4+0x298>
 8000cf8:	3e02      	subs	r6, #2
 8000cfa:	4463      	add	r3, ip
 8000cfc:	1a5b      	subs	r3, r3, r1
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d04:	fb08 3310 	mls	r3, r8, r0, r3
 8000d08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d0c:	fb00 f707 	mul.w	r7, r0, r7
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	d90a      	bls.n	8000d2a <__udivmoddi4+0x92>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d1c:	f080 810a 	bcs.w	8000f34 <__udivmoddi4+0x29c>
 8000d20:	42a7      	cmp	r7, r4
 8000d22:	f240 8107 	bls.w	8000f34 <__udivmoddi4+0x29c>
 8000d26:	4464      	add	r4, ip
 8000d28:	3802      	subs	r0, #2
 8000d2a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d2e:	1be4      	subs	r4, r4, r7
 8000d30:	2600      	movs	r6, #0
 8000d32:	b11d      	cbz	r5, 8000d3c <__udivmoddi4+0xa4>
 8000d34:	40d4      	lsrs	r4, r2
 8000d36:	2300      	movs	r3, #0
 8000d38:	e9c5 4300 	strd	r4, r3, [r5]
 8000d3c:	4631      	mov	r1, r6
 8000d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d909      	bls.n	8000d5a <__udivmoddi4+0xc2>
 8000d46:	2d00      	cmp	r5, #0
 8000d48:	f000 80ef 	beq.w	8000f2a <__udivmoddi4+0x292>
 8000d4c:	2600      	movs	r6, #0
 8000d4e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d52:	4630      	mov	r0, r6
 8000d54:	4631      	mov	r1, r6
 8000d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5a:	fab3 f683 	clz	r6, r3
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	d14a      	bne.n	8000df8 <__udivmoddi4+0x160>
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d302      	bcc.n	8000d6c <__udivmoddi4+0xd4>
 8000d66:	4282      	cmp	r2, r0
 8000d68:	f200 80f9 	bhi.w	8000f5e <__udivmoddi4+0x2c6>
 8000d6c:	1a84      	subs	r4, r0, r2
 8000d6e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d72:	2001      	movs	r0, #1
 8000d74:	469e      	mov	lr, r3
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	d0e0      	beq.n	8000d3c <__udivmoddi4+0xa4>
 8000d7a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d7e:	e7dd      	b.n	8000d3c <__udivmoddi4+0xa4>
 8000d80:	b902      	cbnz	r2, 8000d84 <__udivmoddi4+0xec>
 8000d82:	deff      	udf	#255	; 0xff
 8000d84:	fab2 f282 	clz	r2, r2
 8000d88:	2a00      	cmp	r2, #0
 8000d8a:	f040 8092 	bne.w	8000eb2 <__udivmoddi4+0x21a>
 8000d8e:	eba1 010c 	sub.w	r1, r1, ip
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f fe8c 	uxth.w	lr, ip
 8000d9a:	2601      	movs	r6, #1
 8000d9c:	0c20      	lsrs	r0, r4, #16
 8000d9e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000da2:	fb07 1113 	mls	r1, r7, r3, r1
 8000da6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000daa:	fb0e f003 	mul.w	r0, lr, r3
 8000dae:	4288      	cmp	r0, r1
 8000db0:	d908      	bls.n	8000dc4 <__udivmoddi4+0x12c>
 8000db2:	eb1c 0101 	adds.w	r1, ip, r1
 8000db6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x12a>
 8000dbc:	4288      	cmp	r0, r1
 8000dbe:	f200 80cb 	bhi.w	8000f58 <__udivmoddi4+0x2c0>
 8000dc2:	4643      	mov	r3, r8
 8000dc4:	1a09      	subs	r1, r1, r0
 8000dc6:	b2a4      	uxth	r4, r4
 8000dc8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dcc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dd4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dd8:	45a6      	cmp	lr, r4
 8000dda:	d908      	bls.n	8000dee <__udivmoddi4+0x156>
 8000ddc:	eb1c 0404 	adds.w	r4, ip, r4
 8000de0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000de4:	d202      	bcs.n	8000dec <__udivmoddi4+0x154>
 8000de6:	45a6      	cmp	lr, r4
 8000de8:	f200 80bb 	bhi.w	8000f62 <__udivmoddi4+0x2ca>
 8000dec:	4608      	mov	r0, r1
 8000dee:	eba4 040e 	sub.w	r4, r4, lr
 8000df2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000df6:	e79c      	b.n	8000d32 <__udivmoddi4+0x9a>
 8000df8:	f1c6 0720 	rsb	r7, r6, #32
 8000dfc:	40b3      	lsls	r3, r6
 8000dfe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e02:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e06:	fa20 f407 	lsr.w	r4, r0, r7
 8000e0a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e0e:	431c      	orrs	r4, r3
 8000e10:	40f9      	lsrs	r1, r7
 8000e12:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e16:	fa00 f306 	lsl.w	r3, r0, r6
 8000e1a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e1e:	0c20      	lsrs	r0, r4, #16
 8000e20:	fa1f fe8c 	uxth.w	lr, ip
 8000e24:	fb09 1118 	mls	r1, r9, r8, r1
 8000e28:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e2c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e30:	4288      	cmp	r0, r1
 8000e32:	fa02 f206 	lsl.w	r2, r2, r6
 8000e36:	d90b      	bls.n	8000e50 <__udivmoddi4+0x1b8>
 8000e38:	eb1c 0101 	adds.w	r1, ip, r1
 8000e3c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e40:	f080 8088 	bcs.w	8000f54 <__udivmoddi4+0x2bc>
 8000e44:	4288      	cmp	r0, r1
 8000e46:	f240 8085 	bls.w	8000f54 <__udivmoddi4+0x2bc>
 8000e4a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e4e:	4461      	add	r1, ip
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e58:	fb09 1110 	mls	r1, r9, r0, r1
 8000e5c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e60:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e64:	458e      	cmp	lr, r1
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x1e2>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e70:	d26c      	bcs.n	8000f4c <__udivmoddi4+0x2b4>
 8000e72:	458e      	cmp	lr, r1
 8000e74:	d96a      	bls.n	8000f4c <__udivmoddi4+0x2b4>
 8000e76:	3802      	subs	r0, #2
 8000e78:	4461      	add	r1, ip
 8000e7a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e7e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e82:	eba1 010e 	sub.w	r1, r1, lr
 8000e86:	42a1      	cmp	r1, r4
 8000e88:	46c8      	mov	r8, r9
 8000e8a:	46a6      	mov	lr, r4
 8000e8c:	d356      	bcc.n	8000f3c <__udivmoddi4+0x2a4>
 8000e8e:	d053      	beq.n	8000f38 <__udivmoddi4+0x2a0>
 8000e90:	b15d      	cbz	r5, 8000eaa <__udivmoddi4+0x212>
 8000e92:	ebb3 0208 	subs.w	r2, r3, r8
 8000e96:	eb61 010e 	sbc.w	r1, r1, lr
 8000e9a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e9e:	fa22 f306 	lsr.w	r3, r2, r6
 8000ea2:	40f1      	lsrs	r1, r6
 8000ea4:	431f      	orrs	r7, r3
 8000ea6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eaa:	2600      	movs	r6, #0
 8000eac:	4631      	mov	r1, r6
 8000eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb2:	f1c2 0320 	rsb	r3, r2, #32
 8000eb6:	40d8      	lsrs	r0, r3
 8000eb8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ebc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ec0:	4091      	lsls	r1, r2
 8000ec2:	4301      	orrs	r1, r0
 8000ec4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ec8:	fa1f fe8c 	uxth.w	lr, ip
 8000ecc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ed0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ed4:	0c0b      	lsrs	r3, r1, #16
 8000ed6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eda:	fb00 f60e 	mul.w	r6, r0, lr
 8000ede:	429e      	cmp	r6, r3
 8000ee0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ee4:	d908      	bls.n	8000ef8 <__udivmoddi4+0x260>
 8000ee6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eea:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000eee:	d22f      	bcs.n	8000f50 <__udivmoddi4+0x2b8>
 8000ef0:	429e      	cmp	r6, r3
 8000ef2:	d92d      	bls.n	8000f50 <__udivmoddi4+0x2b8>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	4463      	add	r3, ip
 8000ef8:	1b9b      	subs	r3, r3, r6
 8000efa:	b289      	uxth	r1, r1
 8000efc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f00:	fb07 3316 	mls	r3, r7, r6, r3
 8000f04:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f08:	fb06 f30e 	mul.w	r3, r6, lr
 8000f0c:	428b      	cmp	r3, r1
 8000f0e:	d908      	bls.n	8000f22 <__udivmoddi4+0x28a>
 8000f10:	eb1c 0101 	adds.w	r1, ip, r1
 8000f14:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f18:	d216      	bcs.n	8000f48 <__udivmoddi4+0x2b0>
 8000f1a:	428b      	cmp	r3, r1
 8000f1c:	d914      	bls.n	8000f48 <__udivmoddi4+0x2b0>
 8000f1e:	3e02      	subs	r6, #2
 8000f20:	4461      	add	r1, ip
 8000f22:	1ac9      	subs	r1, r1, r3
 8000f24:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f28:	e738      	b.n	8000d9c <__udivmoddi4+0x104>
 8000f2a:	462e      	mov	r6, r5
 8000f2c:	4628      	mov	r0, r5
 8000f2e:	e705      	b.n	8000d3c <__udivmoddi4+0xa4>
 8000f30:	4606      	mov	r6, r0
 8000f32:	e6e3      	b.n	8000cfc <__udivmoddi4+0x64>
 8000f34:	4618      	mov	r0, r3
 8000f36:	e6f8      	b.n	8000d2a <__udivmoddi4+0x92>
 8000f38:	454b      	cmp	r3, r9
 8000f3a:	d2a9      	bcs.n	8000e90 <__udivmoddi4+0x1f8>
 8000f3c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f40:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f44:	3801      	subs	r0, #1
 8000f46:	e7a3      	b.n	8000e90 <__udivmoddi4+0x1f8>
 8000f48:	4646      	mov	r6, r8
 8000f4a:	e7ea      	b.n	8000f22 <__udivmoddi4+0x28a>
 8000f4c:	4620      	mov	r0, r4
 8000f4e:	e794      	b.n	8000e7a <__udivmoddi4+0x1e2>
 8000f50:	4640      	mov	r0, r8
 8000f52:	e7d1      	b.n	8000ef8 <__udivmoddi4+0x260>
 8000f54:	46d0      	mov	r8, sl
 8000f56:	e77b      	b.n	8000e50 <__udivmoddi4+0x1b8>
 8000f58:	3b02      	subs	r3, #2
 8000f5a:	4461      	add	r1, ip
 8000f5c:	e732      	b.n	8000dc4 <__udivmoddi4+0x12c>
 8000f5e:	4630      	mov	r0, r6
 8000f60:	e709      	b.n	8000d76 <__udivmoddi4+0xde>
 8000f62:	4464      	add	r4, ip
 8000f64:	3802      	subs	r0, #2
 8000f66:	e742      	b.n	8000dee <__udivmoddi4+0x156>

08000f68 <__aeabi_idiv0>:
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop

08000f6c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f72:	4b0c      	ldr	r3, [pc, #48]	; (8000fa4 <MX_DMA_Init+0x38>)
 8000f74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f76:	4a0b      	ldr	r2, [pc, #44]	; (8000fa4 <MX_DMA_Init+0x38>)
 8000f78:	f043 0301 	orr.w	r3, r3, #1
 8000f7c:	6493      	str	r3, [r2, #72]	; 0x48
 8000f7e:	4b09      	ldr	r3, [pc, #36]	; (8000fa4 <MX_DMA_Init+0x38>)
 8000f80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f82:	f003 0301 	and.w	r3, r3, #1
 8000f86:	607b      	str	r3, [r7, #4]
 8000f88:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	200f      	movs	r0, #15
 8000f90:	f002 f8ed 	bl	800316e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000f94:	200f      	movs	r0, #15
 8000f96:	f002 f906 	bl	80031a6 <HAL_NVIC_EnableIRQ>

}
 8000f9a:	bf00      	nop
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	40021000 	.word	0x40021000

08000fa8 <MX_GPIO_Init>:
        * EXTI
     PA2   ------> USART2_TX
     PA3   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b08a      	sub	sp, #40	; 0x28
 8000fac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fae:	f107 0314 	add.w	r3, r7, #20
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	601a      	str	r2, [r3, #0]
 8000fb6:	605a      	str	r2, [r3, #4]
 8000fb8:	609a      	str	r2, [r3, #8]
 8000fba:	60da      	str	r2, [r3, #12]
 8000fbc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fbe:	4b41      	ldr	r3, [pc, #260]	; (80010c4 <MX_GPIO_Init+0x11c>)
 8000fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc2:	4a40      	ldr	r2, [pc, #256]	; (80010c4 <MX_GPIO_Init+0x11c>)
 8000fc4:	f043 0304 	orr.w	r3, r3, #4
 8000fc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fca:	4b3e      	ldr	r3, [pc, #248]	; (80010c4 <MX_GPIO_Init+0x11c>)
 8000fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fce:	f003 0304 	and.w	r3, r3, #4
 8000fd2:	613b      	str	r3, [r7, #16]
 8000fd4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fd6:	4b3b      	ldr	r3, [pc, #236]	; (80010c4 <MX_GPIO_Init+0x11c>)
 8000fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fda:	4a3a      	ldr	r2, [pc, #232]	; (80010c4 <MX_GPIO_Init+0x11c>)
 8000fdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fe0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fe2:	4b38      	ldr	r3, [pc, #224]	; (80010c4 <MX_GPIO_Init+0x11c>)
 8000fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fee:	4b35      	ldr	r3, [pc, #212]	; (80010c4 <MX_GPIO_Init+0x11c>)
 8000ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff2:	4a34      	ldr	r2, [pc, #208]	; (80010c4 <MX_GPIO_Init+0x11c>)
 8000ff4:	f043 0301 	orr.w	r3, r3, #1
 8000ff8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ffa:	4b32      	ldr	r3, [pc, #200]	; (80010c4 <MX_GPIO_Init+0x11c>)
 8000ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ffe:	f003 0301 	and.w	r3, r3, #1
 8001002:	60bb      	str	r3, [r7, #8]
 8001004:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001006:	4b2f      	ldr	r3, [pc, #188]	; (80010c4 <MX_GPIO_Init+0x11c>)
 8001008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100a:	4a2e      	ldr	r2, [pc, #184]	; (80010c4 <MX_GPIO_Init+0x11c>)
 800100c:	f043 0302 	orr.w	r3, r3, #2
 8001010:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001012:	4b2c      	ldr	r3, [pc, #176]	; (80010c4 <MX_GPIO_Init+0x11c>)
 8001014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001016:	f003 0302 	and.w	r3, r3, #2
 800101a:	607b      	str	r3, [r7, #4]
 800101c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800101e:	2200      	movs	r2, #0
 8001020:	2120      	movs	r1, #32
 8001022:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001026:	f002 fcf9 	bl	8003a1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RST_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 800102a:	2200      	movs	r2, #0
 800102c:	f640 0104 	movw	r1, #2052	; 0x804
 8001030:	4825      	ldr	r0, [pc, #148]	; (80010c8 <MX_GPIO_Init+0x120>)
 8001032:	f002 fcf3 	bl	8003a1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001036:	2201      	movs	r2, #1
 8001038:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800103c:	4822      	ldr	r0, [pc, #136]	; (80010c8 <MX_GPIO_Init+0x120>)
 800103e:	f002 fced 	bl	8003a1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001042:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001046:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001048:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800104c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104e:	2300      	movs	r3, #0
 8001050:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001052:	f107 0314 	add.w	r3, r7, #20
 8001056:	4619      	mov	r1, r3
 8001058:	481c      	ldr	r0, [pc, #112]	; (80010cc <MX_GPIO_Init+0x124>)
 800105a:	f002 fb35 	bl	80036c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800105e:	230c      	movs	r3, #12
 8001060:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001062:	2302      	movs	r3, #2
 8001064:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800106a:	2303      	movs	r3, #3
 800106c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800106e:	2307      	movs	r3, #7
 8001070:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001072:	f107 0314 	add.w	r3, r7, #20
 8001076:	4619      	mov	r1, r3
 8001078:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800107c:	f002 fb24 	bl	80036c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001080:	2320      	movs	r3, #32
 8001082:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001084:	2301      	movs	r3, #1
 8001086:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001088:	2300      	movs	r3, #0
 800108a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108c:	2300      	movs	r3, #0
 800108e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001090:	f107 0314 	add.w	r3, r7, #20
 8001094:	4619      	mov	r1, r3
 8001096:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800109a:	f002 fb15 	bl	80036c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_DC_Pin|LCD_CS_Pin;
 800109e:	f641 0304 	movw	r3, #6148	; 0x1804
 80010a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a4:	2301      	movs	r3, #1
 80010a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a8:	2300      	movs	r3, #0
 80010aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ac:	2300      	movs	r3, #0
 80010ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b0:	f107 0314 	add.w	r3, r7, #20
 80010b4:	4619      	mov	r1, r3
 80010b6:	4804      	ldr	r0, [pc, #16]	; (80010c8 <MX_GPIO_Init+0x120>)
 80010b8:	f002 fb06 	bl	80036c8 <HAL_GPIO_Init>

}
 80010bc:	bf00      	nop
 80010be:	3728      	adds	r7, #40	; 0x28
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	40021000 	.word	0x40021000
 80010c8:	48000400 	.word	0x48000400
 80010cc:	48000800 	.word	0x48000800

080010d0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010d4:	4b1b      	ldr	r3, [pc, #108]	; (8001144 <MX_I2C1_Init+0x74>)
 80010d6:	4a1c      	ldr	r2, [pc, #112]	; (8001148 <MX_I2C1_Init+0x78>)
 80010d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80010da:	4b1a      	ldr	r3, [pc, #104]	; (8001144 <MX_I2C1_Init+0x74>)
 80010dc:	4a1b      	ldr	r2, [pc, #108]	; (800114c <MX_I2C1_Init+0x7c>)
 80010de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80010e0:	4b18      	ldr	r3, [pc, #96]	; (8001144 <MX_I2C1_Init+0x74>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010e6:	4b17      	ldr	r3, [pc, #92]	; (8001144 <MX_I2C1_Init+0x74>)
 80010e8:	2201      	movs	r2, #1
 80010ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010ec:	4b15      	ldr	r3, [pc, #84]	; (8001144 <MX_I2C1_Init+0x74>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80010f2:	4b14      	ldr	r3, [pc, #80]	; (8001144 <MX_I2C1_Init+0x74>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010f8:	4b12      	ldr	r3, [pc, #72]	; (8001144 <MX_I2C1_Init+0x74>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010fe:	4b11      	ldr	r3, [pc, #68]	; (8001144 <MX_I2C1_Init+0x74>)
 8001100:	2200      	movs	r2, #0
 8001102:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001104:	4b0f      	ldr	r3, [pc, #60]	; (8001144 <MX_I2C1_Init+0x74>)
 8001106:	2200      	movs	r2, #0
 8001108:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800110a:	480e      	ldr	r0, [pc, #56]	; (8001144 <MX_I2C1_Init+0x74>)
 800110c:	f002 fc9e 	bl	8003a4c <HAL_I2C_Init>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001116:	f001 faf9 	bl	800270c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800111a:	2100      	movs	r1, #0
 800111c:	4809      	ldr	r0, [pc, #36]	; (8001144 <MX_I2C1_Init+0x74>)
 800111e:	f003 fd65 	bl	8004bec <HAL_I2CEx_ConfigAnalogFilter>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001128:	f001 faf0 	bl	800270c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800112c:	2100      	movs	r1, #0
 800112e:	4805      	ldr	r0, [pc, #20]	; (8001144 <MX_I2C1_Init+0x74>)
 8001130:	f003 fda7 	bl	8004c82 <HAL_I2CEx_ConfigDigitalFilter>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800113a:	f001 fae7 	bl	800270c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800113e:	bf00      	nop
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	20000200 	.word	0x20000200
 8001148:	40005400 	.word	0x40005400
 800114c:	10909cec 	.word	0x10909cec

08001150 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b0ac      	sub	sp, #176	; 0xb0
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001158:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	60da      	str	r2, [r3, #12]
 8001166:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001168:	f107 0314 	add.w	r3, r7, #20
 800116c:	2288      	movs	r2, #136	; 0x88
 800116e:	2100      	movs	r1, #0
 8001170:	4618      	mov	r0, r3
 8001172:	f008 fccd 	bl	8009b10 <memset>
  if(i2cHandle->Instance==I2C1)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a21      	ldr	r2, [pc, #132]	; (8001200 <HAL_I2C_MspInit+0xb0>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d13a      	bne.n	80011f6 <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001180:	2340      	movs	r3, #64	; 0x40
 8001182:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001184:	2300      	movs	r3, #0
 8001186:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001188:	f107 0314 	add.w	r3, r7, #20
 800118c:	4618      	mov	r0, r3
 800118e:	f004 fc87 	bl	8005aa0 <HAL_RCCEx_PeriphCLKConfig>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001198:	f001 fab8 	bl	800270c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800119c:	4b19      	ldr	r3, [pc, #100]	; (8001204 <HAL_I2C_MspInit+0xb4>)
 800119e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a0:	4a18      	ldr	r2, [pc, #96]	; (8001204 <HAL_I2C_MspInit+0xb4>)
 80011a2:	f043 0302 	orr.w	r3, r3, #2
 80011a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011a8:	4b16      	ldr	r3, [pc, #88]	; (8001204 <HAL_I2C_MspInit+0xb4>)
 80011aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ac:	f003 0302 	and.w	r3, r3, #2
 80011b0:	613b      	str	r3, [r7, #16]
 80011b2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011b4:	23c0      	movs	r3, #192	; 0xc0
 80011b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011ba:	2312      	movs	r3, #18
 80011bc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c6:	2303      	movs	r3, #3
 80011c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011cc:	2304      	movs	r3, #4
 80011ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011d6:	4619      	mov	r1, r3
 80011d8:	480b      	ldr	r0, [pc, #44]	; (8001208 <HAL_I2C_MspInit+0xb8>)
 80011da:	f002 fa75 	bl	80036c8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011de:	4b09      	ldr	r3, [pc, #36]	; (8001204 <HAL_I2C_MspInit+0xb4>)
 80011e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011e2:	4a08      	ldr	r2, [pc, #32]	; (8001204 <HAL_I2C_MspInit+0xb4>)
 80011e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011e8:	6593      	str	r3, [r2, #88]	; 0x58
 80011ea:	4b06      	ldr	r3, [pc, #24]	; (8001204 <HAL_I2C_MspInit+0xb4>)
 80011ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80011f6:	bf00      	nop
 80011f8:	37b0      	adds	r7, #176	; 0xb0
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40005400 	.word	0x40005400
 8001204:	40021000 	.word	0x40021000
 8001208:	48000400 	.word	0x48000400

0800120c <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8001210:	4b0b      	ldr	r3, [pc, #44]	; (8001240 <MX_IWDG_Init+0x34>)
 8001212:	4a0c      	ldr	r2, [pc, #48]	; (8001244 <MX_IWDG_Init+0x38>)
 8001214:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 8001216:	4b0a      	ldr	r3, [pc, #40]	; (8001240 <MX_IWDG_Init+0x34>)
 8001218:	2204      	movs	r2, #4
 800121a:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 800121c:	4b08      	ldr	r3, [pc, #32]	; (8001240 <MX_IWDG_Init+0x34>)
 800121e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001222:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 8001224:	4b06      	ldr	r3, [pc, #24]	; (8001240 <MX_IWDG_Init+0x34>)
 8001226:	f640 72ff 	movw	r2, #4095	; 0xfff
 800122a:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800122c:	4804      	ldr	r0, [pc, #16]	; (8001240 <MX_IWDG_Init+0x34>)
 800122e:	f003 fd74 	bl	8004d1a <HAL_IWDG_Init>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8001238:	f001 fa68 	bl	800270c <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 800123c:	bf00      	nop
 800123e:	bd80      	pop	{r7, pc}
 8001240:	20000254 	.word	0x20000254
 8001244:	40003000 	.word	0x40003000

08001248 <lcd_cmd>:
		CMD(0xf6), 0x00,
		CMD(ST7735S_COLMOD), 0x05,
		CMD(ST7735S_MADCTL), 0xa0
};

static void lcd_cmd(uint8_t cmd){
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8001252:	2200      	movs	r2, #0
 8001254:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001258:	480c      	ldr	r0, [pc, #48]	; (800128c <lcd_cmd+0x44>)
 800125a:	f002 fbdf 	bl	8003a1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 800125e:	2200      	movs	r2, #0
 8001260:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001264:	4809      	ldr	r0, [pc, #36]	; (800128c <lcd_cmd+0x44>)
 8001266:	f002 fbd9 	bl	8003a1c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &cmd, 1, HAL_MAX_DELAY);
 800126a:	1df9      	adds	r1, r7, #7
 800126c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001270:	2201      	movs	r2, #1
 8001272:	4807      	ldr	r0, [pc, #28]	; (8001290 <lcd_cmd+0x48>)
 8001274:	f005 fe19 	bl	8006eaa <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001278:	2201      	movs	r2, #1
 800127a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800127e:	4803      	ldr	r0, [pc, #12]	; (800128c <lcd_cmd+0x44>)
 8001280:	f002 fbcc 	bl	8003a1c <HAL_GPIO_WritePin>
}
 8001284:	bf00      	nop
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	48000400 	.word	0x48000400
 8001290:	20000358 	.word	0x20000358

08001294 <lcd_data>:

static void lcd_data(uint8_t data){
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	4603      	mov	r3, r0
 800129c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 800129e:	2201      	movs	r2, #1
 80012a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012a4:	480c      	ldr	r0, [pc, #48]	; (80012d8 <lcd_data+0x44>)
 80012a6:	f002 fbb9 	bl	8003a1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80012aa:	2200      	movs	r2, #0
 80012ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012b0:	4809      	ldr	r0, [pc, #36]	; (80012d8 <lcd_data+0x44>)
 80012b2:	f002 fbb3 	bl	8003a1c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &data, 1, HAL_MAX_DELAY);
 80012b6:	1df9      	adds	r1, r7, #7
 80012b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012bc:	2201      	movs	r2, #1
 80012be:	4807      	ldr	r0, [pc, #28]	; (80012dc <lcd_data+0x48>)
 80012c0:	f005 fdf3 	bl	8006eaa <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 80012c4:	2201      	movs	r2, #1
 80012c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012ca:	4803      	ldr	r0, [pc, #12]	; (80012d8 <lcd_data+0x44>)
 80012cc:	f002 fba6 	bl	8003a1c <HAL_GPIO_WritePin>
}
 80012d0:	bf00      	nop
 80012d2:	3708      	adds	r7, #8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	48000400 	.word	0x48000400
 80012dc:	20000358 	.word	0x20000358

080012e0 <lcd_send>:

static void lcd_send(uint16_t value){
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	80fb      	strh	r3, [r7, #6]
	if(value & 0x100){
 80012ea:	88fb      	ldrh	r3, [r7, #6]
 80012ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d005      	beq.n	8001300 <lcd_send+0x20>
		lcd_cmd(value);
 80012f4:	88fb      	ldrh	r3, [r7, #6]
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff ffa5 	bl	8001248 <lcd_cmd>
	} else{
		lcd_data(value);
	}
}
 80012fe:	e004      	b.n	800130a <lcd_send+0x2a>
		lcd_data(value);
 8001300:	88fb      	ldrh	r3, [r7, #6]
 8001302:	b2db      	uxtb	r3, r3
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff ffc5 	bl	8001294 <lcd_data>
}
 800130a:	bf00      	nop
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <lcd_data16>:

static void lcd_data16(uint16_t value){
 8001312:	b580      	push	{r7, lr}
 8001314:	b082      	sub	sp, #8
 8001316:	af00      	add	r7, sp, #0
 8001318:	4603      	mov	r3, r0
 800131a:	80fb      	strh	r3, [r7, #6]
	lcd_data(value >> 8);
 800131c:	88fb      	ldrh	r3, [r7, #6]
 800131e:	0a1b      	lsrs	r3, r3, #8
 8001320:	b29b      	uxth	r3, r3
 8001322:	b2db      	uxtb	r3, r3
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff ffb5 	bl	8001294 <lcd_data>
	lcd_data(value);
 800132a:	88fb      	ldrh	r3, [r7, #6]
 800132c:	b2db      	uxtb	r3, r3
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff ffb0 	bl	8001294 <lcd_data>
}
 8001334:	bf00      	nop
 8001336:	3708      	adds	r7, #8
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}

0800133c <lcd_set_window>:

static void lcd_set_window(int x, int y, int width, int height){
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	607a      	str	r2, [r7, #4]
 8001348:	603b      	str	r3, [r7, #0]
	lcd_cmd(ST7735S_CASET);
 800134a:	202a      	movs	r0, #42	; 0x2a
 800134c:	f7ff ff7c 	bl	8001248 <lcd_cmd>
	lcd_data16(LCD_OFFSET_X + x);
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	b29b      	uxth	r3, r3
 8001354:	3301      	adds	r3, #1
 8001356:	b29b      	uxth	r3, r3
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff ffda 	bl	8001312 <lcd_data16>
	lcd_data16(LCD_OFFSET_X + x + width - 1);
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	b29a      	uxth	r2, r3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	b29b      	uxth	r3, r3
 8001366:	4413      	add	r3, r2
 8001368:	b29b      	uxth	r3, r3
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff ffd1 	bl	8001312 <lcd_data16>

	lcd_cmd(ST7735S_RASET);
 8001370:	202b      	movs	r0, #43	; 0x2b
 8001372:	f7ff ff69 	bl	8001248 <lcd_cmd>
	lcd_data16(LCD_OFFSET_Y + y);
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	b29b      	uxth	r3, r3
 800137a:	3302      	adds	r3, #2
 800137c:	b29b      	uxth	r3, r3
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff ffc7 	bl	8001312 <lcd_data16>
	lcd_data16(LCD_OFFSET_Y + y + height -1);
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	b29a      	uxth	r2, r3
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	b29b      	uxth	r3, r3
 800138c:	4413      	add	r3, r2
 800138e:	b29b      	uxth	r3, r3
 8001390:	3301      	adds	r3, #1
 8001392:	b29b      	uxth	r3, r3
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff ffbc 	bl	8001312 <lcd_data16>

}
 800139a:	bf00      	nop
 800139c:	3710      	adds	r7, #16
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <lcd_fill_box>:

void lcd_fill_box(int x, int y, int width, int height, uint16_t color){
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b086      	sub	sp, #24
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	60f8      	str	r0, [r7, #12]
 80013aa:	60b9      	str	r1, [r7, #8]
 80013ac:	607a      	str	r2, [r7, #4]
 80013ae:	603b      	str	r3, [r7, #0]
	lcd_set_window(x, y, width, height);
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	68b9      	ldr	r1, [r7, #8]
 80013b6:	68f8      	ldr	r0, [r7, #12]
 80013b8:	f7ff ffc0 	bl	800133c <lcd_set_window>

	lcd_cmd(ST7735S_RAMWR);
 80013bc:	202c      	movs	r0, #44	; 0x2c
 80013be:	f7ff ff43 	bl	8001248 <lcd_cmd>
	for(int i=0; i< width * height; i++)
 80013c2:	2300      	movs	r3, #0
 80013c4:	617b      	str	r3, [r7, #20]
 80013c6:	e006      	b.n	80013d6 <lcd_fill_box+0x34>
		lcd_data16(color);
 80013c8:	8c3b      	ldrh	r3, [r7, #32]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff ffa1 	bl	8001312 <lcd_data16>
	for(int i=0; i< width * height; i++)
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	3301      	adds	r3, #1
 80013d4:	617b      	str	r3, [r7, #20]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	683a      	ldr	r2, [r7, #0]
 80013da:	fb02 f303 	mul.w	r3, r2, r3
 80013de:	697a      	ldr	r2, [r7, #20]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	dbf1      	blt.n	80013c8 <lcd_fill_box+0x26>
}
 80013e4:	bf00      	nop
 80013e6:	bf00      	nop
 80013e8:	3718      	adds	r7, #24
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
	...

080013f0 <lcd_init>:
	lcd_cmd(ST7735S_SLPOUT);
	HAL_Delay(120);
}


void lcd_init(void){
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
	int i;
	HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 80013f6:	2200      	movs	r2, #0
 80013f8:	2104      	movs	r1, #4
 80013fa:	4817      	ldr	r0, [pc, #92]	; (8001458 <lcd_init+0x68>)
 80013fc:	f002 fb0e 	bl	8003a1c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001400:	2064      	movs	r0, #100	; 0x64
 8001402:	f001 fdb5 	bl	8002f70 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 8001406:	2201      	movs	r2, #1
 8001408:	2104      	movs	r1, #4
 800140a:	4813      	ldr	r0, [pc, #76]	; (8001458 <lcd_init+0x68>)
 800140c:	f002 fb06 	bl	8003a1c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001410:	2064      	movs	r0, #100	; 0x64
 8001412:	f001 fdad 	bl	8002f70 <HAL_Delay>

	for(i=0; i< sizeof init_table / sizeof (uint16_t); i++){
 8001416:	2300      	movs	r3, #0
 8001418:	607b      	str	r3, [r7, #4]
 800141a:	e009      	b.n	8001430 <lcd_init+0x40>
		lcd_send(init_table[i]);
 800141c:	4a0f      	ldr	r2, [pc, #60]	; (800145c <lcd_init+0x6c>)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff ff5b 	bl	80012e0 <lcd_send>
	for(i=0; i< sizeof init_table / sizeof (uint16_t); i++){
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	3301      	adds	r3, #1
 800142e:	607b      	str	r3, [r7, #4]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2b4b      	cmp	r3, #75	; 0x4b
 8001434:	d9f2      	bls.n	800141c <lcd_init+0x2c>
	}

	HAL_Delay(200);
 8001436:	20c8      	movs	r0, #200	; 0xc8
 8001438:	f001 fd9a 	bl	8002f70 <HAL_Delay>
	lcd_cmd(ST7735S_SLPOUT);
 800143c:	2011      	movs	r0, #17
 800143e:	f7ff ff03 	bl	8001248 <lcd_cmd>
	HAL_Delay(120);
 8001442:	2078      	movs	r0, #120	; 0x78
 8001444:	f001 fd94 	bl	8002f70 <HAL_Delay>
	lcd_cmd(ST7735S_DISPON);
 8001448:	2029      	movs	r0, #41	; 0x29
 800144a:	f7ff fefd 	bl	8001248 <lcd_cmd>
}
 800144e:	bf00      	nop
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	48000400 	.word	0x48000400
 800145c:	0800f0bc 	.word	0x0800f0bc

08001460 <lcd_draw_point>:
void lcd_invoff(){
	lcd_cmd(ST7735S_INVOFF);
}


void lcd_draw_point(int x, int y, uint16_t color){
 8001460:	b580      	push	{r7, lr}
 8001462:	b086      	sub	sp, #24
 8001464:	af02      	add	r7, sp, #8
 8001466:	60f8      	str	r0, [r7, #12]
 8001468:	60b9      	str	r1, [r7, #8]
 800146a:	4613      	mov	r3, r2
 800146c:	80fb      	strh	r3, [r7, #6]
	lcd_fill_box(x, y, 1, 1, color);
 800146e:	88fb      	ldrh	r3, [r7, #6]
 8001470:	9300      	str	r3, [sp, #0]
 8001472:	2301      	movs	r3, #1
 8001474:	2201      	movs	r2, #1
 8001476:	68b9      	ldr	r1, [r7, #8]
 8001478:	68f8      	ldr	r0, [r7, #12]
 800147a:	f7ff ff92 	bl	80013a2 <lcd_fill_box>
}
 800147e:	bf00      	nop
 8001480:	3710      	adds	r7, #16
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
	...

08001488 <lcd_draw_image_fast>:
			array_counter++;
			lcd_colorize_pixel(ix, iy, mcolor);
		}
}

void lcd_draw_image_fast(int x, int y, int width, int height, uint8_t *data){
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	60f8      	str	r0, [r7, #12]
 8001490:	60b9      	str	r1, [r7, #8]
 8001492:	607a      	str	r2, [r7, #4]
 8001494:	603b      	str	r3, [r7, #0]

	lcd_cmd(ST7735S_CASET);
 8001496:	202a      	movs	r0, #42	; 0x2a
 8001498:	f7ff fed6 	bl	8001248 <lcd_cmd>
	lcd_data16(x);
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	b29b      	uxth	r3, r3
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff ff36 	bl	8001312 <lcd_data16>
	lcd_data16(x+width-1);
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	b29a      	uxth	r2, r3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	b29b      	uxth	r3, r3
 80014ae:	4413      	add	r3, r2
 80014b0:	b29b      	uxth	r3, r3
 80014b2:	3b01      	subs	r3, #1
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7ff ff2b 	bl	8001312 <lcd_data16>

	lcd_cmd(ST7735S_RASET);
 80014bc:	202b      	movs	r0, #43	; 0x2b
 80014be:	f7ff fec3 	bl	8001248 <lcd_cmd>
	lcd_data16(y);
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	b29b      	uxth	r3, r3
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff ff23 	bl	8001312 <lcd_data16>
	lcd_data16(y+height-1);
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	b29a      	uxth	r2, r3
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	b29b      	uxth	r3, r3
 80014d4:	4413      	add	r3, r2
 80014d6:	b29b      	uxth	r3, r3
 80014d8:	3b01      	subs	r3, #1
 80014da:	b29b      	uxth	r3, r3
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff ff18 	bl	8001312 <lcd_data16>

	lcd_cmd(ST7735S_RAMWR);
 80014e2:	202c      	movs	r0, #44	; 0x2c
 80014e4:	f7ff feb0 	bl	8001248 <lcd_cmd>
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 80014e8:	2201      	movs	r2, #1
 80014ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014ee:	4811      	ldr	r0, [pc, #68]	; (8001534 <lcd_draw_image_fast+0xac>)
 80014f0:	f002 fa94 	bl	8003a1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80014f4:	2200      	movs	r2, #0
 80014f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014fa:	480e      	ldr	r0, [pc, #56]	; (8001534 <lcd_draw_image_fast+0xac>)
 80014fc:	f002 fa8e 	bl	8003a1c <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi2, data, width*height*2, HAL_MAX_DELAY);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	b29a      	uxth	r2, r3
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	b29b      	uxth	r3, r3
 8001508:	fb12 f303 	smulbb	r3, r2, r3
 800150c:	b29b      	uxth	r3, r3
 800150e:	005b      	lsls	r3, r3, #1
 8001510:	b29a      	uxth	r2, r3
 8001512:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001516:	69b9      	ldr	r1, [r7, #24]
 8001518:	4807      	ldr	r0, [pc, #28]	; (8001538 <lcd_draw_image_fast+0xb0>)
 800151a:	f005 fcc6 	bl	8006eaa <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 800151e:	2201      	movs	r2, #1
 8001520:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001524:	4803      	ldr	r0, [pc, #12]	; (8001534 <lcd_draw_image_fast+0xac>)
 8001526:	f002 fa79 	bl	8003a1c <HAL_GPIO_WritePin>
}
 800152a:	bf00      	nop
 800152c:	3710      	adds	r7, #16
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	48000400 	.word	0x48000400
 8001538:	20000358 	.word	0x20000358

0800153c <lps_write_to_reg>:
 * \param	reg adres rejestru
 * \param	data byte danych do zapisania
 * \return	status transmisji
 *
 */
static HAL_StatusTypeDef lps_write_to_reg(uint8_t reg, uint8_t data){
 800153c:	b580      	push	{r7, lr}
 800153e:	b086      	sub	sp, #24
 8001540:	af02      	add	r7, sp, #8
 8001542:	4603      	mov	r3, r0
 8001544:	460a      	mov	r2, r1
 8001546:	71fb      	strb	r3, [r7, #7]
 8001548:	4613      	mov	r3, r2
 800154a:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef status;
	uint8_t buffer[2] = {reg, data};
 800154c:	79fb      	ldrb	r3, [r7, #7]
 800154e:	733b      	strb	r3, [r7, #12]
 8001550:	79bb      	ldrb	r3, [r7, #6]
 8001552:	737b      	strb	r3, [r7, #13]

    status = HAL_I2C_Master_Transmit(&hi2c1, LPS25HB_ADDR, buffer, sizeof buffer, HAL_MAX_DELAY);
 8001554:	f107 020c 	add.w	r2, r7, #12
 8001558:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800155c:	9300      	str	r3, [sp, #0]
 800155e:	2302      	movs	r3, #2
 8001560:	21ba      	movs	r1, #186	; 0xba
 8001562:	4805      	ldr	r0, [pc, #20]	; (8001578 <lps_write_to_reg+0x3c>)
 8001564:	f002 fb02 	bl	8003b6c <HAL_I2C_Master_Transmit>
 8001568:	4603      	mov	r3, r0
 800156a:	73fb      	strb	r3, [r7, #15]
	return status;
 800156c:	7bfb      	ldrb	r3, [r7, #15]
}
 800156e:	4618      	mov	r0, r3
 8001570:	3710      	adds	r7, #16
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	20000200 	.word	0x20000200

0800157c <lps_read_from_reg>:
 * \param	data odczyt zostanie zapisany pod wskazywanym adresem
 *
 * \return status transmisji (nie rozróżnia czy status dotyczy transmisji o dostep do rejestru, czy statusu odczytu z rejestru)
 *
 */
static HAL_StatusTypeDef lps_read_from_reg(uint8_t reg, uint8_t* data_ptr){
 800157c:	b580      	push	{r7, lr}
 800157e:	b086      	sub	sp, #24
 8001580:	af02      	add	r7, sp, #8
 8001582:	4603      	mov	r3, r0
 8001584:	6039      	str	r1, [r7, #0]
 8001586:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef status;
	if((status = HAL_I2C_Master_Transmit(&hi2c1, LPS25HB_ADDR, &reg, sizeof reg, HAL_MAX_DELAY))!=HAL_OK)
 8001588:	1dfa      	adds	r2, r7, #7
 800158a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800158e:	9300      	str	r3, [sp, #0]
 8001590:	2301      	movs	r3, #1
 8001592:	21ba      	movs	r1, #186	; 0xba
 8001594:	480c      	ldr	r0, [pc, #48]	; (80015c8 <lps_read_from_reg+0x4c>)
 8001596:	f002 fae9 	bl	8003b6c <HAL_I2C_Master_Transmit>
 800159a:	4603      	mov	r3, r0
 800159c:	73fb      	strb	r3, [r7, #15]
 800159e:	7bfb      	ldrb	r3, [r7, #15]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <lps_read_from_reg+0x2c>
		return status;
 80015a4:	7bfb      	ldrb	r3, [r7, #15]
 80015a6:	e00b      	b.n	80015c0 <lps_read_from_reg+0x44>
	status = HAL_I2C_Master_Receive(&hi2c1, LPS25HB_ADDR, data_ptr, sizeof data_ptr, HAL_MAX_DELAY);
 80015a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015ac:	9300      	str	r3, [sp, #0]
 80015ae:	2304      	movs	r3, #4
 80015b0:	683a      	ldr	r2, [r7, #0]
 80015b2:	21ba      	movs	r1, #186	; 0xba
 80015b4:	4804      	ldr	r0, [pc, #16]	; (80015c8 <lps_read_from_reg+0x4c>)
 80015b6:	f002 fbcd 	bl	8003d54 <HAL_I2C_Master_Receive>
 80015ba:	4603      	mov	r3, r0
 80015bc:	73fb      	strb	r3, [r7, #15]
	return status;
 80015be:	7bfb      	ldrb	r3, [r7, #15]
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3710      	adds	r7, #16
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	20000200 	.word	0x20000200

080015cc <lps_init>:


void lps_init(){
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
	// wlacz urzadzenie i ustaw czestotliwosc pomiaru na 25Hz
	lps_write_to_reg(CTRL_REG1, SET_CTRL_REG1_PD|SET_CTRL_REG1_ODR2);
 80015d0:	21c0      	movs	r1, #192	; 0xc0
 80015d2:	2020      	movs	r0, #32
 80015d4:	f7ff ffb2 	bl	800153c <lps_write_to_reg>

	// przy problemach z odczytem danych dodac oczekiwanie 100 ms

	// aktywacja i ustawienie fifo dla pomiarow
	lps_write_to_reg(CTRL_REG2,SET_CTRL_REG2_FIFO);
 80015d8:	2140      	movs	r1, #64	; 0x40
 80015da:	2021      	movs	r0, #33	; 0x21
 80015dc:	f7ff ffae 	bl	800153c <lps_write_to_reg>
	lps_write_to_reg(FIFO_CTRL, SET_FIFO_CTRL_MEAN_MODE|SET_FIFO_CTRL_WTM_32_SMPL);
 80015e0:	21cf      	movs	r1, #207	; 0xcf
 80015e2:	202e      	movs	r0, #46	; 0x2e
 80015e4:	f7ff ffaa 	bl	800153c <lps_write_to_reg>

}
 80015e8:	bf00      	nop
 80015ea:	bd80      	pop	{r7, pc}

080015ec <lps_read_temperature>:

float lps_read_temperature(float temp_conv){
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	ed87 0a01 	vstr	s0, [r7, #4]
	uint8_t *ptr_lsb, *ptr_msb;
	ptr_lsb = malloc(sizeof(uint8_t));
 80015f6:	2001      	movs	r0, #1
 80015f8:	f008 fa6c 	bl	8009ad4 <malloc>
 80015fc:	4603      	mov	r3, r0
 80015fe:	617b      	str	r3, [r7, #20]
	ptr_msb = malloc(sizeof(uint8_t));
 8001600:	2001      	movs	r0, #1
 8001602:	f008 fa67 	bl	8009ad4 <malloc>
 8001606:	4603      	mov	r3, r0
 8001608:	613b      	str	r3, [r7, #16]
	lps_read_from_reg(TEMP_OUT_L, ptr_lsb);
 800160a:	6979      	ldr	r1, [r7, #20]
 800160c:	202b      	movs	r0, #43	; 0x2b
 800160e:	f7ff ffb5 	bl	800157c <lps_read_from_reg>
	lps_read_from_reg(TEMP_OUT_H, ptr_msb);
 8001612:	6939      	ldr	r1, [r7, #16]
 8001614:	202c      	movs	r0, #44	; 0x2c
 8001616:	f7ff ffb1 	bl	800157c <lps_read_from_reg>
    int16_t val = *ptr_lsb + (*ptr_msb <<8);
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	b29a      	uxth	r2, r3
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	b29b      	uxth	r3, r3
 8001626:	021b      	lsls	r3, r3, #8
 8001628:	b29b      	uxth	r3, r3
 800162a:	4413      	add	r3, r2
 800162c:	b29b      	uxth	r3, r3
 800162e:	81fb      	strh	r3, [r7, #14]

    free(ptr_lsb);
 8001630:	6978      	ldr	r0, [r7, #20]
 8001632:	f008 fa57 	bl	8009ae4 <free>
    free(ptr_msb);
 8001636:	6938      	ldr	r0, [r7, #16]
 8001638:	f008 fa54 	bl	8009ae4 <free>

	return 42.5f + val / 480.0f + temp_conv;
 800163c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001640:	ee07 3a90 	vmov	s15, r3
 8001644:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001648:	eddf 6a08 	vldr	s13, [pc, #32]	; 800166c <lps_read_temperature+0x80>
 800164c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001650:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001670 <lps_read_temperature+0x84>
 8001654:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001658:	edd7 7a01 	vldr	s15, [r7, #4]
 800165c:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001660:	eeb0 0a67 	vmov.f32	s0, s15
 8001664:	3718      	adds	r7, #24
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	43f00000 	.word	0x43f00000
 8001670:	422a0000 	.word	0x422a0000

08001674 <lps_pressure_correction>:

void lps_pressure_correction(uint16_t offset){
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	4603      	mov	r3, r0
 800167c:	80fb      	strh	r3, [r7, #6]
	lps_write_to_reg(RPDS_L, offset);
 800167e:	88fb      	ldrh	r3, [r7, #6]
 8001680:	b2db      	uxtb	r3, r3
 8001682:	4619      	mov	r1, r3
 8001684:	2039      	movs	r0, #57	; 0x39
 8001686:	f7ff ff59 	bl	800153c <lps_write_to_reg>
	lps_write_to_reg(RPDS_H, offset >> 8);
 800168a:	88fb      	ldrh	r3, [r7, #6]
 800168c:	0a1b      	lsrs	r3, r3, #8
 800168e:	b29b      	uxth	r3, r3
 8001690:	b2db      	uxtb	r3, r3
 8001692:	4619      	mov	r1, r3
 8001694:	203a      	movs	r0, #58	; 0x3a
 8001696:	f7ff ff51 	bl	800153c <lps_write_to_reg>
}
 800169a:	bf00      	nop
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <lps_read_absolute_pressure>:


float lps_read_absolute_pressure(){
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b082      	sub	sp, #8
 80016a6:	af00      	add	r7, sp, #0
	uint8_t *pressure = malloc(sizeof(uint8_t)*3);
 80016a8:	2003      	movs	r0, #3
 80016aa:	f008 fa13 	bl	8009ad4 <malloc>
 80016ae:	4603      	mov	r3, r0
 80016b0:	607b      	str	r3, [r7, #4]
	lps_read_from_reg(PRESS_OUT_XL, pressure);
 80016b2:	6879      	ldr	r1, [r7, #4]
 80016b4:	2028      	movs	r0, #40	; 0x28
 80016b6:	f7ff ff61 	bl	800157c <lps_read_from_reg>
	lps_read_from_reg(PRESS_OUT_L, pressure+1);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	3301      	adds	r3, #1
 80016be:	4619      	mov	r1, r3
 80016c0:	2029      	movs	r0, #41	; 0x29
 80016c2:	f7ff ff5b 	bl	800157c <lps_read_from_reg>
	lps_read_from_reg(PRESS_OUT_H, pressure+2);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	3302      	adds	r3, #2
 80016ca:	4619      	mov	r1, r3
 80016cc:	202a      	movs	r0, #42	; 0x2a
 80016ce:	f7ff ff55 	bl	800157c <lps_read_from_reg>

	int32_t val = (*pressure + (*(pressure+1)<<8) + (*(pressure+2)<<16))/4096;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	461a      	mov	r2, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	3301      	adds	r3, #1
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	021b      	lsls	r3, r3, #8
 80016e0:	441a      	add	r2, r3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	3302      	adds	r3, #2
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	041b      	lsls	r3, r3, #16
 80016ea:	4413      	add	r3, r2
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	da01      	bge.n	80016f4 <lps_read_absolute_pressure+0x52>
 80016f0:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80016f4:	131b      	asrs	r3, r3, #12
 80016f6:	603b      	str	r3, [r7, #0]
	free(pressure);
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f008 f9f3 	bl	8009ae4 <free>
	return val;
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	ee07 3a90 	vmov	s15, r3
 8001704:	eef8 7ae7 	vcvt.f32.s32	s15, s15

}
 8001708:	eeb0 0a67 	vmov.f32	s0, s15
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	0000      	movs	r0, r0
 8001714:	0000      	movs	r0, r0
	...

08001718 <lps_read_relative_pressure>:

float lps_read_relative_pressure(){
 8001718:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800171c:	b084      	sub	sp, #16
 800171e:	af00      	add	r7, sp, #0
	const float h = 93; // jesli inna wysokosc to zmienic;
 8001720:	4b25      	ldr	r3, [pc, #148]	; (80017b8 <lps_read_relative_pressure+0xa0>)
 8001722:	60fb      	str	r3, [r7, #12]
	float temp_K = lps_read_temperature(U_KELVIN);
 8001724:	ed9f 0a25 	vldr	s0, [pc, #148]	; 80017bc <lps_read_relative_pressure+0xa4>
 8001728:	f7ff ff60 	bl	80015ec <lps_read_temperature>
 800172c:	ed87 0a02 	vstr	s0, [r7, #8]
	float abs_press = lps_read_absolute_pressure();
 8001730:	f7ff ffb7 	bl	80016a2 <lps_read_absolute_pressure>
 8001734:	ed87 0a01 	vstr	s0, [r7, #4]

	return abs_press * exp(0.034162608734308*h / temp_K);
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f7fe ff15 	bl	8000568 <__aeabi_f2d>
 800173e:	4604      	mov	r4, r0
 8001740:	460d      	mov	r5, r1
 8001742:	68f8      	ldr	r0, [r7, #12]
 8001744:	f7fe ff10 	bl	8000568 <__aeabi_f2d>
 8001748:	a319      	add	r3, pc, #100	; (adr r3, 80017b0 <lps_read_relative_pressure+0x98>)
 800174a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800174e:	f7fe ff63 	bl	8000618 <__aeabi_dmul>
 8001752:	4602      	mov	r2, r0
 8001754:	460b      	mov	r3, r1
 8001756:	4690      	mov	r8, r2
 8001758:	4699      	mov	r9, r3
 800175a:	68b8      	ldr	r0, [r7, #8]
 800175c:	f7fe ff04 	bl	8000568 <__aeabi_f2d>
 8001760:	4602      	mov	r2, r0
 8001762:	460b      	mov	r3, r1
 8001764:	4640      	mov	r0, r8
 8001766:	4649      	mov	r1, r9
 8001768:	f7ff f880 	bl	800086c <__aeabi_ddiv>
 800176c:	4602      	mov	r2, r0
 800176e:	460b      	mov	r3, r1
 8001770:	ec43 2b17 	vmov	d7, r2, r3
 8001774:	eeb0 0a47 	vmov.f32	s0, s14
 8001778:	eef0 0a67 	vmov.f32	s1, s15
 800177c:	f00c f994 	bl	800daa8 <exp>
 8001780:	ec53 2b10 	vmov	r2, r3, d0
 8001784:	4620      	mov	r0, r4
 8001786:	4629      	mov	r1, r5
 8001788:	f7fe ff46 	bl	8000618 <__aeabi_dmul>
 800178c:	4602      	mov	r2, r0
 800178e:	460b      	mov	r3, r1
 8001790:	4610      	mov	r0, r2
 8001792:	4619      	mov	r1, r3
 8001794:	f7ff fa18 	bl	8000bc8 <__aeabi_d2f>
 8001798:	4603      	mov	r3, r0
 800179a:	ee07 3a90 	vmov	s15, r3
}
 800179e:	eeb0 0a67 	vmov.f32	s0, s15
 80017a2:	3710      	adds	r7, #16
 80017a4:	46bd      	mov	sp, r7
 80017a6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80017aa:	bf00      	nop
 80017ac:	f3af 8000 	nop.w
 80017b0:	ee851132 	.word	0xee851132
 80017b4:	3fa17dc2 	.word	0x3fa17dc2
 80017b8:	42ba0000 	.word	0x42ba0000
 80017bc:	43889333 	.word	0x43889333

080017c0 <lps_get_altitude_hyps_f>:

float lps_get_altitude_hyps_f(){
 80017c0:	b5b0      	push	{r4, r5, r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0

	float p0 = lps_read_relative_pressure(); // sea-level pressure
 80017c6:	f7ff ffa7 	bl	8001718 <lps_read_relative_pressure>
 80017ca:	ed87 0a03 	vstr	s0, [r7, #12]
    float p = lps_read_absolute_pressure(); // pressure at location
 80017ce:	f7ff ff68 	bl	80016a2 <lps_read_absolute_pressure>
 80017d2:	ed87 0a02 	vstr	s0, [r7, #8]
    float temp_K = lps_read_temperature(U_KELVIN);
 80017d6:	ed9f 0a26 	vldr	s0, [pc, #152]	; 8001870 <lps_get_altitude_hyps_f+0xb0>
 80017da:	f7ff ff07 	bl	80015ec <lps_read_temperature>
 80017de:	ed87 0a01 	vstr	s0, [r7, #4]

    float h = (( pow(p0/p, 1/5.257) - 1)*( temp_K ))/0.0065;
 80017e2:	ed97 7a03 	vldr	s14, [r7, #12]
 80017e6:	edd7 7a02 	vldr	s15, [r7, #8]
 80017ea:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80017ee:	ee16 0a90 	vmov	r0, s13
 80017f2:	f7fe feb9 	bl	8000568 <__aeabi_f2d>
 80017f6:	4602      	mov	r2, r0
 80017f8:	460b      	mov	r3, r1
 80017fa:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8001860 <lps_get_altitude_hyps_f+0xa0>
 80017fe:	ec43 2b10 	vmov	d0, r2, r3
 8001802:	f00c f999 	bl	800db38 <pow>
 8001806:	ec51 0b10 	vmov	r0, r1, d0
 800180a:	f04f 0200 	mov.w	r2, #0
 800180e:	4b19      	ldr	r3, [pc, #100]	; (8001874 <lps_get_altitude_hyps_f+0xb4>)
 8001810:	f7fe fd4a 	bl	80002a8 <__aeabi_dsub>
 8001814:	4602      	mov	r2, r0
 8001816:	460b      	mov	r3, r1
 8001818:	4614      	mov	r4, r2
 800181a:	461d      	mov	r5, r3
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f7fe fea3 	bl	8000568 <__aeabi_f2d>
 8001822:	4602      	mov	r2, r0
 8001824:	460b      	mov	r3, r1
 8001826:	4620      	mov	r0, r4
 8001828:	4629      	mov	r1, r5
 800182a:	f7fe fef5 	bl	8000618 <__aeabi_dmul>
 800182e:	4602      	mov	r2, r0
 8001830:	460b      	mov	r3, r1
 8001832:	4610      	mov	r0, r2
 8001834:	4619      	mov	r1, r3
 8001836:	a30c      	add	r3, pc, #48	; (adr r3, 8001868 <lps_get_altitude_hyps_f+0xa8>)
 8001838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800183c:	f7ff f816 	bl	800086c <__aeabi_ddiv>
 8001840:	4602      	mov	r2, r0
 8001842:	460b      	mov	r3, r1
 8001844:	4610      	mov	r0, r2
 8001846:	4619      	mov	r1, r3
 8001848:	f7ff f9be 	bl	8000bc8 <__aeabi_d2f>
 800184c:	4603      	mov	r3, r0
 800184e:	603b      	str	r3, [r7, #0]

   	return h;
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	ee07 3a90 	vmov	s15, r3

}
 8001856:	eeb0 0a67 	vmov.f32	s0, s15
 800185a:	3710      	adds	r7, #16
 800185c:	46bd      	mov	sp, r7
 800185e:	bdb0      	pop	{r4, r5, r7, pc}
 8001860:	7dee2d4a 	.word	0x7dee2d4a
 8001864:	3fc85936 	.word	0x3fc85936
 8001868:	76c8b439 	.word	0x76c8b439
 800186c:	3f7a9fbe 	.word	0x3f7a9fbe
 8001870:	43889333 	.word	0x43889333
 8001874:	3ff00000 	.word	0x3ff00000

08001878 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b08e      	sub	sp, #56	; 0x38
 800187c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800187e:	f001 fafb 	bl	8002e78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001882:	f000 f885 	bl	8001990 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001886:	f7ff fb8f 	bl	8000fa8 <MX_GPIO_Init>
  MX_I2C1_Init();
 800188a:	f7ff fc21 	bl	80010d0 <MX_I2C1_Init>
  MX_SPI2_Init();
 800188e:	f001 f80d 	bl	80028ac <MX_SPI2_Init>
  MX_DMA_Init();
 8001892:	f7ff fb6b 	bl	8000f6c <MX_DMA_Init>
  MX_IWDG_Init();
 8001896:	f7ff fcb9 	bl	800120c <MX_IWDG_Init>
  MX_USART1_UART_Init();
 800189a:	f001 f9eb 	bl	8002c74 <MX_USART1_UART_Init>
  MX_RTC_Init();
 800189e:	f000 ff3b 	bl	8002718 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  checkFlags();
 80018a2:	f000 fbdd 	bl	8002060 <checkFlags>
  lps_init();
 80018a6:	f7ff fe91 	bl	80015cc <lps_init>
  lps_pressure_correction(48);
 80018aa:	2030      	movs	r0, #48	; 0x30
 80018ac:	f7ff fee2 	bl	8001674 <lps_pressure_correction>
  printf("\r\n\n *** URUCHOMIENIE URZADZENIA *** \r\n\n");
 80018b0:	482e      	ldr	r0, [pc, #184]	; (800196c <main+0xf4>)
 80018b2:	f008 ff1b 	bl	800a6ec <puts>
  printf("UART pracuje poprawnie\r\n");
 80018b6:	482e      	ldr	r0, [pc, #184]	; (8001970 <main+0xf8>)
 80018b8:	f008 ff18 	bl	800a6ec <puts>
  printf("Testowy odczyt temperatury= %.2f\r\n", lps_read_temperature(U_CELSIUS));
 80018bc:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8001974 <main+0xfc>
 80018c0:	f7ff fe94 	bl	80015ec <lps_read_temperature>
 80018c4:	ee10 3a10 	vmov	r3, s0
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7fe fe4d 	bl	8000568 <__aeabi_f2d>
 80018ce:	4602      	mov	r2, r0
 80018d0:	460b      	mov	r3, r1
 80018d2:	4829      	ldr	r0, [pc, #164]	; (8001978 <main+0x100>)
 80018d4:	f008 fe6e 	bl	800a5b4 <iprintf>
  printf("Testowy odczyt cisnienia= %.2f\r\n", lps_read_relative_pressure());
 80018d8:	f7ff ff1e 	bl	8001718 <lps_read_relative_pressure>
 80018dc:	ee10 3a10 	vmov	r3, s0
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7fe fe41 	bl	8000568 <__aeabi_f2d>
 80018e6:	4602      	mov	r2, r0
 80018e8:	460b      	mov	r3, r1
 80018ea:	4824      	ldr	r0, [pc, #144]	; (800197c <main+0x104>)
 80018ec:	f008 fe62 	bl	800a5b4 <iprintf>
  printf("Testowy odczyt wysokosci= %.2f\r\n", lps_get_altitude_hyps_f());
 80018f0:	f7ff ff66 	bl	80017c0 <lps_get_altitude_hyps_f>
 80018f4:	ee10 3a10 	vmov	r3, s0
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7fe fe35 	bl	8000568 <__aeabi_f2d>
 80018fe:	4602      	mov	r2, r0
 8001900:	460b      	mov	r3, r1
 8001902:	481f      	ldr	r0, [pc, #124]	; (8001980 <main+0x108>)
 8001904:	f008 fe56 	bl	800a5b4 <iprintf>
  lcd_init();
 8001908:	f7ff fd72 	bl	80013f0 <lcd_init>
  hagl_init();
 800190c:	f007 fe7e 	bl	800960c <hagl_init>

  HAL_UART_Receive_DMA(&huart1, rx_buf, 1);
 8001910:	2201      	movs	r2, #1
 8001912:	491c      	ldr	r1, [pc, #112]	; (8001984 <main+0x10c>)
 8001914:	481c      	ldr	r0, [pc, #112]	; (8001988 <main+0x110>)
 8001916:	f005 fe7d 	bl	8007614 <HAL_UART_Receive_DMA>

  paintScreenBlack();
 800191a:	f000 fda4 	bl	8002466 <paintScreenBlack>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  uint8_t history[HISTORY_NUMS*HISTORY_ROW_SIZE];
  hmdata_t hmdt = {false, history};
 800191e:	2300      	movs	r3, #0
 8001920:	733b      	strb	r3, [r7, #12]
 8001922:	f107 0314 	add.w	r3, r7, #20
 8001926:	613b      	str	r3, [r7, #16]
  prgsdata_t prgs = {live_mode, &hmdt};
 8001928:	2300      	movs	r3, #0
 800192a:	713b      	strb	r3, [r7, #4]
 800192c:	f107 030c 	add.w	r3, r7, #12
 8001930:	60bb      	str	r3, [r7, #8]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	fflush_sc_buff(&prgs);
 8001932:	1d3b      	adds	r3, r7, #4
 8001934:	4618      	mov	r0, r3
 8001936:	f000 fbb3 	bl	80020a0 <fflush_sc_buff>
	alarm_settings();
 800193a:	f000 fe93 	bl	8002664 <alarm_settings>


	switch(prgs.which_program){
 800193e:	793b      	ldrb	r3, [r7, #4]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d002      	beq.n	800194a <main+0xd2>
 8001944:	2b01      	cmp	r3, #1
 8001946:	d003      	beq.n	8001950 <main+0xd8>
 8001948:	e008      	b.n	800195c <main+0xe4>

		case live_mode:
			live_mode_prog();
 800194a:	f000 f875 	bl	8001a38 <live_mode_prog>
			break;
 800194e:	e005      	b.n	800195c <main+0xe4>
		case history_mode:
			history_mode_prog(&hmdt);
 8001950:	f107 030c 	add.w	r3, r7, #12
 8001954:	4618      	mov	r0, r3
 8001956:	f000 f8f1 	bl	8001b3c <history_mode_prog>
			break;
 800195a:	bf00      	nop

	}


	HAL_Delay(500);
 800195c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001960:	f001 fb06 	bl	8002f70 <HAL_Delay>

	HAL_IWDG_Refresh(&hiwdg);
 8001964:	4809      	ldr	r0, [pc, #36]	; (800198c <main+0x114>)
 8001966:	f003 fa27 	bl	8004db8 <HAL_IWDG_Refresh>
	fflush_sc_buff(&prgs);
 800196a:	e7e2      	b.n	8001932 <main+0xba>
 800196c:	0800ec90 	.word	0x0800ec90
 8001970:	0800ecb8 	.word	0x0800ecb8
 8001974:	00000000 	.word	0x00000000
 8001978:	0800ecd0 	.word	0x0800ecd0
 800197c:	0800ecf4 	.word	0x0800ecf4
 8001980:	0800ed18 	.word	0x0800ed18
 8001984:	20000264 	.word	0x20000264
 8001988:	200003c0 	.word	0x200003c0
 800198c:	20000254 	.word	0x20000254

08001990 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b096      	sub	sp, #88	; 0x58
 8001994:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001996:	f107 0314 	add.w	r3, r7, #20
 800199a:	2244      	movs	r2, #68	; 0x44
 800199c:	2100      	movs	r1, #0
 800199e:	4618      	mov	r0, r3
 80019a0:	f008 f8b6 	bl	8009b10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019a4:	463b      	mov	r3, r7
 80019a6:	2200      	movs	r2, #0
 80019a8:	601a      	str	r2, [r3, #0]
 80019aa:	605a      	str	r2, [r3, #4]
 80019ac:	609a      	str	r2, [r3, #8]
 80019ae:	60da      	str	r2, [r3, #12]
 80019b0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80019b2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80019b6:	f003 fa1d 	bl	8004df4 <HAL_PWREx_ControlVoltageScaling>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80019c0:	f000 fea4 	bl	800270c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80019c4:	230a      	movs	r3, #10
 80019c6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019cc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019ce:	2310      	movs	r3, #16
 80019d0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80019d2:	2301      	movs	r3, #1
 80019d4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019d6:	2302      	movs	r3, #2
 80019d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80019da:	2302      	movs	r3, #2
 80019dc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80019de:	2301      	movs	r3, #1
 80019e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80019e2:	230a      	movs	r3, #10
 80019e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80019e6:	2307      	movs	r3, #7
 80019e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80019ea:	2302      	movs	r3, #2
 80019ec:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80019ee:	2302      	movs	r3, #2
 80019f0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019f2:	f107 0314 	add.w	r3, r7, #20
 80019f6:	4618      	mov	r0, r3
 80019f8:	f003 fa52 	bl	8004ea0 <HAL_RCC_OscConfig>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <SystemClock_Config+0x76>
  {
    Error_Handler();
 8001a02:	f000 fe83 	bl	800270c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a06:	230f      	movs	r3, #15
 8001a08:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a12:	2300      	movs	r3, #0
 8001a14:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a16:	2300      	movs	r3, #0
 8001a18:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001a1a:	463b      	mov	r3, r7
 8001a1c:	2104      	movs	r1, #4
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f003 fe1a 	bl	8005658 <HAL_RCC_ClockConfig>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001a2a:	f000 fe6f 	bl	800270c <Error_Handler>
  }
}
 8001a2e:	bf00      	nop
 8001a30:	3758      	adds	r7, #88	; 0x58
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
	...

08001a38 <live_mode_prog>:

/* USER CODE BEGIN 4 */
void live_mode_prog(){
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	f5ad 6d97 	sub.w	sp, sp, #1208	; 0x4b8
 8001a3e:	af02      	add	r7, sp, #8

	// Konwersja tekstow do Wide Chara
	wchar_t text[MAXTXTLEN], text2[MAXTXTLEN], text3[MAXTXTLEN];
	swprintf(text, MAXTXTLEN, L"Temperatura: %.2f C", lps_read_temperature(U_CELSIUS));
 8001a40:	ed9f 0a36 	vldr	s0, [pc, #216]	; 8001b1c <live_mode_prog+0xe4>
 8001a44:	f7ff fdd2 	bl	80015ec <lps_read_temperature>
 8001a48:	ee10 3a10 	vmov	r3, s0
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7fe fd8b 	bl	8000568 <__aeabi_f2d>
 8001a52:	4602      	mov	r2, r0
 8001a54:	460b      	mov	r3, r1
 8001a56:	f507 7048 	add.w	r0, r7, #800	; 0x320
 8001a5a:	e9cd 2300 	strd	r2, r3, [sp]
 8001a5e:	4a30      	ldr	r2, [pc, #192]	; (8001b20 <live_mode_prog+0xe8>)
 8001a60:	2164      	movs	r1, #100	; 0x64
 8001a62:	f008 fedf 	bl	800a824 <swprintf>
	swprintf(text2, MAXTXTLEN, L"Cisnienie: %.2f Hpa", lps_read_relative_pressure());
 8001a66:	f7ff fe57 	bl	8001718 <lps_read_relative_pressure>
 8001a6a:	ee10 3a10 	vmov	r3, s0
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7fe fd7a 	bl	8000568 <__aeabi_f2d>
 8001a74:	4602      	mov	r2, r0
 8001a76:	460b      	mov	r3, r1
 8001a78:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 8001a7c:	e9cd 2300 	strd	r2, r3, [sp]
 8001a80:	4a28      	ldr	r2, [pc, #160]	; (8001b24 <live_mode_prog+0xec>)
 8001a82:	2164      	movs	r1, #100	; 0x64
 8001a84:	f008 fece 	bl	800a824 <swprintf>
	swprintf(text3, MAXTXTLEN, L"Wysokosc: %.0f m.n.p.m.", lps_get_altitude_hyps_f());
 8001a88:	f7ff fe9a 	bl	80017c0 <lps_get_altitude_hyps_f>
 8001a8c:	ee10 3a10 	vmov	r3, s0
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7fe fd69 	bl	8000568 <__aeabi_f2d>
 8001a96:	4602      	mov	r2, r0
 8001a98:	460b      	mov	r3, r1
 8001a9a:	4638      	mov	r0, r7
 8001a9c:	e9cd 2300 	strd	r2, r3, [sp]
 8001aa0:	4a21      	ldr	r2, [pc, #132]	; (8001b28 <live_mode_prog+0xf0>)
 8001aa2:	2164      	movs	r1, #100	; 0x64
 8001aa4:	f008 febe 	bl	800a824 <swprintf>

	hagl_put_text(text, 30, 17, RED, font6x9);
 8001aa8:	f507 7048 	add.w	r0, r7, #800	; 0x320
 8001aac:	4b1f      	ldr	r3, [pc, #124]	; (8001b2c <live_mode_prog+0xf4>)
 8001aae:	9300      	str	r3, [sp, #0]
 8001ab0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001ab4:	2211      	movs	r2, #17
 8001ab6:	211e      	movs	r1, #30
 8001ab8:	f007 fcf5 	bl	80094a6 <hagl_put_text>
	hagl_put_text(text2, 30, 41, RED, font6x9);
 8001abc:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 8001ac0:	4b1a      	ldr	r3, [pc, #104]	; (8001b2c <live_mode_prog+0xf4>)
 8001ac2:	9300      	str	r3, [sp, #0]
 8001ac4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001ac8:	2229      	movs	r2, #41	; 0x29
 8001aca:	211e      	movs	r1, #30
 8001acc:	f007 fceb 	bl	80094a6 <hagl_put_text>
	hagl_put_text(text3, 30, 70, RED, font6x9);
 8001ad0:	4638      	mov	r0, r7
 8001ad2:	4b16      	ldr	r3, [pc, #88]	; (8001b2c <live_mode_prog+0xf4>)
 8001ad4:	9300      	str	r3, [sp, #0]
 8001ad6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001ada:	2246      	movs	r2, #70	; 0x46
 8001adc:	211e      	movs	r1, #30
 8001ade:	f007 fce2 	bl	80094a6 <hagl_put_text>

	// nie mam ikon?
	lcd_draw_image_fast(2,5,24,24,temp_icon);
 8001ae2:	4b13      	ldr	r3, [pc, #76]	; (8001b30 <live_mode_prog+0xf8>)
 8001ae4:	9300      	str	r3, [sp, #0]
 8001ae6:	2318      	movs	r3, #24
 8001ae8:	2218      	movs	r2, #24
 8001aea:	2105      	movs	r1, #5
 8001aec:	2002      	movs	r0, #2
 8001aee:	f7ff fccb 	bl	8001488 <lcd_draw_image_fast>
	lcd_draw_image_fast(2,34,24,24,press_icon);
 8001af2:	4b10      	ldr	r3, [pc, #64]	; (8001b34 <live_mode_prog+0xfc>)
 8001af4:	9300      	str	r3, [sp, #0]
 8001af6:	2318      	movs	r3, #24
 8001af8:	2218      	movs	r2, #24
 8001afa:	2122      	movs	r1, #34	; 0x22
 8001afc:	2002      	movs	r0, #2
 8001afe:	f7ff fcc3 	bl	8001488 <lcd_draw_image_fast>
	lcd_draw_image_fast(2,63,24,24,alt_icon);
 8001b02:	4b0d      	ldr	r3, [pc, #52]	; (8001b38 <live_mode_prog+0x100>)
 8001b04:	9300      	str	r3, [sp, #0]
 8001b06:	2318      	movs	r3, #24
 8001b08:	2218      	movs	r2, #24
 8001b0a:	213f      	movs	r1, #63	; 0x3f
 8001b0c:	2002      	movs	r0, #2
 8001b0e:	f7ff fcbb 	bl	8001488 <lcd_draw_image_fast>

}
 8001b12:	bf00      	nop
 8001b14:	f507 6796 	add.w	r7, r7, #1200	; 0x4b0
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	00000000 	.word	0x00000000
 8001b20:	0800ed3c 	.word	0x0800ed3c
 8001b24:	0800ed8c 	.word	0x0800ed8c
 8001b28:	0800eddc 	.word	0x0800eddc
 8001b2c:	0800f154 	.word	0x0800f154
 8001b30:	0801210c 	.word	0x0801210c
 8001b34:	0801258c 	.word	0x0801258c
 8001b38:	08012a0c 	.word	0x08012a0c

08001b3c <history_mode_prog>:
void history_mode_prog(hmdata_t *hmdt){
 8001b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b3e:	b0ef      	sub	sp, #444	; 0x1bc
 8001b40:	af06      	add	r7, sp, #24
 8001b42:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001b46:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001b4a:	6018      	str	r0, [r3, #0]

	if(!hmdt->history_loaded){
 8001b4c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001b50:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	f083 0301 	eor.w	r3, r3, #1
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d019      	beq.n	8001b96 <history_mode_prog+0x5a>
		load_history_from_eeprom(hmdt->msrm_history);
 8001b62:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001b66:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f000 f8b6 	bl	8001ce0 <load_history_from_eeprom>

		printHistory(hmdt->msrm_history);
 8001b74:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001b78:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	4618      	mov	r0, r3
 8001b82:	f000 fa3d 	bl	8002000 <printHistory>
		hmdt->history_loaded = true;
 8001b86:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001b8a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2201      	movs	r2, #1
 8001b92:	701a      	strb	r2, [r3, #0]



	}
    //printf("History mode prog\r\n");
}
 8001b94:	e08f      	b.n	8001cb6 <history_mode_prog+0x17a>
	} else if(hmdt->history_loaded){
 8001b96:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001b9a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	f000 8087 	beq.w	8001cb6 <history_mode_prog+0x17a>
		for(int i=0; i<HISTORY_NUMS; i++){
 8001ba8:	2300      	movs	r3, #0
 8001baa:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001bae:	e07d      	b.n	8001cac <history_mode_prog+0x170>
			int c = HISTORY_ROW_SIZE * i;
 8001bb0:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	00db      	lsls	r3, r3, #3
 8001bb8:	1a9b      	subs	r3, r3, r2
 8001bba:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
			swprintf(text, MAXTXTLEN, L"%02d/%02d/%02d %02d:%02d %02d.%02d C", hmdt->msrm_history[c],hmdt->msrm_history[c+1], hmdt->msrm_history[c+2], hmdt->msrm_history[c+3],
 8001bbe:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001bc2:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	685a      	ldr	r2, [r3, #4]
 8001bca:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8001bce:	4413      	add	r3, r2
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	469c      	mov	ip, r3
 8001bd4:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001bd8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	685a      	ldr	r2, [r3, #4]
 8001be0:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8001be4:	3301      	adds	r3, #1
 8001be6:	4413      	add	r3, r2
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	4619      	mov	r1, r3
 8001bec:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001bf0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	685a      	ldr	r2, [r3, #4]
 8001bf8:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8001bfc:	3302      	adds	r3, #2
 8001bfe:	4413      	add	r3, r2
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	461c      	mov	r4, r3
 8001c04:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001c08:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	685a      	ldr	r2, [r3, #4]
 8001c10:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8001c14:	3303      	adds	r3, #3
 8001c16:	4413      	add	r3, r2
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	461d      	mov	r5, r3
																				  hmdt->msrm_history[c+4], hmdt->msrm_history[c+5], hmdt->msrm_history[c+6]);
 8001c1c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001c20:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	685a      	ldr	r2, [r3, #4]
 8001c28:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8001c2c:	3304      	adds	r3, #4
 8001c2e:	4413      	add	r3, r2
 8001c30:	781b      	ldrb	r3, [r3, #0]
			swprintf(text, MAXTXTLEN, L"%02d/%02d/%02d %02d:%02d %02d.%02d C", hmdt->msrm_history[c],hmdt->msrm_history[c+1], hmdt->msrm_history[c+2], hmdt->msrm_history[c+3],
 8001c32:	461e      	mov	r6, r3
																				  hmdt->msrm_history[c+4], hmdt->msrm_history[c+5], hmdt->msrm_history[c+6]);
 8001c34:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001c38:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	685a      	ldr	r2, [r3, #4]
 8001c40:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8001c44:	3305      	adds	r3, #5
 8001c46:	4413      	add	r3, r2
 8001c48:	781b      	ldrb	r3, [r3, #0]
			swprintf(text, MAXTXTLEN, L"%02d/%02d/%02d %02d:%02d %02d.%02d C", hmdt->msrm_history[c],hmdt->msrm_history[c+1], hmdt->msrm_history[c+2], hmdt->msrm_history[c+3],
 8001c4a:	603b      	str	r3, [r7, #0]
																				  hmdt->msrm_history[c+4], hmdt->msrm_history[c+5], hmdt->msrm_history[c+6]);
 8001c4c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001c50:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	685a      	ldr	r2, [r3, #4]
 8001c58:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8001c5c:	3306      	adds	r3, #6
 8001c5e:	4413      	add	r3, r2
 8001c60:	781b      	ldrb	r3, [r3, #0]
			swprintf(text, MAXTXTLEN, L"%02d/%02d/%02d %02d:%02d %02d.%02d C", hmdt->msrm_history[c],hmdt->msrm_history[c+1], hmdt->msrm_history[c+2], hmdt->msrm_history[c+3],
 8001c62:	f107 0008 	add.w	r0, r7, #8
 8001c66:	9305      	str	r3, [sp, #20]
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	9304      	str	r3, [sp, #16]
 8001c6c:	9603      	str	r6, [sp, #12]
 8001c6e:	9502      	str	r5, [sp, #8]
 8001c70:	9401      	str	r4, [sp, #4]
 8001c72:	9100      	str	r1, [sp, #0]
 8001c74:	4663      	mov	r3, ip
 8001c76:	4a12      	ldr	r2, [pc, #72]	; (8001cc0 <history_mode_prog+0x184>)
 8001c78:	2164      	movs	r1, #100	; 0x64
 8001c7a:	f008 fdd3 	bl	800a824 <swprintf>
			hagl_put_text(text, 5, i*20, RED, font6x9);
 8001c7e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	461a      	mov	r2, r3
 8001c86:	0092      	lsls	r2, r2, #2
 8001c88:	4413      	add	r3, r2
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	b21a      	sxth	r2, r3
 8001c90:	f107 0008 	add.w	r0, r7, #8
 8001c94:	4b0b      	ldr	r3, [pc, #44]	; (8001cc4 <history_mode_prog+0x188>)
 8001c96:	9300      	str	r3, [sp, #0]
 8001c98:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001c9c:	2105      	movs	r1, #5
 8001c9e:	f007 fc02 	bl	80094a6 <hagl_put_text>
		for(int i=0; i<HISTORY_NUMS; i++){
 8001ca2:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001cac:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8001cb0:	2b04      	cmp	r3, #4
 8001cb2:	f77f af7d 	ble.w	8001bb0 <history_mode_prog+0x74>
}
 8001cb6:	bf00      	nop
 8001cb8:	f507 77d2 	add.w	r7, r7, #420	; 0x1a4
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cc0:	0800ee3c 	.word	0x0800ee3c
 8001cc4:	0800f154 	.word	0x0800f154

08001cc8 <refhis>:

void refhis(uint8_t* msrm_history){
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
	load_history_from_eeprom(msrm_history);
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f000 f805 	bl	8001ce0 <load_history_from_eeprom>
}
 8001cd6:	bf00      	nop
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
	...

08001ce0 <load_history_from_eeprom>:



void load_history_from_eeprom(uint8_t msrm_history[HISTORY_NUMS*HISTORY_ROW_SIZE]){
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b086      	sub	sp, #24
 8001ce4:	af04      	add	r7, sp, #16
 8001ce6:	6078      	str	r0, [r7, #4]
	if(HAL_I2C_Mem_Read(&hi2c1, 0xa0, MEM_MSRM_START, I2C_MEMADD_SIZE_8BIT, msrm_history, HISTORY_NUMS*HISTORY_ROW_SIZE, HAL_MAX_DELAY) != HAL_OK)
 8001ce8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001cec:	9302      	str	r3, [sp, #8]
 8001cee:	2323      	movs	r3, #35	; 0x23
 8001cf0:	9301      	str	r3, [sp, #4]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	9300      	str	r3, [sp, #0]
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	21a0      	movs	r1, #160	; 0xa0
 8001cfc:	480b      	ldr	r0, [pc, #44]	; (8001d2c <load_history_from_eeprom+0x4c>)
 8001cfe:	f002 fa33 	bl	8004168 <HAL_I2C_Mem_Read>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <load_history_from_eeprom+0x2c>
							 Error_Handler();
 8001d08:	f000 fd00 	bl	800270c <Error_Handler>
	while(HAL_I2C_IsDeviceReady(&hi2c1, 0xa0, 1, HAL_MAX_DELAY) != HAL_OK);
 8001d0c:	bf00      	nop
 8001d0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d12:	2201      	movs	r2, #1
 8001d14:	21a0      	movs	r1, #160	; 0xa0
 8001d16:	4805      	ldr	r0, [pc, #20]	; (8001d2c <load_history_from_eeprom+0x4c>)
 8001d18:	f002 fb40 	bl	800439c <HAL_I2C_IsDeviceReady>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d1f5      	bne.n	8001d0e <load_history_from_eeprom+0x2e>
}
 8001d22:	bf00      	nop
 8001d24:	bf00      	nop
 8001d26:	3708      	adds	r7, #8
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	20000200 	.word	0x20000200

08001d30 <read_eeprom_memcell>:

void read_eeprom_memcell(uint8_t addr, uint8_t *memcont){
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b086      	sub	sp, #24
 8001d34:	af04      	add	r7, sp, #16
 8001d36:	4603      	mov	r3, r0
 8001d38:	6039      	str	r1, [r7, #0]
 8001d3a:	71fb      	strb	r3, [r7, #7]
	if(HAL_I2C_Mem_Read(&hi2c1, 0xa0, addr, I2C_MEMADD_SIZE_8BIT, memcont, sizeof(*memcont), HAL_MAX_DELAY) != HAL_OK)
 8001d3c:	79fb      	ldrb	r3, [r7, #7]
 8001d3e:	b29a      	uxth	r2, r3
 8001d40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d44:	9302      	str	r3, [sp, #8]
 8001d46:	2301      	movs	r3, #1
 8001d48:	9301      	str	r3, [sp, #4]
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	9300      	str	r3, [sp, #0]
 8001d4e:	2301      	movs	r3, #1
 8001d50:	21a0      	movs	r1, #160	; 0xa0
 8001d52:	480c      	ldr	r0, [pc, #48]	; (8001d84 <read_eeprom_memcell+0x54>)
 8001d54:	f002 fa08 	bl	8004168 <HAL_I2C_Mem_Read>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <read_eeprom_memcell+0x32>
							 Error_Handler();
 8001d5e:	f000 fcd5 	bl	800270c <Error_Handler>
	while(HAL_I2C_IsDeviceReady(&hi2c1, 0xa0, 1, HAL_MAX_DELAY) != HAL_OK);
 8001d62:	bf00      	nop
 8001d64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d68:	2201      	movs	r2, #1
 8001d6a:	21a0      	movs	r1, #160	; 0xa0
 8001d6c:	4805      	ldr	r0, [pc, #20]	; (8001d84 <read_eeprom_memcell+0x54>)
 8001d6e:	f002 fb15 	bl	800439c <HAL_I2C_IsDeviceReady>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d1f5      	bne.n	8001d64 <read_eeprom_memcell+0x34>
}
 8001d78:	bf00      	nop
 8001d7a:	bf00      	nop
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	20000200 	.word	0x20000200

08001d88 <save_history_to_eeprom>:
 *
 * Funkcja wysyla cala historie dzielac ja na pelne strony (8 byte'owe). Strona mniejsza niz 8 byte'ow wysylana jest na koncu.
 *
 * \param msrm tablica z pomiarami
 */
void save_history_to_eeprom(uint8_t msrm[HISTORY_NUMS*HISTORY_ROW_SIZE]){
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b08a      	sub	sp, #40	; 0x28
 8001d8c:	af04      	add	r7, sp, #16
 8001d8e:	6078      	str	r0, [r7, #4]

	// calculate number of full pages and size of the last page
	int full_pages = HISTORY_ROW_SIZE*HISTORY_NUMS/EEPROM_PAGE_SIZE;
 8001d90:	2304      	movs	r3, #4
 8001d92:	613b      	str	r3, [r7, #16]
	int last_page = HISTORY_ROW_SIZE*HISTORY_NUMS - full_pages*EEPROM_PAGE_SIZE;
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	00db      	lsls	r3, r3, #3
 8001d98:	f1c3 0323 	rsb	r3, r3, #35	; 0x23
 8001d9c:	60fb      	str	r3, [r7, #12]

	// send full pages
	for(int i=0; i<full_pages; i++){
 8001d9e:	2300      	movs	r3, #0
 8001da0:	617b      	str	r3, [r7, #20]
 8001da2:	e026      	b.n	8001df2 <save_history_to_eeprom+0x6a>

		if(HAL_I2C_Mem_Write(&hi2c1, 0xa0, MEM_MSRM_START+i*EEPROM_PAGE_SIZE, I2C_MEMADD_SIZE_8BIT, msrm+i*EEPROM_PAGE_SIZE, EEPROM_PAGE_SIZE, HAL_MAX_DELAY) != HAL_OK)
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	00db      	lsls	r3, r3, #3
 8001daa:	b29a      	uxth	r2, r3
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	00db      	lsls	r3, r3, #3
 8001db0:	4619      	mov	r1, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	440b      	add	r3, r1
 8001db6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001dba:	9102      	str	r1, [sp, #8]
 8001dbc:	2108      	movs	r1, #8
 8001dbe:	9101      	str	r1, [sp, #4]
 8001dc0:	9300      	str	r3, [sp, #0]
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	21a0      	movs	r1, #160	; 0xa0
 8001dc6:	482b      	ldr	r0, [pc, #172]	; (8001e74 <save_history_to_eeprom+0xec>)
 8001dc8:	f002 f8ba 	bl	8003f40 <HAL_I2C_Mem_Write>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <save_history_to_eeprom+0x4e>
			Error_Handler();
 8001dd2:	f000 fc9b 	bl	800270c <Error_Handler>
		while(HAL_I2C_IsDeviceReady(&hi2c1, 0xa0, 1, HAL_MAX_DELAY) != HAL_OK);
 8001dd6:	bf00      	nop
 8001dd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ddc:	2201      	movs	r2, #1
 8001dde:	21a0      	movs	r1, #160	; 0xa0
 8001de0:	4824      	ldr	r0, [pc, #144]	; (8001e74 <save_history_to_eeprom+0xec>)
 8001de2:	f002 fadb 	bl	800439c <HAL_I2C_IsDeviceReady>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d1f5      	bne.n	8001dd8 <save_history_to_eeprom+0x50>
	for(int i=0; i<full_pages; i++){
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	3301      	adds	r3, #1
 8001df0:	617b      	str	r3, [r7, #20]
 8001df2:	697a      	ldr	r2, [r7, #20]
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	429a      	cmp	r2, r3
 8001df8:	dbd4      	blt.n	8001da4 <save_history_to_eeprom+0x1c>

	}

	// send remaining page (not full)
	if(last_page >0){
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	dd25      	ble.n	8001e4c <save_history_to_eeprom+0xc4>
		if(HAL_I2C_Mem_Write(&hi2c1, 0xa0, MEM_MSRM_START+full_pages*EEPROM_PAGE_SIZE, I2C_MEMADD_SIZE_8BIT, msrm+full_pages*EEPROM_PAGE_SIZE, last_page, HAL_MAX_DELAY) != HAL_OK)
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	00db      	lsls	r3, r3, #3
 8001e06:	b299      	uxth	r1, r3
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	00db      	lsls	r3, r3, #3
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4413      	add	r3, r2
 8001e12:	68fa      	ldr	r2, [r7, #12]
 8001e14:	b292      	uxth	r2, r2
 8001e16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e1a:	9002      	str	r0, [sp, #8]
 8001e1c:	9201      	str	r2, [sp, #4]
 8001e1e:	9300      	str	r3, [sp, #0]
 8001e20:	2301      	movs	r3, #1
 8001e22:	460a      	mov	r2, r1
 8001e24:	21a0      	movs	r1, #160	; 0xa0
 8001e26:	4813      	ldr	r0, [pc, #76]	; (8001e74 <save_history_to_eeprom+0xec>)
 8001e28:	f002 f88a 	bl	8003f40 <HAL_I2C_Mem_Write>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <save_history_to_eeprom+0xae>
			Error_Handler();
 8001e32:	f000 fc6b 	bl	800270c <Error_Handler>
		while(HAL_I2C_IsDeviceReady(&hi2c1, 0xa0, 1, HAL_MAX_DELAY) != HAL_OK);
 8001e36:	bf00      	nop
 8001e38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	21a0      	movs	r1, #160	; 0xa0
 8001e40:	480c      	ldr	r0, [pc, #48]	; (8001e74 <save_history_to_eeprom+0xec>)
 8001e42:	f002 faab 	bl	800439c <HAL_I2C_IsDeviceReady>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d1f5      	bne.n	8001e38 <save_history_to_eeprom+0xb0>
	}

	uint8_t mem_ptr = 0x0;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	72fb      	strb	r3, [r7, #11]

	// set mem pointer
	HAL_I2C_Mem_Write(&hi2c1, 0xa0, 0x7F, I2C_MEMADD_SIZE_8BIT, &mem_ptr, 1, HAL_MAX_DELAY);
 8001e50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e54:	9302      	str	r3, [sp, #8]
 8001e56:	2301      	movs	r3, #1
 8001e58:	9301      	str	r3, [sp, #4]
 8001e5a:	f107 030b 	add.w	r3, r7, #11
 8001e5e:	9300      	str	r3, [sp, #0]
 8001e60:	2301      	movs	r3, #1
 8001e62:	227f      	movs	r2, #127	; 0x7f
 8001e64:	21a0      	movs	r1, #160	; 0xa0
 8001e66:	4803      	ldr	r0, [pc, #12]	; (8001e74 <save_history_to_eeprom+0xec>)
 8001e68:	f002 f86a 	bl	8003f40 <HAL_I2C_Mem_Write>

}
 8001e6c:	bf00      	nop
 8001e6e:	3718      	adds	r7, #24
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	20000200 	.word	0x20000200

08001e78 <save_entry_to_eeprom>:
 *  miejscu MEM_POINTER. Po zapisie do pamieci aktualizuje wskaznik pamieci MEM_POINTER
 *
 *  \param entry dane (domyslnie uzywany do zapisu linii informacji data+czas+odczyt temp)
 *  \param size	rozmiar danych w byte'ach
 */
void save_entry_to_eeprom(uint8_t* entry, int size){
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b088      	sub	sp, #32
 8001e7c:	af04      	add	r7, sp, #16
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]

	uint8_t mem_ptr;

	// get mem pointer
	if(HAL_I2C_Mem_Read(&hi2c1, 0xa0, MEM_POINTER, I2C_MEMADD_SIZE_8BIT, &mem_ptr, 1, HAL_MAX_DELAY) != HAL_OK)
 8001e82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e86:	9302      	str	r3, [sp, #8]
 8001e88:	2301      	movs	r3, #1
 8001e8a:	9301      	str	r3, [sp, #4]
 8001e8c:	f107 030b 	add.w	r3, r7, #11
 8001e90:	9300      	str	r3, [sp, #0]
 8001e92:	2301      	movs	r3, #1
 8001e94:	227f      	movs	r2, #127	; 0x7f
 8001e96:	21a0      	movs	r1, #160	; 0xa0
 8001e98:	4829      	ldr	r0, [pc, #164]	; (8001f40 <save_entry_to_eeprom+0xc8>)
 8001e9a:	f002 f965 	bl	8004168 <HAL_I2C_Mem_Read>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d001      	beq.n	8001ea8 <save_entry_to_eeprom+0x30>
							 Error_Handler();
 8001ea4:	f000 fc32 	bl	800270c <Error_Handler>
	while(HAL_I2C_IsDeviceReady(&hi2c1, 0xa0, 1, HAL_MAX_DELAY) != HAL_OK);
 8001ea8:	bf00      	nop
 8001eaa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001eae:	2201      	movs	r2, #1
 8001eb0:	21a0      	movs	r1, #160	; 0xa0
 8001eb2:	4823      	ldr	r0, [pc, #140]	; (8001f40 <save_entry_to_eeprom+0xc8>)
 8001eb4:	f002 fa72 	bl	800439c <HAL_I2C_IsDeviceReady>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d1f5      	bne.n	8001eaa <save_entry_to_eeprom+0x32>

	// write to mem
	for(int i=0; i<size; i++){
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	60fb      	str	r3, [r7, #12]
 8001ec2:	e022      	b.n	8001f0a <save_entry_to_eeprom+0x92>
		uint8_t tmp[2] = {mem_ptr, *(entry+i)};
 8001ec4:	7afb      	ldrb	r3, [r7, #11]
 8001ec6:	723b      	strb	r3, [r7, #8]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	4413      	add	r3, r2
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	727b      	strb	r3, [r7, #9]
		HAL_I2C_Master_Transmit(&hi2c1, 0xa0, tmp, sizeof tmp, HAL_MAX_DELAY);
 8001ed2:	f107 0208 	add.w	r2, r7, #8
 8001ed6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001eda:	9300      	str	r3, [sp, #0]
 8001edc:	2302      	movs	r3, #2
 8001ede:	21a0      	movs	r1, #160	; 0xa0
 8001ee0:	4817      	ldr	r0, [pc, #92]	; (8001f40 <save_entry_to_eeprom+0xc8>)
 8001ee2:	f001 fe43 	bl	8003b6c <HAL_I2C_Master_Transmit>
		while(HAL_I2C_IsDeviceReady(&hi2c1, 0xa0, 1, HAL_MAX_DELAY) != HAL_OK);
 8001ee6:	bf00      	nop
 8001ee8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001eec:	2201      	movs	r2, #1
 8001eee:	21a0      	movs	r1, #160	; 0xa0
 8001ef0:	4813      	ldr	r0, [pc, #76]	; (8001f40 <save_entry_to_eeprom+0xc8>)
 8001ef2:	f002 fa53 	bl	800439c <HAL_I2C_IsDeviceReady>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d1f5      	bne.n	8001ee8 <save_entry_to_eeprom+0x70>
		mem_ptr++;
 8001efc:	7afb      	ldrb	r3, [r7, #11]
 8001efe:	3301      	adds	r3, #1
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	72fb      	strb	r3, [r7, #11]
	for(int i=0; i<size; i++){
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	3301      	adds	r3, #1
 8001f08:	60fb      	str	r3, [r7, #12]
 8001f0a:	68fa      	ldr	r2, [r7, #12]
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	dbd8      	blt.n	8001ec4 <save_entry_to_eeprom+0x4c>
	}

	// set mem pointer (zeruj jesli wystapilo przekroczenie zakresu historii: 5 pomiarow)
	if(mem_ptr > (MEM_MSRM_START+HISTORY_ROW_SIZE*HISTORY_NUMS)-1){
 8001f12:	7afb      	ldrb	r3, [r7, #11]
 8001f14:	2b22      	cmp	r3, #34	; 0x22
 8001f16:	d901      	bls.n	8001f1c <save_entry_to_eeprom+0xa4>
		mem_ptr = 0;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	72fb      	strb	r3, [r7, #11]
	}

	// write mem pointer to mem
	HAL_I2C_Mem_Write(&hi2c1, 0xa0, 0x7F, I2C_MEMADD_SIZE_8BIT, &mem_ptr, 1, HAL_MAX_DELAY);
 8001f1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f20:	9302      	str	r3, [sp, #8]
 8001f22:	2301      	movs	r3, #1
 8001f24:	9301      	str	r3, [sp, #4]
 8001f26:	f107 030b 	add.w	r3, r7, #11
 8001f2a:	9300      	str	r3, [sp, #0]
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	227f      	movs	r2, #127	; 0x7f
 8001f30:	21a0      	movs	r1, #160	; 0xa0
 8001f32:	4803      	ldr	r0, [pc, #12]	; (8001f40 <save_entry_to_eeprom+0xc8>)
 8001f34:	f002 f804 	bl	8003f40 <HAL_I2C_Mem_Write>


}
 8001f38:	bf00      	nop
 8001f3a:	3710      	adds	r7, #16
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	20000200 	.word	0x20000200

08001f44 <get_entry>:

void get_entry(uint8_t *entry){
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b08a      	sub	sp, #40	; 0x28
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]

	RTC_TimeTypeDef mTime;
	RTC_DateTypeDef mDate;

	HAL_RTC_GetTime(&hrtc, &mTime, RTC_FORMAT_BIN);
 8001f4c:	f107 030c 	add.w	r3, r7, #12
 8001f50:	2200      	movs	r2, #0
 8001f52:	4619      	mov	r1, r3
 8001f54:	4827      	ldr	r0, [pc, #156]	; (8001ff4 <get_entry+0xb0>)
 8001f56:	f004 fb77 	bl	8006648 <HAL_RTC_GetTime>
  	HAL_RTC_GetDate(&hrtc, &mDate, RTC_FORMAT_BIN);
 8001f5a:	f107 0308 	add.w	r3, r7, #8
 8001f5e:	2200      	movs	r2, #0
 8001f60:	4619      	mov	r1, r3
 8001f62:	4824      	ldr	r0, [pc, #144]	; (8001ff4 <get_entry+0xb0>)
 8001f64:	f004 fc53 	bl	800680e <HAL_RTC_GetDate>

  	float temp = lps_read_temperature(U_CELSIUS);
 8001f68:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8001ff8 <get_entry+0xb4>
 8001f6c:	f7ff fb3e 	bl	80015ec <lps_read_temperature>
 8001f70:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24

  	uint8_t int_part = (uint8_t) temp;
 8001f74:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001f78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f7c:	edc7 7a00 	vstr	s15, [r7]
 8001f80:	783b      	ldrb	r3, [r7, #0]
 8001f82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  	uint8_t dec_part = (uint8_t)((temp-int_part)*100);
 8001f86:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001f8a:	ee07 3a90 	vmov	s15, r3
 8001f8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f92:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001f96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f9a:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001ffc <get_entry+0xb8>
 8001f9e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fa2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fa6:	edc7 7a00 	vstr	s15, [r7]
 8001faa:	783b      	ldrb	r3, [r7, #0]
 8001fac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  	*entry = mDate.Date;
 8001fb0:	7aba      	ldrb	r2, [r7, #10]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	701a      	strb	r2, [r3, #0]
  	*(entry+1) = mDate.Month;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	3301      	adds	r3, #1
 8001fba:	7a7a      	ldrb	r2, [r7, #9]
 8001fbc:	701a      	strb	r2, [r3, #0]
  	*(entry+2) = mDate.Year;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	3302      	adds	r3, #2
 8001fc2:	7afa      	ldrb	r2, [r7, #11]
 8001fc4:	701a      	strb	r2, [r3, #0]
	*(entry+3) = mTime.Hours;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	3303      	adds	r3, #3
 8001fca:	7b3a      	ldrb	r2, [r7, #12]
 8001fcc:	701a      	strb	r2, [r3, #0]
	*(entry+4) = mTime.Minutes;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	3304      	adds	r3, #4
 8001fd2:	7b7a      	ldrb	r2, [r7, #13]
 8001fd4:	701a      	strb	r2, [r3, #0]
	*(entry+5) = int_part;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	3305      	adds	r3, #5
 8001fda:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001fde:	701a      	strb	r2, [r3, #0]
	*(entry+6) = dec_part;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	3306      	adds	r3, #6
 8001fe4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8001fe8:	701a      	strb	r2, [r3, #0]
}
 8001fea:	bf00      	nop
 8001fec:	3728      	adds	r7, #40	; 0x28
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	20000334 	.word	0x20000334
 8001ff8:	00000000 	.word	0x00000000
 8001ffc:	42c80000 	.word	0x42c80000

08002000 <printHistory>:


void printHistory(uint8_t msrm_history[HISTORY_NUMS*EEPROM_PAGE_SIZE]){
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
	for(int i=0; i<HISTORY_NUMS; i++){
 8002008:	2300      	movs	r3, #0
 800200a:	60fb      	str	r3, [r7, #12]
 800200c:	e01c      	b.n	8002048 <printHistory+0x48>
		for(int j=0; j<HISTORY_ROW_SIZE; j++){
 800200e:	2300      	movs	r3, #0
 8002010:	60bb      	str	r3, [r7, #8]
 8002012:	e010      	b.n	8002036 <printHistory+0x36>
			printf("%d ", msrm_history[i*HISTORY_ROW_SIZE+j]);
 8002014:	68fa      	ldr	r2, [r7, #12]
 8002016:	4613      	mov	r3, r2
 8002018:	00db      	lsls	r3, r3, #3
 800201a:	1a9a      	subs	r2, r3, r2
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	4413      	add	r3, r2
 8002020:	461a      	mov	r2, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4413      	add	r3, r2
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	4619      	mov	r1, r3
 800202a:	480b      	ldr	r0, [pc, #44]	; (8002058 <printHistory+0x58>)
 800202c:	f008 fac2 	bl	800a5b4 <iprintf>
		for(int j=0; j<HISTORY_ROW_SIZE; j++){
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	3301      	adds	r3, #1
 8002034:	60bb      	str	r3, [r7, #8]
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	2b06      	cmp	r3, #6
 800203a:	ddeb      	ble.n	8002014 <printHistory+0x14>
		}
		printf("\r\n");
 800203c:	4807      	ldr	r0, [pc, #28]	; (800205c <printHistory+0x5c>)
 800203e:	f008 fb55 	bl	800a6ec <puts>
	for(int i=0; i<HISTORY_NUMS; i++){
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	3301      	adds	r3, #1
 8002046:	60fb      	str	r3, [r7, #12]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2b04      	cmp	r3, #4
 800204c:	dddf      	ble.n	800200e <printHistory+0xe>
	}
}
 800204e:	bf00      	nop
 8002050:	bf00      	nop
 8002052:	3710      	adds	r7, #16
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	0800eed0 	.word	0x0800eed0
 800205c:	0800eed4 	.word	0x0800eed4

08002060 <checkFlags>:

void checkFlags(){
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
	if(__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST)){
 8002064:	4b0b      	ldr	r3, [pc, #44]	; (8002094 <checkFlags+0x34>)
 8002066:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800206a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d00b      	beq.n	800208a <checkFlags+0x2a>
			printf("System zostal zresetowany przez Watchdoga\r\n");
 8002072:	4809      	ldr	r0, [pc, #36]	; (8002098 <checkFlags+0x38>)
 8002074:	f008 fb3a 	bl	800a6ec <puts>
			__HAL_RCC_CLEAR_RESET_FLAGS();
 8002078:	4b06      	ldr	r3, [pc, #24]	; (8002094 <checkFlags+0x34>)
 800207a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800207e:	4a05      	ldr	r2, [pc, #20]	; (8002094 <checkFlags+0x34>)
 8002080:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002084:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
		} else{
			printf("System zostal uruchomiony poprawnie\r\n");
		}
}
 8002088:	e002      	b.n	8002090 <checkFlags+0x30>
			printf("System zostal uruchomiony poprawnie\r\n");
 800208a:	4804      	ldr	r0, [pc, #16]	; (800209c <checkFlags+0x3c>)
 800208c:	f008 fb2e 	bl	800a6ec <puts>
}
 8002090:	bf00      	nop
 8002092:	bd80      	pop	{r7, pc}
 8002094:	40021000 	.word	0x40021000
 8002098:	0800eed8 	.word	0x0800eed8
 800209c:	0800ef04 	.word	0x0800ef04

080020a0 <fflush_sc_buff>:

/*
 * ____ W funkcji trzeba poprawic korzystanie z globalnej zmiennej ____ line ____
 */
void fflush_sc_buff(prgsdata_t *prgs){
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]


	if(sf_buf_pos>0){
 80020a8:	4b24      	ldr	r3, [pc, #144]	; (800213c <fflush_sc_buff+0x9c>)
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d040      	beq.n	8002132 <fflush_sc_buff+0x92>
		sf_buf[sf_buf_pos] = '\0';
 80020b0:	4b22      	ldr	r3, [pc, #136]	; (800213c <fflush_sc_buff+0x9c>)
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	461a      	mov	r2, r3
 80020b6:	4b22      	ldr	r3, [pc, #136]	; (8002140 <fflush_sc_buff+0xa0>)
 80020b8:	2100      	movs	r1, #0
 80020ba:	5499      	strb	r1, [r3, r2]
		int i=0;
 80020bc:	2300      	movs	r3, #0
 80020be:	60fb      	str	r3, [r7, #12]
		while(sf_buf[i]!='\0'){
 80020c0:	e02e      	b.n	8002120 <fflush_sc_buff+0x80>
			if(sf_buf[i]!='\r'){
 80020c2:	4a1f      	ldr	r2, [pc, #124]	; (8002140 <fflush_sc_buff+0xa0>)
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	4413      	add	r3, r2
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	2b0d      	cmp	r3, #13
 80020cc:	d007      	beq.n	80020de <fflush_sc_buff+0x3e>
				strncat(line, (char *)&sf_buf[i], 1);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	4a1b      	ldr	r2, [pc, #108]	; (8002140 <fflush_sc_buff+0xa0>)
 80020d2:	4413      	add	r3, r2
 80020d4:	2201      	movs	r2, #1
 80020d6:	4619      	mov	r1, r3
 80020d8:	481a      	ldr	r0, [pc, #104]	; (8002144 <fflush_sc_buff+0xa4>)
 80020da:	f008 fb90 	bl	800a7fe <strncat>
			}

			if(sf_buf[i]=='\r') {
 80020de:	4a18      	ldr	r2, [pc, #96]	; (8002140 <fflush_sc_buff+0xa0>)
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	4413      	add	r3, r2
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	2b0d      	cmp	r3, #13
 80020e8:	d10a      	bne.n	8002100 <fflush_sc_buff+0x60>
				printf("\n");
 80020ea:	200a      	movs	r0, #10
 80020ec:	f008 fa7a 	bl	800a5e4 <putchar>
				prsCmd(prgs, line);
 80020f0:	4914      	ldr	r1, [pc, #80]	; (8002144 <fflush_sc_buff+0xa4>)
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f000 f846 	bl	8002184 <prsCmd>
				clrTxtBuff(line, MAXTXTLEN);
 80020f8:	2164      	movs	r1, #100	; 0x64
 80020fa:	4812      	ldr	r0, [pc, #72]	; (8002144 <fflush_sc_buff+0xa4>)
 80020fc:	f000 f826 	bl	800214c <clrTxtBuff>
			}

			printf("%c", sf_buf[i]);
 8002100:	4a0f      	ldr	r2, [pc, #60]	; (8002140 <fflush_sc_buff+0xa0>)
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	4413      	add	r3, r2
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	4618      	mov	r0, r3
 800210a:	f008 fa6b 	bl	800a5e4 <putchar>
			i++;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	3301      	adds	r3, #1
 8002112:	60fb      	str	r3, [r7, #12]
			fflush(stdout);
 8002114:	4b0c      	ldr	r3, [pc, #48]	; (8002148 <fflush_sc_buff+0xa8>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	4618      	mov	r0, r3
 800211c:	f007 fb46 	bl	80097ac <fflush>
		while(sf_buf[i]!='\0'){
 8002120:	4a07      	ldr	r2, [pc, #28]	; (8002140 <fflush_sc_buff+0xa0>)
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	4413      	add	r3, r2
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d1ca      	bne.n	80020c2 <fflush_sc_buff+0x22>
		}
		sf_buf_pos = 0;
 800212c:	4b03      	ldr	r3, [pc, #12]	; (800213c <fflush_sc_buff+0x9c>)
 800212e:	2200      	movs	r2, #0
 8002130:	701a      	strb	r2, [r3, #0]
	}
}
 8002132:	bf00      	nop
 8002134:	3710      	adds	r7, #16
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	200002cc 	.word	0x200002cc
 8002140:	20000268 	.word	0x20000268
 8002144:	200002d0 	.word	0x200002d0
 8002148:	20000014 	.word	0x20000014

0800214c <clrTxtBuff>:

void clrTxtBuff(char* str, int size){
 800214c:	b480      	push	{r7}
 800214e:	b085      	sub	sp, #20
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	6039      	str	r1, [r7, #0]
	for(int i=0; i<size; i++){
 8002156:	2300      	movs	r3, #0
 8002158:	60fb      	str	r3, [r7, #12]
 800215a:	e007      	b.n	800216c <clrTxtBuff+0x20>
		str[i] = '\0';
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	4413      	add	r3, r2
 8002162:	2200      	movs	r2, #0
 8002164:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<size; i++){
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	3301      	adds	r3, #1
 800216a:	60fb      	str	r3, [r7, #12]
 800216c:	68fa      	ldr	r2, [r7, #12]
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	429a      	cmp	r2, r3
 8002172:	dbf3      	blt.n	800215c <clrTxtBuff+0x10>
	}
}
 8002174:	bf00      	nop
 8002176:	bf00      	nop
 8002178:	3714      	adds	r7, #20
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
	...

08002184 <prsCmd>:

void prsCmd(prgsdata_t *prgs, char* cmd){
 8002184:	b580      	push	{r7, lr}
 8002186:	b090      	sub	sp, #64	; 0x40
 8002188:	af02      	add	r7, sp, #8
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
	char inst[10];
	int offset=0;
 800218e:	2300      	movs	r3, #0
 8002190:	62bb      	str	r3, [r7, #40]	; 0x28

	sscanf(cmd, "%s %n", inst, &offset);
 8002192:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002196:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800219a:	496e      	ldr	r1, [pc, #440]	; (8002354 <prsCmd+0x1d0>)
 800219c:	6838      	ldr	r0, [r7, #0]
 800219e:	f008 fabd 	bl	800a71c <siscanf>

	if( strcmp(inst, "setdate" ) == 0){
 80021a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021a6:	496c      	ldr	r1, [pc, #432]	; (8002358 <prsCmd+0x1d4>)
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7fe f811 	bl	80001d0 <strcmp>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d115      	bne.n	80021e0 <prsCmd+0x5c>
		int d,m,y;
		sscanf(cmd+offset, "%d/%d/%d", &d, &m, &y);
 80021b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021b6:	461a      	mov	r2, r3
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	1898      	adds	r0, r3, r2
 80021bc:	f107 0120 	add.w	r1, r7, #32
 80021c0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80021c4:	f107 031c 	add.w	r3, r7, #28
 80021c8:	9300      	str	r3, [sp, #0]
 80021ca:	460b      	mov	r3, r1
 80021cc:	4963      	ldr	r1, [pc, #396]	; (800235c <prsCmd+0x1d8>)
 80021ce:	f008 faa5 	bl	800a71c <siscanf>
		setDate(d,m,y);
 80021d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d4:	6a39      	ldr	r1, [r7, #32]
 80021d6:	69fa      	ldr	r2, [r7, #28]
 80021d8:	4618      	mov	r0, r3
 80021da:	f000 f999 	bl	8002510 <setDate>
		refhis(prgs->hmdt->msrm_history);
	}
	else if( strcmp(inst, "chprog" ) == 0){
		chprog(&prgs->which_program);
	}
}
 80021de:	e0b5      	b.n	800234c <prsCmd+0x1c8>
	else if( strcmp(inst, "settime" ) == 0){
 80021e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021e4:	495e      	ldr	r1, [pc, #376]	; (8002360 <prsCmd+0x1dc>)
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7fd fff2 	bl	80001d0 <strcmp>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d111      	bne.n	8002216 <prsCmd+0x92>
		sscanf(cmd+offset, "%d:%d", &h, &m);
 80021f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021f4:	461a      	mov	r2, r3
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	1898      	adds	r0, r3, r2
 80021fa:	f107 0314 	add.w	r3, r7, #20
 80021fe:	f107 0218 	add.w	r2, r7, #24
 8002202:	4958      	ldr	r1, [pc, #352]	; (8002364 <prsCmd+0x1e0>)
 8002204:	f008 fa8a 	bl	800a71c <siscanf>
		setTime(h, m);
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	697a      	ldr	r2, [r7, #20]
 800220c:	4611      	mov	r1, r2
 800220e:	4618      	mov	r0, r3
 8002210:	f000 f99c 	bl	800254c <setTime>
}
 8002214:	e09a      	b.n	800234c <prsCmd+0x1c8>
	else if( strcmp(inst, "printtime" ) == 0){
 8002216:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800221a:	4953      	ldr	r1, [pc, #332]	; (8002368 <prsCmd+0x1e4>)
 800221c:	4618      	mov	r0, r3
 800221e:	f7fd ffd7 	bl	80001d0 <strcmp>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d102      	bne.n	800222e <prsCmd+0xaa>
		printTime();
 8002228:	f000 f9d0 	bl	80025cc <printTime>
}
 800222c:	e08e      	b.n	800234c <prsCmd+0x1c8>
	else if( strcmp(inst, "printdate" ) == 0){
 800222e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002232:	494e      	ldr	r1, [pc, #312]	; (800236c <prsCmd+0x1e8>)
 8002234:	4618      	mov	r0, r3
 8002236:	f7fd ffcb 	bl	80001d0 <strcmp>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d102      	bne.n	8002246 <prsCmd+0xc2>
		printDate();
 8002240:	f000 f9a4 	bl	800258c <printDate>
}
 8002244:	e082      	b.n	800234c <prsCmd+0x1c8>
	else if( strcmp(inst, "man" ) == 0){
 8002246:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800224a:	4949      	ldr	r1, [pc, #292]	; (8002370 <prsCmd+0x1ec>)
 800224c:	4618      	mov	r0, r3
 800224e:	f7fd ffbf 	bl	80001d0 <strcmp>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d102      	bne.n	800225e <prsCmd+0xda>
		printMan();
 8002258:	f000 f914 	bl	8002484 <printMan>
}
 800225c:	e076      	b.n	800234c <prsCmd+0x1c8>
	else if( strcmp(inst, "save" ) == 0){
 800225e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002262:	4944      	ldr	r1, [pc, #272]	; (8002374 <prsCmd+0x1f0>)
 8002264:	4618      	mov	r0, r3
 8002266:	f7fd ffb3 	bl	80001d0 <strcmp>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d102      	bne.n	8002276 <prsCmd+0xf2>
		saveEntry();
 8002270:	f000 f8d0 	bl	8002414 <saveEntry>
}
 8002274:	e06a      	b.n	800234c <prsCmd+0x1c8>
	else if( strcmp(inst, "printmem" ) == 0){
 8002276:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800227a:	493f      	ldr	r1, [pc, #252]	; (8002378 <prsCmd+0x1f4>)
 800227c:	4618      	mov	r0, r3
 800227e:	f7fd ffa7 	bl	80001d0 <strcmp>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d102      	bne.n	800228e <prsCmd+0x10a>
		printMem();
 8002288:	f000 f8b5 	bl	80023f6 <printMem>
}
 800228c:	e05e      	b.n	800234c <prsCmd+0x1c8>
	else if( strcmp(inst, "erasemem" ) == 0){
 800228e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002292:	493a      	ldr	r1, [pc, #232]	; (800237c <prsCmd+0x1f8>)
 8002294:	4618      	mov	r0, r3
 8002296:	f7fd ff9b 	bl	80001d0 <strcmp>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d102      	bne.n	80022a6 <prsCmd+0x122>
		eraseHis();
 80022a0:	f000 f890 	bl	80023c4 <eraseHis>
}
 80022a4:	e052      	b.n	800234c <prsCmd+0x1c8>
	else if( strcmp(inst, "memr" ) == 0){
 80022a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022aa:	4935      	ldr	r1, [pc, #212]	; (8002380 <prsCmd+0x1fc>)
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7fd ff8f 	bl	80001d0 <strcmp>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d10f      	bne.n	80022d8 <prsCmd+0x154>
		sscanf(cmd+offset, "%d", &addr);
 80022b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ba:	461a      	mov	r2, r3
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	4413      	add	r3, r2
 80022c0:	f107 0210 	add.w	r2, r7, #16
 80022c4:	492f      	ldr	r1, [pc, #188]	; (8002384 <prsCmd+0x200>)
 80022c6:	4618      	mov	r0, r3
 80022c8:	f008 fa28 	bl	800a71c <siscanf>
		memr((uint8_t)addr);
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	4618      	mov	r0, r3
 80022d2:	f000 f85f 	bl	8002394 <memr>
}
 80022d6:	e039      	b.n	800234c <prsCmd+0x1c8>
	else if( strcmp(inst, "setal" ) == 0){
 80022d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022dc:	492a      	ldr	r1, [pc, #168]	; (8002388 <prsCmd+0x204>)
 80022de:	4618      	mov	r0, r3
 80022e0:	f7fd ff76 	bl	80001d0 <strcmp>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d113      	bne.n	8002312 <prsCmd+0x18e>
		sscanf(cmd+offset, "%d:%d", &m, &s);
 80022ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ec:	461a      	mov	r2, r3
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	1898      	adds	r0, r3, r2
 80022f2:	f107 0308 	add.w	r3, r7, #8
 80022f6:	f107 020c 	add.w	r2, r7, #12
 80022fa:	491a      	ldr	r1, [pc, #104]	; (8002364 <prsCmd+0x1e0>)
 80022fc:	f008 fa0e 	bl	800a71c <siscanf>
		set_alarm_m_s(m, s);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	b2db      	uxtb	r3, r3
 8002304:	68ba      	ldr	r2, [r7, #8]
 8002306:	b2d2      	uxtb	r2, r2
 8002308:	4611      	mov	r1, r2
 800230a:	4618      	mov	r0, r3
 800230c:	f000 f97c 	bl	8002608 <set_alarm_m_s>
}
 8002310:	e01c      	b.n	800234c <prsCmd+0x1c8>
	else if( strcmp(inst, "refhis" ) == 0){
 8002312:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002316:	491d      	ldr	r1, [pc, #116]	; (800238c <prsCmd+0x208>)
 8002318:	4618      	mov	r0, r3
 800231a:	f7fd ff59 	bl	80001d0 <strcmp>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d106      	bne.n	8002332 <prsCmd+0x1ae>
		refhis(prgs->hmdt->msrm_history);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	4618      	mov	r0, r3
 800232c:	f7ff fccc 	bl	8001cc8 <refhis>
}
 8002330:	e00c      	b.n	800234c <prsCmd+0x1c8>
	else if( strcmp(inst, "chprog" ) == 0){
 8002332:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002336:	4916      	ldr	r1, [pc, #88]	; (8002390 <prsCmd+0x20c>)
 8002338:	4618      	mov	r0, r3
 800233a:	f7fd ff49 	bl	80001d0 <strcmp>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d103      	bne.n	800234c <prsCmd+0x1c8>
		chprog(&prgs->which_program);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	4618      	mov	r0, r3
 8002348:	f000 f874 	bl	8002434 <chprog>
}
 800234c:	bf00      	nop
 800234e:	3738      	adds	r7, #56	; 0x38
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	0800ef2c 	.word	0x0800ef2c
 8002358:	0800ef34 	.word	0x0800ef34
 800235c:	0800ef3c 	.word	0x0800ef3c
 8002360:	0800ef48 	.word	0x0800ef48
 8002364:	0800ef50 	.word	0x0800ef50
 8002368:	0800ef58 	.word	0x0800ef58
 800236c:	0800ef64 	.word	0x0800ef64
 8002370:	0800ef70 	.word	0x0800ef70
 8002374:	0800ef74 	.word	0x0800ef74
 8002378:	0800ef7c 	.word	0x0800ef7c
 800237c:	0800ef88 	.word	0x0800ef88
 8002380:	0800ef94 	.word	0x0800ef94
 8002384:	0800ef9c 	.word	0x0800ef9c
 8002388:	0800efa0 	.word	0x0800efa0
 800238c:	0800efa8 	.word	0x0800efa8
 8002390:	0800efb0 	.word	0x0800efb0

08002394 <memr>:

void memr(uint8_t addr){
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	4603      	mov	r3, r0
 800239c:	71fb      	strb	r3, [r7, #7]
	uint8_t cont;
	read_eeprom_memcell(addr, &cont);
 800239e:	f107 020f 	add.w	r2, r7, #15
 80023a2:	79fb      	ldrb	r3, [r7, #7]
 80023a4:	4611      	mov	r1, r2
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7ff fcc2 	bl	8001d30 <read_eeprom_memcell>
	printf("%x %d\r\n", addr, cont);
 80023ac:	79fb      	ldrb	r3, [r7, #7]
 80023ae:	7bfa      	ldrb	r2, [r7, #15]
 80023b0:	4619      	mov	r1, r3
 80023b2:	4803      	ldr	r0, [pc, #12]	; (80023c0 <memr+0x2c>)
 80023b4:	f008 f8fe 	bl	800a5b4 <iprintf>
}
 80023b8:	bf00      	nop
 80023ba:	3710      	adds	r7, #16
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	0800efb8 	.word	0x0800efb8

080023c4 <eraseHis>:

void eraseHis(){
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b08a      	sub	sp, #40	; 0x28
 80023c8:	af00      	add	r7, sp, #0
	uint8_t msrm[HISTORY_NUMS*HISTORY_ROW_SIZE];

	for(int i=0; i<HISTORY_NUMS*HISTORY_ROW_SIZE; i++)
 80023ca:	2300      	movs	r3, #0
 80023cc:	627b      	str	r3, [r7, #36]	; 0x24
 80023ce:	e007      	b.n	80023e0 <eraseHis+0x1c>
		msrm[i] = '\0';
 80023d0:	463a      	mov	r2, r7
 80023d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d4:	4413      	add	r3, r2
 80023d6:	2200      	movs	r2, #0
 80023d8:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<HISTORY_NUMS*HISTORY_ROW_SIZE; i++)
 80023da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023dc:	3301      	adds	r3, #1
 80023de:	627b      	str	r3, [r7, #36]	; 0x24
 80023e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e2:	2b22      	cmp	r3, #34	; 0x22
 80023e4:	ddf4      	ble.n	80023d0 <eraseHis+0xc>
	save_history_to_eeprom(msrm);
 80023e6:	463b      	mov	r3, r7
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7ff fccd 	bl	8001d88 <save_history_to_eeprom>
}
 80023ee:	bf00      	nop
 80023f0:	3728      	adds	r7, #40	; 0x28
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <printMem>:

void printMem(){
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b08a      	sub	sp, #40	; 0x28
 80023fa:	af00      	add	r7, sp, #0
	uint8_t msrm_history[HISTORY_NUMS*HISTORY_ROW_SIZE];

	load_history_from_eeprom(msrm_history); // tu jest blad
 80023fc:	1d3b      	adds	r3, r7, #4
 80023fe:	4618      	mov	r0, r3
 8002400:	f7ff fc6e 	bl	8001ce0 <load_history_from_eeprom>
	printHistory(msrm_history);				// tu jest blad
 8002404:	1d3b      	adds	r3, r7, #4
 8002406:	4618      	mov	r0, r3
 8002408:	f7ff fdfa 	bl	8002000 <printHistory>
}
 800240c:	bf00      	nop
 800240e:	3728      	adds	r7, #40	; 0x28
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}

08002414 <saveEntry>:

void saveEntry(){
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
	uint8_t entry[HISTORY_ROW_SIZE];
	get_entry(entry); // czy ja tutaj nie potrzebuje zaalokowac sobie 7 komorek pamieci?
 800241a:	463b      	mov	r3, r7
 800241c:	4618      	mov	r0, r3
 800241e:	f7ff fd91 	bl	8001f44 <get_entry>
	save_entry_to_eeprom(entry,HISTORY_ROW_SIZE);
 8002422:	463b      	mov	r3, r7
 8002424:	2107      	movs	r1, #7
 8002426:	4618      	mov	r0, r3
 8002428:	f7ff fd26 	bl	8001e78 <save_entry_to_eeprom>
}
 800242c:	bf00      	nop
 800242e:	3708      	adds	r7, #8
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}

08002434 <chprog>:

void chprog(prog_mode_t *which_prog){
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
	if(*which_prog == live_mode) *which_prog = history_mode;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d103      	bne.n	800244c <chprog+0x18>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2201      	movs	r2, #1
 8002448:	701a      	strb	r2, [r3, #0]
 800244a:	e006      	b.n	800245a <chprog+0x26>
	else if(*which_prog == history_mode) *which_prog = live_mode;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	2b01      	cmp	r3, #1
 8002452:	d102      	bne.n	800245a <chprog+0x26>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	701a      	strb	r2, [r3, #0]
	paintScreenBlack();
 800245a:	f000 f804 	bl	8002466 <paintScreenBlack>
}
 800245e:	bf00      	nop
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <paintScreenBlack>:

void paintScreenBlack(){
 8002466:	b580      	push	{r7, lr}
 8002468:	b082      	sub	sp, #8
 800246a:	af02      	add	r7, sp, #8
	lcd_fill_box(0, 0, LCD_WIDTH, LCD_HEIGHT, BLACK);
 800246c:	2300      	movs	r3, #0
 800246e:	9300      	str	r3, [sp, #0]
 8002470:	2380      	movs	r3, #128	; 0x80
 8002472:	22a0      	movs	r2, #160	; 0xa0
 8002474:	2100      	movs	r1, #0
 8002476:	2000      	movs	r0, #0
 8002478:	f7fe ff93 	bl	80013a2 <lcd_fill_box>
}
 800247c:	bf00      	nop
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
	...

08002484 <printMan>:


void printMan(){
 8002484:	b580      	push	{r7, lr}
 8002486:	af00      	add	r7, sp, #0
	printf("\r\n ***** CONSOLE MANUAL ****** \r\n\n");
 8002488:	4814      	ldr	r0, [pc, #80]	; (80024dc <printMan+0x58>)
 800248a:	f008 f92f 	bl	800a6ec <puts>
	printf("setdate dd/mm/yy\r\n");
 800248e:	4814      	ldr	r0, [pc, #80]	; (80024e0 <printMan+0x5c>)
 8002490:	f008 f92c 	bl	800a6ec <puts>
	printf("settime hh:mm\r\n");
 8002494:	4813      	ldr	r0, [pc, #76]	; (80024e4 <printMan+0x60>)
 8002496:	f008 f929 	bl	800a6ec <puts>
	printf("printtime\r\n");
 800249a:	4813      	ldr	r0, [pc, #76]	; (80024e8 <printMan+0x64>)
 800249c:	f008 f926 	bl	800a6ec <puts>
	printf("printdate\r\n");
 80024a0:	4812      	ldr	r0, [pc, #72]	; (80024ec <printMan+0x68>)
 80024a2:	f008 f923 	bl	800a6ec <puts>
	printf("save\r\n");
 80024a6:	4812      	ldr	r0, [pc, #72]	; (80024f0 <printMan+0x6c>)
 80024a8:	f008 f920 	bl	800a6ec <puts>
	printf("printmem\r\n");
 80024ac:	4811      	ldr	r0, [pc, #68]	; (80024f4 <printMan+0x70>)
 80024ae:	f008 f91d 	bl	800a6ec <puts>
	printf("erasemem\r\n");
 80024b2:	4811      	ldr	r0, [pc, #68]	; (80024f8 <printMan+0x74>)
 80024b4:	f008 f91a 	bl	800a6ec <puts>
	printf("memr\r\n");
 80024b8:	4810      	ldr	r0, [pc, #64]	; (80024fc <printMan+0x78>)
 80024ba:	f008 f917 	bl	800a6ec <puts>
	printf("setal\r\n");
 80024be:	4810      	ldr	r0, [pc, #64]	; (8002500 <printMan+0x7c>)
 80024c0:	f008 f914 	bl	800a6ec <puts>
	printf("refhis\r\n");
 80024c4:	480f      	ldr	r0, [pc, #60]	; (8002504 <printMan+0x80>)
 80024c6:	f008 f911 	bl	800a6ec <puts>
	printf("chprog\r\n");
 80024ca:	480f      	ldr	r0, [pc, #60]	; (8002508 <printMan+0x84>)
 80024cc:	f008 f90e 	bl	800a6ec <puts>
	printf("\r\n ***************************\r\n\n");
 80024d0:	480e      	ldr	r0, [pc, #56]	; (800250c <printMan+0x88>)
 80024d2:	f008 f90b 	bl	800a6ec <puts>
}
 80024d6:	bf00      	nop
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	0800efc0 	.word	0x0800efc0
 80024e0:	0800efe4 	.word	0x0800efe4
 80024e4:	0800eff8 	.word	0x0800eff8
 80024e8:	0800f008 	.word	0x0800f008
 80024ec:	0800f014 	.word	0x0800f014
 80024f0:	0800f020 	.word	0x0800f020
 80024f4:	0800f028 	.word	0x0800f028
 80024f8:	0800f034 	.word	0x0800f034
 80024fc:	0800f040 	.word	0x0800f040
 8002500:	0800f048 	.word	0x0800f048
 8002504:	0800f050 	.word	0x0800f050
 8002508:	0800f058 	.word	0x0800f058
 800250c:	0800f060 	.word	0x0800f060

08002510 <setDate>:

void setDate(int dd, int mm, int yy){
 8002510:	b580      	push	{r7, lr}
 8002512:	b086      	sub	sp, #24
 8002514:	af00      	add	r7, sp, #0
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	60b9      	str	r1, [r7, #8]
 800251a:	607a      	str	r2, [r7, #4]

	RTC_DateTypeDef tmp = {0};
 800251c:	2300      	movs	r3, #0
 800251e:	617b      	str	r3, [r7, #20]

	tmp.Date = (uint8_t) dd;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	b2db      	uxtb	r3, r3
 8002524:	75bb      	strb	r3, [r7, #22]
	tmp.Month = (uint8_t) mm;
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	b2db      	uxtb	r3, r3
 800252a:	757b      	strb	r3, [r7, #21]
	tmp.Year = (uint8_t)yy;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	b2db      	uxtb	r3, r3
 8002530:	75fb      	strb	r3, [r7, #23]

	HAL_RTC_SetDate(&hrtc, &tmp, RTC_FORMAT_BIN);
 8002532:	f107 0314 	add.w	r3, r7, #20
 8002536:	2200      	movs	r2, #0
 8002538:	4619      	mov	r1, r3
 800253a:	4803      	ldr	r0, [pc, #12]	; (8002548 <setDate+0x38>)
 800253c:	f004 f8e0 	bl	8006700 <HAL_RTC_SetDate>
}
 8002540:	bf00      	nop
 8002542:	3718      	adds	r7, #24
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	20000334 	.word	0x20000334

0800254c <setTime>:

void setTime(int hh, int mm){
 800254c:	b580      	push	{r7, lr}
 800254e:	b088      	sub	sp, #32
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
	RTC_TimeTypeDef tmp = {0};
 8002556:	f107 030c 	add.w	r3, r7, #12
 800255a:	2200      	movs	r2, #0
 800255c:	601a      	str	r2, [r3, #0]
 800255e:	605a      	str	r2, [r3, #4]
 8002560:	609a      	str	r2, [r3, #8]
 8002562:	60da      	str	r2, [r3, #12]
 8002564:	611a      	str	r2, [r3, #16]

	tmp.Hours = hh;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	b2db      	uxtb	r3, r3
 800256a:	733b      	strb	r3, [r7, #12]
	tmp.Minutes = mm;
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	b2db      	uxtb	r3, r3
 8002570:	737b      	strb	r3, [r7, #13]

	HAL_RTC_SetTime(&hrtc, &tmp, RTC_FORMAT_BIN);
 8002572:	f107 030c 	add.w	r3, r7, #12
 8002576:	2200      	movs	r2, #0
 8002578:	4619      	mov	r1, r3
 800257a:	4803      	ldr	r0, [pc, #12]	; (8002588 <setTime+0x3c>)
 800257c:	f003 ffc7 	bl	800650e <HAL_RTC_SetTime>

}
 8002580:	bf00      	nop
 8002582:	3720      	adds	r7, #32
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	20000334 	.word	0x20000334

0800258c <printDate>:



void printDate(){
 800258c:	b580      	push	{r7, lr}
 800258e:	b086      	sub	sp, #24
 8002590:	af00      	add	r7, sp, #0
	RTC_TimeTypeDef mTime;
	RTC_DateTypeDef mDate;

	HAL_RTC_GetTime(&hrtc, &mTime, RTC_FORMAT_BIN);
 8002592:	1d3b      	adds	r3, r7, #4
 8002594:	2200      	movs	r2, #0
 8002596:	4619      	mov	r1, r3
 8002598:	480a      	ldr	r0, [pc, #40]	; (80025c4 <printDate+0x38>)
 800259a:	f004 f855 	bl	8006648 <HAL_RTC_GetTime>
  	HAL_RTC_GetDate(&hrtc, &mDate, RTC_FORMAT_BIN);
 800259e:	463b      	mov	r3, r7
 80025a0:	2200      	movs	r2, #0
 80025a2:	4619      	mov	r1, r3
 80025a4:	4807      	ldr	r0, [pc, #28]	; (80025c4 <printDate+0x38>)
 80025a6:	f004 f932 	bl	800680e <HAL_RTC_GetDate>

  	printf("Date: %d/%d/%d\r\n", mDate.Date, mDate.Month, mDate.Year);
 80025aa:	78bb      	ldrb	r3, [r7, #2]
 80025ac:	4619      	mov	r1, r3
 80025ae:	787b      	ldrb	r3, [r7, #1]
 80025b0:	461a      	mov	r2, r3
 80025b2:	78fb      	ldrb	r3, [r7, #3]
 80025b4:	4804      	ldr	r0, [pc, #16]	; (80025c8 <printDate+0x3c>)
 80025b6:	f007 fffd 	bl	800a5b4 <iprintf>

}
 80025ba:	bf00      	nop
 80025bc:	3718      	adds	r7, #24
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	20000334 	.word	0x20000334
 80025c8:	0800f084 	.word	0x0800f084

080025cc <printTime>:

void printTime(){
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b086      	sub	sp, #24
 80025d0:	af00      	add	r7, sp, #0
	RTC_TimeTypeDef mTime;
	RTC_DateTypeDef mDate;

	HAL_RTC_GetTime(&hrtc, &mTime, RTC_FORMAT_BIN);
 80025d2:	1d3b      	adds	r3, r7, #4
 80025d4:	2200      	movs	r2, #0
 80025d6:	4619      	mov	r1, r3
 80025d8:	4809      	ldr	r0, [pc, #36]	; (8002600 <printTime+0x34>)
 80025da:	f004 f835 	bl	8006648 <HAL_RTC_GetTime>
  	HAL_RTC_GetDate(&hrtc, &mDate, RTC_FORMAT_BIN);
 80025de:	463b      	mov	r3, r7
 80025e0:	2200      	movs	r2, #0
 80025e2:	4619      	mov	r1, r3
 80025e4:	4806      	ldr	r0, [pc, #24]	; (8002600 <printTime+0x34>)
 80025e6:	f004 f912 	bl	800680e <HAL_RTC_GetDate>

  	printf("Time: %d:%d\r\n", mTime.Hours, mTime.Minutes);
 80025ea:	793b      	ldrb	r3, [r7, #4]
 80025ec:	4619      	mov	r1, r3
 80025ee:	797b      	ldrb	r3, [r7, #5]
 80025f0:	461a      	mov	r2, r3
 80025f2:	4804      	ldr	r0, [pc, #16]	; (8002604 <printTime+0x38>)
 80025f4:	f007 ffde 	bl	800a5b4 <iprintf>
}
 80025f8:	bf00      	nop
 80025fa:	3718      	adds	r7, #24
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	20000334 	.word	0x20000334
 8002604:	0800f098 	.word	0x0800f098

08002608 <set_alarm_m_s>:

void set_alarm_m_s(uint8_t min, uint8_t sec){
 8002608:	b580      	push	{r7, lr}
 800260a:	b08e      	sub	sp, #56	; 0x38
 800260c:	af00      	add	r7, sp, #0
 800260e:	4603      	mov	r3, r0
 8002610:	460a      	mov	r2, r1
 8002612:	71fb      	strb	r3, [r7, #7]
 8002614:	4613      	mov	r3, r2
 8002616:	71bb      	strb	r3, [r7, #6]

	  RTC_AlarmTypeDef alarm;

	  alarm.AlarmTime.Hours = 0x0;
 8002618:	2300      	movs	r3, #0
 800261a:	733b      	strb	r3, [r7, #12]
	  alarm.AlarmTime.Minutes = min;
 800261c:	79fb      	ldrb	r3, [r7, #7]
 800261e:	737b      	strb	r3, [r7, #13]
	  alarm.AlarmTime.Seconds = sec;
 8002620:	79bb      	ldrb	r3, [r7, #6]
 8002622:	73bb      	strb	r3, [r7, #14]
	  alarm.AlarmTime.SubSeconds = 0x0;
 8002624:	2300      	movs	r3, #0
 8002626:	613b      	str	r3, [r7, #16]
	  alarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002628:	2300      	movs	r3, #0
 800262a:	61bb      	str	r3, [r7, #24]
	  alarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800262c:	2300      	movs	r3, #0
 800262e:	61fb      	str	r3, [r7, #28]
	  alarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002630:	2300      	movs	r3, #0
 8002632:	623b      	str	r3, [r7, #32]
	  alarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002634:	2300      	movs	r3, #0
 8002636:	62bb      	str	r3, [r7, #40]	; 0x28
	  alarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002638:	2300      	movs	r3, #0
 800263a:	62fb      	str	r3, [r7, #44]	; 0x2c
	  alarm.AlarmDateWeekDay = 0x1;
 800263c:	2301      	movs	r3, #1
 800263e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	  alarm.Alarm = RTC_ALARM_A;
 8002642:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002646:	637b      	str	r3, [r7, #52]	; 0x34

	  HAL_RTC_SetAlarm_IT(&hrtc, &alarm, RTC_FORMAT_BIN);
 8002648:	f107 030c 	add.w	r3, r7, #12
 800264c:	2200      	movs	r2, #0
 800264e:	4619      	mov	r1, r3
 8002650:	4803      	ldr	r0, [pc, #12]	; (8002660 <set_alarm_m_s+0x58>)
 8002652:	f004 f929 	bl	80068a8 <HAL_RTC_SetAlarm_IT>
}
 8002656:	bf00      	nop
 8002658:	3738      	adds	r7, #56	; 0x38
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	20000334 	.word	0x20000334

08002664 <alarm_settings>:

void alarm_settings(){
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0

	if(alarm_fl == 1){
 8002668:	4b08      	ldr	r3, [pc, #32]	; (800268c <alarm_settings+0x28>)
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	2b01      	cmp	r3, #1
 800266e:	d10a      	bne.n	8002686 <alarm_settings+0x22>
		alarm_fl++;
 8002670:	4b06      	ldr	r3, [pc, #24]	; (800268c <alarm_settings+0x28>)
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	3301      	adds	r3, #1
 8002676:	b2da      	uxtb	r2, r3
 8002678:	4b04      	ldr	r3, [pc, #16]	; (800268c <alarm_settings+0x28>)
 800267a:	701a      	strb	r2, [r3, #0]
		do_alarm_action();
 800267c:	f000 f808 	bl	8002690 <do_alarm_action>
		alarm_fl = 0;
 8002680:	4b02      	ldr	r3, [pc, #8]	; (800268c <alarm_settings+0x28>)
 8002682:	2200      	movs	r2, #0
 8002684:	701a      	strb	r2, [r3, #0]
	}

}
 8002686:	bf00      	nop
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	200002cd 	.word	0x200002cd

08002690 <do_alarm_action>:

void do_alarm_action(){
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
	saveEntry();
 8002694:	f7ff febe 	bl	8002414 <saveEntry>
}
 8002698:	bf00      	nop
 800269a:	bd80      	pop	{r7, pc}

0800269c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800269c:	b580      	push	{r7, lr}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
		sf_buf[sf_buf_pos] = rx_buf[0];
 80026a4:	4b0a      	ldr	r3, [pc, #40]	; (80026d0 <HAL_UART_RxCpltCallback+0x34>)
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	461a      	mov	r2, r3
 80026aa:	4b0a      	ldr	r3, [pc, #40]	; (80026d4 <HAL_UART_RxCpltCallback+0x38>)
 80026ac:	7819      	ldrb	r1, [r3, #0]
 80026ae:	4b0a      	ldr	r3, [pc, #40]	; (80026d8 <HAL_UART_RxCpltCallback+0x3c>)
 80026b0:	5499      	strb	r1, [r3, r2]
		++sf_buf_pos;
 80026b2:	4b07      	ldr	r3, [pc, #28]	; (80026d0 <HAL_UART_RxCpltCallback+0x34>)
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	3301      	adds	r3, #1
 80026b8:	b2da      	uxtb	r2, r3
 80026ba:	4b05      	ldr	r3, [pc, #20]	; (80026d0 <HAL_UART_RxCpltCallback+0x34>)
 80026bc:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_DMA(&huart1, rx_buf, 1);
 80026be:	2201      	movs	r2, #1
 80026c0:	4904      	ldr	r1, [pc, #16]	; (80026d4 <HAL_UART_RxCpltCallback+0x38>)
 80026c2:	4806      	ldr	r0, [pc, #24]	; (80026dc <HAL_UART_RxCpltCallback+0x40>)
 80026c4:	f004 ffa6 	bl	8007614 <HAL_UART_Receive_DMA>
}
 80026c8:	bf00      	nop
 80026ca:	3708      	adds	r7, #8
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	200002cc 	.word	0x200002cc
 80026d4:	20000264 	.word	0x20000264
 80026d8:	20000268 	.word	0x20000268
 80026dc:	200003c0 	.word	0x200003c0

080026e0 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc){
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
	printf("Alarm!\r\n");
 80026e8:	4806      	ldr	r0, [pc, #24]	; (8002704 <HAL_RTC_AlarmAEventCallback+0x24>)
 80026ea:	f007 ffff 	bl	800a6ec <puts>
	alarm_fl++;
 80026ee:	4b06      	ldr	r3, [pc, #24]	; (8002708 <HAL_RTC_AlarmAEventCallback+0x28>)
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	3301      	adds	r3, #1
 80026f4:	b2da      	uxtb	r2, r3
 80026f6:	4b04      	ldr	r3, [pc, #16]	; (8002708 <HAL_RTC_AlarmAEventCallback+0x28>)
 80026f8:	701a      	strb	r2, [r3, #0]
}
 80026fa:	bf00      	nop
 80026fc:	3708      	adds	r7, #8
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	0800f0a8 	.word	0x0800f0a8
 8002708:	200002cd 	.word	0x200002cd

0800270c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002710:	b672      	cpsid	i
}
 8002712:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002714:	e7fe      	b.n	8002714 <Error_Handler+0x8>
	...

08002718 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b092      	sub	sp, #72	; 0x48
 800271c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800271e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002722:	2200      	movs	r2, #0
 8002724:	601a      	str	r2, [r3, #0]
 8002726:	605a      	str	r2, [r3, #4]
 8002728:	609a      	str	r2, [r3, #8]
 800272a:	60da      	str	r2, [r3, #12]
 800272c:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800272e:	2300      	movs	r3, #0
 8002730:	633b      	str	r3, [r7, #48]	; 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 8002732:	1d3b      	adds	r3, r7, #4
 8002734:	222c      	movs	r2, #44	; 0x2c
 8002736:	2100      	movs	r1, #0
 8002738:	4618      	mov	r0, r3
 800273a:	f007 f9e9 	bl	8009b10 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800273e:	4b3c      	ldr	r3, [pc, #240]	; (8002830 <MX_RTC_Init+0x118>)
 8002740:	4a3c      	ldr	r2, [pc, #240]	; (8002834 <MX_RTC_Init+0x11c>)
 8002742:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002744:	4b3a      	ldr	r3, [pc, #232]	; (8002830 <MX_RTC_Init+0x118>)
 8002746:	2200      	movs	r2, #0
 8002748:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800274a:	4b39      	ldr	r3, [pc, #228]	; (8002830 <MX_RTC_Init+0x118>)
 800274c:	227f      	movs	r2, #127	; 0x7f
 800274e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002750:	4b37      	ldr	r3, [pc, #220]	; (8002830 <MX_RTC_Init+0x118>)
 8002752:	22ff      	movs	r2, #255	; 0xff
 8002754:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002756:	4b36      	ldr	r3, [pc, #216]	; (8002830 <MX_RTC_Init+0x118>)
 8002758:	2200      	movs	r2, #0
 800275a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800275c:	4b34      	ldr	r3, [pc, #208]	; (8002830 <MX_RTC_Init+0x118>)
 800275e:	2200      	movs	r2, #0
 8002760:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002762:	4b33      	ldr	r3, [pc, #204]	; (8002830 <MX_RTC_Init+0x118>)
 8002764:	2200      	movs	r2, #0
 8002766:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002768:	4b31      	ldr	r3, [pc, #196]	; (8002830 <MX_RTC_Init+0x118>)
 800276a:	2200      	movs	r2, #0
 800276c:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800276e:	4830      	ldr	r0, [pc, #192]	; (8002830 <MX_RTC_Init+0x118>)
 8002770:	f003 fe52 	bl	8006418 <HAL_RTC_Init>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d001      	beq.n	800277e <MX_RTC_Init+0x66>
  {
    Error_Handler();
 800277a:	f7ff ffc7 	bl	800270c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 800277e:	2300      	movs	r3, #0
 8002780:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  sTime.Minutes = 0;
 8002784:	2300      	movs	r3, #0
 8002786:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  sTime.Seconds = 0;
 800278a:	2300      	movs	r3, #0
 800278c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002790:	2300      	movs	r3, #0
 8002792:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002794:	2300      	movs	r3, #0
 8002796:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8002798:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800279c:	2200      	movs	r2, #0
 800279e:	4619      	mov	r1, r3
 80027a0:	4823      	ldr	r0, [pc, #140]	; (8002830 <MX_RTC_Init+0x118>)
 80027a2:	f003 feb4 	bl	800650e <HAL_RTC_SetTime>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d001      	beq.n	80027b0 <MX_RTC_Init+0x98>
  {
    Error_Handler();
 80027ac:	f7ff ffae 	bl	800270c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80027b0:	2301      	movs	r3, #1
 80027b2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 80027b6:	2301      	movs	r3, #1
 80027b8:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sDate.Date = 1;
 80027bc:	2301      	movs	r3, #1
 80027be:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sDate.Year = 0;
 80027c2:	2300      	movs	r3, #0
 80027c4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80027c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80027cc:	2200      	movs	r2, #0
 80027ce:	4619      	mov	r1, r3
 80027d0:	4817      	ldr	r0, [pc, #92]	; (8002830 <MX_RTC_Init+0x118>)
 80027d2:	f003 ff95 	bl	8006700 <HAL_RTC_SetDate>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d001      	beq.n	80027e0 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 80027dc:	f7ff ff96 	bl	800270c <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 80027e0:	2300      	movs	r3, #0
 80027e2:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0;
 80027e4:	2300      	movs	r3, #0
 80027e6:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0;
 80027e8:	2300      	movs	r3, #0
 80027ea:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0;
 80027ec:	2300      	movs	r3, #0
 80027ee:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80027f0:	2300      	movs	r3, #0
 80027f2:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80027f4:	2300      	movs	r3, #0
 80027f6:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80027f8:	2300      	movs	r3, #0
 80027fa:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80027fc:	2300      	movs	r3, #0
 80027fe:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002800:	2300      	movs	r3, #0
 8002802:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmDateWeekDay = 1;
 8002804:	2301      	movs	r3, #1
 8002806:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 800280a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800280e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8002810:	1d3b      	adds	r3, r7, #4
 8002812:	2200      	movs	r2, #0
 8002814:	4619      	mov	r1, r3
 8002816:	4806      	ldr	r0, [pc, #24]	; (8002830 <MX_RTC_Init+0x118>)
 8002818:	f004 f846 	bl	80068a8 <HAL_RTC_SetAlarm_IT>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d001      	beq.n	8002826 <MX_RTC_Init+0x10e>
  {
    Error_Handler();
 8002822:	f7ff ff73 	bl	800270c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002826:	bf00      	nop
 8002828:	3748      	adds	r7, #72	; 0x48
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	20000334 	.word	0x20000334
 8002834:	40002800 	.word	0x40002800

08002838 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b0a4      	sub	sp, #144	; 0x90
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002840:	f107 0308 	add.w	r3, r7, #8
 8002844:	2288      	movs	r2, #136	; 0x88
 8002846:	2100      	movs	r1, #0
 8002848:	4618      	mov	r0, r3
 800284a:	f007 f961 	bl	8009b10 <memset>
  if(rtcHandle->Instance==RTC)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a14      	ldr	r2, [pc, #80]	; (80028a4 <HAL_RTC_MspInit+0x6c>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d120      	bne.n	800289a <HAL_RTC_MspInit+0x62>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002858:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800285c:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800285e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002862:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002866:	f107 0308 	add.w	r3, r7, #8
 800286a:	4618      	mov	r0, r3
 800286c:	f003 f918 	bl	8005aa0 <HAL_RCCEx_PeriphCLKConfig>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8002876:	f7ff ff49 	bl	800270c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800287a:	4b0b      	ldr	r3, [pc, #44]	; (80028a8 <HAL_RTC_MspInit+0x70>)
 800287c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002880:	4a09      	ldr	r2, [pc, #36]	; (80028a8 <HAL_RTC_MspInit+0x70>)
 8002882:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002886:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 800288a:	2200      	movs	r2, #0
 800288c:	2100      	movs	r1, #0
 800288e:	2029      	movs	r0, #41	; 0x29
 8002890:	f000 fc6d 	bl	800316e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8002894:	2029      	movs	r0, #41	; 0x29
 8002896:	f000 fc86 	bl	80031a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800289a:	bf00      	nop
 800289c:	3790      	adds	r7, #144	; 0x90
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	40002800 	.word	0x40002800
 80028a8:	40021000 	.word	0x40021000

080028ac <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80028b0:	4b1b      	ldr	r3, [pc, #108]	; (8002920 <MX_SPI2_Init+0x74>)
 80028b2:	4a1c      	ldr	r2, [pc, #112]	; (8002924 <MX_SPI2_Init+0x78>)
 80028b4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80028b6:	4b1a      	ldr	r3, [pc, #104]	; (8002920 <MX_SPI2_Init+0x74>)
 80028b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80028bc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80028be:	4b18      	ldr	r3, [pc, #96]	; (8002920 <MX_SPI2_Init+0x74>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80028c4:	4b16      	ldr	r3, [pc, #88]	; (8002920 <MX_SPI2_Init+0x74>)
 80028c6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80028ca:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80028cc:	4b14      	ldr	r3, [pc, #80]	; (8002920 <MX_SPI2_Init+0x74>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80028d2:	4b13      	ldr	r3, [pc, #76]	; (8002920 <MX_SPI2_Init+0x74>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80028d8:	4b11      	ldr	r3, [pc, #68]	; (8002920 <MX_SPI2_Init+0x74>)
 80028da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028de:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80028e0:	4b0f      	ldr	r3, [pc, #60]	; (8002920 <MX_SPI2_Init+0x74>)
 80028e2:	2210      	movs	r2, #16
 80028e4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80028e6:	4b0e      	ldr	r3, [pc, #56]	; (8002920 <MX_SPI2_Init+0x74>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80028ec:	4b0c      	ldr	r3, [pc, #48]	; (8002920 <MX_SPI2_Init+0x74>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028f2:	4b0b      	ldr	r3, [pc, #44]	; (8002920 <MX_SPI2_Init+0x74>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80028f8:	4b09      	ldr	r3, [pc, #36]	; (8002920 <MX_SPI2_Init+0x74>)
 80028fa:	2207      	movs	r2, #7
 80028fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80028fe:	4b08      	ldr	r3, [pc, #32]	; (8002920 <MX_SPI2_Init+0x74>)
 8002900:	2200      	movs	r2, #0
 8002902:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002904:	4b06      	ldr	r3, [pc, #24]	; (8002920 <MX_SPI2_Init+0x74>)
 8002906:	2200      	movs	r2, #0
 8002908:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800290a:	4805      	ldr	r0, [pc, #20]	; (8002920 <MX_SPI2_Init+0x74>)
 800290c:	f004 fa2a 	bl	8006d64 <HAL_SPI_Init>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002916:	f7ff fef9 	bl	800270c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800291a:	bf00      	nop
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	20000358 	.word	0x20000358
 8002924:	40003800 	.word	0x40003800

08002928 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b08a      	sub	sp, #40	; 0x28
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002930:	f107 0314 	add.w	r3, r7, #20
 8002934:	2200      	movs	r2, #0
 8002936:	601a      	str	r2, [r3, #0]
 8002938:	605a      	str	r2, [r3, #4]
 800293a:	609a      	str	r2, [r3, #8]
 800293c:	60da      	str	r2, [r3, #12]
 800293e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a25      	ldr	r2, [pc, #148]	; (80029dc <HAL_SPI_MspInit+0xb4>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d144      	bne.n	80029d4 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800294a:	4b25      	ldr	r3, [pc, #148]	; (80029e0 <HAL_SPI_MspInit+0xb8>)
 800294c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800294e:	4a24      	ldr	r2, [pc, #144]	; (80029e0 <HAL_SPI_MspInit+0xb8>)
 8002950:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002954:	6593      	str	r3, [r2, #88]	; 0x58
 8002956:	4b22      	ldr	r3, [pc, #136]	; (80029e0 <HAL_SPI_MspInit+0xb8>)
 8002958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800295a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800295e:	613b      	str	r3, [r7, #16]
 8002960:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002962:	4b1f      	ldr	r3, [pc, #124]	; (80029e0 <HAL_SPI_MspInit+0xb8>)
 8002964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002966:	4a1e      	ldr	r2, [pc, #120]	; (80029e0 <HAL_SPI_MspInit+0xb8>)
 8002968:	f043 0304 	orr.w	r3, r3, #4
 800296c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800296e:	4b1c      	ldr	r3, [pc, #112]	; (80029e0 <HAL_SPI_MspInit+0xb8>)
 8002970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002972:	f003 0304 	and.w	r3, r3, #4
 8002976:	60fb      	str	r3, [r7, #12]
 8002978:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800297a:	4b19      	ldr	r3, [pc, #100]	; (80029e0 <HAL_SPI_MspInit+0xb8>)
 800297c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800297e:	4a18      	ldr	r2, [pc, #96]	; (80029e0 <HAL_SPI_MspInit+0xb8>)
 8002980:	f043 0302 	orr.w	r3, r3, #2
 8002984:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002986:	4b16      	ldr	r3, [pc, #88]	; (80029e0 <HAL_SPI_MspInit+0xb8>)
 8002988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	60bb      	str	r3, [r7, #8]
 8002990:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002992:	2308      	movs	r3, #8
 8002994:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002996:	2302      	movs	r3, #2
 8002998:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800299a:	2300      	movs	r3, #0
 800299c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800299e:	2303      	movs	r3, #3
 80029a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80029a2:	2305      	movs	r3, #5
 80029a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029a6:	f107 0314 	add.w	r3, r7, #20
 80029aa:	4619      	mov	r1, r3
 80029ac:	480d      	ldr	r0, [pc, #52]	; (80029e4 <HAL_SPI_MspInit+0xbc>)
 80029ae:	f000 fe8b 	bl	80036c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80029b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b8:	2302      	movs	r3, #2
 80029ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029bc:	2300      	movs	r3, #0
 80029be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029c0:	2303      	movs	r3, #3
 80029c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80029c4:	2305      	movs	r3, #5
 80029c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029c8:	f107 0314 	add.w	r3, r7, #20
 80029cc:	4619      	mov	r1, r3
 80029ce:	4806      	ldr	r0, [pc, #24]	; (80029e8 <HAL_SPI_MspInit+0xc0>)
 80029d0:	f000 fe7a 	bl	80036c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80029d4:	bf00      	nop
 80029d6:	3728      	adds	r7, #40	; 0x28
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	40003800 	.word	0x40003800
 80029e0:	40021000 	.word	0x40021000
 80029e4:	48000800 	.word	0x48000800
 80029e8:	48000400 	.word	0x48000400

080029ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029f2:	4b0f      	ldr	r3, [pc, #60]	; (8002a30 <HAL_MspInit+0x44>)
 80029f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029f6:	4a0e      	ldr	r2, [pc, #56]	; (8002a30 <HAL_MspInit+0x44>)
 80029f8:	f043 0301 	orr.w	r3, r3, #1
 80029fc:	6613      	str	r3, [r2, #96]	; 0x60
 80029fe:	4b0c      	ldr	r3, [pc, #48]	; (8002a30 <HAL_MspInit+0x44>)
 8002a00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a02:	f003 0301 	and.w	r3, r3, #1
 8002a06:	607b      	str	r3, [r7, #4]
 8002a08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a0a:	4b09      	ldr	r3, [pc, #36]	; (8002a30 <HAL_MspInit+0x44>)
 8002a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a0e:	4a08      	ldr	r2, [pc, #32]	; (8002a30 <HAL_MspInit+0x44>)
 8002a10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a14:	6593      	str	r3, [r2, #88]	; 0x58
 8002a16:	4b06      	ldr	r3, [pc, #24]	; (8002a30 <HAL_MspInit+0x44>)
 8002a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a1e:	603b      	str	r3, [r7, #0]
 8002a20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a22:	bf00      	nop
 8002a24:	370c      	adds	r7, #12
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop
 8002a30:	40021000 	.word	0x40021000

08002a34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a38:	e7fe      	b.n	8002a38 <NMI_Handler+0x4>

08002a3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a3a:	b480      	push	{r7}
 8002a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a3e:	e7fe      	b.n	8002a3e <HardFault_Handler+0x4>

08002a40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a40:	b480      	push	{r7}
 8002a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a44:	e7fe      	b.n	8002a44 <MemManage_Handler+0x4>

08002a46 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a46:	b480      	push	{r7}
 8002a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a4a:	e7fe      	b.n	8002a4a <BusFault_Handler+0x4>

08002a4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a50:	e7fe      	b.n	8002a50 <UsageFault_Handler+0x4>

08002a52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a52:	b480      	push	{r7}
 8002a54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a56:	bf00      	nop
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a60:	b480      	push	{r7}
 8002a62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a64:	bf00      	nop
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr

08002a6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a6e:	b480      	push	{r7}
 8002a70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a72:	bf00      	nop
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr

08002a7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a80:	f000 fa56 	bl	8002f30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a84:	bf00      	nop
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002a8c:	4802      	ldr	r0, [pc, #8]	; (8002a98 <DMA1_Channel5_IRQHandler+0x10>)
 8002a8e:	f000 fd3c 	bl	800350a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002a92:	bf00      	nop
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	20000444 	.word	0x20000444

08002a9c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002aa0:	4802      	ldr	r0, [pc, #8]	; (8002aac <USART1_IRQHandler+0x10>)
 8002aa2:	f004 fe0d 	bl	80076c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002aa6:	bf00      	nop
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	200003c0 	.word	0x200003c0

08002ab0 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 18.
  */
void RTC_Alarm_IRQHandler(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002ab4:	4802      	ldr	r0, [pc, #8]	; (8002ac0 <RTC_Alarm_IRQHandler+0x10>)
 8002ab6:	f004 f833 	bl	8006b20 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8002aba:	bf00      	nop
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	20000334 	.word	0x20000334

08002ac4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
	return 1;
 8002ac8:	2301      	movs	r3, #1
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr

08002ad4 <_kill>:

int _kill(int pid, int sig)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002ade:	f006 fd9d 	bl	800961c <__errno>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2216      	movs	r2, #22
 8002ae6:	601a      	str	r2, [r3, #0]
	return -1;
 8002ae8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3708      	adds	r7, #8
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <_exit>:

void _exit (int status)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002afc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f7ff ffe7 	bl	8002ad4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002b06:	e7fe      	b.n	8002b06 <_exit+0x12>

08002b08 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b086      	sub	sp, #24
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b14:	2300      	movs	r3, #0
 8002b16:	617b      	str	r3, [r7, #20]
 8002b18:	e00a      	b.n	8002b30 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002b1a:	f3af 8000 	nop.w
 8002b1e:	4601      	mov	r1, r0
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	1c5a      	adds	r2, r3, #1
 8002b24:	60ba      	str	r2, [r7, #8]
 8002b26:	b2ca      	uxtb	r2, r1
 8002b28:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	3301      	adds	r3, #1
 8002b2e:	617b      	str	r3, [r7, #20]
 8002b30:	697a      	ldr	r2, [r7, #20]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	dbf0      	blt.n	8002b1a <_read+0x12>
	}

return len;
 8002b38:	687b      	ldr	r3, [r7, #4]
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3718      	adds	r7, #24
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}

08002b42 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b42:	b580      	push	{r7, lr}
 8002b44:	b086      	sub	sp, #24
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	60f8      	str	r0, [r7, #12]
 8002b4a:	60b9      	str	r1, [r7, #8]
 8002b4c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b4e:	2300      	movs	r3, #0
 8002b50:	617b      	str	r3, [r7, #20]
 8002b52:	e009      	b.n	8002b68 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	1c5a      	adds	r2, r3, #1
 8002b58:	60ba      	str	r2, [r7, #8]
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f000 f94f 	bl	8002e00 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	3301      	adds	r3, #1
 8002b66:	617b      	str	r3, [r7, #20]
 8002b68:	697a      	ldr	r2, [r7, #20]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	dbf1      	blt.n	8002b54 <_write+0x12>
	}
	return len;
 8002b70:	687b      	ldr	r3, [r7, #4]
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3718      	adds	r7, #24
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <_close>:

int _close(int file)
{
 8002b7a:	b480      	push	{r7}
 8002b7c:	b083      	sub	sp, #12
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
	return -1;
 8002b82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	370c      	adds	r7, #12
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr

08002b92 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b92:	b480      	push	{r7}
 8002b94:	b083      	sub	sp, #12
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
 8002b9a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ba2:	605a      	str	r2, [r3, #4]
	return 0;
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	370c      	adds	r7, #12
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr

08002bb2 <_isatty>:

int _isatty(int file)
{
 8002bb2:	b480      	push	{r7}
 8002bb4:	b083      	sub	sp, #12
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
	return 1;
 8002bba:	2301      	movs	r3, #1
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b085      	sub	sp, #20
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	60b9      	str	r1, [r7, #8]
 8002bd2:	607a      	str	r2, [r7, #4]
	return 0;
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3714      	adds	r7, #20
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
	...

08002be4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b086      	sub	sp, #24
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002bec:	4a14      	ldr	r2, [pc, #80]	; (8002c40 <_sbrk+0x5c>)
 8002bee:	4b15      	ldr	r3, [pc, #84]	; (8002c44 <_sbrk+0x60>)
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002bf8:	4b13      	ldr	r3, [pc, #76]	; (8002c48 <_sbrk+0x64>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d102      	bne.n	8002c06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c00:	4b11      	ldr	r3, [pc, #68]	; (8002c48 <_sbrk+0x64>)
 8002c02:	4a12      	ldr	r2, [pc, #72]	; (8002c4c <_sbrk+0x68>)
 8002c04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c06:	4b10      	ldr	r3, [pc, #64]	; (8002c48 <_sbrk+0x64>)
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4413      	add	r3, r2
 8002c0e:	693a      	ldr	r2, [r7, #16]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d207      	bcs.n	8002c24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c14:	f006 fd02 	bl	800961c <__errno>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	220c      	movs	r2, #12
 8002c1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c22:	e009      	b.n	8002c38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c24:	4b08      	ldr	r3, [pc, #32]	; (8002c48 <_sbrk+0x64>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c2a:	4b07      	ldr	r3, [pc, #28]	; (8002c48 <_sbrk+0x64>)
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4413      	add	r3, r2
 8002c32:	4a05      	ldr	r2, [pc, #20]	; (8002c48 <_sbrk+0x64>)
 8002c34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c36:	68fb      	ldr	r3, [r7, #12]
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3718      	adds	r7, #24
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	20018000 	.word	0x20018000
 8002c44:	00000400 	.word	0x00000400
 8002c48:	200003bc 	.word	0x200003bc
 8002c4c:	200004a0 	.word	0x200004a0

08002c50 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002c50:	b480      	push	{r7}
 8002c52:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002c54:	4b06      	ldr	r3, [pc, #24]	; (8002c70 <SystemInit+0x20>)
 8002c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c5a:	4a05      	ldr	r2, [pc, #20]	; (8002c70 <SystemInit+0x20>)
 8002c5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002c64:	bf00      	nop
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	e000ed00 	.word	0xe000ed00

08002c74 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002c78:	4b16      	ldr	r3, [pc, #88]	; (8002cd4 <MX_USART1_UART_Init+0x60>)
 8002c7a:	4a17      	ldr	r2, [pc, #92]	; (8002cd8 <MX_USART1_UART_Init+0x64>)
 8002c7c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002c7e:	4b15      	ldr	r3, [pc, #84]	; (8002cd4 <MX_USART1_UART_Init+0x60>)
 8002c80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c84:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002c86:	4b13      	ldr	r3, [pc, #76]	; (8002cd4 <MX_USART1_UART_Init+0x60>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002c8c:	4b11      	ldr	r3, [pc, #68]	; (8002cd4 <MX_USART1_UART_Init+0x60>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002c92:	4b10      	ldr	r3, [pc, #64]	; (8002cd4 <MX_USART1_UART_Init+0x60>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002c98:	4b0e      	ldr	r3, [pc, #56]	; (8002cd4 <MX_USART1_UART_Init+0x60>)
 8002c9a:	220c      	movs	r2, #12
 8002c9c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c9e:	4b0d      	ldr	r3, [pc, #52]	; (8002cd4 <MX_USART1_UART_Init+0x60>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ca4:	4b0b      	ldr	r3, [pc, #44]	; (8002cd4 <MX_USART1_UART_Init+0x60>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002caa:	4b0a      	ldr	r3, [pc, #40]	; (8002cd4 <MX_USART1_UART_Init+0x60>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8002cb0:	4b08      	ldr	r3, [pc, #32]	; (8002cd4 <MX_USART1_UART_Init+0x60>)
 8002cb2:	2210      	movs	r2, #16
 8002cb4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8002cb6:	4b07      	ldr	r3, [pc, #28]	; (8002cd4 <MX_USART1_UART_Init+0x60>)
 8002cb8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002cbc:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002cbe:	4805      	ldr	r0, [pc, #20]	; (8002cd4 <MX_USART1_UART_Init+0x60>)
 8002cc0:	f004 fbc6 	bl	8007450 <HAL_UART_Init>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d001      	beq.n	8002cce <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8002cca:	f7ff fd1f 	bl	800270c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002cce:	bf00      	nop
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	200003c0 	.word	0x200003c0
 8002cd8:	40013800 	.word	0x40013800

08002cdc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b0ac      	sub	sp, #176	; 0xb0
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ce4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002ce8:	2200      	movs	r2, #0
 8002cea:	601a      	str	r2, [r3, #0]
 8002cec:	605a      	str	r2, [r3, #4]
 8002cee:	609a      	str	r2, [r3, #8]
 8002cf0:	60da      	str	r2, [r3, #12]
 8002cf2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002cf4:	f107 0314 	add.w	r3, r7, #20
 8002cf8:	2288      	movs	r2, #136	; 0x88
 8002cfa:	2100      	movs	r1, #0
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f006 ff07 	bl	8009b10 <memset>
  if(uartHandle->Instance==USART1)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a3a      	ldr	r2, [pc, #232]	; (8002df0 <HAL_UART_MspInit+0x114>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d16d      	bne.n	8002de8 <HAL_UART_MspInit+0x10c>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002d10:	2300      	movs	r3, #0
 8002d12:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d14:	f107 0314 	add.w	r3, r7, #20
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f002 fec1 	bl	8005aa0 <HAL_RCCEx_PeriphCLKConfig>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d001      	beq.n	8002d28 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002d24:	f7ff fcf2 	bl	800270c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d28:	4b32      	ldr	r3, [pc, #200]	; (8002df4 <HAL_UART_MspInit+0x118>)
 8002d2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d2c:	4a31      	ldr	r2, [pc, #196]	; (8002df4 <HAL_UART_MspInit+0x118>)
 8002d2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d32:	6613      	str	r3, [r2, #96]	; 0x60
 8002d34:	4b2f      	ldr	r3, [pc, #188]	; (8002df4 <HAL_UART_MspInit+0x118>)
 8002d36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d3c:	613b      	str	r3, [r7, #16]
 8002d3e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d40:	4b2c      	ldr	r3, [pc, #176]	; (8002df4 <HAL_UART_MspInit+0x118>)
 8002d42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d44:	4a2b      	ldr	r2, [pc, #172]	; (8002df4 <HAL_UART_MspInit+0x118>)
 8002d46:	f043 0301 	orr.w	r3, r3, #1
 8002d4a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d4c:	4b29      	ldr	r3, [pc, #164]	; (8002df4 <HAL_UART_MspInit+0x118>)
 8002d4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d50:	f003 0301 	and.w	r3, r3, #1
 8002d54:	60fb      	str	r3, [r7, #12]
 8002d56:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002d58:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002d5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d60:	2302      	movs	r3, #2
 8002d62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d66:	2300      	movs	r3, #0
 8002d68:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002d72:	2307      	movs	r3, #7
 8002d74:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d78:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d82:	f000 fca1 	bl	80036c8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002d86:	4b1c      	ldr	r3, [pc, #112]	; (8002df8 <HAL_UART_MspInit+0x11c>)
 8002d88:	4a1c      	ldr	r2, [pc, #112]	; (8002dfc <HAL_UART_MspInit+0x120>)
 8002d8a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8002d8c:	4b1a      	ldr	r3, [pc, #104]	; (8002df8 <HAL_UART_MspInit+0x11c>)
 8002d8e:	2202      	movs	r2, #2
 8002d90:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d92:	4b19      	ldr	r3, [pc, #100]	; (8002df8 <HAL_UART_MspInit+0x11c>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d98:	4b17      	ldr	r3, [pc, #92]	; (8002df8 <HAL_UART_MspInit+0x11c>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002d9e:	4b16      	ldr	r3, [pc, #88]	; (8002df8 <HAL_UART_MspInit+0x11c>)
 8002da0:	2280      	movs	r2, #128	; 0x80
 8002da2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002da4:	4b14      	ldr	r3, [pc, #80]	; (8002df8 <HAL_UART_MspInit+0x11c>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002daa:	4b13      	ldr	r3, [pc, #76]	; (8002df8 <HAL_UART_MspInit+0x11c>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002db0:	4b11      	ldr	r3, [pc, #68]	; (8002df8 <HAL_UART_MspInit+0x11c>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002db6:	4b10      	ldr	r3, [pc, #64]	; (8002df8 <HAL_UART_MspInit+0x11c>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002dbc:	480e      	ldr	r0, [pc, #56]	; (8002df8 <HAL_UART_MspInit+0x11c>)
 8002dbe:	f000 fa0d 	bl	80031dc <HAL_DMA_Init>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d001      	beq.n	8002dcc <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 8002dc8:	f7ff fca0 	bl	800270c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	4a0a      	ldr	r2, [pc, #40]	; (8002df8 <HAL_UART_MspInit+0x11c>)
 8002dd0:	671a      	str	r2, [r3, #112]	; 0x70
 8002dd2:	4a09      	ldr	r2, [pc, #36]	; (8002df8 <HAL_UART_MspInit+0x11c>)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002dd8:	2200      	movs	r2, #0
 8002dda:	2100      	movs	r1, #0
 8002ddc:	2025      	movs	r0, #37	; 0x25
 8002dde:	f000 f9c6 	bl	800316e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002de2:	2025      	movs	r0, #37	; 0x25
 8002de4:	f000 f9df 	bl	80031a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002de8:	bf00      	nop
 8002dea:	37b0      	adds	r7, #176	; 0xb0
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	40013800 	.word	0x40013800
 8002df4:	40021000 	.word	0x40021000
 8002df8:	20000444 	.word	0x20000444
 8002dfc:	40020058 	.word	0x40020058

08002e00 <__io_putchar>:
  }
}

/* USER CODE BEGIN 1 */
int __io_putchar(int ch)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b082      	sub	sp, #8
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]

  HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8002e08:	1d39      	adds	r1, r7, #4
 8002e0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e0e:	2201      	movs	r2, #1
 8002e10:	4803      	ldr	r0, [pc, #12]	; (8002e20 <__io_putchar+0x20>)
 8002e12:	f004 fb6b 	bl	80074ec <HAL_UART_Transmit>

  return 1;
 8002e16:	2301      	movs	r3, #1
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3708      	adds	r7, #8
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	200003c0 	.word	0x200003c0

08002e24 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002e24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e5c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002e28:	f7ff ff12 	bl	8002c50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e2c:	480c      	ldr	r0, [pc, #48]	; (8002e60 <LoopForever+0x6>)
  ldr r1, =_edata
 8002e2e:	490d      	ldr	r1, [pc, #52]	; (8002e64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002e30:	4a0d      	ldr	r2, [pc, #52]	; (8002e68 <LoopForever+0xe>)
  movs r3, #0
 8002e32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e34:	e002      	b.n	8002e3c <LoopCopyDataInit>

08002e36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e3a:	3304      	adds	r3, #4

08002e3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e40:	d3f9      	bcc.n	8002e36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e42:	4a0a      	ldr	r2, [pc, #40]	; (8002e6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002e44:	4c0a      	ldr	r4, [pc, #40]	; (8002e70 <LoopForever+0x16>)
  movs r3, #0
 8002e46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e48:	e001      	b.n	8002e4e <LoopFillZerobss>

08002e4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e4c:	3204      	adds	r2, #4

08002e4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e50:	d3fb      	bcc.n	8002e4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002e52:	f006 fdb3 	bl	80099bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002e56:	f7fe fd0f 	bl	8001878 <main>

08002e5a <LoopForever>:

LoopForever:
    b LoopForever
 8002e5a:	e7fe      	b.n	8002e5a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002e5c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002e60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e64:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002e68:	080134e8 	.word	0x080134e8
  ldr r2, =_sbss
 8002e6c:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002e70:	200004a0 	.word	0x200004a0

08002e74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002e74:	e7fe      	b.n	8002e74 <ADC1_2_IRQHandler>
	...

08002e78 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e82:	4b0c      	ldr	r3, [pc, #48]	; (8002eb4 <HAL_Init+0x3c>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a0b      	ldr	r2, [pc, #44]	; (8002eb4 <HAL_Init+0x3c>)
 8002e88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e8c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e8e:	2003      	movs	r0, #3
 8002e90:	f000 f962 	bl	8003158 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e94:	2000      	movs	r0, #0
 8002e96:	f000 f80f 	bl	8002eb8 <HAL_InitTick>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d002      	beq.n	8002ea6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	71fb      	strb	r3, [r7, #7]
 8002ea4:	e001      	b.n	8002eaa <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002ea6:	f7ff fda1 	bl	80029ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002eaa:	79fb      	ldrb	r3, [r7, #7]
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3708      	adds	r7, #8
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	40022000 	.word	0x40022000

08002eb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002ec4:	4b17      	ldr	r3, [pc, #92]	; (8002f24 <HAL_InitTick+0x6c>)
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d023      	beq.n	8002f14 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002ecc:	4b16      	ldr	r3, [pc, #88]	; (8002f28 <HAL_InitTick+0x70>)
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	4b14      	ldr	r3, [pc, #80]	; (8002f24 <HAL_InitTick+0x6c>)
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002eda:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f000 f96d 	bl	80031c2 <HAL_SYSTICK_Config>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d10f      	bne.n	8002f0e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2b0f      	cmp	r3, #15
 8002ef2:	d809      	bhi.n	8002f08 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	6879      	ldr	r1, [r7, #4]
 8002ef8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002efc:	f000 f937 	bl	800316e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002f00:	4a0a      	ldr	r2, [pc, #40]	; (8002f2c <HAL_InitTick+0x74>)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6013      	str	r3, [r2, #0]
 8002f06:	e007      	b.n	8002f18 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	73fb      	strb	r3, [r7, #15]
 8002f0c:	e004      	b.n	8002f18 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	73fb      	strb	r3, [r7, #15]
 8002f12:	e001      	b.n	8002f18 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3710      	adds	r7, #16
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	20000008 	.word	0x20000008
 8002f28:	20000000 	.word	0x20000000
 8002f2c:	20000004 	.word	0x20000004

08002f30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f30:	b480      	push	{r7}
 8002f32:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002f34:	4b06      	ldr	r3, [pc, #24]	; (8002f50 <HAL_IncTick+0x20>)
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	461a      	mov	r2, r3
 8002f3a:	4b06      	ldr	r3, [pc, #24]	; (8002f54 <HAL_IncTick+0x24>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4413      	add	r3, r2
 8002f40:	4a04      	ldr	r2, [pc, #16]	; (8002f54 <HAL_IncTick+0x24>)
 8002f42:	6013      	str	r3, [r2, #0]
}
 8002f44:	bf00      	nop
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop
 8002f50:	20000008 	.word	0x20000008
 8002f54:	2000048c 	.word	0x2000048c

08002f58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	af00      	add	r7, sp, #0
  return uwTick;
 8002f5c:	4b03      	ldr	r3, [pc, #12]	; (8002f6c <HAL_GetTick+0x14>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop
 8002f6c:	2000048c 	.word	0x2000048c

08002f70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b084      	sub	sp, #16
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f78:	f7ff ffee 	bl	8002f58 <HAL_GetTick>
 8002f7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f88:	d005      	beq.n	8002f96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002f8a:	4b0a      	ldr	r3, [pc, #40]	; (8002fb4 <HAL_Delay+0x44>)
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	461a      	mov	r2, r3
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	4413      	add	r3, r2
 8002f94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f96:	bf00      	nop
 8002f98:	f7ff ffde 	bl	8002f58 <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	68fa      	ldr	r2, [r7, #12]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d8f7      	bhi.n	8002f98 <HAL_Delay+0x28>
  {
  }
}
 8002fa8:	bf00      	nop
 8002faa:	bf00      	nop
 8002fac:	3710      	adds	r7, #16
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	20000008 	.word	0x20000008

08002fb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b085      	sub	sp, #20
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f003 0307 	and.w	r3, r3, #7
 8002fc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fc8:	4b0c      	ldr	r3, [pc, #48]	; (8002ffc <__NVIC_SetPriorityGrouping+0x44>)
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fce:	68ba      	ldr	r2, [r7, #8]
 8002fd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fe0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002fe4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fe8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fea:	4a04      	ldr	r2, [pc, #16]	; (8002ffc <__NVIC_SetPriorityGrouping+0x44>)
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	60d3      	str	r3, [r2, #12]
}
 8002ff0:	bf00      	nop
 8002ff2:	3714      	adds	r7, #20
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr
 8002ffc:	e000ed00 	.word	0xe000ed00

08003000 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003000:	b480      	push	{r7}
 8003002:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003004:	4b04      	ldr	r3, [pc, #16]	; (8003018 <__NVIC_GetPriorityGrouping+0x18>)
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	0a1b      	lsrs	r3, r3, #8
 800300a:	f003 0307 	and.w	r3, r3, #7
}
 800300e:	4618      	mov	r0, r3
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr
 8003018:	e000ed00 	.word	0xe000ed00

0800301c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	4603      	mov	r3, r0
 8003024:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800302a:	2b00      	cmp	r3, #0
 800302c:	db0b      	blt.n	8003046 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800302e:	79fb      	ldrb	r3, [r7, #7]
 8003030:	f003 021f 	and.w	r2, r3, #31
 8003034:	4907      	ldr	r1, [pc, #28]	; (8003054 <__NVIC_EnableIRQ+0x38>)
 8003036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800303a:	095b      	lsrs	r3, r3, #5
 800303c:	2001      	movs	r0, #1
 800303e:	fa00 f202 	lsl.w	r2, r0, r2
 8003042:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003046:	bf00      	nop
 8003048:	370c      	adds	r7, #12
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr
 8003052:	bf00      	nop
 8003054:	e000e100 	.word	0xe000e100

08003058 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	4603      	mov	r3, r0
 8003060:	6039      	str	r1, [r7, #0]
 8003062:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003068:	2b00      	cmp	r3, #0
 800306a:	db0a      	blt.n	8003082 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	b2da      	uxtb	r2, r3
 8003070:	490c      	ldr	r1, [pc, #48]	; (80030a4 <__NVIC_SetPriority+0x4c>)
 8003072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003076:	0112      	lsls	r2, r2, #4
 8003078:	b2d2      	uxtb	r2, r2
 800307a:	440b      	add	r3, r1
 800307c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003080:	e00a      	b.n	8003098 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	b2da      	uxtb	r2, r3
 8003086:	4908      	ldr	r1, [pc, #32]	; (80030a8 <__NVIC_SetPriority+0x50>)
 8003088:	79fb      	ldrb	r3, [r7, #7]
 800308a:	f003 030f 	and.w	r3, r3, #15
 800308e:	3b04      	subs	r3, #4
 8003090:	0112      	lsls	r2, r2, #4
 8003092:	b2d2      	uxtb	r2, r2
 8003094:	440b      	add	r3, r1
 8003096:	761a      	strb	r2, [r3, #24]
}
 8003098:	bf00      	nop
 800309a:	370c      	adds	r7, #12
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr
 80030a4:	e000e100 	.word	0xe000e100
 80030a8:	e000ed00 	.word	0xe000ed00

080030ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b089      	sub	sp, #36	; 0x24
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	60b9      	str	r1, [r7, #8]
 80030b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f003 0307 	and.w	r3, r3, #7
 80030be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	f1c3 0307 	rsb	r3, r3, #7
 80030c6:	2b04      	cmp	r3, #4
 80030c8:	bf28      	it	cs
 80030ca:	2304      	movcs	r3, #4
 80030cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	3304      	adds	r3, #4
 80030d2:	2b06      	cmp	r3, #6
 80030d4:	d902      	bls.n	80030dc <NVIC_EncodePriority+0x30>
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	3b03      	subs	r3, #3
 80030da:	e000      	b.n	80030de <NVIC_EncodePriority+0x32>
 80030dc:	2300      	movs	r3, #0
 80030de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ea:	43da      	mvns	r2, r3
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	401a      	ands	r2, r3
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	fa01 f303 	lsl.w	r3, r1, r3
 80030fe:	43d9      	mvns	r1, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003104:	4313      	orrs	r3, r2
         );
}
 8003106:	4618      	mov	r0, r3
 8003108:	3724      	adds	r7, #36	; 0x24
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
	...

08003114 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	3b01      	subs	r3, #1
 8003120:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003124:	d301      	bcc.n	800312a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003126:	2301      	movs	r3, #1
 8003128:	e00f      	b.n	800314a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800312a:	4a0a      	ldr	r2, [pc, #40]	; (8003154 <SysTick_Config+0x40>)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	3b01      	subs	r3, #1
 8003130:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003132:	210f      	movs	r1, #15
 8003134:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003138:	f7ff ff8e 	bl	8003058 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800313c:	4b05      	ldr	r3, [pc, #20]	; (8003154 <SysTick_Config+0x40>)
 800313e:	2200      	movs	r2, #0
 8003140:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003142:	4b04      	ldr	r3, [pc, #16]	; (8003154 <SysTick_Config+0x40>)
 8003144:	2207      	movs	r2, #7
 8003146:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003148:	2300      	movs	r3, #0
}
 800314a:	4618      	mov	r0, r3
 800314c:	3708      	adds	r7, #8
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	e000e010 	.word	0xe000e010

08003158 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f7ff ff29 	bl	8002fb8 <__NVIC_SetPriorityGrouping>
}
 8003166:	bf00      	nop
 8003168:	3708      	adds	r7, #8
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}

0800316e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800316e:	b580      	push	{r7, lr}
 8003170:	b086      	sub	sp, #24
 8003172:	af00      	add	r7, sp, #0
 8003174:	4603      	mov	r3, r0
 8003176:	60b9      	str	r1, [r7, #8]
 8003178:	607a      	str	r2, [r7, #4]
 800317a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800317c:	2300      	movs	r3, #0
 800317e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003180:	f7ff ff3e 	bl	8003000 <__NVIC_GetPriorityGrouping>
 8003184:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	68b9      	ldr	r1, [r7, #8]
 800318a:	6978      	ldr	r0, [r7, #20]
 800318c:	f7ff ff8e 	bl	80030ac <NVIC_EncodePriority>
 8003190:	4602      	mov	r2, r0
 8003192:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003196:	4611      	mov	r1, r2
 8003198:	4618      	mov	r0, r3
 800319a:	f7ff ff5d 	bl	8003058 <__NVIC_SetPriority>
}
 800319e:	bf00      	nop
 80031a0:	3718      	adds	r7, #24
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}

080031a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031a6:	b580      	push	{r7, lr}
 80031a8:	b082      	sub	sp, #8
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	4603      	mov	r3, r0
 80031ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031b4:	4618      	mov	r0, r3
 80031b6:	f7ff ff31 	bl	800301c <__NVIC_EnableIRQ>
}
 80031ba:	bf00      	nop
 80031bc:	3708      	adds	r7, #8
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b082      	sub	sp, #8
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f7ff ffa2 	bl	8003114 <SysTick_Config>
 80031d0:	4603      	mov	r3, r0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3708      	adds	r7, #8
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
	...

080031dc <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80031dc:	b480      	push	{r7}
 80031de:	b085      	sub	sp, #20
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d101      	bne.n	80031ee <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e098      	b.n	8003320 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	461a      	mov	r2, r3
 80031f4:	4b4d      	ldr	r3, [pc, #308]	; (800332c <HAL_DMA_Init+0x150>)
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d80f      	bhi.n	800321a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	461a      	mov	r2, r3
 8003200:	4b4b      	ldr	r3, [pc, #300]	; (8003330 <HAL_DMA_Init+0x154>)
 8003202:	4413      	add	r3, r2
 8003204:	4a4b      	ldr	r2, [pc, #300]	; (8003334 <HAL_DMA_Init+0x158>)
 8003206:	fba2 2303 	umull	r2, r3, r2, r3
 800320a:	091b      	lsrs	r3, r3, #4
 800320c:	009a      	lsls	r2, r3, #2
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a48      	ldr	r2, [pc, #288]	; (8003338 <HAL_DMA_Init+0x15c>)
 8003216:	641a      	str	r2, [r3, #64]	; 0x40
 8003218:	e00e      	b.n	8003238 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	461a      	mov	r2, r3
 8003220:	4b46      	ldr	r3, [pc, #280]	; (800333c <HAL_DMA_Init+0x160>)
 8003222:	4413      	add	r3, r2
 8003224:	4a43      	ldr	r2, [pc, #268]	; (8003334 <HAL_DMA_Init+0x158>)
 8003226:	fba2 2303 	umull	r2, r3, r2, r3
 800322a:	091b      	lsrs	r3, r3, #4
 800322c:	009a      	lsls	r2, r3, #2
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a42      	ldr	r2, [pc, #264]	; (8003340 <HAL_DMA_Init+0x164>)
 8003236:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2202      	movs	r2, #2
 800323c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800324e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003252:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800325c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003268:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	699b      	ldr	r3, [r3, #24]
 800326e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003274:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a1b      	ldr	r3, [r3, #32]
 800327a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800327c:	68fa      	ldr	r2, [r7, #12]
 800327e:	4313      	orrs	r3, r2
 8003280:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	68fa      	ldr	r2, [r7, #12]
 8003288:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003292:	d039      	beq.n	8003308 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003298:	4a27      	ldr	r2, [pc, #156]	; (8003338 <HAL_DMA_Init+0x15c>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d11a      	bne.n	80032d4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800329e:	4b29      	ldr	r3, [pc, #164]	; (8003344 <HAL_DMA_Init+0x168>)
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a6:	f003 031c 	and.w	r3, r3, #28
 80032aa:	210f      	movs	r1, #15
 80032ac:	fa01 f303 	lsl.w	r3, r1, r3
 80032b0:	43db      	mvns	r3, r3
 80032b2:	4924      	ldr	r1, [pc, #144]	; (8003344 <HAL_DMA_Init+0x168>)
 80032b4:	4013      	ands	r3, r2
 80032b6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80032b8:	4b22      	ldr	r3, [pc, #136]	; (8003344 <HAL_DMA_Init+0x168>)
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6859      	ldr	r1, [r3, #4]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032c4:	f003 031c 	and.w	r3, r3, #28
 80032c8:	fa01 f303 	lsl.w	r3, r1, r3
 80032cc:	491d      	ldr	r1, [pc, #116]	; (8003344 <HAL_DMA_Init+0x168>)
 80032ce:	4313      	orrs	r3, r2
 80032d0:	600b      	str	r3, [r1, #0]
 80032d2:	e019      	b.n	8003308 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80032d4:	4b1c      	ldr	r3, [pc, #112]	; (8003348 <HAL_DMA_Init+0x16c>)
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032dc:	f003 031c 	and.w	r3, r3, #28
 80032e0:	210f      	movs	r1, #15
 80032e2:	fa01 f303 	lsl.w	r3, r1, r3
 80032e6:	43db      	mvns	r3, r3
 80032e8:	4917      	ldr	r1, [pc, #92]	; (8003348 <HAL_DMA_Init+0x16c>)
 80032ea:	4013      	ands	r3, r2
 80032ec:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80032ee:	4b16      	ldr	r3, [pc, #88]	; (8003348 <HAL_DMA_Init+0x16c>)
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6859      	ldr	r1, [r3, #4]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032fa:	f003 031c 	and.w	r3, r3, #28
 80032fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003302:	4911      	ldr	r1, [pc, #68]	; (8003348 <HAL_DMA_Init+0x16c>)
 8003304:	4313      	orrs	r3, r2
 8003306:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2201      	movs	r2, #1
 8003312:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800331e:	2300      	movs	r3, #0
}
 8003320:	4618      	mov	r0, r3
 8003322:	3714      	adds	r7, #20
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr
 800332c:	40020407 	.word	0x40020407
 8003330:	bffdfff8 	.word	0xbffdfff8
 8003334:	cccccccd 	.word	0xcccccccd
 8003338:	40020000 	.word	0x40020000
 800333c:	bffdfbf8 	.word	0xbffdfbf8
 8003340:	40020400 	.word	0x40020400
 8003344:	400200a8 	.word	0x400200a8
 8003348:	400204a8 	.word	0x400204a8

0800334c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b086      	sub	sp, #24
 8003350:	af00      	add	r7, sp, #0
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	60b9      	str	r1, [r7, #8]
 8003356:	607a      	str	r2, [r7, #4]
 8003358:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800335a:	2300      	movs	r3, #0
 800335c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003364:	2b01      	cmp	r3, #1
 8003366:	d101      	bne.n	800336c <HAL_DMA_Start_IT+0x20>
 8003368:	2302      	movs	r3, #2
 800336a:	e04b      	b.n	8003404 <HAL_DMA_Start_IT+0xb8>
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800337a:	b2db      	uxtb	r3, r3
 800337c:	2b01      	cmp	r3, #1
 800337e:	d13a      	bne.n	80033f6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2202      	movs	r2, #2
 8003384:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2200      	movs	r2, #0
 800338c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f022 0201 	bic.w	r2, r2, #1
 800339c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	68b9      	ldr	r1, [r7, #8]
 80033a4:	68f8      	ldr	r0, [r7, #12]
 80033a6:	f000 f95f 	bl	8003668 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d008      	beq.n	80033c4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f042 020e 	orr.w	r2, r2, #14
 80033c0:	601a      	str	r2, [r3, #0]
 80033c2:	e00f      	b.n	80033e4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f022 0204 	bic.w	r2, r2, #4
 80033d2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f042 020a 	orr.w	r2, r2, #10
 80033e2:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f042 0201 	orr.w	r2, r2, #1
 80033f2:	601a      	str	r2, [r3, #0]
 80033f4:	e005      	b.n	8003402 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80033fe:	2302      	movs	r3, #2
 8003400:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003402:	7dfb      	ldrb	r3, [r7, #23]
}
 8003404:	4618      	mov	r0, r3
 8003406:	3718      	adds	r7, #24
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}

0800340c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800340c:	b480      	push	{r7}
 800340e:	b085      	sub	sp, #20
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003414:	2300      	movs	r3, #0
 8003416:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800341e:	b2db      	uxtb	r3, r3
 8003420:	2b02      	cmp	r3, #2
 8003422:	d008      	beq.n	8003436 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2204      	movs	r2, #4
 8003428:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e022      	b.n	800347c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f022 020e 	bic.w	r2, r2, #14
 8003444:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f022 0201 	bic.w	r2, r2, #1
 8003454:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800345a:	f003 021c 	and.w	r2, r3, #28
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003462:	2101      	movs	r1, #1
 8003464:	fa01 f202 	lsl.w	r2, r1, r2
 8003468:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2201      	movs	r2, #1
 800346e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800347a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800347c:	4618      	mov	r0, r3
 800347e:	3714      	adds	r7, #20
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr

08003488 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b084      	sub	sp, #16
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003490:	2300      	movs	r3, #0
 8003492:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800349a:	b2db      	uxtb	r3, r3
 800349c:	2b02      	cmp	r3, #2
 800349e:	d005      	beq.n	80034ac <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2204      	movs	r2, #4
 80034a4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	73fb      	strb	r3, [r7, #15]
 80034aa:	e029      	b.n	8003500 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f022 020e 	bic.w	r2, r2, #14
 80034ba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f022 0201 	bic.w	r2, r2, #1
 80034ca:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034d0:	f003 021c 	and.w	r2, r3, #28
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d8:	2101      	movs	r1, #1
 80034da:	fa01 f202 	lsl.w	r2, r1, r2
 80034de:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d003      	beq.n	8003500 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	4798      	blx	r3
    }
  }
  return status;
 8003500:	7bfb      	ldrb	r3, [r7, #15]
}
 8003502:	4618      	mov	r0, r3
 8003504:	3710      	adds	r7, #16
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}

0800350a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800350a:	b580      	push	{r7, lr}
 800350c:	b084      	sub	sp, #16
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003526:	f003 031c 	and.w	r3, r3, #28
 800352a:	2204      	movs	r2, #4
 800352c:	409a      	lsls	r2, r3
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	4013      	ands	r3, r2
 8003532:	2b00      	cmp	r3, #0
 8003534:	d026      	beq.n	8003584 <HAL_DMA_IRQHandler+0x7a>
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	f003 0304 	and.w	r3, r3, #4
 800353c:	2b00      	cmp	r3, #0
 800353e:	d021      	beq.n	8003584 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0320 	and.w	r3, r3, #32
 800354a:	2b00      	cmp	r3, #0
 800354c:	d107      	bne.n	800355e <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f022 0204 	bic.w	r2, r2, #4
 800355c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003562:	f003 021c 	and.w	r2, r3, #28
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356a:	2104      	movs	r1, #4
 800356c:	fa01 f202 	lsl.w	r2, r1, r2
 8003570:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003576:	2b00      	cmp	r3, #0
 8003578:	d071      	beq.n	800365e <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003582:	e06c      	b.n	800365e <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003588:	f003 031c 	and.w	r3, r3, #28
 800358c:	2202      	movs	r2, #2
 800358e:	409a      	lsls	r2, r3
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	4013      	ands	r3, r2
 8003594:	2b00      	cmp	r3, #0
 8003596:	d02e      	beq.n	80035f6 <HAL_DMA_IRQHandler+0xec>
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	f003 0302 	and.w	r3, r3, #2
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d029      	beq.n	80035f6 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0320 	and.w	r3, r3, #32
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d10b      	bne.n	80035c8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f022 020a 	bic.w	r2, r2, #10
 80035be:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035cc:	f003 021c 	and.w	r2, r3, #28
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d4:	2102      	movs	r1, #2
 80035d6:	fa01 f202 	lsl.w	r2, r1, r2
 80035da:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d038      	beq.n	800365e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80035f4:	e033      	b.n	800365e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035fa:	f003 031c 	and.w	r3, r3, #28
 80035fe:	2208      	movs	r2, #8
 8003600:	409a      	lsls	r2, r3
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	4013      	ands	r3, r2
 8003606:	2b00      	cmp	r3, #0
 8003608:	d02a      	beq.n	8003660 <HAL_DMA_IRQHandler+0x156>
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	f003 0308 	and.w	r3, r3, #8
 8003610:	2b00      	cmp	r3, #0
 8003612:	d025      	beq.n	8003660 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f022 020e 	bic.w	r2, r2, #14
 8003622:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003628:	f003 021c 	and.w	r2, r3, #28
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003630:	2101      	movs	r1, #1
 8003632:	fa01 f202 	lsl.w	r2, r1, r2
 8003636:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2201      	movs	r2, #1
 8003642:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003652:	2b00      	cmp	r3, #0
 8003654:	d004      	beq.n	8003660 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800365e:	bf00      	nop
 8003660:	bf00      	nop
}
 8003662:	3710      	adds	r7, #16
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003668:	b480      	push	{r7}
 800366a:	b085      	sub	sp, #20
 800366c:	af00      	add	r7, sp, #0
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	607a      	str	r2, [r7, #4]
 8003674:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800367a:	f003 021c 	and.w	r2, r3, #28
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003682:	2101      	movs	r1, #1
 8003684:	fa01 f202 	lsl.w	r2, r1, r2
 8003688:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	683a      	ldr	r2, [r7, #0]
 8003690:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	2b10      	cmp	r3, #16
 8003698:	d108      	bne.n	80036ac <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	68ba      	ldr	r2, [r7, #8]
 80036a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80036aa:	e007      	b.n	80036bc <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68ba      	ldr	r2, [r7, #8]
 80036b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	60da      	str	r2, [r3, #12]
}
 80036bc:	bf00      	nop
 80036be:	3714      	adds	r7, #20
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b087      	sub	sp, #28
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80036d2:	2300      	movs	r3, #0
 80036d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036d6:	e17f      	b.n	80039d8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	2101      	movs	r1, #1
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	fa01 f303 	lsl.w	r3, r1, r3
 80036e4:	4013      	ands	r3, r2
 80036e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	f000 8171 	beq.w	80039d2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f003 0303 	and.w	r3, r3, #3
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d005      	beq.n	8003708 <HAL_GPIO_Init+0x40>
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f003 0303 	and.w	r3, r3, #3
 8003704:	2b02      	cmp	r3, #2
 8003706:	d130      	bne.n	800376a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	005b      	lsls	r3, r3, #1
 8003712:	2203      	movs	r2, #3
 8003714:	fa02 f303 	lsl.w	r3, r2, r3
 8003718:	43db      	mvns	r3, r3
 800371a:	693a      	ldr	r2, [r7, #16]
 800371c:	4013      	ands	r3, r2
 800371e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	68da      	ldr	r2, [r3, #12]
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	005b      	lsls	r3, r3, #1
 8003728:	fa02 f303 	lsl.w	r3, r2, r3
 800372c:	693a      	ldr	r2, [r7, #16]
 800372e:	4313      	orrs	r3, r2
 8003730:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	693a      	ldr	r2, [r7, #16]
 8003736:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800373e:	2201      	movs	r2, #1
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	fa02 f303 	lsl.w	r3, r2, r3
 8003746:	43db      	mvns	r3, r3
 8003748:	693a      	ldr	r2, [r7, #16]
 800374a:	4013      	ands	r3, r2
 800374c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	091b      	lsrs	r3, r3, #4
 8003754:	f003 0201 	and.w	r2, r3, #1
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	fa02 f303 	lsl.w	r3, r2, r3
 800375e:	693a      	ldr	r2, [r7, #16]
 8003760:	4313      	orrs	r3, r2
 8003762:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	693a      	ldr	r2, [r7, #16]
 8003768:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	f003 0303 	and.w	r3, r3, #3
 8003772:	2b03      	cmp	r3, #3
 8003774:	d118      	bne.n	80037a8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800377a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800377c:	2201      	movs	r2, #1
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	fa02 f303 	lsl.w	r3, r2, r3
 8003784:	43db      	mvns	r3, r3
 8003786:	693a      	ldr	r2, [r7, #16]
 8003788:	4013      	ands	r3, r2
 800378a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	08db      	lsrs	r3, r3, #3
 8003792:	f003 0201 	and.w	r2, r3, #1
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	fa02 f303 	lsl.w	r3, r2, r3
 800379c:	693a      	ldr	r2, [r7, #16]
 800379e:	4313      	orrs	r3, r2
 80037a0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	693a      	ldr	r2, [r7, #16]
 80037a6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f003 0303 	and.w	r3, r3, #3
 80037b0:	2b03      	cmp	r3, #3
 80037b2:	d017      	beq.n	80037e4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	005b      	lsls	r3, r3, #1
 80037be:	2203      	movs	r2, #3
 80037c0:	fa02 f303 	lsl.w	r3, r2, r3
 80037c4:	43db      	mvns	r3, r3
 80037c6:	693a      	ldr	r2, [r7, #16]
 80037c8:	4013      	ands	r3, r2
 80037ca:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	689a      	ldr	r2, [r3, #8]
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	005b      	lsls	r3, r3, #1
 80037d4:	fa02 f303 	lsl.w	r3, r2, r3
 80037d8:	693a      	ldr	r2, [r7, #16]
 80037da:	4313      	orrs	r3, r2
 80037dc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	693a      	ldr	r2, [r7, #16]
 80037e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f003 0303 	and.w	r3, r3, #3
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	d123      	bne.n	8003838 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	08da      	lsrs	r2, r3, #3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	3208      	adds	r2, #8
 80037f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	f003 0307 	and.w	r3, r3, #7
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	220f      	movs	r2, #15
 8003808:	fa02 f303 	lsl.w	r3, r2, r3
 800380c:	43db      	mvns	r3, r3
 800380e:	693a      	ldr	r2, [r7, #16]
 8003810:	4013      	ands	r3, r2
 8003812:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	691a      	ldr	r2, [r3, #16]
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	f003 0307 	and.w	r3, r3, #7
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	fa02 f303 	lsl.w	r3, r2, r3
 8003824:	693a      	ldr	r2, [r7, #16]
 8003826:	4313      	orrs	r3, r2
 8003828:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	08da      	lsrs	r2, r3, #3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	3208      	adds	r2, #8
 8003832:	6939      	ldr	r1, [r7, #16]
 8003834:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	005b      	lsls	r3, r3, #1
 8003842:	2203      	movs	r2, #3
 8003844:	fa02 f303 	lsl.w	r3, r2, r3
 8003848:	43db      	mvns	r3, r3
 800384a:	693a      	ldr	r2, [r7, #16]
 800384c:	4013      	ands	r3, r2
 800384e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	f003 0203 	and.w	r2, r3, #3
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	005b      	lsls	r3, r3, #1
 800385c:	fa02 f303 	lsl.w	r3, r2, r3
 8003860:	693a      	ldr	r2, [r7, #16]
 8003862:	4313      	orrs	r3, r2
 8003864:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	693a      	ldr	r2, [r7, #16]
 800386a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003874:	2b00      	cmp	r3, #0
 8003876:	f000 80ac 	beq.w	80039d2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800387a:	4b5f      	ldr	r3, [pc, #380]	; (80039f8 <HAL_GPIO_Init+0x330>)
 800387c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800387e:	4a5e      	ldr	r2, [pc, #376]	; (80039f8 <HAL_GPIO_Init+0x330>)
 8003880:	f043 0301 	orr.w	r3, r3, #1
 8003884:	6613      	str	r3, [r2, #96]	; 0x60
 8003886:	4b5c      	ldr	r3, [pc, #368]	; (80039f8 <HAL_GPIO_Init+0x330>)
 8003888:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800388a:	f003 0301 	and.w	r3, r3, #1
 800388e:	60bb      	str	r3, [r7, #8]
 8003890:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003892:	4a5a      	ldr	r2, [pc, #360]	; (80039fc <HAL_GPIO_Init+0x334>)
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	089b      	lsrs	r3, r3, #2
 8003898:	3302      	adds	r3, #2
 800389a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800389e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	f003 0303 	and.w	r3, r3, #3
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	220f      	movs	r2, #15
 80038aa:	fa02 f303 	lsl.w	r3, r2, r3
 80038ae:	43db      	mvns	r3, r3
 80038b0:	693a      	ldr	r2, [r7, #16]
 80038b2:	4013      	ands	r3, r2
 80038b4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80038bc:	d025      	beq.n	800390a <HAL_GPIO_Init+0x242>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a4f      	ldr	r2, [pc, #316]	; (8003a00 <HAL_GPIO_Init+0x338>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d01f      	beq.n	8003906 <HAL_GPIO_Init+0x23e>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a4e      	ldr	r2, [pc, #312]	; (8003a04 <HAL_GPIO_Init+0x33c>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d019      	beq.n	8003902 <HAL_GPIO_Init+0x23a>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a4d      	ldr	r2, [pc, #308]	; (8003a08 <HAL_GPIO_Init+0x340>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d013      	beq.n	80038fe <HAL_GPIO_Init+0x236>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a4c      	ldr	r2, [pc, #304]	; (8003a0c <HAL_GPIO_Init+0x344>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d00d      	beq.n	80038fa <HAL_GPIO_Init+0x232>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a4b      	ldr	r2, [pc, #300]	; (8003a10 <HAL_GPIO_Init+0x348>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d007      	beq.n	80038f6 <HAL_GPIO_Init+0x22e>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a4a      	ldr	r2, [pc, #296]	; (8003a14 <HAL_GPIO_Init+0x34c>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d101      	bne.n	80038f2 <HAL_GPIO_Init+0x22a>
 80038ee:	2306      	movs	r3, #6
 80038f0:	e00c      	b.n	800390c <HAL_GPIO_Init+0x244>
 80038f2:	2307      	movs	r3, #7
 80038f4:	e00a      	b.n	800390c <HAL_GPIO_Init+0x244>
 80038f6:	2305      	movs	r3, #5
 80038f8:	e008      	b.n	800390c <HAL_GPIO_Init+0x244>
 80038fa:	2304      	movs	r3, #4
 80038fc:	e006      	b.n	800390c <HAL_GPIO_Init+0x244>
 80038fe:	2303      	movs	r3, #3
 8003900:	e004      	b.n	800390c <HAL_GPIO_Init+0x244>
 8003902:	2302      	movs	r3, #2
 8003904:	e002      	b.n	800390c <HAL_GPIO_Init+0x244>
 8003906:	2301      	movs	r3, #1
 8003908:	e000      	b.n	800390c <HAL_GPIO_Init+0x244>
 800390a:	2300      	movs	r3, #0
 800390c:	697a      	ldr	r2, [r7, #20]
 800390e:	f002 0203 	and.w	r2, r2, #3
 8003912:	0092      	lsls	r2, r2, #2
 8003914:	4093      	lsls	r3, r2
 8003916:	693a      	ldr	r2, [r7, #16]
 8003918:	4313      	orrs	r3, r2
 800391a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800391c:	4937      	ldr	r1, [pc, #220]	; (80039fc <HAL_GPIO_Init+0x334>)
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	089b      	lsrs	r3, r3, #2
 8003922:	3302      	adds	r3, #2
 8003924:	693a      	ldr	r2, [r7, #16]
 8003926:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800392a:	4b3b      	ldr	r3, [pc, #236]	; (8003a18 <HAL_GPIO_Init+0x350>)
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	43db      	mvns	r3, r3
 8003934:	693a      	ldr	r2, [r7, #16]
 8003936:	4013      	ands	r3, r2
 8003938:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d003      	beq.n	800394e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003946:	693a      	ldr	r2, [r7, #16]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	4313      	orrs	r3, r2
 800394c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800394e:	4a32      	ldr	r2, [pc, #200]	; (8003a18 <HAL_GPIO_Init+0x350>)
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003954:	4b30      	ldr	r3, [pc, #192]	; (8003a18 <HAL_GPIO_Init+0x350>)
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	43db      	mvns	r3, r3
 800395e:	693a      	ldr	r2, [r7, #16]
 8003960:	4013      	ands	r3, r2
 8003962:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800396c:	2b00      	cmp	r3, #0
 800396e:	d003      	beq.n	8003978 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003970:	693a      	ldr	r2, [r7, #16]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	4313      	orrs	r3, r2
 8003976:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003978:	4a27      	ldr	r2, [pc, #156]	; (8003a18 <HAL_GPIO_Init+0x350>)
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800397e:	4b26      	ldr	r3, [pc, #152]	; (8003a18 <HAL_GPIO_Init+0x350>)
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	43db      	mvns	r3, r3
 8003988:	693a      	ldr	r2, [r7, #16]
 800398a:	4013      	ands	r3, r2
 800398c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003996:	2b00      	cmp	r3, #0
 8003998:	d003      	beq.n	80039a2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800399a:	693a      	ldr	r2, [r7, #16]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	4313      	orrs	r3, r2
 80039a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80039a2:	4a1d      	ldr	r2, [pc, #116]	; (8003a18 <HAL_GPIO_Init+0x350>)
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80039a8:	4b1b      	ldr	r3, [pc, #108]	; (8003a18 <HAL_GPIO_Init+0x350>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	43db      	mvns	r3, r3
 80039b2:	693a      	ldr	r2, [r7, #16]
 80039b4:	4013      	ands	r3, r2
 80039b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d003      	beq.n	80039cc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80039c4:	693a      	ldr	r2, [r7, #16]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80039cc:	4a12      	ldr	r2, [pc, #72]	; (8003a18 <HAL_GPIO_Init+0x350>)
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	3301      	adds	r3, #1
 80039d6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	fa22 f303 	lsr.w	r3, r2, r3
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	f47f ae78 	bne.w	80036d8 <HAL_GPIO_Init+0x10>
  }
}
 80039e8:	bf00      	nop
 80039ea:	bf00      	nop
 80039ec:	371c      	adds	r7, #28
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr
 80039f6:	bf00      	nop
 80039f8:	40021000 	.word	0x40021000
 80039fc:	40010000 	.word	0x40010000
 8003a00:	48000400 	.word	0x48000400
 8003a04:	48000800 	.word	0x48000800
 8003a08:	48000c00 	.word	0x48000c00
 8003a0c:	48001000 	.word	0x48001000
 8003a10:	48001400 	.word	0x48001400
 8003a14:	48001800 	.word	0x48001800
 8003a18:	40010400 	.word	0x40010400

08003a1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	460b      	mov	r3, r1
 8003a26:	807b      	strh	r3, [r7, #2]
 8003a28:	4613      	mov	r3, r2
 8003a2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a2c:	787b      	ldrb	r3, [r7, #1]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d003      	beq.n	8003a3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003a32:	887a      	ldrh	r2, [r7, #2]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003a38:	e002      	b.n	8003a40 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003a3a:	887a      	ldrh	r2, [r7, #2]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003a40:	bf00      	nop
 8003a42:	370c      	adds	r7, #12
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr

08003a4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d101      	bne.n	8003a5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e081      	b.n	8003b62 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d106      	bne.n	8003a78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f7fd fb6c 	bl	8001150 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2224      	movs	r2, #36	; 0x24
 8003a7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f022 0201 	bic.w	r2, r2, #1
 8003a8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685a      	ldr	r2, [r3, #4]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003a9c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	689a      	ldr	r2, [r3, #8]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003aac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d107      	bne.n	8003ac6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	689a      	ldr	r2, [r3, #8]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ac2:	609a      	str	r2, [r3, #8]
 8003ac4:	e006      	b.n	8003ad4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	689a      	ldr	r2, [r3, #8]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003ad2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d104      	bne.n	8003ae6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ae4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	6812      	ldr	r2, [r2, #0]
 8003af0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003af4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003af8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	68da      	ldr	r2, [r3, #12]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b08:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	691a      	ldr	r2, [r3, #16]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	695b      	ldr	r3, [r3, #20]
 8003b12:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	699b      	ldr	r3, [r3, #24]
 8003b1a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	430a      	orrs	r2, r1
 8003b22:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	69d9      	ldr	r1, [r3, #28]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6a1a      	ldr	r2, [r3, #32]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	430a      	orrs	r2, r1
 8003b32:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f042 0201 	orr.w	r2, r2, #1
 8003b42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2220      	movs	r2, #32
 8003b4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3708      	adds	r7, #8
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
	...

08003b6c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b088      	sub	sp, #32
 8003b70:	af02      	add	r7, sp, #8
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	607a      	str	r2, [r7, #4]
 8003b76:	461a      	mov	r2, r3
 8003b78:	460b      	mov	r3, r1
 8003b7a:	817b      	strh	r3, [r7, #10]
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	2b20      	cmp	r3, #32
 8003b8a:	f040 80da 	bne.w	8003d42 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d101      	bne.n	8003b9c <HAL_I2C_Master_Transmit+0x30>
 8003b98:	2302      	movs	r3, #2
 8003b9a:	e0d3      	b.n	8003d44 <HAL_I2C_Master_Transmit+0x1d8>
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003ba4:	f7ff f9d8 	bl	8002f58 <HAL_GetTick>
 8003ba8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	9300      	str	r3, [sp, #0]
 8003bae:	2319      	movs	r3, #25
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003bb6:	68f8      	ldr	r0, [r7, #12]
 8003bb8:	f000 fdc4 	bl	8004744 <I2C_WaitOnFlagUntilTimeout>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d001      	beq.n	8003bc6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e0be      	b.n	8003d44 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2221      	movs	r2, #33	; 0x21
 8003bca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2210      	movs	r2, #16
 8003bd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	893a      	ldrh	r2, [r7, #8]
 8003be6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2200      	movs	r2, #0
 8003bec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	2bff      	cmp	r3, #255	; 0xff
 8003bf6:	d90e      	bls.n	8003c16 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	22ff      	movs	r2, #255	; 0xff
 8003bfc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c02:	b2da      	uxtb	r2, r3
 8003c04:	8979      	ldrh	r1, [r7, #10]
 8003c06:	4b51      	ldr	r3, [pc, #324]	; (8003d4c <HAL_I2C_Master_Transmit+0x1e0>)
 8003c08:	9300      	str	r3, [sp, #0]
 8003c0a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c0e:	68f8      	ldr	r0, [r7, #12]
 8003c10:	f000 ffba 	bl	8004b88 <I2C_TransferConfig>
 8003c14:	e06c      	b.n	8003cf0 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c1a:	b29a      	uxth	r2, r3
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c24:	b2da      	uxtb	r2, r3
 8003c26:	8979      	ldrh	r1, [r7, #10]
 8003c28:	4b48      	ldr	r3, [pc, #288]	; (8003d4c <HAL_I2C_Master_Transmit+0x1e0>)
 8003c2a:	9300      	str	r3, [sp, #0]
 8003c2c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c30:	68f8      	ldr	r0, [r7, #12]
 8003c32:	f000 ffa9 	bl	8004b88 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003c36:	e05b      	b.n	8003cf0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c38:	697a      	ldr	r2, [r7, #20]
 8003c3a:	6a39      	ldr	r1, [r7, #32]
 8003c3c:	68f8      	ldr	r0, [r7, #12]
 8003c3e:	f000 fdc1 	bl	80047c4 <I2C_WaitOnTXISFlagUntilTimeout>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d001      	beq.n	8003c4c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e07b      	b.n	8003d44 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c50:	781a      	ldrb	r2, [r3, #0]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5c:	1c5a      	adds	r2, r3, #1
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	3b01      	subs	r3, #1
 8003c6a:	b29a      	uxth	r2, r3
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c74:	3b01      	subs	r3, #1
 8003c76:	b29a      	uxth	r2, r3
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d034      	beq.n	8003cf0 <HAL_I2C_Master_Transmit+0x184>
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d130      	bne.n	8003cf0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	9300      	str	r3, [sp, #0]
 8003c92:	6a3b      	ldr	r3, [r7, #32]
 8003c94:	2200      	movs	r2, #0
 8003c96:	2180      	movs	r1, #128	; 0x80
 8003c98:	68f8      	ldr	r0, [r7, #12]
 8003c9a:	f000 fd53 	bl	8004744 <I2C_WaitOnFlagUntilTimeout>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d001      	beq.n	8003ca8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e04d      	b.n	8003d44 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	2bff      	cmp	r3, #255	; 0xff
 8003cb0:	d90e      	bls.n	8003cd0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	22ff      	movs	r2, #255	; 0xff
 8003cb6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cbc:	b2da      	uxtb	r2, r3
 8003cbe:	8979      	ldrh	r1, [r7, #10]
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	9300      	str	r3, [sp, #0]
 8003cc4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003cc8:	68f8      	ldr	r0, [r7, #12]
 8003cca:	f000 ff5d 	bl	8004b88 <I2C_TransferConfig>
 8003cce:	e00f      	b.n	8003cf0 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cd4:	b29a      	uxth	r2, r3
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cde:	b2da      	uxtb	r2, r3
 8003ce0:	8979      	ldrh	r1, [r7, #10]
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	9300      	str	r3, [sp, #0]
 8003ce6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003cea:	68f8      	ldr	r0, [r7, #12]
 8003cec:	f000 ff4c 	bl	8004b88 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d19e      	bne.n	8003c38 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cfa:	697a      	ldr	r2, [r7, #20]
 8003cfc:	6a39      	ldr	r1, [r7, #32]
 8003cfe:	68f8      	ldr	r0, [r7, #12]
 8003d00:	f000 fda0 	bl	8004844 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d001      	beq.n	8003d0e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e01a      	b.n	8003d44 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	2220      	movs	r2, #32
 8003d14:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	6859      	ldr	r1, [r3, #4]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	4b0b      	ldr	r3, [pc, #44]	; (8003d50 <HAL_I2C_Master_Transmit+0x1e4>)
 8003d22:	400b      	ands	r3, r1
 8003d24:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2220      	movs	r2, #32
 8003d2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2200      	movs	r2, #0
 8003d32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	e000      	b.n	8003d44 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003d42:	2302      	movs	r3, #2
  }
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3718      	adds	r7, #24
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	80002000 	.word	0x80002000
 8003d50:	fe00e800 	.word	0xfe00e800

08003d54 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b088      	sub	sp, #32
 8003d58:	af02      	add	r7, sp, #8
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	607a      	str	r2, [r7, #4]
 8003d5e:	461a      	mov	r2, r3
 8003d60:	460b      	mov	r3, r1
 8003d62:	817b      	strh	r3, [r7, #10]
 8003d64:	4613      	mov	r3, r2
 8003d66:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	2b20      	cmp	r3, #32
 8003d72:	f040 80db 	bne.w	8003f2c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d101      	bne.n	8003d84 <HAL_I2C_Master_Receive+0x30>
 8003d80:	2302      	movs	r3, #2
 8003d82:	e0d4      	b.n	8003f2e <HAL_I2C_Master_Receive+0x1da>
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003d8c:	f7ff f8e4 	bl	8002f58 <HAL_GetTick>
 8003d90:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	9300      	str	r3, [sp, #0]
 8003d96:	2319      	movs	r3, #25
 8003d98:	2201      	movs	r2, #1
 8003d9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003d9e:	68f8      	ldr	r0, [r7, #12]
 8003da0:	f000 fcd0 	bl	8004744 <I2C_WaitOnFlagUntilTimeout>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d001      	beq.n	8003dae <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e0bf      	b.n	8003f2e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2222      	movs	r2, #34	; 0x22
 8003db2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2210      	movs	r2, #16
 8003dba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	893a      	ldrh	r2, [r7, #8]
 8003dce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	2bff      	cmp	r3, #255	; 0xff
 8003dde:	d90e      	bls.n	8003dfe <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	22ff      	movs	r2, #255	; 0xff
 8003de4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dea:	b2da      	uxtb	r2, r3
 8003dec:	8979      	ldrh	r1, [r7, #10]
 8003dee:	4b52      	ldr	r3, [pc, #328]	; (8003f38 <HAL_I2C_Master_Receive+0x1e4>)
 8003df0:	9300      	str	r3, [sp, #0]
 8003df2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003df6:	68f8      	ldr	r0, [r7, #12]
 8003df8:	f000 fec6 	bl	8004b88 <I2C_TransferConfig>
 8003dfc:	e06d      	b.n	8003eda <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e02:	b29a      	uxth	r2, r3
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e0c:	b2da      	uxtb	r2, r3
 8003e0e:	8979      	ldrh	r1, [r7, #10]
 8003e10:	4b49      	ldr	r3, [pc, #292]	; (8003f38 <HAL_I2C_Master_Receive+0x1e4>)
 8003e12:	9300      	str	r3, [sp, #0]
 8003e14:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e18:	68f8      	ldr	r0, [r7, #12]
 8003e1a:	f000 feb5 	bl	8004b88 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003e1e:	e05c      	b.n	8003eda <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e20:	697a      	ldr	r2, [r7, #20]
 8003e22:	6a39      	ldr	r1, [r7, #32]
 8003e24:	68f8      	ldr	r0, [r7, #12]
 8003e26:	f000 fd49 	bl	80048bc <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d001      	beq.n	8003e34 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e07c      	b.n	8003f2e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3e:	b2d2      	uxtb	r2, r2
 8003e40:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e46:	1c5a      	adds	r2, r3, #1
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e50:	3b01      	subs	r3, #1
 8003e52:	b29a      	uxth	r2, r3
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	3b01      	subs	r3, #1
 8003e60:	b29a      	uxth	r2, r3
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d034      	beq.n	8003eda <HAL_I2C_Master_Receive+0x186>
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d130      	bne.n	8003eda <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	9300      	str	r3, [sp, #0]
 8003e7c:	6a3b      	ldr	r3, [r7, #32]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	2180      	movs	r1, #128	; 0x80
 8003e82:	68f8      	ldr	r0, [r7, #12]
 8003e84:	f000 fc5e 	bl	8004744 <I2C_WaitOnFlagUntilTimeout>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d001      	beq.n	8003e92 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e04d      	b.n	8003f2e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	2bff      	cmp	r3, #255	; 0xff
 8003e9a:	d90e      	bls.n	8003eba <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	22ff      	movs	r2, #255	; 0xff
 8003ea0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ea6:	b2da      	uxtb	r2, r3
 8003ea8:	8979      	ldrh	r1, [r7, #10]
 8003eaa:	2300      	movs	r3, #0
 8003eac:	9300      	str	r3, [sp, #0]
 8003eae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003eb2:	68f8      	ldr	r0, [r7, #12]
 8003eb4:	f000 fe68 	bl	8004b88 <I2C_TransferConfig>
 8003eb8:	e00f      	b.n	8003eda <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ebe:	b29a      	uxth	r2, r3
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ec8:	b2da      	uxtb	r2, r3
 8003eca:	8979      	ldrh	r1, [r7, #10]
 8003ecc:	2300      	movs	r3, #0
 8003ece:	9300      	str	r3, [sp, #0]
 8003ed0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ed4:	68f8      	ldr	r0, [r7, #12]
 8003ed6:	f000 fe57 	bl	8004b88 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d19d      	bne.n	8003e20 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ee4:	697a      	ldr	r2, [r7, #20]
 8003ee6:	6a39      	ldr	r1, [r7, #32]
 8003ee8:	68f8      	ldr	r0, [r7, #12]
 8003eea:	f000 fcab 	bl	8004844 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d001      	beq.n	8003ef8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e01a      	b.n	8003f2e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	2220      	movs	r2, #32
 8003efe:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	6859      	ldr	r1, [r3, #4]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	4b0c      	ldr	r3, [pc, #48]	; (8003f3c <HAL_I2C_Master_Receive+0x1e8>)
 8003f0c:	400b      	ands	r3, r1
 8003f0e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2220      	movs	r2, #32
 8003f14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2200      	movs	r2, #0
 8003f24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	e000      	b.n	8003f2e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003f2c:	2302      	movs	r3, #2
  }
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3718      	adds	r7, #24
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	80002400 	.word	0x80002400
 8003f3c:	fe00e800 	.word	0xfe00e800

08003f40 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b088      	sub	sp, #32
 8003f44:	af02      	add	r7, sp, #8
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	4608      	mov	r0, r1
 8003f4a:	4611      	mov	r1, r2
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	4603      	mov	r3, r0
 8003f50:	817b      	strh	r3, [r7, #10]
 8003f52:	460b      	mov	r3, r1
 8003f54:	813b      	strh	r3, [r7, #8]
 8003f56:	4613      	mov	r3, r2
 8003f58:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	2b20      	cmp	r3, #32
 8003f64:	f040 80f9 	bne.w	800415a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f68:	6a3b      	ldr	r3, [r7, #32]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d002      	beq.n	8003f74 <HAL_I2C_Mem_Write+0x34>
 8003f6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d105      	bne.n	8003f80 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f7a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e0ed      	b.n	800415c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d101      	bne.n	8003f8e <HAL_I2C_Mem_Write+0x4e>
 8003f8a:	2302      	movs	r3, #2
 8003f8c:	e0e6      	b.n	800415c <HAL_I2C_Mem_Write+0x21c>
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2201      	movs	r2, #1
 8003f92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003f96:	f7fe ffdf 	bl	8002f58 <HAL_GetTick>
 8003f9a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	9300      	str	r3, [sp, #0]
 8003fa0:	2319      	movs	r3, #25
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003fa8:	68f8      	ldr	r0, [r7, #12]
 8003faa:	f000 fbcb 	bl	8004744 <I2C_WaitOnFlagUntilTimeout>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d001      	beq.n	8003fb8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e0d1      	b.n	800415c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2221      	movs	r2, #33	; 0x21
 8003fbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2240      	movs	r2, #64	; 0x40
 8003fc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	6a3a      	ldr	r2, [r7, #32]
 8003fd2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003fd8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003fe0:	88f8      	ldrh	r0, [r7, #6]
 8003fe2:	893a      	ldrh	r2, [r7, #8]
 8003fe4:	8979      	ldrh	r1, [r7, #10]
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	9301      	str	r3, [sp, #4]
 8003fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fec:	9300      	str	r3, [sp, #0]
 8003fee:	4603      	mov	r3, r0
 8003ff0:	68f8      	ldr	r0, [r7, #12]
 8003ff2:	f000 fadb 	bl	80045ac <I2C_RequestMemoryWrite>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d005      	beq.n	8004008 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e0a9      	b.n	800415c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800400c:	b29b      	uxth	r3, r3
 800400e:	2bff      	cmp	r3, #255	; 0xff
 8004010:	d90e      	bls.n	8004030 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	22ff      	movs	r2, #255	; 0xff
 8004016:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800401c:	b2da      	uxtb	r2, r3
 800401e:	8979      	ldrh	r1, [r7, #10]
 8004020:	2300      	movs	r3, #0
 8004022:	9300      	str	r3, [sp, #0]
 8004024:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004028:	68f8      	ldr	r0, [r7, #12]
 800402a:	f000 fdad 	bl	8004b88 <I2C_TransferConfig>
 800402e:	e00f      	b.n	8004050 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004034:	b29a      	uxth	r2, r3
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800403e:	b2da      	uxtb	r2, r3
 8004040:	8979      	ldrh	r1, [r7, #10]
 8004042:	2300      	movs	r3, #0
 8004044:	9300      	str	r3, [sp, #0]
 8004046:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800404a:	68f8      	ldr	r0, [r7, #12]
 800404c:	f000 fd9c 	bl	8004b88 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004050:	697a      	ldr	r2, [r7, #20]
 8004052:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004054:	68f8      	ldr	r0, [r7, #12]
 8004056:	f000 fbb5 	bl	80047c4 <I2C_WaitOnTXISFlagUntilTimeout>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d001      	beq.n	8004064 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e07b      	b.n	800415c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004068:	781a      	ldrb	r2, [r3, #0]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004074:	1c5a      	adds	r2, r3, #1
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800407e:	b29b      	uxth	r3, r3
 8004080:	3b01      	subs	r3, #1
 8004082:	b29a      	uxth	r2, r3
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800408c:	3b01      	subs	r3, #1
 800408e:	b29a      	uxth	r2, r3
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004098:	b29b      	uxth	r3, r3
 800409a:	2b00      	cmp	r3, #0
 800409c:	d034      	beq.n	8004108 <HAL_I2C_Mem_Write+0x1c8>
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d130      	bne.n	8004108 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	9300      	str	r3, [sp, #0]
 80040aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ac:	2200      	movs	r2, #0
 80040ae:	2180      	movs	r1, #128	; 0x80
 80040b0:	68f8      	ldr	r0, [r7, #12]
 80040b2:	f000 fb47 	bl	8004744 <I2C_WaitOnFlagUntilTimeout>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d001      	beq.n	80040c0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e04d      	b.n	800415c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	2bff      	cmp	r3, #255	; 0xff
 80040c8:	d90e      	bls.n	80040e8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	22ff      	movs	r2, #255	; 0xff
 80040ce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040d4:	b2da      	uxtb	r2, r3
 80040d6:	8979      	ldrh	r1, [r7, #10]
 80040d8:	2300      	movs	r3, #0
 80040da:	9300      	str	r3, [sp, #0]
 80040dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80040e0:	68f8      	ldr	r0, [r7, #12]
 80040e2:	f000 fd51 	bl	8004b88 <I2C_TransferConfig>
 80040e6:	e00f      	b.n	8004108 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ec:	b29a      	uxth	r2, r3
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040f6:	b2da      	uxtb	r2, r3
 80040f8:	8979      	ldrh	r1, [r7, #10]
 80040fa:	2300      	movs	r3, #0
 80040fc:	9300      	str	r3, [sp, #0]
 80040fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004102:	68f8      	ldr	r0, [r7, #12]
 8004104:	f000 fd40 	bl	8004b88 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800410c:	b29b      	uxth	r3, r3
 800410e:	2b00      	cmp	r3, #0
 8004110:	d19e      	bne.n	8004050 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004112:	697a      	ldr	r2, [r7, #20]
 8004114:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004116:	68f8      	ldr	r0, [r7, #12]
 8004118:	f000 fb94 	bl	8004844 <I2C_WaitOnSTOPFlagUntilTimeout>
 800411c:	4603      	mov	r3, r0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d001      	beq.n	8004126 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e01a      	b.n	800415c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2220      	movs	r2, #32
 800412c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	6859      	ldr	r1, [r3, #4]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	4b0a      	ldr	r3, [pc, #40]	; (8004164 <HAL_I2C_Mem_Write+0x224>)
 800413a:	400b      	ands	r3, r1
 800413c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2220      	movs	r2, #32
 8004142:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2200      	movs	r2, #0
 800414a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2200      	movs	r2, #0
 8004152:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004156:	2300      	movs	r3, #0
 8004158:	e000      	b.n	800415c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800415a:	2302      	movs	r3, #2
  }
}
 800415c:	4618      	mov	r0, r3
 800415e:	3718      	adds	r7, #24
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}
 8004164:	fe00e800 	.word	0xfe00e800

08004168 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b088      	sub	sp, #32
 800416c:	af02      	add	r7, sp, #8
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	4608      	mov	r0, r1
 8004172:	4611      	mov	r1, r2
 8004174:	461a      	mov	r2, r3
 8004176:	4603      	mov	r3, r0
 8004178:	817b      	strh	r3, [r7, #10]
 800417a:	460b      	mov	r3, r1
 800417c:	813b      	strh	r3, [r7, #8]
 800417e:	4613      	mov	r3, r2
 8004180:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004188:	b2db      	uxtb	r3, r3
 800418a:	2b20      	cmp	r3, #32
 800418c:	f040 80fd 	bne.w	800438a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004190:	6a3b      	ldr	r3, [r7, #32]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d002      	beq.n	800419c <HAL_I2C_Mem_Read+0x34>
 8004196:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004198:	2b00      	cmp	r3, #0
 800419a:	d105      	bne.n	80041a8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041a2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e0f1      	b.n	800438c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d101      	bne.n	80041b6 <HAL_I2C_Mem_Read+0x4e>
 80041b2:	2302      	movs	r3, #2
 80041b4:	e0ea      	b.n	800438c <HAL_I2C_Mem_Read+0x224>
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2201      	movs	r2, #1
 80041ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80041be:	f7fe fecb 	bl	8002f58 <HAL_GetTick>
 80041c2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	9300      	str	r3, [sp, #0]
 80041c8:	2319      	movs	r3, #25
 80041ca:	2201      	movs	r2, #1
 80041cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80041d0:	68f8      	ldr	r0, [r7, #12]
 80041d2:	f000 fab7 	bl	8004744 <I2C_WaitOnFlagUntilTimeout>
 80041d6:	4603      	mov	r3, r0
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d001      	beq.n	80041e0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	e0d5      	b.n	800438c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2222      	movs	r2, #34	; 0x22
 80041e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2240      	movs	r2, #64	; 0x40
 80041ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2200      	movs	r2, #0
 80041f4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6a3a      	ldr	r2, [r7, #32]
 80041fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004200:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2200      	movs	r2, #0
 8004206:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004208:	88f8      	ldrh	r0, [r7, #6]
 800420a:	893a      	ldrh	r2, [r7, #8]
 800420c:	8979      	ldrh	r1, [r7, #10]
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	9301      	str	r3, [sp, #4]
 8004212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004214:	9300      	str	r3, [sp, #0]
 8004216:	4603      	mov	r3, r0
 8004218:	68f8      	ldr	r0, [r7, #12]
 800421a:	f000 fa1b 	bl	8004654 <I2C_RequestMemoryRead>
 800421e:	4603      	mov	r3, r0
 8004220:	2b00      	cmp	r3, #0
 8004222:	d005      	beq.n	8004230 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2200      	movs	r2, #0
 8004228:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e0ad      	b.n	800438c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004234:	b29b      	uxth	r3, r3
 8004236:	2bff      	cmp	r3, #255	; 0xff
 8004238:	d90e      	bls.n	8004258 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	22ff      	movs	r2, #255	; 0xff
 800423e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004244:	b2da      	uxtb	r2, r3
 8004246:	8979      	ldrh	r1, [r7, #10]
 8004248:	4b52      	ldr	r3, [pc, #328]	; (8004394 <HAL_I2C_Mem_Read+0x22c>)
 800424a:	9300      	str	r3, [sp, #0]
 800424c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004250:	68f8      	ldr	r0, [r7, #12]
 8004252:	f000 fc99 	bl	8004b88 <I2C_TransferConfig>
 8004256:	e00f      	b.n	8004278 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800425c:	b29a      	uxth	r2, r3
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004266:	b2da      	uxtb	r2, r3
 8004268:	8979      	ldrh	r1, [r7, #10]
 800426a:	4b4a      	ldr	r3, [pc, #296]	; (8004394 <HAL_I2C_Mem_Read+0x22c>)
 800426c:	9300      	str	r3, [sp, #0]
 800426e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004272:	68f8      	ldr	r0, [r7, #12]
 8004274:	f000 fc88 	bl	8004b88 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	9300      	str	r3, [sp, #0]
 800427c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800427e:	2200      	movs	r2, #0
 8004280:	2104      	movs	r1, #4
 8004282:	68f8      	ldr	r0, [r7, #12]
 8004284:	f000 fa5e 	bl	8004744 <I2C_WaitOnFlagUntilTimeout>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d001      	beq.n	8004292 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e07c      	b.n	800438c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429c:	b2d2      	uxtb	r2, r2
 800429e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a4:	1c5a      	adds	r2, r3, #1
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042ae:	3b01      	subs	r3, #1
 80042b0:	b29a      	uxth	r2, r3
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	3b01      	subs	r3, #1
 80042be:	b29a      	uxth	r2, r3
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d034      	beq.n	8004338 <HAL_I2C_Mem_Read+0x1d0>
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d130      	bne.n	8004338 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	9300      	str	r3, [sp, #0]
 80042da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042dc:	2200      	movs	r2, #0
 80042de:	2180      	movs	r1, #128	; 0x80
 80042e0:	68f8      	ldr	r0, [r7, #12]
 80042e2:	f000 fa2f 	bl	8004744 <I2C_WaitOnFlagUntilTimeout>
 80042e6:	4603      	mov	r3, r0
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d001      	beq.n	80042f0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e04d      	b.n	800438c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	2bff      	cmp	r3, #255	; 0xff
 80042f8:	d90e      	bls.n	8004318 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	22ff      	movs	r2, #255	; 0xff
 80042fe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004304:	b2da      	uxtb	r2, r3
 8004306:	8979      	ldrh	r1, [r7, #10]
 8004308:	2300      	movs	r3, #0
 800430a:	9300      	str	r3, [sp, #0]
 800430c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004310:	68f8      	ldr	r0, [r7, #12]
 8004312:	f000 fc39 	bl	8004b88 <I2C_TransferConfig>
 8004316:	e00f      	b.n	8004338 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800431c:	b29a      	uxth	r2, r3
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004326:	b2da      	uxtb	r2, r3
 8004328:	8979      	ldrh	r1, [r7, #10]
 800432a:	2300      	movs	r3, #0
 800432c:	9300      	str	r3, [sp, #0]
 800432e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004332:	68f8      	ldr	r0, [r7, #12]
 8004334:	f000 fc28 	bl	8004b88 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800433c:	b29b      	uxth	r3, r3
 800433e:	2b00      	cmp	r3, #0
 8004340:	d19a      	bne.n	8004278 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004342:	697a      	ldr	r2, [r7, #20]
 8004344:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004346:	68f8      	ldr	r0, [r7, #12]
 8004348:	f000 fa7c 	bl	8004844 <I2C_WaitOnSTOPFlagUntilTimeout>
 800434c:	4603      	mov	r3, r0
 800434e:	2b00      	cmp	r3, #0
 8004350:	d001      	beq.n	8004356 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e01a      	b.n	800438c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	2220      	movs	r2, #32
 800435c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	6859      	ldr	r1, [r3, #4]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	4b0b      	ldr	r3, [pc, #44]	; (8004398 <HAL_I2C_Mem_Read+0x230>)
 800436a:	400b      	ands	r3, r1
 800436c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2220      	movs	r2, #32
 8004372:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2200      	movs	r2, #0
 800437a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2200      	movs	r2, #0
 8004382:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004386:	2300      	movs	r3, #0
 8004388:	e000      	b.n	800438c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800438a:	2302      	movs	r3, #2
  }
}
 800438c:	4618      	mov	r0, r3
 800438e:	3718      	adds	r7, #24
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}
 8004394:	80002400 	.word	0x80002400
 8004398:	fe00e800 	.word	0xfe00e800

0800439c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b08a      	sub	sp, #40	; 0x28
 80043a0:	af02      	add	r7, sp, #8
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	607a      	str	r2, [r7, #4]
 80043a6:	603b      	str	r3, [r7, #0]
 80043a8:	460b      	mov	r3, r1
 80043aa:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80043ac:	2300      	movs	r3, #0
 80043ae:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	2b20      	cmp	r3, #32
 80043ba:	f040 80f1 	bne.w	80045a0 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	699b      	ldr	r3, [r3, #24]
 80043c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043cc:	d101      	bne.n	80043d2 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80043ce:	2302      	movs	r3, #2
 80043d0:	e0e7      	b.n	80045a2 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d101      	bne.n	80043e0 <HAL_I2C_IsDeviceReady+0x44>
 80043dc:	2302      	movs	r3, #2
 80043de:	e0e0      	b.n	80045a2 <HAL_I2C_IsDeviceReady+0x206>
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2224      	movs	r2, #36	; 0x24
 80043ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2200      	movs	r2, #0
 80043f4:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d107      	bne.n	800440e <HAL_I2C_IsDeviceReady+0x72>
 80043fe:	897b      	ldrh	r3, [r7, #10]
 8004400:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004404:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004408:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800440c:	e004      	b.n	8004418 <HAL_I2C_IsDeviceReady+0x7c>
 800440e:	897b      	ldrh	r3, [r7, #10]
 8004410:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004414:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8004418:	68fa      	ldr	r2, [r7, #12]
 800441a:	6812      	ldr	r2, [r2, #0]
 800441c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800441e:	f7fe fd9b 	bl	8002f58 <HAL_GetTick>
 8004422:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	699b      	ldr	r3, [r3, #24]
 800442a:	f003 0320 	and.w	r3, r3, #32
 800442e:	2b20      	cmp	r3, #32
 8004430:	bf0c      	ite	eq
 8004432:	2301      	moveq	r3, #1
 8004434:	2300      	movne	r3, #0
 8004436:	b2db      	uxtb	r3, r3
 8004438:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	699b      	ldr	r3, [r3, #24]
 8004440:	f003 0310 	and.w	r3, r3, #16
 8004444:	2b10      	cmp	r3, #16
 8004446:	bf0c      	ite	eq
 8004448:	2301      	moveq	r3, #1
 800444a:	2300      	movne	r3, #0
 800444c:	b2db      	uxtb	r3, r3
 800444e:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004450:	e034      	b.n	80044bc <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004458:	d01a      	beq.n	8004490 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800445a:	f7fe fd7d 	bl	8002f58 <HAL_GetTick>
 800445e:	4602      	mov	r2, r0
 8004460:	69bb      	ldr	r3, [r7, #24]
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	683a      	ldr	r2, [r7, #0]
 8004466:	429a      	cmp	r2, r3
 8004468:	d302      	bcc.n	8004470 <HAL_I2C_IsDeviceReady+0xd4>
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d10f      	bne.n	8004490 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2220      	movs	r2, #32
 8004474:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800447c:	f043 0220 	orr.w	r2, r3, #32
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2200      	movs	r2, #0
 8004488:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e088      	b.n	80045a2 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	699b      	ldr	r3, [r3, #24]
 8004496:	f003 0320 	and.w	r3, r3, #32
 800449a:	2b20      	cmp	r3, #32
 800449c:	bf0c      	ite	eq
 800449e:	2301      	moveq	r3, #1
 80044a0:	2300      	movne	r3, #0
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	699b      	ldr	r3, [r3, #24]
 80044ac:	f003 0310 	and.w	r3, r3, #16
 80044b0:	2b10      	cmp	r3, #16
 80044b2:	bf0c      	ite	eq
 80044b4:	2301      	moveq	r3, #1
 80044b6:	2300      	movne	r3, #0
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80044bc:	7ffb      	ldrb	r3, [r7, #31]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d102      	bne.n	80044c8 <HAL_I2C_IsDeviceReady+0x12c>
 80044c2:	7fbb      	ldrb	r3, [r7, #30]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d0c4      	beq.n	8004452 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	699b      	ldr	r3, [r3, #24]
 80044ce:	f003 0310 	and.w	r3, r3, #16
 80044d2:	2b10      	cmp	r3, #16
 80044d4:	d01a      	beq.n	800450c <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	9300      	str	r3, [sp, #0]
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	2200      	movs	r2, #0
 80044de:	2120      	movs	r1, #32
 80044e0:	68f8      	ldr	r0, [r7, #12]
 80044e2:	f000 f92f 	bl	8004744 <I2C_WaitOnFlagUntilTimeout>
 80044e6:	4603      	mov	r3, r0
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d001      	beq.n	80044f0 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	e058      	b.n	80045a2 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2220      	movs	r2, #32
 80044f6:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2220      	movs	r2, #32
 80044fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2200      	movs	r2, #0
 8004504:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8004508:	2300      	movs	r3, #0
 800450a:	e04a      	b.n	80045a2 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800450c:	69bb      	ldr	r3, [r7, #24]
 800450e:	9300      	str	r3, [sp, #0]
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	2200      	movs	r2, #0
 8004514:	2120      	movs	r1, #32
 8004516:	68f8      	ldr	r0, [r7, #12]
 8004518:	f000 f914 	bl	8004744 <I2C_WaitOnFlagUntilTimeout>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d001      	beq.n	8004526 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e03d      	b.n	80045a2 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	2210      	movs	r2, #16
 800452c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	2220      	movs	r2, #32
 8004534:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	429a      	cmp	r2, r3
 800453c:	d118      	bne.n	8004570 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	685a      	ldr	r2, [r3, #4]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800454c:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800454e:	69bb      	ldr	r3, [r7, #24]
 8004550:	9300      	str	r3, [sp, #0]
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	2200      	movs	r2, #0
 8004556:	2120      	movs	r1, #32
 8004558:	68f8      	ldr	r0, [r7, #12]
 800455a:	f000 f8f3 	bl	8004744 <I2C_WaitOnFlagUntilTimeout>
 800455e:	4603      	mov	r3, r0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d001      	beq.n	8004568 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e01c      	b.n	80045a2 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2220      	movs	r2, #32
 800456e:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	3301      	adds	r3, #1
 8004574:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	687a      	ldr	r2, [r7, #4]
 800457a:	429a      	cmp	r2, r3
 800457c:	f63f af3b 	bhi.w	80043f6 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2220      	movs	r2, #32
 8004584:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800458c:	f043 0220 	orr.w	r2, r3, #32
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2200      	movs	r2, #0
 8004598:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e000      	b.n	80045a2 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 80045a0:	2302      	movs	r3, #2
  }
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3720      	adds	r7, #32
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
	...

080045ac <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b086      	sub	sp, #24
 80045b0:	af02      	add	r7, sp, #8
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	4608      	mov	r0, r1
 80045b6:	4611      	mov	r1, r2
 80045b8:	461a      	mov	r2, r3
 80045ba:	4603      	mov	r3, r0
 80045bc:	817b      	strh	r3, [r7, #10]
 80045be:	460b      	mov	r3, r1
 80045c0:	813b      	strh	r3, [r7, #8]
 80045c2:	4613      	mov	r3, r2
 80045c4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80045c6:	88fb      	ldrh	r3, [r7, #6]
 80045c8:	b2da      	uxtb	r2, r3
 80045ca:	8979      	ldrh	r1, [r7, #10]
 80045cc:	4b20      	ldr	r3, [pc, #128]	; (8004650 <I2C_RequestMemoryWrite+0xa4>)
 80045ce:	9300      	str	r3, [sp, #0]
 80045d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80045d4:	68f8      	ldr	r0, [r7, #12]
 80045d6:	f000 fad7 	bl	8004b88 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045da:	69fa      	ldr	r2, [r7, #28]
 80045dc:	69b9      	ldr	r1, [r7, #24]
 80045de:	68f8      	ldr	r0, [r7, #12]
 80045e0:	f000 f8f0 	bl	80047c4 <I2C_WaitOnTXISFlagUntilTimeout>
 80045e4:	4603      	mov	r3, r0
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d001      	beq.n	80045ee <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e02c      	b.n	8004648 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80045ee:	88fb      	ldrh	r3, [r7, #6]
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d105      	bne.n	8004600 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80045f4:	893b      	ldrh	r3, [r7, #8]
 80045f6:	b2da      	uxtb	r2, r3
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	629a      	str	r2, [r3, #40]	; 0x28
 80045fe:	e015      	b.n	800462c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004600:	893b      	ldrh	r3, [r7, #8]
 8004602:	0a1b      	lsrs	r3, r3, #8
 8004604:	b29b      	uxth	r3, r3
 8004606:	b2da      	uxtb	r2, r3
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800460e:	69fa      	ldr	r2, [r7, #28]
 8004610:	69b9      	ldr	r1, [r7, #24]
 8004612:	68f8      	ldr	r0, [r7, #12]
 8004614:	f000 f8d6 	bl	80047c4 <I2C_WaitOnTXISFlagUntilTimeout>
 8004618:	4603      	mov	r3, r0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d001      	beq.n	8004622 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e012      	b.n	8004648 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004622:	893b      	ldrh	r3, [r7, #8]
 8004624:	b2da      	uxtb	r2, r3
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	9300      	str	r3, [sp, #0]
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	2200      	movs	r2, #0
 8004634:	2180      	movs	r1, #128	; 0x80
 8004636:	68f8      	ldr	r0, [r7, #12]
 8004638:	f000 f884 	bl	8004744 <I2C_WaitOnFlagUntilTimeout>
 800463c:	4603      	mov	r3, r0
 800463e:	2b00      	cmp	r3, #0
 8004640:	d001      	beq.n	8004646 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e000      	b.n	8004648 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004646:	2300      	movs	r3, #0
}
 8004648:	4618      	mov	r0, r3
 800464a:	3710      	adds	r7, #16
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}
 8004650:	80002000 	.word	0x80002000

08004654 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b086      	sub	sp, #24
 8004658:	af02      	add	r7, sp, #8
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	4608      	mov	r0, r1
 800465e:	4611      	mov	r1, r2
 8004660:	461a      	mov	r2, r3
 8004662:	4603      	mov	r3, r0
 8004664:	817b      	strh	r3, [r7, #10]
 8004666:	460b      	mov	r3, r1
 8004668:	813b      	strh	r3, [r7, #8]
 800466a:	4613      	mov	r3, r2
 800466c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800466e:	88fb      	ldrh	r3, [r7, #6]
 8004670:	b2da      	uxtb	r2, r3
 8004672:	8979      	ldrh	r1, [r7, #10]
 8004674:	4b20      	ldr	r3, [pc, #128]	; (80046f8 <I2C_RequestMemoryRead+0xa4>)
 8004676:	9300      	str	r3, [sp, #0]
 8004678:	2300      	movs	r3, #0
 800467a:	68f8      	ldr	r0, [r7, #12]
 800467c:	f000 fa84 	bl	8004b88 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004680:	69fa      	ldr	r2, [r7, #28]
 8004682:	69b9      	ldr	r1, [r7, #24]
 8004684:	68f8      	ldr	r0, [r7, #12]
 8004686:	f000 f89d 	bl	80047c4 <I2C_WaitOnTXISFlagUntilTimeout>
 800468a:	4603      	mov	r3, r0
 800468c:	2b00      	cmp	r3, #0
 800468e:	d001      	beq.n	8004694 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	e02c      	b.n	80046ee <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004694:	88fb      	ldrh	r3, [r7, #6]
 8004696:	2b01      	cmp	r3, #1
 8004698:	d105      	bne.n	80046a6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800469a:	893b      	ldrh	r3, [r7, #8]
 800469c:	b2da      	uxtb	r2, r3
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	629a      	str	r2, [r3, #40]	; 0x28
 80046a4:	e015      	b.n	80046d2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80046a6:	893b      	ldrh	r3, [r7, #8]
 80046a8:	0a1b      	lsrs	r3, r3, #8
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	b2da      	uxtb	r2, r3
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046b4:	69fa      	ldr	r2, [r7, #28]
 80046b6:	69b9      	ldr	r1, [r7, #24]
 80046b8:	68f8      	ldr	r0, [r7, #12]
 80046ba:	f000 f883 	bl	80047c4 <I2C_WaitOnTXISFlagUntilTimeout>
 80046be:	4603      	mov	r3, r0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d001      	beq.n	80046c8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e012      	b.n	80046ee <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80046c8:	893b      	ldrh	r3, [r7, #8]
 80046ca:	b2da      	uxtb	r2, r3
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	9300      	str	r3, [sp, #0]
 80046d6:	69bb      	ldr	r3, [r7, #24]
 80046d8:	2200      	movs	r2, #0
 80046da:	2140      	movs	r1, #64	; 0x40
 80046dc:	68f8      	ldr	r0, [r7, #12]
 80046de:	f000 f831 	bl	8004744 <I2C_WaitOnFlagUntilTimeout>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d001      	beq.n	80046ec <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e000      	b.n	80046ee <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80046ec:	2300      	movs	r3, #0
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3710      	adds	r7, #16
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop
 80046f8:	80002000 	.word	0x80002000

080046fc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	699b      	ldr	r3, [r3, #24]
 800470a:	f003 0302 	and.w	r3, r3, #2
 800470e:	2b02      	cmp	r3, #2
 8004710:	d103      	bne.n	800471a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	2200      	movs	r2, #0
 8004718:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	699b      	ldr	r3, [r3, #24]
 8004720:	f003 0301 	and.w	r3, r3, #1
 8004724:	2b01      	cmp	r3, #1
 8004726:	d007      	beq.n	8004738 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	699a      	ldr	r2, [r3, #24]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f042 0201 	orr.w	r2, r2, #1
 8004736:	619a      	str	r2, [r3, #24]
  }
}
 8004738:	bf00      	nop
 800473a:	370c      	adds	r7, #12
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr

08004744 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b084      	sub	sp, #16
 8004748:	af00      	add	r7, sp, #0
 800474a:	60f8      	str	r0, [r7, #12]
 800474c:	60b9      	str	r1, [r7, #8]
 800474e:	603b      	str	r3, [r7, #0]
 8004750:	4613      	mov	r3, r2
 8004752:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004754:	e022      	b.n	800479c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800475c:	d01e      	beq.n	800479c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800475e:	f7fe fbfb 	bl	8002f58 <HAL_GetTick>
 8004762:	4602      	mov	r2, r0
 8004764:	69bb      	ldr	r3, [r7, #24]
 8004766:	1ad3      	subs	r3, r2, r3
 8004768:	683a      	ldr	r2, [r7, #0]
 800476a:	429a      	cmp	r2, r3
 800476c:	d302      	bcc.n	8004774 <I2C_WaitOnFlagUntilTimeout+0x30>
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d113      	bne.n	800479c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004778:	f043 0220 	orr.w	r2, r3, #32
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2220      	movs	r2, #32
 8004784:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2200      	movs	r2, #0
 800478c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2200      	movs	r2, #0
 8004794:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e00f      	b.n	80047bc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	699a      	ldr	r2, [r3, #24]
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	4013      	ands	r3, r2
 80047a6:	68ba      	ldr	r2, [r7, #8]
 80047a8:	429a      	cmp	r2, r3
 80047aa:	bf0c      	ite	eq
 80047ac:	2301      	moveq	r3, #1
 80047ae:	2300      	movne	r3, #0
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	461a      	mov	r2, r3
 80047b4:	79fb      	ldrb	r3, [r7, #7]
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d0cd      	beq.n	8004756 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80047ba:	2300      	movs	r3, #0
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3710      	adds	r7, #16
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}

080047c4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b084      	sub	sp, #16
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	60b9      	str	r1, [r7, #8]
 80047ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80047d0:	e02c      	b.n	800482c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	68b9      	ldr	r1, [r7, #8]
 80047d6:	68f8      	ldr	r0, [r7, #12]
 80047d8:	f000 f8ea 	bl	80049b0 <I2C_IsErrorOccurred>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d001      	beq.n	80047e6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e02a      	b.n	800483c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047ec:	d01e      	beq.n	800482c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047ee:	f7fe fbb3 	bl	8002f58 <HAL_GetTick>
 80047f2:	4602      	mov	r2, r0
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	68ba      	ldr	r2, [r7, #8]
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d302      	bcc.n	8004804 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d113      	bne.n	800482c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004808:	f043 0220 	orr.w	r2, r3, #32
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2220      	movs	r2, #32
 8004814:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2200      	movs	r2, #0
 800481c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2200      	movs	r2, #0
 8004824:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	e007      	b.n	800483c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	699b      	ldr	r3, [r3, #24]
 8004832:	f003 0302 	and.w	r3, r3, #2
 8004836:	2b02      	cmp	r3, #2
 8004838:	d1cb      	bne.n	80047d2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800483a:	2300      	movs	r3, #0
}
 800483c:	4618      	mov	r0, r3
 800483e:	3710      	adds	r7, #16
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}

08004844 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b084      	sub	sp, #16
 8004848:	af00      	add	r7, sp, #0
 800484a:	60f8      	str	r0, [r7, #12]
 800484c:	60b9      	str	r1, [r7, #8]
 800484e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004850:	e028      	b.n	80048a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	68b9      	ldr	r1, [r7, #8]
 8004856:	68f8      	ldr	r0, [r7, #12]
 8004858:	f000 f8aa 	bl	80049b0 <I2C_IsErrorOccurred>
 800485c:	4603      	mov	r3, r0
 800485e:	2b00      	cmp	r3, #0
 8004860:	d001      	beq.n	8004866 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e026      	b.n	80048b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004866:	f7fe fb77 	bl	8002f58 <HAL_GetTick>
 800486a:	4602      	mov	r2, r0
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	68ba      	ldr	r2, [r7, #8]
 8004872:	429a      	cmp	r2, r3
 8004874:	d302      	bcc.n	800487c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d113      	bne.n	80048a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004880:	f043 0220 	orr.w	r2, r3, #32
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2220      	movs	r2, #32
 800488c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2200      	movs	r2, #0
 8004894:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2200      	movs	r2, #0
 800489c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	e007      	b.n	80048b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	699b      	ldr	r3, [r3, #24]
 80048aa:	f003 0320 	and.w	r3, r3, #32
 80048ae:	2b20      	cmp	r3, #32
 80048b0:	d1cf      	bne.n	8004852 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80048b2:	2300      	movs	r3, #0
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3710      	adds	r7, #16
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}

080048bc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b084      	sub	sp, #16
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	60f8      	str	r0, [r7, #12]
 80048c4:	60b9      	str	r1, [r7, #8]
 80048c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80048c8:	e064      	b.n	8004994 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	68b9      	ldr	r1, [r7, #8]
 80048ce:	68f8      	ldr	r0, [r7, #12]
 80048d0:	f000 f86e 	bl	80049b0 <I2C_IsErrorOccurred>
 80048d4:	4603      	mov	r3, r0
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d001      	beq.n	80048de <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e062      	b.n	80049a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	699b      	ldr	r3, [r3, #24]
 80048e4:	f003 0320 	and.w	r3, r3, #32
 80048e8:	2b20      	cmp	r3, #32
 80048ea:	d138      	bne.n	800495e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	699b      	ldr	r3, [r3, #24]
 80048f2:	f003 0304 	and.w	r3, r3, #4
 80048f6:	2b04      	cmp	r3, #4
 80048f8:	d105      	bne.n	8004906 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d001      	beq.n	8004906 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8004902:	2300      	movs	r3, #0
 8004904:	e04e      	b.n	80049a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	699b      	ldr	r3, [r3, #24]
 800490c:	f003 0310 	and.w	r3, r3, #16
 8004910:	2b10      	cmp	r3, #16
 8004912:	d107      	bne.n	8004924 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	2210      	movs	r2, #16
 800491a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2204      	movs	r2, #4
 8004920:	645a      	str	r2, [r3, #68]	; 0x44
 8004922:	e002      	b.n	800492a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2200      	movs	r2, #0
 8004928:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	2220      	movs	r2, #32
 8004930:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	6859      	ldr	r1, [r3, #4]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	4b1b      	ldr	r3, [pc, #108]	; (80049ac <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800493e:	400b      	ands	r3, r1
 8004940:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2220      	movs	r2, #32
 8004946:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2200      	movs	r2, #0
 800494e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2200      	movs	r2, #0
 8004956:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e022      	b.n	80049a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800495e:	f7fe fafb 	bl	8002f58 <HAL_GetTick>
 8004962:	4602      	mov	r2, r0
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	1ad3      	subs	r3, r2, r3
 8004968:	68ba      	ldr	r2, [r7, #8]
 800496a:	429a      	cmp	r2, r3
 800496c:	d302      	bcc.n	8004974 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d10f      	bne.n	8004994 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004978:	f043 0220 	orr.w	r2, r3, #32
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2220      	movs	r2, #32
 8004984:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2200      	movs	r2, #0
 800498c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e007      	b.n	80049a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	699b      	ldr	r3, [r3, #24]
 800499a:	f003 0304 	and.w	r3, r3, #4
 800499e:	2b04      	cmp	r3, #4
 80049a0:	d193      	bne.n	80048ca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80049a2:	2300      	movs	r3, #0
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3710      	adds	r7, #16
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}
 80049ac:	fe00e800 	.word	0xfe00e800

080049b0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b08a      	sub	sp, #40	; 0x28
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	60b9      	str	r1, [r7, #8]
 80049ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049bc:	2300      	movs	r3, #0
 80049be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	699b      	ldr	r3, [r3, #24]
 80049c8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80049ca:	2300      	movs	r3, #0
 80049cc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80049d2:	69bb      	ldr	r3, [r7, #24]
 80049d4:	f003 0310 	and.w	r3, r3, #16
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d075      	beq.n	8004ac8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2210      	movs	r2, #16
 80049e2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80049e4:	e056      	b.n	8004a94 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049ec:	d052      	beq.n	8004a94 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80049ee:	f7fe fab3 	bl	8002f58 <HAL_GetTick>
 80049f2:	4602      	mov	r2, r0
 80049f4:	69fb      	ldr	r3, [r7, #28]
 80049f6:	1ad3      	subs	r3, r2, r3
 80049f8:	68ba      	ldr	r2, [r7, #8]
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d302      	bcc.n	8004a04 <I2C_IsErrorOccurred+0x54>
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d147      	bne.n	8004a94 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a0e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004a16:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	699b      	ldr	r3, [r3, #24]
 8004a1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a26:	d12e      	bne.n	8004a86 <I2C_IsErrorOccurred+0xd6>
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a2e:	d02a      	beq.n	8004a86 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8004a30:	7cfb      	ldrb	r3, [r7, #19]
 8004a32:	2b20      	cmp	r3, #32
 8004a34:	d027      	beq.n	8004a86 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	685a      	ldr	r2, [r3, #4]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a44:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004a46:	f7fe fa87 	bl	8002f58 <HAL_GetTick>
 8004a4a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004a4c:	e01b      	b.n	8004a86 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004a4e:	f7fe fa83 	bl	8002f58 <HAL_GetTick>
 8004a52:	4602      	mov	r2, r0
 8004a54:	69fb      	ldr	r3, [r7, #28]
 8004a56:	1ad3      	subs	r3, r2, r3
 8004a58:	2b19      	cmp	r3, #25
 8004a5a:	d914      	bls.n	8004a86 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a60:	f043 0220 	orr.w	r2, r3, #32
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2220      	movs	r2, #32
 8004a6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2200      	movs	r2, #0
 8004a74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	699b      	ldr	r3, [r3, #24]
 8004a8c:	f003 0320 	and.w	r3, r3, #32
 8004a90:	2b20      	cmp	r3, #32
 8004a92:	d1dc      	bne.n	8004a4e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	699b      	ldr	r3, [r3, #24]
 8004a9a:	f003 0320 	and.w	r3, r3, #32
 8004a9e:	2b20      	cmp	r3, #32
 8004aa0:	d003      	beq.n	8004aaa <I2C_IsErrorOccurred+0xfa>
 8004aa2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d09d      	beq.n	80049e6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004aaa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d103      	bne.n	8004aba <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	2220      	movs	r2, #32
 8004ab8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004aba:	6a3b      	ldr	r3, [r7, #32]
 8004abc:	f043 0304 	orr.w	r3, r3, #4
 8004ac0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	699b      	ldr	r3, [r3, #24]
 8004ace:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004ad0:	69bb      	ldr	r3, [r7, #24]
 8004ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d00b      	beq.n	8004af2 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004ada:	6a3b      	ldr	r3, [r7, #32]
 8004adc:	f043 0301 	orr.w	r3, r3, #1
 8004ae0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004aea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004af2:	69bb      	ldr	r3, [r7, #24]
 8004af4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d00b      	beq.n	8004b14 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004afc:	6a3b      	ldr	r3, [r7, #32]
 8004afe:	f043 0308 	orr.w	r3, r3, #8
 8004b02:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004b0c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004b14:	69bb      	ldr	r3, [r7, #24]
 8004b16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d00b      	beq.n	8004b36 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004b1e:	6a3b      	ldr	r3, [r7, #32]
 8004b20:	f043 0302 	orr.w	r3, r3, #2
 8004b24:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b2e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004b36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d01c      	beq.n	8004b78 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004b3e:	68f8      	ldr	r0, [r7, #12]
 8004b40:	f7ff fddc 	bl	80046fc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	6859      	ldr	r1, [r3, #4]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	4b0d      	ldr	r3, [pc, #52]	; (8004b84 <I2C_IsErrorOccurred+0x1d4>)
 8004b50:	400b      	ands	r3, r1
 8004b52:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b58:	6a3b      	ldr	r3, [r7, #32]
 8004b5a:	431a      	orrs	r2, r3
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2220      	movs	r2, #32
 8004b64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2200      	movs	r2, #0
 8004b74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004b78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3728      	adds	r7, #40	; 0x28
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}
 8004b84:	fe00e800 	.word	0xfe00e800

08004b88 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b087      	sub	sp, #28
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	607b      	str	r3, [r7, #4]
 8004b92:	460b      	mov	r3, r1
 8004b94:	817b      	strh	r3, [r7, #10]
 8004b96:	4613      	mov	r3, r2
 8004b98:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004b9a:	897b      	ldrh	r3, [r7, #10]
 8004b9c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004ba0:	7a7b      	ldrb	r3, [r7, #9]
 8004ba2:	041b      	lsls	r3, r3, #16
 8004ba4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004ba8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004bae:	6a3b      	ldr	r3, [r7, #32]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004bb6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	685a      	ldr	r2, [r3, #4]
 8004bbe:	6a3b      	ldr	r3, [r7, #32]
 8004bc0:	0d5b      	lsrs	r3, r3, #21
 8004bc2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004bc6:	4b08      	ldr	r3, [pc, #32]	; (8004be8 <I2C_TransferConfig+0x60>)
 8004bc8:	430b      	orrs	r3, r1
 8004bca:	43db      	mvns	r3, r3
 8004bcc:	ea02 0103 	and.w	r1, r2, r3
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	697a      	ldr	r2, [r7, #20]
 8004bd6:	430a      	orrs	r2, r1
 8004bd8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004bda:	bf00      	nop
 8004bdc:	371c      	adds	r7, #28
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr
 8004be6:	bf00      	nop
 8004be8:	03ff63ff 	.word	0x03ff63ff

08004bec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	2b20      	cmp	r3, #32
 8004c00:	d138      	bne.n	8004c74 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d101      	bne.n	8004c10 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004c0c:	2302      	movs	r3, #2
 8004c0e:	e032      	b.n	8004c76 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2224      	movs	r2, #36	; 0x24
 8004c1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f022 0201 	bic.w	r2, r2, #1
 8004c2e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004c3e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	6819      	ldr	r1, [r3, #0]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	683a      	ldr	r2, [r7, #0]
 8004c4c:	430a      	orrs	r2, r1
 8004c4e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f042 0201 	orr.w	r2, r2, #1
 8004c5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2220      	movs	r2, #32
 8004c64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004c70:	2300      	movs	r3, #0
 8004c72:	e000      	b.n	8004c76 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004c74:	2302      	movs	r3, #2
  }
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	370c      	adds	r7, #12
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr

08004c82 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004c82:	b480      	push	{r7}
 8004c84:	b085      	sub	sp, #20
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	6078      	str	r0, [r7, #4]
 8004c8a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c92:	b2db      	uxtb	r3, r3
 8004c94:	2b20      	cmp	r3, #32
 8004c96:	d139      	bne.n	8004d0c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d101      	bne.n	8004ca6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004ca2:	2302      	movs	r3, #2
 8004ca4:	e033      	b.n	8004d0e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2201      	movs	r2, #1
 8004caa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2224      	movs	r2, #36	; 0x24
 8004cb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f022 0201 	bic.w	r2, r2, #1
 8004cc4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004cd4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	021b      	lsls	r3, r3, #8
 8004cda:	68fa      	ldr	r2, [r7, #12]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	68fa      	ldr	r2, [r7, #12]
 8004ce6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f042 0201 	orr.w	r2, r2, #1
 8004cf6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2220      	movs	r2, #32
 8004cfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	e000      	b.n	8004d0e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004d0c:	2302      	movs	r3, #2
  }
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3714      	adds	r7, #20
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr

08004d1a <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8004d1a:	b580      	push	{r7, lr}
 8004d1c:	b084      	sub	sp, #16
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d101      	bne.n	8004d2c <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e041      	b.n	8004db0 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8004d34:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f245 5255 	movw	r2, #21845	; 0x5555
 8004d3e:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	6852      	ldr	r2, [r2, #4]
 8004d48:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	6892      	ldr	r2, [r2, #8]
 8004d52:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8004d54:	f7fe f900 	bl	8002f58 <HAL_GetTick>
 8004d58:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004d5a:	e00f      	b.n	8004d7c <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8004d5c:	f7fe f8fc 	bl	8002f58 <HAL_GetTick>
 8004d60:	4602      	mov	r2, r0
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	1ad3      	subs	r3, r2, r3
 8004d66:	2b31      	cmp	r3, #49	; 0x31
 8004d68:	d908      	bls.n	8004d7c <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	f003 0307 	and.w	r3, r3, #7
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d001      	beq.n	8004d7c <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8004d78:	2303      	movs	r3, #3
 8004d7a:	e019      	b.n	8004db0 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	68db      	ldr	r3, [r3, #12]
 8004d82:	f003 0307 	and.w	r3, r3, #7
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d1e8      	bne.n	8004d5c <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	691a      	ldr	r2, [r3, #16]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d005      	beq.n	8004da4 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	687a      	ldr	r2, [r7, #4]
 8004d9e:	68d2      	ldr	r2, [r2, #12]
 8004da0:	611a      	str	r2, [r3, #16]
 8004da2:	e004      	b.n	8004dae <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8004dac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004dae:	2300      	movs	r3, #0
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3710      	adds	r7, #16
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8004dc8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004dca:	2300      	movs	r3, #0
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	370c      	adds	r7, #12
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004ddc:	4b04      	ldr	r3, [pc, #16]	; (8004df0 <HAL_PWREx_GetVoltageRange+0x18>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr
 8004dee:	bf00      	nop
 8004df0:	40007000 	.word	0x40007000

08004df4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b085      	sub	sp, #20
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e02:	d130      	bne.n	8004e66 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e04:	4b23      	ldr	r3, [pc, #140]	; (8004e94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004e0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e10:	d038      	beq.n	8004e84 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004e12:	4b20      	ldr	r3, [pc, #128]	; (8004e94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004e1a:	4a1e      	ldr	r2, [pc, #120]	; (8004e94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e1c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004e20:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004e22:	4b1d      	ldr	r3, [pc, #116]	; (8004e98 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	2232      	movs	r2, #50	; 0x32
 8004e28:	fb02 f303 	mul.w	r3, r2, r3
 8004e2c:	4a1b      	ldr	r2, [pc, #108]	; (8004e9c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e32:	0c9b      	lsrs	r3, r3, #18
 8004e34:	3301      	adds	r3, #1
 8004e36:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e38:	e002      	b.n	8004e40 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	3b01      	subs	r3, #1
 8004e3e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e40:	4b14      	ldr	r3, [pc, #80]	; (8004e94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e42:	695b      	ldr	r3, [r3, #20]
 8004e44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e4c:	d102      	bne.n	8004e54 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d1f2      	bne.n	8004e3a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004e54:	4b0f      	ldr	r3, [pc, #60]	; (8004e94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e56:	695b      	ldr	r3, [r3, #20]
 8004e58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e60:	d110      	bne.n	8004e84 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	e00f      	b.n	8004e86 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004e66:	4b0b      	ldr	r3, [pc, #44]	; (8004e94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004e6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e72:	d007      	beq.n	8004e84 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004e74:	4b07      	ldr	r3, [pc, #28]	; (8004e94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004e7c:	4a05      	ldr	r2, [pc, #20]	; (8004e94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004e82:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004e84:	2300      	movs	r3, #0
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3714      	adds	r7, #20
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr
 8004e92:	bf00      	nop
 8004e94:	40007000 	.word	0x40007000
 8004e98:	20000000 	.word	0x20000000
 8004e9c:	431bde83 	.word	0x431bde83

08004ea0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b088      	sub	sp, #32
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d101      	bne.n	8004eb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e3ca      	b.n	8005648 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004eb2:	4b97      	ldr	r3, [pc, #604]	; (8005110 <HAL_RCC_OscConfig+0x270>)
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	f003 030c 	and.w	r3, r3, #12
 8004eba:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ebc:	4b94      	ldr	r3, [pc, #592]	; (8005110 <HAL_RCC_OscConfig+0x270>)
 8004ebe:	68db      	ldr	r3, [r3, #12]
 8004ec0:	f003 0303 	and.w	r3, r3, #3
 8004ec4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 0310 	and.w	r3, r3, #16
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	f000 80e4 	beq.w	800509c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004ed4:	69bb      	ldr	r3, [r7, #24]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d007      	beq.n	8004eea <HAL_RCC_OscConfig+0x4a>
 8004eda:	69bb      	ldr	r3, [r7, #24]
 8004edc:	2b0c      	cmp	r3, #12
 8004ede:	f040 808b 	bne.w	8004ff8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	f040 8087 	bne.w	8004ff8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004eea:	4b89      	ldr	r3, [pc, #548]	; (8005110 <HAL_RCC_OscConfig+0x270>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 0302 	and.w	r3, r3, #2
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d005      	beq.n	8004f02 <HAL_RCC_OscConfig+0x62>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	699b      	ldr	r3, [r3, #24]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d101      	bne.n	8004f02 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	e3a2      	b.n	8005648 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6a1a      	ldr	r2, [r3, #32]
 8004f06:	4b82      	ldr	r3, [pc, #520]	; (8005110 <HAL_RCC_OscConfig+0x270>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f003 0308 	and.w	r3, r3, #8
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d004      	beq.n	8004f1c <HAL_RCC_OscConfig+0x7c>
 8004f12:	4b7f      	ldr	r3, [pc, #508]	; (8005110 <HAL_RCC_OscConfig+0x270>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f1a:	e005      	b.n	8004f28 <HAL_RCC_OscConfig+0x88>
 8004f1c:	4b7c      	ldr	r3, [pc, #496]	; (8005110 <HAL_RCC_OscConfig+0x270>)
 8004f1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f22:	091b      	lsrs	r3, r3, #4
 8004f24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d223      	bcs.n	8004f74 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6a1b      	ldr	r3, [r3, #32]
 8004f30:	4618      	mov	r0, r3
 8004f32:	f000 fd55 	bl	80059e0 <RCC_SetFlashLatencyFromMSIRange>
 8004f36:	4603      	mov	r3, r0
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d001      	beq.n	8004f40 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e383      	b.n	8005648 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004f40:	4b73      	ldr	r3, [pc, #460]	; (8005110 <HAL_RCC_OscConfig+0x270>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a72      	ldr	r2, [pc, #456]	; (8005110 <HAL_RCC_OscConfig+0x270>)
 8004f46:	f043 0308 	orr.w	r3, r3, #8
 8004f4a:	6013      	str	r3, [r2, #0]
 8004f4c:	4b70      	ldr	r3, [pc, #448]	; (8005110 <HAL_RCC_OscConfig+0x270>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6a1b      	ldr	r3, [r3, #32]
 8004f58:	496d      	ldr	r1, [pc, #436]	; (8005110 <HAL_RCC_OscConfig+0x270>)
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004f5e:	4b6c      	ldr	r3, [pc, #432]	; (8005110 <HAL_RCC_OscConfig+0x270>)
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	69db      	ldr	r3, [r3, #28]
 8004f6a:	021b      	lsls	r3, r3, #8
 8004f6c:	4968      	ldr	r1, [pc, #416]	; (8005110 <HAL_RCC_OscConfig+0x270>)
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	604b      	str	r3, [r1, #4]
 8004f72:	e025      	b.n	8004fc0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004f74:	4b66      	ldr	r3, [pc, #408]	; (8005110 <HAL_RCC_OscConfig+0x270>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a65      	ldr	r2, [pc, #404]	; (8005110 <HAL_RCC_OscConfig+0x270>)
 8004f7a:	f043 0308 	orr.w	r3, r3, #8
 8004f7e:	6013      	str	r3, [r2, #0]
 8004f80:	4b63      	ldr	r3, [pc, #396]	; (8005110 <HAL_RCC_OscConfig+0x270>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6a1b      	ldr	r3, [r3, #32]
 8004f8c:	4960      	ldr	r1, [pc, #384]	; (8005110 <HAL_RCC_OscConfig+0x270>)
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004f92:	4b5f      	ldr	r3, [pc, #380]	; (8005110 <HAL_RCC_OscConfig+0x270>)
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	69db      	ldr	r3, [r3, #28]
 8004f9e:	021b      	lsls	r3, r3, #8
 8004fa0:	495b      	ldr	r1, [pc, #364]	; (8005110 <HAL_RCC_OscConfig+0x270>)
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004fa6:	69bb      	ldr	r3, [r7, #24]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d109      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6a1b      	ldr	r3, [r3, #32]
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f000 fd15 	bl	80059e0 <RCC_SetFlashLatencyFromMSIRange>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d001      	beq.n	8004fc0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e343      	b.n	8005648 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004fc0:	f000 fc4a 	bl	8005858 <HAL_RCC_GetSysClockFreq>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	4b52      	ldr	r3, [pc, #328]	; (8005110 <HAL_RCC_OscConfig+0x270>)
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	091b      	lsrs	r3, r3, #4
 8004fcc:	f003 030f 	and.w	r3, r3, #15
 8004fd0:	4950      	ldr	r1, [pc, #320]	; (8005114 <HAL_RCC_OscConfig+0x274>)
 8004fd2:	5ccb      	ldrb	r3, [r1, r3]
 8004fd4:	f003 031f 	and.w	r3, r3, #31
 8004fd8:	fa22 f303 	lsr.w	r3, r2, r3
 8004fdc:	4a4e      	ldr	r2, [pc, #312]	; (8005118 <HAL_RCC_OscConfig+0x278>)
 8004fde:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004fe0:	4b4e      	ldr	r3, [pc, #312]	; (800511c <HAL_RCC_OscConfig+0x27c>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f7fd ff67 	bl	8002eb8 <HAL_InitTick>
 8004fea:	4603      	mov	r3, r0
 8004fec:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004fee:	7bfb      	ldrb	r3, [r7, #15]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d052      	beq.n	800509a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004ff4:	7bfb      	ldrb	r3, [r7, #15]
 8004ff6:	e327      	b.n	8005648 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	699b      	ldr	r3, [r3, #24]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d032      	beq.n	8005066 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005000:	4b43      	ldr	r3, [pc, #268]	; (8005110 <HAL_RCC_OscConfig+0x270>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a42      	ldr	r2, [pc, #264]	; (8005110 <HAL_RCC_OscConfig+0x270>)
 8005006:	f043 0301 	orr.w	r3, r3, #1
 800500a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800500c:	f7fd ffa4 	bl	8002f58 <HAL_GetTick>
 8005010:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005012:	e008      	b.n	8005026 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005014:	f7fd ffa0 	bl	8002f58 <HAL_GetTick>
 8005018:	4602      	mov	r2, r0
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	1ad3      	subs	r3, r2, r3
 800501e:	2b02      	cmp	r3, #2
 8005020:	d901      	bls.n	8005026 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8005022:	2303      	movs	r3, #3
 8005024:	e310      	b.n	8005648 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005026:	4b3a      	ldr	r3, [pc, #232]	; (8005110 <HAL_RCC_OscConfig+0x270>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 0302 	and.w	r3, r3, #2
 800502e:	2b00      	cmp	r3, #0
 8005030:	d0f0      	beq.n	8005014 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005032:	4b37      	ldr	r3, [pc, #220]	; (8005110 <HAL_RCC_OscConfig+0x270>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a36      	ldr	r2, [pc, #216]	; (8005110 <HAL_RCC_OscConfig+0x270>)
 8005038:	f043 0308 	orr.w	r3, r3, #8
 800503c:	6013      	str	r3, [r2, #0]
 800503e:	4b34      	ldr	r3, [pc, #208]	; (8005110 <HAL_RCC_OscConfig+0x270>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6a1b      	ldr	r3, [r3, #32]
 800504a:	4931      	ldr	r1, [pc, #196]	; (8005110 <HAL_RCC_OscConfig+0x270>)
 800504c:	4313      	orrs	r3, r2
 800504e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005050:	4b2f      	ldr	r3, [pc, #188]	; (8005110 <HAL_RCC_OscConfig+0x270>)
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	69db      	ldr	r3, [r3, #28]
 800505c:	021b      	lsls	r3, r3, #8
 800505e:	492c      	ldr	r1, [pc, #176]	; (8005110 <HAL_RCC_OscConfig+0x270>)
 8005060:	4313      	orrs	r3, r2
 8005062:	604b      	str	r3, [r1, #4]
 8005064:	e01a      	b.n	800509c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005066:	4b2a      	ldr	r3, [pc, #168]	; (8005110 <HAL_RCC_OscConfig+0x270>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a29      	ldr	r2, [pc, #164]	; (8005110 <HAL_RCC_OscConfig+0x270>)
 800506c:	f023 0301 	bic.w	r3, r3, #1
 8005070:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005072:	f7fd ff71 	bl	8002f58 <HAL_GetTick>
 8005076:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005078:	e008      	b.n	800508c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800507a:	f7fd ff6d 	bl	8002f58 <HAL_GetTick>
 800507e:	4602      	mov	r2, r0
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	1ad3      	subs	r3, r2, r3
 8005084:	2b02      	cmp	r3, #2
 8005086:	d901      	bls.n	800508c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8005088:	2303      	movs	r3, #3
 800508a:	e2dd      	b.n	8005648 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800508c:	4b20      	ldr	r3, [pc, #128]	; (8005110 <HAL_RCC_OscConfig+0x270>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 0302 	and.w	r3, r3, #2
 8005094:	2b00      	cmp	r3, #0
 8005096:	d1f0      	bne.n	800507a <HAL_RCC_OscConfig+0x1da>
 8005098:	e000      	b.n	800509c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800509a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 0301 	and.w	r3, r3, #1
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d074      	beq.n	8005192 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80050a8:	69bb      	ldr	r3, [r7, #24]
 80050aa:	2b08      	cmp	r3, #8
 80050ac:	d005      	beq.n	80050ba <HAL_RCC_OscConfig+0x21a>
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	2b0c      	cmp	r3, #12
 80050b2:	d10e      	bne.n	80050d2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	2b03      	cmp	r3, #3
 80050b8:	d10b      	bne.n	80050d2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050ba:	4b15      	ldr	r3, [pc, #84]	; (8005110 <HAL_RCC_OscConfig+0x270>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d064      	beq.n	8005190 <HAL_RCC_OscConfig+0x2f0>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d160      	bne.n	8005190 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e2ba      	b.n	8005648 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050da:	d106      	bne.n	80050ea <HAL_RCC_OscConfig+0x24a>
 80050dc:	4b0c      	ldr	r3, [pc, #48]	; (8005110 <HAL_RCC_OscConfig+0x270>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a0b      	ldr	r2, [pc, #44]	; (8005110 <HAL_RCC_OscConfig+0x270>)
 80050e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050e6:	6013      	str	r3, [r2, #0]
 80050e8:	e026      	b.n	8005138 <HAL_RCC_OscConfig+0x298>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80050f2:	d115      	bne.n	8005120 <HAL_RCC_OscConfig+0x280>
 80050f4:	4b06      	ldr	r3, [pc, #24]	; (8005110 <HAL_RCC_OscConfig+0x270>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a05      	ldr	r2, [pc, #20]	; (8005110 <HAL_RCC_OscConfig+0x270>)
 80050fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80050fe:	6013      	str	r3, [r2, #0]
 8005100:	4b03      	ldr	r3, [pc, #12]	; (8005110 <HAL_RCC_OscConfig+0x270>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a02      	ldr	r2, [pc, #8]	; (8005110 <HAL_RCC_OscConfig+0x270>)
 8005106:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800510a:	6013      	str	r3, [r2, #0]
 800510c:	e014      	b.n	8005138 <HAL_RCC_OscConfig+0x298>
 800510e:	bf00      	nop
 8005110:	40021000 	.word	0x40021000
 8005114:	08012e8c 	.word	0x08012e8c
 8005118:	20000000 	.word	0x20000000
 800511c:	20000004 	.word	0x20000004
 8005120:	4ba0      	ldr	r3, [pc, #640]	; (80053a4 <HAL_RCC_OscConfig+0x504>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a9f      	ldr	r2, [pc, #636]	; (80053a4 <HAL_RCC_OscConfig+0x504>)
 8005126:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800512a:	6013      	str	r3, [r2, #0]
 800512c:	4b9d      	ldr	r3, [pc, #628]	; (80053a4 <HAL_RCC_OscConfig+0x504>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a9c      	ldr	r2, [pc, #624]	; (80053a4 <HAL_RCC_OscConfig+0x504>)
 8005132:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005136:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d013      	beq.n	8005168 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005140:	f7fd ff0a 	bl	8002f58 <HAL_GetTick>
 8005144:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005146:	e008      	b.n	800515a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005148:	f7fd ff06 	bl	8002f58 <HAL_GetTick>
 800514c:	4602      	mov	r2, r0
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	1ad3      	subs	r3, r2, r3
 8005152:	2b64      	cmp	r3, #100	; 0x64
 8005154:	d901      	bls.n	800515a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005156:	2303      	movs	r3, #3
 8005158:	e276      	b.n	8005648 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800515a:	4b92      	ldr	r3, [pc, #584]	; (80053a4 <HAL_RCC_OscConfig+0x504>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005162:	2b00      	cmp	r3, #0
 8005164:	d0f0      	beq.n	8005148 <HAL_RCC_OscConfig+0x2a8>
 8005166:	e014      	b.n	8005192 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005168:	f7fd fef6 	bl	8002f58 <HAL_GetTick>
 800516c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800516e:	e008      	b.n	8005182 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005170:	f7fd fef2 	bl	8002f58 <HAL_GetTick>
 8005174:	4602      	mov	r2, r0
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	1ad3      	subs	r3, r2, r3
 800517a:	2b64      	cmp	r3, #100	; 0x64
 800517c:	d901      	bls.n	8005182 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800517e:	2303      	movs	r3, #3
 8005180:	e262      	b.n	8005648 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005182:	4b88      	ldr	r3, [pc, #544]	; (80053a4 <HAL_RCC_OscConfig+0x504>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800518a:	2b00      	cmp	r3, #0
 800518c:	d1f0      	bne.n	8005170 <HAL_RCC_OscConfig+0x2d0>
 800518e:	e000      	b.n	8005192 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005190:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 0302 	and.w	r3, r3, #2
 800519a:	2b00      	cmp	r3, #0
 800519c:	d060      	beq.n	8005260 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800519e:	69bb      	ldr	r3, [r7, #24]
 80051a0:	2b04      	cmp	r3, #4
 80051a2:	d005      	beq.n	80051b0 <HAL_RCC_OscConfig+0x310>
 80051a4:	69bb      	ldr	r3, [r7, #24]
 80051a6:	2b0c      	cmp	r3, #12
 80051a8:	d119      	bne.n	80051de <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	2b02      	cmp	r3, #2
 80051ae:	d116      	bne.n	80051de <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051b0:	4b7c      	ldr	r3, [pc, #496]	; (80053a4 <HAL_RCC_OscConfig+0x504>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d005      	beq.n	80051c8 <HAL_RCC_OscConfig+0x328>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d101      	bne.n	80051c8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	e23f      	b.n	8005648 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051c8:	4b76      	ldr	r3, [pc, #472]	; (80053a4 <HAL_RCC_OscConfig+0x504>)
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	691b      	ldr	r3, [r3, #16]
 80051d4:	061b      	lsls	r3, r3, #24
 80051d6:	4973      	ldr	r1, [pc, #460]	; (80053a4 <HAL_RCC_OscConfig+0x504>)
 80051d8:	4313      	orrs	r3, r2
 80051da:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051dc:	e040      	b.n	8005260 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	68db      	ldr	r3, [r3, #12]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d023      	beq.n	800522e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051e6:	4b6f      	ldr	r3, [pc, #444]	; (80053a4 <HAL_RCC_OscConfig+0x504>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a6e      	ldr	r2, [pc, #440]	; (80053a4 <HAL_RCC_OscConfig+0x504>)
 80051ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051f2:	f7fd feb1 	bl	8002f58 <HAL_GetTick>
 80051f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051f8:	e008      	b.n	800520c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051fa:	f7fd fead 	bl	8002f58 <HAL_GetTick>
 80051fe:	4602      	mov	r2, r0
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	1ad3      	subs	r3, r2, r3
 8005204:	2b02      	cmp	r3, #2
 8005206:	d901      	bls.n	800520c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005208:	2303      	movs	r3, #3
 800520a:	e21d      	b.n	8005648 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800520c:	4b65      	ldr	r3, [pc, #404]	; (80053a4 <HAL_RCC_OscConfig+0x504>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005214:	2b00      	cmp	r3, #0
 8005216:	d0f0      	beq.n	80051fa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005218:	4b62      	ldr	r3, [pc, #392]	; (80053a4 <HAL_RCC_OscConfig+0x504>)
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	691b      	ldr	r3, [r3, #16]
 8005224:	061b      	lsls	r3, r3, #24
 8005226:	495f      	ldr	r1, [pc, #380]	; (80053a4 <HAL_RCC_OscConfig+0x504>)
 8005228:	4313      	orrs	r3, r2
 800522a:	604b      	str	r3, [r1, #4]
 800522c:	e018      	b.n	8005260 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800522e:	4b5d      	ldr	r3, [pc, #372]	; (80053a4 <HAL_RCC_OscConfig+0x504>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a5c      	ldr	r2, [pc, #368]	; (80053a4 <HAL_RCC_OscConfig+0x504>)
 8005234:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005238:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800523a:	f7fd fe8d 	bl	8002f58 <HAL_GetTick>
 800523e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005240:	e008      	b.n	8005254 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005242:	f7fd fe89 	bl	8002f58 <HAL_GetTick>
 8005246:	4602      	mov	r2, r0
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	1ad3      	subs	r3, r2, r3
 800524c:	2b02      	cmp	r3, #2
 800524e:	d901      	bls.n	8005254 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005250:	2303      	movs	r3, #3
 8005252:	e1f9      	b.n	8005648 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005254:	4b53      	ldr	r3, [pc, #332]	; (80053a4 <HAL_RCC_OscConfig+0x504>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800525c:	2b00      	cmp	r3, #0
 800525e:	d1f0      	bne.n	8005242 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 0308 	and.w	r3, r3, #8
 8005268:	2b00      	cmp	r3, #0
 800526a:	d03c      	beq.n	80052e6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	695b      	ldr	r3, [r3, #20]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d01c      	beq.n	80052ae <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005274:	4b4b      	ldr	r3, [pc, #300]	; (80053a4 <HAL_RCC_OscConfig+0x504>)
 8005276:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800527a:	4a4a      	ldr	r2, [pc, #296]	; (80053a4 <HAL_RCC_OscConfig+0x504>)
 800527c:	f043 0301 	orr.w	r3, r3, #1
 8005280:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005284:	f7fd fe68 	bl	8002f58 <HAL_GetTick>
 8005288:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800528a:	e008      	b.n	800529e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800528c:	f7fd fe64 	bl	8002f58 <HAL_GetTick>
 8005290:	4602      	mov	r2, r0
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	2b02      	cmp	r3, #2
 8005298:	d901      	bls.n	800529e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	e1d4      	b.n	8005648 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800529e:	4b41      	ldr	r3, [pc, #260]	; (80053a4 <HAL_RCC_OscConfig+0x504>)
 80052a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052a4:	f003 0302 	and.w	r3, r3, #2
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d0ef      	beq.n	800528c <HAL_RCC_OscConfig+0x3ec>
 80052ac:	e01b      	b.n	80052e6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052ae:	4b3d      	ldr	r3, [pc, #244]	; (80053a4 <HAL_RCC_OscConfig+0x504>)
 80052b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052b4:	4a3b      	ldr	r2, [pc, #236]	; (80053a4 <HAL_RCC_OscConfig+0x504>)
 80052b6:	f023 0301 	bic.w	r3, r3, #1
 80052ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052be:	f7fd fe4b 	bl	8002f58 <HAL_GetTick>
 80052c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80052c4:	e008      	b.n	80052d8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052c6:	f7fd fe47 	bl	8002f58 <HAL_GetTick>
 80052ca:	4602      	mov	r2, r0
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	1ad3      	subs	r3, r2, r3
 80052d0:	2b02      	cmp	r3, #2
 80052d2:	d901      	bls.n	80052d8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80052d4:	2303      	movs	r3, #3
 80052d6:	e1b7      	b.n	8005648 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80052d8:	4b32      	ldr	r3, [pc, #200]	; (80053a4 <HAL_RCC_OscConfig+0x504>)
 80052da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052de:	f003 0302 	and.w	r3, r3, #2
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d1ef      	bne.n	80052c6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 0304 	and.w	r3, r3, #4
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	f000 80a6 	beq.w	8005440 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052f4:	2300      	movs	r3, #0
 80052f6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80052f8:	4b2a      	ldr	r3, [pc, #168]	; (80053a4 <HAL_RCC_OscConfig+0x504>)
 80052fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005300:	2b00      	cmp	r3, #0
 8005302:	d10d      	bne.n	8005320 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005304:	4b27      	ldr	r3, [pc, #156]	; (80053a4 <HAL_RCC_OscConfig+0x504>)
 8005306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005308:	4a26      	ldr	r2, [pc, #152]	; (80053a4 <HAL_RCC_OscConfig+0x504>)
 800530a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800530e:	6593      	str	r3, [r2, #88]	; 0x58
 8005310:	4b24      	ldr	r3, [pc, #144]	; (80053a4 <HAL_RCC_OscConfig+0x504>)
 8005312:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005314:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005318:	60bb      	str	r3, [r7, #8]
 800531a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800531c:	2301      	movs	r3, #1
 800531e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005320:	4b21      	ldr	r3, [pc, #132]	; (80053a8 <HAL_RCC_OscConfig+0x508>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005328:	2b00      	cmp	r3, #0
 800532a:	d118      	bne.n	800535e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800532c:	4b1e      	ldr	r3, [pc, #120]	; (80053a8 <HAL_RCC_OscConfig+0x508>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a1d      	ldr	r2, [pc, #116]	; (80053a8 <HAL_RCC_OscConfig+0x508>)
 8005332:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005336:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005338:	f7fd fe0e 	bl	8002f58 <HAL_GetTick>
 800533c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800533e:	e008      	b.n	8005352 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005340:	f7fd fe0a 	bl	8002f58 <HAL_GetTick>
 8005344:	4602      	mov	r2, r0
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	2b02      	cmp	r3, #2
 800534c:	d901      	bls.n	8005352 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800534e:	2303      	movs	r3, #3
 8005350:	e17a      	b.n	8005648 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005352:	4b15      	ldr	r3, [pc, #84]	; (80053a8 <HAL_RCC_OscConfig+0x508>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800535a:	2b00      	cmp	r3, #0
 800535c:	d0f0      	beq.n	8005340 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	2b01      	cmp	r3, #1
 8005364:	d108      	bne.n	8005378 <HAL_RCC_OscConfig+0x4d8>
 8005366:	4b0f      	ldr	r3, [pc, #60]	; (80053a4 <HAL_RCC_OscConfig+0x504>)
 8005368:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800536c:	4a0d      	ldr	r2, [pc, #52]	; (80053a4 <HAL_RCC_OscConfig+0x504>)
 800536e:	f043 0301 	orr.w	r3, r3, #1
 8005372:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005376:	e029      	b.n	80053cc <HAL_RCC_OscConfig+0x52c>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	2b05      	cmp	r3, #5
 800537e:	d115      	bne.n	80053ac <HAL_RCC_OscConfig+0x50c>
 8005380:	4b08      	ldr	r3, [pc, #32]	; (80053a4 <HAL_RCC_OscConfig+0x504>)
 8005382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005386:	4a07      	ldr	r2, [pc, #28]	; (80053a4 <HAL_RCC_OscConfig+0x504>)
 8005388:	f043 0304 	orr.w	r3, r3, #4
 800538c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005390:	4b04      	ldr	r3, [pc, #16]	; (80053a4 <HAL_RCC_OscConfig+0x504>)
 8005392:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005396:	4a03      	ldr	r2, [pc, #12]	; (80053a4 <HAL_RCC_OscConfig+0x504>)
 8005398:	f043 0301 	orr.w	r3, r3, #1
 800539c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80053a0:	e014      	b.n	80053cc <HAL_RCC_OscConfig+0x52c>
 80053a2:	bf00      	nop
 80053a4:	40021000 	.word	0x40021000
 80053a8:	40007000 	.word	0x40007000
 80053ac:	4b9c      	ldr	r3, [pc, #624]	; (8005620 <HAL_RCC_OscConfig+0x780>)
 80053ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053b2:	4a9b      	ldr	r2, [pc, #620]	; (8005620 <HAL_RCC_OscConfig+0x780>)
 80053b4:	f023 0301 	bic.w	r3, r3, #1
 80053b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80053bc:	4b98      	ldr	r3, [pc, #608]	; (8005620 <HAL_RCC_OscConfig+0x780>)
 80053be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053c2:	4a97      	ldr	r2, [pc, #604]	; (8005620 <HAL_RCC_OscConfig+0x780>)
 80053c4:	f023 0304 	bic.w	r3, r3, #4
 80053c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d016      	beq.n	8005402 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053d4:	f7fd fdc0 	bl	8002f58 <HAL_GetTick>
 80053d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053da:	e00a      	b.n	80053f2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053dc:	f7fd fdbc 	bl	8002f58 <HAL_GetTick>
 80053e0:	4602      	mov	r2, r0
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d901      	bls.n	80053f2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80053ee:	2303      	movs	r3, #3
 80053f0:	e12a      	b.n	8005648 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053f2:	4b8b      	ldr	r3, [pc, #556]	; (8005620 <HAL_RCC_OscConfig+0x780>)
 80053f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053f8:	f003 0302 	and.w	r3, r3, #2
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d0ed      	beq.n	80053dc <HAL_RCC_OscConfig+0x53c>
 8005400:	e015      	b.n	800542e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005402:	f7fd fda9 	bl	8002f58 <HAL_GetTick>
 8005406:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005408:	e00a      	b.n	8005420 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800540a:	f7fd fda5 	bl	8002f58 <HAL_GetTick>
 800540e:	4602      	mov	r2, r0
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	1ad3      	subs	r3, r2, r3
 8005414:	f241 3288 	movw	r2, #5000	; 0x1388
 8005418:	4293      	cmp	r3, r2
 800541a:	d901      	bls.n	8005420 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800541c:	2303      	movs	r3, #3
 800541e:	e113      	b.n	8005648 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005420:	4b7f      	ldr	r3, [pc, #508]	; (8005620 <HAL_RCC_OscConfig+0x780>)
 8005422:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005426:	f003 0302 	and.w	r3, r3, #2
 800542a:	2b00      	cmp	r3, #0
 800542c:	d1ed      	bne.n	800540a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800542e:	7ffb      	ldrb	r3, [r7, #31]
 8005430:	2b01      	cmp	r3, #1
 8005432:	d105      	bne.n	8005440 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005434:	4b7a      	ldr	r3, [pc, #488]	; (8005620 <HAL_RCC_OscConfig+0x780>)
 8005436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005438:	4a79      	ldr	r2, [pc, #484]	; (8005620 <HAL_RCC_OscConfig+0x780>)
 800543a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800543e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005444:	2b00      	cmp	r3, #0
 8005446:	f000 80fe 	beq.w	8005646 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800544e:	2b02      	cmp	r3, #2
 8005450:	f040 80d0 	bne.w	80055f4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005454:	4b72      	ldr	r3, [pc, #456]	; (8005620 <HAL_RCC_OscConfig+0x780>)
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	f003 0203 	and.w	r2, r3, #3
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005464:	429a      	cmp	r2, r3
 8005466:	d130      	bne.n	80054ca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005472:	3b01      	subs	r3, #1
 8005474:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005476:	429a      	cmp	r2, r3
 8005478:	d127      	bne.n	80054ca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005484:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005486:	429a      	cmp	r2, r3
 8005488:	d11f      	bne.n	80054ca <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005494:	2a07      	cmp	r2, #7
 8005496:	bf14      	ite	ne
 8005498:	2201      	movne	r2, #1
 800549a:	2200      	moveq	r2, #0
 800549c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800549e:	4293      	cmp	r3, r2
 80054a0:	d113      	bne.n	80054ca <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054ac:	085b      	lsrs	r3, r3, #1
 80054ae:	3b01      	subs	r3, #1
 80054b0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d109      	bne.n	80054ca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c0:	085b      	lsrs	r3, r3, #1
 80054c2:	3b01      	subs	r3, #1
 80054c4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d06e      	beq.n	80055a8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80054ca:	69bb      	ldr	r3, [r7, #24]
 80054cc:	2b0c      	cmp	r3, #12
 80054ce:	d069      	beq.n	80055a4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80054d0:	4b53      	ldr	r3, [pc, #332]	; (8005620 <HAL_RCC_OscConfig+0x780>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d105      	bne.n	80054e8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80054dc:	4b50      	ldr	r3, [pc, #320]	; (8005620 <HAL_RCC_OscConfig+0x780>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d001      	beq.n	80054ec <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	e0ad      	b.n	8005648 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80054ec:	4b4c      	ldr	r3, [pc, #304]	; (8005620 <HAL_RCC_OscConfig+0x780>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a4b      	ldr	r2, [pc, #300]	; (8005620 <HAL_RCC_OscConfig+0x780>)
 80054f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80054f6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80054f8:	f7fd fd2e 	bl	8002f58 <HAL_GetTick>
 80054fc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054fe:	e008      	b.n	8005512 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005500:	f7fd fd2a 	bl	8002f58 <HAL_GetTick>
 8005504:	4602      	mov	r2, r0
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	1ad3      	subs	r3, r2, r3
 800550a:	2b02      	cmp	r3, #2
 800550c:	d901      	bls.n	8005512 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800550e:	2303      	movs	r3, #3
 8005510:	e09a      	b.n	8005648 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005512:	4b43      	ldr	r3, [pc, #268]	; (8005620 <HAL_RCC_OscConfig+0x780>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800551a:	2b00      	cmp	r3, #0
 800551c:	d1f0      	bne.n	8005500 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800551e:	4b40      	ldr	r3, [pc, #256]	; (8005620 <HAL_RCC_OscConfig+0x780>)
 8005520:	68da      	ldr	r2, [r3, #12]
 8005522:	4b40      	ldr	r3, [pc, #256]	; (8005624 <HAL_RCC_OscConfig+0x784>)
 8005524:	4013      	ands	r3, r2
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800552a:	687a      	ldr	r2, [r7, #4]
 800552c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800552e:	3a01      	subs	r2, #1
 8005530:	0112      	lsls	r2, r2, #4
 8005532:	4311      	orrs	r1, r2
 8005534:	687a      	ldr	r2, [r7, #4]
 8005536:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005538:	0212      	lsls	r2, r2, #8
 800553a:	4311      	orrs	r1, r2
 800553c:	687a      	ldr	r2, [r7, #4]
 800553e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005540:	0852      	lsrs	r2, r2, #1
 8005542:	3a01      	subs	r2, #1
 8005544:	0552      	lsls	r2, r2, #21
 8005546:	4311      	orrs	r1, r2
 8005548:	687a      	ldr	r2, [r7, #4]
 800554a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800554c:	0852      	lsrs	r2, r2, #1
 800554e:	3a01      	subs	r2, #1
 8005550:	0652      	lsls	r2, r2, #25
 8005552:	4311      	orrs	r1, r2
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005558:	0912      	lsrs	r2, r2, #4
 800555a:	0452      	lsls	r2, r2, #17
 800555c:	430a      	orrs	r2, r1
 800555e:	4930      	ldr	r1, [pc, #192]	; (8005620 <HAL_RCC_OscConfig+0x780>)
 8005560:	4313      	orrs	r3, r2
 8005562:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005564:	4b2e      	ldr	r3, [pc, #184]	; (8005620 <HAL_RCC_OscConfig+0x780>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a2d      	ldr	r2, [pc, #180]	; (8005620 <HAL_RCC_OscConfig+0x780>)
 800556a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800556e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005570:	4b2b      	ldr	r3, [pc, #172]	; (8005620 <HAL_RCC_OscConfig+0x780>)
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	4a2a      	ldr	r2, [pc, #168]	; (8005620 <HAL_RCC_OscConfig+0x780>)
 8005576:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800557a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800557c:	f7fd fcec 	bl	8002f58 <HAL_GetTick>
 8005580:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005582:	e008      	b.n	8005596 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005584:	f7fd fce8 	bl	8002f58 <HAL_GetTick>
 8005588:	4602      	mov	r2, r0
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	1ad3      	subs	r3, r2, r3
 800558e:	2b02      	cmp	r3, #2
 8005590:	d901      	bls.n	8005596 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005592:	2303      	movs	r3, #3
 8005594:	e058      	b.n	8005648 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005596:	4b22      	ldr	r3, [pc, #136]	; (8005620 <HAL_RCC_OscConfig+0x780>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d0f0      	beq.n	8005584 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80055a2:	e050      	b.n	8005646 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	e04f      	b.n	8005648 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055a8:	4b1d      	ldr	r3, [pc, #116]	; (8005620 <HAL_RCC_OscConfig+0x780>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d148      	bne.n	8005646 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80055b4:	4b1a      	ldr	r3, [pc, #104]	; (8005620 <HAL_RCC_OscConfig+0x780>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a19      	ldr	r2, [pc, #100]	; (8005620 <HAL_RCC_OscConfig+0x780>)
 80055ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80055be:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80055c0:	4b17      	ldr	r3, [pc, #92]	; (8005620 <HAL_RCC_OscConfig+0x780>)
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	4a16      	ldr	r2, [pc, #88]	; (8005620 <HAL_RCC_OscConfig+0x780>)
 80055c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80055ca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80055cc:	f7fd fcc4 	bl	8002f58 <HAL_GetTick>
 80055d0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055d2:	e008      	b.n	80055e6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055d4:	f7fd fcc0 	bl	8002f58 <HAL_GetTick>
 80055d8:	4602      	mov	r2, r0
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	1ad3      	subs	r3, r2, r3
 80055de:	2b02      	cmp	r3, #2
 80055e0:	d901      	bls.n	80055e6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80055e2:	2303      	movs	r3, #3
 80055e4:	e030      	b.n	8005648 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055e6:	4b0e      	ldr	r3, [pc, #56]	; (8005620 <HAL_RCC_OscConfig+0x780>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d0f0      	beq.n	80055d4 <HAL_RCC_OscConfig+0x734>
 80055f2:	e028      	b.n	8005646 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80055f4:	69bb      	ldr	r3, [r7, #24]
 80055f6:	2b0c      	cmp	r3, #12
 80055f8:	d023      	beq.n	8005642 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055fa:	4b09      	ldr	r3, [pc, #36]	; (8005620 <HAL_RCC_OscConfig+0x780>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a08      	ldr	r2, [pc, #32]	; (8005620 <HAL_RCC_OscConfig+0x780>)
 8005600:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005604:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005606:	f7fd fca7 	bl	8002f58 <HAL_GetTick>
 800560a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800560c:	e00c      	b.n	8005628 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800560e:	f7fd fca3 	bl	8002f58 <HAL_GetTick>
 8005612:	4602      	mov	r2, r0
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	1ad3      	subs	r3, r2, r3
 8005618:	2b02      	cmp	r3, #2
 800561a:	d905      	bls.n	8005628 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800561c:	2303      	movs	r3, #3
 800561e:	e013      	b.n	8005648 <HAL_RCC_OscConfig+0x7a8>
 8005620:	40021000 	.word	0x40021000
 8005624:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005628:	4b09      	ldr	r3, [pc, #36]	; (8005650 <HAL_RCC_OscConfig+0x7b0>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005630:	2b00      	cmp	r3, #0
 8005632:	d1ec      	bne.n	800560e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005634:	4b06      	ldr	r3, [pc, #24]	; (8005650 <HAL_RCC_OscConfig+0x7b0>)
 8005636:	68da      	ldr	r2, [r3, #12]
 8005638:	4905      	ldr	r1, [pc, #20]	; (8005650 <HAL_RCC_OscConfig+0x7b0>)
 800563a:	4b06      	ldr	r3, [pc, #24]	; (8005654 <HAL_RCC_OscConfig+0x7b4>)
 800563c:	4013      	ands	r3, r2
 800563e:	60cb      	str	r3, [r1, #12]
 8005640:	e001      	b.n	8005646 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	e000      	b.n	8005648 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8005646:	2300      	movs	r3, #0
}
 8005648:	4618      	mov	r0, r3
 800564a:	3720      	adds	r7, #32
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}
 8005650:	40021000 	.word	0x40021000
 8005654:	feeefffc 	.word	0xfeeefffc

08005658 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d101      	bne.n	800566c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	e0e7      	b.n	800583c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800566c:	4b75      	ldr	r3, [pc, #468]	; (8005844 <HAL_RCC_ClockConfig+0x1ec>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 0307 	and.w	r3, r3, #7
 8005674:	683a      	ldr	r2, [r7, #0]
 8005676:	429a      	cmp	r2, r3
 8005678:	d910      	bls.n	800569c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800567a:	4b72      	ldr	r3, [pc, #456]	; (8005844 <HAL_RCC_ClockConfig+0x1ec>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f023 0207 	bic.w	r2, r3, #7
 8005682:	4970      	ldr	r1, [pc, #448]	; (8005844 <HAL_RCC_ClockConfig+0x1ec>)
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	4313      	orrs	r3, r2
 8005688:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800568a:	4b6e      	ldr	r3, [pc, #440]	; (8005844 <HAL_RCC_ClockConfig+0x1ec>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f003 0307 	and.w	r3, r3, #7
 8005692:	683a      	ldr	r2, [r7, #0]
 8005694:	429a      	cmp	r2, r3
 8005696:	d001      	beq.n	800569c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	e0cf      	b.n	800583c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f003 0302 	and.w	r3, r3, #2
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d010      	beq.n	80056ca <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	689a      	ldr	r2, [r3, #8]
 80056ac:	4b66      	ldr	r3, [pc, #408]	; (8005848 <HAL_RCC_ClockConfig+0x1f0>)
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d908      	bls.n	80056ca <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056b8:	4b63      	ldr	r3, [pc, #396]	; (8005848 <HAL_RCC_ClockConfig+0x1f0>)
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	4960      	ldr	r1, [pc, #384]	; (8005848 <HAL_RCC_ClockConfig+0x1f0>)
 80056c6:	4313      	orrs	r3, r2
 80056c8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f003 0301 	and.w	r3, r3, #1
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d04c      	beq.n	8005770 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	2b03      	cmp	r3, #3
 80056dc:	d107      	bne.n	80056ee <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056de:	4b5a      	ldr	r3, [pc, #360]	; (8005848 <HAL_RCC_ClockConfig+0x1f0>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d121      	bne.n	800572e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	e0a6      	b.n	800583c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	2b02      	cmp	r3, #2
 80056f4:	d107      	bne.n	8005706 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80056f6:	4b54      	ldr	r3, [pc, #336]	; (8005848 <HAL_RCC_ClockConfig+0x1f0>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d115      	bne.n	800572e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e09a      	b.n	800583c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d107      	bne.n	800571e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800570e:	4b4e      	ldr	r3, [pc, #312]	; (8005848 <HAL_RCC_ClockConfig+0x1f0>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f003 0302 	and.w	r3, r3, #2
 8005716:	2b00      	cmp	r3, #0
 8005718:	d109      	bne.n	800572e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	e08e      	b.n	800583c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800571e:	4b4a      	ldr	r3, [pc, #296]	; (8005848 <HAL_RCC_ClockConfig+0x1f0>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005726:	2b00      	cmp	r3, #0
 8005728:	d101      	bne.n	800572e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e086      	b.n	800583c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800572e:	4b46      	ldr	r3, [pc, #280]	; (8005848 <HAL_RCC_ClockConfig+0x1f0>)
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	f023 0203 	bic.w	r2, r3, #3
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	4943      	ldr	r1, [pc, #268]	; (8005848 <HAL_RCC_ClockConfig+0x1f0>)
 800573c:	4313      	orrs	r3, r2
 800573e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005740:	f7fd fc0a 	bl	8002f58 <HAL_GetTick>
 8005744:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005746:	e00a      	b.n	800575e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005748:	f7fd fc06 	bl	8002f58 <HAL_GetTick>
 800574c:	4602      	mov	r2, r0
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	1ad3      	subs	r3, r2, r3
 8005752:	f241 3288 	movw	r2, #5000	; 0x1388
 8005756:	4293      	cmp	r3, r2
 8005758:	d901      	bls.n	800575e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800575a:	2303      	movs	r3, #3
 800575c:	e06e      	b.n	800583c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800575e:	4b3a      	ldr	r3, [pc, #232]	; (8005848 <HAL_RCC_ClockConfig+0x1f0>)
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	f003 020c 	and.w	r2, r3, #12
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	009b      	lsls	r3, r3, #2
 800576c:	429a      	cmp	r2, r3
 800576e:	d1eb      	bne.n	8005748 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f003 0302 	and.w	r3, r3, #2
 8005778:	2b00      	cmp	r3, #0
 800577a:	d010      	beq.n	800579e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	689a      	ldr	r2, [r3, #8]
 8005780:	4b31      	ldr	r3, [pc, #196]	; (8005848 <HAL_RCC_ClockConfig+0x1f0>)
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005788:	429a      	cmp	r2, r3
 800578a:	d208      	bcs.n	800579e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800578c:	4b2e      	ldr	r3, [pc, #184]	; (8005848 <HAL_RCC_ClockConfig+0x1f0>)
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	689b      	ldr	r3, [r3, #8]
 8005798:	492b      	ldr	r1, [pc, #172]	; (8005848 <HAL_RCC_ClockConfig+0x1f0>)
 800579a:	4313      	orrs	r3, r2
 800579c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800579e:	4b29      	ldr	r3, [pc, #164]	; (8005844 <HAL_RCC_ClockConfig+0x1ec>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f003 0307 	and.w	r3, r3, #7
 80057a6:	683a      	ldr	r2, [r7, #0]
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d210      	bcs.n	80057ce <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057ac:	4b25      	ldr	r3, [pc, #148]	; (8005844 <HAL_RCC_ClockConfig+0x1ec>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f023 0207 	bic.w	r2, r3, #7
 80057b4:	4923      	ldr	r1, [pc, #140]	; (8005844 <HAL_RCC_ClockConfig+0x1ec>)
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	4313      	orrs	r3, r2
 80057ba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057bc:	4b21      	ldr	r3, [pc, #132]	; (8005844 <HAL_RCC_ClockConfig+0x1ec>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 0307 	and.w	r3, r3, #7
 80057c4:	683a      	ldr	r2, [r7, #0]
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d001      	beq.n	80057ce <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	e036      	b.n	800583c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 0304 	and.w	r3, r3, #4
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d008      	beq.n	80057ec <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057da:	4b1b      	ldr	r3, [pc, #108]	; (8005848 <HAL_RCC_ClockConfig+0x1f0>)
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	68db      	ldr	r3, [r3, #12]
 80057e6:	4918      	ldr	r1, [pc, #96]	; (8005848 <HAL_RCC_ClockConfig+0x1f0>)
 80057e8:	4313      	orrs	r3, r2
 80057ea:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f003 0308 	and.w	r3, r3, #8
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d009      	beq.n	800580c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80057f8:	4b13      	ldr	r3, [pc, #76]	; (8005848 <HAL_RCC_ClockConfig+0x1f0>)
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	691b      	ldr	r3, [r3, #16]
 8005804:	00db      	lsls	r3, r3, #3
 8005806:	4910      	ldr	r1, [pc, #64]	; (8005848 <HAL_RCC_ClockConfig+0x1f0>)
 8005808:	4313      	orrs	r3, r2
 800580a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800580c:	f000 f824 	bl	8005858 <HAL_RCC_GetSysClockFreq>
 8005810:	4602      	mov	r2, r0
 8005812:	4b0d      	ldr	r3, [pc, #52]	; (8005848 <HAL_RCC_ClockConfig+0x1f0>)
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	091b      	lsrs	r3, r3, #4
 8005818:	f003 030f 	and.w	r3, r3, #15
 800581c:	490b      	ldr	r1, [pc, #44]	; (800584c <HAL_RCC_ClockConfig+0x1f4>)
 800581e:	5ccb      	ldrb	r3, [r1, r3]
 8005820:	f003 031f 	and.w	r3, r3, #31
 8005824:	fa22 f303 	lsr.w	r3, r2, r3
 8005828:	4a09      	ldr	r2, [pc, #36]	; (8005850 <HAL_RCC_ClockConfig+0x1f8>)
 800582a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800582c:	4b09      	ldr	r3, [pc, #36]	; (8005854 <HAL_RCC_ClockConfig+0x1fc>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4618      	mov	r0, r3
 8005832:	f7fd fb41 	bl	8002eb8 <HAL_InitTick>
 8005836:	4603      	mov	r3, r0
 8005838:	72fb      	strb	r3, [r7, #11]

  return status;
 800583a:	7afb      	ldrb	r3, [r7, #11]
}
 800583c:	4618      	mov	r0, r3
 800583e:	3710      	adds	r7, #16
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}
 8005844:	40022000 	.word	0x40022000
 8005848:	40021000 	.word	0x40021000
 800584c:	08012e8c 	.word	0x08012e8c
 8005850:	20000000 	.word	0x20000000
 8005854:	20000004 	.word	0x20000004

08005858 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005858:	b480      	push	{r7}
 800585a:	b089      	sub	sp, #36	; 0x24
 800585c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800585e:	2300      	movs	r3, #0
 8005860:	61fb      	str	r3, [r7, #28]
 8005862:	2300      	movs	r3, #0
 8005864:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005866:	4b3e      	ldr	r3, [pc, #248]	; (8005960 <HAL_RCC_GetSysClockFreq+0x108>)
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	f003 030c 	and.w	r3, r3, #12
 800586e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005870:	4b3b      	ldr	r3, [pc, #236]	; (8005960 <HAL_RCC_GetSysClockFreq+0x108>)
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	f003 0303 	and.w	r3, r3, #3
 8005878:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d005      	beq.n	800588c <HAL_RCC_GetSysClockFreq+0x34>
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	2b0c      	cmp	r3, #12
 8005884:	d121      	bne.n	80058ca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2b01      	cmp	r3, #1
 800588a:	d11e      	bne.n	80058ca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800588c:	4b34      	ldr	r3, [pc, #208]	; (8005960 <HAL_RCC_GetSysClockFreq+0x108>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f003 0308 	and.w	r3, r3, #8
 8005894:	2b00      	cmp	r3, #0
 8005896:	d107      	bne.n	80058a8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005898:	4b31      	ldr	r3, [pc, #196]	; (8005960 <HAL_RCC_GetSysClockFreq+0x108>)
 800589a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800589e:	0a1b      	lsrs	r3, r3, #8
 80058a0:	f003 030f 	and.w	r3, r3, #15
 80058a4:	61fb      	str	r3, [r7, #28]
 80058a6:	e005      	b.n	80058b4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80058a8:	4b2d      	ldr	r3, [pc, #180]	; (8005960 <HAL_RCC_GetSysClockFreq+0x108>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	091b      	lsrs	r3, r3, #4
 80058ae:	f003 030f 	and.w	r3, r3, #15
 80058b2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80058b4:	4a2b      	ldr	r2, [pc, #172]	; (8005964 <HAL_RCC_GetSysClockFreq+0x10c>)
 80058b6:	69fb      	ldr	r3, [r7, #28]
 80058b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058bc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d10d      	bne.n	80058e0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80058c4:	69fb      	ldr	r3, [r7, #28]
 80058c6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80058c8:	e00a      	b.n	80058e0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	2b04      	cmp	r3, #4
 80058ce:	d102      	bne.n	80058d6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80058d0:	4b25      	ldr	r3, [pc, #148]	; (8005968 <HAL_RCC_GetSysClockFreq+0x110>)
 80058d2:	61bb      	str	r3, [r7, #24]
 80058d4:	e004      	b.n	80058e0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	2b08      	cmp	r3, #8
 80058da:	d101      	bne.n	80058e0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80058dc:	4b23      	ldr	r3, [pc, #140]	; (800596c <HAL_RCC_GetSysClockFreq+0x114>)
 80058de:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	2b0c      	cmp	r3, #12
 80058e4:	d134      	bne.n	8005950 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80058e6:	4b1e      	ldr	r3, [pc, #120]	; (8005960 <HAL_RCC_GetSysClockFreq+0x108>)
 80058e8:	68db      	ldr	r3, [r3, #12]
 80058ea:	f003 0303 	and.w	r3, r3, #3
 80058ee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	2b02      	cmp	r3, #2
 80058f4:	d003      	beq.n	80058fe <HAL_RCC_GetSysClockFreq+0xa6>
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	2b03      	cmp	r3, #3
 80058fa:	d003      	beq.n	8005904 <HAL_RCC_GetSysClockFreq+0xac>
 80058fc:	e005      	b.n	800590a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80058fe:	4b1a      	ldr	r3, [pc, #104]	; (8005968 <HAL_RCC_GetSysClockFreq+0x110>)
 8005900:	617b      	str	r3, [r7, #20]
      break;
 8005902:	e005      	b.n	8005910 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005904:	4b19      	ldr	r3, [pc, #100]	; (800596c <HAL_RCC_GetSysClockFreq+0x114>)
 8005906:	617b      	str	r3, [r7, #20]
      break;
 8005908:	e002      	b.n	8005910 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800590a:	69fb      	ldr	r3, [r7, #28]
 800590c:	617b      	str	r3, [r7, #20]
      break;
 800590e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005910:	4b13      	ldr	r3, [pc, #76]	; (8005960 <HAL_RCC_GetSysClockFreq+0x108>)
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	091b      	lsrs	r3, r3, #4
 8005916:	f003 0307 	and.w	r3, r3, #7
 800591a:	3301      	adds	r3, #1
 800591c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800591e:	4b10      	ldr	r3, [pc, #64]	; (8005960 <HAL_RCC_GetSysClockFreq+0x108>)
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	0a1b      	lsrs	r3, r3, #8
 8005924:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005928:	697a      	ldr	r2, [r7, #20]
 800592a:	fb03 f202 	mul.w	r2, r3, r2
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	fbb2 f3f3 	udiv	r3, r2, r3
 8005934:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005936:	4b0a      	ldr	r3, [pc, #40]	; (8005960 <HAL_RCC_GetSysClockFreq+0x108>)
 8005938:	68db      	ldr	r3, [r3, #12]
 800593a:	0e5b      	lsrs	r3, r3, #25
 800593c:	f003 0303 	and.w	r3, r3, #3
 8005940:	3301      	adds	r3, #1
 8005942:	005b      	lsls	r3, r3, #1
 8005944:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005946:	697a      	ldr	r2, [r7, #20]
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	fbb2 f3f3 	udiv	r3, r2, r3
 800594e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005950:	69bb      	ldr	r3, [r7, #24]
}
 8005952:	4618      	mov	r0, r3
 8005954:	3724      	adds	r7, #36	; 0x24
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr
 800595e:	bf00      	nop
 8005960:	40021000 	.word	0x40021000
 8005964:	08012ea4 	.word	0x08012ea4
 8005968:	00f42400 	.word	0x00f42400
 800596c:	007a1200 	.word	0x007a1200

08005970 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005970:	b480      	push	{r7}
 8005972:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005974:	4b03      	ldr	r3, [pc, #12]	; (8005984 <HAL_RCC_GetHCLKFreq+0x14>)
 8005976:	681b      	ldr	r3, [r3, #0]
}
 8005978:	4618      	mov	r0, r3
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr
 8005982:	bf00      	nop
 8005984:	20000000 	.word	0x20000000

08005988 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800598c:	f7ff fff0 	bl	8005970 <HAL_RCC_GetHCLKFreq>
 8005990:	4602      	mov	r2, r0
 8005992:	4b06      	ldr	r3, [pc, #24]	; (80059ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	0a1b      	lsrs	r3, r3, #8
 8005998:	f003 0307 	and.w	r3, r3, #7
 800599c:	4904      	ldr	r1, [pc, #16]	; (80059b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800599e:	5ccb      	ldrb	r3, [r1, r3]
 80059a0:	f003 031f 	and.w	r3, r3, #31
 80059a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	bd80      	pop	{r7, pc}
 80059ac:	40021000 	.word	0x40021000
 80059b0:	08012e9c 	.word	0x08012e9c

080059b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80059b8:	f7ff ffda 	bl	8005970 <HAL_RCC_GetHCLKFreq>
 80059bc:	4602      	mov	r2, r0
 80059be:	4b06      	ldr	r3, [pc, #24]	; (80059d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	0adb      	lsrs	r3, r3, #11
 80059c4:	f003 0307 	and.w	r3, r3, #7
 80059c8:	4904      	ldr	r1, [pc, #16]	; (80059dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80059ca:	5ccb      	ldrb	r3, [r1, r3]
 80059cc:	f003 031f 	and.w	r3, r3, #31
 80059d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	bd80      	pop	{r7, pc}
 80059d8:	40021000 	.word	0x40021000
 80059dc:	08012e9c 	.word	0x08012e9c

080059e0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b086      	sub	sp, #24
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80059e8:	2300      	movs	r3, #0
 80059ea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80059ec:	4b2a      	ldr	r3, [pc, #168]	; (8005a98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80059ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d003      	beq.n	8005a00 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80059f8:	f7ff f9ee 	bl	8004dd8 <HAL_PWREx_GetVoltageRange>
 80059fc:	6178      	str	r0, [r7, #20]
 80059fe:	e014      	b.n	8005a2a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005a00:	4b25      	ldr	r3, [pc, #148]	; (8005a98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005a02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a04:	4a24      	ldr	r2, [pc, #144]	; (8005a98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005a06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a0a:	6593      	str	r3, [r2, #88]	; 0x58
 8005a0c:	4b22      	ldr	r3, [pc, #136]	; (8005a98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a14:	60fb      	str	r3, [r7, #12]
 8005a16:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005a18:	f7ff f9de 	bl	8004dd8 <HAL_PWREx_GetVoltageRange>
 8005a1c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005a1e:	4b1e      	ldr	r3, [pc, #120]	; (8005a98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a22:	4a1d      	ldr	r2, [pc, #116]	; (8005a98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005a24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a28:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a30:	d10b      	bne.n	8005a4a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2b80      	cmp	r3, #128	; 0x80
 8005a36:	d919      	bls.n	8005a6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2ba0      	cmp	r3, #160	; 0xa0
 8005a3c:	d902      	bls.n	8005a44 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005a3e:	2302      	movs	r3, #2
 8005a40:	613b      	str	r3, [r7, #16]
 8005a42:	e013      	b.n	8005a6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005a44:	2301      	movs	r3, #1
 8005a46:	613b      	str	r3, [r7, #16]
 8005a48:	e010      	b.n	8005a6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2b80      	cmp	r3, #128	; 0x80
 8005a4e:	d902      	bls.n	8005a56 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005a50:	2303      	movs	r3, #3
 8005a52:	613b      	str	r3, [r7, #16]
 8005a54:	e00a      	b.n	8005a6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2b80      	cmp	r3, #128	; 0x80
 8005a5a:	d102      	bne.n	8005a62 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005a5c:	2302      	movs	r3, #2
 8005a5e:	613b      	str	r3, [r7, #16]
 8005a60:	e004      	b.n	8005a6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2b70      	cmp	r3, #112	; 0x70
 8005a66:	d101      	bne.n	8005a6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005a68:	2301      	movs	r3, #1
 8005a6a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005a6c:	4b0b      	ldr	r3, [pc, #44]	; (8005a9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f023 0207 	bic.w	r2, r3, #7
 8005a74:	4909      	ldr	r1, [pc, #36]	; (8005a9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005a7c:	4b07      	ldr	r3, [pc, #28]	; (8005a9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f003 0307 	and.w	r3, r3, #7
 8005a84:	693a      	ldr	r2, [r7, #16]
 8005a86:	429a      	cmp	r2, r3
 8005a88:	d001      	beq.n	8005a8e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e000      	b.n	8005a90 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005a8e:	2300      	movs	r3, #0
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3718      	adds	r7, #24
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}
 8005a98:	40021000 	.word	0x40021000
 8005a9c:	40022000 	.word	0x40022000

08005aa0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b086      	sub	sp, #24
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005aac:	2300      	movs	r3, #0
 8005aae:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d041      	beq.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ac0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005ac4:	d02a      	beq.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005ac6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005aca:	d824      	bhi.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005acc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005ad0:	d008      	beq.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005ad2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005ad6:	d81e      	bhi.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d00a      	beq.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005adc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ae0:	d010      	beq.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005ae2:	e018      	b.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005ae4:	4b86      	ldr	r3, [pc, #536]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ae6:	68db      	ldr	r3, [r3, #12]
 8005ae8:	4a85      	ldr	r2, [pc, #532]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005aea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005aee:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005af0:	e015      	b.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	3304      	adds	r3, #4
 8005af6:	2100      	movs	r1, #0
 8005af8:	4618      	mov	r0, r3
 8005afa:	f000 fabb 	bl	8006074 <RCCEx_PLLSAI1_Config>
 8005afe:	4603      	mov	r3, r0
 8005b00:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005b02:	e00c      	b.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	3320      	adds	r3, #32
 8005b08:	2100      	movs	r1, #0
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f000 fba6 	bl	800625c <RCCEx_PLLSAI2_Config>
 8005b10:	4603      	mov	r3, r0
 8005b12:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005b14:	e003      	b.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b16:	2301      	movs	r3, #1
 8005b18:	74fb      	strb	r3, [r7, #19]
      break;
 8005b1a:	e000      	b.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005b1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b1e:	7cfb      	ldrb	r3, [r7, #19]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d10b      	bne.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005b24:	4b76      	ldr	r3, [pc, #472]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b2a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b32:	4973      	ldr	r1, [pc, #460]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b34:	4313      	orrs	r3, r2
 8005b36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005b3a:	e001      	b.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b3c:	7cfb      	ldrb	r3, [r7, #19]
 8005b3e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d041      	beq.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b50:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005b54:	d02a      	beq.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005b56:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005b5a:	d824      	bhi.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005b5c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b60:	d008      	beq.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005b62:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b66:	d81e      	bhi.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d00a      	beq.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005b6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b70:	d010      	beq.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005b72:	e018      	b.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005b74:	4b62      	ldr	r3, [pc, #392]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b76:	68db      	ldr	r3, [r3, #12]
 8005b78:	4a61      	ldr	r2, [pc, #388]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b7e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005b80:	e015      	b.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	3304      	adds	r3, #4
 8005b86:	2100      	movs	r1, #0
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f000 fa73 	bl	8006074 <RCCEx_PLLSAI1_Config>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005b92:	e00c      	b.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	3320      	adds	r3, #32
 8005b98:	2100      	movs	r1, #0
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f000 fb5e 	bl	800625c <RCCEx_PLLSAI2_Config>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005ba4:	e003      	b.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	74fb      	strb	r3, [r7, #19]
      break;
 8005baa:	e000      	b.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005bac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005bae:	7cfb      	ldrb	r3, [r7, #19]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d10b      	bne.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005bb4:	4b52      	ldr	r3, [pc, #328]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bba:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005bc2:	494f      	ldr	r1, [pc, #316]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005bca:	e001      	b.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bcc:	7cfb      	ldrb	r3, [r7, #19]
 8005bce:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	f000 80a0 	beq.w	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005bde:	2300      	movs	r3, #0
 8005be0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005be2:	4b47      	ldr	r3, [pc, #284]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005be6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d101      	bne.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005bee:	2301      	movs	r3, #1
 8005bf0:	e000      	b.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d00d      	beq.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bf8:	4b41      	ldr	r3, [pc, #260]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005bfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bfc:	4a40      	ldr	r2, [pc, #256]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005bfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c02:	6593      	str	r3, [r2, #88]	; 0x58
 8005c04:	4b3e      	ldr	r3, [pc, #248]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c0c:	60bb      	str	r3, [r7, #8]
 8005c0e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c10:	2301      	movs	r3, #1
 8005c12:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c14:	4b3b      	ldr	r3, [pc, #236]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a3a      	ldr	r2, [pc, #232]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005c1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c1e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005c20:	f7fd f99a 	bl	8002f58 <HAL_GetTick>
 8005c24:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005c26:	e009      	b.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c28:	f7fd f996 	bl	8002f58 <HAL_GetTick>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	1ad3      	subs	r3, r2, r3
 8005c32:	2b02      	cmp	r3, #2
 8005c34:	d902      	bls.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005c36:	2303      	movs	r3, #3
 8005c38:	74fb      	strb	r3, [r7, #19]
        break;
 8005c3a:	e005      	b.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005c3c:	4b31      	ldr	r3, [pc, #196]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d0ef      	beq.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005c48:	7cfb      	ldrb	r3, [r7, #19]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d15c      	bne.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005c4e:	4b2c      	ldr	r3, [pc, #176]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c58:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d01f      	beq.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c66:	697a      	ldr	r2, [r7, #20]
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d019      	beq.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005c6c:	4b24      	ldr	r3, [pc, #144]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c76:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005c78:	4b21      	ldr	r3, [pc, #132]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c7e:	4a20      	ldr	r2, [pc, #128]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005c88:	4b1d      	ldr	r3, [pc, #116]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c8e:	4a1c      	ldr	r2, [pc, #112]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005c98:	4a19      	ldr	r2, [pc, #100]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	f003 0301 	and.w	r3, r3, #1
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d016      	beq.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005caa:	f7fd f955 	bl	8002f58 <HAL_GetTick>
 8005cae:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005cb0:	e00b      	b.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cb2:	f7fd f951 	bl	8002f58 <HAL_GetTick>
 8005cb6:	4602      	mov	r2, r0
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	1ad3      	subs	r3, r2, r3
 8005cbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d902      	bls.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005cc4:	2303      	movs	r3, #3
 8005cc6:	74fb      	strb	r3, [r7, #19]
            break;
 8005cc8:	e006      	b.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005cca:	4b0d      	ldr	r3, [pc, #52]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cd0:	f003 0302 	and.w	r3, r3, #2
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d0ec      	beq.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005cd8:	7cfb      	ldrb	r3, [r7, #19]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d10c      	bne.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005cde:	4b08      	ldr	r3, [pc, #32]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ce4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cee:	4904      	ldr	r1, [pc, #16]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005cf6:	e009      	b.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005cf8:	7cfb      	ldrb	r3, [r7, #19]
 8005cfa:	74bb      	strb	r3, [r7, #18]
 8005cfc:	e006      	b.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005cfe:	bf00      	nop
 8005d00:	40021000 	.word	0x40021000
 8005d04:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d08:	7cfb      	ldrb	r3, [r7, #19]
 8005d0a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d0c:	7c7b      	ldrb	r3, [r7, #17]
 8005d0e:	2b01      	cmp	r3, #1
 8005d10:	d105      	bne.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d12:	4b9e      	ldr	r3, [pc, #632]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d16:	4a9d      	ldr	r2, [pc, #628]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d1c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f003 0301 	and.w	r3, r3, #1
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d00a      	beq.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005d2a:	4b98      	ldr	r3, [pc, #608]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d30:	f023 0203 	bic.w	r2, r3, #3
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d38:	4994      	ldr	r1, [pc, #592]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f003 0302 	and.w	r3, r3, #2
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d00a      	beq.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005d4c:	4b8f      	ldr	r3, [pc, #572]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d52:	f023 020c 	bic.w	r2, r3, #12
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d5a:	498c      	ldr	r1, [pc, #560]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f003 0304 	and.w	r3, r3, #4
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d00a      	beq.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005d6e:	4b87      	ldr	r3, [pc, #540]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d74:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d7c:	4983      	ldr	r1, [pc, #524]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f003 0308 	and.w	r3, r3, #8
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d00a      	beq.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005d90:	4b7e      	ldr	r3, [pc, #504]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d96:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d9e:	497b      	ldr	r1, [pc, #492]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005da0:	4313      	orrs	r3, r2
 8005da2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f003 0310 	and.w	r3, r3, #16
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d00a      	beq.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005db2:	4b76      	ldr	r3, [pc, #472]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005db8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dc0:	4972      	ldr	r1, [pc, #456]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f003 0320 	and.w	r3, r3, #32
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d00a      	beq.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005dd4:	4b6d      	ldr	r3, [pc, #436]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dda:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005de2:	496a      	ldr	r1, [pc, #424]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005de4:	4313      	orrs	r3, r2
 8005de6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d00a      	beq.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005df6:	4b65      	ldr	r3, [pc, #404]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dfc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e04:	4961      	ldr	r1, [pc, #388]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e06:	4313      	orrs	r3, r2
 8005e08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d00a      	beq.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005e18:	4b5c      	ldr	r3, [pc, #368]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e1e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e26:	4959      	ldr	r1, [pc, #356]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d00a      	beq.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005e3a:	4b54      	ldr	r3, [pc, #336]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e40:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e48:	4950      	ldr	r1, [pc, #320]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d00a      	beq.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005e5c:	4b4b      	ldr	r3, [pc, #300]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e62:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e6a:	4948      	ldr	r1, [pc, #288]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d00a      	beq.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005e7e:	4b43      	ldr	r3, [pc, #268]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e84:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e8c:	493f      	ldr	r1, [pc, #252]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d028      	beq.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005ea0:	4b3a      	ldr	r3, [pc, #232]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ea6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005eae:	4937      	ldr	r1, [pc, #220]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005eba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ebe:	d106      	bne.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ec0:	4b32      	ldr	r3, [pc, #200]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	4a31      	ldr	r2, [pc, #196]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ec6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005eca:	60d3      	str	r3, [r2, #12]
 8005ecc:	e011      	b.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ed2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ed6:	d10c      	bne.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	3304      	adds	r3, #4
 8005edc:	2101      	movs	r1, #1
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f000 f8c8 	bl	8006074 <RCCEx_PLLSAI1_Config>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005ee8:	7cfb      	ldrb	r3, [r7, #19]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d001      	beq.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005eee:	7cfb      	ldrb	r3, [r7, #19]
 8005ef0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d028      	beq.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005efe:	4b23      	ldr	r3, [pc, #140]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f04:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f0c:	491f      	ldr	r1, [pc, #124]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f1c:	d106      	bne.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f1e:	4b1b      	ldr	r3, [pc, #108]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f20:	68db      	ldr	r3, [r3, #12]
 8005f22:	4a1a      	ldr	r2, [pc, #104]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f28:	60d3      	str	r3, [r2, #12]
 8005f2a:	e011      	b.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f30:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005f34:	d10c      	bne.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	3304      	adds	r3, #4
 8005f3a:	2101      	movs	r1, #1
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f000 f899 	bl	8006074 <RCCEx_PLLSAI1_Config>
 8005f42:	4603      	mov	r3, r0
 8005f44:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005f46:	7cfb      	ldrb	r3, [r7, #19]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d001      	beq.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005f4c:	7cfb      	ldrb	r3, [r7, #19]
 8005f4e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d02b      	beq.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005f5c:	4b0b      	ldr	r3, [pc, #44]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f62:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f6a:	4908      	ldr	r1, [pc, #32]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f7a:	d109      	bne.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f7c:	4b03      	ldr	r3, [pc, #12]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f7e:	68db      	ldr	r3, [r3, #12]
 8005f80:	4a02      	ldr	r2, [pc, #8]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f86:	60d3      	str	r3, [r2, #12]
 8005f88:	e014      	b.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005f8a:	bf00      	nop
 8005f8c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f94:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005f98:	d10c      	bne.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	3304      	adds	r3, #4
 8005f9e:	2101      	movs	r1, #1
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f000 f867 	bl	8006074 <RCCEx_PLLSAI1_Config>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005faa:	7cfb      	ldrb	r3, [r7, #19]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d001      	beq.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005fb0:	7cfb      	ldrb	r3, [r7, #19]
 8005fb2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d02f      	beq.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005fc0:	4b2b      	ldr	r3, [pc, #172]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fc6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005fce:	4928      	ldr	r1, [pc, #160]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005fda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005fde:	d10d      	bne.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	3304      	adds	r3, #4
 8005fe4:	2102      	movs	r1, #2
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f000 f844 	bl	8006074 <RCCEx_PLLSAI1_Config>
 8005fec:	4603      	mov	r3, r0
 8005fee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005ff0:	7cfb      	ldrb	r3, [r7, #19]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d014      	beq.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005ff6:	7cfb      	ldrb	r3, [r7, #19]
 8005ff8:	74bb      	strb	r3, [r7, #18]
 8005ffa:	e011      	b.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006000:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006004:	d10c      	bne.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	3320      	adds	r3, #32
 800600a:	2102      	movs	r1, #2
 800600c:	4618      	mov	r0, r3
 800600e:	f000 f925 	bl	800625c <RCCEx_PLLSAI2_Config>
 8006012:	4603      	mov	r3, r0
 8006014:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006016:	7cfb      	ldrb	r3, [r7, #19]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d001      	beq.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800601c:	7cfb      	ldrb	r3, [r7, #19]
 800601e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006028:	2b00      	cmp	r3, #0
 800602a:	d00a      	beq.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800602c:	4b10      	ldr	r3, [pc, #64]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800602e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006032:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800603a:	490d      	ldr	r1, [pc, #52]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800603c:	4313      	orrs	r3, r2
 800603e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800604a:	2b00      	cmp	r3, #0
 800604c:	d00b      	beq.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800604e:	4b08      	ldr	r3, [pc, #32]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006050:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006054:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800605e:	4904      	ldr	r1, [pc, #16]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006060:	4313      	orrs	r3, r2
 8006062:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006066:	7cbb      	ldrb	r3, [r7, #18]
}
 8006068:	4618      	mov	r0, r3
 800606a:	3718      	adds	r7, #24
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}
 8006070:	40021000 	.word	0x40021000

08006074 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b084      	sub	sp, #16
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800607e:	2300      	movs	r3, #0
 8006080:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006082:	4b75      	ldr	r3, [pc, #468]	; (8006258 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006084:	68db      	ldr	r3, [r3, #12]
 8006086:	f003 0303 	and.w	r3, r3, #3
 800608a:	2b00      	cmp	r3, #0
 800608c:	d018      	beq.n	80060c0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800608e:	4b72      	ldr	r3, [pc, #456]	; (8006258 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006090:	68db      	ldr	r3, [r3, #12]
 8006092:	f003 0203 	and.w	r2, r3, #3
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	429a      	cmp	r2, r3
 800609c:	d10d      	bne.n	80060ba <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
       ||
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d009      	beq.n	80060ba <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80060a6:	4b6c      	ldr	r3, [pc, #432]	; (8006258 <RCCEx_PLLSAI1_Config+0x1e4>)
 80060a8:	68db      	ldr	r3, [r3, #12]
 80060aa:	091b      	lsrs	r3, r3, #4
 80060ac:	f003 0307 	and.w	r3, r3, #7
 80060b0:	1c5a      	adds	r2, r3, #1
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	685b      	ldr	r3, [r3, #4]
       ||
 80060b6:	429a      	cmp	r2, r3
 80060b8:	d047      	beq.n	800614a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	73fb      	strb	r3, [r7, #15]
 80060be:	e044      	b.n	800614a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	2b03      	cmp	r3, #3
 80060c6:	d018      	beq.n	80060fa <RCCEx_PLLSAI1_Config+0x86>
 80060c8:	2b03      	cmp	r3, #3
 80060ca:	d825      	bhi.n	8006118 <RCCEx_PLLSAI1_Config+0xa4>
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d002      	beq.n	80060d6 <RCCEx_PLLSAI1_Config+0x62>
 80060d0:	2b02      	cmp	r3, #2
 80060d2:	d009      	beq.n	80060e8 <RCCEx_PLLSAI1_Config+0x74>
 80060d4:	e020      	b.n	8006118 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80060d6:	4b60      	ldr	r3, [pc, #384]	; (8006258 <RCCEx_PLLSAI1_Config+0x1e4>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f003 0302 	and.w	r3, r3, #2
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d11d      	bne.n	800611e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80060e2:	2301      	movs	r3, #1
 80060e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80060e6:	e01a      	b.n	800611e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80060e8:	4b5b      	ldr	r3, [pc, #364]	; (8006258 <RCCEx_PLLSAI1_Config+0x1e4>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d116      	bne.n	8006122 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80060f4:	2301      	movs	r3, #1
 80060f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80060f8:	e013      	b.n	8006122 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80060fa:	4b57      	ldr	r3, [pc, #348]	; (8006258 <RCCEx_PLLSAI1_Config+0x1e4>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006102:	2b00      	cmp	r3, #0
 8006104:	d10f      	bne.n	8006126 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006106:	4b54      	ldr	r3, [pc, #336]	; (8006258 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800610e:	2b00      	cmp	r3, #0
 8006110:	d109      	bne.n	8006126 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006116:	e006      	b.n	8006126 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006118:	2301      	movs	r3, #1
 800611a:	73fb      	strb	r3, [r7, #15]
      break;
 800611c:	e004      	b.n	8006128 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800611e:	bf00      	nop
 8006120:	e002      	b.n	8006128 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006122:	bf00      	nop
 8006124:	e000      	b.n	8006128 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006126:	bf00      	nop
    }

    if(status == HAL_OK)
 8006128:	7bfb      	ldrb	r3, [r7, #15]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d10d      	bne.n	800614a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800612e:	4b4a      	ldr	r3, [pc, #296]	; (8006258 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006130:	68db      	ldr	r3, [r3, #12]
 8006132:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6819      	ldr	r1, [r3, #0]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	3b01      	subs	r3, #1
 8006140:	011b      	lsls	r3, r3, #4
 8006142:	430b      	orrs	r3, r1
 8006144:	4944      	ldr	r1, [pc, #272]	; (8006258 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006146:	4313      	orrs	r3, r2
 8006148:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800614a:	7bfb      	ldrb	r3, [r7, #15]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d17d      	bne.n	800624c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006150:	4b41      	ldr	r3, [pc, #260]	; (8006258 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a40      	ldr	r2, [pc, #256]	; (8006258 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006156:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800615a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800615c:	f7fc fefc 	bl	8002f58 <HAL_GetTick>
 8006160:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006162:	e009      	b.n	8006178 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006164:	f7fc fef8 	bl	8002f58 <HAL_GetTick>
 8006168:	4602      	mov	r2, r0
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	1ad3      	subs	r3, r2, r3
 800616e:	2b02      	cmp	r3, #2
 8006170:	d902      	bls.n	8006178 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006172:	2303      	movs	r3, #3
 8006174:	73fb      	strb	r3, [r7, #15]
        break;
 8006176:	e005      	b.n	8006184 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006178:	4b37      	ldr	r3, [pc, #220]	; (8006258 <RCCEx_PLLSAI1_Config+0x1e4>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006180:	2b00      	cmp	r3, #0
 8006182:	d1ef      	bne.n	8006164 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006184:	7bfb      	ldrb	r3, [r7, #15]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d160      	bne.n	800624c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d111      	bne.n	80061b4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006190:	4b31      	ldr	r3, [pc, #196]	; (8006258 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006192:	691b      	ldr	r3, [r3, #16]
 8006194:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006198:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800619c:	687a      	ldr	r2, [r7, #4]
 800619e:	6892      	ldr	r2, [r2, #8]
 80061a0:	0211      	lsls	r1, r2, #8
 80061a2:	687a      	ldr	r2, [r7, #4]
 80061a4:	68d2      	ldr	r2, [r2, #12]
 80061a6:	0912      	lsrs	r2, r2, #4
 80061a8:	0452      	lsls	r2, r2, #17
 80061aa:	430a      	orrs	r2, r1
 80061ac:	492a      	ldr	r1, [pc, #168]	; (8006258 <RCCEx_PLLSAI1_Config+0x1e4>)
 80061ae:	4313      	orrs	r3, r2
 80061b0:	610b      	str	r3, [r1, #16]
 80061b2:	e027      	b.n	8006204 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	2b01      	cmp	r3, #1
 80061b8:	d112      	bne.n	80061e0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80061ba:	4b27      	ldr	r3, [pc, #156]	; (8006258 <RCCEx_PLLSAI1_Config+0x1e4>)
 80061bc:	691b      	ldr	r3, [r3, #16]
 80061be:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80061c2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80061c6:	687a      	ldr	r2, [r7, #4]
 80061c8:	6892      	ldr	r2, [r2, #8]
 80061ca:	0211      	lsls	r1, r2, #8
 80061cc:	687a      	ldr	r2, [r7, #4]
 80061ce:	6912      	ldr	r2, [r2, #16]
 80061d0:	0852      	lsrs	r2, r2, #1
 80061d2:	3a01      	subs	r2, #1
 80061d4:	0552      	lsls	r2, r2, #21
 80061d6:	430a      	orrs	r2, r1
 80061d8:	491f      	ldr	r1, [pc, #124]	; (8006258 <RCCEx_PLLSAI1_Config+0x1e4>)
 80061da:	4313      	orrs	r3, r2
 80061dc:	610b      	str	r3, [r1, #16]
 80061de:	e011      	b.n	8006204 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80061e0:	4b1d      	ldr	r3, [pc, #116]	; (8006258 <RCCEx_PLLSAI1_Config+0x1e4>)
 80061e2:	691b      	ldr	r3, [r3, #16]
 80061e4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80061e8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80061ec:	687a      	ldr	r2, [r7, #4]
 80061ee:	6892      	ldr	r2, [r2, #8]
 80061f0:	0211      	lsls	r1, r2, #8
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	6952      	ldr	r2, [r2, #20]
 80061f6:	0852      	lsrs	r2, r2, #1
 80061f8:	3a01      	subs	r2, #1
 80061fa:	0652      	lsls	r2, r2, #25
 80061fc:	430a      	orrs	r2, r1
 80061fe:	4916      	ldr	r1, [pc, #88]	; (8006258 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006200:	4313      	orrs	r3, r2
 8006202:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006204:	4b14      	ldr	r3, [pc, #80]	; (8006258 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a13      	ldr	r2, [pc, #76]	; (8006258 <RCCEx_PLLSAI1_Config+0x1e4>)
 800620a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800620e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006210:	f7fc fea2 	bl	8002f58 <HAL_GetTick>
 8006214:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006216:	e009      	b.n	800622c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006218:	f7fc fe9e 	bl	8002f58 <HAL_GetTick>
 800621c:	4602      	mov	r2, r0
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	1ad3      	subs	r3, r2, r3
 8006222:	2b02      	cmp	r3, #2
 8006224:	d902      	bls.n	800622c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8006226:	2303      	movs	r3, #3
 8006228:	73fb      	strb	r3, [r7, #15]
          break;
 800622a:	e005      	b.n	8006238 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800622c:	4b0a      	ldr	r3, [pc, #40]	; (8006258 <RCCEx_PLLSAI1_Config+0x1e4>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006234:	2b00      	cmp	r3, #0
 8006236:	d0ef      	beq.n	8006218 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006238:	7bfb      	ldrb	r3, [r7, #15]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d106      	bne.n	800624c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800623e:	4b06      	ldr	r3, [pc, #24]	; (8006258 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006240:	691a      	ldr	r2, [r3, #16]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	699b      	ldr	r3, [r3, #24]
 8006246:	4904      	ldr	r1, [pc, #16]	; (8006258 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006248:	4313      	orrs	r3, r2
 800624a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800624c:	7bfb      	ldrb	r3, [r7, #15]
}
 800624e:	4618      	mov	r0, r3
 8006250:	3710      	adds	r7, #16
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}
 8006256:	bf00      	nop
 8006258:	40021000 	.word	0x40021000

0800625c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b084      	sub	sp, #16
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
 8006264:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006266:	2300      	movs	r3, #0
 8006268:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800626a:	4b6a      	ldr	r3, [pc, #424]	; (8006414 <RCCEx_PLLSAI2_Config+0x1b8>)
 800626c:	68db      	ldr	r3, [r3, #12]
 800626e:	f003 0303 	and.w	r3, r3, #3
 8006272:	2b00      	cmp	r3, #0
 8006274:	d018      	beq.n	80062a8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006276:	4b67      	ldr	r3, [pc, #412]	; (8006414 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006278:	68db      	ldr	r3, [r3, #12]
 800627a:	f003 0203 	and.w	r2, r3, #3
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	429a      	cmp	r2, r3
 8006284:	d10d      	bne.n	80062a2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
       ||
 800628a:	2b00      	cmp	r3, #0
 800628c:	d009      	beq.n	80062a2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800628e:	4b61      	ldr	r3, [pc, #388]	; (8006414 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006290:	68db      	ldr	r3, [r3, #12]
 8006292:	091b      	lsrs	r3, r3, #4
 8006294:	f003 0307 	and.w	r3, r3, #7
 8006298:	1c5a      	adds	r2, r3, #1
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	685b      	ldr	r3, [r3, #4]
       ||
 800629e:	429a      	cmp	r2, r3
 80062a0:	d047      	beq.n	8006332 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80062a2:	2301      	movs	r3, #1
 80062a4:	73fb      	strb	r3, [r7, #15]
 80062a6:	e044      	b.n	8006332 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	2b03      	cmp	r3, #3
 80062ae:	d018      	beq.n	80062e2 <RCCEx_PLLSAI2_Config+0x86>
 80062b0:	2b03      	cmp	r3, #3
 80062b2:	d825      	bhi.n	8006300 <RCCEx_PLLSAI2_Config+0xa4>
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d002      	beq.n	80062be <RCCEx_PLLSAI2_Config+0x62>
 80062b8:	2b02      	cmp	r3, #2
 80062ba:	d009      	beq.n	80062d0 <RCCEx_PLLSAI2_Config+0x74>
 80062bc:	e020      	b.n	8006300 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80062be:	4b55      	ldr	r3, [pc, #340]	; (8006414 <RCCEx_PLLSAI2_Config+0x1b8>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f003 0302 	and.w	r3, r3, #2
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d11d      	bne.n	8006306 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062ce:	e01a      	b.n	8006306 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80062d0:	4b50      	ldr	r3, [pc, #320]	; (8006414 <RCCEx_PLLSAI2_Config+0x1b8>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d116      	bne.n	800630a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80062dc:	2301      	movs	r3, #1
 80062de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062e0:	e013      	b.n	800630a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80062e2:	4b4c      	ldr	r3, [pc, #304]	; (8006414 <RCCEx_PLLSAI2_Config+0x1b8>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d10f      	bne.n	800630e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80062ee:	4b49      	ldr	r3, [pc, #292]	; (8006414 <RCCEx_PLLSAI2_Config+0x1b8>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d109      	bne.n	800630e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80062fa:	2301      	movs	r3, #1
 80062fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80062fe:	e006      	b.n	800630e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006300:	2301      	movs	r3, #1
 8006302:	73fb      	strb	r3, [r7, #15]
      break;
 8006304:	e004      	b.n	8006310 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006306:	bf00      	nop
 8006308:	e002      	b.n	8006310 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800630a:	bf00      	nop
 800630c:	e000      	b.n	8006310 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800630e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006310:	7bfb      	ldrb	r3, [r7, #15]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d10d      	bne.n	8006332 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006316:	4b3f      	ldr	r3, [pc, #252]	; (8006414 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006318:	68db      	ldr	r3, [r3, #12]
 800631a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6819      	ldr	r1, [r3, #0]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	3b01      	subs	r3, #1
 8006328:	011b      	lsls	r3, r3, #4
 800632a:	430b      	orrs	r3, r1
 800632c:	4939      	ldr	r1, [pc, #228]	; (8006414 <RCCEx_PLLSAI2_Config+0x1b8>)
 800632e:	4313      	orrs	r3, r2
 8006330:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006332:	7bfb      	ldrb	r3, [r7, #15]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d167      	bne.n	8006408 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006338:	4b36      	ldr	r3, [pc, #216]	; (8006414 <RCCEx_PLLSAI2_Config+0x1b8>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a35      	ldr	r2, [pc, #212]	; (8006414 <RCCEx_PLLSAI2_Config+0x1b8>)
 800633e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006342:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006344:	f7fc fe08 	bl	8002f58 <HAL_GetTick>
 8006348:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800634a:	e009      	b.n	8006360 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800634c:	f7fc fe04 	bl	8002f58 <HAL_GetTick>
 8006350:	4602      	mov	r2, r0
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	1ad3      	subs	r3, r2, r3
 8006356:	2b02      	cmp	r3, #2
 8006358:	d902      	bls.n	8006360 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800635a:	2303      	movs	r3, #3
 800635c:	73fb      	strb	r3, [r7, #15]
        break;
 800635e:	e005      	b.n	800636c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006360:	4b2c      	ldr	r3, [pc, #176]	; (8006414 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006368:	2b00      	cmp	r3, #0
 800636a:	d1ef      	bne.n	800634c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800636c:	7bfb      	ldrb	r3, [r7, #15]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d14a      	bne.n	8006408 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d111      	bne.n	800639c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006378:	4b26      	ldr	r3, [pc, #152]	; (8006414 <RCCEx_PLLSAI2_Config+0x1b8>)
 800637a:	695b      	ldr	r3, [r3, #20]
 800637c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006380:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	6892      	ldr	r2, [r2, #8]
 8006388:	0211      	lsls	r1, r2, #8
 800638a:	687a      	ldr	r2, [r7, #4]
 800638c:	68d2      	ldr	r2, [r2, #12]
 800638e:	0912      	lsrs	r2, r2, #4
 8006390:	0452      	lsls	r2, r2, #17
 8006392:	430a      	orrs	r2, r1
 8006394:	491f      	ldr	r1, [pc, #124]	; (8006414 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006396:	4313      	orrs	r3, r2
 8006398:	614b      	str	r3, [r1, #20]
 800639a:	e011      	b.n	80063c0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800639c:	4b1d      	ldr	r3, [pc, #116]	; (8006414 <RCCEx_PLLSAI2_Config+0x1b8>)
 800639e:	695b      	ldr	r3, [r3, #20]
 80063a0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80063a4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80063a8:	687a      	ldr	r2, [r7, #4]
 80063aa:	6892      	ldr	r2, [r2, #8]
 80063ac:	0211      	lsls	r1, r2, #8
 80063ae:	687a      	ldr	r2, [r7, #4]
 80063b0:	6912      	ldr	r2, [r2, #16]
 80063b2:	0852      	lsrs	r2, r2, #1
 80063b4:	3a01      	subs	r2, #1
 80063b6:	0652      	lsls	r2, r2, #25
 80063b8:	430a      	orrs	r2, r1
 80063ba:	4916      	ldr	r1, [pc, #88]	; (8006414 <RCCEx_PLLSAI2_Config+0x1b8>)
 80063bc:	4313      	orrs	r3, r2
 80063be:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80063c0:	4b14      	ldr	r3, [pc, #80]	; (8006414 <RCCEx_PLLSAI2_Config+0x1b8>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a13      	ldr	r2, [pc, #76]	; (8006414 <RCCEx_PLLSAI2_Config+0x1b8>)
 80063c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063ca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063cc:	f7fc fdc4 	bl	8002f58 <HAL_GetTick>
 80063d0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80063d2:	e009      	b.n	80063e8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80063d4:	f7fc fdc0 	bl	8002f58 <HAL_GetTick>
 80063d8:	4602      	mov	r2, r0
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	1ad3      	subs	r3, r2, r3
 80063de:	2b02      	cmp	r3, #2
 80063e0:	d902      	bls.n	80063e8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80063e2:	2303      	movs	r3, #3
 80063e4:	73fb      	strb	r3, [r7, #15]
          break;
 80063e6:	e005      	b.n	80063f4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80063e8:	4b0a      	ldr	r3, [pc, #40]	; (8006414 <RCCEx_PLLSAI2_Config+0x1b8>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d0ef      	beq.n	80063d4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80063f4:	7bfb      	ldrb	r3, [r7, #15]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d106      	bne.n	8006408 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80063fa:	4b06      	ldr	r3, [pc, #24]	; (8006414 <RCCEx_PLLSAI2_Config+0x1b8>)
 80063fc:	695a      	ldr	r2, [r3, #20]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	695b      	ldr	r3, [r3, #20]
 8006402:	4904      	ldr	r1, [pc, #16]	; (8006414 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006404:	4313      	orrs	r3, r2
 8006406:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006408:	7bfb      	ldrb	r3, [r7, #15]
}
 800640a:	4618      	mov	r0, r3
 800640c:	3710      	adds	r7, #16
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}
 8006412:	bf00      	nop
 8006414:	40021000 	.word	0x40021000

08006418 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b084      	sub	sp, #16
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006420:	2301      	movs	r3, #1
 8006422:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d06c      	beq.n	8006504 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006430:	b2db      	uxtb	r3, r3
 8006432:	2b00      	cmp	r3, #0
 8006434:	d106      	bne.n	8006444 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2200      	movs	r2, #0
 800643a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f7fc f9fa 	bl	8002838 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2202      	movs	r2, #2
 8006448:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	22ca      	movs	r2, #202	; 0xca
 8006452:	625a      	str	r2, [r3, #36]	; 0x24
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	2253      	movs	r2, #83	; 0x53
 800645a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f000 fbcb 	bl	8006bf8 <RTC_EnterInitMode>
 8006462:	4603      	mov	r3, r0
 8006464:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8006466:	7bfb      	ldrb	r3, [r7, #15]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d14b      	bne.n	8006504 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	689b      	ldr	r3, [r3, #8]
 8006472:	687a      	ldr	r2, [r7, #4]
 8006474:	6812      	ldr	r2, [r2, #0]
 8006476:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800647a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800647e:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	6899      	ldr	r1, [r3, #8]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	685a      	ldr	r2, [r3, #4]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	691b      	ldr	r3, [r3, #16]
 800648e:	431a      	orrs	r2, r3
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	699b      	ldr	r3, [r3, #24]
 8006494:	431a      	orrs	r2, r3
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	430a      	orrs	r2, r1
 800649c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	687a      	ldr	r2, [r7, #4]
 80064a4:	68d2      	ldr	r2, [r2, #12]
 80064a6:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	6919      	ldr	r1, [r3, #16]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	041a      	lsls	r2, r3, #16
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	430a      	orrs	r2, r1
 80064ba:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f000 fbcf 	bl	8006c60 <RTC_ExitInitMode>
 80064c2:	4603      	mov	r3, r0
 80064c4:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80064c6:	7bfb      	ldrb	r3, [r7, #15]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d11b      	bne.n	8006504 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f022 0203 	bic.w	r2, r2, #3
 80064da:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	69da      	ldr	r2, [r3, #28]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	695b      	ldr	r3, [r3, #20]
 80064ea:	431a      	orrs	r2, r3
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	430a      	orrs	r2, r1
 80064f2:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	22ff      	movs	r2, #255	; 0xff
 80064fa:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2201      	movs	r2, #1
 8006500:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8006504:	7bfb      	ldrb	r3, [r7, #15]
}
 8006506:	4618      	mov	r0, r3
 8006508:	3710      	adds	r7, #16
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}

0800650e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800650e:	b590      	push	{r4, r7, lr}
 8006510:	b087      	sub	sp, #28
 8006512:	af00      	add	r7, sp, #0
 8006514:	60f8      	str	r0, [r7, #12]
 8006516:	60b9      	str	r1, [r7, #8]
 8006518:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006520:	2b01      	cmp	r3, #1
 8006522:	d101      	bne.n	8006528 <HAL_RTC_SetTime+0x1a>
 8006524:	2302      	movs	r3, #2
 8006526:	e08b      	b.n	8006640 <HAL_RTC_SetTime+0x132>
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2201      	movs	r2, #1
 800652c:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	2202      	movs	r2, #2
 8006534:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	22ca      	movs	r2, #202	; 0xca
 800653e:	625a      	str	r2, [r3, #36]	; 0x24
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	2253      	movs	r2, #83	; 0x53
 8006546:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006548:	68f8      	ldr	r0, [r7, #12]
 800654a:	f000 fb55 	bl	8006bf8 <RTC_EnterInitMode>
 800654e:	4603      	mov	r3, r0
 8006550:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8006552:	7cfb      	ldrb	r3, [r7, #19]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d163      	bne.n	8006620 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d126      	bne.n	80065ac <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006568:	2b00      	cmp	r3, #0
 800656a:	d102      	bne.n	8006572 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	2200      	movs	r2, #0
 8006570:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	781b      	ldrb	r3, [r3, #0]
 8006576:	4618      	mov	r0, r3
 8006578:	f000 fbb0 	bl	8006cdc <RTC_ByteToBcd2>
 800657c:	4603      	mov	r3, r0
 800657e:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	785b      	ldrb	r3, [r3, #1]
 8006584:	4618      	mov	r0, r3
 8006586:	f000 fba9 	bl	8006cdc <RTC_ByteToBcd2>
 800658a:	4603      	mov	r3, r0
 800658c:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800658e:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	789b      	ldrb	r3, [r3, #2]
 8006594:	4618      	mov	r0, r3
 8006596:	f000 fba1 	bl	8006cdc <RTC_ByteToBcd2>
 800659a:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800659c:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	78db      	ldrb	r3, [r3, #3]
 80065a4:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80065a6:	4313      	orrs	r3, r2
 80065a8:	617b      	str	r3, [r7, #20]
 80065aa:	e018      	b.n	80065de <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	689b      	ldr	r3, [r3, #8]
 80065b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d102      	bne.n	80065c0 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	2200      	movs	r2, #0
 80065be:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	781b      	ldrb	r3, [r3, #0]
 80065c4:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	785b      	ldrb	r3, [r3, #1]
 80065ca:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80065cc:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80065ce:	68ba      	ldr	r2, [r7, #8]
 80065d0:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80065d2:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	78db      	ldrb	r3, [r3, #3]
 80065d8:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80065da:	4313      	orrs	r3, r2
 80065dc:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681a      	ldr	r2, [r3, #0]
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80065e8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80065ec:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	689a      	ldr	r2, [r3, #8]
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80065fc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	6899      	ldr	r1, [r3, #8]
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	68da      	ldr	r2, [r3, #12]
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	691b      	ldr	r3, [r3, #16]
 800660c:	431a      	orrs	r2, r3
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	430a      	orrs	r2, r1
 8006614:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006616:	68f8      	ldr	r0, [r7, #12]
 8006618:	f000 fb22 	bl	8006c60 <RTC_ExitInitMode>
 800661c:	4603      	mov	r3, r0
 800661e:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	22ff      	movs	r2, #255	; 0xff
 8006626:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8006628:	7cfb      	ldrb	r3, [r7, #19]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d103      	bne.n	8006636 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2201      	movs	r2, #1
 8006632:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2200      	movs	r2, #0
 800663a:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800663e:	7cfb      	ldrb	r3, [r7, #19]
}
 8006640:	4618      	mov	r0, r3
 8006642:	371c      	adds	r7, #28
 8006644:	46bd      	mov	sp, r7
 8006646:	bd90      	pop	{r4, r7, pc}

08006648 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b086      	sub	sp, #24
 800664c:	af00      	add	r7, sp, #0
 800664e:	60f8      	str	r0, [r7, #12]
 8006650:	60b9      	str	r1, [r7, #8]
 8006652:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	691b      	ldr	r3, [r3, #16]
 8006664:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006676:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800667a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	0c1b      	lsrs	r3, r3, #16
 8006680:	b2db      	uxtb	r3, r3
 8006682:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006686:	b2da      	uxtb	r2, r3
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	0a1b      	lsrs	r3, r3, #8
 8006690:	b2db      	uxtb	r3, r3
 8006692:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006696:	b2da      	uxtb	r2, r3
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	b2db      	uxtb	r3, r3
 80066a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066a4:	b2da      	uxtb	r2, r3
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	0d9b      	lsrs	r3, r3, #22
 80066ae:	b2db      	uxtb	r3, r3
 80066b0:	f003 0301 	and.w	r3, r3, #1
 80066b4:	b2da      	uxtb	r2, r3
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d11a      	bne.n	80066f6 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	4618      	mov	r0, r3
 80066c6:	f000 fb29 	bl	8006d1c <RTC_Bcd2ToByte>
 80066ca:	4603      	mov	r3, r0
 80066cc:	461a      	mov	r2, r3
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	785b      	ldrb	r3, [r3, #1]
 80066d6:	4618      	mov	r0, r3
 80066d8:	f000 fb20 	bl	8006d1c <RTC_Bcd2ToByte>
 80066dc:	4603      	mov	r3, r0
 80066de:	461a      	mov	r2, r3
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	789b      	ldrb	r3, [r3, #2]
 80066e8:	4618      	mov	r0, r3
 80066ea:	f000 fb17 	bl	8006d1c <RTC_Bcd2ToByte>
 80066ee:	4603      	mov	r3, r0
 80066f0:	461a      	mov	r2, r3
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80066f6:	2300      	movs	r3, #0
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	3718      	adds	r7, #24
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}

08006700 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006700:	b590      	push	{r4, r7, lr}
 8006702:	b087      	sub	sp, #28
 8006704:	af00      	add	r7, sp, #0
 8006706:	60f8      	str	r0, [r7, #12]
 8006708:	60b9      	str	r1, [r7, #8]
 800670a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006712:	2b01      	cmp	r3, #1
 8006714:	d101      	bne.n	800671a <HAL_RTC_SetDate+0x1a>
 8006716:	2302      	movs	r3, #2
 8006718:	e075      	b.n	8006806 <HAL_RTC_SetDate+0x106>
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2201      	movs	r2, #1
 800671e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2202      	movs	r2, #2
 8006726:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d10e      	bne.n	800674e <HAL_RTC_SetDate+0x4e>
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	785b      	ldrb	r3, [r3, #1]
 8006734:	f003 0310 	and.w	r3, r3, #16
 8006738:	2b00      	cmp	r3, #0
 800673a:	d008      	beq.n	800674e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	785b      	ldrb	r3, [r3, #1]
 8006740:	f023 0310 	bic.w	r3, r3, #16
 8006744:	b2db      	uxtb	r3, r3
 8006746:	330a      	adds	r3, #10
 8006748:	b2da      	uxtb	r2, r3
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d11c      	bne.n	800678e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	78db      	ldrb	r3, [r3, #3]
 8006758:	4618      	mov	r0, r3
 800675a:	f000 fabf 	bl	8006cdc <RTC_ByteToBcd2>
 800675e:	4603      	mov	r3, r0
 8006760:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	785b      	ldrb	r3, [r3, #1]
 8006766:	4618      	mov	r0, r3
 8006768:	f000 fab8 	bl	8006cdc <RTC_ByteToBcd2>
 800676c:	4603      	mov	r3, r0
 800676e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006770:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	789b      	ldrb	r3, [r3, #2]
 8006776:	4618      	mov	r0, r3
 8006778:	f000 fab0 	bl	8006cdc <RTC_ByteToBcd2>
 800677c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800677e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	781b      	ldrb	r3, [r3, #0]
 8006786:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006788:	4313      	orrs	r3, r2
 800678a:	617b      	str	r3, [r7, #20]
 800678c:	e00e      	b.n	80067ac <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	78db      	ldrb	r3, [r3, #3]
 8006792:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	785b      	ldrb	r3, [r3, #1]
 8006798:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800679a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800679c:	68ba      	ldr	r2, [r7, #8]
 800679e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80067a0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	781b      	ldrb	r3, [r3, #0]
 80067a6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80067a8:	4313      	orrs	r3, r2
 80067aa:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	22ca      	movs	r2, #202	; 0xca
 80067b2:	625a      	str	r2, [r3, #36]	; 0x24
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	2253      	movs	r2, #83	; 0x53
 80067ba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80067bc:	68f8      	ldr	r0, [r7, #12]
 80067be:	f000 fa1b 	bl	8006bf8 <RTC_EnterInitMode>
 80067c2:	4603      	mov	r3, r0
 80067c4:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80067c6:	7cfb      	ldrb	r3, [r7, #19]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d10c      	bne.n	80067e6 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681a      	ldr	r2, [r3, #0]
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80067d6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80067da:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80067dc:	68f8      	ldr	r0, [r7, #12]
 80067de:	f000 fa3f 	bl	8006c60 <RTC_ExitInitMode>
 80067e2:	4603      	mov	r3, r0
 80067e4:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	22ff      	movs	r2, #255	; 0xff
 80067ec:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80067ee:	7cfb      	ldrb	r3, [r7, #19]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d103      	bne.n	80067fc <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2201      	movs	r2, #1
 80067f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2200      	movs	r2, #0
 8006800:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8006804:	7cfb      	ldrb	r3, [r7, #19]
}
 8006806:	4618      	mov	r0, r3
 8006808:	371c      	adds	r7, #28
 800680a:	46bd      	mov	sp, r7
 800680c:	bd90      	pop	{r4, r7, pc}

0800680e <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800680e:	b580      	push	{r7, lr}
 8006810:	b086      	sub	sp, #24
 8006812:	af00      	add	r7, sp, #0
 8006814:	60f8      	str	r0, [r7, #12]
 8006816:	60b9      	str	r1, [r7, #8]
 8006818:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006824:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006828:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	0c1b      	lsrs	r3, r3, #16
 800682e:	b2da      	uxtb	r2, r3
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	0a1b      	lsrs	r3, r3, #8
 8006838:	b2db      	uxtb	r3, r3
 800683a:	f003 031f 	and.w	r3, r3, #31
 800683e:	b2da      	uxtb	r2, r3
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	b2db      	uxtb	r3, r3
 8006848:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800684c:	b2da      	uxtb	r2, r3
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	0b5b      	lsrs	r3, r3, #13
 8006856:	b2db      	uxtb	r3, r3
 8006858:	f003 0307 	and.w	r3, r3, #7
 800685c:	b2da      	uxtb	r2, r3
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d11a      	bne.n	800689e <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	78db      	ldrb	r3, [r3, #3]
 800686c:	4618      	mov	r0, r3
 800686e:	f000 fa55 	bl	8006d1c <RTC_Bcd2ToByte>
 8006872:	4603      	mov	r3, r0
 8006874:	461a      	mov	r2, r3
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	785b      	ldrb	r3, [r3, #1]
 800687e:	4618      	mov	r0, r3
 8006880:	f000 fa4c 	bl	8006d1c <RTC_Bcd2ToByte>
 8006884:	4603      	mov	r3, r0
 8006886:	461a      	mov	r2, r3
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	789b      	ldrb	r3, [r3, #2]
 8006890:	4618      	mov	r0, r3
 8006892:	f000 fa43 	bl	8006d1c <RTC_Bcd2ToByte>
 8006896:	4603      	mov	r3, r0
 8006898:	461a      	mov	r2, r3
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800689e:	2300      	movs	r3, #0
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3718      	adds	r7, #24
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}

080068a8 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80068a8:	b590      	push	{r4, r7, lr}
 80068aa:	b089      	sub	sp, #36	; 0x24
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	60f8      	str	r0, [r7, #12]
 80068b0:	60b9      	str	r1, [r7, #8]
 80068b2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80068ba:	2b01      	cmp	r3, #1
 80068bc:	d101      	bne.n	80068c2 <HAL_RTC_SetAlarm_IT+0x1a>
 80068be:	2302      	movs	r3, #2
 80068c0:	e127      	b.n	8006b12 <HAL_RTC_SetAlarm_IT+0x26a>
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2201      	movs	r2, #1
 80068c6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2202      	movs	r2, #2
 80068ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d137      	bne.n	8006948 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	689b      	ldr	r3, [r3, #8]
 80068de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d102      	bne.n	80068ec <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	2200      	movs	r2, #0
 80068ea:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	781b      	ldrb	r3, [r3, #0]
 80068f0:	4618      	mov	r0, r3
 80068f2:	f000 f9f3 	bl	8006cdc <RTC_ByteToBcd2>
 80068f6:	4603      	mov	r3, r0
 80068f8:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	785b      	ldrb	r3, [r3, #1]
 80068fe:	4618      	mov	r0, r3
 8006900:	f000 f9ec 	bl	8006cdc <RTC_ByteToBcd2>
 8006904:	4603      	mov	r3, r0
 8006906:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006908:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	789b      	ldrb	r3, [r3, #2]
 800690e:	4618      	mov	r0, r3
 8006910:	f000 f9e4 	bl	8006cdc <RTC_ByteToBcd2>
 8006914:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006916:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	78db      	ldrb	r3, [r3, #3]
 800691e:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006920:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800692a:	4618      	mov	r0, r3
 800692c:	f000 f9d6 	bl	8006cdc <RTC_ByteToBcd2>
 8006930:	4603      	mov	r3, r0
 8006932:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006934:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800693c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006942:	4313      	orrs	r3, r2
 8006944:	61fb      	str	r3, [r7, #28]
 8006946:	e023      	b.n	8006990 <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	689b      	ldr	r3, [r3, #8]
 800694e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006952:	2b00      	cmp	r3, #0
 8006954:	d102      	bne.n	800695c <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	2200      	movs	r2, #0
 800695a:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	781b      	ldrb	r3, [r3, #0]
 8006960:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	785b      	ldrb	r3, [r3, #1]
 8006966:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006968:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800696a:	68ba      	ldr	r2, [r7, #8]
 800696c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800696e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	78db      	ldrb	r3, [r3, #3]
 8006974:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006976:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800697e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006980:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006986:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800698c:	4313      	orrs	r3, r2
 800698e:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	685a      	ldr	r2, [r3, #4]
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	69db      	ldr	r3, [r3, #28]
 8006998:	4313      	orrs	r3, r2
 800699a:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	22ca      	movs	r2, #202	; 0xca
 80069a2:	625a      	str	r2, [r3, #36]	; 0x24
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	2253      	movs	r2, #83	; 0x53
 80069aa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069b4:	d14a      	bne.n	8006a4c <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	689a      	ldr	r2, [r3, #8]
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80069c4:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	68db      	ldr	r3, [r3, #12]
 80069cc:	b2da      	uxtb	r2, r3
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80069d6:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 80069d8:	f7fc fabe 	bl	8002f58 <HAL_GetTick>
 80069dc:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80069de:	e015      	b.n	8006a0c <HAL_RTC_SetAlarm_IT+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80069e0:	f7fc faba 	bl	8002f58 <HAL_GetTick>
 80069e4:	4602      	mov	r2, r0
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	1ad3      	subs	r3, r2, r3
 80069ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80069ee:	d90d      	bls.n	8006a0c <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	22ff      	movs	r2, #255	; 0xff
 80069f6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2203      	movs	r2, #3
 80069fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2200      	movs	r2, #0
 8006a04:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8006a08:	2303      	movs	r3, #3
 8006a0a:	e082      	b.n	8006b12 <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	68db      	ldr	r3, [r3, #12]
 8006a12:	f003 0301 	and.w	r3, r3, #1
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d0e2      	beq.n	80069e0 <HAL_RTC_SetAlarm_IT+0x138>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	69fa      	ldr	r2, [r7, #28]
 8006a20:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	69ba      	ldr	r2, [r7, #24]
 8006a28:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	689a      	ldr	r2, [r3, #8]
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a38:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	689a      	ldr	r2, [r3, #8]
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006a48:	609a      	str	r2, [r3, #8]
 8006a4a:	e049      	b.n	8006ae0 <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	689a      	ldr	r2, [r3, #8]
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006a5a:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	68db      	ldr	r3, [r3, #12]
 8006a62:	b2da      	uxtb	r2, r3
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f462 7220 	orn	r2, r2, #640	; 0x280
 8006a6c:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 8006a6e:	f7fc fa73 	bl	8002f58 <HAL_GetTick>
 8006a72:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8006a74:	e015      	b.n	8006aa2 <HAL_RTC_SetAlarm_IT+0x1fa>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006a76:	f7fc fa6f 	bl	8002f58 <HAL_GetTick>
 8006a7a:	4602      	mov	r2, r0
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	1ad3      	subs	r3, r2, r3
 8006a80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a84:	d90d      	bls.n	8006aa2 <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	22ff      	movs	r2, #255	; 0xff
 8006a8c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2203      	movs	r2, #3
 8006a92:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8006a9e:	2303      	movs	r3, #3
 8006aa0:	e037      	b.n	8006b12 <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	68db      	ldr	r3, [r3, #12]
 8006aa8:	f003 0302 	and.w	r3, r3, #2
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d0e2      	beq.n	8006a76 <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	69fa      	ldr	r2, [r7, #28]
 8006ab6:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	69ba      	ldr	r2, [r7, #24]
 8006abe:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	689a      	ldr	r2, [r3, #8]
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ace:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	689a      	ldr	r2, [r3, #8]
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006ade:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8006ae0:	4b0e      	ldr	r3, [pc, #56]	; (8006b1c <HAL_RTC_SetAlarm_IT+0x274>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a0d      	ldr	r2, [pc, #52]	; (8006b1c <HAL_RTC_SetAlarm_IT+0x274>)
 8006ae6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006aea:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8006aec:	4b0b      	ldr	r3, [pc, #44]	; (8006b1c <HAL_RTC_SetAlarm_IT+0x274>)
 8006aee:	689b      	ldr	r3, [r3, #8]
 8006af0:	4a0a      	ldr	r2, [pc, #40]	; (8006b1c <HAL_RTC_SetAlarm_IT+0x274>)
 8006af2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006af6:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	22ff      	movs	r2, #255	; 0xff
 8006afe:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2201      	movs	r2, #1
 8006b04:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006b10:	2300      	movs	r3, #0
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3724      	adds	r7, #36	; 0x24
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd90      	pop	{r4, r7, pc}
 8006b1a:	bf00      	nop
 8006b1c:	40010400 	.word	0x40010400

08006b20 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b082      	sub	sp, #8
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8006b28:	4b1f      	ldr	r3, [pc, #124]	; (8006ba8 <HAL_RTC_AlarmIRQHandler+0x88>)
 8006b2a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8006b2e:	615a      	str	r2, [r3, #20]
  }

#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	689b      	ldr	r3, [r3, #8]
 8006b36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d012      	beq.n	8006b64 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	68db      	ldr	r3, [r3, #12]
 8006b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d00b      	beq.n	8006b64 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	68db      	ldr	r3, [r3, #12]
 8006b52:	b2da      	uxtb	r2, r3
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8006b5c:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f7fb fdbe 	bl	80026e0 <HAL_RTC_AlarmAEventCallback>
#endif
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d012      	beq.n	8006b98 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	68db      	ldr	r3, [r3, #12]
 8006b78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d00b      	beq.n	8006b98 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	68db      	ldr	r3, [r3, #12]
 8006b86:	b2da      	uxtb	r2, r3
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f462 7220 	orn	r2, r2, #640	; 0x280
 8006b90:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f000 f8dc 	bl	8006d50 <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8006ba0:	bf00      	nop
 8006ba2:	3708      	adds	r7, #8
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}
 8006ba8:	40010400 	.word	0x40010400

08006bac <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b084      	sub	sp, #16
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	68da      	ldr	r2, [r3, #12]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006bc2:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8006bc4:	f7fc f9c8 	bl	8002f58 <HAL_GetTick>
 8006bc8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006bca:	e009      	b.n	8006be0 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006bcc:	f7fc f9c4 	bl	8002f58 <HAL_GetTick>
 8006bd0:	4602      	mov	r2, r0
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	1ad3      	subs	r3, r2, r3
 8006bd6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006bda:	d901      	bls.n	8006be0 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8006bdc:	2303      	movs	r3, #3
 8006bde:	e007      	b.n	8006bf0 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	68db      	ldr	r3, [r3, #12]
 8006be6:	f003 0320 	and.w	r3, r3, #32
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d0ee      	beq.n	8006bcc <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8006bee:	2300      	movs	r3, #0
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	3710      	adds	r7, #16
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}

08006bf8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b084      	sub	sp, #16
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006c00:	2300      	movs	r3, #0
 8006c02:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	68db      	ldr	r3, [r3, #12]
 8006c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d120      	bne.n	8006c54 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006c1a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006c1c:	f7fc f99c 	bl	8002f58 <HAL_GetTick>
 8006c20:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006c22:	e00d      	b.n	8006c40 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006c24:	f7fc f998 	bl	8002f58 <HAL_GetTick>
 8006c28:	4602      	mov	r2, r0
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	1ad3      	subs	r3, r2, r3
 8006c2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006c32:	d905      	bls.n	8006c40 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8006c34:	2303      	movs	r3, #3
 8006c36:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2203      	movs	r2, #3
 8006c3c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	68db      	ldr	r3, [r3, #12]
 8006c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d102      	bne.n	8006c54 <RTC_EnterInitMode+0x5c>
 8006c4e:	7bfb      	ldrb	r3, [r7, #15]
 8006c50:	2b03      	cmp	r3, #3
 8006c52:	d1e7      	bne.n	8006c24 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8006c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3710      	adds	r7, #16
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}
	...

08006c60 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b084      	sub	sp, #16
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8006c6c:	4b1a      	ldr	r3, [pc, #104]	; (8006cd8 <RTC_ExitInitMode+0x78>)
 8006c6e:	68db      	ldr	r3, [r3, #12]
 8006c70:	4a19      	ldr	r2, [pc, #100]	; (8006cd8 <RTC_ExitInitMode+0x78>)
 8006c72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c76:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006c78:	4b17      	ldr	r3, [pc, #92]	; (8006cd8 <RTC_ExitInitMode+0x78>)
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	f003 0320 	and.w	r3, r3, #32
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d10c      	bne.n	8006c9e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f7ff ff91 	bl	8006bac <HAL_RTC_WaitForSynchro>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d01e      	beq.n	8006cce <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2203      	movs	r2, #3
 8006c94:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8006c98:	2303      	movs	r3, #3
 8006c9a:	73fb      	strb	r3, [r7, #15]
 8006c9c:	e017      	b.n	8006cce <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006c9e:	4b0e      	ldr	r3, [pc, #56]	; (8006cd8 <RTC_ExitInitMode+0x78>)
 8006ca0:	689b      	ldr	r3, [r3, #8]
 8006ca2:	4a0d      	ldr	r2, [pc, #52]	; (8006cd8 <RTC_ExitInitMode+0x78>)
 8006ca4:	f023 0320 	bic.w	r3, r3, #32
 8006ca8:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f7ff ff7e 	bl	8006bac <HAL_RTC_WaitForSynchro>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d005      	beq.n	8006cc2 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2203      	movs	r2, #3
 8006cba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8006cbe:	2303      	movs	r3, #3
 8006cc0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006cc2:	4b05      	ldr	r3, [pc, #20]	; (8006cd8 <RTC_ExitInitMode+0x78>)
 8006cc4:	689b      	ldr	r3, [r3, #8]
 8006cc6:	4a04      	ldr	r2, [pc, #16]	; (8006cd8 <RTC_ExitInitMode+0x78>)
 8006cc8:	f043 0320 	orr.w	r3, r3, #32
 8006ccc:	6093      	str	r3, [r2, #8]
  }

  return status;
 8006cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3710      	adds	r7, #16
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}
 8006cd8:	40002800 	.word	0x40002800

08006cdc <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b085      	sub	sp, #20
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8006cea:	79fb      	ldrb	r3, [r7, #7]
 8006cec:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8006cee:	e005      	b.n	8006cfc <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	3301      	adds	r3, #1
 8006cf4:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8006cf6:	7afb      	ldrb	r3, [r7, #11]
 8006cf8:	3b0a      	subs	r3, #10
 8006cfa:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8006cfc:	7afb      	ldrb	r3, [r7, #11]
 8006cfe:	2b09      	cmp	r3, #9
 8006d00:	d8f6      	bhi.n	8006cf0 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	b2db      	uxtb	r3, r3
 8006d06:	011b      	lsls	r3, r3, #4
 8006d08:	b2da      	uxtb	r2, r3
 8006d0a:	7afb      	ldrb	r3, [r7, #11]
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	b2db      	uxtb	r3, r3
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3714      	adds	r7, #20
 8006d14:	46bd      	mov	sp, r7
 8006d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1a:	4770      	bx	lr

08006d1c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b085      	sub	sp, #20
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	4603      	mov	r3, r0
 8006d24:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8006d26:	79fb      	ldrb	r3, [r7, #7]
 8006d28:	091b      	lsrs	r3, r3, #4
 8006d2a:	b2db      	uxtb	r3, r3
 8006d2c:	461a      	mov	r2, r3
 8006d2e:	0092      	lsls	r2, r2, #2
 8006d30:	4413      	add	r3, r2
 8006d32:	005b      	lsls	r3, r3, #1
 8006d34:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8006d36:	79fb      	ldrb	r3, [r7, #7]
 8006d38:	f003 030f 	and.w	r3, r3, #15
 8006d3c:	b2da      	uxtb	r2, r3
 8006d3e:	7bfb      	ldrb	r3, [r7, #15]
 8006d40:	4413      	add	r3, r2
 8006d42:	b2db      	uxtb	r3, r3
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3714      	adds	r7, #20
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4e:	4770      	bx	lr

08006d50 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b083      	sub	sp, #12
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8006d58:	bf00      	nop
 8006d5a:	370c      	adds	r7, #12
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d62:	4770      	bx	lr

08006d64 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b084      	sub	sp, #16
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d101      	bne.n	8006d76 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006d72:	2301      	movs	r3, #1
 8006d74:	e095      	b.n	8006ea2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d108      	bne.n	8006d90 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d86:	d009      	beq.n	8006d9c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	61da      	str	r2, [r3, #28]
 8006d8e:	e005      	b.n	8006d9c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2200      	movs	r2, #0
 8006d94:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006da8:	b2db      	uxtb	r3, r3
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d106      	bne.n	8006dbc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2200      	movs	r2, #0
 8006db2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f7fb fdb6 	bl	8002928 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2202      	movs	r2, #2
 8006dc0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	681a      	ldr	r2, [r3, #0]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006dd2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	68db      	ldr	r3, [r3, #12]
 8006dd8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006ddc:	d902      	bls.n	8006de4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006dde:	2300      	movs	r3, #0
 8006de0:	60fb      	str	r3, [r7, #12]
 8006de2:	e002      	b.n	8006dea <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006de4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006de8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	68db      	ldr	r3, [r3, #12]
 8006dee:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006df2:	d007      	beq.n	8006e04 <HAL_SPI_Init+0xa0>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	68db      	ldr	r3, [r3, #12]
 8006df8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006dfc:	d002      	beq.n	8006e04 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2200      	movs	r2, #0
 8006e02:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	689b      	ldr	r3, [r3, #8]
 8006e10:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006e14:	431a      	orrs	r2, r3
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	691b      	ldr	r3, [r3, #16]
 8006e1a:	f003 0302 	and.w	r3, r3, #2
 8006e1e:	431a      	orrs	r2, r3
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	695b      	ldr	r3, [r3, #20]
 8006e24:	f003 0301 	and.w	r3, r3, #1
 8006e28:	431a      	orrs	r2, r3
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	699b      	ldr	r3, [r3, #24]
 8006e2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e32:	431a      	orrs	r2, r3
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	69db      	ldr	r3, [r3, #28]
 8006e38:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006e3c:	431a      	orrs	r2, r3
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6a1b      	ldr	r3, [r3, #32]
 8006e42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e46:	ea42 0103 	orr.w	r1, r2, r3
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e4e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	430a      	orrs	r2, r1
 8006e58:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	699b      	ldr	r3, [r3, #24]
 8006e5e:	0c1b      	lsrs	r3, r3, #16
 8006e60:	f003 0204 	and.w	r2, r3, #4
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e68:	f003 0310 	and.w	r3, r3, #16
 8006e6c:	431a      	orrs	r2, r3
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e72:	f003 0308 	and.w	r3, r3, #8
 8006e76:	431a      	orrs	r2, r3
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	68db      	ldr	r3, [r3, #12]
 8006e7c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006e80:	ea42 0103 	orr.w	r1, r2, r3
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	430a      	orrs	r2, r1
 8006e90:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2200      	movs	r2, #0
 8006e96:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006ea0:	2300      	movs	r3, #0
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3710      	adds	r7, #16
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}

08006eaa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006eaa:	b580      	push	{r7, lr}
 8006eac:	b088      	sub	sp, #32
 8006eae:	af00      	add	r7, sp, #0
 8006eb0:	60f8      	str	r0, [r7, #12]
 8006eb2:	60b9      	str	r1, [r7, #8]
 8006eb4:	603b      	str	r3, [r7, #0]
 8006eb6:	4613      	mov	r3, r2
 8006eb8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	d101      	bne.n	8006ecc <HAL_SPI_Transmit+0x22>
 8006ec8:	2302      	movs	r3, #2
 8006eca:	e158      	b.n	800717e <HAL_SPI_Transmit+0x2d4>
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	2201      	movs	r2, #1
 8006ed0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006ed4:	f7fc f840 	bl	8002f58 <HAL_GetTick>
 8006ed8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006eda:	88fb      	ldrh	r3, [r7, #6]
 8006edc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006ee4:	b2db      	uxtb	r3, r3
 8006ee6:	2b01      	cmp	r3, #1
 8006ee8:	d002      	beq.n	8006ef0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006eea:	2302      	movs	r3, #2
 8006eec:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006eee:	e13d      	b.n	800716c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d002      	beq.n	8006efc <HAL_SPI_Transmit+0x52>
 8006ef6:	88fb      	ldrh	r3, [r7, #6]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d102      	bne.n	8006f02 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006efc:	2301      	movs	r3, #1
 8006efe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006f00:	e134      	b.n	800716c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2203      	movs	r2, #3
 8006f06:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	68ba      	ldr	r2, [r7, #8]
 8006f14:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	88fa      	ldrh	r2, [r7, #6]
 8006f1a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	88fa      	ldrh	r2, [r7, #6]
 8006f20:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	2200      	movs	r2, #0
 8006f26:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	2200      	movs	r2, #0
 8006f34:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2200      	movs	r2, #0
 8006f42:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	689b      	ldr	r3, [r3, #8]
 8006f48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f4c:	d10f      	bne.n	8006f6e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	681a      	ldr	r2, [r3, #0]
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f5c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	681a      	ldr	r2, [r3, #0]
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006f6c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f78:	2b40      	cmp	r3, #64	; 0x40
 8006f7a:	d007      	beq.n	8006f8c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	681a      	ldr	r2, [r3, #0]
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f8a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	68db      	ldr	r3, [r3, #12]
 8006f90:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006f94:	d94b      	bls.n	800702e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d002      	beq.n	8006fa4 <HAL_SPI_Transmit+0xfa>
 8006f9e:	8afb      	ldrh	r3, [r7, #22]
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	d13e      	bne.n	8007022 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fa8:	881a      	ldrh	r2, [r3, #0]
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fb4:	1c9a      	adds	r2, r3, #2
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	3b01      	subs	r3, #1
 8006fc2:	b29a      	uxth	r2, r3
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006fc8:	e02b      	b.n	8007022 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	689b      	ldr	r3, [r3, #8]
 8006fd0:	f003 0302 	and.w	r3, r3, #2
 8006fd4:	2b02      	cmp	r3, #2
 8006fd6:	d112      	bne.n	8006ffe <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fdc:	881a      	ldrh	r2, [r3, #0]
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fe8:	1c9a      	adds	r2, r3, #2
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ff2:	b29b      	uxth	r3, r3
 8006ff4:	3b01      	subs	r3, #1
 8006ff6:	b29a      	uxth	r2, r3
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006ffc:	e011      	b.n	8007022 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ffe:	f7fb ffab 	bl	8002f58 <HAL_GetTick>
 8007002:	4602      	mov	r2, r0
 8007004:	69bb      	ldr	r3, [r7, #24]
 8007006:	1ad3      	subs	r3, r2, r3
 8007008:	683a      	ldr	r2, [r7, #0]
 800700a:	429a      	cmp	r2, r3
 800700c:	d803      	bhi.n	8007016 <HAL_SPI_Transmit+0x16c>
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007014:	d102      	bne.n	800701c <HAL_SPI_Transmit+0x172>
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d102      	bne.n	8007022 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800701c:	2303      	movs	r3, #3
 800701e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007020:	e0a4      	b.n	800716c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007026:	b29b      	uxth	r3, r3
 8007028:	2b00      	cmp	r3, #0
 800702a:	d1ce      	bne.n	8006fca <HAL_SPI_Transmit+0x120>
 800702c:	e07c      	b.n	8007128 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d002      	beq.n	800703c <HAL_SPI_Transmit+0x192>
 8007036:	8afb      	ldrh	r3, [r7, #22]
 8007038:	2b01      	cmp	r3, #1
 800703a:	d170      	bne.n	800711e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007040:	b29b      	uxth	r3, r3
 8007042:	2b01      	cmp	r3, #1
 8007044:	d912      	bls.n	800706c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800704a:	881a      	ldrh	r2, [r3, #0]
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007056:	1c9a      	adds	r2, r3, #2
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007060:	b29b      	uxth	r3, r3
 8007062:	3b02      	subs	r3, #2
 8007064:	b29a      	uxth	r2, r3
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	87da      	strh	r2, [r3, #62]	; 0x3e
 800706a:	e058      	b.n	800711e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	330c      	adds	r3, #12
 8007076:	7812      	ldrb	r2, [r2, #0]
 8007078:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800707e:	1c5a      	adds	r2, r3, #1
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007088:	b29b      	uxth	r3, r3
 800708a:	3b01      	subs	r3, #1
 800708c:	b29a      	uxth	r2, r3
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8007092:	e044      	b.n	800711e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	689b      	ldr	r3, [r3, #8]
 800709a:	f003 0302 	and.w	r3, r3, #2
 800709e:	2b02      	cmp	r3, #2
 80070a0:	d12b      	bne.n	80070fa <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070a6:	b29b      	uxth	r3, r3
 80070a8:	2b01      	cmp	r3, #1
 80070aa:	d912      	bls.n	80070d2 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070b0:	881a      	ldrh	r2, [r3, #0]
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070bc:	1c9a      	adds	r2, r3, #2
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070c6:	b29b      	uxth	r3, r3
 80070c8:	3b02      	subs	r3, #2
 80070ca:	b29a      	uxth	r2, r3
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	87da      	strh	r2, [r3, #62]	; 0x3e
 80070d0:	e025      	b.n	800711e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	330c      	adds	r3, #12
 80070dc:	7812      	ldrb	r2, [r2, #0]
 80070de:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070e4:	1c5a      	adds	r2, r3, #1
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070ee:	b29b      	uxth	r3, r3
 80070f0:	3b01      	subs	r3, #1
 80070f2:	b29a      	uxth	r2, r3
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80070f8:	e011      	b.n	800711e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80070fa:	f7fb ff2d 	bl	8002f58 <HAL_GetTick>
 80070fe:	4602      	mov	r2, r0
 8007100:	69bb      	ldr	r3, [r7, #24]
 8007102:	1ad3      	subs	r3, r2, r3
 8007104:	683a      	ldr	r2, [r7, #0]
 8007106:	429a      	cmp	r2, r3
 8007108:	d803      	bhi.n	8007112 <HAL_SPI_Transmit+0x268>
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007110:	d102      	bne.n	8007118 <HAL_SPI_Transmit+0x26e>
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d102      	bne.n	800711e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8007118:	2303      	movs	r3, #3
 800711a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800711c:	e026      	b.n	800716c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007122:	b29b      	uxth	r3, r3
 8007124:	2b00      	cmp	r3, #0
 8007126:	d1b5      	bne.n	8007094 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007128:	69ba      	ldr	r2, [r7, #24]
 800712a:	6839      	ldr	r1, [r7, #0]
 800712c:	68f8      	ldr	r0, [r7, #12]
 800712e:	f000 f949 	bl	80073c4 <SPI_EndRxTxTransaction>
 8007132:	4603      	mov	r3, r0
 8007134:	2b00      	cmp	r3, #0
 8007136:	d002      	beq.n	800713e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2220      	movs	r2, #32
 800713c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	689b      	ldr	r3, [r3, #8]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d10a      	bne.n	800715c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007146:	2300      	movs	r3, #0
 8007148:	613b      	str	r3, [r7, #16]
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	68db      	ldr	r3, [r3, #12]
 8007150:	613b      	str	r3, [r7, #16]
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	689b      	ldr	r3, [r3, #8]
 8007158:	613b      	str	r3, [r7, #16]
 800715a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007160:	2b00      	cmp	r3, #0
 8007162:	d002      	beq.n	800716a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8007164:	2301      	movs	r3, #1
 8007166:	77fb      	strb	r3, [r7, #31]
 8007168:	e000      	b.n	800716c <HAL_SPI_Transmit+0x2c2>
  }

error:
 800716a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	2201      	movs	r2, #1
 8007170:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	2200      	movs	r2, #0
 8007178:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800717c:	7ffb      	ldrb	r3, [r7, #31]
}
 800717e:	4618      	mov	r0, r3
 8007180:	3720      	adds	r7, #32
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}
	...

08007188 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b088      	sub	sp, #32
 800718c:	af00      	add	r7, sp, #0
 800718e:	60f8      	str	r0, [r7, #12]
 8007190:	60b9      	str	r1, [r7, #8]
 8007192:	603b      	str	r3, [r7, #0]
 8007194:	4613      	mov	r3, r2
 8007196:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007198:	f7fb fede 	bl	8002f58 <HAL_GetTick>
 800719c:	4602      	mov	r2, r0
 800719e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071a0:	1a9b      	subs	r3, r3, r2
 80071a2:	683a      	ldr	r2, [r7, #0]
 80071a4:	4413      	add	r3, r2
 80071a6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80071a8:	f7fb fed6 	bl	8002f58 <HAL_GetTick>
 80071ac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80071ae:	4b39      	ldr	r3, [pc, #228]	; (8007294 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	015b      	lsls	r3, r3, #5
 80071b4:	0d1b      	lsrs	r3, r3, #20
 80071b6:	69fa      	ldr	r2, [r7, #28]
 80071b8:	fb02 f303 	mul.w	r3, r2, r3
 80071bc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80071be:	e054      	b.n	800726a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80071c6:	d050      	beq.n	800726a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80071c8:	f7fb fec6 	bl	8002f58 <HAL_GetTick>
 80071cc:	4602      	mov	r2, r0
 80071ce:	69bb      	ldr	r3, [r7, #24]
 80071d0:	1ad3      	subs	r3, r2, r3
 80071d2:	69fa      	ldr	r2, [r7, #28]
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d902      	bls.n	80071de <SPI_WaitFlagStateUntilTimeout+0x56>
 80071d8:	69fb      	ldr	r3, [r7, #28]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d13d      	bne.n	800725a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	685a      	ldr	r2, [r3, #4]
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80071ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80071f6:	d111      	bne.n	800721c <SPI_WaitFlagStateUntilTimeout+0x94>
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	689b      	ldr	r3, [r3, #8]
 80071fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007200:	d004      	beq.n	800720c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	689b      	ldr	r3, [r3, #8]
 8007206:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800720a:	d107      	bne.n	800721c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	681a      	ldr	r2, [r3, #0]
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800721a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007220:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007224:	d10f      	bne.n	8007246 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	681a      	ldr	r2, [r3, #0]
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007234:	601a      	str	r2, [r3, #0]
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	681a      	ldr	r2, [r3, #0]
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007244:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2201      	movs	r2, #1
 800724a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2200      	movs	r2, #0
 8007252:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007256:	2303      	movs	r3, #3
 8007258:	e017      	b.n	800728a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d101      	bne.n	8007264 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007260:	2300      	movs	r3, #0
 8007262:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	3b01      	subs	r3, #1
 8007268:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	689a      	ldr	r2, [r3, #8]
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	4013      	ands	r3, r2
 8007274:	68ba      	ldr	r2, [r7, #8]
 8007276:	429a      	cmp	r2, r3
 8007278:	bf0c      	ite	eq
 800727a:	2301      	moveq	r3, #1
 800727c:	2300      	movne	r3, #0
 800727e:	b2db      	uxtb	r3, r3
 8007280:	461a      	mov	r2, r3
 8007282:	79fb      	ldrb	r3, [r7, #7]
 8007284:	429a      	cmp	r2, r3
 8007286:	d19b      	bne.n	80071c0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007288:	2300      	movs	r3, #0
}
 800728a:	4618      	mov	r0, r3
 800728c:	3720      	adds	r7, #32
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}
 8007292:	bf00      	nop
 8007294:	20000000 	.word	0x20000000

08007298 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b08a      	sub	sp, #40	; 0x28
 800729c:	af00      	add	r7, sp, #0
 800729e:	60f8      	str	r0, [r7, #12]
 80072a0:	60b9      	str	r1, [r7, #8]
 80072a2:	607a      	str	r2, [r7, #4]
 80072a4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80072a6:	2300      	movs	r3, #0
 80072a8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80072aa:	f7fb fe55 	bl	8002f58 <HAL_GetTick>
 80072ae:	4602      	mov	r2, r0
 80072b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072b2:	1a9b      	subs	r3, r3, r2
 80072b4:	683a      	ldr	r2, [r7, #0]
 80072b6:	4413      	add	r3, r2
 80072b8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80072ba:	f7fb fe4d 	bl	8002f58 <HAL_GetTick>
 80072be:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	330c      	adds	r3, #12
 80072c6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80072c8:	4b3d      	ldr	r3, [pc, #244]	; (80073c0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80072ca:	681a      	ldr	r2, [r3, #0]
 80072cc:	4613      	mov	r3, r2
 80072ce:	009b      	lsls	r3, r3, #2
 80072d0:	4413      	add	r3, r2
 80072d2:	00da      	lsls	r2, r3, #3
 80072d4:	1ad3      	subs	r3, r2, r3
 80072d6:	0d1b      	lsrs	r3, r3, #20
 80072d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072da:	fb02 f303 	mul.w	r3, r2, r3
 80072de:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80072e0:	e060      	b.n	80073a4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80072e8:	d107      	bne.n	80072fa <SPI_WaitFifoStateUntilTimeout+0x62>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d104      	bne.n	80072fa <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80072f0:	69fb      	ldr	r3, [r7, #28]
 80072f2:	781b      	ldrb	r3, [r3, #0]
 80072f4:	b2db      	uxtb	r3, r3
 80072f6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80072f8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007300:	d050      	beq.n	80073a4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007302:	f7fb fe29 	bl	8002f58 <HAL_GetTick>
 8007306:	4602      	mov	r2, r0
 8007308:	6a3b      	ldr	r3, [r7, #32]
 800730a:	1ad3      	subs	r3, r2, r3
 800730c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800730e:	429a      	cmp	r2, r3
 8007310:	d902      	bls.n	8007318 <SPI_WaitFifoStateUntilTimeout+0x80>
 8007312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007314:	2b00      	cmp	r3, #0
 8007316:	d13d      	bne.n	8007394 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	685a      	ldr	r2, [r3, #4]
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007326:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	685b      	ldr	r3, [r3, #4]
 800732c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007330:	d111      	bne.n	8007356 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	689b      	ldr	r3, [r3, #8]
 8007336:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800733a:	d004      	beq.n	8007346 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	689b      	ldr	r3, [r3, #8]
 8007340:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007344:	d107      	bne.n	8007356 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	681a      	ldr	r2, [r3, #0]
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007354:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800735a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800735e:	d10f      	bne.n	8007380 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	681a      	ldr	r2, [r3, #0]
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800736e:	601a      	str	r2, [r3, #0]
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	681a      	ldr	r2, [r3, #0]
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800737e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	2201      	movs	r2, #1
 8007384:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	2200      	movs	r2, #0
 800738c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007390:	2303      	movs	r3, #3
 8007392:	e010      	b.n	80073b6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007394:	69bb      	ldr	r3, [r7, #24]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d101      	bne.n	800739e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800739a:	2300      	movs	r3, #0
 800739c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800739e:	69bb      	ldr	r3, [r7, #24]
 80073a0:	3b01      	subs	r3, #1
 80073a2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	689a      	ldr	r2, [r3, #8]
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	4013      	ands	r3, r2
 80073ae:	687a      	ldr	r2, [r7, #4]
 80073b0:	429a      	cmp	r2, r3
 80073b2:	d196      	bne.n	80072e2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80073b4:	2300      	movs	r3, #0
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3728      	adds	r7, #40	; 0x28
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}
 80073be:	bf00      	nop
 80073c0:	20000000 	.word	0x20000000

080073c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b086      	sub	sp, #24
 80073c8:	af02      	add	r7, sp, #8
 80073ca:	60f8      	str	r0, [r7, #12]
 80073cc:	60b9      	str	r1, [r7, #8]
 80073ce:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	9300      	str	r3, [sp, #0]
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	2200      	movs	r2, #0
 80073d8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80073dc:	68f8      	ldr	r0, [r7, #12]
 80073de:	f7ff ff5b 	bl	8007298 <SPI_WaitFifoStateUntilTimeout>
 80073e2:	4603      	mov	r3, r0
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d007      	beq.n	80073f8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073ec:	f043 0220 	orr.w	r2, r3, #32
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80073f4:	2303      	movs	r3, #3
 80073f6:	e027      	b.n	8007448 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	9300      	str	r3, [sp, #0]
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	2200      	movs	r2, #0
 8007400:	2180      	movs	r1, #128	; 0x80
 8007402:	68f8      	ldr	r0, [r7, #12]
 8007404:	f7ff fec0 	bl	8007188 <SPI_WaitFlagStateUntilTimeout>
 8007408:	4603      	mov	r3, r0
 800740a:	2b00      	cmp	r3, #0
 800740c:	d007      	beq.n	800741e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007412:	f043 0220 	orr.w	r2, r3, #32
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800741a:	2303      	movs	r3, #3
 800741c:	e014      	b.n	8007448 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	9300      	str	r3, [sp, #0]
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	2200      	movs	r2, #0
 8007426:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800742a:	68f8      	ldr	r0, [r7, #12]
 800742c:	f7ff ff34 	bl	8007298 <SPI_WaitFifoStateUntilTimeout>
 8007430:	4603      	mov	r3, r0
 8007432:	2b00      	cmp	r3, #0
 8007434:	d007      	beq.n	8007446 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800743a:	f043 0220 	orr.w	r2, r3, #32
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007442:	2303      	movs	r3, #3
 8007444:	e000      	b.n	8007448 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007446:	2300      	movs	r3, #0
}
 8007448:	4618      	mov	r0, r3
 800744a:	3710      	adds	r7, #16
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}

08007450 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b082      	sub	sp, #8
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d101      	bne.n	8007462 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800745e:	2301      	movs	r3, #1
 8007460:	e040      	b.n	80074e4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007466:	2b00      	cmp	r3, #0
 8007468:	d106      	bne.n	8007478 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2200      	movs	r2, #0
 800746e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f7fb fc32 	bl	8002cdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2224      	movs	r2, #36	; 0x24
 800747c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	681a      	ldr	r2, [r3, #0]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f022 0201 	bic.w	r2, r2, #1
 800748c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f000 fc22 	bl	8007cd8 <UART_SetConfig>
 8007494:	4603      	mov	r3, r0
 8007496:	2b01      	cmp	r3, #1
 8007498:	d101      	bne.n	800749e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800749a:	2301      	movs	r3, #1
 800749c:	e022      	b.n	80074e4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d002      	beq.n	80074ac <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f000 fece 	bl	8008248 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	685a      	ldr	r2, [r3, #4]
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80074ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	689a      	ldr	r2, [r3, #8]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80074ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	681a      	ldr	r2, [r3, #0]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f042 0201 	orr.w	r2, r2, #1
 80074da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f000 ff55 	bl	800838c <UART_CheckIdleState>
 80074e2:	4603      	mov	r3, r0
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	3708      	adds	r7, #8
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd80      	pop	{r7, pc}

080074ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b08a      	sub	sp, #40	; 0x28
 80074f0:	af02      	add	r7, sp, #8
 80074f2:	60f8      	str	r0, [r7, #12]
 80074f4:	60b9      	str	r1, [r7, #8]
 80074f6:	603b      	str	r3, [r7, #0]
 80074f8:	4613      	mov	r3, r2
 80074fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007500:	2b20      	cmp	r3, #32
 8007502:	f040 8082 	bne.w	800760a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d002      	beq.n	8007512 <HAL_UART_Transmit+0x26>
 800750c:	88fb      	ldrh	r3, [r7, #6]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d101      	bne.n	8007516 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007512:	2301      	movs	r3, #1
 8007514:	e07a      	b.n	800760c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800751c:	2b01      	cmp	r3, #1
 800751e:	d101      	bne.n	8007524 <HAL_UART_Transmit+0x38>
 8007520:	2302      	movs	r3, #2
 8007522:	e073      	b.n	800760c <HAL_UART_Transmit+0x120>
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	2201      	movs	r2, #1
 8007528:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	2200      	movs	r2, #0
 8007530:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2221      	movs	r2, #33	; 0x21
 8007538:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800753a:	f7fb fd0d 	bl	8002f58 <HAL_GetTick>
 800753e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	88fa      	ldrh	r2, [r7, #6]
 8007544:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	88fa      	ldrh	r2, [r7, #6]
 800754c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	689b      	ldr	r3, [r3, #8]
 8007554:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007558:	d108      	bne.n	800756c <HAL_UART_Transmit+0x80>
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	691b      	ldr	r3, [r3, #16]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d104      	bne.n	800756c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8007562:	2300      	movs	r3, #0
 8007564:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	61bb      	str	r3, [r7, #24]
 800756a:	e003      	b.n	8007574 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007570:	2300      	movs	r3, #0
 8007572:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2200      	movs	r2, #0
 8007578:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800757c:	e02d      	b.n	80075da <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	9300      	str	r3, [sp, #0]
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	2200      	movs	r2, #0
 8007586:	2180      	movs	r1, #128	; 0x80
 8007588:	68f8      	ldr	r0, [r7, #12]
 800758a:	f000 ff48 	bl	800841e <UART_WaitOnFlagUntilTimeout>
 800758e:	4603      	mov	r3, r0
 8007590:	2b00      	cmp	r3, #0
 8007592:	d001      	beq.n	8007598 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8007594:	2303      	movs	r3, #3
 8007596:	e039      	b.n	800760c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8007598:	69fb      	ldr	r3, [r7, #28]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d10b      	bne.n	80075b6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800759e:	69bb      	ldr	r3, [r7, #24]
 80075a0:	881a      	ldrh	r2, [r3, #0]
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80075aa:	b292      	uxth	r2, r2
 80075ac:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80075ae:	69bb      	ldr	r3, [r7, #24]
 80075b0:	3302      	adds	r3, #2
 80075b2:	61bb      	str	r3, [r7, #24]
 80075b4:	e008      	b.n	80075c8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80075b6:	69fb      	ldr	r3, [r7, #28]
 80075b8:	781a      	ldrb	r2, [r3, #0]
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	b292      	uxth	r2, r2
 80075c0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80075c2:	69fb      	ldr	r3, [r7, #28]
 80075c4:	3301      	adds	r3, #1
 80075c6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80075ce:	b29b      	uxth	r3, r3
 80075d0:	3b01      	subs	r3, #1
 80075d2:	b29a      	uxth	r2, r3
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80075e0:	b29b      	uxth	r3, r3
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d1cb      	bne.n	800757e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	9300      	str	r3, [sp, #0]
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	2200      	movs	r2, #0
 80075ee:	2140      	movs	r1, #64	; 0x40
 80075f0:	68f8      	ldr	r0, [r7, #12]
 80075f2:	f000 ff14 	bl	800841e <UART_WaitOnFlagUntilTimeout>
 80075f6:	4603      	mov	r3, r0
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d001      	beq.n	8007600 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80075fc:	2303      	movs	r3, #3
 80075fe:	e005      	b.n	800760c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	2220      	movs	r2, #32
 8007604:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8007606:	2300      	movs	r3, #0
 8007608:	e000      	b.n	800760c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800760a:	2302      	movs	r3, #2
  }
}
 800760c:	4618      	mov	r0, r3
 800760e:	3720      	adds	r7, #32
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}

08007614 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b08a      	sub	sp, #40	; 0x28
 8007618:	af00      	add	r7, sp, #0
 800761a:	60f8      	str	r0, [r7, #12]
 800761c:	60b9      	str	r1, [r7, #8]
 800761e:	4613      	mov	r3, r2
 8007620:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007626:	2b20      	cmp	r3, #32
 8007628:	d142      	bne.n	80076b0 <HAL_UART_Receive_DMA+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d002      	beq.n	8007636 <HAL_UART_Receive_DMA+0x22>
 8007630:	88fb      	ldrh	r3, [r7, #6]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d101      	bne.n	800763a <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8007636:	2301      	movs	r3, #1
 8007638:	e03b      	b.n	80076b2 <HAL_UART_Receive_DMA+0x9e>
    }

    __HAL_LOCK(huart);
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007640:	2b01      	cmp	r3, #1
 8007642:	d101      	bne.n	8007648 <HAL_UART_Receive_DMA+0x34>
 8007644:	2302      	movs	r3, #2
 8007646:	e034      	b.n	80076b2 <HAL_UART_Receive_DMA+0x9e>
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	2201      	movs	r2, #1
 800764c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2200      	movs	r2, #0
 8007654:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a18      	ldr	r2, [pc, #96]	; (80076bc <HAL_UART_Receive_DMA+0xa8>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d01f      	beq.n	80076a0 <HAL_UART_Receive_DMA+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800766a:	2b00      	cmp	r3, #0
 800766c:	d018      	beq.n	80076a0 <HAL_UART_Receive_DMA+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007674:	697b      	ldr	r3, [r7, #20]
 8007676:	e853 3f00 	ldrex	r3, [r3]
 800767a:	613b      	str	r3, [r7, #16]
   return(result);
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007682:	627b      	str	r3, [r7, #36]	; 0x24
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	461a      	mov	r2, r3
 800768a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800768c:	623b      	str	r3, [r7, #32]
 800768e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007690:	69f9      	ldr	r1, [r7, #28]
 8007692:	6a3a      	ldr	r2, [r7, #32]
 8007694:	e841 2300 	strex	r3, r2, [r1]
 8007698:	61bb      	str	r3, [r7, #24]
   return(result);
 800769a:	69bb      	ldr	r3, [r7, #24]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d1e6      	bne.n	800766e <HAL_UART_Receive_DMA+0x5a>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80076a0:	88fb      	ldrh	r3, [r7, #6]
 80076a2:	461a      	mov	r2, r3
 80076a4:	68b9      	ldr	r1, [r7, #8]
 80076a6:	68f8      	ldr	r0, [r7, #12]
 80076a8:	f000 ff7e 	bl	80085a8 <UART_Start_Receive_DMA>
 80076ac:	4603      	mov	r3, r0
 80076ae:	e000      	b.n	80076b2 <HAL_UART_Receive_DMA+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80076b0:	2302      	movs	r3, #2
  }
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3728      	adds	r7, #40	; 0x28
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}
 80076ba:	bf00      	nop
 80076bc:	40008000 	.word	0x40008000

080076c0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b0ba      	sub	sp, #232	; 0xe8
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	69db      	ldr	r3, [r3, #28]
 80076ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	689b      	ldr	r3, [r3, #8]
 80076e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80076e6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80076ea:	f640 030f 	movw	r3, #2063	; 0x80f
 80076ee:	4013      	ands	r3, r2
 80076f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80076f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d115      	bne.n	8007728 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80076fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007700:	f003 0320 	and.w	r3, r3, #32
 8007704:	2b00      	cmp	r3, #0
 8007706:	d00f      	beq.n	8007728 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007708:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800770c:	f003 0320 	and.w	r3, r3, #32
 8007710:	2b00      	cmp	r3, #0
 8007712:	d009      	beq.n	8007728 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007718:	2b00      	cmp	r3, #0
 800771a:	f000 82a6 	beq.w	8007c6a <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	4798      	blx	r3
      }
      return;
 8007726:	e2a0      	b.n	8007c6a <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8007728:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800772c:	2b00      	cmp	r3, #0
 800772e:	f000 8117 	beq.w	8007960 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007732:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007736:	f003 0301 	and.w	r3, r3, #1
 800773a:	2b00      	cmp	r3, #0
 800773c:	d106      	bne.n	800774c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800773e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007742:	4b85      	ldr	r3, [pc, #532]	; (8007958 <HAL_UART_IRQHandler+0x298>)
 8007744:	4013      	ands	r3, r2
 8007746:	2b00      	cmp	r3, #0
 8007748:	f000 810a 	beq.w	8007960 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800774c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007750:	f003 0301 	and.w	r3, r3, #1
 8007754:	2b00      	cmp	r3, #0
 8007756:	d011      	beq.n	800777c <HAL_UART_IRQHandler+0xbc>
 8007758:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800775c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007760:	2b00      	cmp	r3, #0
 8007762:	d00b      	beq.n	800777c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	2201      	movs	r2, #1
 800776a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007772:	f043 0201 	orr.w	r2, r3, #1
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800777c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007780:	f003 0302 	and.w	r3, r3, #2
 8007784:	2b00      	cmp	r3, #0
 8007786:	d011      	beq.n	80077ac <HAL_UART_IRQHandler+0xec>
 8007788:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800778c:	f003 0301 	and.w	r3, r3, #1
 8007790:	2b00      	cmp	r3, #0
 8007792:	d00b      	beq.n	80077ac <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	2202      	movs	r2, #2
 800779a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80077a2:	f043 0204 	orr.w	r2, r3, #4
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80077ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077b0:	f003 0304 	and.w	r3, r3, #4
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d011      	beq.n	80077dc <HAL_UART_IRQHandler+0x11c>
 80077b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077bc:	f003 0301 	and.w	r3, r3, #1
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d00b      	beq.n	80077dc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	2204      	movs	r2, #4
 80077ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80077d2:	f043 0202 	orr.w	r2, r3, #2
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80077dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077e0:	f003 0308 	and.w	r3, r3, #8
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d017      	beq.n	8007818 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80077e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077ec:	f003 0320 	and.w	r3, r3, #32
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d105      	bne.n	8007800 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80077f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077f8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d00b      	beq.n	8007818 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	2208      	movs	r2, #8
 8007806:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800780e:	f043 0208 	orr.w	r2, r3, #8
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007818:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800781c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007820:	2b00      	cmp	r3, #0
 8007822:	d012      	beq.n	800784a <HAL_UART_IRQHandler+0x18a>
 8007824:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007828:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800782c:	2b00      	cmp	r3, #0
 800782e:	d00c      	beq.n	800784a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007838:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007840:	f043 0220 	orr.w	r2, r3, #32
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007850:	2b00      	cmp	r3, #0
 8007852:	f000 820c 	beq.w	8007c6e <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007856:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800785a:	f003 0320 	and.w	r3, r3, #32
 800785e:	2b00      	cmp	r3, #0
 8007860:	d00d      	beq.n	800787e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007862:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007866:	f003 0320 	and.w	r3, r3, #32
 800786a:	2b00      	cmp	r3, #0
 800786c:	d007      	beq.n	800787e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007872:	2b00      	cmp	r3, #0
 8007874:	d003      	beq.n	800787e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007884:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	689b      	ldr	r3, [r3, #8]
 800788e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007892:	2b40      	cmp	r3, #64	; 0x40
 8007894:	d005      	beq.n	80078a2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007896:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800789a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d04f      	beq.n	8007942 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 ff4c 	bl	8008740 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	689b      	ldr	r3, [r3, #8]
 80078ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078b2:	2b40      	cmp	r3, #64	; 0x40
 80078b4:	d141      	bne.n	800793a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	3308      	adds	r3, #8
 80078bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80078c4:	e853 3f00 	ldrex	r3, [r3]
 80078c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80078cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80078d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	3308      	adds	r3, #8
 80078de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80078e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80078e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80078ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80078f2:	e841 2300 	strex	r3, r2, [r1]
 80078f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80078fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d1d9      	bne.n	80078b6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007906:	2b00      	cmp	r3, #0
 8007908:	d013      	beq.n	8007932 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800790e:	4a13      	ldr	r2, [pc, #76]	; (800795c <HAL_UART_IRQHandler+0x29c>)
 8007910:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007916:	4618      	mov	r0, r3
 8007918:	f7fb fdb6 	bl	8003488 <HAL_DMA_Abort_IT>
 800791c:	4603      	mov	r3, r0
 800791e:	2b00      	cmp	r3, #0
 8007920:	d017      	beq.n	8007952 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007928:	687a      	ldr	r2, [r7, #4]
 800792a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800792c:	4610      	mov	r0, r2
 800792e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007930:	e00f      	b.n	8007952 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f000 f9ba 	bl	8007cac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007938:	e00b      	b.n	8007952 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f000 f9b6 	bl	8007cac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007940:	e007      	b.n	8007952 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f000 f9b2 	bl	8007cac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2200      	movs	r2, #0
 800794c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8007950:	e18d      	b.n	8007c6e <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007952:	bf00      	nop
    return;
 8007954:	e18b      	b.n	8007c6e <HAL_UART_IRQHandler+0x5ae>
 8007956:	bf00      	nop
 8007958:	04000120 	.word	0x04000120
 800795c:	080089df 	.word	0x080089df

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007964:	2b01      	cmp	r3, #1
 8007966:	f040 8146 	bne.w	8007bf6 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800796a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800796e:	f003 0310 	and.w	r3, r3, #16
 8007972:	2b00      	cmp	r3, #0
 8007974:	f000 813f 	beq.w	8007bf6 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007978:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800797c:	f003 0310 	and.w	r3, r3, #16
 8007980:	2b00      	cmp	r3, #0
 8007982:	f000 8138 	beq.w	8007bf6 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	2210      	movs	r2, #16
 800798c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	689b      	ldr	r3, [r3, #8]
 8007994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007998:	2b40      	cmp	r3, #64	; 0x40
 800799a:	f040 80b4 	bne.w	8007b06 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	685b      	ldr	r3, [r3, #4]
 80079a6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80079aa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	f000 815f 	beq.w	8007c72 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80079ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80079be:	429a      	cmp	r2, r3
 80079c0:	f080 8157 	bcs.w	8007c72 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80079ca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f003 0320 	and.w	r3, r3, #32
 80079da:	2b00      	cmp	r3, #0
 80079dc:	f040 8085 	bne.w	8007aea <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80079ec:	e853 3f00 	ldrex	r3, [r3]
 80079f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80079f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80079f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80079fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	461a      	mov	r2, r3
 8007a06:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007a0a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007a0e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a12:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007a16:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007a1a:	e841 2300 	strex	r3, r2, [r1]
 8007a1e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007a22:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d1da      	bne.n	80079e0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	3308      	adds	r3, #8
 8007a30:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a34:	e853 3f00 	ldrex	r3, [r3]
 8007a38:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007a3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007a3c:	f023 0301 	bic.w	r3, r3, #1
 8007a40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	3308      	adds	r3, #8
 8007a4a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007a4e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007a52:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a54:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007a56:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007a5a:	e841 2300 	strex	r3, r2, [r1]
 8007a5e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007a60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d1e1      	bne.n	8007a2a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	3308      	adds	r3, #8
 8007a6c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007a70:	e853 3f00 	ldrex	r3, [r3]
 8007a74:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007a76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	3308      	adds	r3, #8
 8007a86:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007a8a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007a8c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a8e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007a90:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007a92:	e841 2300 	strex	r3, r2, [r1]
 8007a96:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007a98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d1e3      	bne.n	8007a66 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2220      	movs	r2, #32
 8007aa2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ab0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ab2:	e853 3f00 	ldrex	r3, [r3]
 8007ab6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007ab8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007aba:	f023 0310 	bic.w	r3, r3, #16
 8007abe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	461a      	mov	r2, r3
 8007ac8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007acc:	65bb      	str	r3, [r7, #88]	; 0x58
 8007ace:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ad0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007ad2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007ad4:	e841 2300 	strex	r3, r2, [r1]
 8007ad8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007ada:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d1e4      	bne.n	8007aaa <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	f7fb fc91 	bl	800340c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007af6:	b29b      	uxth	r3, r3
 8007af8:	1ad3      	subs	r3, r2, r3
 8007afa:	b29b      	uxth	r3, r3
 8007afc:	4619      	mov	r1, r3
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f000 f8de 	bl	8007cc0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007b04:	e0b5      	b.n	8007c72 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007b12:	b29b      	uxth	r3, r3
 8007b14:	1ad3      	subs	r3, r2, r3
 8007b16:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007b20:	b29b      	uxth	r3, r3
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	f000 80a7 	beq.w	8007c76 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8007b28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	f000 80a2 	beq.w	8007c76 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b3a:	e853 3f00 	ldrex	r3, [r3]
 8007b3e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007b40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b42:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007b46:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	461a      	mov	r2, r3
 8007b50:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007b54:	647b      	str	r3, [r7, #68]	; 0x44
 8007b56:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b58:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007b5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b5c:	e841 2300 	strex	r3, r2, [r1]
 8007b60:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007b62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d1e4      	bne.n	8007b32 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	3308      	adds	r3, #8
 8007b6e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b72:	e853 3f00 	ldrex	r3, [r3]
 8007b76:	623b      	str	r3, [r7, #32]
   return(result);
 8007b78:	6a3b      	ldr	r3, [r7, #32]
 8007b7a:	f023 0301 	bic.w	r3, r3, #1
 8007b7e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	3308      	adds	r3, #8
 8007b88:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007b8c:	633a      	str	r2, [r7, #48]	; 0x30
 8007b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b90:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b94:	e841 2300 	strex	r3, r2, [r1]
 8007b98:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d1e3      	bne.n	8007b68 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2220      	movs	r2, #32
 8007ba4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2200      	movs	r2, #0
 8007bb0:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bb8:	693b      	ldr	r3, [r7, #16]
 8007bba:	e853 3f00 	ldrex	r3, [r3]
 8007bbe:	60fb      	str	r3, [r7, #12]
   return(result);
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	f023 0310 	bic.w	r3, r3, #16
 8007bc6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	461a      	mov	r2, r3
 8007bd0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007bd4:	61fb      	str	r3, [r7, #28]
 8007bd6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bd8:	69b9      	ldr	r1, [r7, #24]
 8007bda:	69fa      	ldr	r2, [r7, #28]
 8007bdc:	e841 2300 	strex	r3, r2, [r1]
 8007be0:	617b      	str	r3, [r7, #20]
   return(result);
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d1e4      	bne.n	8007bb2 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007be8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007bec:	4619      	mov	r1, r3
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f000 f866 	bl	8007cc0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007bf4:	e03f      	b.n	8007c76 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007bf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d00e      	beq.n	8007c20 <HAL_UART_IRQHandler+0x560>
 8007c02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d008      	beq.n	8007c20 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007c16:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f000 ff20 	bl	8008a5e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007c1e:	e02d      	b.n	8007c7c <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007c20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d00e      	beq.n	8007c4a <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007c2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d008      	beq.n	8007c4a <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d01c      	beq.n	8007c7a <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	4798      	blx	r3
    }
    return;
 8007c48:	e017      	b.n	8007c7a <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007c4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d012      	beq.n	8007c7c <HAL_UART_IRQHandler+0x5bc>
 8007c56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d00c      	beq.n	8007c7c <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f000 fed1 	bl	8008a0a <UART_EndTransmit_IT>
    return;
 8007c68:	e008      	b.n	8007c7c <HAL_UART_IRQHandler+0x5bc>
      return;
 8007c6a:	bf00      	nop
 8007c6c:	e006      	b.n	8007c7c <HAL_UART_IRQHandler+0x5bc>
    return;
 8007c6e:	bf00      	nop
 8007c70:	e004      	b.n	8007c7c <HAL_UART_IRQHandler+0x5bc>
      return;
 8007c72:	bf00      	nop
 8007c74:	e002      	b.n	8007c7c <HAL_UART_IRQHandler+0x5bc>
      return;
 8007c76:	bf00      	nop
 8007c78:	e000      	b.n	8007c7c <HAL_UART_IRQHandler+0x5bc>
    return;
 8007c7a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8007c7c:	37e8      	adds	r7, #232	; 0xe8
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}
 8007c82:	bf00      	nop

08007c84 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b083      	sub	sp, #12
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007c8c:	bf00      	nop
 8007c8e:	370c      	adds	r7, #12
 8007c90:	46bd      	mov	sp, r7
 8007c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c96:	4770      	bx	lr

08007c98 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b083      	sub	sp, #12
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007ca0:	bf00      	nop
 8007ca2:	370c      	adds	r7, #12
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007caa:	4770      	bx	lr

08007cac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007cac:	b480      	push	{r7}
 8007cae:	b083      	sub	sp, #12
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007cb4:	bf00      	nop
 8007cb6:	370c      	adds	r7, #12
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbe:	4770      	bx	lr

08007cc0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b083      	sub	sp, #12
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
 8007cc8:	460b      	mov	r3, r1
 8007cca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007ccc:	bf00      	nop
 8007cce:	370c      	adds	r7, #12
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd6:	4770      	bx	lr

08007cd8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007cd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007cdc:	b08a      	sub	sp, #40	; 0x28
 8007cde:	af00      	add	r7, sp, #0
 8007ce0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	689a      	ldr	r2, [r3, #8]
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	691b      	ldr	r3, [r3, #16]
 8007cf0:	431a      	orrs	r2, r3
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	695b      	ldr	r3, [r3, #20]
 8007cf6:	431a      	orrs	r2, r3
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	69db      	ldr	r3, [r3, #28]
 8007cfc:	4313      	orrs	r3, r2
 8007cfe:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	681a      	ldr	r2, [r3, #0]
 8007d06:	4ba4      	ldr	r3, [pc, #656]	; (8007f98 <UART_SetConfig+0x2c0>)
 8007d08:	4013      	ands	r3, r2
 8007d0a:	68fa      	ldr	r2, [r7, #12]
 8007d0c:	6812      	ldr	r2, [r2, #0]
 8007d0e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007d10:	430b      	orrs	r3, r1
 8007d12:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	685b      	ldr	r3, [r3, #4]
 8007d1a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	68da      	ldr	r2, [r3, #12]
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	430a      	orrs	r2, r1
 8007d28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	699b      	ldr	r3, [r3, #24]
 8007d2e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4a99      	ldr	r2, [pc, #612]	; (8007f9c <UART_SetConfig+0x2c4>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d004      	beq.n	8007d44 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	6a1b      	ldr	r3, [r3, #32]
 8007d3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d40:	4313      	orrs	r3, r2
 8007d42:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	689b      	ldr	r3, [r3, #8]
 8007d4a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d54:	430a      	orrs	r2, r1
 8007d56:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4a90      	ldr	r2, [pc, #576]	; (8007fa0 <UART_SetConfig+0x2c8>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d126      	bne.n	8007db0 <UART_SetConfig+0xd8>
 8007d62:	4b90      	ldr	r3, [pc, #576]	; (8007fa4 <UART_SetConfig+0x2cc>)
 8007d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d68:	f003 0303 	and.w	r3, r3, #3
 8007d6c:	2b03      	cmp	r3, #3
 8007d6e:	d81b      	bhi.n	8007da8 <UART_SetConfig+0xd0>
 8007d70:	a201      	add	r2, pc, #4	; (adr r2, 8007d78 <UART_SetConfig+0xa0>)
 8007d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d76:	bf00      	nop
 8007d78:	08007d89 	.word	0x08007d89
 8007d7c:	08007d99 	.word	0x08007d99
 8007d80:	08007d91 	.word	0x08007d91
 8007d84:	08007da1 	.word	0x08007da1
 8007d88:	2301      	movs	r3, #1
 8007d8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d8e:	e116      	b.n	8007fbe <UART_SetConfig+0x2e6>
 8007d90:	2302      	movs	r3, #2
 8007d92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d96:	e112      	b.n	8007fbe <UART_SetConfig+0x2e6>
 8007d98:	2304      	movs	r3, #4
 8007d9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d9e:	e10e      	b.n	8007fbe <UART_SetConfig+0x2e6>
 8007da0:	2308      	movs	r3, #8
 8007da2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007da6:	e10a      	b.n	8007fbe <UART_SetConfig+0x2e6>
 8007da8:	2310      	movs	r3, #16
 8007daa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007dae:	e106      	b.n	8007fbe <UART_SetConfig+0x2e6>
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4a7c      	ldr	r2, [pc, #496]	; (8007fa8 <UART_SetConfig+0x2d0>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d138      	bne.n	8007e2c <UART_SetConfig+0x154>
 8007dba:	4b7a      	ldr	r3, [pc, #488]	; (8007fa4 <UART_SetConfig+0x2cc>)
 8007dbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dc0:	f003 030c 	and.w	r3, r3, #12
 8007dc4:	2b0c      	cmp	r3, #12
 8007dc6:	d82d      	bhi.n	8007e24 <UART_SetConfig+0x14c>
 8007dc8:	a201      	add	r2, pc, #4	; (adr r2, 8007dd0 <UART_SetConfig+0xf8>)
 8007dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dce:	bf00      	nop
 8007dd0:	08007e05 	.word	0x08007e05
 8007dd4:	08007e25 	.word	0x08007e25
 8007dd8:	08007e25 	.word	0x08007e25
 8007ddc:	08007e25 	.word	0x08007e25
 8007de0:	08007e15 	.word	0x08007e15
 8007de4:	08007e25 	.word	0x08007e25
 8007de8:	08007e25 	.word	0x08007e25
 8007dec:	08007e25 	.word	0x08007e25
 8007df0:	08007e0d 	.word	0x08007e0d
 8007df4:	08007e25 	.word	0x08007e25
 8007df8:	08007e25 	.word	0x08007e25
 8007dfc:	08007e25 	.word	0x08007e25
 8007e00:	08007e1d 	.word	0x08007e1d
 8007e04:	2300      	movs	r3, #0
 8007e06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e0a:	e0d8      	b.n	8007fbe <UART_SetConfig+0x2e6>
 8007e0c:	2302      	movs	r3, #2
 8007e0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e12:	e0d4      	b.n	8007fbe <UART_SetConfig+0x2e6>
 8007e14:	2304      	movs	r3, #4
 8007e16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e1a:	e0d0      	b.n	8007fbe <UART_SetConfig+0x2e6>
 8007e1c:	2308      	movs	r3, #8
 8007e1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e22:	e0cc      	b.n	8007fbe <UART_SetConfig+0x2e6>
 8007e24:	2310      	movs	r3, #16
 8007e26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e2a:	e0c8      	b.n	8007fbe <UART_SetConfig+0x2e6>
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	4a5e      	ldr	r2, [pc, #376]	; (8007fac <UART_SetConfig+0x2d4>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d125      	bne.n	8007e82 <UART_SetConfig+0x1aa>
 8007e36:	4b5b      	ldr	r3, [pc, #364]	; (8007fa4 <UART_SetConfig+0x2cc>)
 8007e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e3c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007e40:	2b30      	cmp	r3, #48	; 0x30
 8007e42:	d016      	beq.n	8007e72 <UART_SetConfig+0x19a>
 8007e44:	2b30      	cmp	r3, #48	; 0x30
 8007e46:	d818      	bhi.n	8007e7a <UART_SetConfig+0x1a2>
 8007e48:	2b20      	cmp	r3, #32
 8007e4a:	d00a      	beq.n	8007e62 <UART_SetConfig+0x18a>
 8007e4c:	2b20      	cmp	r3, #32
 8007e4e:	d814      	bhi.n	8007e7a <UART_SetConfig+0x1a2>
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d002      	beq.n	8007e5a <UART_SetConfig+0x182>
 8007e54:	2b10      	cmp	r3, #16
 8007e56:	d008      	beq.n	8007e6a <UART_SetConfig+0x192>
 8007e58:	e00f      	b.n	8007e7a <UART_SetConfig+0x1a2>
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e60:	e0ad      	b.n	8007fbe <UART_SetConfig+0x2e6>
 8007e62:	2302      	movs	r3, #2
 8007e64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e68:	e0a9      	b.n	8007fbe <UART_SetConfig+0x2e6>
 8007e6a:	2304      	movs	r3, #4
 8007e6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e70:	e0a5      	b.n	8007fbe <UART_SetConfig+0x2e6>
 8007e72:	2308      	movs	r3, #8
 8007e74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e78:	e0a1      	b.n	8007fbe <UART_SetConfig+0x2e6>
 8007e7a:	2310      	movs	r3, #16
 8007e7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e80:	e09d      	b.n	8007fbe <UART_SetConfig+0x2e6>
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4a4a      	ldr	r2, [pc, #296]	; (8007fb0 <UART_SetConfig+0x2d8>)
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d125      	bne.n	8007ed8 <UART_SetConfig+0x200>
 8007e8c:	4b45      	ldr	r3, [pc, #276]	; (8007fa4 <UART_SetConfig+0x2cc>)
 8007e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e92:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007e96:	2bc0      	cmp	r3, #192	; 0xc0
 8007e98:	d016      	beq.n	8007ec8 <UART_SetConfig+0x1f0>
 8007e9a:	2bc0      	cmp	r3, #192	; 0xc0
 8007e9c:	d818      	bhi.n	8007ed0 <UART_SetConfig+0x1f8>
 8007e9e:	2b80      	cmp	r3, #128	; 0x80
 8007ea0:	d00a      	beq.n	8007eb8 <UART_SetConfig+0x1e0>
 8007ea2:	2b80      	cmp	r3, #128	; 0x80
 8007ea4:	d814      	bhi.n	8007ed0 <UART_SetConfig+0x1f8>
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d002      	beq.n	8007eb0 <UART_SetConfig+0x1d8>
 8007eaa:	2b40      	cmp	r3, #64	; 0x40
 8007eac:	d008      	beq.n	8007ec0 <UART_SetConfig+0x1e8>
 8007eae:	e00f      	b.n	8007ed0 <UART_SetConfig+0x1f8>
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007eb6:	e082      	b.n	8007fbe <UART_SetConfig+0x2e6>
 8007eb8:	2302      	movs	r3, #2
 8007eba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ebe:	e07e      	b.n	8007fbe <UART_SetConfig+0x2e6>
 8007ec0:	2304      	movs	r3, #4
 8007ec2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ec6:	e07a      	b.n	8007fbe <UART_SetConfig+0x2e6>
 8007ec8:	2308      	movs	r3, #8
 8007eca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ece:	e076      	b.n	8007fbe <UART_SetConfig+0x2e6>
 8007ed0:	2310      	movs	r3, #16
 8007ed2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ed6:	e072      	b.n	8007fbe <UART_SetConfig+0x2e6>
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	4a35      	ldr	r2, [pc, #212]	; (8007fb4 <UART_SetConfig+0x2dc>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d12a      	bne.n	8007f38 <UART_SetConfig+0x260>
 8007ee2:	4b30      	ldr	r3, [pc, #192]	; (8007fa4 <UART_SetConfig+0x2cc>)
 8007ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ee8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007eec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ef0:	d01a      	beq.n	8007f28 <UART_SetConfig+0x250>
 8007ef2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ef6:	d81b      	bhi.n	8007f30 <UART_SetConfig+0x258>
 8007ef8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007efc:	d00c      	beq.n	8007f18 <UART_SetConfig+0x240>
 8007efe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f02:	d815      	bhi.n	8007f30 <UART_SetConfig+0x258>
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d003      	beq.n	8007f10 <UART_SetConfig+0x238>
 8007f08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f0c:	d008      	beq.n	8007f20 <UART_SetConfig+0x248>
 8007f0e:	e00f      	b.n	8007f30 <UART_SetConfig+0x258>
 8007f10:	2300      	movs	r3, #0
 8007f12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f16:	e052      	b.n	8007fbe <UART_SetConfig+0x2e6>
 8007f18:	2302      	movs	r3, #2
 8007f1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f1e:	e04e      	b.n	8007fbe <UART_SetConfig+0x2e6>
 8007f20:	2304      	movs	r3, #4
 8007f22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f26:	e04a      	b.n	8007fbe <UART_SetConfig+0x2e6>
 8007f28:	2308      	movs	r3, #8
 8007f2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f2e:	e046      	b.n	8007fbe <UART_SetConfig+0x2e6>
 8007f30:	2310      	movs	r3, #16
 8007f32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f36:	e042      	b.n	8007fbe <UART_SetConfig+0x2e6>
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	4a17      	ldr	r2, [pc, #92]	; (8007f9c <UART_SetConfig+0x2c4>)
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d13a      	bne.n	8007fb8 <UART_SetConfig+0x2e0>
 8007f42:	4b18      	ldr	r3, [pc, #96]	; (8007fa4 <UART_SetConfig+0x2cc>)
 8007f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f48:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007f4c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007f50:	d01a      	beq.n	8007f88 <UART_SetConfig+0x2b0>
 8007f52:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007f56:	d81b      	bhi.n	8007f90 <UART_SetConfig+0x2b8>
 8007f58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f5c:	d00c      	beq.n	8007f78 <UART_SetConfig+0x2a0>
 8007f5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f62:	d815      	bhi.n	8007f90 <UART_SetConfig+0x2b8>
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d003      	beq.n	8007f70 <UART_SetConfig+0x298>
 8007f68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f6c:	d008      	beq.n	8007f80 <UART_SetConfig+0x2a8>
 8007f6e:	e00f      	b.n	8007f90 <UART_SetConfig+0x2b8>
 8007f70:	2300      	movs	r3, #0
 8007f72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f76:	e022      	b.n	8007fbe <UART_SetConfig+0x2e6>
 8007f78:	2302      	movs	r3, #2
 8007f7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f7e:	e01e      	b.n	8007fbe <UART_SetConfig+0x2e6>
 8007f80:	2304      	movs	r3, #4
 8007f82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f86:	e01a      	b.n	8007fbe <UART_SetConfig+0x2e6>
 8007f88:	2308      	movs	r3, #8
 8007f8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f8e:	e016      	b.n	8007fbe <UART_SetConfig+0x2e6>
 8007f90:	2310      	movs	r3, #16
 8007f92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f96:	e012      	b.n	8007fbe <UART_SetConfig+0x2e6>
 8007f98:	efff69f3 	.word	0xefff69f3
 8007f9c:	40008000 	.word	0x40008000
 8007fa0:	40013800 	.word	0x40013800
 8007fa4:	40021000 	.word	0x40021000
 8007fa8:	40004400 	.word	0x40004400
 8007fac:	40004800 	.word	0x40004800
 8007fb0:	40004c00 	.word	0x40004c00
 8007fb4:	40005000 	.word	0x40005000
 8007fb8:	2310      	movs	r3, #16
 8007fba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	4a9f      	ldr	r2, [pc, #636]	; (8008240 <UART_SetConfig+0x568>)
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d17a      	bne.n	80080be <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007fc8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007fcc:	2b08      	cmp	r3, #8
 8007fce:	d824      	bhi.n	800801a <UART_SetConfig+0x342>
 8007fd0:	a201      	add	r2, pc, #4	; (adr r2, 8007fd8 <UART_SetConfig+0x300>)
 8007fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fd6:	bf00      	nop
 8007fd8:	08007ffd 	.word	0x08007ffd
 8007fdc:	0800801b 	.word	0x0800801b
 8007fe0:	08008005 	.word	0x08008005
 8007fe4:	0800801b 	.word	0x0800801b
 8007fe8:	0800800b 	.word	0x0800800b
 8007fec:	0800801b 	.word	0x0800801b
 8007ff0:	0800801b 	.word	0x0800801b
 8007ff4:	0800801b 	.word	0x0800801b
 8007ff8:	08008013 	.word	0x08008013
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ffc:	f7fd fcc4 	bl	8005988 <HAL_RCC_GetPCLK1Freq>
 8008000:	61f8      	str	r0, [r7, #28]
        break;
 8008002:	e010      	b.n	8008026 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008004:	4b8f      	ldr	r3, [pc, #572]	; (8008244 <UART_SetConfig+0x56c>)
 8008006:	61fb      	str	r3, [r7, #28]
        break;
 8008008:	e00d      	b.n	8008026 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800800a:	f7fd fc25 	bl	8005858 <HAL_RCC_GetSysClockFreq>
 800800e:	61f8      	str	r0, [r7, #28]
        break;
 8008010:	e009      	b.n	8008026 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008012:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008016:	61fb      	str	r3, [r7, #28]
        break;
 8008018:	e005      	b.n	8008026 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800801a:	2300      	movs	r3, #0
 800801c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800801e:	2301      	movs	r3, #1
 8008020:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008024:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008026:	69fb      	ldr	r3, [r7, #28]
 8008028:	2b00      	cmp	r3, #0
 800802a:	f000 80fb 	beq.w	8008224 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	685a      	ldr	r2, [r3, #4]
 8008032:	4613      	mov	r3, r2
 8008034:	005b      	lsls	r3, r3, #1
 8008036:	4413      	add	r3, r2
 8008038:	69fa      	ldr	r2, [r7, #28]
 800803a:	429a      	cmp	r2, r3
 800803c:	d305      	bcc.n	800804a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	685b      	ldr	r3, [r3, #4]
 8008042:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008044:	69fa      	ldr	r2, [r7, #28]
 8008046:	429a      	cmp	r2, r3
 8008048:	d903      	bls.n	8008052 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800804a:	2301      	movs	r3, #1
 800804c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008050:	e0e8      	b.n	8008224 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008052:	69fb      	ldr	r3, [r7, #28]
 8008054:	2200      	movs	r2, #0
 8008056:	461c      	mov	r4, r3
 8008058:	4615      	mov	r5, r2
 800805a:	f04f 0200 	mov.w	r2, #0
 800805e:	f04f 0300 	mov.w	r3, #0
 8008062:	022b      	lsls	r3, r5, #8
 8008064:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008068:	0222      	lsls	r2, r4, #8
 800806a:	68f9      	ldr	r1, [r7, #12]
 800806c:	6849      	ldr	r1, [r1, #4]
 800806e:	0849      	lsrs	r1, r1, #1
 8008070:	2000      	movs	r0, #0
 8008072:	4688      	mov	r8, r1
 8008074:	4681      	mov	r9, r0
 8008076:	eb12 0a08 	adds.w	sl, r2, r8
 800807a:	eb43 0b09 	adc.w	fp, r3, r9
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	685b      	ldr	r3, [r3, #4]
 8008082:	2200      	movs	r2, #0
 8008084:	603b      	str	r3, [r7, #0]
 8008086:	607a      	str	r2, [r7, #4]
 8008088:	e9d7 2300 	ldrd	r2, r3, [r7]
 800808c:	4650      	mov	r0, sl
 800808e:	4659      	mov	r1, fp
 8008090:	f7f8 fdea 	bl	8000c68 <__aeabi_uldivmod>
 8008094:	4602      	mov	r2, r0
 8008096:	460b      	mov	r3, r1
 8008098:	4613      	mov	r3, r2
 800809a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800809c:	69bb      	ldr	r3, [r7, #24]
 800809e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80080a2:	d308      	bcc.n	80080b6 <UART_SetConfig+0x3de>
 80080a4:	69bb      	ldr	r3, [r7, #24]
 80080a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80080aa:	d204      	bcs.n	80080b6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	69ba      	ldr	r2, [r7, #24]
 80080b2:	60da      	str	r2, [r3, #12]
 80080b4:	e0b6      	b.n	8008224 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80080b6:	2301      	movs	r3, #1
 80080b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80080bc:	e0b2      	b.n	8008224 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	69db      	ldr	r3, [r3, #28]
 80080c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080c6:	d15e      	bne.n	8008186 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80080c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80080cc:	2b08      	cmp	r3, #8
 80080ce:	d828      	bhi.n	8008122 <UART_SetConfig+0x44a>
 80080d0:	a201      	add	r2, pc, #4	; (adr r2, 80080d8 <UART_SetConfig+0x400>)
 80080d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080d6:	bf00      	nop
 80080d8:	080080fd 	.word	0x080080fd
 80080dc:	08008105 	.word	0x08008105
 80080e0:	0800810d 	.word	0x0800810d
 80080e4:	08008123 	.word	0x08008123
 80080e8:	08008113 	.word	0x08008113
 80080ec:	08008123 	.word	0x08008123
 80080f0:	08008123 	.word	0x08008123
 80080f4:	08008123 	.word	0x08008123
 80080f8:	0800811b 	.word	0x0800811b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80080fc:	f7fd fc44 	bl	8005988 <HAL_RCC_GetPCLK1Freq>
 8008100:	61f8      	str	r0, [r7, #28]
        break;
 8008102:	e014      	b.n	800812e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008104:	f7fd fc56 	bl	80059b4 <HAL_RCC_GetPCLK2Freq>
 8008108:	61f8      	str	r0, [r7, #28]
        break;
 800810a:	e010      	b.n	800812e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800810c:	4b4d      	ldr	r3, [pc, #308]	; (8008244 <UART_SetConfig+0x56c>)
 800810e:	61fb      	str	r3, [r7, #28]
        break;
 8008110:	e00d      	b.n	800812e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008112:	f7fd fba1 	bl	8005858 <HAL_RCC_GetSysClockFreq>
 8008116:	61f8      	str	r0, [r7, #28]
        break;
 8008118:	e009      	b.n	800812e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800811a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800811e:	61fb      	str	r3, [r7, #28]
        break;
 8008120:	e005      	b.n	800812e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8008122:	2300      	movs	r3, #0
 8008124:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008126:	2301      	movs	r3, #1
 8008128:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800812c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800812e:	69fb      	ldr	r3, [r7, #28]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d077      	beq.n	8008224 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008134:	69fb      	ldr	r3, [r7, #28]
 8008136:	005a      	lsls	r2, r3, #1
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	685b      	ldr	r3, [r3, #4]
 800813c:	085b      	lsrs	r3, r3, #1
 800813e:	441a      	add	r2, r3
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	685b      	ldr	r3, [r3, #4]
 8008144:	fbb2 f3f3 	udiv	r3, r2, r3
 8008148:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800814a:	69bb      	ldr	r3, [r7, #24]
 800814c:	2b0f      	cmp	r3, #15
 800814e:	d916      	bls.n	800817e <UART_SetConfig+0x4a6>
 8008150:	69bb      	ldr	r3, [r7, #24]
 8008152:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008156:	d212      	bcs.n	800817e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008158:	69bb      	ldr	r3, [r7, #24]
 800815a:	b29b      	uxth	r3, r3
 800815c:	f023 030f 	bic.w	r3, r3, #15
 8008160:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008162:	69bb      	ldr	r3, [r7, #24]
 8008164:	085b      	lsrs	r3, r3, #1
 8008166:	b29b      	uxth	r3, r3
 8008168:	f003 0307 	and.w	r3, r3, #7
 800816c:	b29a      	uxth	r2, r3
 800816e:	8afb      	ldrh	r3, [r7, #22]
 8008170:	4313      	orrs	r3, r2
 8008172:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	8afa      	ldrh	r2, [r7, #22]
 800817a:	60da      	str	r2, [r3, #12]
 800817c:	e052      	b.n	8008224 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800817e:	2301      	movs	r3, #1
 8008180:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008184:	e04e      	b.n	8008224 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008186:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800818a:	2b08      	cmp	r3, #8
 800818c:	d827      	bhi.n	80081de <UART_SetConfig+0x506>
 800818e:	a201      	add	r2, pc, #4	; (adr r2, 8008194 <UART_SetConfig+0x4bc>)
 8008190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008194:	080081b9 	.word	0x080081b9
 8008198:	080081c1 	.word	0x080081c1
 800819c:	080081c9 	.word	0x080081c9
 80081a0:	080081df 	.word	0x080081df
 80081a4:	080081cf 	.word	0x080081cf
 80081a8:	080081df 	.word	0x080081df
 80081ac:	080081df 	.word	0x080081df
 80081b0:	080081df 	.word	0x080081df
 80081b4:	080081d7 	.word	0x080081d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80081b8:	f7fd fbe6 	bl	8005988 <HAL_RCC_GetPCLK1Freq>
 80081bc:	61f8      	str	r0, [r7, #28]
        break;
 80081be:	e014      	b.n	80081ea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80081c0:	f7fd fbf8 	bl	80059b4 <HAL_RCC_GetPCLK2Freq>
 80081c4:	61f8      	str	r0, [r7, #28]
        break;
 80081c6:	e010      	b.n	80081ea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80081c8:	4b1e      	ldr	r3, [pc, #120]	; (8008244 <UART_SetConfig+0x56c>)
 80081ca:	61fb      	str	r3, [r7, #28]
        break;
 80081cc:	e00d      	b.n	80081ea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80081ce:	f7fd fb43 	bl	8005858 <HAL_RCC_GetSysClockFreq>
 80081d2:	61f8      	str	r0, [r7, #28]
        break;
 80081d4:	e009      	b.n	80081ea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80081d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80081da:	61fb      	str	r3, [r7, #28]
        break;
 80081dc:	e005      	b.n	80081ea <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80081de:	2300      	movs	r3, #0
 80081e0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80081e2:	2301      	movs	r3, #1
 80081e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80081e8:	bf00      	nop
    }

    if (pclk != 0U)
 80081ea:	69fb      	ldr	r3, [r7, #28]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d019      	beq.n	8008224 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	685b      	ldr	r3, [r3, #4]
 80081f4:	085a      	lsrs	r2, r3, #1
 80081f6:	69fb      	ldr	r3, [r7, #28]
 80081f8:	441a      	add	r2, r3
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	685b      	ldr	r3, [r3, #4]
 80081fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008202:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008204:	69bb      	ldr	r3, [r7, #24]
 8008206:	2b0f      	cmp	r3, #15
 8008208:	d909      	bls.n	800821e <UART_SetConfig+0x546>
 800820a:	69bb      	ldr	r3, [r7, #24]
 800820c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008210:	d205      	bcs.n	800821e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008212:	69bb      	ldr	r3, [r7, #24]
 8008214:	b29a      	uxth	r2, r3
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	60da      	str	r2, [r3, #12]
 800821c:	e002      	b.n	8008224 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800821e:	2301      	movs	r3, #1
 8008220:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	2200      	movs	r2, #0
 8008228:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	2200      	movs	r2, #0
 800822e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008230:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8008234:	4618      	mov	r0, r3
 8008236:	3728      	adds	r7, #40	; 0x28
 8008238:	46bd      	mov	sp, r7
 800823a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800823e:	bf00      	nop
 8008240:	40008000 	.word	0x40008000
 8008244:	00f42400 	.word	0x00f42400

08008248 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008248:	b480      	push	{r7}
 800824a:	b083      	sub	sp, #12
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008254:	f003 0301 	and.w	r3, r3, #1
 8008258:	2b00      	cmp	r3, #0
 800825a:	d00a      	beq.n	8008272 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	685b      	ldr	r3, [r3, #4]
 8008262:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	430a      	orrs	r2, r1
 8008270:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008276:	f003 0302 	and.w	r3, r3, #2
 800827a:	2b00      	cmp	r3, #0
 800827c:	d00a      	beq.n	8008294 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	685b      	ldr	r3, [r3, #4]
 8008284:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	430a      	orrs	r2, r1
 8008292:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008298:	f003 0304 	and.w	r3, r3, #4
 800829c:	2b00      	cmp	r3, #0
 800829e:	d00a      	beq.n	80082b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	685b      	ldr	r3, [r3, #4]
 80082a6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	430a      	orrs	r2, r1
 80082b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ba:	f003 0308 	and.w	r3, r3, #8
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d00a      	beq.n	80082d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	685b      	ldr	r3, [r3, #4]
 80082c8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	430a      	orrs	r2, r1
 80082d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082dc:	f003 0310 	and.w	r3, r3, #16
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d00a      	beq.n	80082fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	689b      	ldr	r3, [r3, #8]
 80082ea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	430a      	orrs	r2, r1
 80082f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082fe:	f003 0320 	and.w	r3, r3, #32
 8008302:	2b00      	cmp	r3, #0
 8008304:	d00a      	beq.n	800831c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	689b      	ldr	r3, [r3, #8]
 800830c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	430a      	orrs	r2, r1
 800831a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008324:	2b00      	cmp	r3, #0
 8008326:	d01a      	beq.n	800835e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	685b      	ldr	r3, [r3, #4]
 800832e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	430a      	orrs	r2, r1
 800833c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008342:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008346:	d10a      	bne.n	800835e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	685b      	ldr	r3, [r3, #4]
 800834e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	430a      	orrs	r2, r1
 800835c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008366:	2b00      	cmp	r3, #0
 8008368:	d00a      	beq.n	8008380 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	685b      	ldr	r3, [r3, #4]
 8008370:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	430a      	orrs	r2, r1
 800837e:	605a      	str	r2, [r3, #4]
  }
}
 8008380:	bf00      	nop
 8008382:	370c      	adds	r7, #12
 8008384:	46bd      	mov	sp, r7
 8008386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838a:	4770      	bx	lr

0800838c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b086      	sub	sp, #24
 8008390:	af02      	add	r7, sp, #8
 8008392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2200      	movs	r2, #0
 8008398:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800839c:	f7fa fddc 	bl	8002f58 <HAL_GetTick>
 80083a0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f003 0308 	and.w	r3, r3, #8
 80083ac:	2b08      	cmp	r3, #8
 80083ae:	d10e      	bne.n	80083ce <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80083b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80083b4:	9300      	str	r3, [sp, #0]
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	2200      	movs	r2, #0
 80083ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f000 f82d 	bl	800841e <UART_WaitOnFlagUntilTimeout>
 80083c4:	4603      	mov	r3, r0
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d001      	beq.n	80083ce <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80083ca:	2303      	movs	r3, #3
 80083cc:	e023      	b.n	8008416 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f003 0304 	and.w	r3, r3, #4
 80083d8:	2b04      	cmp	r3, #4
 80083da:	d10e      	bne.n	80083fa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80083dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80083e0:	9300      	str	r3, [sp, #0]
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	2200      	movs	r2, #0
 80083e6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f000 f817 	bl	800841e <UART_WaitOnFlagUntilTimeout>
 80083f0:	4603      	mov	r3, r0
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d001      	beq.n	80083fa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80083f6:	2303      	movs	r3, #3
 80083f8:	e00d      	b.n	8008416 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2220      	movs	r2, #32
 80083fe:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2220      	movs	r2, #32
 8008404:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2200      	movs	r2, #0
 800840a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2200      	movs	r2, #0
 8008410:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008414:	2300      	movs	r3, #0
}
 8008416:	4618      	mov	r0, r3
 8008418:	3710      	adds	r7, #16
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}

0800841e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800841e:	b580      	push	{r7, lr}
 8008420:	b09c      	sub	sp, #112	; 0x70
 8008422:	af00      	add	r7, sp, #0
 8008424:	60f8      	str	r0, [r7, #12]
 8008426:	60b9      	str	r1, [r7, #8]
 8008428:	603b      	str	r3, [r7, #0]
 800842a:	4613      	mov	r3, r2
 800842c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800842e:	e0a5      	b.n	800857c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008430:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008432:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008436:	f000 80a1 	beq.w	800857c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800843a:	f7fa fd8d 	bl	8002f58 <HAL_GetTick>
 800843e:	4602      	mov	r2, r0
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	1ad3      	subs	r3, r2, r3
 8008444:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008446:	429a      	cmp	r2, r3
 8008448:	d302      	bcc.n	8008450 <UART_WaitOnFlagUntilTimeout+0x32>
 800844a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800844c:	2b00      	cmp	r3, #0
 800844e:	d13e      	bne.n	80084ce <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008456:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008458:	e853 3f00 	ldrex	r3, [r3]
 800845c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800845e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008460:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008464:	667b      	str	r3, [r7, #100]	; 0x64
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	461a      	mov	r2, r3
 800846c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800846e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008470:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008472:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008474:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008476:	e841 2300 	strex	r3, r2, [r1]
 800847a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800847c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800847e:	2b00      	cmp	r3, #0
 8008480:	d1e6      	bne.n	8008450 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	3308      	adds	r3, #8
 8008488:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800848a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800848c:	e853 3f00 	ldrex	r3, [r3]
 8008490:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008494:	f023 0301 	bic.w	r3, r3, #1
 8008498:	663b      	str	r3, [r7, #96]	; 0x60
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	3308      	adds	r3, #8
 80084a0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80084a2:	64ba      	str	r2, [r7, #72]	; 0x48
 80084a4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084a6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80084a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80084aa:	e841 2300 	strex	r3, r2, [r1]
 80084ae:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80084b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d1e5      	bne.n	8008482 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	2220      	movs	r2, #32
 80084ba:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	2220      	movs	r2, #32
 80084c0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	2200      	movs	r2, #0
 80084c6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80084ca:	2303      	movs	r3, #3
 80084cc:	e067      	b.n	800859e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f003 0304 	and.w	r3, r3, #4
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d04f      	beq.n	800857c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	69db      	ldr	r3, [r3, #28]
 80084e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80084e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80084ea:	d147      	bne.n	800857c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80084f4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084fe:	e853 3f00 	ldrex	r3, [r3]
 8008502:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008506:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800850a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	461a      	mov	r2, r3
 8008512:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008514:	637b      	str	r3, [r7, #52]	; 0x34
 8008516:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008518:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800851a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800851c:	e841 2300 	strex	r3, r2, [r1]
 8008520:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008524:	2b00      	cmp	r3, #0
 8008526:	d1e6      	bne.n	80084f6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	3308      	adds	r3, #8
 800852e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008530:	697b      	ldr	r3, [r7, #20]
 8008532:	e853 3f00 	ldrex	r3, [r3]
 8008536:	613b      	str	r3, [r7, #16]
   return(result);
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	f023 0301 	bic.w	r3, r3, #1
 800853e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	3308      	adds	r3, #8
 8008546:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008548:	623a      	str	r2, [r7, #32]
 800854a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800854c:	69f9      	ldr	r1, [r7, #28]
 800854e:	6a3a      	ldr	r2, [r7, #32]
 8008550:	e841 2300 	strex	r3, r2, [r1]
 8008554:	61bb      	str	r3, [r7, #24]
   return(result);
 8008556:	69bb      	ldr	r3, [r7, #24]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d1e5      	bne.n	8008528 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	2220      	movs	r2, #32
 8008560:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	2220      	movs	r2, #32
 8008566:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	2220      	movs	r2, #32
 800856c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	2200      	movs	r2, #0
 8008574:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008578:	2303      	movs	r3, #3
 800857a:	e010      	b.n	800859e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	69da      	ldr	r2, [r3, #28]
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	4013      	ands	r3, r2
 8008586:	68ba      	ldr	r2, [r7, #8]
 8008588:	429a      	cmp	r2, r3
 800858a:	bf0c      	ite	eq
 800858c:	2301      	moveq	r3, #1
 800858e:	2300      	movne	r3, #0
 8008590:	b2db      	uxtb	r3, r3
 8008592:	461a      	mov	r2, r3
 8008594:	79fb      	ldrb	r3, [r7, #7]
 8008596:	429a      	cmp	r2, r3
 8008598:	f43f af4a 	beq.w	8008430 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800859c:	2300      	movs	r3, #0
}
 800859e:	4618      	mov	r0, r3
 80085a0:	3770      	adds	r7, #112	; 0x70
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}
	...

080085a8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b096      	sub	sp, #88	; 0x58
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	60f8      	str	r0, [r7, #12]
 80085b0:	60b9      	str	r1, [r7, #8]
 80085b2:	4613      	mov	r3, r2
 80085b4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	68ba      	ldr	r2, [r7, #8]
 80085ba:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	88fa      	ldrh	r2, [r7, #6]
 80085c0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	2200      	movs	r2, #0
 80085c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	2222      	movs	r2, #34	; 0x22
 80085d0:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d02b      	beq.n	8008632 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085de:	4a42      	ldr	r2, [pc, #264]	; (80086e8 <UART_Start_Receive_DMA+0x140>)
 80085e0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085e6:	4a41      	ldr	r2, [pc, #260]	; (80086ec <UART_Start_Receive_DMA+0x144>)
 80085e8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085ee:	4a40      	ldr	r2, [pc, #256]	; (80086f0 <UART_Start_Receive_DMA+0x148>)
 80085f0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085f6:	2200      	movs	r2, #0
 80085f8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	3324      	adds	r3, #36	; 0x24
 8008604:	4619      	mov	r1, r3
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800860a:	461a      	mov	r2, r3
 800860c:	88fb      	ldrh	r3, [r7, #6]
 800860e:	f7fa fe9d 	bl	800334c <HAL_DMA_Start_IT>
 8008612:	4603      	mov	r3, r0
 8008614:	2b00      	cmp	r3, #0
 8008616:	d00c      	beq.n	8008632 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	2210      	movs	r2, #16
 800861c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	2200      	movs	r2, #0
 8008624:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	2220      	movs	r2, #32
 800862c:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 800862e:	2301      	movs	r3, #1
 8008630:	e055      	b.n	80086de <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	2200      	movs	r2, #0
 8008636:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	691b      	ldr	r3, [r3, #16]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d018      	beq.n	8008674 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008648:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800864a:	e853 3f00 	ldrex	r3, [r3]
 800864e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008652:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008656:	657b      	str	r3, [r7, #84]	; 0x54
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	461a      	mov	r2, r3
 800865e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008660:	64bb      	str	r3, [r7, #72]	; 0x48
 8008662:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008664:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008666:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008668:	e841 2300 	strex	r3, r2, [r1]
 800866c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800866e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008670:	2b00      	cmp	r3, #0
 8008672:	d1e6      	bne.n	8008642 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	3308      	adds	r3, #8
 800867a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800867c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800867e:	e853 3f00 	ldrex	r3, [r3]
 8008682:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008686:	f043 0301 	orr.w	r3, r3, #1
 800868a:	653b      	str	r3, [r7, #80]	; 0x50
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	3308      	adds	r3, #8
 8008692:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008694:	637a      	str	r2, [r7, #52]	; 0x34
 8008696:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008698:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800869a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800869c:	e841 2300 	strex	r3, r2, [r1]
 80086a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80086a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d1e5      	bne.n	8008674 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	3308      	adds	r3, #8
 80086ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086b0:	697b      	ldr	r3, [r7, #20]
 80086b2:	e853 3f00 	ldrex	r3, [r3]
 80086b6:	613b      	str	r3, [r7, #16]
   return(result);
 80086b8:	693b      	ldr	r3, [r7, #16]
 80086ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	3308      	adds	r3, #8
 80086c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80086c8:	623a      	str	r2, [r7, #32]
 80086ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086cc:	69f9      	ldr	r1, [r7, #28]
 80086ce:	6a3a      	ldr	r2, [r7, #32]
 80086d0:	e841 2300 	strex	r3, r2, [r1]
 80086d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80086d6:	69bb      	ldr	r3, [r7, #24]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d1e5      	bne.n	80086a8 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80086dc:	2300      	movs	r3, #0
}
 80086de:	4618      	mov	r0, r3
 80086e0:	3758      	adds	r7, #88	; 0x58
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}
 80086e6:	bf00      	nop
 80086e8:	08008807 	.word	0x08008807
 80086ec:	0800892b 	.word	0x0800892b
 80086f0:	08008963 	.word	0x08008963

080086f4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80086f4:	b480      	push	{r7}
 80086f6:	b089      	sub	sp, #36	; 0x24
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	e853 3f00 	ldrex	r3, [r3]
 8008708:	60bb      	str	r3, [r7, #8]
   return(result);
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008710:	61fb      	str	r3, [r7, #28]
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	461a      	mov	r2, r3
 8008718:	69fb      	ldr	r3, [r7, #28]
 800871a:	61bb      	str	r3, [r7, #24]
 800871c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800871e:	6979      	ldr	r1, [r7, #20]
 8008720:	69ba      	ldr	r2, [r7, #24]
 8008722:	e841 2300 	strex	r3, r2, [r1]
 8008726:	613b      	str	r3, [r7, #16]
   return(result);
 8008728:	693b      	ldr	r3, [r7, #16]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d1e6      	bne.n	80086fc <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2220      	movs	r2, #32
 8008732:	679a      	str	r2, [r3, #120]	; 0x78
}
 8008734:	bf00      	nop
 8008736:	3724      	adds	r7, #36	; 0x24
 8008738:	46bd      	mov	sp, r7
 800873a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873e:	4770      	bx	lr

08008740 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008740:	b480      	push	{r7}
 8008742:	b095      	sub	sp, #84	; 0x54
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800874e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008750:	e853 3f00 	ldrex	r3, [r3]
 8008754:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008758:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800875c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	461a      	mov	r2, r3
 8008764:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008766:	643b      	str	r3, [r7, #64]	; 0x40
 8008768:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800876a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800876c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800876e:	e841 2300 	strex	r3, r2, [r1]
 8008772:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008776:	2b00      	cmp	r3, #0
 8008778:	d1e6      	bne.n	8008748 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	3308      	adds	r3, #8
 8008780:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008782:	6a3b      	ldr	r3, [r7, #32]
 8008784:	e853 3f00 	ldrex	r3, [r3]
 8008788:	61fb      	str	r3, [r7, #28]
   return(result);
 800878a:	69fb      	ldr	r3, [r7, #28]
 800878c:	f023 0301 	bic.w	r3, r3, #1
 8008790:	64bb      	str	r3, [r7, #72]	; 0x48
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	3308      	adds	r3, #8
 8008798:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800879a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800879c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800879e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80087a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80087a2:	e841 2300 	strex	r3, r2, [r1]
 80087a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80087a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d1e5      	bne.n	800877a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087b2:	2b01      	cmp	r3, #1
 80087b4:	d118      	bne.n	80087e8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	e853 3f00 	ldrex	r3, [r3]
 80087c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	f023 0310 	bic.w	r3, r3, #16
 80087ca:	647b      	str	r3, [r7, #68]	; 0x44
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	461a      	mov	r2, r3
 80087d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087d4:	61bb      	str	r3, [r7, #24]
 80087d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087d8:	6979      	ldr	r1, [r7, #20]
 80087da:	69ba      	ldr	r2, [r7, #24]
 80087dc:	e841 2300 	strex	r3, r2, [r1]
 80087e0:	613b      	str	r3, [r7, #16]
   return(result);
 80087e2:	693b      	ldr	r3, [r7, #16]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d1e6      	bne.n	80087b6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2220      	movs	r2, #32
 80087ec:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2200      	movs	r2, #0
 80087f2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2200      	movs	r2, #0
 80087f8:	665a      	str	r2, [r3, #100]	; 0x64
}
 80087fa:	bf00      	nop
 80087fc:	3754      	adds	r7, #84	; 0x54
 80087fe:	46bd      	mov	sp, r7
 8008800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008804:	4770      	bx	lr

08008806 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008806:	b580      	push	{r7, lr}
 8008808:	b09c      	sub	sp, #112	; 0x70
 800880a:	af00      	add	r7, sp, #0
 800880c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008812:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f003 0320 	and.w	r3, r3, #32
 800881e:	2b00      	cmp	r3, #0
 8008820:	d170      	bne.n	8008904 <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 8008822:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008824:	2200      	movs	r2, #0
 8008826:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800882a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008830:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008832:	e853 3f00 	ldrex	r3, [r3]
 8008836:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008838:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800883a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800883e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008840:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	461a      	mov	r2, r3
 8008846:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008848:	65bb      	str	r3, [r7, #88]	; 0x58
 800884a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800884c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800884e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008850:	e841 2300 	strex	r3, r2, [r1]
 8008854:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008856:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008858:	2b00      	cmp	r3, #0
 800885a:	d1e6      	bne.n	800882a <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800885c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	3308      	adds	r3, #8
 8008862:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008866:	e853 3f00 	ldrex	r3, [r3]
 800886a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800886c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800886e:	f023 0301 	bic.w	r3, r3, #1
 8008872:	667b      	str	r3, [r7, #100]	; 0x64
 8008874:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	3308      	adds	r3, #8
 800887a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800887c:	647a      	str	r2, [r7, #68]	; 0x44
 800887e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008880:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008882:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008884:	e841 2300 	strex	r3, r2, [r1]
 8008888:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800888a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800888c:	2b00      	cmp	r3, #0
 800888e:	d1e5      	bne.n	800885c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008890:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	3308      	adds	r3, #8
 8008896:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800889a:	e853 3f00 	ldrex	r3, [r3]
 800889e:	623b      	str	r3, [r7, #32]
   return(result);
 80088a0:	6a3b      	ldr	r3, [r7, #32]
 80088a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088a6:	663b      	str	r3, [r7, #96]	; 0x60
 80088a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	3308      	adds	r3, #8
 80088ae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80088b0:	633a      	str	r2, [r7, #48]	; 0x30
 80088b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80088b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088b8:	e841 2300 	strex	r3, r2, [r1]
 80088bc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80088be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d1e5      	bne.n	8008890 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80088c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088c6:	2220      	movs	r2, #32
 80088c8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088ce:	2b01      	cmp	r3, #1
 80088d0:	d118      	bne.n	8008904 <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088d8:	693b      	ldr	r3, [r7, #16]
 80088da:	e853 3f00 	ldrex	r3, [r3]
 80088de:	60fb      	str	r3, [r7, #12]
   return(result);
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	f023 0310 	bic.w	r3, r3, #16
 80088e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80088e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	461a      	mov	r2, r3
 80088ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80088f0:	61fb      	str	r3, [r7, #28]
 80088f2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088f4:	69b9      	ldr	r1, [r7, #24]
 80088f6:	69fa      	ldr	r2, [r7, #28]
 80088f8:	e841 2300 	strex	r3, r2, [r1]
 80088fc:	617b      	str	r3, [r7, #20]
   return(result);
 80088fe:	697b      	ldr	r3, [r7, #20]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d1e6      	bne.n	80088d2 <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008904:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008906:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008908:	2b01      	cmp	r3, #1
 800890a:	d107      	bne.n	800891c <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800890c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800890e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008912:	4619      	mov	r1, r3
 8008914:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008916:	f7ff f9d3 	bl	8007cc0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800891a:	e002      	b.n	8008922 <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 800891c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800891e:	f7f9 febd 	bl	800269c <HAL_UART_RxCpltCallback>
}
 8008922:	bf00      	nop
 8008924:	3770      	adds	r7, #112	; 0x70
 8008926:	46bd      	mov	sp, r7
 8008928:	bd80      	pop	{r7, pc}

0800892a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800892a:	b580      	push	{r7, lr}
 800892c:	b084      	sub	sp, #16
 800892e:	af00      	add	r7, sp, #0
 8008930:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008936:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800893c:	2b01      	cmp	r3, #1
 800893e:	d109      	bne.n	8008954 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008946:	085b      	lsrs	r3, r3, #1
 8008948:	b29b      	uxth	r3, r3
 800894a:	4619      	mov	r1, r3
 800894c:	68f8      	ldr	r0, [r7, #12]
 800894e:	f7ff f9b7 	bl	8007cc0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008952:	e002      	b.n	800895a <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8008954:	68f8      	ldr	r0, [r7, #12]
 8008956:	f7ff f99f 	bl	8007c98 <HAL_UART_RxHalfCpltCallback>
}
 800895a:	bf00      	nop
 800895c:	3710      	adds	r7, #16
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}

08008962 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008962:	b580      	push	{r7, lr}
 8008964:	b086      	sub	sp, #24
 8008966:	af00      	add	r7, sp, #0
 8008968:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800896e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008970:	697b      	ldr	r3, [r7, #20]
 8008972:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008974:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008976:	697b      	ldr	r3, [r7, #20]
 8008978:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800897a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800897c:	697b      	ldr	r3, [r7, #20]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	689b      	ldr	r3, [r3, #8]
 8008982:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008986:	2b80      	cmp	r3, #128	; 0x80
 8008988:	d109      	bne.n	800899e <UART_DMAError+0x3c>
 800898a:	693b      	ldr	r3, [r7, #16]
 800898c:	2b21      	cmp	r3, #33	; 0x21
 800898e:	d106      	bne.n	800899e <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008990:	697b      	ldr	r3, [r7, #20]
 8008992:	2200      	movs	r2, #0
 8008994:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8008998:	6978      	ldr	r0, [r7, #20]
 800899a:	f7ff feab 	bl	80086f4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800899e:	697b      	ldr	r3, [r7, #20]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	689b      	ldr	r3, [r3, #8]
 80089a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089a8:	2b40      	cmp	r3, #64	; 0x40
 80089aa:	d109      	bne.n	80089c0 <UART_DMAError+0x5e>
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	2b22      	cmp	r3, #34	; 0x22
 80089b0:	d106      	bne.n	80089c0 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	2200      	movs	r2, #0
 80089b6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80089ba:	6978      	ldr	r0, [r7, #20]
 80089bc:	f7ff fec0 	bl	8008740 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80089c0:	697b      	ldr	r3, [r7, #20]
 80089c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80089c6:	f043 0210 	orr.w	r2, r3, #16
 80089ca:	697b      	ldr	r3, [r7, #20]
 80089cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80089d0:	6978      	ldr	r0, [r7, #20]
 80089d2:	f7ff f96b 	bl	8007cac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80089d6:	bf00      	nop
 80089d8:	3718      	adds	r7, #24
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}

080089de <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80089de:	b580      	push	{r7, lr}
 80089e0:	b084      	sub	sp, #16
 80089e2:	af00      	add	r7, sp, #0
 80089e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089ea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	2200      	movs	r2, #0
 80089f0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	2200      	movs	r2, #0
 80089f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80089fc:	68f8      	ldr	r0, [r7, #12]
 80089fe:	f7ff f955 	bl	8007cac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a02:	bf00      	nop
 8008a04:	3710      	adds	r7, #16
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}

08008a0a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008a0a:	b580      	push	{r7, lr}
 8008a0c:	b088      	sub	sp, #32
 8008a0e:	af00      	add	r7, sp, #0
 8008a10:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	e853 3f00 	ldrex	r3, [r3]
 8008a1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a26:	61fb      	str	r3, [r7, #28]
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	461a      	mov	r2, r3
 8008a2e:	69fb      	ldr	r3, [r7, #28]
 8008a30:	61bb      	str	r3, [r7, #24]
 8008a32:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a34:	6979      	ldr	r1, [r7, #20]
 8008a36:	69ba      	ldr	r2, [r7, #24]
 8008a38:	e841 2300 	strex	r3, r2, [r1]
 8008a3c:	613b      	str	r3, [r7, #16]
   return(result);
 8008a3e:	693b      	ldr	r3, [r7, #16]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d1e6      	bne.n	8008a12 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2220      	movs	r2, #32
 8008a48:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008a50:	6878      	ldr	r0, [r7, #4]
 8008a52:	f7ff f917 	bl	8007c84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a56:	bf00      	nop
 8008a58:	3720      	adds	r7, #32
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}

08008a5e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008a5e:	b480      	push	{r7}
 8008a60:	b083      	sub	sp, #12
 8008a62:	af00      	add	r7, sp, #0
 8008a64:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008a66:	bf00      	nop
 8008a68:	370c      	adds	r7, #12
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a70:	4770      	bx	lr

08008a72 <bitmap_init>:
    return bitmap->width * (bitmap->depth / 8) * bitmap->height;
};

/* Initialise bitmap with given buffer. */
void bitmap_init(bitmap_t *bitmap, uint8_t *buffer)
{
 8008a72:	b480      	push	{r7}
 8008a74:	b083      	sub	sp, #12
 8008a76:	af00      	add	r7, sp, #0
 8008a78:	6078      	str	r0, [r7, #4]
 8008a7a:	6039      	str	r1, [r7, #0]
    bitmap->pitch = bitmap->width * (bitmap->depth / 8);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	881a      	ldrh	r2, [r3, #0]
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	799b      	ldrb	r3, [r3, #6]
 8008a84:	08db      	lsrs	r3, r3, #3
 8008a86:	b2db      	uxtb	r3, r3
 8008a88:	b29b      	uxth	r3, r3
 8008a8a:	fb12 f303 	smulbb	r3, r2, r3
 8008a8e:	b29a      	uxth	r2, r3
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	809a      	strh	r2, [r3, #4]
    bitmap->size = bitmap->pitch * bitmap->height;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	889b      	ldrh	r3, [r3, #4]
 8008a98:	461a      	mov	r2, r3
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	885b      	ldrh	r3, [r3, #2]
 8008a9e:	fb02 f303 	mul.w	r3, r2, r3
 8008aa2:	461a      	mov	r2, r3
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	609a      	str	r2, [r3, #8]
    bitmap->buffer = buffer;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	683a      	ldr	r2, [r7, #0]
 8008aac:	60da      	str	r2, [r3, #12]
}
 8008aae:	bf00      	nop
 8008ab0:	370c      	adds	r7, #12
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab8:	4770      	bx	lr

08008aba <code>:
static const uint8_t RIGHT = 0b0010;
static const uint8_t BOTTOM = 0b0100;
static const uint8_t TOP = 0b1000;

static uint8_t code(int16_t x0, int16_t y0, window_t window)
{
 8008aba:	b490      	push	{r4, r7}
 8008abc:	b086      	sub	sp, #24
 8008abe:	af00      	add	r7, sp, #0
 8008ac0:	4604      	mov	r4, r0
 8008ac2:	4608      	mov	r0, r1
 8008ac4:	1d39      	adds	r1, r7, #4
 8008ac6:	e881 000c 	stmia.w	r1, {r2, r3}
 8008aca:	4623      	mov	r3, r4
 8008acc:	81fb      	strh	r3, [r7, #14]
 8008ace:	4603      	mov	r3, r0
 8008ad0:	81bb      	strh	r3, [r7, #12]
    uint8_t code = INSIDE;
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	75fb      	strb	r3, [r7, #23]

    if (x0 < window.x0) {
 8008ad6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008ada:	88ba      	ldrh	r2, [r7, #4]
 8008adc:	4293      	cmp	r3, r2
 8008ade:	da04      	bge.n	8008aea <code+0x30>
        code |= LEFT;
 8008ae0:	2201      	movs	r2, #1
 8008ae2:	7dfb      	ldrb	r3, [r7, #23]
 8008ae4:	4313      	orrs	r3, r2
 8008ae6:	75fb      	strb	r3, [r7, #23]
 8008ae8:	e008      	b.n	8008afc <code+0x42>
    } else if (x0 > window.x1) {
 8008aea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008aee:	893a      	ldrh	r2, [r7, #8]
 8008af0:	4293      	cmp	r3, r2
 8008af2:	dd03      	ble.n	8008afc <code+0x42>
        code |= RIGHT;
 8008af4:	2202      	movs	r2, #2
 8008af6:	7dfb      	ldrb	r3, [r7, #23]
 8008af8:	4313      	orrs	r3, r2
 8008afa:	75fb      	strb	r3, [r7, #23]
    } if (y0 < window.y0) {
 8008afc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8008b00:	88fa      	ldrh	r2, [r7, #6]
 8008b02:	4293      	cmp	r3, r2
 8008b04:	da04      	bge.n	8008b10 <code+0x56>
        code |= BOTTOM;
 8008b06:	2204      	movs	r2, #4
 8008b08:	7dfb      	ldrb	r3, [r7, #23]
 8008b0a:	4313      	orrs	r3, r2
 8008b0c:	75fb      	strb	r3, [r7, #23]
 8008b0e:	e008      	b.n	8008b22 <code+0x68>
    } else if (y0 > window.y1) {
 8008b10:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8008b14:	897a      	ldrh	r2, [r7, #10]
 8008b16:	4293      	cmp	r3, r2
 8008b18:	dd03      	ble.n	8008b22 <code+0x68>
        code |= TOP;
 8008b1a:	2208      	movs	r2, #8
 8008b1c:	7dfb      	ldrb	r3, [r7, #23]
 8008b1e:	4313      	orrs	r3, r2
 8008b20:	75fb      	strb	r3, [r7, #23]
    }

    return code;
 8008b22:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3718      	adds	r7, #24
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bc90      	pop	{r4, r7}
 8008b2c:	4770      	bx	lr

08008b2e <clip_line>:

bool clip_line(int16_t *x0, int16_t *y0, int16_t *x1, int16_t *y1, window_t window)
{
 8008b2e:	b580      	push	{r7, lr}
 8008b30:	b088      	sub	sp, #32
 8008b32:	af00      	add	r7, sp, #0
 8008b34:	60f8      	str	r0, [r7, #12]
 8008b36:	60b9      	str	r1, [r7, #8]
 8008b38:	607a      	str	r2, [r7, #4]
 8008b3a:	603b      	str	r3, [r7, #0]
    uint8_t code0 = code(*x0, *y0, window);
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	f9b3 0000 	ldrsh.w	r0, [r3]
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	f9b3 1000 	ldrsh.w	r1, [r3]
 8008b48:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008b4c:	cb0c      	ldmia	r3, {r2, r3}
 8008b4e:	f7ff ffb4 	bl	8008aba <code>
 8008b52:	4603      	mov	r3, r0
 8008b54:	77fb      	strb	r3, [r7, #31]
    uint8_t code1 = code(*x1, *y1, window);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	f9b3 0000 	ldrsh.w	r0, [r3]
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8008b62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008b66:	cb0c      	ldmia	r3, {r2, r3}
 8008b68:	f7ff ffa7 	bl	8008aba <code>
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	77bb      	strb	r3, [r7, #30]

    bool accept = false;
 8008b70:	2300      	movs	r3, #0
 8008b72:	777b      	strb	r3, [r7, #29]

    while (true) {
        if (!(code0 | code1)) {
 8008b74:	7ffa      	ldrb	r2, [r7, #31]
 8008b76:	7fbb      	ldrb	r3, [r7, #30]
 8008b78:	4313      	orrs	r3, r2
 8008b7a:	b2db      	uxtb	r3, r3
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d102      	bne.n	8008b86 <clip_line+0x58>
            /* Both endpoints inside clipping window, trivial accept. */
            accept = true;
 8008b80:	2301      	movs	r3, #1
 8008b82:	777b      	strb	r3, [r7, #29]
            break;
 8008b84:	e0e9      	b.n	8008d5a <clip_line+0x22c>
        } else if (code0 & code1) {
 8008b86:	7ffa      	ldrb	r2, [r7, #31]
 8008b88:	7fbb      	ldrb	r3, [r7, #30]
 8008b8a:	4013      	ands	r3, r2
 8008b8c:	b2db      	uxtb	r3, r3
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	f040 80e2 	bne.w	8008d58 <clip_line+0x22a>
            /* Both endpoints outside clipping window, trivial reject. */
            break;
        } else {
            /* Part of line inside clipping window, nontrivial situation. */

            int16_t x = 0;
 8008b94:	2300      	movs	r3, #0
 8008b96:	837b      	strh	r3, [r7, #26]
            int16_t y = 0;
 8008b98:	2300      	movs	r3, #0
 8008b9a:	833b      	strh	r3, [r7, #24]
            uint8_t code3 = code0 ? code0 : code1;
 8008b9c:	7ffb      	ldrb	r3, [r7, #31]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d001      	beq.n	8008ba6 <clip_line+0x78>
 8008ba2:	7ffb      	ldrb	r3, [r7, #31]
 8008ba4:	e000      	b.n	8008ba8 <clip_line+0x7a>
 8008ba6:	7fbb      	ldrb	r3, [r7, #30]
 8008ba8:	75fb      	strb	r3, [r7, #23]

            /* Find intersection point. */
            /* slope = (y1 - y0) / (x1 - x0) */
            /* x = x0 + (1 / slope) * (ym - y0), where ym is ymin or ymax */
            /* y = y0 + slope * (xm - x0), where xm is xmin or xmax */
            if (code3 & TOP) {
 8008baa:	2208      	movs	r2, #8
 8008bac:	7dfb      	ldrb	r3, [r7, #23]
 8008bae:	4013      	ands	r3, r2
 8008bb0:	b2db      	uxtb	r3, r3
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d024      	beq.n	8008c00 <clip_line+0xd2>
                x = *x0 + (*x1 - *x0) * (window.y1 - *y0) / (*y1 - *y0);
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008bbc:	b29a      	uxth	r2, r3
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008bc4:	4619      	mov	r1, r3
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008bcc:	1acb      	subs	r3, r1, r3
 8008bce:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 8008bd0:	4608      	mov	r0, r1
 8008bd2:	68b9      	ldr	r1, [r7, #8]
 8008bd4:	f9b1 1000 	ldrsh.w	r1, [r1]
 8008bd8:	1a41      	subs	r1, r0, r1
 8008bda:	fb03 f101 	mul.w	r1, r3, r1
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008be4:	4618      	mov	r0, r3
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008bec:	1ac3      	subs	r3, r0, r3
 8008bee:	fb91 f3f3 	sdiv	r3, r1, r3
 8008bf2:	b29b      	uxth	r3, r3
 8008bf4:	4413      	add	r3, r2
 8008bf6:	b29b      	uxth	r3, r3
 8008bf8:	837b      	strh	r3, [r7, #26]
                y = window.y1;
 8008bfa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008bfc:	833b      	strh	r3, [r7, #24]
 8008bfe:	e07f      	b.n	8008d00 <clip_line+0x1d2>
            } else if (code3 & BOTTOM) {
 8008c00:	2204      	movs	r2, #4
 8008c02:	7dfb      	ldrb	r3, [r7, #23]
 8008c04:	4013      	ands	r3, r2
 8008c06:	b2db      	uxtb	r3, r3
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d024      	beq.n	8008c56 <clip_line+0x128>
                x = *x0 + (*x1 - *x0) * (window.y0 - *y0) / (*y1 - *y0);
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008c12:	b29a      	uxth	r2, r3
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008c1a:	4619      	mov	r1, r3
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008c22:	1acb      	subs	r3, r1, r3
 8008c24:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8008c26:	4608      	mov	r0, r1
 8008c28:	68b9      	ldr	r1, [r7, #8]
 8008c2a:	f9b1 1000 	ldrsh.w	r1, [r1]
 8008c2e:	1a41      	subs	r1, r0, r1
 8008c30:	fb03 f101 	mul.w	r1, r3, r1
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008c42:	1ac3      	subs	r3, r0, r3
 8008c44:	fb91 f3f3 	sdiv	r3, r1, r3
 8008c48:	b29b      	uxth	r3, r3
 8008c4a:	4413      	add	r3, r2
 8008c4c:	b29b      	uxth	r3, r3
 8008c4e:	837b      	strh	r3, [r7, #26]
                y = window.y0;
 8008c50:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008c52:	833b      	strh	r3, [r7, #24]
 8008c54:	e054      	b.n	8008d00 <clip_line+0x1d2>
            } else if (code3 & RIGHT) {
 8008c56:	2202      	movs	r2, #2
 8008c58:	7dfb      	ldrb	r3, [r7, #23]
 8008c5a:	4013      	ands	r3, r2
 8008c5c:	b2db      	uxtb	r3, r3
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d024      	beq.n	8008cac <clip_line+0x17e>
                y = *y0 + (*y1 - *y0) * (window.x1 - *x0) / (*x1 - *x0);
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008c68:	b29a      	uxth	r2, r3
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008c70:	4619      	mov	r1, r3
 8008c72:	68bb      	ldr	r3, [r7, #8]
 8008c74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008c78:	1acb      	subs	r3, r1, r3
 8008c7a:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8008c7c:	4608      	mov	r0, r1
 8008c7e:	68f9      	ldr	r1, [r7, #12]
 8008c80:	f9b1 1000 	ldrsh.w	r1, [r1]
 8008c84:	1a41      	subs	r1, r0, r1
 8008c86:	fb03 f101 	mul.w	r1, r3, r1
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008c90:	4618      	mov	r0, r3
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008c98:	1ac3      	subs	r3, r0, r3
 8008c9a:	fb91 f3f3 	sdiv	r3, r1, r3
 8008c9e:	b29b      	uxth	r3, r3
 8008ca0:	4413      	add	r3, r2
 8008ca2:	b29b      	uxth	r3, r3
 8008ca4:	833b      	strh	r3, [r7, #24]
                x = window.x1;
 8008ca6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008ca8:	837b      	strh	r3, [r7, #26]
 8008caa:	e029      	b.n	8008d00 <clip_line+0x1d2>
            }  else if (code3 & LEFT) {
 8008cac:	2201      	movs	r2, #1
 8008cae:	7dfb      	ldrb	r3, [r7, #23]
 8008cb0:	4013      	ands	r3, r2
 8008cb2:	b2db      	uxtb	r3, r3
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d023      	beq.n	8008d00 <clip_line+0x1d2>
                y = *y0 + (*y1 - *y0) * (window.x0 - *x0) / (*x1 - *x0);
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008cbe:	b29a      	uxth	r2, r3
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008cc6:	4619      	mov	r1, r3
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008cce:	1acb      	subs	r3, r1, r3
 8008cd0:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8008cd2:	4608      	mov	r0, r1
 8008cd4:	68f9      	ldr	r1, [r7, #12]
 8008cd6:	f9b1 1000 	ldrsh.w	r1, [r1]
 8008cda:	1a41      	subs	r1, r0, r1
 8008cdc:	fb03 f101 	mul.w	r1, r3, r1
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008cee:	1ac3      	subs	r3, r0, r3
 8008cf0:	fb91 f3f3 	sdiv	r3, r1, r3
 8008cf4:	b29b      	uxth	r3, r3
 8008cf6:	4413      	add	r3, r2
 8008cf8:	b29b      	uxth	r3, r3
 8008cfa:	833b      	strh	r3, [r7, #24]
                x = window.x0;
 8008cfc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008cfe:	837b      	strh	r3, [r7, #26]
            }

            /* Replace the outside point with the intersection point. */
            if (code3 == code0) {
 8008d00:	7dfa      	ldrb	r2, [r7, #23]
 8008d02:	7ffb      	ldrb	r3, [r7, #31]
 8008d04:	429a      	cmp	r2, r3
 8008d06:	d113      	bne.n	8008d30 <clip_line+0x202>
                *x0 = x;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	8b7a      	ldrh	r2, [r7, #26]
 8008d0c:	801a      	strh	r2, [r3, #0]
                *y0 = y;
 8008d0e:	68bb      	ldr	r3, [r7, #8]
 8008d10:	8b3a      	ldrh	r2, [r7, #24]
 8008d12:	801a      	strh	r2, [r3, #0]
                code0 = code(*x0, *y0, window);
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	f9b3 0000 	ldrsh.w	r0, [r3]
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	f9b3 1000 	ldrsh.w	r1, [r3]
 8008d20:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008d24:	cb0c      	ldmia	r3, {r2, r3}
 8008d26:	f7ff fec8 	bl	8008aba <code>
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	77fb      	strb	r3, [r7, #31]
 8008d2e:	e721      	b.n	8008b74 <clip_line+0x46>
            } else {
                *x1 = x;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	8b7a      	ldrh	r2, [r7, #26]
 8008d34:	801a      	strh	r2, [r3, #0]
                *y1 = y;
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	8b3a      	ldrh	r2, [r7, #24]
 8008d3a:	801a      	strh	r2, [r3, #0]
                code1 = code(*x1, *y1, window);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f9b3 0000 	ldrsh.w	r0, [r3]
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	f9b3 1000 	ldrsh.w	r1, [r3]
 8008d48:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008d4c:	cb0c      	ldmia	r3, {r2, r3}
 8008d4e:	f7ff feb4 	bl	8008aba <code>
 8008d52:	4603      	mov	r3, r0
 8008d54:	77bb      	strb	r3, [r7, #30]
        if (!(code0 | code1)) {
 8008d56:	e70d      	b.n	8008b74 <clip_line+0x46>
            break;
 8008d58:	bf00      	nop
            }
        }
    }

    return accept;
 8008d5a:	7f7b      	ldrb	r3, [r7, #29]
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	3720      	adds	r7, #32
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}

08008d64 <fontx_meta>:
#include <stddef.h>
#include <string.h>

#include "fontx.h"

uint8_t fontx_meta(fontx_meta_t *meta, const uint8_t *font) {
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b082      	sub	sp, #8
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
 8008d6c:	6039      	str	r1, [r7, #0]

    memcpy(meta->name, &font[FONTX_NAME], 8);
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	3306      	adds	r3, #6
 8008d74:	2208      	movs	r2, #8
 8008d76:	4619      	mov	r1, r3
 8008d78:	f000 febc 	bl	8009af4 <memcpy>
    meta->width = font[FONTX_WIDTH];
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	7b9a      	ldrb	r2, [r3, #14]
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	725a      	strb	r2, [r3, #9]
    meta->height = font[FONTX_HEIGHT];
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	7bda      	ldrb	r2, [r3, #15]
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	729a      	strb	r2, [r3, #10]
    meta->type = font[FONTX_TYPE];
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	7c1a      	ldrb	r2, [r3, #16]
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	72da      	strb	r2, [r3, #11]

    return 0;
 8008d94:	2300      	movs	r3, #0
}
 8008d96:	4618      	mov	r0, r3
 8008d98:	3708      	adds	r7, #8
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}

08008d9e <fontx_glyph>:


uint8_t fontx_glyph(fontx_glyph_t *glyph, wchar_t code, const uint8_t* font) {
 8008d9e:	b580      	push	{r7, lr}
 8008da0:	b08e      	sub	sp, #56	; 0x38
 8008da2:	af00      	add	r7, sp, #0
 8008da4:	60f8      	str	r0, [r7, #12]
 8008da6:	60b9      	str	r1, [r7, #8]
 8008da8:	607a      	str	r2, [r7, #4]
    uint32_t nc, bc, sb, eb;
    uint8_t status;
    const uint8_t *block_table;
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 8008daa:	f107 0314 	add.w	r3, r7, #20
 8008dae:	6879      	ldr	r1, [r7, #4]
 8008db0:	4618      	mov	r0, r3
 8008db2:	f7ff ffd7 	bl	8008d64 <fontx_meta>
 8008db6:	4603      	mov	r3, r0
 8008db8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (0 != status) {
 8008dbc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d002      	beq.n	8008dca <fontx_glyph+0x2c>
        return status;
 8008dc4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008dc8:	e077      	b.n	8008eba <fontx_glyph+0x11c>
    }

    glyph->width = meta.width;
 8008dca:	7f7a      	ldrb	r2, [r7, #29]
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	701a      	strb	r2, [r3, #0]
    glyph->height = meta.height;
 8008dd0:	7fba      	ldrb	r2, [r7, #30]
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	705a      	strb	r2, [r3, #1]
    glyph->pitch = (meta.width + 7) / 8;
 8008dd6:	7f7b      	ldrb	r3, [r7, #29]
 8008dd8:	3307      	adds	r3, #7
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	da00      	bge.n	8008de0 <fontx_glyph+0x42>
 8008dde:	3307      	adds	r3, #7
 8008de0:	10db      	asrs	r3, r3, #3
 8008de2:	b2da      	uxtb	r2, r3
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	70da      	strb	r2, [r3, #3]
    glyph->size = glyph->pitch * meta.height;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	78da      	ldrb	r2, [r3, #3]
 8008dec:	7fbb      	ldrb	r3, [r7, #30]
 8008dee:	fb12 f303 	smulbb	r3, r2, r3
 8008df2:	b2da      	uxtb	r2, r3
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	709a      	strb	r2, [r3, #2]

    if (FONTX_TYPE_SBCS == meta.type) {
 8008df8:	7ffb      	ldrb	r3, [r7, #31]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d10f      	bne.n	8008e1e <fontx_glyph+0x80>
        if (code < 0x100) {
 8008dfe:	68bb      	ldr	r3, [r7, #8]
 8008e00:	2bff      	cmp	r3, #255	; 0xff
 8008e02:	d859      	bhi.n	8008eb8 <fontx_glyph+0x11a>
            glyph->buffer = &font[FONTX_GLYPH_DATA_START + code * glyph->size];
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	789b      	ldrb	r3, [r3, #2]
 8008e08:	461a      	mov	r2, r3
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	fb02 f303 	mul.w	r3, r2, r3
 8008e10:	3311      	adds	r3, #17
 8008e12:	687a      	ldr	r2, [r7, #4]
 8008e14:	441a      	add	r2, r3
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	605a      	str	r2, [r3, #4]
            return FONTX_OK;
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	e04d      	b.n	8008eba <fontx_glyph+0x11c>
        }
    } else {
        block_table = &font[FONTX_BLOCK_TABLE_START];
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	3312      	adds	r3, #18
 8008e22:	62fb      	str	r3, [r7, #44]	; 0x2c
        nc = 0;
 8008e24:	2300      	movs	r3, #0
 8008e26:	637b      	str	r3, [r7, #52]	; 0x34
        bc = font[FONTX_BLOCK_TABLE_SIZE];
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	3311      	adds	r3, #17
 8008e2c:	781b      	ldrb	r3, [r3, #0]
 8008e2e:	633b      	str	r3, [r7, #48]	; 0x30
        while (bc--) {
 8008e30:	e03d      	b.n	8008eae <fontx_glyph+0x110>
            /* Get range of the code block_table. */
            sb = block_table[0] + block_table[1] * 0x100;
 8008e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e34:	781b      	ldrb	r3, [r3, #0]
 8008e36:	461a      	mov	r2, r3
 8008e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e3a:	3301      	adds	r3, #1
 8008e3c:	781b      	ldrb	r3, [r3, #0]
 8008e3e:	021b      	lsls	r3, r3, #8
 8008e40:	4413      	add	r3, r2
 8008e42:	627b      	str	r3, [r7, #36]	; 0x24
            eb = block_table[2] + block_table[3] * 0x100;
 8008e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e46:	3302      	adds	r3, #2
 8008e48:	781b      	ldrb	r3, [r3, #0]
 8008e4a:	461a      	mov	r2, r3
 8008e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e4e:	3303      	adds	r3, #3
 8008e50:	781b      	ldrb	r3, [r3, #0]
 8008e52:	021b      	lsls	r3, r3, #8
 8008e54:	4413      	add	r3, r2
 8008e56:	623b      	str	r3, [r7, #32]

             /* Check if in the code block_table. */
            if (code >= sb && code <= eb) {
 8008e58:	68ba      	ldr	r2, [r7, #8]
 8008e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e5c:	429a      	cmp	r2, r3
 8008e5e:	d31c      	bcc.n	8008e9a <fontx_glyph+0xfc>
 8008e60:	68ba      	ldr	r2, [r7, #8]
 8008e62:	6a3b      	ldr	r3, [r7, #32]
 8008e64:	429a      	cmp	r2, r3
 8008e66:	d818      	bhi.n	8008e9a <fontx_glyph+0xfc>
                /* Number of codes from top of the block_table. */
                nc += code - sb;
 8008e68:	68ba      	ldr	r2, [r7, #8]
 8008e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e6c:	1ad3      	subs	r3, r2, r3
 8008e6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e70:	4413      	add	r3, r2
 8008e72:	637b      	str	r3, [r7, #52]	; 0x34
                glyph->buffer = &font[
                    FONTX_BLOCK_TABLE_START +
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	3311      	adds	r3, #17
 8008e78:	781b      	ldrb	r3, [r3, #0]
 8008e7a:	009b      	lsls	r3, r3, #2
 8008e7c:	461a      	mov	r2, r3
                    nc * glyph->size
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	789b      	ldrb	r3, [r3, #2]
 8008e82:	4619      	mov	r1, r3
 8008e84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e86:	fb01 f303 	mul.w	r3, r1, r3
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 8008e8a:	4413      	add	r3, r2
 8008e8c:	3312      	adds	r3, #18
                glyph->buffer = &font[
 8008e8e:	687a      	ldr	r2, [r7, #4]
 8008e90:	441a      	add	r2, r3
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	605a      	str	r2, [r3, #4]
                ];
                return FONTX_OK;
 8008e96:	2300      	movs	r3, #0
 8008e98:	e00f      	b.n	8008eba <fontx_glyph+0x11c>
            }
            /* Number of codes in the previous block_tables. */
            nc += eb - sb + 1;
 8008e9a:	6a3a      	ldr	r2, [r7, #32]
 8008e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e9e:	1ad2      	subs	r2, r2, r3
 8008ea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ea2:	4413      	add	r3, r2
 8008ea4:	3301      	adds	r3, #1
 8008ea6:	637b      	str	r3, [r7, #52]	; 0x34
            /* Next code block_table. */
            block_table += 4;
 8008ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eaa:	3304      	adds	r3, #4
 8008eac:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (bc--) {
 8008eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eb0:	1e5a      	subs	r2, r3, #1
 8008eb2:	633a      	str	r2, [r7, #48]	; 0x30
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d1bc      	bne.n	8008e32 <fontx_glyph+0x94>
        }
    }

    return FONTX_ERR_GLYPH_NOT_FOUND;
 8008eb8:	2301      	movs	r3, #1
 8008eba:	4618      	mov	r0, r3
 8008ebc:	3738      	adds	r7, #56	; 0x38
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd80      	pop	{r7, pc}

08008ec2 <min>:
#include "hsl.h"

hsl_t rgb888_to_hsl(rgb_t *rgb);
uint16_t rgb888_to_rgb565(rgb_t *input);

static inline int min(int a, int b) {
 8008ec2:	b480      	push	{r7}
 8008ec4:	b083      	sub	sp, #12
 8008ec6:	af00      	add	r7, sp, #0
 8008ec8:	6078      	str	r0, [r7, #4]
 8008eca:	6039      	str	r1, [r7, #0]
    if (a > b) {
 8008ecc:	687a      	ldr	r2, [r7, #4]
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	429a      	cmp	r2, r3
 8008ed2:	dd01      	ble.n	8008ed8 <min+0x16>
        return b;
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	e000      	b.n	8008eda <min+0x18>
    };
    return a;
 8008ed8:	687b      	ldr	r3, [r7, #4]
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	370c      	adds	r7, #12
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee4:	4770      	bx	lr

08008ee6 <max>:

static inline int max(int a, int b) {
 8008ee6:	b480      	push	{r7}
 8008ee8:	b083      	sub	sp, #12
 8008eea:	af00      	add	r7, sp, #0
 8008eec:	6078      	str	r0, [r7, #4]
 8008eee:	6039      	str	r1, [r7, #0]
    if (a > b) {
 8008ef0:	687a      	ldr	r2, [r7, #4]
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	429a      	cmp	r2, r3
 8008ef6:	dd01      	ble.n	8008efc <max+0x16>
        return a;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	e000      	b.n	8008efe <max+0x18>
    }
    return b;
 8008efc:	683b      	ldr	r3, [r7, #0]
}
 8008efe:	4618      	mov	r0, r3
 8008f00:	370c      	adds	r7, #12
 8008f02:	46bd      	mov	sp, r7
 8008f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f08:	4770      	bx	lr
	...

08008f0c <hagl_set_clip_window>:
    .y0 = 0,
    .x1 = DISPLAY_WIDTH - 1,
    .y1 = DISPLAY_HEIGHT - 1,
};

void hagl_set_clip_window(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 8008f0c:	b490      	push	{r4, r7}
 8008f0e:	b082      	sub	sp, #8
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	4604      	mov	r4, r0
 8008f14:	4608      	mov	r0, r1
 8008f16:	4611      	mov	r1, r2
 8008f18:	461a      	mov	r2, r3
 8008f1a:	4623      	mov	r3, r4
 8008f1c:	80fb      	strh	r3, [r7, #6]
 8008f1e:	4603      	mov	r3, r0
 8008f20:	80bb      	strh	r3, [r7, #4]
 8008f22:	460b      	mov	r3, r1
 8008f24:	807b      	strh	r3, [r7, #2]
 8008f26:	4613      	mov	r3, r2
 8008f28:	803b      	strh	r3, [r7, #0]
    clip_window.x0 = x0;
 8008f2a:	4a08      	ldr	r2, [pc, #32]	; (8008f4c <hagl_set_clip_window+0x40>)
 8008f2c:	88fb      	ldrh	r3, [r7, #6]
 8008f2e:	8013      	strh	r3, [r2, #0]
    clip_window.y0 = y0;
 8008f30:	4a06      	ldr	r2, [pc, #24]	; (8008f4c <hagl_set_clip_window+0x40>)
 8008f32:	88bb      	ldrh	r3, [r7, #4]
 8008f34:	8053      	strh	r3, [r2, #2]
    clip_window.x1 = x1;
 8008f36:	4a05      	ldr	r2, [pc, #20]	; (8008f4c <hagl_set_clip_window+0x40>)
 8008f38:	887b      	ldrh	r3, [r7, #2]
 8008f3a:	8093      	strh	r3, [r2, #4]
    clip_window.y1 = y1;
 8008f3c:	4a03      	ldr	r2, [pc, #12]	; (8008f4c <hagl_set_clip_window+0x40>)
 8008f3e:	883b      	ldrh	r3, [r7, #0]
 8008f40:	80d3      	strh	r3, [r2, #6]
}
 8008f42:	bf00      	nop
 8008f44:	3708      	adds	r7, #8
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bc90      	pop	{r4, r7}
 8008f4a:	4770      	bx	lr
 8008f4c:	2000000c 	.word	0x2000000c

08008f50 <hagl_put_pixel>:

void hagl_put_pixel(int16_t x0, int16_t y0, color_t color)
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b082      	sub	sp, #8
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	4603      	mov	r3, r0
 8008f58:	80fb      	strh	r3, [r7, #6]
 8008f5a:	460b      	mov	r3, r1
 8008f5c:	80bb      	strh	r3, [r7, #4]
 8008f5e:	4613      	mov	r3, r2
 8008f60:	807b      	strh	r3, [r7, #2]
    /* x0 or y0 is before the edge, nothing to do. */
    if ((x0 < clip_window.x0) || (y0 < clip_window.y0))  {
 8008f62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008f66:	4a12      	ldr	r2, [pc, #72]	; (8008fb0 <hagl_put_pixel+0x60>)
 8008f68:	8812      	ldrh	r2, [r2, #0]
 8008f6a:	4293      	cmp	r3, r2
 8008f6c:	db1a      	blt.n	8008fa4 <hagl_put_pixel+0x54>
 8008f6e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8008f72:	4a0f      	ldr	r2, [pc, #60]	; (8008fb0 <hagl_put_pixel+0x60>)
 8008f74:	8852      	ldrh	r2, [r2, #2]
 8008f76:	4293      	cmp	r3, r2
 8008f78:	db14      	blt.n	8008fa4 <hagl_put_pixel+0x54>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 8008f7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008f7e:	4a0c      	ldr	r2, [pc, #48]	; (8008fb0 <hagl_put_pixel+0x60>)
 8008f80:	8892      	ldrh	r2, [r2, #4]
 8008f82:	4293      	cmp	r3, r2
 8008f84:	dc10      	bgt.n	8008fa8 <hagl_put_pixel+0x58>
 8008f86:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8008f8a:	4a09      	ldr	r2, [pc, #36]	; (8008fb0 <hagl_put_pixel+0x60>)
 8008f8c:	88d2      	ldrh	r2, [r2, #6]
 8008f8e:	4293      	cmp	r3, r2
 8008f90:	dc0a      	bgt.n	8008fa8 <hagl_put_pixel+0x58>
        return;
    }

    /* If still in bounds set the pixel. */
    hagl_hal_put_pixel(x0, y0, color);
 8008f92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008f96:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8008f9a:	887a      	ldrh	r2, [r7, #2]
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	f7f8 fa5f 	bl	8001460 <lcd_draw_point>
 8008fa2:	e002      	b.n	8008faa <hagl_put_pixel+0x5a>
        return;
 8008fa4:	bf00      	nop
 8008fa6:	e000      	b.n	8008faa <hagl_put_pixel+0x5a>
        return;
 8008fa8:	bf00      	nop
}
 8008faa:	3708      	adds	r7, #8
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd80      	pop	{r7, pc}
 8008fb0:	2000000c 	.word	0x2000000c

08008fb4 <hagl_draw_hline>:
#else
    return hagl_color(0, 0, 0);
#endif /* HAGL_HAS_HAL_GET_PIXEL */
}

void hagl_draw_hline(int16_t x0, int16_t y0, uint16_t w, color_t color) {
 8008fb4:	b590      	push	{r4, r7, lr}
 8008fb6:	b085      	sub	sp, #20
 8008fb8:	af02      	add	r7, sp, #8
 8008fba:	4604      	mov	r4, r0
 8008fbc:	4608      	mov	r0, r1
 8008fbe:	4611      	mov	r1, r2
 8008fc0:	461a      	mov	r2, r3
 8008fc2:	4623      	mov	r3, r4
 8008fc4:	80fb      	strh	r3, [r7, #6]
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	80bb      	strh	r3, [r7, #4]
 8008fca:	460b      	mov	r3, r1
 8008fcc:	807b      	strh	r3, [r7, #2]
 8008fce:	4613      	mov	r3, r2
 8008fd0:	803b      	strh	r3, [r7, #0]
        width = width - (x0 + width - clip_window.x1);
    }

    hagl_hal_hline(x0, y0, width, color);
#else
    hagl_draw_line(x0, y0, x0 + w, y0, color);
 8008fd2:	88fa      	ldrh	r2, [r7, #6]
 8008fd4:	887b      	ldrh	r3, [r7, #2]
 8008fd6:	4413      	add	r3, r2
 8008fd8:	b29b      	uxth	r3, r3
 8008fda:	b21a      	sxth	r2, r3
 8008fdc:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8008fe0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8008fe4:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8008fe8:	883b      	ldrh	r3, [r7, #0]
 8008fea:	9300      	str	r3, [sp, #0]
 8008fec:	4623      	mov	r3, r4
 8008fee:	f000 f805 	bl	8008ffc <hagl_draw_line>
#endif
}
 8008ff2:	bf00      	nop
 8008ff4:	370c      	adds	r7, #12
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd90      	pop	{r4, r7, pc}
	...

08008ffc <hagl_draw_line>:

/*
 * Draw a line using Bresenham's algorithm with given color.
 */
void hagl_draw_line(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 8008ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ffe:	b089      	sub	sp, #36	; 0x24
 8009000:	af02      	add	r7, sp, #8
 8009002:	4604      	mov	r4, r0
 8009004:	4608      	mov	r0, r1
 8009006:	4611      	mov	r1, r2
 8009008:	461a      	mov	r2, r3
 800900a:	4623      	mov	r3, r4
 800900c:	80fb      	strh	r3, [r7, #6]
 800900e:	4603      	mov	r3, r0
 8009010:	80bb      	strh	r3, [r7, #4]
 8009012:	460b      	mov	r3, r1
 8009014:	807b      	strh	r3, [r7, #2]
 8009016:	4613      	mov	r3, r2
 8009018:	803b      	strh	r3, [r7, #0]
    /* Clip coordinates to fit clip window. */
    if (false == clip_line(&x0, &y0, &x1, &y1, clip_window)) {
 800901a:	463b      	mov	r3, r7
 800901c:	1cba      	adds	r2, r7, #2
 800901e:	1d3d      	adds	r5, r7, #4
 8009020:	1dbc      	adds	r4, r7, #6
 8009022:	494a      	ldr	r1, [pc, #296]	; (800914c <hagl_draw_line+0x150>)
 8009024:	466e      	mov	r6, sp
 8009026:	c903      	ldmia	r1, {r0, r1}
 8009028:	e886 0003 	stmia.w	r6, {r0, r1}
 800902c:	4629      	mov	r1, r5
 800902e:	4620      	mov	r0, r4
 8009030:	f7ff fd7d 	bl	8008b2e <clip_line>
 8009034:	4603      	mov	r3, r0
 8009036:	f083 0301 	eor.w	r3, r3, #1
 800903a:	b2db      	uxtb	r3, r3
 800903c:	2b00      	cmp	r3, #0
 800903e:	d17e      	bne.n	800913e <hagl_draw_line+0x142>
    int16_t dy;
    int16_t sy;
    int16_t err;
    int16_t e2;

    dx = ABS(x1 - x0);
 8009040:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009044:	461a      	mov	r2, r3
 8009046:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800904a:	1ad3      	subs	r3, r2, r3
 800904c:	2b00      	cmp	r3, #0
 800904e:	bfb8      	it	lt
 8009050:	425b      	neglt	r3, r3
 8009052:	82bb      	strh	r3, [r7, #20]
    sx = x0 < x1 ? 1 : -1;
 8009054:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009058:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800905c:	429a      	cmp	r2, r3
 800905e:	da01      	bge.n	8009064 <hagl_draw_line+0x68>
 8009060:	2301      	movs	r3, #1
 8009062:	e001      	b.n	8009068 <hagl_draw_line+0x6c>
 8009064:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009068:	827b      	strh	r3, [r7, #18]
    dy = ABS(y1 - y0);
 800906a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800906e:	461a      	mov	r2, r3
 8009070:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8009074:	1ad3      	subs	r3, r2, r3
 8009076:	2b00      	cmp	r3, #0
 8009078:	bfb8      	it	lt
 800907a:	425b      	neglt	r3, r3
 800907c:	823b      	strh	r3, [r7, #16]
    sy = y0 < y1 ? 1 : -1;
 800907e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8009082:	f9b7 3000 	ldrsh.w	r3, [r7]
 8009086:	429a      	cmp	r2, r3
 8009088:	da01      	bge.n	800908e <hagl_draw_line+0x92>
 800908a:	2301      	movs	r3, #1
 800908c:	e001      	b.n	8009092 <hagl_draw_line+0x96>
 800908e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009092:	81fb      	strh	r3, [r7, #14]
    err = (dx > dy ? dx : -dy) / 2;
 8009094:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8009098:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800909c:	429a      	cmp	r2, r3
 800909e:	dd06      	ble.n	80090ae <hagl_draw_line+0xb2>
 80090a0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80090a4:	0fda      	lsrs	r2, r3, #31
 80090a6:	4413      	add	r3, r2
 80090a8:	105b      	asrs	r3, r3, #1
 80090aa:	b21b      	sxth	r3, r3
 80090ac:	e006      	b.n	80090bc <hagl_draw_line+0xc0>
 80090ae:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80090b2:	0fda      	lsrs	r2, r3, #31
 80090b4:	4413      	add	r3, r2
 80090b6:	105b      	asrs	r3, r3, #1
 80090b8:	425b      	negs	r3, r3
 80090ba:	b21b      	sxth	r3, r3
 80090bc:	82fb      	strh	r3, [r7, #22]

    while (1) {
        hagl_put_pixel(x0, y0, color);
 80090be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80090c2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80090c6:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80090c8:	4618      	mov	r0, r3
 80090ca:	f7ff ff41 	bl	8008f50 <hagl_put_pixel>

        if (x0 == x1 && y0 == y1) {
 80090ce:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80090d2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80090d6:	429a      	cmp	r2, r3
 80090d8:	d105      	bne.n	80090e6 <hagl_draw_line+0xea>
 80090da:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80090de:	f9b7 3000 	ldrsh.w	r3, [r7]
 80090e2:	429a      	cmp	r2, r3
 80090e4:	d02d      	beq.n	8009142 <hagl_draw_line+0x146>
            break;
        };

        e2 = err + err;
 80090e6:	8afb      	ldrh	r3, [r7, #22]
 80090e8:	005b      	lsls	r3, r3, #1
 80090ea:	b29b      	uxth	r3, r3
 80090ec:	81bb      	strh	r3, [r7, #12]

        if (e2 > -dx) {
 80090ee:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80090f2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80090f6:	425b      	negs	r3, r3
 80090f8:	429a      	cmp	r2, r3
 80090fa:	dd0c      	ble.n	8009116 <hagl_draw_line+0x11a>
            err -= dy;
 80090fc:	8afa      	ldrh	r2, [r7, #22]
 80090fe:	8a3b      	ldrh	r3, [r7, #16]
 8009100:	1ad3      	subs	r3, r2, r3
 8009102:	b29b      	uxth	r3, r3
 8009104:	82fb      	strh	r3, [r7, #22]
            x0 += sx;
 8009106:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800910a:	b29a      	uxth	r2, r3
 800910c:	8a7b      	ldrh	r3, [r7, #18]
 800910e:	4413      	add	r3, r2
 8009110:	b29b      	uxth	r3, r3
 8009112:	b21b      	sxth	r3, r3
 8009114:	80fb      	strh	r3, [r7, #6]
        }

        if (e2 < dy) {
 8009116:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800911a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800911e:	429a      	cmp	r2, r3
 8009120:	dacd      	bge.n	80090be <hagl_draw_line+0xc2>
            err += dx;
 8009122:	8afa      	ldrh	r2, [r7, #22]
 8009124:	8abb      	ldrh	r3, [r7, #20]
 8009126:	4413      	add	r3, r2
 8009128:	b29b      	uxth	r3, r3
 800912a:	82fb      	strh	r3, [r7, #22]
            y0 += sy;
 800912c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8009130:	b29a      	uxth	r2, r3
 8009132:	89fb      	ldrh	r3, [r7, #14]
 8009134:	4413      	add	r3, r2
 8009136:	b29b      	uxth	r3, r3
 8009138:	b21b      	sxth	r3, r3
 800913a:	80bb      	strh	r3, [r7, #4]
        hagl_put_pixel(x0, y0, color);
 800913c:	e7bf      	b.n	80090be <hagl_draw_line+0xc2>
        return;
 800913e:	bf00      	nop
 8009140:	e000      	b.n	8009144 <hagl_draw_line+0x148>
            break;
 8009142:	bf00      	nop
        }
    }
}
 8009144:	371c      	adds	r7, #28
 8009146:	46bd      	mov	sp, r7
 8009148:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800914a:	bf00      	nop
 800914c:	2000000c 	.word	0x2000000c

08009150 <hagl_fill_rectangle>:

/*
 * Draw a filled rectangle with given color.
 */
void hagl_fill_rectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 8009150:	b590      	push	{r4, r7, lr}
 8009152:	b085      	sub	sp, #20
 8009154:	af00      	add	r7, sp, #0
 8009156:	4604      	mov	r4, r0
 8009158:	4608      	mov	r0, r1
 800915a:	4611      	mov	r1, r2
 800915c:	461a      	mov	r2, r3
 800915e:	4623      	mov	r3, r4
 8009160:	80fb      	strh	r3, [r7, #6]
 8009162:	4603      	mov	r3, r0
 8009164:	80bb      	strh	r3, [r7, #4]
 8009166:	460b      	mov	r3, r1
 8009168:	807b      	strh	r3, [r7, #2]
 800916a:	4613      	mov	r3, r2
 800916c:	803b      	strh	r3, [r7, #0]
    /* Make sure x0 is smaller than x1. */
    if (x0 > x1) {
 800916e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009172:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009176:	429a      	cmp	r2, r3
 8009178:	dd0e      	ble.n	8009198 <hagl_fill_rectangle+0x48>
        x0 = x0 + x1;
 800917a:	88fa      	ldrh	r2, [r7, #6]
 800917c:	887b      	ldrh	r3, [r7, #2]
 800917e:	4413      	add	r3, r2
 8009180:	b29b      	uxth	r3, r3
 8009182:	80fb      	strh	r3, [r7, #6]
        x1 = x0 - x1;
 8009184:	88fa      	ldrh	r2, [r7, #6]
 8009186:	887b      	ldrh	r3, [r7, #2]
 8009188:	1ad3      	subs	r3, r2, r3
 800918a:	b29b      	uxth	r3, r3
 800918c:	807b      	strh	r3, [r7, #2]
        x0 = x0 - x1;
 800918e:	88fa      	ldrh	r2, [r7, #6]
 8009190:	887b      	ldrh	r3, [r7, #2]
 8009192:	1ad3      	subs	r3, r2, r3
 8009194:	b29b      	uxth	r3, r3
 8009196:	80fb      	strh	r3, [r7, #6]
    }

    /* Make sure y0 is smaller than y1. */
    if (y0 > y1) {
 8009198:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800919c:	f9b7 3000 	ldrsh.w	r3, [r7]
 80091a0:	429a      	cmp	r2, r3
 80091a2:	dd0e      	ble.n	80091c2 <hagl_fill_rectangle+0x72>
        y0 = y0 + y1;
 80091a4:	88ba      	ldrh	r2, [r7, #4]
 80091a6:	883b      	ldrh	r3, [r7, #0]
 80091a8:	4413      	add	r3, r2
 80091aa:	b29b      	uxth	r3, r3
 80091ac:	80bb      	strh	r3, [r7, #4]
        y1 = y0 - y1;
 80091ae:	88ba      	ldrh	r2, [r7, #4]
 80091b0:	883b      	ldrh	r3, [r7, #0]
 80091b2:	1ad3      	subs	r3, r2, r3
 80091b4:	b29b      	uxth	r3, r3
 80091b6:	803b      	strh	r3, [r7, #0]
        y0 = y0 - y1;
 80091b8:	88ba      	ldrh	r2, [r7, #4]
 80091ba:	883b      	ldrh	r3, [r7, #0]
 80091bc:	1ad3      	subs	r3, r2, r3
 80091be:	b29b      	uxth	r3, r3
 80091c0:	80bb      	strh	r3, [r7, #4]
    }

    /* x1 or y1 is before the edge, nothing to do. */
    if ((x1 < clip_window.x0) || (y1 < clip_window.y0))  {
 80091c2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80091c6:	4a33      	ldr	r2, [pc, #204]	; (8009294 <hagl_fill_rectangle+0x144>)
 80091c8:	8812      	ldrh	r2, [r2, #0]
 80091ca:	4293      	cmp	r3, r2
 80091cc:	db5b      	blt.n	8009286 <hagl_fill_rectangle+0x136>
 80091ce:	f9b7 3000 	ldrsh.w	r3, [r7]
 80091d2:	4a30      	ldr	r2, [pc, #192]	; (8009294 <hagl_fill_rectangle+0x144>)
 80091d4:	8852      	ldrh	r2, [r2, #2]
 80091d6:	4293      	cmp	r3, r2
 80091d8:	db55      	blt.n	8009286 <hagl_fill_rectangle+0x136>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 80091da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80091de:	4a2d      	ldr	r2, [pc, #180]	; (8009294 <hagl_fill_rectangle+0x144>)
 80091e0:	8892      	ldrh	r2, [r2, #4]
 80091e2:	4293      	cmp	r3, r2
 80091e4:	dc51      	bgt.n	800928a <hagl_fill_rectangle+0x13a>
 80091e6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80091ea:	4a2a      	ldr	r2, [pc, #168]	; (8009294 <hagl_fill_rectangle+0x144>)
 80091ec:	88d2      	ldrh	r2, [r2, #6]
 80091ee:	4293      	cmp	r3, r2
 80091f0:	dc4b      	bgt.n	800928a <hagl_fill_rectangle+0x13a>
        return;
    }

    x0 = max(x0, clip_window.x0);
 80091f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80091f6:	4a27      	ldr	r2, [pc, #156]	; (8009294 <hagl_fill_rectangle+0x144>)
 80091f8:	8812      	ldrh	r2, [r2, #0]
 80091fa:	4611      	mov	r1, r2
 80091fc:	4618      	mov	r0, r3
 80091fe:	f7ff fe72 	bl	8008ee6 <max>
 8009202:	4603      	mov	r3, r0
 8009204:	80fb      	strh	r3, [r7, #6]
    y0 = max(y0, clip_window.y0);
 8009206:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800920a:	4a22      	ldr	r2, [pc, #136]	; (8009294 <hagl_fill_rectangle+0x144>)
 800920c:	8852      	ldrh	r2, [r2, #2]
 800920e:	4611      	mov	r1, r2
 8009210:	4618      	mov	r0, r3
 8009212:	f7ff fe68 	bl	8008ee6 <max>
 8009216:	4603      	mov	r3, r0
 8009218:	80bb      	strh	r3, [r7, #4]
    x1 = min(x1, clip_window.x1);
 800921a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800921e:	4a1d      	ldr	r2, [pc, #116]	; (8009294 <hagl_fill_rectangle+0x144>)
 8009220:	8892      	ldrh	r2, [r2, #4]
 8009222:	4611      	mov	r1, r2
 8009224:	4618      	mov	r0, r3
 8009226:	f7ff fe4c 	bl	8008ec2 <min>
 800922a:	4603      	mov	r3, r0
 800922c:	807b      	strh	r3, [r7, #2]
    y1 = min(y1, clip_window.y1);
 800922e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8009232:	4a18      	ldr	r2, [pc, #96]	; (8009294 <hagl_fill_rectangle+0x144>)
 8009234:	88d2      	ldrh	r2, [r2, #6]
 8009236:	4611      	mov	r1, r2
 8009238:	4618      	mov	r0, r3
 800923a:	f7ff fe42 	bl	8008ec2 <min>
 800923e:	4603      	mov	r3, r0
 8009240:	803b      	strh	r3, [r7, #0]

    uint16_t width = x1 - x0 + 1;
 8009242:	887a      	ldrh	r2, [r7, #2]
 8009244:	88fb      	ldrh	r3, [r7, #6]
 8009246:	1ad3      	subs	r3, r2, r3
 8009248:	b29b      	uxth	r3, r3
 800924a:	3301      	adds	r3, #1
 800924c:	81bb      	strh	r3, [r7, #12]
    uint16_t height = y1 - y0 + 1;
 800924e:	883a      	ldrh	r2, [r7, #0]
 8009250:	88bb      	ldrh	r3, [r7, #4]
 8009252:	1ad3      	subs	r3, r2, r3
 8009254:	b29b      	uxth	r3, r3
 8009256:	3301      	adds	r3, #1
 8009258:	817b      	strh	r3, [r7, #10]

    for (uint16_t i = 0; i < height; i++) {
 800925a:	2300      	movs	r3, #0
 800925c:	81fb      	strh	r3, [r7, #14]
 800925e:	e00d      	b.n	800927c <hagl_fill_rectangle+0x12c>
#ifdef HAGL_HAS_HAL_HLINE
        /* Already clipped so can call HAL directly. */
        hagl_hal_hline(x0, y0 + i, width, color);
#else
        hagl_draw_hline(x0, y0 + i, width, color);
 8009260:	88ba      	ldrh	r2, [r7, #4]
 8009262:	89fb      	ldrh	r3, [r7, #14]
 8009264:	4413      	add	r3, r2
 8009266:	b29b      	uxth	r3, r3
 8009268:	b219      	sxth	r1, r3
 800926a:	8c3b      	ldrh	r3, [r7, #32]
 800926c:	89ba      	ldrh	r2, [r7, #12]
 800926e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8009272:	f7ff fe9f 	bl	8008fb4 <hagl_draw_hline>
    for (uint16_t i = 0; i < height; i++) {
 8009276:	89fb      	ldrh	r3, [r7, #14]
 8009278:	3301      	adds	r3, #1
 800927a:	81fb      	strh	r3, [r7, #14]
 800927c:	89fa      	ldrh	r2, [r7, #14]
 800927e:	897b      	ldrh	r3, [r7, #10]
 8009280:	429a      	cmp	r2, r3
 8009282:	d3ed      	bcc.n	8009260 <hagl_fill_rectangle+0x110>
 8009284:	e002      	b.n	800928c <hagl_fill_rectangle+0x13c>
        return;
 8009286:	bf00      	nop
 8009288:	e000      	b.n	800928c <hagl_fill_rectangle+0x13c>
        return;
 800928a:	bf00      	nop
#endif
    }
}
 800928c:	3714      	adds	r7, #20
 800928e:	46bd      	mov	sp, r7
 8009290:	bd90      	pop	{r4, r7, pc}
 8009292:	bf00      	nop
 8009294:	2000000c 	.word	0x2000000c

08009298 <hagl_put_char>:

    return 0;
}

uint8_t hagl_put_char(wchar_t code, int16_t x0, int16_t y0, color_t color, const uint8_t *font)
{
 8009298:	b590      	push	{r4, r7, lr}
 800929a:	f5ad 5d81 	sub.w	sp, sp, #4128	; 0x1020
 800929e:	b085      	sub	sp, #20
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80092a6:	f844 0c24 	str.w	r0, [r4, #-36]
 80092aa:	460c      	mov	r4, r1
 80092ac:	4610      	mov	r0, r2
 80092ae:	4619      	mov	r1, r3
 80092b0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80092b4:	4622      	mov	r2, r4
 80092b6:	f823 2c26 	strh.w	r2, [r3, #-38]
 80092ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80092be:	4602      	mov	r2, r0
 80092c0:	f823 2c28 	strh.w	r2, [r3, #-40]
 80092c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80092c8:	460a      	mov	r2, r1
 80092ca:	f823 2c2a 	strh.w	r2, [r3, #-42]
    uint8_t set, status;
    color_t buffer[HAGL_CHAR_BUFFER_SIZE];
    bitmap_t bitmap;
    fontx_glyph_t glyph;

    status = fontx_glyph(&glyph, code, font);
 80092ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80092d2:	4619      	mov	r1, r3
 80092d4:	f107 0310 	add.w	r3, r7, #16
 80092d8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80092dc:	6812      	ldr	r2, [r2, #0]
 80092de:	f851 1c24 	ldr.w	r1, [r1, #-36]
 80092e2:	4618      	mov	r0, r3
 80092e4:	f7ff fd5b 	bl	8008d9e <fontx_glyph>
 80092e8:	4603      	mov	r3, r0
 80092ea:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80092ee:	f102 0209 	add.w	r2, r2, #9
 80092f2:	7013      	strb	r3, [r2, #0]

    if (0 != status) {
 80092f4:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80092f8:	f103 0309 	add.w	r3, r3, #9
 80092fc:	781b      	ldrb	r3, [r3, #0]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d001      	beq.n	8009306 <hagl_put_char+0x6e>
        return 0;
 8009302:	2300      	movs	r3, #0
 8009304:	e0c9      	b.n	800949a <hagl_put_char+0x202>
    }

    bitmap.width = glyph.width,
 8009306:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800930a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800930e:	b29a      	uxth	r2, r3
 8009310:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009314:	f823 2c18 	strh.w	r2, [r3, #-24]
    bitmap.height = glyph.height,
 8009318:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800931c:	f813 3c1f 	ldrb.w	r3, [r3, #-31]
 8009320:	b29a      	uxth	r2, r3
 8009322:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009326:	f823 2c16 	strh.w	r2, [r3, #-22]
    bitmap.depth = DISPLAY_DEPTH,
 800932a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800932e:	2210      	movs	r2, #16
 8009330:	f803 2c12 	strb.w	r2, [r3, #-18]

    bitmap_init(&bitmap, (uint8_t *)buffer);
 8009334:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8009338:	3a08      	subs	r2, #8
 800933a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800933e:	3b18      	subs	r3, #24
 8009340:	4611      	mov	r1, r2
 8009342:	4618      	mov	r0, r3
 8009344:	f7ff fb95 	bl	8008a72 <bitmap_init>

    color_t *ptr = (color_t *) bitmap.buffer;
 8009348:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800934c:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 8009350:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8009354:	f102 020c 	add.w	r2, r2, #12
 8009358:	6013      	str	r3, [r2, #0]

    for (uint8_t y = 0; y < glyph.height; y++) {
 800935a:	2300      	movs	r3, #0
 800935c:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8009360:	f102 020b 	add.w	r2, r2, #11
 8009364:	7013      	strb	r3, [r2, #0]
 8009366:	e079      	b.n	800945c <hagl_put_char+0x1c4>
        for (uint8_t x = 0; x < glyph.width; x++) {
 8009368:	2300      	movs	r3, #0
 800936a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800936e:	f102 020a 	add.w	r2, r2, #10
 8009372:	7013      	strb	r3, [r2, #0]
 8009374:	e04f      	b.n	8009416 <hagl_put_char+0x17e>
            set = *(glyph.buffer + x / 8) & (0x80 >> (x % 8));
 8009376:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800937a:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 800937e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8009382:	f102 020a 	add.w	r2, r2, #10
 8009386:	7812      	ldrb	r2, [r2, #0]
 8009388:	08d2      	lsrs	r2, r2, #3
 800938a:	b2d2      	uxtb	r2, r2
 800938c:	4413      	add	r3, r2
 800938e:	781b      	ldrb	r3, [r3, #0]
 8009390:	b25a      	sxtb	r2, r3
 8009392:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8009396:	f103 030a 	add.w	r3, r3, #10
 800939a:	781b      	ldrb	r3, [r3, #0]
 800939c:	f003 0307 	and.w	r3, r3, #7
 80093a0:	2180      	movs	r1, #128	; 0x80
 80093a2:	fa41 f303 	asr.w	r3, r1, r3
 80093a6:	b25b      	sxtb	r3, r3
 80093a8:	4013      	ands	r3, r2
 80093aa:	b25b      	sxtb	r3, r3
 80093ac:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80093b0:	f102 0208 	add.w	r2, r2, #8
 80093b4:	7013      	strb	r3, [r2, #0]
            if (set) {
 80093b6:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80093ba:	f103 0308 	add.w	r3, r3, #8
 80093be:	781b      	ldrb	r3, [r3, #0]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d010      	beq.n	80093e6 <hagl_put_char+0x14e>
                *(ptr++) = color;
 80093c4:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80093c8:	f103 030c 	add.w	r3, r3, #12
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	1c9a      	adds	r2, r3, #2
 80093d0:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 80093d4:	f101 010c 	add.w	r1, r1, #12
 80093d8:	600a      	str	r2, [r1, #0]
 80093da:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80093de:	f832 2c2a 	ldrh.w	r2, [r2, #-42]
 80093e2:	801a      	strh	r2, [r3, #0]
 80093e4:	e00c      	b.n	8009400 <hagl_put_char+0x168>
            } else {
                *(ptr++) = 0x0000;
 80093e6:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80093ea:	f103 030c 	add.w	r3, r3, #12
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	1c9a      	adds	r2, r3, #2
 80093f2:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 80093f6:	f101 010c 	add.w	r1, r1, #12
 80093fa:	600a      	str	r2, [r1, #0]
 80093fc:	2200      	movs	r2, #0
 80093fe:	801a      	strh	r2, [r3, #0]
        for (uint8_t x = 0; x < glyph.width; x++) {
 8009400:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8009404:	f103 030a 	add.w	r3, r3, #10
 8009408:	781b      	ldrb	r3, [r3, #0]
 800940a:	3301      	adds	r3, #1
 800940c:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8009410:	f102 020a 	add.w	r2, r2, #10
 8009414:	7013      	strb	r3, [r2, #0]
 8009416:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800941a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800941e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8009422:	f102 020a 	add.w	r2, r2, #10
 8009426:	7812      	ldrb	r2, [r2, #0]
 8009428:	429a      	cmp	r2, r3
 800942a:	d3a4      	bcc.n	8009376 <hagl_put_char+0xde>
            }
        }
        glyph.buffer += glyph.pitch;
 800942c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009430:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8009434:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8009438:	f812 2c1d 	ldrb.w	r2, [r2, #-29]
 800943c:	4413      	add	r3, r2
 800943e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8009442:	f842 3c1c 	str.w	r3, [r2, #-28]
    for (uint8_t y = 0; y < glyph.height; y++) {
 8009446:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800944a:	f103 030b 	add.w	r3, r3, #11
 800944e:	781b      	ldrb	r3, [r3, #0]
 8009450:	3301      	adds	r3, #1
 8009452:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8009456:	f102 020b 	add.w	r2, r2, #11
 800945a:	7013      	strb	r3, [r2, #0]
 800945c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009460:	f813 3c1f 	ldrb.w	r3, [r3, #-31]
 8009464:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8009468:	f102 020b 	add.w	r2, r2, #11
 800946c:	7812      	ldrb	r2, [r2, #0]
 800946e:	429a      	cmp	r2, r3
 8009470:	f4ff af7a 	bcc.w	8009368 <hagl_put_char+0xd0>
    }

    hagl_blit(x0, y0, &bitmap);
 8009474:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009478:	3b18      	subs	r3, #24
 800947a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800947e:	f932 1c28 	ldrsh.w	r1, [r2, #-40]
 8009482:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8009486:	f932 0c26 	ldrsh.w	r0, [r2, #-38]
 800948a:	461a      	mov	r2, r3
 800948c:	f000 f85a 	bl	8009544 <hagl_blit>

    return bitmap.width;
 8009490:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009494:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8009498:	b2db      	uxtb	r3, r3
}
 800949a:	4618      	mov	r0, r3
 800949c:	f507 5781 	add.w	r7, r7, #4128	; 0x1020
 80094a0:	3714      	adds	r7, #20
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd90      	pop	{r4, r7, pc}

080094a6 <hagl_put_text>:
 * Write a string of text by calling hagl_put_char() repeadetly. CR and LF
 * continue from the next line.
 */

uint16_t hagl_put_text(const wchar_t *str, int16_t x0, int16_t y0, color_t color, const unsigned char *font)
{
 80094a6:	b580      	push	{r7, lr}
 80094a8:	b08c      	sub	sp, #48	; 0x30
 80094aa:	af02      	add	r7, sp, #8
 80094ac:	60f8      	str	r0, [r7, #12]
 80094ae:	4608      	mov	r0, r1
 80094b0:	4611      	mov	r1, r2
 80094b2:	461a      	mov	r2, r3
 80094b4:	4603      	mov	r3, r0
 80094b6:	817b      	strh	r3, [r7, #10]
 80094b8:	460b      	mov	r3, r1
 80094ba:	813b      	strh	r3, [r7, #8]
 80094bc:	4613      	mov	r3, r2
 80094be:	80fb      	strh	r3, [r7, #6]
    wchar_t temp;
    uint8_t status;
    uint16_t original = x0;
 80094c0:	897b      	ldrh	r3, [r7, #10]
 80094c2:	84fb      	strh	r3, [r7, #38]	; 0x26
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 80094c4:	f107 0314 	add.w	r3, r7, #20
 80094c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80094ca:	4618      	mov	r0, r3
 80094cc:	f7ff fc4a 	bl	8008d64 <fontx_meta>
 80094d0:	4603      	mov	r3, r0
 80094d2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    if (0 != status) {
 80094d6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d001      	beq.n	80094e2 <hagl_put_text+0x3c>
        return 0;
 80094de:	2300      	movs	r3, #0
 80094e0:	e02c      	b.n	800953c <hagl_put_text+0x96>
    }

    do {
        temp = *str++;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	1d1a      	adds	r2, r3, #4
 80094e6:	60fa      	str	r2, [r7, #12]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	623b      	str	r3, [r7, #32]
        if (13 == temp || 10 == temp) {
 80094ec:	6a3b      	ldr	r3, [r7, #32]
 80094ee:	2b0d      	cmp	r3, #13
 80094f0:	d002      	beq.n	80094f8 <hagl_put_text+0x52>
 80094f2:	6a3b      	ldr	r3, [r7, #32]
 80094f4:	2b0a      	cmp	r3, #10
 80094f6:	d108      	bne.n	800950a <hagl_put_text+0x64>
            x0 = 0;
 80094f8:	2300      	movs	r3, #0
 80094fa:	817b      	strh	r3, [r7, #10]
            y0 += meta.height;
 80094fc:	7fbb      	ldrb	r3, [r7, #30]
 80094fe:	b29a      	uxth	r2, r3
 8009500:	893b      	ldrh	r3, [r7, #8]
 8009502:	4413      	add	r3, r2
 8009504:	b29b      	uxth	r3, r3
 8009506:	813b      	strh	r3, [r7, #8]
 8009508:	e010      	b.n	800952c <hagl_put_text+0x86>
        } else {
            x0 += hagl_put_char(temp, x0, y0, color, font);
 800950a:	88f8      	ldrh	r0, [r7, #6]
 800950c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8009510:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8009514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009516:	9300      	str	r3, [sp, #0]
 8009518:	4603      	mov	r3, r0
 800951a:	6a38      	ldr	r0, [r7, #32]
 800951c:	f7ff febc 	bl	8009298 <hagl_put_char>
 8009520:	4603      	mov	r3, r0
 8009522:	b29a      	uxth	r2, r3
 8009524:	897b      	ldrh	r3, [r7, #10]
 8009526:	4413      	add	r3, r2
 8009528:	b29b      	uxth	r3, r3
 800952a:	817b      	strh	r3, [r7, #10]
        }
    } while (*str != 0);
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d1d6      	bne.n	80094e2 <hagl_put_text+0x3c>

    return x0 - original;
 8009534:	897a      	ldrh	r2, [r7, #10]
 8009536:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009538:	1ad3      	subs	r3, r2, r3
 800953a:	b29b      	uxth	r3, r3
}
 800953c:	4618      	mov	r0, r3
 800953e:	3728      	adds	r7, #40	; 0x28
 8009540:	46bd      	mov	sp, r7
 8009542:	bd80      	pop	{r7, pc}

08009544 <hagl_blit>:
 * configurable source and destination see the file blit.c.
 *
 * TODO: Handle transparency.
 */

void hagl_blit(int16_t x0, int16_t y0, bitmap_t *source) {
 8009544:	b580      	push	{r7, lr}
 8009546:	b086      	sub	sp, #24
 8009548:	af00      	add	r7, sp, #0
 800954a:	4603      	mov	r3, r0
 800954c:	603a      	str	r2, [r7, #0]
 800954e:	80fb      	strh	r3, [r7, #6]
 8009550:	460b      	mov	r3, r1
 8009552:	80bb      	strh	r3, [r7, #4]
        /* Inside of bounds, can use HAL provided blit. */
        hagl_hal_blit(x0, y0, source);
    }
#else
    color_t color;
    color_t *ptr = (color_t *) source->buffer;
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	68db      	ldr	r3, [r3, #12]
 8009558:	617b      	str	r3, [r7, #20]

    for (uint16_t y = 0; y < source->height; y++) {
 800955a:	2300      	movs	r3, #0
 800955c:	827b      	strh	r3, [r7, #18]
 800955e:	e020      	b.n	80095a2 <hagl_blit+0x5e>
        for (uint16_t x = 0; x < source->width; x++) {
 8009560:	2300      	movs	r3, #0
 8009562:	823b      	strh	r3, [r7, #16]
 8009564:	e015      	b.n	8009592 <hagl_blit+0x4e>
            color = *(ptr++);
 8009566:	697b      	ldr	r3, [r7, #20]
 8009568:	1c9a      	adds	r2, r3, #2
 800956a:	617a      	str	r2, [r7, #20]
 800956c:	881b      	ldrh	r3, [r3, #0]
 800956e:	81fb      	strh	r3, [r7, #14]
            hagl_put_pixel(x0 + x, y0 + y, color);
 8009570:	88fa      	ldrh	r2, [r7, #6]
 8009572:	8a3b      	ldrh	r3, [r7, #16]
 8009574:	4413      	add	r3, r2
 8009576:	b29b      	uxth	r3, r3
 8009578:	b218      	sxth	r0, r3
 800957a:	88ba      	ldrh	r2, [r7, #4]
 800957c:	8a7b      	ldrh	r3, [r7, #18]
 800957e:	4413      	add	r3, r2
 8009580:	b29b      	uxth	r3, r3
 8009582:	b21b      	sxth	r3, r3
 8009584:	89fa      	ldrh	r2, [r7, #14]
 8009586:	4619      	mov	r1, r3
 8009588:	f7ff fce2 	bl	8008f50 <hagl_put_pixel>
        for (uint16_t x = 0; x < source->width; x++) {
 800958c:	8a3b      	ldrh	r3, [r7, #16]
 800958e:	3301      	adds	r3, #1
 8009590:	823b      	strh	r3, [r7, #16]
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	881b      	ldrh	r3, [r3, #0]
 8009596:	8a3a      	ldrh	r2, [r7, #16]
 8009598:	429a      	cmp	r2, r3
 800959a:	d3e4      	bcc.n	8009566 <hagl_blit+0x22>
    for (uint16_t y = 0; y < source->height; y++) {
 800959c:	8a7b      	ldrh	r3, [r7, #18]
 800959e:	3301      	adds	r3, #1
 80095a0:	827b      	strh	r3, [r7, #18]
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	885b      	ldrh	r3, [r3, #2]
 80095a6:	8a7a      	ldrh	r2, [r7, #18]
 80095a8:	429a      	cmp	r2, r3
 80095aa:	d3d9      	bcc.n	8009560 <hagl_blit+0x1c>
        }
    }
#endif
};
 80095ac:	bf00      	nop
 80095ae:	bf00      	nop
 80095b0:	3718      	adds	r7, #24
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bd80      	pop	{r7, pc}
	...

080095b8 <hagl_clear_screen>:
        }
    }
#endif
};

void hagl_clear_screen() {
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b084      	sub	sp, #16
 80095bc:	af02      	add	r7, sp, #8
#ifdef HAGL_HAS_HAL_CLEAR_SCREEN
    hagl_hal_clear_screen();
#else
    uint16_t x0 = clip_window.x0;
 80095be:	4b12      	ldr	r3, [pc, #72]	; (8009608 <hagl_clear_screen+0x50>)
 80095c0:	881b      	ldrh	r3, [r3, #0]
 80095c2:	80fb      	strh	r3, [r7, #6]
    uint16_t y0 = clip_window.y0;
 80095c4:	4b10      	ldr	r3, [pc, #64]	; (8009608 <hagl_clear_screen+0x50>)
 80095c6:	885b      	ldrh	r3, [r3, #2]
 80095c8:	80bb      	strh	r3, [r7, #4]
    uint16_t x1 = clip_window.x1;
 80095ca:	4b0f      	ldr	r3, [pc, #60]	; (8009608 <hagl_clear_screen+0x50>)
 80095cc:	889b      	ldrh	r3, [r3, #4]
 80095ce:	807b      	strh	r3, [r7, #2]
    uint16_t y1 = clip_window.y1;
 80095d0:	4b0d      	ldr	r3, [pc, #52]	; (8009608 <hagl_clear_screen+0x50>)
 80095d2:	88db      	ldrh	r3, [r3, #6]
 80095d4:	803b      	strh	r3, [r7, #0]

    hagl_set_clip_window(0, 0, DISPLAY_WIDTH - 1, DISPLAY_HEIGHT -1);
 80095d6:	237f      	movs	r3, #127	; 0x7f
 80095d8:	229f      	movs	r2, #159	; 0x9f
 80095da:	2100      	movs	r1, #0
 80095dc:	2000      	movs	r0, #0
 80095de:	f7ff fc95 	bl	8008f0c <hagl_set_clip_window>
    hagl_fill_rectangle(0, 0, DISPLAY_WIDTH - 1, DISPLAY_HEIGHT -1, 0x00);
 80095e2:	2300      	movs	r3, #0
 80095e4:	9300      	str	r3, [sp, #0]
 80095e6:	237f      	movs	r3, #127	; 0x7f
 80095e8:	229f      	movs	r2, #159	; 0x9f
 80095ea:	2100      	movs	r1, #0
 80095ec:	2000      	movs	r0, #0
 80095ee:	f7ff fdaf 	bl	8009150 <hagl_fill_rectangle>
    hagl_set_clip_window(x0, y0, x1, y1);
 80095f2:	883b      	ldrh	r3, [r7, #0]
 80095f4:	887a      	ldrh	r2, [r7, #2]
 80095f6:	88b9      	ldrh	r1, [r7, #4]
 80095f8:	88f8      	ldrh	r0, [r7, #6]
 80095fa:	f7ff fc87 	bl	8008f0c <hagl_set_clip_window>
#endif
}
 80095fe:	bf00      	nop
 8009600:	3708      	adds	r7, #8
 8009602:	46bd      	mov	sp, r7
 8009604:	bd80      	pop	{r7, pc}
 8009606:	bf00      	nop
 8009608:	2000000c 	.word	0x2000000c

0800960c <hagl_init>:
#else
    return rgb565(r, g, b);
#endif
}

bitmap_t *hagl_init() {
 800960c:	b580      	push	{r7, lr}
 800960e:	af00      	add	r7, sp, #0
#ifdef HAGL_HAS_HAL_INIT
    bitmap_t *bb = hagl_hal_init();
    hagl_clear_screen();
    return bb;
#else
    hagl_clear_screen();
 8009610:	f7ff ffd2 	bl	80095b8 <hagl_clear_screen>
    return NULL;
 8009614:	2300      	movs	r3, #0
#endif
};
 8009616:	4618      	mov	r0, r3
 8009618:	bd80      	pop	{r7, pc}
	...

0800961c <__errno>:
 800961c:	4b01      	ldr	r3, [pc, #4]	; (8009624 <__errno+0x8>)
 800961e:	6818      	ldr	r0, [r3, #0]
 8009620:	4770      	bx	lr
 8009622:	bf00      	nop
 8009624:	20000014 	.word	0x20000014

08009628 <__sflush_r>:
 8009628:	898a      	ldrh	r2, [r1, #12]
 800962a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800962e:	4605      	mov	r5, r0
 8009630:	0710      	lsls	r0, r2, #28
 8009632:	460c      	mov	r4, r1
 8009634:	d458      	bmi.n	80096e8 <__sflush_r+0xc0>
 8009636:	684b      	ldr	r3, [r1, #4]
 8009638:	2b00      	cmp	r3, #0
 800963a:	dc05      	bgt.n	8009648 <__sflush_r+0x20>
 800963c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800963e:	2b00      	cmp	r3, #0
 8009640:	dc02      	bgt.n	8009648 <__sflush_r+0x20>
 8009642:	2000      	movs	r0, #0
 8009644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009648:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800964a:	2e00      	cmp	r6, #0
 800964c:	d0f9      	beq.n	8009642 <__sflush_r+0x1a>
 800964e:	2300      	movs	r3, #0
 8009650:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009654:	682f      	ldr	r7, [r5, #0]
 8009656:	602b      	str	r3, [r5, #0]
 8009658:	d032      	beq.n	80096c0 <__sflush_r+0x98>
 800965a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800965c:	89a3      	ldrh	r3, [r4, #12]
 800965e:	075a      	lsls	r2, r3, #29
 8009660:	d505      	bpl.n	800966e <__sflush_r+0x46>
 8009662:	6863      	ldr	r3, [r4, #4]
 8009664:	1ac0      	subs	r0, r0, r3
 8009666:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009668:	b10b      	cbz	r3, 800966e <__sflush_r+0x46>
 800966a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800966c:	1ac0      	subs	r0, r0, r3
 800966e:	2300      	movs	r3, #0
 8009670:	4602      	mov	r2, r0
 8009672:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009674:	6a21      	ldr	r1, [r4, #32]
 8009676:	4628      	mov	r0, r5
 8009678:	47b0      	blx	r6
 800967a:	1c43      	adds	r3, r0, #1
 800967c:	89a3      	ldrh	r3, [r4, #12]
 800967e:	d106      	bne.n	800968e <__sflush_r+0x66>
 8009680:	6829      	ldr	r1, [r5, #0]
 8009682:	291d      	cmp	r1, #29
 8009684:	d82c      	bhi.n	80096e0 <__sflush_r+0xb8>
 8009686:	4a2a      	ldr	r2, [pc, #168]	; (8009730 <__sflush_r+0x108>)
 8009688:	40ca      	lsrs	r2, r1
 800968a:	07d6      	lsls	r6, r2, #31
 800968c:	d528      	bpl.n	80096e0 <__sflush_r+0xb8>
 800968e:	2200      	movs	r2, #0
 8009690:	6062      	str	r2, [r4, #4]
 8009692:	04d9      	lsls	r1, r3, #19
 8009694:	6922      	ldr	r2, [r4, #16]
 8009696:	6022      	str	r2, [r4, #0]
 8009698:	d504      	bpl.n	80096a4 <__sflush_r+0x7c>
 800969a:	1c42      	adds	r2, r0, #1
 800969c:	d101      	bne.n	80096a2 <__sflush_r+0x7a>
 800969e:	682b      	ldr	r3, [r5, #0]
 80096a0:	b903      	cbnz	r3, 80096a4 <__sflush_r+0x7c>
 80096a2:	6560      	str	r0, [r4, #84]	; 0x54
 80096a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80096a6:	602f      	str	r7, [r5, #0]
 80096a8:	2900      	cmp	r1, #0
 80096aa:	d0ca      	beq.n	8009642 <__sflush_r+0x1a>
 80096ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80096b0:	4299      	cmp	r1, r3
 80096b2:	d002      	beq.n	80096ba <__sflush_r+0x92>
 80096b4:	4628      	mov	r0, r5
 80096b6:	f000 fa33 	bl	8009b20 <_free_r>
 80096ba:	2000      	movs	r0, #0
 80096bc:	6360      	str	r0, [r4, #52]	; 0x34
 80096be:	e7c1      	b.n	8009644 <__sflush_r+0x1c>
 80096c0:	6a21      	ldr	r1, [r4, #32]
 80096c2:	2301      	movs	r3, #1
 80096c4:	4628      	mov	r0, r5
 80096c6:	47b0      	blx	r6
 80096c8:	1c41      	adds	r1, r0, #1
 80096ca:	d1c7      	bne.n	800965c <__sflush_r+0x34>
 80096cc:	682b      	ldr	r3, [r5, #0]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d0c4      	beq.n	800965c <__sflush_r+0x34>
 80096d2:	2b1d      	cmp	r3, #29
 80096d4:	d001      	beq.n	80096da <__sflush_r+0xb2>
 80096d6:	2b16      	cmp	r3, #22
 80096d8:	d101      	bne.n	80096de <__sflush_r+0xb6>
 80096da:	602f      	str	r7, [r5, #0]
 80096dc:	e7b1      	b.n	8009642 <__sflush_r+0x1a>
 80096de:	89a3      	ldrh	r3, [r4, #12]
 80096e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096e4:	81a3      	strh	r3, [r4, #12]
 80096e6:	e7ad      	b.n	8009644 <__sflush_r+0x1c>
 80096e8:	690f      	ldr	r7, [r1, #16]
 80096ea:	2f00      	cmp	r7, #0
 80096ec:	d0a9      	beq.n	8009642 <__sflush_r+0x1a>
 80096ee:	0793      	lsls	r3, r2, #30
 80096f0:	680e      	ldr	r6, [r1, #0]
 80096f2:	bf08      	it	eq
 80096f4:	694b      	ldreq	r3, [r1, #20]
 80096f6:	600f      	str	r7, [r1, #0]
 80096f8:	bf18      	it	ne
 80096fa:	2300      	movne	r3, #0
 80096fc:	eba6 0807 	sub.w	r8, r6, r7
 8009700:	608b      	str	r3, [r1, #8]
 8009702:	f1b8 0f00 	cmp.w	r8, #0
 8009706:	dd9c      	ble.n	8009642 <__sflush_r+0x1a>
 8009708:	6a21      	ldr	r1, [r4, #32]
 800970a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800970c:	4643      	mov	r3, r8
 800970e:	463a      	mov	r2, r7
 8009710:	4628      	mov	r0, r5
 8009712:	47b0      	blx	r6
 8009714:	2800      	cmp	r0, #0
 8009716:	dc06      	bgt.n	8009726 <__sflush_r+0xfe>
 8009718:	89a3      	ldrh	r3, [r4, #12]
 800971a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800971e:	81a3      	strh	r3, [r4, #12]
 8009720:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009724:	e78e      	b.n	8009644 <__sflush_r+0x1c>
 8009726:	4407      	add	r7, r0
 8009728:	eba8 0800 	sub.w	r8, r8, r0
 800972c:	e7e9      	b.n	8009702 <__sflush_r+0xda>
 800972e:	bf00      	nop
 8009730:	20400001 	.word	0x20400001

08009734 <_fflush_r>:
 8009734:	b538      	push	{r3, r4, r5, lr}
 8009736:	690b      	ldr	r3, [r1, #16]
 8009738:	4605      	mov	r5, r0
 800973a:	460c      	mov	r4, r1
 800973c:	b913      	cbnz	r3, 8009744 <_fflush_r+0x10>
 800973e:	2500      	movs	r5, #0
 8009740:	4628      	mov	r0, r5
 8009742:	bd38      	pop	{r3, r4, r5, pc}
 8009744:	b118      	cbz	r0, 800974e <_fflush_r+0x1a>
 8009746:	6983      	ldr	r3, [r0, #24]
 8009748:	b90b      	cbnz	r3, 800974e <_fflush_r+0x1a>
 800974a:	f000 f899 	bl	8009880 <__sinit>
 800974e:	4b14      	ldr	r3, [pc, #80]	; (80097a0 <_fflush_r+0x6c>)
 8009750:	429c      	cmp	r4, r3
 8009752:	d11b      	bne.n	800978c <_fflush_r+0x58>
 8009754:	686c      	ldr	r4, [r5, #4]
 8009756:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d0ef      	beq.n	800973e <_fflush_r+0xa>
 800975e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009760:	07d0      	lsls	r0, r2, #31
 8009762:	d404      	bmi.n	800976e <_fflush_r+0x3a>
 8009764:	0599      	lsls	r1, r3, #22
 8009766:	d402      	bmi.n	800976e <_fflush_r+0x3a>
 8009768:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800976a:	f000 f94c 	bl	8009a06 <__retarget_lock_acquire_recursive>
 800976e:	4628      	mov	r0, r5
 8009770:	4621      	mov	r1, r4
 8009772:	f7ff ff59 	bl	8009628 <__sflush_r>
 8009776:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009778:	07da      	lsls	r2, r3, #31
 800977a:	4605      	mov	r5, r0
 800977c:	d4e0      	bmi.n	8009740 <_fflush_r+0xc>
 800977e:	89a3      	ldrh	r3, [r4, #12]
 8009780:	059b      	lsls	r3, r3, #22
 8009782:	d4dd      	bmi.n	8009740 <_fflush_r+0xc>
 8009784:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009786:	f000 f93f 	bl	8009a08 <__retarget_lock_release_recursive>
 800978a:	e7d9      	b.n	8009740 <_fflush_r+0xc>
 800978c:	4b05      	ldr	r3, [pc, #20]	; (80097a4 <_fflush_r+0x70>)
 800978e:	429c      	cmp	r4, r3
 8009790:	d101      	bne.n	8009796 <_fflush_r+0x62>
 8009792:	68ac      	ldr	r4, [r5, #8]
 8009794:	e7df      	b.n	8009756 <_fflush_r+0x22>
 8009796:	4b04      	ldr	r3, [pc, #16]	; (80097a8 <_fflush_r+0x74>)
 8009798:	429c      	cmp	r4, r3
 800979a:	bf08      	it	eq
 800979c:	68ec      	ldreq	r4, [r5, #12]
 800979e:	e7da      	b.n	8009756 <_fflush_r+0x22>
 80097a0:	08012ef4 	.word	0x08012ef4
 80097a4:	08012f14 	.word	0x08012f14
 80097a8:	08012ed4 	.word	0x08012ed4

080097ac <fflush>:
 80097ac:	4601      	mov	r1, r0
 80097ae:	b920      	cbnz	r0, 80097ba <fflush+0xe>
 80097b0:	4b04      	ldr	r3, [pc, #16]	; (80097c4 <fflush+0x18>)
 80097b2:	4905      	ldr	r1, [pc, #20]	; (80097c8 <fflush+0x1c>)
 80097b4:	6818      	ldr	r0, [r3, #0]
 80097b6:	f000 b8e1 	b.w	800997c <_fwalk_reent>
 80097ba:	4b04      	ldr	r3, [pc, #16]	; (80097cc <fflush+0x20>)
 80097bc:	6818      	ldr	r0, [r3, #0]
 80097be:	f7ff bfb9 	b.w	8009734 <_fflush_r>
 80097c2:	bf00      	nop
 80097c4:	08012f34 	.word	0x08012f34
 80097c8:	08009735 	.word	0x08009735
 80097cc:	20000014 	.word	0x20000014

080097d0 <std>:
 80097d0:	2300      	movs	r3, #0
 80097d2:	b510      	push	{r4, lr}
 80097d4:	4604      	mov	r4, r0
 80097d6:	e9c0 3300 	strd	r3, r3, [r0]
 80097da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80097de:	6083      	str	r3, [r0, #8]
 80097e0:	8181      	strh	r1, [r0, #12]
 80097e2:	6643      	str	r3, [r0, #100]	; 0x64
 80097e4:	81c2      	strh	r2, [r0, #14]
 80097e6:	6183      	str	r3, [r0, #24]
 80097e8:	4619      	mov	r1, r3
 80097ea:	2208      	movs	r2, #8
 80097ec:	305c      	adds	r0, #92	; 0x5c
 80097ee:	f000 f98f 	bl	8009b10 <memset>
 80097f2:	4b05      	ldr	r3, [pc, #20]	; (8009808 <std+0x38>)
 80097f4:	6263      	str	r3, [r4, #36]	; 0x24
 80097f6:	4b05      	ldr	r3, [pc, #20]	; (800980c <std+0x3c>)
 80097f8:	62a3      	str	r3, [r4, #40]	; 0x28
 80097fa:	4b05      	ldr	r3, [pc, #20]	; (8009810 <std+0x40>)
 80097fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80097fe:	4b05      	ldr	r3, [pc, #20]	; (8009814 <std+0x44>)
 8009800:	6224      	str	r4, [r4, #32]
 8009802:	6323      	str	r3, [r4, #48]	; 0x30
 8009804:	bd10      	pop	{r4, pc}
 8009806:	bf00      	nop
 8009808:	0800a775 	.word	0x0800a775
 800980c:	0800a79b 	.word	0x0800a79b
 8009810:	0800a7d3 	.word	0x0800a7d3
 8009814:	0800a7f7 	.word	0x0800a7f7

08009818 <_cleanup_r>:
 8009818:	4901      	ldr	r1, [pc, #4]	; (8009820 <_cleanup_r+0x8>)
 800981a:	f000 b8af 	b.w	800997c <_fwalk_reent>
 800981e:	bf00      	nop
 8009820:	08009735 	.word	0x08009735

08009824 <__sfmoreglue>:
 8009824:	b570      	push	{r4, r5, r6, lr}
 8009826:	2268      	movs	r2, #104	; 0x68
 8009828:	1e4d      	subs	r5, r1, #1
 800982a:	4355      	muls	r5, r2
 800982c:	460e      	mov	r6, r1
 800982e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009832:	f000 f9e1 	bl	8009bf8 <_malloc_r>
 8009836:	4604      	mov	r4, r0
 8009838:	b140      	cbz	r0, 800984c <__sfmoreglue+0x28>
 800983a:	2100      	movs	r1, #0
 800983c:	e9c0 1600 	strd	r1, r6, [r0]
 8009840:	300c      	adds	r0, #12
 8009842:	60a0      	str	r0, [r4, #8]
 8009844:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009848:	f000 f962 	bl	8009b10 <memset>
 800984c:	4620      	mov	r0, r4
 800984e:	bd70      	pop	{r4, r5, r6, pc}

08009850 <__sfp_lock_acquire>:
 8009850:	4801      	ldr	r0, [pc, #4]	; (8009858 <__sfp_lock_acquire+0x8>)
 8009852:	f000 b8d8 	b.w	8009a06 <__retarget_lock_acquire_recursive>
 8009856:	bf00      	nop
 8009858:	20000491 	.word	0x20000491

0800985c <__sfp_lock_release>:
 800985c:	4801      	ldr	r0, [pc, #4]	; (8009864 <__sfp_lock_release+0x8>)
 800985e:	f000 b8d3 	b.w	8009a08 <__retarget_lock_release_recursive>
 8009862:	bf00      	nop
 8009864:	20000491 	.word	0x20000491

08009868 <__sinit_lock_acquire>:
 8009868:	4801      	ldr	r0, [pc, #4]	; (8009870 <__sinit_lock_acquire+0x8>)
 800986a:	f000 b8cc 	b.w	8009a06 <__retarget_lock_acquire_recursive>
 800986e:	bf00      	nop
 8009870:	20000492 	.word	0x20000492

08009874 <__sinit_lock_release>:
 8009874:	4801      	ldr	r0, [pc, #4]	; (800987c <__sinit_lock_release+0x8>)
 8009876:	f000 b8c7 	b.w	8009a08 <__retarget_lock_release_recursive>
 800987a:	bf00      	nop
 800987c:	20000492 	.word	0x20000492

08009880 <__sinit>:
 8009880:	b510      	push	{r4, lr}
 8009882:	4604      	mov	r4, r0
 8009884:	f7ff fff0 	bl	8009868 <__sinit_lock_acquire>
 8009888:	69a3      	ldr	r3, [r4, #24]
 800988a:	b11b      	cbz	r3, 8009894 <__sinit+0x14>
 800988c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009890:	f7ff bff0 	b.w	8009874 <__sinit_lock_release>
 8009894:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009898:	6523      	str	r3, [r4, #80]	; 0x50
 800989a:	4b13      	ldr	r3, [pc, #76]	; (80098e8 <__sinit+0x68>)
 800989c:	4a13      	ldr	r2, [pc, #76]	; (80098ec <__sinit+0x6c>)
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	62a2      	str	r2, [r4, #40]	; 0x28
 80098a2:	42a3      	cmp	r3, r4
 80098a4:	bf04      	itt	eq
 80098a6:	2301      	moveq	r3, #1
 80098a8:	61a3      	streq	r3, [r4, #24]
 80098aa:	4620      	mov	r0, r4
 80098ac:	f000 f820 	bl	80098f0 <__sfp>
 80098b0:	6060      	str	r0, [r4, #4]
 80098b2:	4620      	mov	r0, r4
 80098b4:	f000 f81c 	bl	80098f0 <__sfp>
 80098b8:	60a0      	str	r0, [r4, #8]
 80098ba:	4620      	mov	r0, r4
 80098bc:	f000 f818 	bl	80098f0 <__sfp>
 80098c0:	2200      	movs	r2, #0
 80098c2:	60e0      	str	r0, [r4, #12]
 80098c4:	2104      	movs	r1, #4
 80098c6:	6860      	ldr	r0, [r4, #4]
 80098c8:	f7ff ff82 	bl	80097d0 <std>
 80098cc:	68a0      	ldr	r0, [r4, #8]
 80098ce:	2201      	movs	r2, #1
 80098d0:	2109      	movs	r1, #9
 80098d2:	f7ff ff7d 	bl	80097d0 <std>
 80098d6:	68e0      	ldr	r0, [r4, #12]
 80098d8:	2202      	movs	r2, #2
 80098da:	2112      	movs	r1, #18
 80098dc:	f7ff ff78 	bl	80097d0 <std>
 80098e0:	2301      	movs	r3, #1
 80098e2:	61a3      	str	r3, [r4, #24]
 80098e4:	e7d2      	b.n	800988c <__sinit+0xc>
 80098e6:	bf00      	nop
 80098e8:	08012f34 	.word	0x08012f34
 80098ec:	08009819 	.word	0x08009819

080098f0 <__sfp>:
 80098f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098f2:	4607      	mov	r7, r0
 80098f4:	f7ff ffac 	bl	8009850 <__sfp_lock_acquire>
 80098f8:	4b1e      	ldr	r3, [pc, #120]	; (8009974 <__sfp+0x84>)
 80098fa:	681e      	ldr	r6, [r3, #0]
 80098fc:	69b3      	ldr	r3, [r6, #24]
 80098fe:	b913      	cbnz	r3, 8009906 <__sfp+0x16>
 8009900:	4630      	mov	r0, r6
 8009902:	f7ff ffbd 	bl	8009880 <__sinit>
 8009906:	3648      	adds	r6, #72	; 0x48
 8009908:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800990c:	3b01      	subs	r3, #1
 800990e:	d503      	bpl.n	8009918 <__sfp+0x28>
 8009910:	6833      	ldr	r3, [r6, #0]
 8009912:	b30b      	cbz	r3, 8009958 <__sfp+0x68>
 8009914:	6836      	ldr	r6, [r6, #0]
 8009916:	e7f7      	b.n	8009908 <__sfp+0x18>
 8009918:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800991c:	b9d5      	cbnz	r5, 8009954 <__sfp+0x64>
 800991e:	4b16      	ldr	r3, [pc, #88]	; (8009978 <__sfp+0x88>)
 8009920:	60e3      	str	r3, [r4, #12]
 8009922:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009926:	6665      	str	r5, [r4, #100]	; 0x64
 8009928:	f000 f86c 	bl	8009a04 <__retarget_lock_init_recursive>
 800992c:	f7ff ff96 	bl	800985c <__sfp_lock_release>
 8009930:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009934:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009938:	6025      	str	r5, [r4, #0]
 800993a:	61a5      	str	r5, [r4, #24]
 800993c:	2208      	movs	r2, #8
 800993e:	4629      	mov	r1, r5
 8009940:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009944:	f000 f8e4 	bl	8009b10 <memset>
 8009948:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800994c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009950:	4620      	mov	r0, r4
 8009952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009954:	3468      	adds	r4, #104	; 0x68
 8009956:	e7d9      	b.n	800990c <__sfp+0x1c>
 8009958:	2104      	movs	r1, #4
 800995a:	4638      	mov	r0, r7
 800995c:	f7ff ff62 	bl	8009824 <__sfmoreglue>
 8009960:	4604      	mov	r4, r0
 8009962:	6030      	str	r0, [r6, #0]
 8009964:	2800      	cmp	r0, #0
 8009966:	d1d5      	bne.n	8009914 <__sfp+0x24>
 8009968:	f7ff ff78 	bl	800985c <__sfp_lock_release>
 800996c:	230c      	movs	r3, #12
 800996e:	603b      	str	r3, [r7, #0]
 8009970:	e7ee      	b.n	8009950 <__sfp+0x60>
 8009972:	bf00      	nop
 8009974:	08012f34 	.word	0x08012f34
 8009978:	ffff0001 	.word	0xffff0001

0800997c <_fwalk_reent>:
 800997c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009980:	4606      	mov	r6, r0
 8009982:	4688      	mov	r8, r1
 8009984:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009988:	2700      	movs	r7, #0
 800998a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800998e:	f1b9 0901 	subs.w	r9, r9, #1
 8009992:	d505      	bpl.n	80099a0 <_fwalk_reent+0x24>
 8009994:	6824      	ldr	r4, [r4, #0]
 8009996:	2c00      	cmp	r4, #0
 8009998:	d1f7      	bne.n	800998a <_fwalk_reent+0xe>
 800999a:	4638      	mov	r0, r7
 800999c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099a0:	89ab      	ldrh	r3, [r5, #12]
 80099a2:	2b01      	cmp	r3, #1
 80099a4:	d907      	bls.n	80099b6 <_fwalk_reent+0x3a>
 80099a6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80099aa:	3301      	adds	r3, #1
 80099ac:	d003      	beq.n	80099b6 <_fwalk_reent+0x3a>
 80099ae:	4629      	mov	r1, r5
 80099b0:	4630      	mov	r0, r6
 80099b2:	47c0      	blx	r8
 80099b4:	4307      	orrs	r7, r0
 80099b6:	3568      	adds	r5, #104	; 0x68
 80099b8:	e7e9      	b.n	800998e <_fwalk_reent+0x12>
	...

080099bc <__libc_init_array>:
 80099bc:	b570      	push	{r4, r5, r6, lr}
 80099be:	4d0d      	ldr	r5, [pc, #52]	; (80099f4 <__libc_init_array+0x38>)
 80099c0:	4c0d      	ldr	r4, [pc, #52]	; (80099f8 <__libc_init_array+0x3c>)
 80099c2:	1b64      	subs	r4, r4, r5
 80099c4:	10a4      	asrs	r4, r4, #2
 80099c6:	2600      	movs	r6, #0
 80099c8:	42a6      	cmp	r6, r4
 80099ca:	d109      	bne.n	80099e0 <__libc_init_array+0x24>
 80099cc:	4d0b      	ldr	r5, [pc, #44]	; (80099fc <__libc_init_array+0x40>)
 80099ce:	4c0c      	ldr	r4, [pc, #48]	; (8009a00 <__libc_init_array+0x44>)
 80099d0:	f005 f950 	bl	800ec74 <_init>
 80099d4:	1b64      	subs	r4, r4, r5
 80099d6:	10a4      	asrs	r4, r4, #2
 80099d8:	2600      	movs	r6, #0
 80099da:	42a6      	cmp	r6, r4
 80099dc:	d105      	bne.n	80099ea <__libc_init_array+0x2e>
 80099de:	bd70      	pop	{r4, r5, r6, pc}
 80099e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80099e4:	4798      	blx	r3
 80099e6:	3601      	adds	r6, #1
 80099e8:	e7ee      	b.n	80099c8 <__libc_init_array+0xc>
 80099ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80099ee:	4798      	blx	r3
 80099f0:	3601      	adds	r6, #1
 80099f2:	e7f2      	b.n	80099da <__libc_init_array+0x1e>
 80099f4:	080134e0 	.word	0x080134e0
 80099f8:	080134e0 	.word	0x080134e0
 80099fc:	080134e0 	.word	0x080134e0
 8009a00:	080134e4 	.word	0x080134e4

08009a04 <__retarget_lock_init_recursive>:
 8009a04:	4770      	bx	lr

08009a06 <__retarget_lock_acquire_recursive>:
 8009a06:	4770      	bx	lr

08009a08 <__retarget_lock_release_recursive>:
 8009a08:	4770      	bx	lr

08009a0a <__swhatbuf_r>:
 8009a0a:	b570      	push	{r4, r5, r6, lr}
 8009a0c:	460e      	mov	r6, r1
 8009a0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a12:	2900      	cmp	r1, #0
 8009a14:	b096      	sub	sp, #88	; 0x58
 8009a16:	4614      	mov	r4, r2
 8009a18:	461d      	mov	r5, r3
 8009a1a:	da08      	bge.n	8009a2e <__swhatbuf_r+0x24>
 8009a1c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009a20:	2200      	movs	r2, #0
 8009a22:	602a      	str	r2, [r5, #0]
 8009a24:	061a      	lsls	r2, r3, #24
 8009a26:	d410      	bmi.n	8009a4a <__swhatbuf_r+0x40>
 8009a28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a2c:	e00e      	b.n	8009a4c <__swhatbuf_r+0x42>
 8009a2e:	466a      	mov	r2, sp
 8009a30:	f001 fe88 	bl	800b744 <_fstat_r>
 8009a34:	2800      	cmp	r0, #0
 8009a36:	dbf1      	blt.n	8009a1c <__swhatbuf_r+0x12>
 8009a38:	9a01      	ldr	r2, [sp, #4]
 8009a3a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009a3e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009a42:	425a      	negs	r2, r3
 8009a44:	415a      	adcs	r2, r3
 8009a46:	602a      	str	r2, [r5, #0]
 8009a48:	e7ee      	b.n	8009a28 <__swhatbuf_r+0x1e>
 8009a4a:	2340      	movs	r3, #64	; 0x40
 8009a4c:	2000      	movs	r0, #0
 8009a4e:	6023      	str	r3, [r4, #0]
 8009a50:	b016      	add	sp, #88	; 0x58
 8009a52:	bd70      	pop	{r4, r5, r6, pc}

08009a54 <__smakebuf_r>:
 8009a54:	898b      	ldrh	r3, [r1, #12]
 8009a56:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009a58:	079d      	lsls	r5, r3, #30
 8009a5a:	4606      	mov	r6, r0
 8009a5c:	460c      	mov	r4, r1
 8009a5e:	d507      	bpl.n	8009a70 <__smakebuf_r+0x1c>
 8009a60:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009a64:	6023      	str	r3, [r4, #0]
 8009a66:	6123      	str	r3, [r4, #16]
 8009a68:	2301      	movs	r3, #1
 8009a6a:	6163      	str	r3, [r4, #20]
 8009a6c:	b002      	add	sp, #8
 8009a6e:	bd70      	pop	{r4, r5, r6, pc}
 8009a70:	ab01      	add	r3, sp, #4
 8009a72:	466a      	mov	r2, sp
 8009a74:	f7ff ffc9 	bl	8009a0a <__swhatbuf_r>
 8009a78:	9900      	ldr	r1, [sp, #0]
 8009a7a:	4605      	mov	r5, r0
 8009a7c:	4630      	mov	r0, r6
 8009a7e:	f000 f8bb 	bl	8009bf8 <_malloc_r>
 8009a82:	b948      	cbnz	r0, 8009a98 <__smakebuf_r+0x44>
 8009a84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a88:	059a      	lsls	r2, r3, #22
 8009a8a:	d4ef      	bmi.n	8009a6c <__smakebuf_r+0x18>
 8009a8c:	f023 0303 	bic.w	r3, r3, #3
 8009a90:	f043 0302 	orr.w	r3, r3, #2
 8009a94:	81a3      	strh	r3, [r4, #12]
 8009a96:	e7e3      	b.n	8009a60 <__smakebuf_r+0xc>
 8009a98:	4b0d      	ldr	r3, [pc, #52]	; (8009ad0 <__smakebuf_r+0x7c>)
 8009a9a:	62b3      	str	r3, [r6, #40]	; 0x28
 8009a9c:	89a3      	ldrh	r3, [r4, #12]
 8009a9e:	6020      	str	r0, [r4, #0]
 8009aa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009aa4:	81a3      	strh	r3, [r4, #12]
 8009aa6:	9b00      	ldr	r3, [sp, #0]
 8009aa8:	6163      	str	r3, [r4, #20]
 8009aaa:	9b01      	ldr	r3, [sp, #4]
 8009aac:	6120      	str	r0, [r4, #16]
 8009aae:	b15b      	cbz	r3, 8009ac8 <__smakebuf_r+0x74>
 8009ab0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ab4:	4630      	mov	r0, r6
 8009ab6:	f001 fe57 	bl	800b768 <_isatty_r>
 8009aba:	b128      	cbz	r0, 8009ac8 <__smakebuf_r+0x74>
 8009abc:	89a3      	ldrh	r3, [r4, #12]
 8009abe:	f023 0303 	bic.w	r3, r3, #3
 8009ac2:	f043 0301 	orr.w	r3, r3, #1
 8009ac6:	81a3      	strh	r3, [r4, #12]
 8009ac8:	89a0      	ldrh	r0, [r4, #12]
 8009aca:	4305      	orrs	r5, r0
 8009acc:	81a5      	strh	r5, [r4, #12]
 8009ace:	e7cd      	b.n	8009a6c <__smakebuf_r+0x18>
 8009ad0:	08009819 	.word	0x08009819

08009ad4 <malloc>:
 8009ad4:	4b02      	ldr	r3, [pc, #8]	; (8009ae0 <malloc+0xc>)
 8009ad6:	4601      	mov	r1, r0
 8009ad8:	6818      	ldr	r0, [r3, #0]
 8009ada:	f000 b88d 	b.w	8009bf8 <_malloc_r>
 8009ade:	bf00      	nop
 8009ae0:	20000014 	.word	0x20000014

08009ae4 <free>:
 8009ae4:	4b02      	ldr	r3, [pc, #8]	; (8009af0 <free+0xc>)
 8009ae6:	4601      	mov	r1, r0
 8009ae8:	6818      	ldr	r0, [r3, #0]
 8009aea:	f000 b819 	b.w	8009b20 <_free_r>
 8009aee:	bf00      	nop
 8009af0:	20000014 	.word	0x20000014

08009af4 <memcpy>:
 8009af4:	440a      	add	r2, r1
 8009af6:	4291      	cmp	r1, r2
 8009af8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009afc:	d100      	bne.n	8009b00 <memcpy+0xc>
 8009afe:	4770      	bx	lr
 8009b00:	b510      	push	{r4, lr}
 8009b02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b0a:	4291      	cmp	r1, r2
 8009b0c:	d1f9      	bne.n	8009b02 <memcpy+0xe>
 8009b0e:	bd10      	pop	{r4, pc}

08009b10 <memset>:
 8009b10:	4402      	add	r2, r0
 8009b12:	4603      	mov	r3, r0
 8009b14:	4293      	cmp	r3, r2
 8009b16:	d100      	bne.n	8009b1a <memset+0xa>
 8009b18:	4770      	bx	lr
 8009b1a:	f803 1b01 	strb.w	r1, [r3], #1
 8009b1e:	e7f9      	b.n	8009b14 <memset+0x4>

08009b20 <_free_r>:
 8009b20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009b22:	2900      	cmp	r1, #0
 8009b24:	d044      	beq.n	8009bb0 <_free_r+0x90>
 8009b26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b2a:	9001      	str	r0, [sp, #4]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	f1a1 0404 	sub.w	r4, r1, #4
 8009b32:	bfb8      	it	lt
 8009b34:	18e4      	addlt	r4, r4, r3
 8009b36:	f001 fe3d 	bl	800b7b4 <__malloc_lock>
 8009b3a:	4a1e      	ldr	r2, [pc, #120]	; (8009bb4 <_free_r+0x94>)
 8009b3c:	9801      	ldr	r0, [sp, #4]
 8009b3e:	6813      	ldr	r3, [r2, #0]
 8009b40:	b933      	cbnz	r3, 8009b50 <_free_r+0x30>
 8009b42:	6063      	str	r3, [r4, #4]
 8009b44:	6014      	str	r4, [r2, #0]
 8009b46:	b003      	add	sp, #12
 8009b48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009b4c:	f001 be38 	b.w	800b7c0 <__malloc_unlock>
 8009b50:	42a3      	cmp	r3, r4
 8009b52:	d908      	bls.n	8009b66 <_free_r+0x46>
 8009b54:	6825      	ldr	r5, [r4, #0]
 8009b56:	1961      	adds	r1, r4, r5
 8009b58:	428b      	cmp	r3, r1
 8009b5a:	bf01      	itttt	eq
 8009b5c:	6819      	ldreq	r1, [r3, #0]
 8009b5e:	685b      	ldreq	r3, [r3, #4]
 8009b60:	1949      	addeq	r1, r1, r5
 8009b62:	6021      	streq	r1, [r4, #0]
 8009b64:	e7ed      	b.n	8009b42 <_free_r+0x22>
 8009b66:	461a      	mov	r2, r3
 8009b68:	685b      	ldr	r3, [r3, #4]
 8009b6a:	b10b      	cbz	r3, 8009b70 <_free_r+0x50>
 8009b6c:	42a3      	cmp	r3, r4
 8009b6e:	d9fa      	bls.n	8009b66 <_free_r+0x46>
 8009b70:	6811      	ldr	r1, [r2, #0]
 8009b72:	1855      	adds	r5, r2, r1
 8009b74:	42a5      	cmp	r5, r4
 8009b76:	d10b      	bne.n	8009b90 <_free_r+0x70>
 8009b78:	6824      	ldr	r4, [r4, #0]
 8009b7a:	4421      	add	r1, r4
 8009b7c:	1854      	adds	r4, r2, r1
 8009b7e:	42a3      	cmp	r3, r4
 8009b80:	6011      	str	r1, [r2, #0]
 8009b82:	d1e0      	bne.n	8009b46 <_free_r+0x26>
 8009b84:	681c      	ldr	r4, [r3, #0]
 8009b86:	685b      	ldr	r3, [r3, #4]
 8009b88:	6053      	str	r3, [r2, #4]
 8009b8a:	4421      	add	r1, r4
 8009b8c:	6011      	str	r1, [r2, #0]
 8009b8e:	e7da      	b.n	8009b46 <_free_r+0x26>
 8009b90:	d902      	bls.n	8009b98 <_free_r+0x78>
 8009b92:	230c      	movs	r3, #12
 8009b94:	6003      	str	r3, [r0, #0]
 8009b96:	e7d6      	b.n	8009b46 <_free_r+0x26>
 8009b98:	6825      	ldr	r5, [r4, #0]
 8009b9a:	1961      	adds	r1, r4, r5
 8009b9c:	428b      	cmp	r3, r1
 8009b9e:	bf04      	itt	eq
 8009ba0:	6819      	ldreq	r1, [r3, #0]
 8009ba2:	685b      	ldreq	r3, [r3, #4]
 8009ba4:	6063      	str	r3, [r4, #4]
 8009ba6:	bf04      	itt	eq
 8009ba8:	1949      	addeq	r1, r1, r5
 8009baa:	6021      	streq	r1, [r4, #0]
 8009bac:	6054      	str	r4, [r2, #4]
 8009bae:	e7ca      	b.n	8009b46 <_free_r+0x26>
 8009bb0:	b003      	add	sp, #12
 8009bb2:	bd30      	pop	{r4, r5, pc}
 8009bb4:	20000494 	.word	0x20000494

08009bb8 <sbrk_aligned>:
 8009bb8:	b570      	push	{r4, r5, r6, lr}
 8009bba:	4e0e      	ldr	r6, [pc, #56]	; (8009bf4 <sbrk_aligned+0x3c>)
 8009bbc:	460c      	mov	r4, r1
 8009bbe:	6831      	ldr	r1, [r6, #0]
 8009bc0:	4605      	mov	r5, r0
 8009bc2:	b911      	cbnz	r1, 8009bca <sbrk_aligned+0x12>
 8009bc4:	f000 fd9a 	bl	800a6fc <_sbrk_r>
 8009bc8:	6030      	str	r0, [r6, #0]
 8009bca:	4621      	mov	r1, r4
 8009bcc:	4628      	mov	r0, r5
 8009bce:	f000 fd95 	bl	800a6fc <_sbrk_r>
 8009bd2:	1c43      	adds	r3, r0, #1
 8009bd4:	d00a      	beq.n	8009bec <sbrk_aligned+0x34>
 8009bd6:	1cc4      	adds	r4, r0, #3
 8009bd8:	f024 0403 	bic.w	r4, r4, #3
 8009bdc:	42a0      	cmp	r0, r4
 8009bde:	d007      	beq.n	8009bf0 <sbrk_aligned+0x38>
 8009be0:	1a21      	subs	r1, r4, r0
 8009be2:	4628      	mov	r0, r5
 8009be4:	f000 fd8a 	bl	800a6fc <_sbrk_r>
 8009be8:	3001      	adds	r0, #1
 8009bea:	d101      	bne.n	8009bf0 <sbrk_aligned+0x38>
 8009bec:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009bf0:	4620      	mov	r0, r4
 8009bf2:	bd70      	pop	{r4, r5, r6, pc}
 8009bf4:	20000498 	.word	0x20000498

08009bf8 <_malloc_r>:
 8009bf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bfc:	1ccd      	adds	r5, r1, #3
 8009bfe:	f025 0503 	bic.w	r5, r5, #3
 8009c02:	3508      	adds	r5, #8
 8009c04:	2d0c      	cmp	r5, #12
 8009c06:	bf38      	it	cc
 8009c08:	250c      	movcc	r5, #12
 8009c0a:	2d00      	cmp	r5, #0
 8009c0c:	4607      	mov	r7, r0
 8009c0e:	db01      	blt.n	8009c14 <_malloc_r+0x1c>
 8009c10:	42a9      	cmp	r1, r5
 8009c12:	d905      	bls.n	8009c20 <_malloc_r+0x28>
 8009c14:	230c      	movs	r3, #12
 8009c16:	603b      	str	r3, [r7, #0]
 8009c18:	2600      	movs	r6, #0
 8009c1a:	4630      	mov	r0, r6
 8009c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c20:	4e2e      	ldr	r6, [pc, #184]	; (8009cdc <_malloc_r+0xe4>)
 8009c22:	f001 fdc7 	bl	800b7b4 <__malloc_lock>
 8009c26:	6833      	ldr	r3, [r6, #0]
 8009c28:	461c      	mov	r4, r3
 8009c2a:	bb34      	cbnz	r4, 8009c7a <_malloc_r+0x82>
 8009c2c:	4629      	mov	r1, r5
 8009c2e:	4638      	mov	r0, r7
 8009c30:	f7ff ffc2 	bl	8009bb8 <sbrk_aligned>
 8009c34:	1c43      	adds	r3, r0, #1
 8009c36:	4604      	mov	r4, r0
 8009c38:	d14d      	bne.n	8009cd6 <_malloc_r+0xde>
 8009c3a:	6834      	ldr	r4, [r6, #0]
 8009c3c:	4626      	mov	r6, r4
 8009c3e:	2e00      	cmp	r6, #0
 8009c40:	d140      	bne.n	8009cc4 <_malloc_r+0xcc>
 8009c42:	6823      	ldr	r3, [r4, #0]
 8009c44:	4631      	mov	r1, r6
 8009c46:	4638      	mov	r0, r7
 8009c48:	eb04 0803 	add.w	r8, r4, r3
 8009c4c:	f000 fd56 	bl	800a6fc <_sbrk_r>
 8009c50:	4580      	cmp	r8, r0
 8009c52:	d13a      	bne.n	8009cca <_malloc_r+0xd2>
 8009c54:	6821      	ldr	r1, [r4, #0]
 8009c56:	3503      	adds	r5, #3
 8009c58:	1a6d      	subs	r5, r5, r1
 8009c5a:	f025 0503 	bic.w	r5, r5, #3
 8009c5e:	3508      	adds	r5, #8
 8009c60:	2d0c      	cmp	r5, #12
 8009c62:	bf38      	it	cc
 8009c64:	250c      	movcc	r5, #12
 8009c66:	4629      	mov	r1, r5
 8009c68:	4638      	mov	r0, r7
 8009c6a:	f7ff ffa5 	bl	8009bb8 <sbrk_aligned>
 8009c6e:	3001      	adds	r0, #1
 8009c70:	d02b      	beq.n	8009cca <_malloc_r+0xd2>
 8009c72:	6823      	ldr	r3, [r4, #0]
 8009c74:	442b      	add	r3, r5
 8009c76:	6023      	str	r3, [r4, #0]
 8009c78:	e00e      	b.n	8009c98 <_malloc_r+0xa0>
 8009c7a:	6822      	ldr	r2, [r4, #0]
 8009c7c:	1b52      	subs	r2, r2, r5
 8009c7e:	d41e      	bmi.n	8009cbe <_malloc_r+0xc6>
 8009c80:	2a0b      	cmp	r2, #11
 8009c82:	d916      	bls.n	8009cb2 <_malloc_r+0xba>
 8009c84:	1961      	adds	r1, r4, r5
 8009c86:	42a3      	cmp	r3, r4
 8009c88:	6025      	str	r5, [r4, #0]
 8009c8a:	bf18      	it	ne
 8009c8c:	6059      	strne	r1, [r3, #4]
 8009c8e:	6863      	ldr	r3, [r4, #4]
 8009c90:	bf08      	it	eq
 8009c92:	6031      	streq	r1, [r6, #0]
 8009c94:	5162      	str	r2, [r4, r5]
 8009c96:	604b      	str	r3, [r1, #4]
 8009c98:	4638      	mov	r0, r7
 8009c9a:	f104 060b 	add.w	r6, r4, #11
 8009c9e:	f001 fd8f 	bl	800b7c0 <__malloc_unlock>
 8009ca2:	f026 0607 	bic.w	r6, r6, #7
 8009ca6:	1d23      	adds	r3, r4, #4
 8009ca8:	1af2      	subs	r2, r6, r3
 8009caa:	d0b6      	beq.n	8009c1a <_malloc_r+0x22>
 8009cac:	1b9b      	subs	r3, r3, r6
 8009cae:	50a3      	str	r3, [r4, r2]
 8009cb0:	e7b3      	b.n	8009c1a <_malloc_r+0x22>
 8009cb2:	6862      	ldr	r2, [r4, #4]
 8009cb4:	42a3      	cmp	r3, r4
 8009cb6:	bf0c      	ite	eq
 8009cb8:	6032      	streq	r2, [r6, #0]
 8009cba:	605a      	strne	r2, [r3, #4]
 8009cbc:	e7ec      	b.n	8009c98 <_malloc_r+0xa0>
 8009cbe:	4623      	mov	r3, r4
 8009cc0:	6864      	ldr	r4, [r4, #4]
 8009cc2:	e7b2      	b.n	8009c2a <_malloc_r+0x32>
 8009cc4:	4634      	mov	r4, r6
 8009cc6:	6876      	ldr	r6, [r6, #4]
 8009cc8:	e7b9      	b.n	8009c3e <_malloc_r+0x46>
 8009cca:	230c      	movs	r3, #12
 8009ccc:	603b      	str	r3, [r7, #0]
 8009cce:	4638      	mov	r0, r7
 8009cd0:	f001 fd76 	bl	800b7c0 <__malloc_unlock>
 8009cd4:	e7a1      	b.n	8009c1a <_malloc_r+0x22>
 8009cd6:	6025      	str	r5, [r4, #0]
 8009cd8:	e7de      	b.n	8009c98 <_malloc_r+0xa0>
 8009cda:	bf00      	nop
 8009cdc:	20000494 	.word	0x20000494

08009ce0 <__cvt>:
 8009ce0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ce4:	ec55 4b10 	vmov	r4, r5, d0
 8009ce8:	2d00      	cmp	r5, #0
 8009cea:	460e      	mov	r6, r1
 8009cec:	4619      	mov	r1, r3
 8009cee:	462b      	mov	r3, r5
 8009cf0:	bfbb      	ittet	lt
 8009cf2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009cf6:	461d      	movlt	r5, r3
 8009cf8:	2300      	movge	r3, #0
 8009cfa:	232d      	movlt	r3, #45	; 0x2d
 8009cfc:	700b      	strb	r3, [r1, #0]
 8009cfe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d00:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009d04:	4691      	mov	r9, r2
 8009d06:	f023 0820 	bic.w	r8, r3, #32
 8009d0a:	bfbc      	itt	lt
 8009d0c:	4622      	movlt	r2, r4
 8009d0e:	4614      	movlt	r4, r2
 8009d10:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009d14:	d005      	beq.n	8009d22 <__cvt+0x42>
 8009d16:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009d1a:	d100      	bne.n	8009d1e <__cvt+0x3e>
 8009d1c:	3601      	adds	r6, #1
 8009d1e:	2102      	movs	r1, #2
 8009d20:	e000      	b.n	8009d24 <__cvt+0x44>
 8009d22:	2103      	movs	r1, #3
 8009d24:	ab03      	add	r3, sp, #12
 8009d26:	9301      	str	r3, [sp, #4]
 8009d28:	ab02      	add	r3, sp, #8
 8009d2a:	9300      	str	r3, [sp, #0]
 8009d2c:	ec45 4b10 	vmov	d0, r4, r5
 8009d30:	4653      	mov	r3, sl
 8009d32:	4632      	mov	r2, r6
 8009d34:	f000 ff18 	bl	800ab68 <_dtoa_r>
 8009d38:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009d3c:	4607      	mov	r7, r0
 8009d3e:	d102      	bne.n	8009d46 <__cvt+0x66>
 8009d40:	f019 0f01 	tst.w	r9, #1
 8009d44:	d022      	beq.n	8009d8c <__cvt+0xac>
 8009d46:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009d4a:	eb07 0906 	add.w	r9, r7, r6
 8009d4e:	d110      	bne.n	8009d72 <__cvt+0x92>
 8009d50:	783b      	ldrb	r3, [r7, #0]
 8009d52:	2b30      	cmp	r3, #48	; 0x30
 8009d54:	d10a      	bne.n	8009d6c <__cvt+0x8c>
 8009d56:	2200      	movs	r2, #0
 8009d58:	2300      	movs	r3, #0
 8009d5a:	4620      	mov	r0, r4
 8009d5c:	4629      	mov	r1, r5
 8009d5e:	f7f6 fec3 	bl	8000ae8 <__aeabi_dcmpeq>
 8009d62:	b918      	cbnz	r0, 8009d6c <__cvt+0x8c>
 8009d64:	f1c6 0601 	rsb	r6, r6, #1
 8009d68:	f8ca 6000 	str.w	r6, [sl]
 8009d6c:	f8da 3000 	ldr.w	r3, [sl]
 8009d70:	4499      	add	r9, r3
 8009d72:	2200      	movs	r2, #0
 8009d74:	2300      	movs	r3, #0
 8009d76:	4620      	mov	r0, r4
 8009d78:	4629      	mov	r1, r5
 8009d7a:	f7f6 feb5 	bl	8000ae8 <__aeabi_dcmpeq>
 8009d7e:	b108      	cbz	r0, 8009d84 <__cvt+0xa4>
 8009d80:	f8cd 900c 	str.w	r9, [sp, #12]
 8009d84:	2230      	movs	r2, #48	; 0x30
 8009d86:	9b03      	ldr	r3, [sp, #12]
 8009d88:	454b      	cmp	r3, r9
 8009d8a:	d307      	bcc.n	8009d9c <__cvt+0xbc>
 8009d8c:	9b03      	ldr	r3, [sp, #12]
 8009d8e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009d90:	1bdb      	subs	r3, r3, r7
 8009d92:	4638      	mov	r0, r7
 8009d94:	6013      	str	r3, [r2, #0]
 8009d96:	b004      	add	sp, #16
 8009d98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d9c:	1c59      	adds	r1, r3, #1
 8009d9e:	9103      	str	r1, [sp, #12]
 8009da0:	701a      	strb	r2, [r3, #0]
 8009da2:	e7f0      	b.n	8009d86 <__cvt+0xa6>

08009da4 <__exponent>:
 8009da4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009da6:	4603      	mov	r3, r0
 8009da8:	2900      	cmp	r1, #0
 8009daa:	bfb8      	it	lt
 8009dac:	4249      	neglt	r1, r1
 8009dae:	f803 2b02 	strb.w	r2, [r3], #2
 8009db2:	bfb4      	ite	lt
 8009db4:	222d      	movlt	r2, #45	; 0x2d
 8009db6:	222b      	movge	r2, #43	; 0x2b
 8009db8:	2909      	cmp	r1, #9
 8009dba:	7042      	strb	r2, [r0, #1]
 8009dbc:	dd2a      	ble.n	8009e14 <__exponent+0x70>
 8009dbe:	f10d 0407 	add.w	r4, sp, #7
 8009dc2:	46a4      	mov	ip, r4
 8009dc4:	270a      	movs	r7, #10
 8009dc6:	46a6      	mov	lr, r4
 8009dc8:	460a      	mov	r2, r1
 8009dca:	fb91 f6f7 	sdiv	r6, r1, r7
 8009dce:	fb07 1516 	mls	r5, r7, r6, r1
 8009dd2:	3530      	adds	r5, #48	; 0x30
 8009dd4:	2a63      	cmp	r2, #99	; 0x63
 8009dd6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8009dda:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009dde:	4631      	mov	r1, r6
 8009de0:	dcf1      	bgt.n	8009dc6 <__exponent+0x22>
 8009de2:	3130      	adds	r1, #48	; 0x30
 8009de4:	f1ae 0502 	sub.w	r5, lr, #2
 8009de8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009dec:	1c44      	adds	r4, r0, #1
 8009dee:	4629      	mov	r1, r5
 8009df0:	4561      	cmp	r1, ip
 8009df2:	d30a      	bcc.n	8009e0a <__exponent+0x66>
 8009df4:	f10d 0209 	add.w	r2, sp, #9
 8009df8:	eba2 020e 	sub.w	r2, r2, lr
 8009dfc:	4565      	cmp	r5, ip
 8009dfe:	bf88      	it	hi
 8009e00:	2200      	movhi	r2, #0
 8009e02:	4413      	add	r3, r2
 8009e04:	1a18      	subs	r0, r3, r0
 8009e06:	b003      	add	sp, #12
 8009e08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009e0e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009e12:	e7ed      	b.n	8009df0 <__exponent+0x4c>
 8009e14:	2330      	movs	r3, #48	; 0x30
 8009e16:	3130      	adds	r1, #48	; 0x30
 8009e18:	7083      	strb	r3, [r0, #2]
 8009e1a:	70c1      	strb	r1, [r0, #3]
 8009e1c:	1d03      	adds	r3, r0, #4
 8009e1e:	e7f1      	b.n	8009e04 <__exponent+0x60>

08009e20 <_printf_float>:
 8009e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e24:	ed2d 8b02 	vpush	{d8}
 8009e28:	b08d      	sub	sp, #52	; 0x34
 8009e2a:	460c      	mov	r4, r1
 8009e2c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009e30:	4616      	mov	r6, r2
 8009e32:	461f      	mov	r7, r3
 8009e34:	4605      	mov	r5, r0
 8009e36:	f001 fca7 	bl	800b788 <_localeconv_r>
 8009e3a:	f8d0 a000 	ldr.w	sl, [r0]
 8009e3e:	4650      	mov	r0, sl
 8009e40:	f7f6 f9d0 	bl	80001e4 <strlen>
 8009e44:	2300      	movs	r3, #0
 8009e46:	930a      	str	r3, [sp, #40]	; 0x28
 8009e48:	6823      	ldr	r3, [r4, #0]
 8009e4a:	9305      	str	r3, [sp, #20]
 8009e4c:	f8d8 3000 	ldr.w	r3, [r8]
 8009e50:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009e54:	3307      	adds	r3, #7
 8009e56:	f023 0307 	bic.w	r3, r3, #7
 8009e5a:	f103 0208 	add.w	r2, r3, #8
 8009e5e:	f8c8 2000 	str.w	r2, [r8]
 8009e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e66:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009e6a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009e6e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009e72:	9307      	str	r3, [sp, #28]
 8009e74:	f8cd 8018 	str.w	r8, [sp, #24]
 8009e78:	ee08 0a10 	vmov	s16, r0
 8009e7c:	4b9f      	ldr	r3, [pc, #636]	; (800a0fc <_printf_float+0x2dc>)
 8009e7e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009e82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009e86:	f7f6 fe61 	bl	8000b4c <__aeabi_dcmpun>
 8009e8a:	bb88      	cbnz	r0, 8009ef0 <_printf_float+0xd0>
 8009e8c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009e90:	4b9a      	ldr	r3, [pc, #616]	; (800a0fc <_printf_float+0x2dc>)
 8009e92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009e96:	f7f6 fe3b 	bl	8000b10 <__aeabi_dcmple>
 8009e9a:	bb48      	cbnz	r0, 8009ef0 <_printf_float+0xd0>
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	4640      	mov	r0, r8
 8009ea2:	4649      	mov	r1, r9
 8009ea4:	f7f6 fe2a 	bl	8000afc <__aeabi_dcmplt>
 8009ea8:	b110      	cbz	r0, 8009eb0 <_printf_float+0x90>
 8009eaa:	232d      	movs	r3, #45	; 0x2d
 8009eac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009eb0:	4b93      	ldr	r3, [pc, #588]	; (800a100 <_printf_float+0x2e0>)
 8009eb2:	4894      	ldr	r0, [pc, #592]	; (800a104 <_printf_float+0x2e4>)
 8009eb4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009eb8:	bf94      	ite	ls
 8009eba:	4698      	movls	r8, r3
 8009ebc:	4680      	movhi	r8, r0
 8009ebe:	2303      	movs	r3, #3
 8009ec0:	6123      	str	r3, [r4, #16]
 8009ec2:	9b05      	ldr	r3, [sp, #20]
 8009ec4:	f023 0204 	bic.w	r2, r3, #4
 8009ec8:	6022      	str	r2, [r4, #0]
 8009eca:	f04f 0900 	mov.w	r9, #0
 8009ece:	9700      	str	r7, [sp, #0]
 8009ed0:	4633      	mov	r3, r6
 8009ed2:	aa0b      	add	r2, sp, #44	; 0x2c
 8009ed4:	4621      	mov	r1, r4
 8009ed6:	4628      	mov	r0, r5
 8009ed8:	f000 f9d8 	bl	800a28c <_printf_common>
 8009edc:	3001      	adds	r0, #1
 8009ede:	f040 8090 	bne.w	800a002 <_printf_float+0x1e2>
 8009ee2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009ee6:	b00d      	add	sp, #52	; 0x34
 8009ee8:	ecbd 8b02 	vpop	{d8}
 8009eec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ef0:	4642      	mov	r2, r8
 8009ef2:	464b      	mov	r3, r9
 8009ef4:	4640      	mov	r0, r8
 8009ef6:	4649      	mov	r1, r9
 8009ef8:	f7f6 fe28 	bl	8000b4c <__aeabi_dcmpun>
 8009efc:	b140      	cbz	r0, 8009f10 <_printf_float+0xf0>
 8009efe:	464b      	mov	r3, r9
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	bfbc      	itt	lt
 8009f04:	232d      	movlt	r3, #45	; 0x2d
 8009f06:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009f0a:	487f      	ldr	r0, [pc, #508]	; (800a108 <_printf_float+0x2e8>)
 8009f0c:	4b7f      	ldr	r3, [pc, #508]	; (800a10c <_printf_float+0x2ec>)
 8009f0e:	e7d1      	b.n	8009eb4 <_printf_float+0x94>
 8009f10:	6863      	ldr	r3, [r4, #4]
 8009f12:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009f16:	9206      	str	r2, [sp, #24]
 8009f18:	1c5a      	adds	r2, r3, #1
 8009f1a:	d13f      	bne.n	8009f9c <_printf_float+0x17c>
 8009f1c:	2306      	movs	r3, #6
 8009f1e:	6063      	str	r3, [r4, #4]
 8009f20:	9b05      	ldr	r3, [sp, #20]
 8009f22:	6861      	ldr	r1, [r4, #4]
 8009f24:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009f28:	2300      	movs	r3, #0
 8009f2a:	9303      	str	r3, [sp, #12]
 8009f2c:	ab0a      	add	r3, sp, #40	; 0x28
 8009f2e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009f32:	ab09      	add	r3, sp, #36	; 0x24
 8009f34:	ec49 8b10 	vmov	d0, r8, r9
 8009f38:	9300      	str	r3, [sp, #0]
 8009f3a:	6022      	str	r2, [r4, #0]
 8009f3c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009f40:	4628      	mov	r0, r5
 8009f42:	f7ff fecd 	bl	8009ce0 <__cvt>
 8009f46:	9b06      	ldr	r3, [sp, #24]
 8009f48:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009f4a:	2b47      	cmp	r3, #71	; 0x47
 8009f4c:	4680      	mov	r8, r0
 8009f4e:	d108      	bne.n	8009f62 <_printf_float+0x142>
 8009f50:	1cc8      	adds	r0, r1, #3
 8009f52:	db02      	blt.n	8009f5a <_printf_float+0x13a>
 8009f54:	6863      	ldr	r3, [r4, #4]
 8009f56:	4299      	cmp	r1, r3
 8009f58:	dd41      	ble.n	8009fde <_printf_float+0x1be>
 8009f5a:	f1ab 0b02 	sub.w	fp, fp, #2
 8009f5e:	fa5f fb8b 	uxtb.w	fp, fp
 8009f62:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009f66:	d820      	bhi.n	8009faa <_printf_float+0x18a>
 8009f68:	3901      	subs	r1, #1
 8009f6a:	465a      	mov	r2, fp
 8009f6c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009f70:	9109      	str	r1, [sp, #36]	; 0x24
 8009f72:	f7ff ff17 	bl	8009da4 <__exponent>
 8009f76:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009f78:	1813      	adds	r3, r2, r0
 8009f7a:	2a01      	cmp	r2, #1
 8009f7c:	4681      	mov	r9, r0
 8009f7e:	6123      	str	r3, [r4, #16]
 8009f80:	dc02      	bgt.n	8009f88 <_printf_float+0x168>
 8009f82:	6822      	ldr	r2, [r4, #0]
 8009f84:	07d2      	lsls	r2, r2, #31
 8009f86:	d501      	bpl.n	8009f8c <_printf_float+0x16c>
 8009f88:	3301      	adds	r3, #1
 8009f8a:	6123      	str	r3, [r4, #16]
 8009f8c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d09c      	beq.n	8009ece <_printf_float+0xae>
 8009f94:	232d      	movs	r3, #45	; 0x2d
 8009f96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f9a:	e798      	b.n	8009ece <_printf_float+0xae>
 8009f9c:	9a06      	ldr	r2, [sp, #24]
 8009f9e:	2a47      	cmp	r2, #71	; 0x47
 8009fa0:	d1be      	bne.n	8009f20 <_printf_float+0x100>
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d1bc      	bne.n	8009f20 <_printf_float+0x100>
 8009fa6:	2301      	movs	r3, #1
 8009fa8:	e7b9      	b.n	8009f1e <_printf_float+0xfe>
 8009faa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009fae:	d118      	bne.n	8009fe2 <_printf_float+0x1c2>
 8009fb0:	2900      	cmp	r1, #0
 8009fb2:	6863      	ldr	r3, [r4, #4]
 8009fb4:	dd0b      	ble.n	8009fce <_printf_float+0x1ae>
 8009fb6:	6121      	str	r1, [r4, #16]
 8009fb8:	b913      	cbnz	r3, 8009fc0 <_printf_float+0x1a0>
 8009fba:	6822      	ldr	r2, [r4, #0]
 8009fbc:	07d0      	lsls	r0, r2, #31
 8009fbe:	d502      	bpl.n	8009fc6 <_printf_float+0x1a6>
 8009fc0:	3301      	adds	r3, #1
 8009fc2:	440b      	add	r3, r1
 8009fc4:	6123      	str	r3, [r4, #16]
 8009fc6:	65a1      	str	r1, [r4, #88]	; 0x58
 8009fc8:	f04f 0900 	mov.w	r9, #0
 8009fcc:	e7de      	b.n	8009f8c <_printf_float+0x16c>
 8009fce:	b913      	cbnz	r3, 8009fd6 <_printf_float+0x1b6>
 8009fd0:	6822      	ldr	r2, [r4, #0]
 8009fd2:	07d2      	lsls	r2, r2, #31
 8009fd4:	d501      	bpl.n	8009fda <_printf_float+0x1ba>
 8009fd6:	3302      	adds	r3, #2
 8009fd8:	e7f4      	b.n	8009fc4 <_printf_float+0x1a4>
 8009fda:	2301      	movs	r3, #1
 8009fdc:	e7f2      	b.n	8009fc4 <_printf_float+0x1a4>
 8009fde:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009fe2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fe4:	4299      	cmp	r1, r3
 8009fe6:	db05      	blt.n	8009ff4 <_printf_float+0x1d4>
 8009fe8:	6823      	ldr	r3, [r4, #0]
 8009fea:	6121      	str	r1, [r4, #16]
 8009fec:	07d8      	lsls	r0, r3, #31
 8009fee:	d5ea      	bpl.n	8009fc6 <_printf_float+0x1a6>
 8009ff0:	1c4b      	adds	r3, r1, #1
 8009ff2:	e7e7      	b.n	8009fc4 <_printf_float+0x1a4>
 8009ff4:	2900      	cmp	r1, #0
 8009ff6:	bfd4      	ite	le
 8009ff8:	f1c1 0202 	rsble	r2, r1, #2
 8009ffc:	2201      	movgt	r2, #1
 8009ffe:	4413      	add	r3, r2
 800a000:	e7e0      	b.n	8009fc4 <_printf_float+0x1a4>
 800a002:	6823      	ldr	r3, [r4, #0]
 800a004:	055a      	lsls	r2, r3, #21
 800a006:	d407      	bmi.n	800a018 <_printf_float+0x1f8>
 800a008:	6923      	ldr	r3, [r4, #16]
 800a00a:	4642      	mov	r2, r8
 800a00c:	4631      	mov	r1, r6
 800a00e:	4628      	mov	r0, r5
 800a010:	47b8      	blx	r7
 800a012:	3001      	adds	r0, #1
 800a014:	d12c      	bne.n	800a070 <_printf_float+0x250>
 800a016:	e764      	b.n	8009ee2 <_printf_float+0xc2>
 800a018:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a01c:	f240 80e0 	bls.w	800a1e0 <_printf_float+0x3c0>
 800a020:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a024:	2200      	movs	r2, #0
 800a026:	2300      	movs	r3, #0
 800a028:	f7f6 fd5e 	bl	8000ae8 <__aeabi_dcmpeq>
 800a02c:	2800      	cmp	r0, #0
 800a02e:	d034      	beq.n	800a09a <_printf_float+0x27a>
 800a030:	4a37      	ldr	r2, [pc, #220]	; (800a110 <_printf_float+0x2f0>)
 800a032:	2301      	movs	r3, #1
 800a034:	4631      	mov	r1, r6
 800a036:	4628      	mov	r0, r5
 800a038:	47b8      	blx	r7
 800a03a:	3001      	adds	r0, #1
 800a03c:	f43f af51 	beq.w	8009ee2 <_printf_float+0xc2>
 800a040:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a044:	429a      	cmp	r2, r3
 800a046:	db02      	blt.n	800a04e <_printf_float+0x22e>
 800a048:	6823      	ldr	r3, [r4, #0]
 800a04a:	07d8      	lsls	r0, r3, #31
 800a04c:	d510      	bpl.n	800a070 <_printf_float+0x250>
 800a04e:	ee18 3a10 	vmov	r3, s16
 800a052:	4652      	mov	r2, sl
 800a054:	4631      	mov	r1, r6
 800a056:	4628      	mov	r0, r5
 800a058:	47b8      	blx	r7
 800a05a:	3001      	adds	r0, #1
 800a05c:	f43f af41 	beq.w	8009ee2 <_printf_float+0xc2>
 800a060:	f04f 0800 	mov.w	r8, #0
 800a064:	f104 091a 	add.w	r9, r4, #26
 800a068:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a06a:	3b01      	subs	r3, #1
 800a06c:	4543      	cmp	r3, r8
 800a06e:	dc09      	bgt.n	800a084 <_printf_float+0x264>
 800a070:	6823      	ldr	r3, [r4, #0]
 800a072:	079b      	lsls	r3, r3, #30
 800a074:	f100 8105 	bmi.w	800a282 <_printf_float+0x462>
 800a078:	68e0      	ldr	r0, [r4, #12]
 800a07a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a07c:	4298      	cmp	r0, r3
 800a07e:	bfb8      	it	lt
 800a080:	4618      	movlt	r0, r3
 800a082:	e730      	b.n	8009ee6 <_printf_float+0xc6>
 800a084:	2301      	movs	r3, #1
 800a086:	464a      	mov	r2, r9
 800a088:	4631      	mov	r1, r6
 800a08a:	4628      	mov	r0, r5
 800a08c:	47b8      	blx	r7
 800a08e:	3001      	adds	r0, #1
 800a090:	f43f af27 	beq.w	8009ee2 <_printf_float+0xc2>
 800a094:	f108 0801 	add.w	r8, r8, #1
 800a098:	e7e6      	b.n	800a068 <_printf_float+0x248>
 800a09a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	dc39      	bgt.n	800a114 <_printf_float+0x2f4>
 800a0a0:	4a1b      	ldr	r2, [pc, #108]	; (800a110 <_printf_float+0x2f0>)
 800a0a2:	2301      	movs	r3, #1
 800a0a4:	4631      	mov	r1, r6
 800a0a6:	4628      	mov	r0, r5
 800a0a8:	47b8      	blx	r7
 800a0aa:	3001      	adds	r0, #1
 800a0ac:	f43f af19 	beq.w	8009ee2 <_printf_float+0xc2>
 800a0b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a0b4:	4313      	orrs	r3, r2
 800a0b6:	d102      	bne.n	800a0be <_printf_float+0x29e>
 800a0b8:	6823      	ldr	r3, [r4, #0]
 800a0ba:	07d9      	lsls	r1, r3, #31
 800a0bc:	d5d8      	bpl.n	800a070 <_printf_float+0x250>
 800a0be:	ee18 3a10 	vmov	r3, s16
 800a0c2:	4652      	mov	r2, sl
 800a0c4:	4631      	mov	r1, r6
 800a0c6:	4628      	mov	r0, r5
 800a0c8:	47b8      	blx	r7
 800a0ca:	3001      	adds	r0, #1
 800a0cc:	f43f af09 	beq.w	8009ee2 <_printf_float+0xc2>
 800a0d0:	f04f 0900 	mov.w	r9, #0
 800a0d4:	f104 0a1a 	add.w	sl, r4, #26
 800a0d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0da:	425b      	negs	r3, r3
 800a0dc:	454b      	cmp	r3, r9
 800a0de:	dc01      	bgt.n	800a0e4 <_printf_float+0x2c4>
 800a0e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0e2:	e792      	b.n	800a00a <_printf_float+0x1ea>
 800a0e4:	2301      	movs	r3, #1
 800a0e6:	4652      	mov	r2, sl
 800a0e8:	4631      	mov	r1, r6
 800a0ea:	4628      	mov	r0, r5
 800a0ec:	47b8      	blx	r7
 800a0ee:	3001      	adds	r0, #1
 800a0f0:	f43f aef7 	beq.w	8009ee2 <_printf_float+0xc2>
 800a0f4:	f109 0901 	add.w	r9, r9, #1
 800a0f8:	e7ee      	b.n	800a0d8 <_printf_float+0x2b8>
 800a0fa:	bf00      	nop
 800a0fc:	7fefffff 	.word	0x7fefffff
 800a100:	08012f38 	.word	0x08012f38
 800a104:	08012f3c 	.word	0x08012f3c
 800a108:	08012f44 	.word	0x08012f44
 800a10c:	08012f40 	.word	0x08012f40
 800a110:	08013169 	.word	0x08013169
 800a114:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a116:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a118:	429a      	cmp	r2, r3
 800a11a:	bfa8      	it	ge
 800a11c:	461a      	movge	r2, r3
 800a11e:	2a00      	cmp	r2, #0
 800a120:	4691      	mov	r9, r2
 800a122:	dc37      	bgt.n	800a194 <_printf_float+0x374>
 800a124:	f04f 0b00 	mov.w	fp, #0
 800a128:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a12c:	f104 021a 	add.w	r2, r4, #26
 800a130:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a132:	9305      	str	r3, [sp, #20]
 800a134:	eba3 0309 	sub.w	r3, r3, r9
 800a138:	455b      	cmp	r3, fp
 800a13a:	dc33      	bgt.n	800a1a4 <_printf_float+0x384>
 800a13c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a140:	429a      	cmp	r2, r3
 800a142:	db3b      	blt.n	800a1bc <_printf_float+0x39c>
 800a144:	6823      	ldr	r3, [r4, #0]
 800a146:	07da      	lsls	r2, r3, #31
 800a148:	d438      	bmi.n	800a1bc <_printf_float+0x39c>
 800a14a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a14c:	9a05      	ldr	r2, [sp, #20]
 800a14e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a150:	1a9a      	subs	r2, r3, r2
 800a152:	eba3 0901 	sub.w	r9, r3, r1
 800a156:	4591      	cmp	r9, r2
 800a158:	bfa8      	it	ge
 800a15a:	4691      	movge	r9, r2
 800a15c:	f1b9 0f00 	cmp.w	r9, #0
 800a160:	dc35      	bgt.n	800a1ce <_printf_float+0x3ae>
 800a162:	f04f 0800 	mov.w	r8, #0
 800a166:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a16a:	f104 0a1a 	add.w	sl, r4, #26
 800a16e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a172:	1a9b      	subs	r3, r3, r2
 800a174:	eba3 0309 	sub.w	r3, r3, r9
 800a178:	4543      	cmp	r3, r8
 800a17a:	f77f af79 	ble.w	800a070 <_printf_float+0x250>
 800a17e:	2301      	movs	r3, #1
 800a180:	4652      	mov	r2, sl
 800a182:	4631      	mov	r1, r6
 800a184:	4628      	mov	r0, r5
 800a186:	47b8      	blx	r7
 800a188:	3001      	adds	r0, #1
 800a18a:	f43f aeaa 	beq.w	8009ee2 <_printf_float+0xc2>
 800a18e:	f108 0801 	add.w	r8, r8, #1
 800a192:	e7ec      	b.n	800a16e <_printf_float+0x34e>
 800a194:	4613      	mov	r3, r2
 800a196:	4631      	mov	r1, r6
 800a198:	4642      	mov	r2, r8
 800a19a:	4628      	mov	r0, r5
 800a19c:	47b8      	blx	r7
 800a19e:	3001      	adds	r0, #1
 800a1a0:	d1c0      	bne.n	800a124 <_printf_float+0x304>
 800a1a2:	e69e      	b.n	8009ee2 <_printf_float+0xc2>
 800a1a4:	2301      	movs	r3, #1
 800a1a6:	4631      	mov	r1, r6
 800a1a8:	4628      	mov	r0, r5
 800a1aa:	9205      	str	r2, [sp, #20]
 800a1ac:	47b8      	blx	r7
 800a1ae:	3001      	adds	r0, #1
 800a1b0:	f43f ae97 	beq.w	8009ee2 <_printf_float+0xc2>
 800a1b4:	9a05      	ldr	r2, [sp, #20]
 800a1b6:	f10b 0b01 	add.w	fp, fp, #1
 800a1ba:	e7b9      	b.n	800a130 <_printf_float+0x310>
 800a1bc:	ee18 3a10 	vmov	r3, s16
 800a1c0:	4652      	mov	r2, sl
 800a1c2:	4631      	mov	r1, r6
 800a1c4:	4628      	mov	r0, r5
 800a1c6:	47b8      	blx	r7
 800a1c8:	3001      	adds	r0, #1
 800a1ca:	d1be      	bne.n	800a14a <_printf_float+0x32a>
 800a1cc:	e689      	b.n	8009ee2 <_printf_float+0xc2>
 800a1ce:	9a05      	ldr	r2, [sp, #20]
 800a1d0:	464b      	mov	r3, r9
 800a1d2:	4442      	add	r2, r8
 800a1d4:	4631      	mov	r1, r6
 800a1d6:	4628      	mov	r0, r5
 800a1d8:	47b8      	blx	r7
 800a1da:	3001      	adds	r0, #1
 800a1dc:	d1c1      	bne.n	800a162 <_printf_float+0x342>
 800a1de:	e680      	b.n	8009ee2 <_printf_float+0xc2>
 800a1e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a1e2:	2a01      	cmp	r2, #1
 800a1e4:	dc01      	bgt.n	800a1ea <_printf_float+0x3ca>
 800a1e6:	07db      	lsls	r3, r3, #31
 800a1e8:	d538      	bpl.n	800a25c <_printf_float+0x43c>
 800a1ea:	2301      	movs	r3, #1
 800a1ec:	4642      	mov	r2, r8
 800a1ee:	4631      	mov	r1, r6
 800a1f0:	4628      	mov	r0, r5
 800a1f2:	47b8      	blx	r7
 800a1f4:	3001      	adds	r0, #1
 800a1f6:	f43f ae74 	beq.w	8009ee2 <_printf_float+0xc2>
 800a1fa:	ee18 3a10 	vmov	r3, s16
 800a1fe:	4652      	mov	r2, sl
 800a200:	4631      	mov	r1, r6
 800a202:	4628      	mov	r0, r5
 800a204:	47b8      	blx	r7
 800a206:	3001      	adds	r0, #1
 800a208:	f43f ae6b 	beq.w	8009ee2 <_printf_float+0xc2>
 800a20c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a210:	2200      	movs	r2, #0
 800a212:	2300      	movs	r3, #0
 800a214:	f7f6 fc68 	bl	8000ae8 <__aeabi_dcmpeq>
 800a218:	b9d8      	cbnz	r0, 800a252 <_printf_float+0x432>
 800a21a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a21c:	f108 0201 	add.w	r2, r8, #1
 800a220:	3b01      	subs	r3, #1
 800a222:	4631      	mov	r1, r6
 800a224:	4628      	mov	r0, r5
 800a226:	47b8      	blx	r7
 800a228:	3001      	adds	r0, #1
 800a22a:	d10e      	bne.n	800a24a <_printf_float+0x42a>
 800a22c:	e659      	b.n	8009ee2 <_printf_float+0xc2>
 800a22e:	2301      	movs	r3, #1
 800a230:	4652      	mov	r2, sl
 800a232:	4631      	mov	r1, r6
 800a234:	4628      	mov	r0, r5
 800a236:	47b8      	blx	r7
 800a238:	3001      	adds	r0, #1
 800a23a:	f43f ae52 	beq.w	8009ee2 <_printf_float+0xc2>
 800a23e:	f108 0801 	add.w	r8, r8, #1
 800a242:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a244:	3b01      	subs	r3, #1
 800a246:	4543      	cmp	r3, r8
 800a248:	dcf1      	bgt.n	800a22e <_printf_float+0x40e>
 800a24a:	464b      	mov	r3, r9
 800a24c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a250:	e6dc      	b.n	800a00c <_printf_float+0x1ec>
 800a252:	f04f 0800 	mov.w	r8, #0
 800a256:	f104 0a1a 	add.w	sl, r4, #26
 800a25a:	e7f2      	b.n	800a242 <_printf_float+0x422>
 800a25c:	2301      	movs	r3, #1
 800a25e:	4642      	mov	r2, r8
 800a260:	e7df      	b.n	800a222 <_printf_float+0x402>
 800a262:	2301      	movs	r3, #1
 800a264:	464a      	mov	r2, r9
 800a266:	4631      	mov	r1, r6
 800a268:	4628      	mov	r0, r5
 800a26a:	47b8      	blx	r7
 800a26c:	3001      	adds	r0, #1
 800a26e:	f43f ae38 	beq.w	8009ee2 <_printf_float+0xc2>
 800a272:	f108 0801 	add.w	r8, r8, #1
 800a276:	68e3      	ldr	r3, [r4, #12]
 800a278:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a27a:	1a5b      	subs	r3, r3, r1
 800a27c:	4543      	cmp	r3, r8
 800a27e:	dcf0      	bgt.n	800a262 <_printf_float+0x442>
 800a280:	e6fa      	b.n	800a078 <_printf_float+0x258>
 800a282:	f04f 0800 	mov.w	r8, #0
 800a286:	f104 0919 	add.w	r9, r4, #25
 800a28a:	e7f4      	b.n	800a276 <_printf_float+0x456>

0800a28c <_printf_common>:
 800a28c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a290:	4616      	mov	r6, r2
 800a292:	4699      	mov	r9, r3
 800a294:	688a      	ldr	r2, [r1, #8]
 800a296:	690b      	ldr	r3, [r1, #16]
 800a298:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a29c:	4293      	cmp	r3, r2
 800a29e:	bfb8      	it	lt
 800a2a0:	4613      	movlt	r3, r2
 800a2a2:	6033      	str	r3, [r6, #0]
 800a2a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a2a8:	4607      	mov	r7, r0
 800a2aa:	460c      	mov	r4, r1
 800a2ac:	b10a      	cbz	r2, 800a2b2 <_printf_common+0x26>
 800a2ae:	3301      	adds	r3, #1
 800a2b0:	6033      	str	r3, [r6, #0]
 800a2b2:	6823      	ldr	r3, [r4, #0]
 800a2b4:	0699      	lsls	r1, r3, #26
 800a2b6:	bf42      	ittt	mi
 800a2b8:	6833      	ldrmi	r3, [r6, #0]
 800a2ba:	3302      	addmi	r3, #2
 800a2bc:	6033      	strmi	r3, [r6, #0]
 800a2be:	6825      	ldr	r5, [r4, #0]
 800a2c0:	f015 0506 	ands.w	r5, r5, #6
 800a2c4:	d106      	bne.n	800a2d4 <_printf_common+0x48>
 800a2c6:	f104 0a19 	add.w	sl, r4, #25
 800a2ca:	68e3      	ldr	r3, [r4, #12]
 800a2cc:	6832      	ldr	r2, [r6, #0]
 800a2ce:	1a9b      	subs	r3, r3, r2
 800a2d0:	42ab      	cmp	r3, r5
 800a2d2:	dc26      	bgt.n	800a322 <_printf_common+0x96>
 800a2d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a2d8:	1e13      	subs	r3, r2, #0
 800a2da:	6822      	ldr	r2, [r4, #0]
 800a2dc:	bf18      	it	ne
 800a2de:	2301      	movne	r3, #1
 800a2e0:	0692      	lsls	r2, r2, #26
 800a2e2:	d42b      	bmi.n	800a33c <_printf_common+0xb0>
 800a2e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a2e8:	4649      	mov	r1, r9
 800a2ea:	4638      	mov	r0, r7
 800a2ec:	47c0      	blx	r8
 800a2ee:	3001      	adds	r0, #1
 800a2f0:	d01e      	beq.n	800a330 <_printf_common+0xa4>
 800a2f2:	6823      	ldr	r3, [r4, #0]
 800a2f4:	68e5      	ldr	r5, [r4, #12]
 800a2f6:	6832      	ldr	r2, [r6, #0]
 800a2f8:	f003 0306 	and.w	r3, r3, #6
 800a2fc:	2b04      	cmp	r3, #4
 800a2fe:	bf08      	it	eq
 800a300:	1aad      	subeq	r5, r5, r2
 800a302:	68a3      	ldr	r3, [r4, #8]
 800a304:	6922      	ldr	r2, [r4, #16]
 800a306:	bf0c      	ite	eq
 800a308:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a30c:	2500      	movne	r5, #0
 800a30e:	4293      	cmp	r3, r2
 800a310:	bfc4      	itt	gt
 800a312:	1a9b      	subgt	r3, r3, r2
 800a314:	18ed      	addgt	r5, r5, r3
 800a316:	2600      	movs	r6, #0
 800a318:	341a      	adds	r4, #26
 800a31a:	42b5      	cmp	r5, r6
 800a31c:	d11a      	bne.n	800a354 <_printf_common+0xc8>
 800a31e:	2000      	movs	r0, #0
 800a320:	e008      	b.n	800a334 <_printf_common+0xa8>
 800a322:	2301      	movs	r3, #1
 800a324:	4652      	mov	r2, sl
 800a326:	4649      	mov	r1, r9
 800a328:	4638      	mov	r0, r7
 800a32a:	47c0      	blx	r8
 800a32c:	3001      	adds	r0, #1
 800a32e:	d103      	bne.n	800a338 <_printf_common+0xac>
 800a330:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a334:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a338:	3501      	adds	r5, #1
 800a33a:	e7c6      	b.n	800a2ca <_printf_common+0x3e>
 800a33c:	18e1      	adds	r1, r4, r3
 800a33e:	1c5a      	adds	r2, r3, #1
 800a340:	2030      	movs	r0, #48	; 0x30
 800a342:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a346:	4422      	add	r2, r4
 800a348:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a34c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a350:	3302      	adds	r3, #2
 800a352:	e7c7      	b.n	800a2e4 <_printf_common+0x58>
 800a354:	2301      	movs	r3, #1
 800a356:	4622      	mov	r2, r4
 800a358:	4649      	mov	r1, r9
 800a35a:	4638      	mov	r0, r7
 800a35c:	47c0      	blx	r8
 800a35e:	3001      	adds	r0, #1
 800a360:	d0e6      	beq.n	800a330 <_printf_common+0xa4>
 800a362:	3601      	adds	r6, #1
 800a364:	e7d9      	b.n	800a31a <_printf_common+0x8e>
	...

0800a368 <_printf_i>:
 800a368:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a36c:	7e0f      	ldrb	r7, [r1, #24]
 800a36e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a370:	2f78      	cmp	r7, #120	; 0x78
 800a372:	4691      	mov	r9, r2
 800a374:	4680      	mov	r8, r0
 800a376:	460c      	mov	r4, r1
 800a378:	469a      	mov	sl, r3
 800a37a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a37e:	d807      	bhi.n	800a390 <_printf_i+0x28>
 800a380:	2f62      	cmp	r7, #98	; 0x62
 800a382:	d80a      	bhi.n	800a39a <_printf_i+0x32>
 800a384:	2f00      	cmp	r7, #0
 800a386:	f000 80d8 	beq.w	800a53a <_printf_i+0x1d2>
 800a38a:	2f58      	cmp	r7, #88	; 0x58
 800a38c:	f000 80a3 	beq.w	800a4d6 <_printf_i+0x16e>
 800a390:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a394:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a398:	e03a      	b.n	800a410 <_printf_i+0xa8>
 800a39a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a39e:	2b15      	cmp	r3, #21
 800a3a0:	d8f6      	bhi.n	800a390 <_printf_i+0x28>
 800a3a2:	a101      	add	r1, pc, #4	; (adr r1, 800a3a8 <_printf_i+0x40>)
 800a3a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a3a8:	0800a401 	.word	0x0800a401
 800a3ac:	0800a415 	.word	0x0800a415
 800a3b0:	0800a391 	.word	0x0800a391
 800a3b4:	0800a391 	.word	0x0800a391
 800a3b8:	0800a391 	.word	0x0800a391
 800a3bc:	0800a391 	.word	0x0800a391
 800a3c0:	0800a415 	.word	0x0800a415
 800a3c4:	0800a391 	.word	0x0800a391
 800a3c8:	0800a391 	.word	0x0800a391
 800a3cc:	0800a391 	.word	0x0800a391
 800a3d0:	0800a391 	.word	0x0800a391
 800a3d4:	0800a521 	.word	0x0800a521
 800a3d8:	0800a445 	.word	0x0800a445
 800a3dc:	0800a503 	.word	0x0800a503
 800a3e0:	0800a391 	.word	0x0800a391
 800a3e4:	0800a391 	.word	0x0800a391
 800a3e8:	0800a543 	.word	0x0800a543
 800a3ec:	0800a391 	.word	0x0800a391
 800a3f0:	0800a445 	.word	0x0800a445
 800a3f4:	0800a391 	.word	0x0800a391
 800a3f8:	0800a391 	.word	0x0800a391
 800a3fc:	0800a50b 	.word	0x0800a50b
 800a400:	682b      	ldr	r3, [r5, #0]
 800a402:	1d1a      	adds	r2, r3, #4
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	602a      	str	r2, [r5, #0]
 800a408:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a40c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a410:	2301      	movs	r3, #1
 800a412:	e0a3      	b.n	800a55c <_printf_i+0x1f4>
 800a414:	6820      	ldr	r0, [r4, #0]
 800a416:	6829      	ldr	r1, [r5, #0]
 800a418:	0606      	lsls	r6, r0, #24
 800a41a:	f101 0304 	add.w	r3, r1, #4
 800a41e:	d50a      	bpl.n	800a436 <_printf_i+0xce>
 800a420:	680e      	ldr	r6, [r1, #0]
 800a422:	602b      	str	r3, [r5, #0]
 800a424:	2e00      	cmp	r6, #0
 800a426:	da03      	bge.n	800a430 <_printf_i+0xc8>
 800a428:	232d      	movs	r3, #45	; 0x2d
 800a42a:	4276      	negs	r6, r6
 800a42c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a430:	485e      	ldr	r0, [pc, #376]	; (800a5ac <_printf_i+0x244>)
 800a432:	230a      	movs	r3, #10
 800a434:	e019      	b.n	800a46a <_printf_i+0x102>
 800a436:	680e      	ldr	r6, [r1, #0]
 800a438:	602b      	str	r3, [r5, #0]
 800a43a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a43e:	bf18      	it	ne
 800a440:	b236      	sxthne	r6, r6
 800a442:	e7ef      	b.n	800a424 <_printf_i+0xbc>
 800a444:	682b      	ldr	r3, [r5, #0]
 800a446:	6820      	ldr	r0, [r4, #0]
 800a448:	1d19      	adds	r1, r3, #4
 800a44a:	6029      	str	r1, [r5, #0]
 800a44c:	0601      	lsls	r1, r0, #24
 800a44e:	d501      	bpl.n	800a454 <_printf_i+0xec>
 800a450:	681e      	ldr	r6, [r3, #0]
 800a452:	e002      	b.n	800a45a <_printf_i+0xf2>
 800a454:	0646      	lsls	r6, r0, #25
 800a456:	d5fb      	bpl.n	800a450 <_printf_i+0xe8>
 800a458:	881e      	ldrh	r6, [r3, #0]
 800a45a:	4854      	ldr	r0, [pc, #336]	; (800a5ac <_printf_i+0x244>)
 800a45c:	2f6f      	cmp	r7, #111	; 0x6f
 800a45e:	bf0c      	ite	eq
 800a460:	2308      	moveq	r3, #8
 800a462:	230a      	movne	r3, #10
 800a464:	2100      	movs	r1, #0
 800a466:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a46a:	6865      	ldr	r5, [r4, #4]
 800a46c:	60a5      	str	r5, [r4, #8]
 800a46e:	2d00      	cmp	r5, #0
 800a470:	bfa2      	ittt	ge
 800a472:	6821      	ldrge	r1, [r4, #0]
 800a474:	f021 0104 	bicge.w	r1, r1, #4
 800a478:	6021      	strge	r1, [r4, #0]
 800a47a:	b90e      	cbnz	r6, 800a480 <_printf_i+0x118>
 800a47c:	2d00      	cmp	r5, #0
 800a47e:	d04d      	beq.n	800a51c <_printf_i+0x1b4>
 800a480:	4615      	mov	r5, r2
 800a482:	fbb6 f1f3 	udiv	r1, r6, r3
 800a486:	fb03 6711 	mls	r7, r3, r1, r6
 800a48a:	5dc7      	ldrb	r7, [r0, r7]
 800a48c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a490:	4637      	mov	r7, r6
 800a492:	42bb      	cmp	r3, r7
 800a494:	460e      	mov	r6, r1
 800a496:	d9f4      	bls.n	800a482 <_printf_i+0x11a>
 800a498:	2b08      	cmp	r3, #8
 800a49a:	d10b      	bne.n	800a4b4 <_printf_i+0x14c>
 800a49c:	6823      	ldr	r3, [r4, #0]
 800a49e:	07de      	lsls	r6, r3, #31
 800a4a0:	d508      	bpl.n	800a4b4 <_printf_i+0x14c>
 800a4a2:	6923      	ldr	r3, [r4, #16]
 800a4a4:	6861      	ldr	r1, [r4, #4]
 800a4a6:	4299      	cmp	r1, r3
 800a4a8:	bfde      	ittt	le
 800a4aa:	2330      	movle	r3, #48	; 0x30
 800a4ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a4b0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a4b4:	1b52      	subs	r2, r2, r5
 800a4b6:	6122      	str	r2, [r4, #16]
 800a4b8:	f8cd a000 	str.w	sl, [sp]
 800a4bc:	464b      	mov	r3, r9
 800a4be:	aa03      	add	r2, sp, #12
 800a4c0:	4621      	mov	r1, r4
 800a4c2:	4640      	mov	r0, r8
 800a4c4:	f7ff fee2 	bl	800a28c <_printf_common>
 800a4c8:	3001      	adds	r0, #1
 800a4ca:	d14c      	bne.n	800a566 <_printf_i+0x1fe>
 800a4cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a4d0:	b004      	add	sp, #16
 800a4d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4d6:	4835      	ldr	r0, [pc, #212]	; (800a5ac <_printf_i+0x244>)
 800a4d8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a4dc:	6829      	ldr	r1, [r5, #0]
 800a4de:	6823      	ldr	r3, [r4, #0]
 800a4e0:	f851 6b04 	ldr.w	r6, [r1], #4
 800a4e4:	6029      	str	r1, [r5, #0]
 800a4e6:	061d      	lsls	r5, r3, #24
 800a4e8:	d514      	bpl.n	800a514 <_printf_i+0x1ac>
 800a4ea:	07df      	lsls	r7, r3, #31
 800a4ec:	bf44      	itt	mi
 800a4ee:	f043 0320 	orrmi.w	r3, r3, #32
 800a4f2:	6023      	strmi	r3, [r4, #0]
 800a4f4:	b91e      	cbnz	r6, 800a4fe <_printf_i+0x196>
 800a4f6:	6823      	ldr	r3, [r4, #0]
 800a4f8:	f023 0320 	bic.w	r3, r3, #32
 800a4fc:	6023      	str	r3, [r4, #0]
 800a4fe:	2310      	movs	r3, #16
 800a500:	e7b0      	b.n	800a464 <_printf_i+0xfc>
 800a502:	6823      	ldr	r3, [r4, #0]
 800a504:	f043 0320 	orr.w	r3, r3, #32
 800a508:	6023      	str	r3, [r4, #0]
 800a50a:	2378      	movs	r3, #120	; 0x78
 800a50c:	4828      	ldr	r0, [pc, #160]	; (800a5b0 <_printf_i+0x248>)
 800a50e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a512:	e7e3      	b.n	800a4dc <_printf_i+0x174>
 800a514:	0659      	lsls	r1, r3, #25
 800a516:	bf48      	it	mi
 800a518:	b2b6      	uxthmi	r6, r6
 800a51a:	e7e6      	b.n	800a4ea <_printf_i+0x182>
 800a51c:	4615      	mov	r5, r2
 800a51e:	e7bb      	b.n	800a498 <_printf_i+0x130>
 800a520:	682b      	ldr	r3, [r5, #0]
 800a522:	6826      	ldr	r6, [r4, #0]
 800a524:	6961      	ldr	r1, [r4, #20]
 800a526:	1d18      	adds	r0, r3, #4
 800a528:	6028      	str	r0, [r5, #0]
 800a52a:	0635      	lsls	r5, r6, #24
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	d501      	bpl.n	800a534 <_printf_i+0x1cc>
 800a530:	6019      	str	r1, [r3, #0]
 800a532:	e002      	b.n	800a53a <_printf_i+0x1d2>
 800a534:	0670      	lsls	r0, r6, #25
 800a536:	d5fb      	bpl.n	800a530 <_printf_i+0x1c8>
 800a538:	8019      	strh	r1, [r3, #0]
 800a53a:	2300      	movs	r3, #0
 800a53c:	6123      	str	r3, [r4, #16]
 800a53e:	4615      	mov	r5, r2
 800a540:	e7ba      	b.n	800a4b8 <_printf_i+0x150>
 800a542:	682b      	ldr	r3, [r5, #0]
 800a544:	1d1a      	adds	r2, r3, #4
 800a546:	602a      	str	r2, [r5, #0]
 800a548:	681d      	ldr	r5, [r3, #0]
 800a54a:	6862      	ldr	r2, [r4, #4]
 800a54c:	2100      	movs	r1, #0
 800a54e:	4628      	mov	r0, r5
 800a550:	f7f5 fe56 	bl	8000200 <memchr>
 800a554:	b108      	cbz	r0, 800a55a <_printf_i+0x1f2>
 800a556:	1b40      	subs	r0, r0, r5
 800a558:	6060      	str	r0, [r4, #4]
 800a55a:	6863      	ldr	r3, [r4, #4]
 800a55c:	6123      	str	r3, [r4, #16]
 800a55e:	2300      	movs	r3, #0
 800a560:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a564:	e7a8      	b.n	800a4b8 <_printf_i+0x150>
 800a566:	6923      	ldr	r3, [r4, #16]
 800a568:	462a      	mov	r2, r5
 800a56a:	4649      	mov	r1, r9
 800a56c:	4640      	mov	r0, r8
 800a56e:	47d0      	blx	sl
 800a570:	3001      	adds	r0, #1
 800a572:	d0ab      	beq.n	800a4cc <_printf_i+0x164>
 800a574:	6823      	ldr	r3, [r4, #0]
 800a576:	079b      	lsls	r3, r3, #30
 800a578:	d413      	bmi.n	800a5a2 <_printf_i+0x23a>
 800a57a:	68e0      	ldr	r0, [r4, #12]
 800a57c:	9b03      	ldr	r3, [sp, #12]
 800a57e:	4298      	cmp	r0, r3
 800a580:	bfb8      	it	lt
 800a582:	4618      	movlt	r0, r3
 800a584:	e7a4      	b.n	800a4d0 <_printf_i+0x168>
 800a586:	2301      	movs	r3, #1
 800a588:	4632      	mov	r2, r6
 800a58a:	4649      	mov	r1, r9
 800a58c:	4640      	mov	r0, r8
 800a58e:	47d0      	blx	sl
 800a590:	3001      	adds	r0, #1
 800a592:	d09b      	beq.n	800a4cc <_printf_i+0x164>
 800a594:	3501      	adds	r5, #1
 800a596:	68e3      	ldr	r3, [r4, #12]
 800a598:	9903      	ldr	r1, [sp, #12]
 800a59a:	1a5b      	subs	r3, r3, r1
 800a59c:	42ab      	cmp	r3, r5
 800a59e:	dcf2      	bgt.n	800a586 <_printf_i+0x21e>
 800a5a0:	e7eb      	b.n	800a57a <_printf_i+0x212>
 800a5a2:	2500      	movs	r5, #0
 800a5a4:	f104 0619 	add.w	r6, r4, #25
 800a5a8:	e7f5      	b.n	800a596 <_printf_i+0x22e>
 800a5aa:	bf00      	nop
 800a5ac:	08012f48 	.word	0x08012f48
 800a5b0:	08012f59 	.word	0x08012f59

0800a5b4 <iprintf>:
 800a5b4:	b40f      	push	{r0, r1, r2, r3}
 800a5b6:	4b0a      	ldr	r3, [pc, #40]	; (800a5e0 <iprintf+0x2c>)
 800a5b8:	b513      	push	{r0, r1, r4, lr}
 800a5ba:	681c      	ldr	r4, [r3, #0]
 800a5bc:	b124      	cbz	r4, 800a5c8 <iprintf+0x14>
 800a5be:	69a3      	ldr	r3, [r4, #24]
 800a5c0:	b913      	cbnz	r3, 800a5c8 <iprintf+0x14>
 800a5c2:	4620      	mov	r0, r4
 800a5c4:	f7ff f95c 	bl	8009880 <__sinit>
 800a5c8:	ab05      	add	r3, sp, #20
 800a5ca:	9a04      	ldr	r2, [sp, #16]
 800a5cc:	68a1      	ldr	r1, [r4, #8]
 800a5ce:	9301      	str	r3, [sp, #4]
 800a5d0:	4620      	mov	r0, r4
 800a5d2:	f001 fe91 	bl	800c2f8 <_vfiprintf_r>
 800a5d6:	b002      	add	sp, #8
 800a5d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5dc:	b004      	add	sp, #16
 800a5de:	4770      	bx	lr
 800a5e0:	20000014 	.word	0x20000014

0800a5e4 <putchar>:
 800a5e4:	4b09      	ldr	r3, [pc, #36]	; (800a60c <putchar+0x28>)
 800a5e6:	b513      	push	{r0, r1, r4, lr}
 800a5e8:	681c      	ldr	r4, [r3, #0]
 800a5ea:	4601      	mov	r1, r0
 800a5ec:	b134      	cbz	r4, 800a5fc <putchar+0x18>
 800a5ee:	69a3      	ldr	r3, [r4, #24]
 800a5f0:	b923      	cbnz	r3, 800a5fc <putchar+0x18>
 800a5f2:	9001      	str	r0, [sp, #4]
 800a5f4:	4620      	mov	r0, r4
 800a5f6:	f7ff f943 	bl	8009880 <__sinit>
 800a5fa:	9901      	ldr	r1, [sp, #4]
 800a5fc:	68a2      	ldr	r2, [r4, #8]
 800a5fe:	4620      	mov	r0, r4
 800a600:	b002      	add	sp, #8
 800a602:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a606:	f002 b8f9 	b.w	800c7fc <_putc_r>
 800a60a:	bf00      	nop
 800a60c:	20000014 	.word	0x20000014

0800a610 <_puts_r>:
 800a610:	b570      	push	{r4, r5, r6, lr}
 800a612:	460e      	mov	r6, r1
 800a614:	4605      	mov	r5, r0
 800a616:	b118      	cbz	r0, 800a620 <_puts_r+0x10>
 800a618:	6983      	ldr	r3, [r0, #24]
 800a61a:	b90b      	cbnz	r3, 800a620 <_puts_r+0x10>
 800a61c:	f7ff f930 	bl	8009880 <__sinit>
 800a620:	69ab      	ldr	r3, [r5, #24]
 800a622:	68ac      	ldr	r4, [r5, #8]
 800a624:	b913      	cbnz	r3, 800a62c <_puts_r+0x1c>
 800a626:	4628      	mov	r0, r5
 800a628:	f7ff f92a 	bl	8009880 <__sinit>
 800a62c:	4b2c      	ldr	r3, [pc, #176]	; (800a6e0 <_puts_r+0xd0>)
 800a62e:	429c      	cmp	r4, r3
 800a630:	d120      	bne.n	800a674 <_puts_r+0x64>
 800a632:	686c      	ldr	r4, [r5, #4]
 800a634:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a636:	07db      	lsls	r3, r3, #31
 800a638:	d405      	bmi.n	800a646 <_puts_r+0x36>
 800a63a:	89a3      	ldrh	r3, [r4, #12]
 800a63c:	0598      	lsls	r0, r3, #22
 800a63e:	d402      	bmi.n	800a646 <_puts_r+0x36>
 800a640:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a642:	f7ff f9e0 	bl	8009a06 <__retarget_lock_acquire_recursive>
 800a646:	89a3      	ldrh	r3, [r4, #12]
 800a648:	0719      	lsls	r1, r3, #28
 800a64a:	d51d      	bpl.n	800a688 <_puts_r+0x78>
 800a64c:	6923      	ldr	r3, [r4, #16]
 800a64e:	b1db      	cbz	r3, 800a688 <_puts_r+0x78>
 800a650:	3e01      	subs	r6, #1
 800a652:	68a3      	ldr	r3, [r4, #8]
 800a654:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a658:	3b01      	subs	r3, #1
 800a65a:	60a3      	str	r3, [r4, #8]
 800a65c:	bb39      	cbnz	r1, 800a6ae <_puts_r+0x9e>
 800a65e:	2b00      	cmp	r3, #0
 800a660:	da38      	bge.n	800a6d4 <_puts_r+0xc4>
 800a662:	4622      	mov	r2, r4
 800a664:	210a      	movs	r1, #10
 800a666:	4628      	mov	r0, r5
 800a668:	f000 f910 	bl	800a88c <__swbuf_r>
 800a66c:	3001      	adds	r0, #1
 800a66e:	d011      	beq.n	800a694 <_puts_r+0x84>
 800a670:	250a      	movs	r5, #10
 800a672:	e011      	b.n	800a698 <_puts_r+0x88>
 800a674:	4b1b      	ldr	r3, [pc, #108]	; (800a6e4 <_puts_r+0xd4>)
 800a676:	429c      	cmp	r4, r3
 800a678:	d101      	bne.n	800a67e <_puts_r+0x6e>
 800a67a:	68ac      	ldr	r4, [r5, #8]
 800a67c:	e7da      	b.n	800a634 <_puts_r+0x24>
 800a67e:	4b1a      	ldr	r3, [pc, #104]	; (800a6e8 <_puts_r+0xd8>)
 800a680:	429c      	cmp	r4, r3
 800a682:	bf08      	it	eq
 800a684:	68ec      	ldreq	r4, [r5, #12]
 800a686:	e7d5      	b.n	800a634 <_puts_r+0x24>
 800a688:	4621      	mov	r1, r4
 800a68a:	4628      	mov	r0, r5
 800a68c:	f000 f962 	bl	800a954 <__swsetup_r>
 800a690:	2800      	cmp	r0, #0
 800a692:	d0dd      	beq.n	800a650 <_puts_r+0x40>
 800a694:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800a698:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a69a:	07da      	lsls	r2, r3, #31
 800a69c:	d405      	bmi.n	800a6aa <_puts_r+0x9a>
 800a69e:	89a3      	ldrh	r3, [r4, #12]
 800a6a0:	059b      	lsls	r3, r3, #22
 800a6a2:	d402      	bmi.n	800a6aa <_puts_r+0x9a>
 800a6a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a6a6:	f7ff f9af 	bl	8009a08 <__retarget_lock_release_recursive>
 800a6aa:	4628      	mov	r0, r5
 800a6ac:	bd70      	pop	{r4, r5, r6, pc}
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	da04      	bge.n	800a6bc <_puts_r+0xac>
 800a6b2:	69a2      	ldr	r2, [r4, #24]
 800a6b4:	429a      	cmp	r2, r3
 800a6b6:	dc06      	bgt.n	800a6c6 <_puts_r+0xb6>
 800a6b8:	290a      	cmp	r1, #10
 800a6ba:	d004      	beq.n	800a6c6 <_puts_r+0xb6>
 800a6bc:	6823      	ldr	r3, [r4, #0]
 800a6be:	1c5a      	adds	r2, r3, #1
 800a6c0:	6022      	str	r2, [r4, #0]
 800a6c2:	7019      	strb	r1, [r3, #0]
 800a6c4:	e7c5      	b.n	800a652 <_puts_r+0x42>
 800a6c6:	4622      	mov	r2, r4
 800a6c8:	4628      	mov	r0, r5
 800a6ca:	f000 f8df 	bl	800a88c <__swbuf_r>
 800a6ce:	3001      	adds	r0, #1
 800a6d0:	d1bf      	bne.n	800a652 <_puts_r+0x42>
 800a6d2:	e7df      	b.n	800a694 <_puts_r+0x84>
 800a6d4:	6823      	ldr	r3, [r4, #0]
 800a6d6:	250a      	movs	r5, #10
 800a6d8:	1c5a      	adds	r2, r3, #1
 800a6da:	6022      	str	r2, [r4, #0]
 800a6dc:	701d      	strb	r5, [r3, #0]
 800a6de:	e7db      	b.n	800a698 <_puts_r+0x88>
 800a6e0:	08012ef4 	.word	0x08012ef4
 800a6e4:	08012f14 	.word	0x08012f14
 800a6e8:	08012ed4 	.word	0x08012ed4

0800a6ec <puts>:
 800a6ec:	4b02      	ldr	r3, [pc, #8]	; (800a6f8 <puts+0xc>)
 800a6ee:	4601      	mov	r1, r0
 800a6f0:	6818      	ldr	r0, [r3, #0]
 800a6f2:	f7ff bf8d 	b.w	800a610 <_puts_r>
 800a6f6:	bf00      	nop
 800a6f8:	20000014 	.word	0x20000014

0800a6fc <_sbrk_r>:
 800a6fc:	b538      	push	{r3, r4, r5, lr}
 800a6fe:	4d06      	ldr	r5, [pc, #24]	; (800a718 <_sbrk_r+0x1c>)
 800a700:	2300      	movs	r3, #0
 800a702:	4604      	mov	r4, r0
 800a704:	4608      	mov	r0, r1
 800a706:	602b      	str	r3, [r5, #0]
 800a708:	f7f8 fa6c 	bl	8002be4 <_sbrk>
 800a70c:	1c43      	adds	r3, r0, #1
 800a70e:	d102      	bne.n	800a716 <_sbrk_r+0x1a>
 800a710:	682b      	ldr	r3, [r5, #0]
 800a712:	b103      	cbz	r3, 800a716 <_sbrk_r+0x1a>
 800a714:	6023      	str	r3, [r4, #0]
 800a716:	bd38      	pop	{r3, r4, r5, pc}
 800a718:	2000049c 	.word	0x2000049c

0800a71c <siscanf>:
 800a71c:	b40e      	push	{r1, r2, r3}
 800a71e:	b510      	push	{r4, lr}
 800a720:	b09f      	sub	sp, #124	; 0x7c
 800a722:	ac21      	add	r4, sp, #132	; 0x84
 800a724:	f44f 7101 	mov.w	r1, #516	; 0x204
 800a728:	f854 2b04 	ldr.w	r2, [r4], #4
 800a72c:	9201      	str	r2, [sp, #4]
 800a72e:	f8ad 101c 	strh.w	r1, [sp, #28]
 800a732:	9004      	str	r0, [sp, #16]
 800a734:	9008      	str	r0, [sp, #32]
 800a736:	f7f5 fd55 	bl	80001e4 <strlen>
 800a73a:	4b0c      	ldr	r3, [pc, #48]	; (800a76c <siscanf+0x50>)
 800a73c:	9005      	str	r0, [sp, #20]
 800a73e:	9009      	str	r0, [sp, #36]	; 0x24
 800a740:	930d      	str	r3, [sp, #52]	; 0x34
 800a742:	480b      	ldr	r0, [pc, #44]	; (800a770 <siscanf+0x54>)
 800a744:	9a01      	ldr	r2, [sp, #4]
 800a746:	6800      	ldr	r0, [r0, #0]
 800a748:	9403      	str	r4, [sp, #12]
 800a74a:	2300      	movs	r3, #0
 800a74c:	9311      	str	r3, [sp, #68]	; 0x44
 800a74e:	9316      	str	r3, [sp, #88]	; 0x58
 800a750:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a754:	f8ad 301e 	strh.w	r3, [sp, #30]
 800a758:	a904      	add	r1, sp, #16
 800a75a:	4623      	mov	r3, r4
 800a75c:	f001 fc2a 	bl	800bfb4 <__ssvfiscanf_r>
 800a760:	b01f      	add	sp, #124	; 0x7c
 800a762:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a766:	b003      	add	sp, #12
 800a768:	4770      	bx	lr
 800a76a:	bf00      	nop
 800a76c:	0800a797 	.word	0x0800a797
 800a770:	20000014 	.word	0x20000014

0800a774 <__sread>:
 800a774:	b510      	push	{r4, lr}
 800a776:	460c      	mov	r4, r1
 800a778:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a77c:	f002 f886 	bl	800c88c <_read_r>
 800a780:	2800      	cmp	r0, #0
 800a782:	bfab      	itete	ge
 800a784:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a786:	89a3      	ldrhlt	r3, [r4, #12]
 800a788:	181b      	addge	r3, r3, r0
 800a78a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a78e:	bfac      	ite	ge
 800a790:	6563      	strge	r3, [r4, #84]	; 0x54
 800a792:	81a3      	strhlt	r3, [r4, #12]
 800a794:	bd10      	pop	{r4, pc}

0800a796 <__seofread>:
 800a796:	2000      	movs	r0, #0
 800a798:	4770      	bx	lr

0800a79a <__swrite>:
 800a79a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a79e:	461f      	mov	r7, r3
 800a7a0:	898b      	ldrh	r3, [r1, #12]
 800a7a2:	05db      	lsls	r3, r3, #23
 800a7a4:	4605      	mov	r5, r0
 800a7a6:	460c      	mov	r4, r1
 800a7a8:	4616      	mov	r6, r2
 800a7aa:	d505      	bpl.n	800a7b8 <__swrite+0x1e>
 800a7ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7b0:	2302      	movs	r3, #2
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	f000 ffec 	bl	800b790 <_lseek_r>
 800a7b8:	89a3      	ldrh	r3, [r4, #12]
 800a7ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a7be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a7c2:	81a3      	strh	r3, [r4, #12]
 800a7c4:	4632      	mov	r2, r6
 800a7c6:	463b      	mov	r3, r7
 800a7c8:	4628      	mov	r0, r5
 800a7ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a7ce:	f000 b8af 	b.w	800a930 <_write_r>

0800a7d2 <__sseek>:
 800a7d2:	b510      	push	{r4, lr}
 800a7d4:	460c      	mov	r4, r1
 800a7d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7da:	f000 ffd9 	bl	800b790 <_lseek_r>
 800a7de:	1c43      	adds	r3, r0, #1
 800a7e0:	89a3      	ldrh	r3, [r4, #12]
 800a7e2:	bf15      	itete	ne
 800a7e4:	6560      	strne	r0, [r4, #84]	; 0x54
 800a7e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a7ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a7ee:	81a3      	strheq	r3, [r4, #12]
 800a7f0:	bf18      	it	ne
 800a7f2:	81a3      	strhne	r3, [r4, #12]
 800a7f4:	bd10      	pop	{r4, pc}

0800a7f6 <__sclose>:
 800a7f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7fa:	f000 b919 	b.w	800aa30 <_close_r>

0800a7fe <strncat>:
 800a7fe:	b530      	push	{r4, r5, lr}
 800a800:	4604      	mov	r4, r0
 800a802:	7825      	ldrb	r5, [r4, #0]
 800a804:	4623      	mov	r3, r4
 800a806:	3401      	adds	r4, #1
 800a808:	2d00      	cmp	r5, #0
 800a80a:	d1fa      	bne.n	800a802 <strncat+0x4>
 800a80c:	3a01      	subs	r2, #1
 800a80e:	d304      	bcc.n	800a81a <strncat+0x1c>
 800a810:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a814:	f803 4b01 	strb.w	r4, [r3], #1
 800a818:	b904      	cbnz	r4, 800a81c <strncat+0x1e>
 800a81a:	bd30      	pop	{r4, r5, pc}
 800a81c:	2a00      	cmp	r2, #0
 800a81e:	d1f5      	bne.n	800a80c <strncat+0xe>
 800a820:	701a      	strb	r2, [r3, #0]
 800a822:	e7f3      	b.n	800a80c <strncat+0xe>

0800a824 <swprintf>:
 800a824:	b40c      	push	{r2, r3}
 800a826:	b530      	push	{r4, r5, lr}
 800a828:	4b17      	ldr	r3, [pc, #92]	; (800a888 <swprintf+0x64>)
 800a82a:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 800a82e:	681d      	ldr	r5, [r3, #0]
 800a830:	b09d      	sub	sp, #116	; 0x74
 800a832:	460c      	mov	r4, r1
 800a834:	d308      	bcc.n	800a848 <swprintf+0x24>
 800a836:	238b      	movs	r3, #139	; 0x8b
 800a838:	602b      	str	r3, [r5, #0]
 800a83a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a83e:	b01d      	add	sp, #116	; 0x74
 800a840:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a844:	b002      	add	sp, #8
 800a846:	4770      	bx	lr
 800a848:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a84c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a850:	9002      	str	r0, [sp, #8]
 800a852:	9006      	str	r0, [sp, #24]
 800a854:	b1b1      	cbz	r1, 800a884 <swprintf+0x60>
 800a856:	1e4b      	subs	r3, r1, #1
 800a858:	009b      	lsls	r3, r3, #2
 800a85a:	9304      	str	r3, [sp, #16]
 800a85c:	9307      	str	r3, [sp, #28]
 800a85e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a862:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a866:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a868:	ab21      	add	r3, sp, #132	; 0x84
 800a86a:	a902      	add	r1, sp, #8
 800a86c:	4628      	mov	r0, r5
 800a86e:	9301      	str	r3, [sp, #4]
 800a870:	f002 f9be 	bl	800cbf0 <_svfwprintf_r>
 800a874:	2c00      	cmp	r4, #0
 800a876:	d0de      	beq.n	800a836 <swprintf+0x12>
 800a878:	9b02      	ldr	r3, [sp, #8]
 800a87a:	2200      	movs	r2, #0
 800a87c:	42a0      	cmp	r0, r4
 800a87e:	601a      	str	r2, [r3, #0]
 800a880:	d3dd      	bcc.n	800a83e <swprintf+0x1a>
 800a882:	e7d8      	b.n	800a836 <swprintf+0x12>
 800a884:	460b      	mov	r3, r1
 800a886:	e7e8      	b.n	800a85a <swprintf+0x36>
 800a888:	20000014 	.word	0x20000014

0800a88c <__swbuf_r>:
 800a88c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a88e:	460e      	mov	r6, r1
 800a890:	4614      	mov	r4, r2
 800a892:	4605      	mov	r5, r0
 800a894:	b118      	cbz	r0, 800a89e <__swbuf_r+0x12>
 800a896:	6983      	ldr	r3, [r0, #24]
 800a898:	b90b      	cbnz	r3, 800a89e <__swbuf_r+0x12>
 800a89a:	f7fe fff1 	bl	8009880 <__sinit>
 800a89e:	4b21      	ldr	r3, [pc, #132]	; (800a924 <__swbuf_r+0x98>)
 800a8a0:	429c      	cmp	r4, r3
 800a8a2:	d12b      	bne.n	800a8fc <__swbuf_r+0x70>
 800a8a4:	686c      	ldr	r4, [r5, #4]
 800a8a6:	69a3      	ldr	r3, [r4, #24]
 800a8a8:	60a3      	str	r3, [r4, #8]
 800a8aa:	89a3      	ldrh	r3, [r4, #12]
 800a8ac:	071a      	lsls	r2, r3, #28
 800a8ae:	d52f      	bpl.n	800a910 <__swbuf_r+0x84>
 800a8b0:	6923      	ldr	r3, [r4, #16]
 800a8b2:	b36b      	cbz	r3, 800a910 <__swbuf_r+0x84>
 800a8b4:	6923      	ldr	r3, [r4, #16]
 800a8b6:	6820      	ldr	r0, [r4, #0]
 800a8b8:	1ac0      	subs	r0, r0, r3
 800a8ba:	6963      	ldr	r3, [r4, #20]
 800a8bc:	b2f6      	uxtb	r6, r6
 800a8be:	4283      	cmp	r3, r0
 800a8c0:	4637      	mov	r7, r6
 800a8c2:	dc04      	bgt.n	800a8ce <__swbuf_r+0x42>
 800a8c4:	4621      	mov	r1, r4
 800a8c6:	4628      	mov	r0, r5
 800a8c8:	f7fe ff34 	bl	8009734 <_fflush_r>
 800a8cc:	bb30      	cbnz	r0, 800a91c <__swbuf_r+0x90>
 800a8ce:	68a3      	ldr	r3, [r4, #8]
 800a8d0:	3b01      	subs	r3, #1
 800a8d2:	60a3      	str	r3, [r4, #8]
 800a8d4:	6823      	ldr	r3, [r4, #0]
 800a8d6:	1c5a      	adds	r2, r3, #1
 800a8d8:	6022      	str	r2, [r4, #0]
 800a8da:	701e      	strb	r6, [r3, #0]
 800a8dc:	6963      	ldr	r3, [r4, #20]
 800a8de:	3001      	adds	r0, #1
 800a8e0:	4283      	cmp	r3, r0
 800a8e2:	d004      	beq.n	800a8ee <__swbuf_r+0x62>
 800a8e4:	89a3      	ldrh	r3, [r4, #12]
 800a8e6:	07db      	lsls	r3, r3, #31
 800a8e8:	d506      	bpl.n	800a8f8 <__swbuf_r+0x6c>
 800a8ea:	2e0a      	cmp	r6, #10
 800a8ec:	d104      	bne.n	800a8f8 <__swbuf_r+0x6c>
 800a8ee:	4621      	mov	r1, r4
 800a8f0:	4628      	mov	r0, r5
 800a8f2:	f7fe ff1f 	bl	8009734 <_fflush_r>
 800a8f6:	b988      	cbnz	r0, 800a91c <__swbuf_r+0x90>
 800a8f8:	4638      	mov	r0, r7
 800a8fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8fc:	4b0a      	ldr	r3, [pc, #40]	; (800a928 <__swbuf_r+0x9c>)
 800a8fe:	429c      	cmp	r4, r3
 800a900:	d101      	bne.n	800a906 <__swbuf_r+0x7a>
 800a902:	68ac      	ldr	r4, [r5, #8]
 800a904:	e7cf      	b.n	800a8a6 <__swbuf_r+0x1a>
 800a906:	4b09      	ldr	r3, [pc, #36]	; (800a92c <__swbuf_r+0xa0>)
 800a908:	429c      	cmp	r4, r3
 800a90a:	bf08      	it	eq
 800a90c:	68ec      	ldreq	r4, [r5, #12]
 800a90e:	e7ca      	b.n	800a8a6 <__swbuf_r+0x1a>
 800a910:	4621      	mov	r1, r4
 800a912:	4628      	mov	r0, r5
 800a914:	f000 f81e 	bl	800a954 <__swsetup_r>
 800a918:	2800      	cmp	r0, #0
 800a91a:	d0cb      	beq.n	800a8b4 <__swbuf_r+0x28>
 800a91c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a920:	e7ea      	b.n	800a8f8 <__swbuf_r+0x6c>
 800a922:	bf00      	nop
 800a924:	08012ef4 	.word	0x08012ef4
 800a928:	08012f14 	.word	0x08012f14
 800a92c:	08012ed4 	.word	0x08012ed4

0800a930 <_write_r>:
 800a930:	b538      	push	{r3, r4, r5, lr}
 800a932:	4d07      	ldr	r5, [pc, #28]	; (800a950 <_write_r+0x20>)
 800a934:	4604      	mov	r4, r0
 800a936:	4608      	mov	r0, r1
 800a938:	4611      	mov	r1, r2
 800a93a:	2200      	movs	r2, #0
 800a93c:	602a      	str	r2, [r5, #0]
 800a93e:	461a      	mov	r2, r3
 800a940:	f7f8 f8ff 	bl	8002b42 <_write>
 800a944:	1c43      	adds	r3, r0, #1
 800a946:	d102      	bne.n	800a94e <_write_r+0x1e>
 800a948:	682b      	ldr	r3, [r5, #0]
 800a94a:	b103      	cbz	r3, 800a94e <_write_r+0x1e>
 800a94c:	6023      	str	r3, [r4, #0]
 800a94e:	bd38      	pop	{r3, r4, r5, pc}
 800a950:	2000049c 	.word	0x2000049c

0800a954 <__swsetup_r>:
 800a954:	4b32      	ldr	r3, [pc, #200]	; (800aa20 <__swsetup_r+0xcc>)
 800a956:	b570      	push	{r4, r5, r6, lr}
 800a958:	681d      	ldr	r5, [r3, #0]
 800a95a:	4606      	mov	r6, r0
 800a95c:	460c      	mov	r4, r1
 800a95e:	b125      	cbz	r5, 800a96a <__swsetup_r+0x16>
 800a960:	69ab      	ldr	r3, [r5, #24]
 800a962:	b913      	cbnz	r3, 800a96a <__swsetup_r+0x16>
 800a964:	4628      	mov	r0, r5
 800a966:	f7fe ff8b 	bl	8009880 <__sinit>
 800a96a:	4b2e      	ldr	r3, [pc, #184]	; (800aa24 <__swsetup_r+0xd0>)
 800a96c:	429c      	cmp	r4, r3
 800a96e:	d10f      	bne.n	800a990 <__swsetup_r+0x3c>
 800a970:	686c      	ldr	r4, [r5, #4]
 800a972:	89a3      	ldrh	r3, [r4, #12]
 800a974:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a978:	0719      	lsls	r1, r3, #28
 800a97a:	d42c      	bmi.n	800a9d6 <__swsetup_r+0x82>
 800a97c:	06dd      	lsls	r5, r3, #27
 800a97e:	d411      	bmi.n	800a9a4 <__swsetup_r+0x50>
 800a980:	2309      	movs	r3, #9
 800a982:	6033      	str	r3, [r6, #0]
 800a984:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a988:	81a3      	strh	r3, [r4, #12]
 800a98a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a98e:	e03e      	b.n	800aa0e <__swsetup_r+0xba>
 800a990:	4b25      	ldr	r3, [pc, #148]	; (800aa28 <__swsetup_r+0xd4>)
 800a992:	429c      	cmp	r4, r3
 800a994:	d101      	bne.n	800a99a <__swsetup_r+0x46>
 800a996:	68ac      	ldr	r4, [r5, #8]
 800a998:	e7eb      	b.n	800a972 <__swsetup_r+0x1e>
 800a99a:	4b24      	ldr	r3, [pc, #144]	; (800aa2c <__swsetup_r+0xd8>)
 800a99c:	429c      	cmp	r4, r3
 800a99e:	bf08      	it	eq
 800a9a0:	68ec      	ldreq	r4, [r5, #12]
 800a9a2:	e7e6      	b.n	800a972 <__swsetup_r+0x1e>
 800a9a4:	0758      	lsls	r0, r3, #29
 800a9a6:	d512      	bpl.n	800a9ce <__swsetup_r+0x7a>
 800a9a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a9aa:	b141      	cbz	r1, 800a9be <__swsetup_r+0x6a>
 800a9ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a9b0:	4299      	cmp	r1, r3
 800a9b2:	d002      	beq.n	800a9ba <__swsetup_r+0x66>
 800a9b4:	4630      	mov	r0, r6
 800a9b6:	f7ff f8b3 	bl	8009b20 <_free_r>
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	6363      	str	r3, [r4, #52]	; 0x34
 800a9be:	89a3      	ldrh	r3, [r4, #12]
 800a9c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a9c4:	81a3      	strh	r3, [r4, #12]
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	6063      	str	r3, [r4, #4]
 800a9ca:	6923      	ldr	r3, [r4, #16]
 800a9cc:	6023      	str	r3, [r4, #0]
 800a9ce:	89a3      	ldrh	r3, [r4, #12]
 800a9d0:	f043 0308 	orr.w	r3, r3, #8
 800a9d4:	81a3      	strh	r3, [r4, #12]
 800a9d6:	6923      	ldr	r3, [r4, #16]
 800a9d8:	b94b      	cbnz	r3, 800a9ee <__swsetup_r+0x9a>
 800a9da:	89a3      	ldrh	r3, [r4, #12]
 800a9dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a9e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a9e4:	d003      	beq.n	800a9ee <__swsetup_r+0x9a>
 800a9e6:	4621      	mov	r1, r4
 800a9e8:	4630      	mov	r0, r6
 800a9ea:	f7ff f833 	bl	8009a54 <__smakebuf_r>
 800a9ee:	89a0      	ldrh	r0, [r4, #12]
 800a9f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a9f4:	f010 0301 	ands.w	r3, r0, #1
 800a9f8:	d00a      	beq.n	800aa10 <__swsetup_r+0xbc>
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	60a3      	str	r3, [r4, #8]
 800a9fe:	6963      	ldr	r3, [r4, #20]
 800aa00:	425b      	negs	r3, r3
 800aa02:	61a3      	str	r3, [r4, #24]
 800aa04:	6923      	ldr	r3, [r4, #16]
 800aa06:	b943      	cbnz	r3, 800aa1a <__swsetup_r+0xc6>
 800aa08:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800aa0c:	d1ba      	bne.n	800a984 <__swsetup_r+0x30>
 800aa0e:	bd70      	pop	{r4, r5, r6, pc}
 800aa10:	0781      	lsls	r1, r0, #30
 800aa12:	bf58      	it	pl
 800aa14:	6963      	ldrpl	r3, [r4, #20]
 800aa16:	60a3      	str	r3, [r4, #8]
 800aa18:	e7f4      	b.n	800aa04 <__swsetup_r+0xb0>
 800aa1a:	2000      	movs	r0, #0
 800aa1c:	e7f7      	b.n	800aa0e <__swsetup_r+0xba>
 800aa1e:	bf00      	nop
 800aa20:	20000014 	.word	0x20000014
 800aa24:	08012ef4 	.word	0x08012ef4
 800aa28:	08012f14 	.word	0x08012f14
 800aa2c:	08012ed4 	.word	0x08012ed4

0800aa30 <_close_r>:
 800aa30:	b538      	push	{r3, r4, r5, lr}
 800aa32:	4d06      	ldr	r5, [pc, #24]	; (800aa4c <_close_r+0x1c>)
 800aa34:	2300      	movs	r3, #0
 800aa36:	4604      	mov	r4, r0
 800aa38:	4608      	mov	r0, r1
 800aa3a:	602b      	str	r3, [r5, #0]
 800aa3c:	f7f8 f89d 	bl	8002b7a <_close>
 800aa40:	1c43      	adds	r3, r0, #1
 800aa42:	d102      	bne.n	800aa4a <_close_r+0x1a>
 800aa44:	682b      	ldr	r3, [r5, #0]
 800aa46:	b103      	cbz	r3, 800aa4a <_close_r+0x1a>
 800aa48:	6023      	str	r3, [r4, #0]
 800aa4a:	bd38      	pop	{r3, r4, r5, pc}
 800aa4c:	2000049c 	.word	0x2000049c

0800aa50 <quorem>:
 800aa50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa54:	6903      	ldr	r3, [r0, #16]
 800aa56:	690c      	ldr	r4, [r1, #16]
 800aa58:	42a3      	cmp	r3, r4
 800aa5a:	4607      	mov	r7, r0
 800aa5c:	f2c0 8081 	blt.w	800ab62 <quorem+0x112>
 800aa60:	3c01      	subs	r4, #1
 800aa62:	f101 0814 	add.w	r8, r1, #20
 800aa66:	f100 0514 	add.w	r5, r0, #20
 800aa6a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aa6e:	9301      	str	r3, [sp, #4]
 800aa70:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800aa74:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aa78:	3301      	adds	r3, #1
 800aa7a:	429a      	cmp	r2, r3
 800aa7c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800aa80:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800aa84:	fbb2 f6f3 	udiv	r6, r2, r3
 800aa88:	d331      	bcc.n	800aaee <quorem+0x9e>
 800aa8a:	f04f 0e00 	mov.w	lr, #0
 800aa8e:	4640      	mov	r0, r8
 800aa90:	46ac      	mov	ip, r5
 800aa92:	46f2      	mov	sl, lr
 800aa94:	f850 2b04 	ldr.w	r2, [r0], #4
 800aa98:	b293      	uxth	r3, r2
 800aa9a:	fb06 e303 	mla	r3, r6, r3, lr
 800aa9e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800aaa2:	b29b      	uxth	r3, r3
 800aaa4:	ebaa 0303 	sub.w	r3, sl, r3
 800aaa8:	f8dc a000 	ldr.w	sl, [ip]
 800aaac:	0c12      	lsrs	r2, r2, #16
 800aaae:	fa13 f38a 	uxtah	r3, r3, sl
 800aab2:	fb06 e202 	mla	r2, r6, r2, lr
 800aab6:	9300      	str	r3, [sp, #0]
 800aab8:	9b00      	ldr	r3, [sp, #0]
 800aaba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800aabe:	b292      	uxth	r2, r2
 800aac0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800aac4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800aac8:	f8bd 3000 	ldrh.w	r3, [sp]
 800aacc:	4581      	cmp	r9, r0
 800aace:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aad2:	f84c 3b04 	str.w	r3, [ip], #4
 800aad6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800aada:	d2db      	bcs.n	800aa94 <quorem+0x44>
 800aadc:	f855 300b 	ldr.w	r3, [r5, fp]
 800aae0:	b92b      	cbnz	r3, 800aaee <quorem+0x9e>
 800aae2:	9b01      	ldr	r3, [sp, #4]
 800aae4:	3b04      	subs	r3, #4
 800aae6:	429d      	cmp	r5, r3
 800aae8:	461a      	mov	r2, r3
 800aaea:	d32e      	bcc.n	800ab4a <quorem+0xfa>
 800aaec:	613c      	str	r4, [r7, #16]
 800aaee:	4638      	mov	r0, r7
 800aaf0:	f001 f8ee 	bl	800bcd0 <__mcmp>
 800aaf4:	2800      	cmp	r0, #0
 800aaf6:	db24      	blt.n	800ab42 <quorem+0xf2>
 800aaf8:	3601      	adds	r6, #1
 800aafa:	4628      	mov	r0, r5
 800aafc:	f04f 0c00 	mov.w	ip, #0
 800ab00:	f858 2b04 	ldr.w	r2, [r8], #4
 800ab04:	f8d0 e000 	ldr.w	lr, [r0]
 800ab08:	b293      	uxth	r3, r2
 800ab0a:	ebac 0303 	sub.w	r3, ip, r3
 800ab0e:	0c12      	lsrs	r2, r2, #16
 800ab10:	fa13 f38e 	uxtah	r3, r3, lr
 800ab14:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ab18:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ab1c:	b29b      	uxth	r3, r3
 800ab1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ab22:	45c1      	cmp	r9, r8
 800ab24:	f840 3b04 	str.w	r3, [r0], #4
 800ab28:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ab2c:	d2e8      	bcs.n	800ab00 <quorem+0xb0>
 800ab2e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ab32:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ab36:	b922      	cbnz	r2, 800ab42 <quorem+0xf2>
 800ab38:	3b04      	subs	r3, #4
 800ab3a:	429d      	cmp	r5, r3
 800ab3c:	461a      	mov	r2, r3
 800ab3e:	d30a      	bcc.n	800ab56 <quorem+0x106>
 800ab40:	613c      	str	r4, [r7, #16]
 800ab42:	4630      	mov	r0, r6
 800ab44:	b003      	add	sp, #12
 800ab46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab4a:	6812      	ldr	r2, [r2, #0]
 800ab4c:	3b04      	subs	r3, #4
 800ab4e:	2a00      	cmp	r2, #0
 800ab50:	d1cc      	bne.n	800aaec <quorem+0x9c>
 800ab52:	3c01      	subs	r4, #1
 800ab54:	e7c7      	b.n	800aae6 <quorem+0x96>
 800ab56:	6812      	ldr	r2, [r2, #0]
 800ab58:	3b04      	subs	r3, #4
 800ab5a:	2a00      	cmp	r2, #0
 800ab5c:	d1f0      	bne.n	800ab40 <quorem+0xf0>
 800ab5e:	3c01      	subs	r4, #1
 800ab60:	e7eb      	b.n	800ab3a <quorem+0xea>
 800ab62:	2000      	movs	r0, #0
 800ab64:	e7ee      	b.n	800ab44 <quorem+0xf4>
	...

0800ab68 <_dtoa_r>:
 800ab68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab6c:	ed2d 8b04 	vpush	{d8-d9}
 800ab70:	ec57 6b10 	vmov	r6, r7, d0
 800ab74:	b093      	sub	sp, #76	; 0x4c
 800ab76:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ab78:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ab7c:	9106      	str	r1, [sp, #24]
 800ab7e:	ee10 aa10 	vmov	sl, s0
 800ab82:	4604      	mov	r4, r0
 800ab84:	9209      	str	r2, [sp, #36]	; 0x24
 800ab86:	930c      	str	r3, [sp, #48]	; 0x30
 800ab88:	46bb      	mov	fp, r7
 800ab8a:	b975      	cbnz	r5, 800abaa <_dtoa_r+0x42>
 800ab8c:	2010      	movs	r0, #16
 800ab8e:	f7fe ffa1 	bl	8009ad4 <malloc>
 800ab92:	4602      	mov	r2, r0
 800ab94:	6260      	str	r0, [r4, #36]	; 0x24
 800ab96:	b920      	cbnz	r0, 800aba2 <_dtoa_r+0x3a>
 800ab98:	4ba7      	ldr	r3, [pc, #668]	; (800ae38 <_dtoa_r+0x2d0>)
 800ab9a:	21ea      	movs	r1, #234	; 0xea
 800ab9c:	48a7      	ldr	r0, [pc, #668]	; (800ae3c <_dtoa_r+0x2d4>)
 800ab9e:	f002 fdf3 	bl	800d788 <__assert_func>
 800aba2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800aba6:	6005      	str	r5, [r0, #0]
 800aba8:	60c5      	str	r5, [r0, #12]
 800abaa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800abac:	6819      	ldr	r1, [r3, #0]
 800abae:	b151      	cbz	r1, 800abc6 <_dtoa_r+0x5e>
 800abb0:	685a      	ldr	r2, [r3, #4]
 800abb2:	604a      	str	r2, [r1, #4]
 800abb4:	2301      	movs	r3, #1
 800abb6:	4093      	lsls	r3, r2
 800abb8:	608b      	str	r3, [r1, #8]
 800abba:	4620      	mov	r0, r4
 800abbc:	f000 fe46 	bl	800b84c <_Bfree>
 800abc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800abc2:	2200      	movs	r2, #0
 800abc4:	601a      	str	r2, [r3, #0]
 800abc6:	1e3b      	subs	r3, r7, #0
 800abc8:	bfaa      	itet	ge
 800abca:	2300      	movge	r3, #0
 800abcc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800abd0:	f8c8 3000 	strge.w	r3, [r8]
 800abd4:	4b9a      	ldr	r3, [pc, #616]	; (800ae40 <_dtoa_r+0x2d8>)
 800abd6:	bfbc      	itt	lt
 800abd8:	2201      	movlt	r2, #1
 800abda:	f8c8 2000 	strlt.w	r2, [r8]
 800abde:	ea33 030b 	bics.w	r3, r3, fp
 800abe2:	d11b      	bne.n	800ac1c <_dtoa_r+0xb4>
 800abe4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800abe6:	f242 730f 	movw	r3, #9999	; 0x270f
 800abea:	6013      	str	r3, [r2, #0]
 800abec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800abf0:	4333      	orrs	r3, r6
 800abf2:	f000 8592 	beq.w	800b71a <_dtoa_r+0xbb2>
 800abf6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800abf8:	b963      	cbnz	r3, 800ac14 <_dtoa_r+0xac>
 800abfa:	4b92      	ldr	r3, [pc, #584]	; (800ae44 <_dtoa_r+0x2dc>)
 800abfc:	e022      	b.n	800ac44 <_dtoa_r+0xdc>
 800abfe:	4b92      	ldr	r3, [pc, #584]	; (800ae48 <_dtoa_r+0x2e0>)
 800ac00:	9301      	str	r3, [sp, #4]
 800ac02:	3308      	adds	r3, #8
 800ac04:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ac06:	6013      	str	r3, [r2, #0]
 800ac08:	9801      	ldr	r0, [sp, #4]
 800ac0a:	b013      	add	sp, #76	; 0x4c
 800ac0c:	ecbd 8b04 	vpop	{d8-d9}
 800ac10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac14:	4b8b      	ldr	r3, [pc, #556]	; (800ae44 <_dtoa_r+0x2dc>)
 800ac16:	9301      	str	r3, [sp, #4]
 800ac18:	3303      	adds	r3, #3
 800ac1a:	e7f3      	b.n	800ac04 <_dtoa_r+0x9c>
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	2300      	movs	r3, #0
 800ac20:	4650      	mov	r0, sl
 800ac22:	4659      	mov	r1, fp
 800ac24:	f7f5 ff60 	bl	8000ae8 <__aeabi_dcmpeq>
 800ac28:	ec4b ab19 	vmov	d9, sl, fp
 800ac2c:	4680      	mov	r8, r0
 800ac2e:	b158      	cbz	r0, 800ac48 <_dtoa_r+0xe0>
 800ac30:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ac32:	2301      	movs	r3, #1
 800ac34:	6013      	str	r3, [r2, #0]
 800ac36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	f000 856b 	beq.w	800b714 <_dtoa_r+0xbac>
 800ac3e:	4883      	ldr	r0, [pc, #524]	; (800ae4c <_dtoa_r+0x2e4>)
 800ac40:	6018      	str	r0, [r3, #0]
 800ac42:	1e43      	subs	r3, r0, #1
 800ac44:	9301      	str	r3, [sp, #4]
 800ac46:	e7df      	b.n	800ac08 <_dtoa_r+0xa0>
 800ac48:	ec4b ab10 	vmov	d0, sl, fp
 800ac4c:	aa10      	add	r2, sp, #64	; 0x40
 800ac4e:	a911      	add	r1, sp, #68	; 0x44
 800ac50:	4620      	mov	r0, r4
 800ac52:	f001 f8e3 	bl	800be1c <__d2b>
 800ac56:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800ac5a:	ee08 0a10 	vmov	s16, r0
 800ac5e:	2d00      	cmp	r5, #0
 800ac60:	f000 8084 	beq.w	800ad6c <_dtoa_r+0x204>
 800ac64:	ee19 3a90 	vmov	r3, s19
 800ac68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ac6c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ac70:	4656      	mov	r6, sl
 800ac72:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ac76:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ac7a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800ac7e:	4b74      	ldr	r3, [pc, #464]	; (800ae50 <_dtoa_r+0x2e8>)
 800ac80:	2200      	movs	r2, #0
 800ac82:	4630      	mov	r0, r6
 800ac84:	4639      	mov	r1, r7
 800ac86:	f7f5 fb0f 	bl	80002a8 <__aeabi_dsub>
 800ac8a:	a365      	add	r3, pc, #404	; (adr r3, 800ae20 <_dtoa_r+0x2b8>)
 800ac8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac90:	f7f5 fcc2 	bl	8000618 <__aeabi_dmul>
 800ac94:	a364      	add	r3, pc, #400	; (adr r3, 800ae28 <_dtoa_r+0x2c0>)
 800ac96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac9a:	f7f5 fb07 	bl	80002ac <__adddf3>
 800ac9e:	4606      	mov	r6, r0
 800aca0:	4628      	mov	r0, r5
 800aca2:	460f      	mov	r7, r1
 800aca4:	f7f5 fc4e 	bl	8000544 <__aeabi_i2d>
 800aca8:	a361      	add	r3, pc, #388	; (adr r3, 800ae30 <_dtoa_r+0x2c8>)
 800acaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acae:	f7f5 fcb3 	bl	8000618 <__aeabi_dmul>
 800acb2:	4602      	mov	r2, r0
 800acb4:	460b      	mov	r3, r1
 800acb6:	4630      	mov	r0, r6
 800acb8:	4639      	mov	r1, r7
 800acba:	f7f5 faf7 	bl	80002ac <__adddf3>
 800acbe:	4606      	mov	r6, r0
 800acc0:	460f      	mov	r7, r1
 800acc2:	f7f5 ff59 	bl	8000b78 <__aeabi_d2iz>
 800acc6:	2200      	movs	r2, #0
 800acc8:	9000      	str	r0, [sp, #0]
 800acca:	2300      	movs	r3, #0
 800accc:	4630      	mov	r0, r6
 800acce:	4639      	mov	r1, r7
 800acd0:	f7f5 ff14 	bl	8000afc <__aeabi_dcmplt>
 800acd4:	b150      	cbz	r0, 800acec <_dtoa_r+0x184>
 800acd6:	9800      	ldr	r0, [sp, #0]
 800acd8:	f7f5 fc34 	bl	8000544 <__aeabi_i2d>
 800acdc:	4632      	mov	r2, r6
 800acde:	463b      	mov	r3, r7
 800ace0:	f7f5 ff02 	bl	8000ae8 <__aeabi_dcmpeq>
 800ace4:	b910      	cbnz	r0, 800acec <_dtoa_r+0x184>
 800ace6:	9b00      	ldr	r3, [sp, #0]
 800ace8:	3b01      	subs	r3, #1
 800acea:	9300      	str	r3, [sp, #0]
 800acec:	9b00      	ldr	r3, [sp, #0]
 800acee:	2b16      	cmp	r3, #22
 800acf0:	d85a      	bhi.n	800ada8 <_dtoa_r+0x240>
 800acf2:	9a00      	ldr	r2, [sp, #0]
 800acf4:	4b57      	ldr	r3, [pc, #348]	; (800ae54 <_dtoa_r+0x2ec>)
 800acf6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800acfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acfe:	ec51 0b19 	vmov	r0, r1, d9
 800ad02:	f7f5 fefb 	bl	8000afc <__aeabi_dcmplt>
 800ad06:	2800      	cmp	r0, #0
 800ad08:	d050      	beq.n	800adac <_dtoa_r+0x244>
 800ad0a:	9b00      	ldr	r3, [sp, #0]
 800ad0c:	3b01      	subs	r3, #1
 800ad0e:	9300      	str	r3, [sp, #0]
 800ad10:	2300      	movs	r3, #0
 800ad12:	930b      	str	r3, [sp, #44]	; 0x2c
 800ad14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ad16:	1b5d      	subs	r5, r3, r5
 800ad18:	1e6b      	subs	r3, r5, #1
 800ad1a:	9305      	str	r3, [sp, #20]
 800ad1c:	bf45      	ittet	mi
 800ad1e:	f1c5 0301 	rsbmi	r3, r5, #1
 800ad22:	9304      	strmi	r3, [sp, #16]
 800ad24:	2300      	movpl	r3, #0
 800ad26:	2300      	movmi	r3, #0
 800ad28:	bf4c      	ite	mi
 800ad2a:	9305      	strmi	r3, [sp, #20]
 800ad2c:	9304      	strpl	r3, [sp, #16]
 800ad2e:	9b00      	ldr	r3, [sp, #0]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	db3d      	blt.n	800adb0 <_dtoa_r+0x248>
 800ad34:	9b05      	ldr	r3, [sp, #20]
 800ad36:	9a00      	ldr	r2, [sp, #0]
 800ad38:	920a      	str	r2, [sp, #40]	; 0x28
 800ad3a:	4413      	add	r3, r2
 800ad3c:	9305      	str	r3, [sp, #20]
 800ad3e:	2300      	movs	r3, #0
 800ad40:	9307      	str	r3, [sp, #28]
 800ad42:	9b06      	ldr	r3, [sp, #24]
 800ad44:	2b09      	cmp	r3, #9
 800ad46:	f200 8089 	bhi.w	800ae5c <_dtoa_r+0x2f4>
 800ad4a:	2b05      	cmp	r3, #5
 800ad4c:	bfc4      	itt	gt
 800ad4e:	3b04      	subgt	r3, #4
 800ad50:	9306      	strgt	r3, [sp, #24]
 800ad52:	9b06      	ldr	r3, [sp, #24]
 800ad54:	f1a3 0302 	sub.w	r3, r3, #2
 800ad58:	bfcc      	ite	gt
 800ad5a:	2500      	movgt	r5, #0
 800ad5c:	2501      	movle	r5, #1
 800ad5e:	2b03      	cmp	r3, #3
 800ad60:	f200 8087 	bhi.w	800ae72 <_dtoa_r+0x30a>
 800ad64:	e8df f003 	tbb	[pc, r3]
 800ad68:	59383a2d 	.word	0x59383a2d
 800ad6c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ad70:	441d      	add	r5, r3
 800ad72:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ad76:	2b20      	cmp	r3, #32
 800ad78:	bfc1      	itttt	gt
 800ad7a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ad7e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800ad82:	fa0b f303 	lslgt.w	r3, fp, r3
 800ad86:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ad8a:	bfda      	itte	le
 800ad8c:	f1c3 0320 	rsble	r3, r3, #32
 800ad90:	fa06 f003 	lslle.w	r0, r6, r3
 800ad94:	4318      	orrgt	r0, r3
 800ad96:	f7f5 fbc5 	bl	8000524 <__aeabi_ui2d>
 800ad9a:	2301      	movs	r3, #1
 800ad9c:	4606      	mov	r6, r0
 800ad9e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800ada2:	3d01      	subs	r5, #1
 800ada4:	930e      	str	r3, [sp, #56]	; 0x38
 800ada6:	e76a      	b.n	800ac7e <_dtoa_r+0x116>
 800ada8:	2301      	movs	r3, #1
 800adaa:	e7b2      	b.n	800ad12 <_dtoa_r+0x1aa>
 800adac:	900b      	str	r0, [sp, #44]	; 0x2c
 800adae:	e7b1      	b.n	800ad14 <_dtoa_r+0x1ac>
 800adb0:	9b04      	ldr	r3, [sp, #16]
 800adb2:	9a00      	ldr	r2, [sp, #0]
 800adb4:	1a9b      	subs	r3, r3, r2
 800adb6:	9304      	str	r3, [sp, #16]
 800adb8:	4253      	negs	r3, r2
 800adba:	9307      	str	r3, [sp, #28]
 800adbc:	2300      	movs	r3, #0
 800adbe:	930a      	str	r3, [sp, #40]	; 0x28
 800adc0:	e7bf      	b.n	800ad42 <_dtoa_r+0x1da>
 800adc2:	2300      	movs	r3, #0
 800adc4:	9308      	str	r3, [sp, #32]
 800adc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adc8:	2b00      	cmp	r3, #0
 800adca:	dc55      	bgt.n	800ae78 <_dtoa_r+0x310>
 800adcc:	2301      	movs	r3, #1
 800adce:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800add2:	461a      	mov	r2, r3
 800add4:	9209      	str	r2, [sp, #36]	; 0x24
 800add6:	e00c      	b.n	800adf2 <_dtoa_r+0x28a>
 800add8:	2301      	movs	r3, #1
 800adda:	e7f3      	b.n	800adc4 <_dtoa_r+0x25c>
 800addc:	2300      	movs	r3, #0
 800adde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ade0:	9308      	str	r3, [sp, #32]
 800ade2:	9b00      	ldr	r3, [sp, #0]
 800ade4:	4413      	add	r3, r2
 800ade6:	9302      	str	r3, [sp, #8]
 800ade8:	3301      	adds	r3, #1
 800adea:	2b01      	cmp	r3, #1
 800adec:	9303      	str	r3, [sp, #12]
 800adee:	bfb8      	it	lt
 800adf0:	2301      	movlt	r3, #1
 800adf2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800adf4:	2200      	movs	r2, #0
 800adf6:	6042      	str	r2, [r0, #4]
 800adf8:	2204      	movs	r2, #4
 800adfa:	f102 0614 	add.w	r6, r2, #20
 800adfe:	429e      	cmp	r6, r3
 800ae00:	6841      	ldr	r1, [r0, #4]
 800ae02:	d93d      	bls.n	800ae80 <_dtoa_r+0x318>
 800ae04:	4620      	mov	r0, r4
 800ae06:	f000 fce1 	bl	800b7cc <_Balloc>
 800ae0a:	9001      	str	r0, [sp, #4]
 800ae0c:	2800      	cmp	r0, #0
 800ae0e:	d13b      	bne.n	800ae88 <_dtoa_r+0x320>
 800ae10:	4b11      	ldr	r3, [pc, #68]	; (800ae58 <_dtoa_r+0x2f0>)
 800ae12:	4602      	mov	r2, r0
 800ae14:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ae18:	e6c0      	b.n	800ab9c <_dtoa_r+0x34>
 800ae1a:	2301      	movs	r3, #1
 800ae1c:	e7df      	b.n	800adde <_dtoa_r+0x276>
 800ae1e:	bf00      	nop
 800ae20:	636f4361 	.word	0x636f4361
 800ae24:	3fd287a7 	.word	0x3fd287a7
 800ae28:	8b60c8b3 	.word	0x8b60c8b3
 800ae2c:	3fc68a28 	.word	0x3fc68a28
 800ae30:	509f79fb 	.word	0x509f79fb
 800ae34:	3fd34413 	.word	0x3fd34413
 800ae38:	08012f77 	.word	0x08012f77
 800ae3c:	08012f8e 	.word	0x08012f8e
 800ae40:	7ff00000 	.word	0x7ff00000
 800ae44:	08012f73 	.word	0x08012f73
 800ae48:	08012f6a 	.word	0x08012f6a
 800ae4c:	0801316a 	.word	0x0801316a
 800ae50:	3ff80000 	.word	0x3ff80000
 800ae54:	08013080 	.word	0x08013080
 800ae58:	08012fe9 	.word	0x08012fe9
 800ae5c:	2501      	movs	r5, #1
 800ae5e:	2300      	movs	r3, #0
 800ae60:	9306      	str	r3, [sp, #24]
 800ae62:	9508      	str	r5, [sp, #32]
 800ae64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ae68:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	2312      	movs	r3, #18
 800ae70:	e7b0      	b.n	800add4 <_dtoa_r+0x26c>
 800ae72:	2301      	movs	r3, #1
 800ae74:	9308      	str	r3, [sp, #32]
 800ae76:	e7f5      	b.n	800ae64 <_dtoa_r+0x2fc>
 800ae78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae7a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ae7e:	e7b8      	b.n	800adf2 <_dtoa_r+0x28a>
 800ae80:	3101      	adds	r1, #1
 800ae82:	6041      	str	r1, [r0, #4]
 800ae84:	0052      	lsls	r2, r2, #1
 800ae86:	e7b8      	b.n	800adfa <_dtoa_r+0x292>
 800ae88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ae8a:	9a01      	ldr	r2, [sp, #4]
 800ae8c:	601a      	str	r2, [r3, #0]
 800ae8e:	9b03      	ldr	r3, [sp, #12]
 800ae90:	2b0e      	cmp	r3, #14
 800ae92:	f200 809d 	bhi.w	800afd0 <_dtoa_r+0x468>
 800ae96:	2d00      	cmp	r5, #0
 800ae98:	f000 809a 	beq.w	800afd0 <_dtoa_r+0x468>
 800ae9c:	9b00      	ldr	r3, [sp, #0]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	dd32      	ble.n	800af08 <_dtoa_r+0x3a0>
 800aea2:	4ab7      	ldr	r2, [pc, #732]	; (800b180 <_dtoa_r+0x618>)
 800aea4:	f003 030f 	and.w	r3, r3, #15
 800aea8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800aeac:	e9d3 8900 	ldrd	r8, r9, [r3]
 800aeb0:	9b00      	ldr	r3, [sp, #0]
 800aeb2:	05d8      	lsls	r0, r3, #23
 800aeb4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800aeb8:	d516      	bpl.n	800aee8 <_dtoa_r+0x380>
 800aeba:	4bb2      	ldr	r3, [pc, #712]	; (800b184 <_dtoa_r+0x61c>)
 800aebc:	ec51 0b19 	vmov	r0, r1, d9
 800aec0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800aec4:	f7f5 fcd2 	bl	800086c <__aeabi_ddiv>
 800aec8:	f007 070f 	and.w	r7, r7, #15
 800aecc:	4682      	mov	sl, r0
 800aece:	468b      	mov	fp, r1
 800aed0:	2503      	movs	r5, #3
 800aed2:	4eac      	ldr	r6, [pc, #688]	; (800b184 <_dtoa_r+0x61c>)
 800aed4:	b957      	cbnz	r7, 800aeec <_dtoa_r+0x384>
 800aed6:	4642      	mov	r2, r8
 800aed8:	464b      	mov	r3, r9
 800aeda:	4650      	mov	r0, sl
 800aedc:	4659      	mov	r1, fp
 800aede:	f7f5 fcc5 	bl	800086c <__aeabi_ddiv>
 800aee2:	4682      	mov	sl, r0
 800aee4:	468b      	mov	fp, r1
 800aee6:	e028      	b.n	800af3a <_dtoa_r+0x3d2>
 800aee8:	2502      	movs	r5, #2
 800aeea:	e7f2      	b.n	800aed2 <_dtoa_r+0x36a>
 800aeec:	07f9      	lsls	r1, r7, #31
 800aeee:	d508      	bpl.n	800af02 <_dtoa_r+0x39a>
 800aef0:	4640      	mov	r0, r8
 800aef2:	4649      	mov	r1, r9
 800aef4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800aef8:	f7f5 fb8e 	bl	8000618 <__aeabi_dmul>
 800aefc:	3501      	adds	r5, #1
 800aefe:	4680      	mov	r8, r0
 800af00:	4689      	mov	r9, r1
 800af02:	107f      	asrs	r7, r7, #1
 800af04:	3608      	adds	r6, #8
 800af06:	e7e5      	b.n	800aed4 <_dtoa_r+0x36c>
 800af08:	f000 809b 	beq.w	800b042 <_dtoa_r+0x4da>
 800af0c:	9b00      	ldr	r3, [sp, #0]
 800af0e:	4f9d      	ldr	r7, [pc, #628]	; (800b184 <_dtoa_r+0x61c>)
 800af10:	425e      	negs	r6, r3
 800af12:	4b9b      	ldr	r3, [pc, #620]	; (800b180 <_dtoa_r+0x618>)
 800af14:	f006 020f 	and.w	r2, r6, #15
 800af18:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800af1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af20:	ec51 0b19 	vmov	r0, r1, d9
 800af24:	f7f5 fb78 	bl	8000618 <__aeabi_dmul>
 800af28:	1136      	asrs	r6, r6, #4
 800af2a:	4682      	mov	sl, r0
 800af2c:	468b      	mov	fp, r1
 800af2e:	2300      	movs	r3, #0
 800af30:	2502      	movs	r5, #2
 800af32:	2e00      	cmp	r6, #0
 800af34:	d17a      	bne.n	800b02c <_dtoa_r+0x4c4>
 800af36:	2b00      	cmp	r3, #0
 800af38:	d1d3      	bne.n	800aee2 <_dtoa_r+0x37a>
 800af3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	f000 8082 	beq.w	800b046 <_dtoa_r+0x4de>
 800af42:	4b91      	ldr	r3, [pc, #580]	; (800b188 <_dtoa_r+0x620>)
 800af44:	2200      	movs	r2, #0
 800af46:	4650      	mov	r0, sl
 800af48:	4659      	mov	r1, fp
 800af4a:	f7f5 fdd7 	bl	8000afc <__aeabi_dcmplt>
 800af4e:	2800      	cmp	r0, #0
 800af50:	d079      	beq.n	800b046 <_dtoa_r+0x4de>
 800af52:	9b03      	ldr	r3, [sp, #12]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d076      	beq.n	800b046 <_dtoa_r+0x4de>
 800af58:	9b02      	ldr	r3, [sp, #8]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	dd36      	ble.n	800afcc <_dtoa_r+0x464>
 800af5e:	9b00      	ldr	r3, [sp, #0]
 800af60:	4650      	mov	r0, sl
 800af62:	4659      	mov	r1, fp
 800af64:	1e5f      	subs	r7, r3, #1
 800af66:	2200      	movs	r2, #0
 800af68:	4b88      	ldr	r3, [pc, #544]	; (800b18c <_dtoa_r+0x624>)
 800af6a:	f7f5 fb55 	bl	8000618 <__aeabi_dmul>
 800af6e:	9e02      	ldr	r6, [sp, #8]
 800af70:	4682      	mov	sl, r0
 800af72:	468b      	mov	fp, r1
 800af74:	3501      	adds	r5, #1
 800af76:	4628      	mov	r0, r5
 800af78:	f7f5 fae4 	bl	8000544 <__aeabi_i2d>
 800af7c:	4652      	mov	r2, sl
 800af7e:	465b      	mov	r3, fp
 800af80:	f7f5 fb4a 	bl	8000618 <__aeabi_dmul>
 800af84:	4b82      	ldr	r3, [pc, #520]	; (800b190 <_dtoa_r+0x628>)
 800af86:	2200      	movs	r2, #0
 800af88:	f7f5 f990 	bl	80002ac <__adddf3>
 800af8c:	46d0      	mov	r8, sl
 800af8e:	46d9      	mov	r9, fp
 800af90:	4682      	mov	sl, r0
 800af92:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800af96:	2e00      	cmp	r6, #0
 800af98:	d158      	bne.n	800b04c <_dtoa_r+0x4e4>
 800af9a:	4b7e      	ldr	r3, [pc, #504]	; (800b194 <_dtoa_r+0x62c>)
 800af9c:	2200      	movs	r2, #0
 800af9e:	4640      	mov	r0, r8
 800afa0:	4649      	mov	r1, r9
 800afa2:	f7f5 f981 	bl	80002a8 <__aeabi_dsub>
 800afa6:	4652      	mov	r2, sl
 800afa8:	465b      	mov	r3, fp
 800afaa:	4680      	mov	r8, r0
 800afac:	4689      	mov	r9, r1
 800afae:	f7f5 fdc3 	bl	8000b38 <__aeabi_dcmpgt>
 800afb2:	2800      	cmp	r0, #0
 800afb4:	f040 8295 	bne.w	800b4e2 <_dtoa_r+0x97a>
 800afb8:	4652      	mov	r2, sl
 800afba:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800afbe:	4640      	mov	r0, r8
 800afc0:	4649      	mov	r1, r9
 800afc2:	f7f5 fd9b 	bl	8000afc <__aeabi_dcmplt>
 800afc6:	2800      	cmp	r0, #0
 800afc8:	f040 8289 	bne.w	800b4de <_dtoa_r+0x976>
 800afcc:	ec5b ab19 	vmov	sl, fp, d9
 800afd0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	f2c0 8148 	blt.w	800b268 <_dtoa_r+0x700>
 800afd8:	9a00      	ldr	r2, [sp, #0]
 800afda:	2a0e      	cmp	r2, #14
 800afdc:	f300 8144 	bgt.w	800b268 <_dtoa_r+0x700>
 800afe0:	4b67      	ldr	r3, [pc, #412]	; (800b180 <_dtoa_r+0x618>)
 800afe2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800afe6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800afea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afec:	2b00      	cmp	r3, #0
 800afee:	f280 80d5 	bge.w	800b19c <_dtoa_r+0x634>
 800aff2:	9b03      	ldr	r3, [sp, #12]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	f300 80d1 	bgt.w	800b19c <_dtoa_r+0x634>
 800affa:	f040 826f 	bne.w	800b4dc <_dtoa_r+0x974>
 800affe:	4b65      	ldr	r3, [pc, #404]	; (800b194 <_dtoa_r+0x62c>)
 800b000:	2200      	movs	r2, #0
 800b002:	4640      	mov	r0, r8
 800b004:	4649      	mov	r1, r9
 800b006:	f7f5 fb07 	bl	8000618 <__aeabi_dmul>
 800b00a:	4652      	mov	r2, sl
 800b00c:	465b      	mov	r3, fp
 800b00e:	f7f5 fd89 	bl	8000b24 <__aeabi_dcmpge>
 800b012:	9e03      	ldr	r6, [sp, #12]
 800b014:	4637      	mov	r7, r6
 800b016:	2800      	cmp	r0, #0
 800b018:	f040 8245 	bne.w	800b4a6 <_dtoa_r+0x93e>
 800b01c:	9d01      	ldr	r5, [sp, #4]
 800b01e:	2331      	movs	r3, #49	; 0x31
 800b020:	f805 3b01 	strb.w	r3, [r5], #1
 800b024:	9b00      	ldr	r3, [sp, #0]
 800b026:	3301      	adds	r3, #1
 800b028:	9300      	str	r3, [sp, #0]
 800b02a:	e240      	b.n	800b4ae <_dtoa_r+0x946>
 800b02c:	07f2      	lsls	r2, r6, #31
 800b02e:	d505      	bpl.n	800b03c <_dtoa_r+0x4d4>
 800b030:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b034:	f7f5 faf0 	bl	8000618 <__aeabi_dmul>
 800b038:	3501      	adds	r5, #1
 800b03a:	2301      	movs	r3, #1
 800b03c:	1076      	asrs	r6, r6, #1
 800b03e:	3708      	adds	r7, #8
 800b040:	e777      	b.n	800af32 <_dtoa_r+0x3ca>
 800b042:	2502      	movs	r5, #2
 800b044:	e779      	b.n	800af3a <_dtoa_r+0x3d2>
 800b046:	9f00      	ldr	r7, [sp, #0]
 800b048:	9e03      	ldr	r6, [sp, #12]
 800b04a:	e794      	b.n	800af76 <_dtoa_r+0x40e>
 800b04c:	9901      	ldr	r1, [sp, #4]
 800b04e:	4b4c      	ldr	r3, [pc, #304]	; (800b180 <_dtoa_r+0x618>)
 800b050:	4431      	add	r1, r6
 800b052:	910d      	str	r1, [sp, #52]	; 0x34
 800b054:	9908      	ldr	r1, [sp, #32]
 800b056:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b05a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b05e:	2900      	cmp	r1, #0
 800b060:	d043      	beq.n	800b0ea <_dtoa_r+0x582>
 800b062:	494d      	ldr	r1, [pc, #308]	; (800b198 <_dtoa_r+0x630>)
 800b064:	2000      	movs	r0, #0
 800b066:	f7f5 fc01 	bl	800086c <__aeabi_ddiv>
 800b06a:	4652      	mov	r2, sl
 800b06c:	465b      	mov	r3, fp
 800b06e:	f7f5 f91b 	bl	80002a8 <__aeabi_dsub>
 800b072:	9d01      	ldr	r5, [sp, #4]
 800b074:	4682      	mov	sl, r0
 800b076:	468b      	mov	fp, r1
 800b078:	4649      	mov	r1, r9
 800b07a:	4640      	mov	r0, r8
 800b07c:	f7f5 fd7c 	bl	8000b78 <__aeabi_d2iz>
 800b080:	4606      	mov	r6, r0
 800b082:	f7f5 fa5f 	bl	8000544 <__aeabi_i2d>
 800b086:	4602      	mov	r2, r0
 800b088:	460b      	mov	r3, r1
 800b08a:	4640      	mov	r0, r8
 800b08c:	4649      	mov	r1, r9
 800b08e:	f7f5 f90b 	bl	80002a8 <__aeabi_dsub>
 800b092:	3630      	adds	r6, #48	; 0x30
 800b094:	f805 6b01 	strb.w	r6, [r5], #1
 800b098:	4652      	mov	r2, sl
 800b09a:	465b      	mov	r3, fp
 800b09c:	4680      	mov	r8, r0
 800b09e:	4689      	mov	r9, r1
 800b0a0:	f7f5 fd2c 	bl	8000afc <__aeabi_dcmplt>
 800b0a4:	2800      	cmp	r0, #0
 800b0a6:	d163      	bne.n	800b170 <_dtoa_r+0x608>
 800b0a8:	4642      	mov	r2, r8
 800b0aa:	464b      	mov	r3, r9
 800b0ac:	4936      	ldr	r1, [pc, #216]	; (800b188 <_dtoa_r+0x620>)
 800b0ae:	2000      	movs	r0, #0
 800b0b0:	f7f5 f8fa 	bl	80002a8 <__aeabi_dsub>
 800b0b4:	4652      	mov	r2, sl
 800b0b6:	465b      	mov	r3, fp
 800b0b8:	f7f5 fd20 	bl	8000afc <__aeabi_dcmplt>
 800b0bc:	2800      	cmp	r0, #0
 800b0be:	f040 80b5 	bne.w	800b22c <_dtoa_r+0x6c4>
 800b0c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b0c4:	429d      	cmp	r5, r3
 800b0c6:	d081      	beq.n	800afcc <_dtoa_r+0x464>
 800b0c8:	4b30      	ldr	r3, [pc, #192]	; (800b18c <_dtoa_r+0x624>)
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	4650      	mov	r0, sl
 800b0ce:	4659      	mov	r1, fp
 800b0d0:	f7f5 faa2 	bl	8000618 <__aeabi_dmul>
 800b0d4:	4b2d      	ldr	r3, [pc, #180]	; (800b18c <_dtoa_r+0x624>)
 800b0d6:	4682      	mov	sl, r0
 800b0d8:	468b      	mov	fp, r1
 800b0da:	4640      	mov	r0, r8
 800b0dc:	4649      	mov	r1, r9
 800b0de:	2200      	movs	r2, #0
 800b0e0:	f7f5 fa9a 	bl	8000618 <__aeabi_dmul>
 800b0e4:	4680      	mov	r8, r0
 800b0e6:	4689      	mov	r9, r1
 800b0e8:	e7c6      	b.n	800b078 <_dtoa_r+0x510>
 800b0ea:	4650      	mov	r0, sl
 800b0ec:	4659      	mov	r1, fp
 800b0ee:	f7f5 fa93 	bl	8000618 <__aeabi_dmul>
 800b0f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b0f4:	9d01      	ldr	r5, [sp, #4]
 800b0f6:	930f      	str	r3, [sp, #60]	; 0x3c
 800b0f8:	4682      	mov	sl, r0
 800b0fa:	468b      	mov	fp, r1
 800b0fc:	4649      	mov	r1, r9
 800b0fe:	4640      	mov	r0, r8
 800b100:	f7f5 fd3a 	bl	8000b78 <__aeabi_d2iz>
 800b104:	4606      	mov	r6, r0
 800b106:	f7f5 fa1d 	bl	8000544 <__aeabi_i2d>
 800b10a:	3630      	adds	r6, #48	; 0x30
 800b10c:	4602      	mov	r2, r0
 800b10e:	460b      	mov	r3, r1
 800b110:	4640      	mov	r0, r8
 800b112:	4649      	mov	r1, r9
 800b114:	f7f5 f8c8 	bl	80002a8 <__aeabi_dsub>
 800b118:	f805 6b01 	strb.w	r6, [r5], #1
 800b11c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b11e:	429d      	cmp	r5, r3
 800b120:	4680      	mov	r8, r0
 800b122:	4689      	mov	r9, r1
 800b124:	f04f 0200 	mov.w	r2, #0
 800b128:	d124      	bne.n	800b174 <_dtoa_r+0x60c>
 800b12a:	4b1b      	ldr	r3, [pc, #108]	; (800b198 <_dtoa_r+0x630>)
 800b12c:	4650      	mov	r0, sl
 800b12e:	4659      	mov	r1, fp
 800b130:	f7f5 f8bc 	bl	80002ac <__adddf3>
 800b134:	4602      	mov	r2, r0
 800b136:	460b      	mov	r3, r1
 800b138:	4640      	mov	r0, r8
 800b13a:	4649      	mov	r1, r9
 800b13c:	f7f5 fcfc 	bl	8000b38 <__aeabi_dcmpgt>
 800b140:	2800      	cmp	r0, #0
 800b142:	d173      	bne.n	800b22c <_dtoa_r+0x6c4>
 800b144:	4652      	mov	r2, sl
 800b146:	465b      	mov	r3, fp
 800b148:	4913      	ldr	r1, [pc, #76]	; (800b198 <_dtoa_r+0x630>)
 800b14a:	2000      	movs	r0, #0
 800b14c:	f7f5 f8ac 	bl	80002a8 <__aeabi_dsub>
 800b150:	4602      	mov	r2, r0
 800b152:	460b      	mov	r3, r1
 800b154:	4640      	mov	r0, r8
 800b156:	4649      	mov	r1, r9
 800b158:	f7f5 fcd0 	bl	8000afc <__aeabi_dcmplt>
 800b15c:	2800      	cmp	r0, #0
 800b15e:	f43f af35 	beq.w	800afcc <_dtoa_r+0x464>
 800b162:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b164:	1e6b      	subs	r3, r5, #1
 800b166:	930f      	str	r3, [sp, #60]	; 0x3c
 800b168:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b16c:	2b30      	cmp	r3, #48	; 0x30
 800b16e:	d0f8      	beq.n	800b162 <_dtoa_r+0x5fa>
 800b170:	9700      	str	r7, [sp, #0]
 800b172:	e049      	b.n	800b208 <_dtoa_r+0x6a0>
 800b174:	4b05      	ldr	r3, [pc, #20]	; (800b18c <_dtoa_r+0x624>)
 800b176:	f7f5 fa4f 	bl	8000618 <__aeabi_dmul>
 800b17a:	4680      	mov	r8, r0
 800b17c:	4689      	mov	r9, r1
 800b17e:	e7bd      	b.n	800b0fc <_dtoa_r+0x594>
 800b180:	08013080 	.word	0x08013080
 800b184:	08013058 	.word	0x08013058
 800b188:	3ff00000 	.word	0x3ff00000
 800b18c:	40240000 	.word	0x40240000
 800b190:	401c0000 	.word	0x401c0000
 800b194:	40140000 	.word	0x40140000
 800b198:	3fe00000 	.word	0x3fe00000
 800b19c:	9d01      	ldr	r5, [sp, #4]
 800b19e:	4656      	mov	r6, sl
 800b1a0:	465f      	mov	r7, fp
 800b1a2:	4642      	mov	r2, r8
 800b1a4:	464b      	mov	r3, r9
 800b1a6:	4630      	mov	r0, r6
 800b1a8:	4639      	mov	r1, r7
 800b1aa:	f7f5 fb5f 	bl	800086c <__aeabi_ddiv>
 800b1ae:	f7f5 fce3 	bl	8000b78 <__aeabi_d2iz>
 800b1b2:	4682      	mov	sl, r0
 800b1b4:	f7f5 f9c6 	bl	8000544 <__aeabi_i2d>
 800b1b8:	4642      	mov	r2, r8
 800b1ba:	464b      	mov	r3, r9
 800b1bc:	f7f5 fa2c 	bl	8000618 <__aeabi_dmul>
 800b1c0:	4602      	mov	r2, r0
 800b1c2:	460b      	mov	r3, r1
 800b1c4:	4630      	mov	r0, r6
 800b1c6:	4639      	mov	r1, r7
 800b1c8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b1cc:	f7f5 f86c 	bl	80002a8 <__aeabi_dsub>
 800b1d0:	f805 6b01 	strb.w	r6, [r5], #1
 800b1d4:	9e01      	ldr	r6, [sp, #4]
 800b1d6:	9f03      	ldr	r7, [sp, #12]
 800b1d8:	1bae      	subs	r6, r5, r6
 800b1da:	42b7      	cmp	r7, r6
 800b1dc:	4602      	mov	r2, r0
 800b1de:	460b      	mov	r3, r1
 800b1e0:	d135      	bne.n	800b24e <_dtoa_r+0x6e6>
 800b1e2:	f7f5 f863 	bl	80002ac <__adddf3>
 800b1e6:	4642      	mov	r2, r8
 800b1e8:	464b      	mov	r3, r9
 800b1ea:	4606      	mov	r6, r0
 800b1ec:	460f      	mov	r7, r1
 800b1ee:	f7f5 fca3 	bl	8000b38 <__aeabi_dcmpgt>
 800b1f2:	b9d0      	cbnz	r0, 800b22a <_dtoa_r+0x6c2>
 800b1f4:	4642      	mov	r2, r8
 800b1f6:	464b      	mov	r3, r9
 800b1f8:	4630      	mov	r0, r6
 800b1fa:	4639      	mov	r1, r7
 800b1fc:	f7f5 fc74 	bl	8000ae8 <__aeabi_dcmpeq>
 800b200:	b110      	cbz	r0, 800b208 <_dtoa_r+0x6a0>
 800b202:	f01a 0f01 	tst.w	sl, #1
 800b206:	d110      	bne.n	800b22a <_dtoa_r+0x6c2>
 800b208:	4620      	mov	r0, r4
 800b20a:	ee18 1a10 	vmov	r1, s16
 800b20e:	f000 fb1d 	bl	800b84c <_Bfree>
 800b212:	2300      	movs	r3, #0
 800b214:	9800      	ldr	r0, [sp, #0]
 800b216:	702b      	strb	r3, [r5, #0]
 800b218:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b21a:	3001      	adds	r0, #1
 800b21c:	6018      	str	r0, [r3, #0]
 800b21e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b220:	2b00      	cmp	r3, #0
 800b222:	f43f acf1 	beq.w	800ac08 <_dtoa_r+0xa0>
 800b226:	601d      	str	r5, [r3, #0]
 800b228:	e4ee      	b.n	800ac08 <_dtoa_r+0xa0>
 800b22a:	9f00      	ldr	r7, [sp, #0]
 800b22c:	462b      	mov	r3, r5
 800b22e:	461d      	mov	r5, r3
 800b230:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b234:	2a39      	cmp	r2, #57	; 0x39
 800b236:	d106      	bne.n	800b246 <_dtoa_r+0x6de>
 800b238:	9a01      	ldr	r2, [sp, #4]
 800b23a:	429a      	cmp	r2, r3
 800b23c:	d1f7      	bne.n	800b22e <_dtoa_r+0x6c6>
 800b23e:	9901      	ldr	r1, [sp, #4]
 800b240:	2230      	movs	r2, #48	; 0x30
 800b242:	3701      	adds	r7, #1
 800b244:	700a      	strb	r2, [r1, #0]
 800b246:	781a      	ldrb	r2, [r3, #0]
 800b248:	3201      	adds	r2, #1
 800b24a:	701a      	strb	r2, [r3, #0]
 800b24c:	e790      	b.n	800b170 <_dtoa_r+0x608>
 800b24e:	4ba6      	ldr	r3, [pc, #664]	; (800b4e8 <_dtoa_r+0x980>)
 800b250:	2200      	movs	r2, #0
 800b252:	f7f5 f9e1 	bl	8000618 <__aeabi_dmul>
 800b256:	2200      	movs	r2, #0
 800b258:	2300      	movs	r3, #0
 800b25a:	4606      	mov	r6, r0
 800b25c:	460f      	mov	r7, r1
 800b25e:	f7f5 fc43 	bl	8000ae8 <__aeabi_dcmpeq>
 800b262:	2800      	cmp	r0, #0
 800b264:	d09d      	beq.n	800b1a2 <_dtoa_r+0x63a>
 800b266:	e7cf      	b.n	800b208 <_dtoa_r+0x6a0>
 800b268:	9a08      	ldr	r2, [sp, #32]
 800b26a:	2a00      	cmp	r2, #0
 800b26c:	f000 80d7 	beq.w	800b41e <_dtoa_r+0x8b6>
 800b270:	9a06      	ldr	r2, [sp, #24]
 800b272:	2a01      	cmp	r2, #1
 800b274:	f300 80ba 	bgt.w	800b3ec <_dtoa_r+0x884>
 800b278:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b27a:	2a00      	cmp	r2, #0
 800b27c:	f000 80b2 	beq.w	800b3e4 <_dtoa_r+0x87c>
 800b280:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b284:	9e07      	ldr	r6, [sp, #28]
 800b286:	9d04      	ldr	r5, [sp, #16]
 800b288:	9a04      	ldr	r2, [sp, #16]
 800b28a:	441a      	add	r2, r3
 800b28c:	9204      	str	r2, [sp, #16]
 800b28e:	9a05      	ldr	r2, [sp, #20]
 800b290:	2101      	movs	r1, #1
 800b292:	441a      	add	r2, r3
 800b294:	4620      	mov	r0, r4
 800b296:	9205      	str	r2, [sp, #20]
 800b298:	f000 fb90 	bl	800b9bc <__i2b>
 800b29c:	4607      	mov	r7, r0
 800b29e:	2d00      	cmp	r5, #0
 800b2a0:	dd0c      	ble.n	800b2bc <_dtoa_r+0x754>
 800b2a2:	9b05      	ldr	r3, [sp, #20]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	dd09      	ble.n	800b2bc <_dtoa_r+0x754>
 800b2a8:	42ab      	cmp	r3, r5
 800b2aa:	9a04      	ldr	r2, [sp, #16]
 800b2ac:	bfa8      	it	ge
 800b2ae:	462b      	movge	r3, r5
 800b2b0:	1ad2      	subs	r2, r2, r3
 800b2b2:	9204      	str	r2, [sp, #16]
 800b2b4:	9a05      	ldr	r2, [sp, #20]
 800b2b6:	1aed      	subs	r5, r5, r3
 800b2b8:	1ad3      	subs	r3, r2, r3
 800b2ba:	9305      	str	r3, [sp, #20]
 800b2bc:	9b07      	ldr	r3, [sp, #28]
 800b2be:	b31b      	cbz	r3, 800b308 <_dtoa_r+0x7a0>
 800b2c0:	9b08      	ldr	r3, [sp, #32]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	f000 80af 	beq.w	800b426 <_dtoa_r+0x8be>
 800b2c8:	2e00      	cmp	r6, #0
 800b2ca:	dd13      	ble.n	800b2f4 <_dtoa_r+0x78c>
 800b2cc:	4639      	mov	r1, r7
 800b2ce:	4632      	mov	r2, r6
 800b2d0:	4620      	mov	r0, r4
 800b2d2:	f000 fc33 	bl	800bb3c <__pow5mult>
 800b2d6:	ee18 2a10 	vmov	r2, s16
 800b2da:	4601      	mov	r1, r0
 800b2dc:	4607      	mov	r7, r0
 800b2de:	4620      	mov	r0, r4
 800b2e0:	f000 fb82 	bl	800b9e8 <__multiply>
 800b2e4:	ee18 1a10 	vmov	r1, s16
 800b2e8:	4680      	mov	r8, r0
 800b2ea:	4620      	mov	r0, r4
 800b2ec:	f000 faae 	bl	800b84c <_Bfree>
 800b2f0:	ee08 8a10 	vmov	s16, r8
 800b2f4:	9b07      	ldr	r3, [sp, #28]
 800b2f6:	1b9a      	subs	r2, r3, r6
 800b2f8:	d006      	beq.n	800b308 <_dtoa_r+0x7a0>
 800b2fa:	ee18 1a10 	vmov	r1, s16
 800b2fe:	4620      	mov	r0, r4
 800b300:	f000 fc1c 	bl	800bb3c <__pow5mult>
 800b304:	ee08 0a10 	vmov	s16, r0
 800b308:	2101      	movs	r1, #1
 800b30a:	4620      	mov	r0, r4
 800b30c:	f000 fb56 	bl	800b9bc <__i2b>
 800b310:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b312:	2b00      	cmp	r3, #0
 800b314:	4606      	mov	r6, r0
 800b316:	f340 8088 	ble.w	800b42a <_dtoa_r+0x8c2>
 800b31a:	461a      	mov	r2, r3
 800b31c:	4601      	mov	r1, r0
 800b31e:	4620      	mov	r0, r4
 800b320:	f000 fc0c 	bl	800bb3c <__pow5mult>
 800b324:	9b06      	ldr	r3, [sp, #24]
 800b326:	2b01      	cmp	r3, #1
 800b328:	4606      	mov	r6, r0
 800b32a:	f340 8081 	ble.w	800b430 <_dtoa_r+0x8c8>
 800b32e:	f04f 0800 	mov.w	r8, #0
 800b332:	6933      	ldr	r3, [r6, #16]
 800b334:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b338:	6918      	ldr	r0, [r3, #16]
 800b33a:	f000 faef 	bl	800b91c <__hi0bits>
 800b33e:	f1c0 0020 	rsb	r0, r0, #32
 800b342:	9b05      	ldr	r3, [sp, #20]
 800b344:	4418      	add	r0, r3
 800b346:	f010 001f 	ands.w	r0, r0, #31
 800b34a:	f000 8092 	beq.w	800b472 <_dtoa_r+0x90a>
 800b34e:	f1c0 0320 	rsb	r3, r0, #32
 800b352:	2b04      	cmp	r3, #4
 800b354:	f340 808a 	ble.w	800b46c <_dtoa_r+0x904>
 800b358:	f1c0 001c 	rsb	r0, r0, #28
 800b35c:	9b04      	ldr	r3, [sp, #16]
 800b35e:	4403      	add	r3, r0
 800b360:	9304      	str	r3, [sp, #16]
 800b362:	9b05      	ldr	r3, [sp, #20]
 800b364:	4403      	add	r3, r0
 800b366:	4405      	add	r5, r0
 800b368:	9305      	str	r3, [sp, #20]
 800b36a:	9b04      	ldr	r3, [sp, #16]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	dd07      	ble.n	800b380 <_dtoa_r+0x818>
 800b370:	ee18 1a10 	vmov	r1, s16
 800b374:	461a      	mov	r2, r3
 800b376:	4620      	mov	r0, r4
 800b378:	f000 fc3a 	bl	800bbf0 <__lshift>
 800b37c:	ee08 0a10 	vmov	s16, r0
 800b380:	9b05      	ldr	r3, [sp, #20]
 800b382:	2b00      	cmp	r3, #0
 800b384:	dd05      	ble.n	800b392 <_dtoa_r+0x82a>
 800b386:	4631      	mov	r1, r6
 800b388:	461a      	mov	r2, r3
 800b38a:	4620      	mov	r0, r4
 800b38c:	f000 fc30 	bl	800bbf0 <__lshift>
 800b390:	4606      	mov	r6, r0
 800b392:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b394:	2b00      	cmp	r3, #0
 800b396:	d06e      	beq.n	800b476 <_dtoa_r+0x90e>
 800b398:	ee18 0a10 	vmov	r0, s16
 800b39c:	4631      	mov	r1, r6
 800b39e:	f000 fc97 	bl	800bcd0 <__mcmp>
 800b3a2:	2800      	cmp	r0, #0
 800b3a4:	da67      	bge.n	800b476 <_dtoa_r+0x90e>
 800b3a6:	9b00      	ldr	r3, [sp, #0]
 800b3a8:	3b01      	subs	r3, #1
 800b3aa:	ee18 1a10 	vmov	r1, s16
 800b3ae:	9300      	str	r3, [sp, #0]
 800b3b0:	220a      	movs	r2, #10
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	4620      	mov	r0, r4
 800b3b6:	f000 fa6b 	bl	800b890 <__multadd>
 800b3ba:	9b08      	ldr	r3, [sp, #32]
 800b3bc:	ee08 0a10 	vmov	s16, r0
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	f000 81b1 	beq.w	800b728 <_dtoa_r+0xbc0>
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	4639      	mov	r1, r7
 800b3ca:	220a      	movs	r2, #10
 800b3cc:	4620      	mov	r0, r4
 800b3ce:	f000 fa5f 	bl	800b890 <__multadd>
 800b3d2:	9b02      	ldr	r3, [sp, #8]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	4607      	mov	r7, r0
 800b3d8:	f300 808e 	bgt.w	800b4f8 <_dtoa_r+0x990>
 800b3dc:	9b06      	ldr	r3, [sp, #24]
 800b3de:	2b02      	cmp	r3, #2
 800b3e0:	dc51      	bgt.n	800b486 <_dtoa_r+0x91e>
 800b3e2:	e089      	b.n	800b4f8 <_dtoa_r+0x990>
 800b3e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b3e6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b3ea:	e74b      	b.n	800b284 <_dtoa_r+0x71c>
 800b3ec:	9b03      	ldr	r3, [sp, #12]
 800b3ee:	1e5e      	subs	r6, r3, #1
 800b3f0:	9b07      	ldr	r3, [sp, #28]
 800b3f2:	42b3      	cmp	r3, r6
 800b3f4:	bfbf      	itttt	lt
 800b3f6:	9b07      	ldrlt	r3, [sp, #28]
 800b3f8:	9607      	strlt	r6, [sp, #28]
 800b3fa:	1af2      	sublt	r2, r6, r3
 800b3fc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b3fe:	bfb6      	itet	lt
 800b400:	189b      	addlt	r3, r3, r2
 800b402:	1b9e      	subge	r6, r3, r6
 800b404:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b406:	9b03      	ldr	r3, [sp, #12]
 800b408:	bfb8      	it	lt
 800b40a:	2600      	movlt	r6, #0
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	bfb7      	itett	lt
 800b410:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b414:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b418:	1a9d      	sublt	r5, r3, r2
 800b41a:	2300      	movlt	r3, #0
 800b41c:	e734      	b.n	800b288 <_dtoa_r+0x720>
 800b41e:	9e07      	ldr	r6, [sp, #28]
 800b420:	9d04      	ldr	r5, [sp, #16]
 800b422:	9f08      	ldr	r7, [sp, #32]
 800b424:	e73b      	b.n	800b29e <_dtoa_r+0x736>
 800b426:	9a07      	ldr	r2, [sp, #28]
 800b428:	e767      	b.n	800b2fa <_dtoa_r+0x792>
 800b42a:	9b06      	ldr	r3, [sp, #24]
 800b42c:	2b01      	cmp	r3, #1
 800b42e:	dc18      	bgt.n	800b462 <_dtoa_r+0x8fa>
 800b430:	f1ba 0f00 	cmp.w	sl, #0
 800b434:	d115      	bne.n	800b462 <_dtoa_r+0x8fa>
 800b436:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b43a:	b993      	cbnz	r3, 800b462 <_dtoa_r+0x8fa>
 800b43c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b440:	0d1b      	lsrs	r3, r3, #20
 800b442:	051b      	lsls	r3, r3, #20
 800b444:	b183      	cbz	r3, 800b468 <_dtoa_r+0x900>
 800b446:	9b04      	ldr	r3, [sp, #16]
 800b448:	3301      	adds	r3, #1
 800b44a:	9304      	str	r3, [sp, #16]
 800b44c:	9b05      	ldr	r3, [sp, #20]
 800b44e:	3301      	adds	r3, #1
 800b450:	9305      	str	r3, [sp, #20]
 800b452:	f04f 0801 	mov.w	r8, #1
 800b456:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b458:	2b00      	cmp	r3, #0
 800b45a:	f47f af6a 	bne.w	800b332 <_dtoa_r+0x7ca>
 800b45e:	2001      	movs	r0, #1
 800b460:	e76f      	b.n	800b342 <_dtoa_r+0x7da>
 800b462:	f04f 0800 	mov.w	r8, #0
 800b466:	e7f6      	b.n	800b456 <_dtoa_r+0x8ee>
 800b468:	4698      	mov	r8, r3
 800b46a:	e7f4      	b.n	800b456 <_dtoa_r+0x8ee>
 800b46c:	f43f af7d 	beq.w	800b36a <_dtoa_r+0x802>
 800b470:	4618      	mov	r0, r3
 800b472:	301c      	adds	r0, #28
 800b474:	e772      	b.n	800b35c <_dtoa_r+0x7f4>
 800b476:	9b03      	ldr	r3, [sp, #12]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	dc37      	bgt.n	800b4ec <_dtoa_r+0x984>
 800b47c:	9b06      	ldr	r3, [sp, #24]
 800b47e:	2b02      	cmp	r3, #2
 800b480:	dd34      	ble.n	800b4ec <_dtoa_r+0x984>
 800b482:	9b03      	ldr	r3, [sp, #12]
 800b484:	9302      	str	r3, [sp, #8]
 800b486:	9b02      	ldr	r3, [sp, #8]
 800b488:	b96b      	cbnz	r3, 800b4a6 <_dtoa_r+0x93e>
 800b48a:	4631      	mov	r1, r6
 800b48c:	2205      	movs	r2, #5
 800b48e:	4620      	mov	r0, r4
 800b490:	f000 f9fe 	bl	800b890 <__multadd>
 800b494:	4601      	mov	r1, r0
 800b496:	4606      	mov	r6, r0
 800b498:	ee18 0a10 	vmov	r0, s16
 800b49c:	f000 fc18 	bl	800bcd0 <__mcmp>
 800b4a0:	2800      	cmp	r0, #0
 800b4a2:	f73f adbb 	bgt.w	800b01c <_dtoa_r+0x4b4>
 800b4a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4a8:	9d01      	ldr	r5, [sp, #4]
 800b4aa:	43db      	mvns	r3, r3
 800b4ac:	9300      	str	r3, [sp, #0]
 800b4ae:	f04f 0800 	mov.w	r8, #0
 800b4b2:	4631      	mov	r1, r6
 800b4b4:	4620      	mov	r0, r4
 800b4b6:	f000 f9c9 	bl	800b84c <_Bfree>
 800b4ba:	2f00      	cmp	r7, #0
 800b4bc:	f43f aea4 	beq.w	800b208 <_dtoa_r+0x6a0>
 800b4c0:	f1b8 0f00 	cmp.w	r8, #0
 800b4c4:	d005      	beq.n	800b4d2 <_dtoa_r+0x96a>
 800b4c6:	45b8      	cmp	r8, r7
 800b4c8:	d003      	beq.n	800b4d2 <_dtoa_r+0x96a>
 800b4ca:	4641      	mov	r1, r8
 800b4cc:	4620      	mov	r0, r4
 800b4ce:	f000 f9bd 	bl	800b84c <_Bfree>
 800b4d2:	4639      	mov	r1, r7
 800b4d4:	4620      	mov	r0, r4
 800b4d6:	f000 f9b9 	bl	800b84c <_Bfree>
 800b4da:	e695      	b.n	800b208 <_dtoa_r+0x6a0>
 800b4dc:	2600      	movs	r6, #0
 800b4de:	4637      	mov	r7, r6
 800b4e0:	e7e1      	b.n	800b4a6 <_dtoa_r+0x93e>
 800b4e2:	9700      	str	r7, [sp, #0]
 800b4e4:	4637      	mov	r7, r6
 800b4e6:	e599      	b.n	800b01c <_dtoa_r+0x4b4>
 800b4e8:	40240000 	.word	0x40240000
 800b4ec:	9b08      	ldr	r3, [sp, #32]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	f000 80ca 	beq.w	800b688 <_dtoa_r+0xb20>
 800b4f4:	9b03      	ldr	r3, [sp, #12]
 800b4f6:	9302      	str	r3, [sp, #8]
 800b4f8:	2d00      	cmp	r5, #0
 800b4fa:	dd05      	ble.n	800b508 <_dtoa_r+0x9a0>
 800b4fc:	4639      	mov	r1, r7
 800b4fe:	462a      	mov	r2, r5
 800b500:	4620      	mov	r0, r4
 800b502:	f000 fb75 	bl	800bbf0 <__lshift>
 800b506:	4607      	mov	r7, r0
 800b508:	f1b8 0f00 	cmp.w	r8, #0
 800b50c:	d05b      	beq.n	800b5c6 <_dtoa_r+0xa5e>
 800b50e:	6879      	ldr	r1, [r7, #4]
 800b510:	4620      	mov	r0, r4
 800b512:	f000 f95b 	bl	800b7cc <_Balloc>
 800b516:	4605      	mov	r5, r0
 800b518:	b928      	cbnz	r0, 800b526 <_dtoa_r+0x9be>
 800b51a:	4b87      	ldr	r3, [pc, #540]	; (800b738 <_dtoa_r+0xbd0>)
 800b51c:	4602      	mov	r2, r0
 800b51e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b522:	f7ff bb3b 	b.w	800ab9c <_dtoa_r+0x34>
 800b526:	693a      	ldr	r2, [r7, #16]
 800b528:	3202      	adds	r2, #2
 800b52a:	0092      	lsls	r2, r2, #2
 800b52c:	f107 010c 	add.w	r1, r7, #12
 800b530:	300c      	adds	r0, #12
 800b532:	f7fe fadf 	bl	8009af4 <memcpy>
 800b536:	2201      	movs	r2, #1
 800b538:	4629      	mov	r1, r5
 800b53a:	4620      	mov	r0, r4
 800b53c:	f000 fb58 	bl	800bbf0 <__lshift>
 800b540:	9b01      	ldr	r3, [sp, #4]
 800b542:	f103 0901 	add.w	r9, r3, #1
 800b546:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800b54a:	4413      	add	r3, r2
 800b54c:	9305      	str	r3, [sp, #20]
 800b54e:	f00a 0301 	and.w	r3, sl, #1
 800b552:	46b8      	mov	r8, r7
 800b554:	9304      	str	r3, [sp, #16]
 800b556:	4607      	mov	r7, r0
 800b558:	4631      	mov	r1, r6
 800b55a:	ee18 0a10 	vmov	r0, s16
 800b55e:	f7ff fa77 	bl	800aa50 <quorem>
 800b562:	4641      	mov	r1, r8
 800b564:	9002      	str	r0, [sp, #8]
 800b566:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b56a:	ee18 0a10 	vmov	r0, s16
 800b56e:	f000 fbaf 	bl	800bcd0 <__mcmp>
 800b572:	463a      	mov	r2, r7
 800b574:	9003      	str	r0, [sp, #12]
 800b576:	4631      	mov	r1, r6
 800b578:	4620      	mov	r0, r4
 800b57a:	f000 fbc5 	bl	800bd08 <__mdiff>
 800b57e:	68c2      	ldr	r2, [r0, #12]
 800b580:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800b584:	4605      	mov	r5, r0
 800b586:	bb02      	cbnz	r2, 800b5ca <_dtoa_r+0xa62>
 800b588:	4601      	mov	r1, r0
 800b58a:	ee18 0a10 	vmov	r0, s16
 800b58e:	f000 fb9f 	bl	800bcd0 <__mcmp>
 800b592:	4602      	mov	r2, r0
 800b594:	4629      	mov	r1, r5
 800b596:	4620      	mov	r0, r4
 800b598:	9207      	str	r2, [sp, #28]
 800b59a:	f000 f957 	bl	800b84c <_Bfree>
 800b59e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b5a2:	ea43 0102 	orr.w	r1, r3, r2
 800b5a6:	9b04      	ldr	r3, [sp, #16]
 800b5a8:	430b      	orrs	r3, r1
 800b5aa:	464d      	mov	r5, r9
 800b5ac:	d10f      	bne.n	800b5ce <_dtoa_r+0xa66>
 800b5ae:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b5b2:	d02a      	beq.n	800b60a <_dtoa_r+0xaa2>
 800b5b4:	9b03      	ldr	r3, [sp, #12]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	dd02      	ble.n	800b5c0 <_dtoa_r+0xa58>
 800b5ba:	9b02      	ldr	r3, [sp, #8]
 800b5bc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b5c0:	f88b a000 	strb.w	sl, [fp]
 800b5c4:	e775      	b.n	800b4b2 <_dtoa_r+0x94a>
 800b5c6:	4638      	mov	r0, r7
 800b5c8:	e7ba      	b.n	800b540 <_dtoa_r+0x9d8>
 800b5ca:	2201      	movs	r2, #1
 800b5cc:	e7e2      	b.n	800b594 <_dtoa_r+0xa2c>
 800b5ce:	9b03      	ldr	r3, [sp, #12]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	db04      	blt.n	800b5de <_dtoa_r+0xa76>
 800b5d4:	9906      	ldr	r1, [sp, #24]
 800b5d6:	430b      	orrs	r3, r1
 800b5d8:	9904      	ldr	r1, [sp, #16]
 800b5da:	430b      	orrs	r3, r1
 800b5dc:	d122      	bne.n	800b624 <_dtoa_r+0xabc>
 800b5de:	2a00      	cmp	r2, #0
 800b5e0:	ddee      	ble.n	800b5c0 <_dtoa_r+0xa58>
 800b5e2:	ee18 1a10 	vmov	r1, s16
 800b5e6:	2201      	movs	r2, #1
 800b5e8:	4620      	mov	r0, r4
 800b5ea:	f000 fb01 	bl	800bbf0 <__lshift>
 800b5ee:	4631      	mov	r1, r6
 800b5f0:	ee08 0a10 	vmov	s16, r0
 800b5f4:	f000 fb6c 	bl	800bcd0 <__mcmp>
 800b5f8:	2800      	cmp	r0, #0
 800b5fa:	dc03      	bgt.n	800b604 <_dtoa_r+0xa9c>
 800b5fc:	d1e0      	bne.n	800b5c0 <_dtoa_r+0xa58>
 800b5fe:	f01a 0f01 	tst.w	sl, #1
 800b602:	d0dd      	beq.n	800b5c0 <_dtoa_r+0xa58>
 800b604:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b608:	d1d7      	bne.n	800b5ba <_dtoa_r+0xa52>
 800b60a:	2339      	movs	r3, #57	; 0x39
 800b60c:	f88b 3000 	strb.w	r3, [fp]
 800b610:	462b      	mov	r3, r5
 800b612:	461d      	mov	r5, r3
 800b614:	3b01      	subs	r3, #1
 800b616:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b61a:	2a39      	cmp	r2, #57	; 0x39
 800b61c:	d071      	beq.n	800b702 <_dtoa_r+0xb9a>
 800b61e:	3201      	adds	r2, #1
 800b620:	701a      	strb	r2, [r3, #0]
 800b622:	e746      	b.n	800b4b2 <_dtoa_r+0x94a>
 800b624:	2a00      	cmp	r2, #0
 800b626:	dd07      	ble.n	800b638 <_dtoa_r+0xad0>
 800b628:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b62c:	d0ed      	beq.n	800b60a <_dtoa_r+0xaa2>
 800b62e:	f10a 0301 	add.w	r3, sl, #1
 800b632:	f88b 3000 	strb.w	r3, [fp]
 800b636:	e73c      	b.n	800b4b2 <_dtoa_r+0x94a>
 800b638:	9b05      	ldr	r3, [sp, #20]
 800b63a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b63e:	4599      	cmp	r9, r3
 800b640:	d047      	beq.n	800b6d2 <_dtoa_r+0xb6a>
 800b642:	ee18 1a10 	vmov	r1, s16
 800b646:	2300      	movs	r3, #0
 800b648:	220a      	movs	r2, #10
 800b64a:	4620      	mov	r0, r4
 800b64c:	f000 f920 	bl	800b890 <__multadd>
 800b650:	45b8      	cmp	r8, r7
 800b652:	ee08 0a10 	vmov	s16, r0
 800b656:	f04f 0300 	mov.w	r3, #0
 800b65a:	f04f 020a 	mov.w	r2, #10
 800b65e:	4641      	mov	r1, r8
 800b660:	4620      	mov	r0, r4
 800b662:	d106      	bne.n	800b672 <_dtoa_r+0xb0a>
 800b664:	f000 f914 	bl	800b890 <__multadd>
 800b668:	4680      	mov	r8, r0
 800b66a:	4607      	mov	r7, r0
 800b66c:	f109 0901 	add.w	r9, r9, #1
 800b670:	e772      	b.n	800b558 <_dtoa_r+0x9f0>
 800b672:	f000 f90d 	bl	800b890 <__multadd>
 800b676:	4639      	mov	r1, r7
 800b678:	4680      	mov	r8, r0
 800b67a:	2300      	movs	r3, #0
 800b67c:	220a      	movs	r2, #10
 800b67e:	4620      	mov	r0, r4
 800b680:	f000 f906 	bl	800b890 <__multadd>
 800b684:	4607      	mov	r7, r0
 800b686:	e7f1      	b.n	800b66c <_dtoa_r+0xb04>
 800b688:	9b03      	ldr	r3, [sp, #12]
 800b68a:	9302      	str	r3, [sp, #8]
 800b68c:	9d01      	ldr	r5, [sp, #4]
 800b68e:	ee18 0a10 	vmov	r0, s16
 800b692:	4631      	mov	r1, r6
 800b694:	f7ff f9dc 	bl	800aa50 <quorem>
 800b698:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b69c:	9b01      	ldr	r3, [sp, #4]
 800b69e:	f805 ab01 	strb.w	sl, [r5], #1
 800b6a2:	1aea      	subs	r2, r5, r3
 800b6a4:	9b02      	ldr	r3, [sp, #8]
 800b6a6:	4293      	cmp	r3, r2
 800b6a8:	dd09      	ble.n	800b6be <_dtoa_r+0xb56>
 800b6aa:	ee18 1a10 	vmov	r1, s16
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	220a      	movs	r2, #10
 800b6b2:	4620      	mov	r0, r4
 800b6b4:	f000 f8ec 	bl	800b890 <__multadd>
 800b6b8:	ee08 0a10 	vmov	s16, r0
 800b6bc:	e7e7      	b.n	800b68e <_dtoa_r+0xb26>
 800b6be:	9b02      	ldr	r3, [sp, #8]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	bfc8      	it	gt
 800b6c4:	461d      	movgt	r5, r3
 800b6c6:	9b01      	ldr	r3, [sp, #4]
 800b6c8:	bfd8      	it	le
 800b6ca:	2501      	movle	r5, #1
 800b6cc:	441d      	add	r5, r3
 800b6ce:	f04f 0800 	mov.w	r8, #0
 800b6d2:	ee18 1a10 	vmov	r1, s16
 800b6d6:	2201      	movs	r2, #1
 800b6d8:	4620      	mov	r0, r4
 800b6da:	f000 fa89 	bl	800bbf0 <__lshift>
 800b6de:	4631      	mov	r1, r6
 800b6e0:	ee08 0a10 	vmov	s16, r0
 800b6e4:	f000 faf4 	bl	800bcd0 <__mcmp>
 800b6e8:	2800      	cmp	r0, #0
 800b6ea:	dc91      	bgt.n	800b610 <_dtoa_r+0xaa8>
 800b6ec:	d102      	bne.n	800b6f4 <_dtoa_r+0xb8c>
 800b6ee:	f01a 0f01 	tst.w	sl, #1
 800b6f2:	d18d      	bne.n	800b610 <_dtoa_r+0xaa8>
 800b6f4:	462b      	mov	r3, r5
 800b6f6:	461d      	mov	r5, r3
 800b6f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b6fc:	2a30      	cmp	r2, #48	; 0x30
 800b6fe:	d0fa      	beq.n	800b6f6 <_dtoa_r+0xb8e>
 800b700:	e6d7      	b.n	800b4b2 <_dtoa_r+0x94a>
 800b702:	9a01      	ldr	r2, [sp, #4]
 800b704:	429a      	cmp	r2, r3
 800b706:	d184      	bne.n	800b612 <_dtoa_r+0xaaa>
 800b708:	9b00      	ldr	r3, [sp, #0]
 800b70a:	3301      	adds	r3, #1
 800b70c:	9300      	str	r3, [sp, #0]
 800b70e:	2331      	movs	r3, #49	; 0x31
 800b710:	7013      	strb	r3, [r2, #0]
 800b712:	e6ce      	b.n	800b4b2 <_dtoa_r+0x94a>
 800b714:	4b09      	ldr	r3, [pc, #36]	; (800b73c <_dtoa_r+0xbd4>)
 800b716:	f7ff ba95 	b.w	800ac44 <_dtoa_r+0xdc>
 800b71a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	f47f aa6e 	bne.w	800abfe <_dtoa_r+0x96>
 800b722:	4b07      	ldr	r3, [pc, #28]	; (800b740 <_dtoa_r+0xbd8>)
 800b724:	f7ff ba8e 	b.w	800ac44 <_dtoa_r+0xdc>
 800b728:	9b02      	ldr	r3, [sp, #8]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	dcae      	bgt.n	800b68c <_dtoa_r+0xb24>
 800b72e:	9b06      	ldr	r3, [sp, #24]
 800b730:	2b02      	cmp	r3, #2
 800b732:	f73f aea8 	bgt.w	800b486 <_dtoa_r+0x91e>
 800b736:	e7a9      	b.n	800b68c <_dtoa_r+0xb24>
 800b738:	08012fe9 	.word	0x08012fe9
 800b73c:	08013169 	.word	0x08013169
 800b740:	08012f6a 	.word	0x08012f6a

0800b744 <_fstat_r>:
 800b744:	b538      	push	{r3, r4, r5, lr}
 800b746:	4d07      	ldr	r5, [pc, #28]	; (800b764 <_fstat_r+0x20>)
 800b748:	2300      	movs	r3, #0
 800b74a:	4604      	mov	r4, r0
 800b74c:	4608      	mov	r0, r1
 800b74e:	4611      	mov	r1, r2
 800b750:	602b      	str	r3, [r5, #0]
 800b752:	f7f7 fa1e 	bl	8002b92 <_fstat>
 800b756:	1c43      	adds	r3, r0, #1
 800b758:	d102      	bne.n	800b760 <_fstat_r+0x1c>
 800b75a:	682b      	ldr	r3, [r5, #0]
 800b75c:	b103      	cbz	r3, 800b760 <_fstat_r+0x1c>
 800b75e:	6023      	str	r3, [r4, #0]
 800b760:	bd38      	pop	{r3, r4, r5, pc}
 800b762:	bf00      	nop
 800b764:	2000049c 	.word	0x2000049c

0800b768 <_isatty_r>:
 800b768:	b538      	push	{r3, r4, r5, lr}
 800b76a:	4d06      	ldr	r5, [pc, #24]	; (800b784 <_isatty_r+0x1c>)
 800b76c:	2300      	movs	r3, #0
 800b76e:	4604      	mov	r4, r0
 800b770:	4608      	mov	r0, r1
 800b772:	602b      	str	r3, [r5, #0]
 800b774:	f7f7 fa1d 	bl	8002bb2 <_isatty>
 800b778:	1c43      	adds	r3, r0, #1
 800b77a:	d102      	bne.n	800b782 <_isatty_r+0x1a>
 800b77c:	682b      	ldr	r3, [r5, #0]
 800b77e:	b103      	cbz	r3, 800b782 <_isatty_r+0x1a>
 800b780:	6023      	str	r3, [r4, #0]
 800b782:	bd38      	pop	{r3, r4, r5, pc}
 800b784:	2000049c 	.word	0x2000049c

0800b788 <_localeconv_r>:
 800b788:	4800      	ldr	r0, [pc, #0]	; (800b78c <_localeconv_r+0x4>)
 800b78a:	4770      	bx	lr
 800b78c:	20000168 	.word	0x20000168

0800b790 <_lseek_r>:
 800b790:	b538      	push	{r3, r4, r5, lr}
 800b792:	4d07      	ldr	r5, [pc, #28]	; (800b7b0 <_lseek_r+0x20>)
 800b794:	4604      	mov	r4, r0
 800b796:	4608      	mov	r0, r1
 800b798:	4611      	mov	r1, r2
 800b79a:	2200      	movs	r2, #0
 800b79c:	602a      	str	r2, [r5, #0]
 800b79e:	461a      	mov	r2, r3
 800b7a0:	f7f7 fa12 	bl	8002bc8 <_lseek>
 800b7a4:	1c43      	adds	r3, r0, #1
 800b7a6:	d102      	bne.n	800b7ae <_lseek_r+0x1e>
 800b7a8:	682b      	ldr	r3, [r5, #0]
 800b7aa:	b103      	cbz	r3, 800b7ae <_lseek_r+0x1e>
 800b7ac:	6023      	str	r3, [r4, #0]
 800b7ae:	bd38      	pop	{r3, r4, r5, pc}
 800b7b0:	2000049c 	.word	0x2000049c

0800b7b4 <__malloc_lock>:
 800b7b4:	4801      	ldr	r0, [pc, #4]	; (800b7bc <__malloc_lock+0x8>)
 800b7b6:	f7fe b926 	b.w	8009a06 <__retarget_lock_acquire_recursive>
 800b7ba:	bf00      	nop
 800b7bc:	20000490 	.word	0x20000490

0800b7c0 <__malloc_unlock>:
 800b7c0:	4801      	ldr	r0, [pc, #4]	; (800b7c8 <__malloc_unlock+0x8>)
 800b7c2:	f7fe b921 	b.w	8009a08 <__retarget_lock_release_recursive>
 800b7c6:	bf00      	nop
 800b7c8:	20000490 	.word	0x20000490

0800b7cc <_Balloc>:
 800b7cc:	b570      	push	{r4, r5, r6, lr}
 800b7ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b7d0:	4604      	mov	r4, r0
 800b7d2:	460d      	mov	r5, r1
 800b7d4:	b976      	cbnz	r6, 800b7f4 <_Balloc+0x28>
 800b7d6:	2010      	movs	r0, #16
 800b7d8:	f7fe f97c 	bl	8009ad4 <malloc>
 800b7dc:	4602      	mov	r2, r0
 800b7de:	6260      	str	r0, [r4, #36]	; 0x24
 800b7e0:	b920      	cbnz	r0, 800b7ec <_Balloc+0x20>
 800b7e2:	4b18      	ldr	r3, [pc, #96]	; (800b844 <_Balloc+0x78>)
 800b7e4:	4818      	ldr	r0, [pc, #96]	; (800b848 <_Balloc+0x7c>)
 800b7e6:	2166      	movs	r1, #102	; 0x66
 800b7e8:	f001 ffce 	bl	800d788 <__assert_func>
 800b7ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b7f0:	6006      	str	r6, [r0, #0]
 800b7f2:	60c6      	str	r6, [r0, #12]
 800b7f4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b7f6:	68f3      	ldr	r3, [r6, #12]
 800b7f8:	b183      	cbz	r3, 800b81c <_Balloc+0x50>
 800b7fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b7fc:	68db      	ldr	r3, [r3, #12]
 800b7fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b802:	b9b8      	cbnz	r0, 800b834 <_Balloc+0x68>
 800b804:	2101      	movs	r1, #1
 800b806:	fa01 f605 	lsl.w	r6, r1, r5
 800b80a:	1d72      	adds	r2, r6, #5
 800b80c:	0092      	lsls	r2, r2, #2
 800b80e:	4620      	mov	r0, r4
 800b810:	f000 fb60 	bl	800bed4 <_calloc_r>
 800b814:	b160      	cbz	r0, 800b830 <_Balloc+0x64>
 800b816:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b81a:	e00e      	b.n	800b83a <_Balloc+0x6e>
 800b81c:	2221      	movs	r2, #33	; 0x21
 800b81e:	2104      	movs	r1, #4
 800b820:	4620      	mov	r0, r4
 800b822:	f000 fb57 	bl	800bed4 <_calloc_r>
 800b826:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b828:	60f0      	str	r0, [r6, #12]
 800b82a:	68db      	ldr	r3, [r3, #12]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d1e4      	bne.n	800b7fa <_Balloc+0x2e>
 800b830:	2000      	movs	r0, #0
 800b832:	bd70      	pop	{r4, r5, r6, pc}
 800b834:	6802      	ldr	r2, [r0, #0]
 800b836:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b83a:	2300      	movs	r3, #0
 800b83c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b840:	e7f7      	b.n	800b832 <_Balloc+0x66>
 800b842:	bf00      	nop
 800b844:	08012f77 	.word	0x08012f77
 800b848:	08012ffa 	.word	0x08012ffa

0800b84c <_Bfree>:
 800b84c:	b570      	push	{r4, r5, r6, lr}
 800b84e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b850:	4605      	mov	r5, r0
 800b852:	460c      	mov	r4, r1
 800b854:	b976      	cbnz	r6, 800b874 <_Bfree+0x28>
 800b856:	2010      	movs	r0, #16
 800b858:	f7fe f93c 	bl	8009ad4 <malloc>
 800b85c:	4602      	mov	r2, r0
 800b85e:	6268      	str	r0, [r5, #36]	; 0x24
 800b860:	b920      	cbnz	r0, 800b86c <_Bfree+0x20>
 800b862:	4b09      	ldr	r3, [pc, #36]	; (800b888 <_Bfree+0x3c>)
 800b864:	4809      	ldr	r0, [pc, #36]	; (800b88c <_Bfree+0x40>)
 800b866:	218a      	movs	r1, #138	; 0x8a
 800b868:	f001 ff8e 	bl	800d788 <__assert_func>
 800b86c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b870:	6006      	str	r6, [r0, #0]
 800b872:	60c6      	str	r6, [r0, #12]
 800b874:	b13c      	cbz	r4, 800b886 <_Bfree+0x3a>
 800b876:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b878:	6862      	ldr	r2, [r4, #4]
 800b87a:	68db      	ldr	r3, [r3, #12]
 800b87c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b880:	6021      	str	r1, [r4, #0]
 800b882:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b886:	bd70      	pop	{r4, r5, r6, pc}
 800b888:	08012f77 	.word	0x08012f77
 800b88c:	08012ffa 	.word	0x08012ffa

0800b890 <__multadd>:
 800b890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b894:	690d      	ldr	r5, [r1, #16]
 800b896:	4607      	mov	r7, r0
 800b898:	460c      	mov	r4, r1
 800b89a:	461e      	mov	r6, r3
 800b89c:	f101 0c14 	add.w	ip, r1, #20
 800b8a0:	2000      	movs	r0, #0
 800b8a2:	f8dc 3000 	ldr.w	r3, [ip]
 800b8a6:	b299      	uxth	r1, r3
 800b8a8:	fb02 6101 	mla	r1, r2, r1, r6
 800b8ac:	0c1e      	lsrs	r6, r3, #16
 800b8ae:	0c0b      	lsrs	r3, r1, #16
 800b8b0:	fb02 3306 	mla	r3, r2, r6, r3
 800b8b4:	b289      	uxth	r1, r1
 800b8b6:	3001      	adds	r0, #1
 800b8b8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b8bc:	4285      	cmp	r5, r0
 800b8be:	f84c 1b04 	str.w	r1, [ip], #4
 800b8c2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b8c6:	dcec      	bgt.n	800b8a2 <__multadd+0x12>
 800b8c8:	b30e      	cbz	r6, 800b90e <__multadd+0x7e>
 800b8ca:	68a3      	ldr	r3, [r4, #8]
 800b8cc:	42ab      	cmp	r3, r5
 800b8ce:	dc19      	bgt.n	800b904 <__multadd+0x74>
 800b8d0:	6861      	ldr	r1, [r4, #4]
 800b8d2:	4638      	mov	r0, r7
 800b8d4:	3101      	adds	r1, #1
 800b8d6:	f7ff ff79 	bl	800b7cc <_Balloc>
 800b8da:	4680      	mov	r8, r0
 800b8dc:	b928      	cbnz	r0, 800b8ea <__multadd+0x5a>
 800b8de:	4602      	mov	r2, r0
 800b8e0:	4b0c      	ldr	r3, [pc, #48]	; (800b914 <__multadd+0x84>)
 800b8e2:	480d      	ldr	r0, [pc, #52]	; (800b918 <__multadd+0x88>)
 800b8e4:	21b5      	movs	r1, #181	; 0xb5
 800b8e6:	f001 ff4f 	bl	800d788 <__assert_func>
 800b8ea:	6922      	ldr	r2, [r4, #16]
 800b8ec:	3202      	adds	r2, #2
 800b8ee:	f104 010c 	add.w	r1, r4, #12
 800b8f2:	0092      	lsls	r2, r2, #2
 800b8f4:	300c      	adds	r0, #12
 800b8f6:	f7fe f8fd 	bl	8009af4 <memcpy>
 800b8fa:	4621      	mov	r1, r4
 800b8fc:	4638      	mov	r0, r7
 800b8fe:	f7ff ffa5 	bl	800b84c <_Bfree>
 800b902:	4644      	mov	r4, r8
 800b904:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b908:	3501      	adds	r5, #1
 800b90a:	615e      	str	r6, [r3, #20]
 800b90c:	6125      	str	r5, [r4, #16]
 800b90e:	4620      	mov	r0, r4
 800b910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b914:	08012fe9 	.word	0x08012fe9
 800b918:	08012ffa 	.word	0x08012ffa

0800b91c <__hi0bits>:
 800b91c:	0c03      	lsrs	r3, r0, #16
 800b91e:	041b      	lsls	r3, r3, #16
 800b920:	b9d3      	cbnz	r3, 800b958 <__hi0bits+0x3c>
 800b922:	0400      	lsls	r0, r0, #16
 800b924:	2310      	movs	r3, #16
 800b926:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b92a:	bf04      	itt	eq
 800b92c:	0200      	lsleq	r0, r0, #8
 800b92e:	3308      	addeq	r3, #8
 800b930:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b934:	bf04      	itt	eq
 800b936:	0100      	lsleq	r0, r0, #4
 800b938:	3304      	addeq	r3, #4
 800b93a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b93e:	bf04      	itt	eq
 800b940:	0080      	lsleq	r0, r0, #2
 800b942:	3302      	addeq	r3, #2
 800b944:	2800      	cmp	r0, #0
 800b946:	db05      	blt.n	800b954 <__hi0bits+0x38>
 800b948:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b94c:	f103 0301 	add.w	r3, r3, #1
 800b950:	bf08      	it	eq
 800b952:	2320      	moveq	r3, #32
 800b954:	4618      	mov	r0, r3
 800b956:	4770      	bx	lr
 800b958:	2300      	movs	r3, #0
 800b95a:	e7e4      	b.n	800b926 <__hi0bits+0xa>

0800b95c <__lo0bits>:
 800b95c:	6803      	ldr	r3, [r0, #0]
 800b95e:	f013 0207 	ands.w	r2, r3, #7
 800b962:	4601      	mov	r1, r0
 800b964:	d00b      	beq.n	800b97e <__lo0bits+0x22>
 800b966:	07da      	lsls	r2, r3, #31
 800b968:	d423      	bmi.n	800b9b2 <__lo0bits+0x56>
 800b96a:	0798      	lsls	r0, r3, #30
 800b96c:	bf49      	itett	mi
 800b96e:	085b      	lsrmi	r3, r3, #1
 800b970:	089b      	lsrpl	r3, r3, #2
 800b972:	2001      	movmi	r0, #1
 800b974:	600b      	strmi	r3, [r1, #0]
 800b976:	bf5c      	itt	pl
 800b978:	600b      	strpl	r3, [r1, #0]
 800b97a:	2002      	movpl	r0, #2
 800b97c:	4770      	bx	lr
 800b97e:	b298      	uxth	r0, r3
 800b980:	b9a8      	cbnz	r0, 800b9ae <__lo0bits+0x52>
 800b982:	0c1b      	lsrs	r3, r3, #16
 800b984:	2010      	movs	r0, #16
 800b986:	b2da      	uxtb	r2, r3
 800b988:	b90a      	cbnz	r2, 800b98e <__lo0bits+0x32>
 800b98a:	3008      	adds	r0, #8
 800b98c:	0a1b      	lsrs	r3, r3, #8
 800b98e:	071a      	lsls	r2, r3, #28
 800b990:	bf04      	itt	eq
 800b992:	091b      	lsreq	r3, r3, #4
 800b994:	3004      	addeq	r0, #4
 800b996:	079a      	lsls	r2, r3, #30
 800b998:	bf04      	itt	eq
 800b99a:	089b      	lsreq	r3, r3, #2
 800b99c:	3002      	addeq	r0, #2
 800b99e:	07da      	lsls	r2, r3, #31
 800b9a0:	d403      	bmi.n	800b9aa <__lo0bits+0x4e>
 800b9a2:	085b      	lsrs	r3, r3, #1
 800b9a4:	f100 0001 	add.w	r0, r0, #1
 800b9a8:	d005      	beq.n	800b9b6 <__lo0bits+0x5a>
 800b9aa:	600b      	str	r3, [r1, #0]
 800b9ac:	4770      	bx	lr
 800b9ae:	4610      	mov	r0, r2
 800b9b0:	e7e9      	b.n	800b986 <__lo0bits+0x2a>
 800b9b2:	2000      	movs	r0, #0
 800b9b4:	4770      	bx	lr
 800b9b6:	2020      	movs	r0, #32
 800b9b8:	4770      	bx	lr
	...

0800b9bc <__i2b>:
 800b9bc:	b510      	push	{r4, lr}
 800b9be:	460c      	mov	r4, r1
 800b9c0:	2101      	movs	r1, #1
 800b9c2:	f7ff ff03 	bl	800b7cc <_Balloc>
 800b9c6:	4602      	mov	r2, r0
 800b9c8:	b928      	cbnz	r0, 800b9d6 <__i2b+0x1a>
 800b9ca:	4b05      	ldr	r3, [pc, #20]	; (800b9e0 <__i2b+0x24>)
 800b9cc:	4805      	ldr	r0, [pc, #20]	; (800b9e4 <__i2b+0x28>)
 800b9ce:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b9d2:	f001 fed9 	bl	800d788 <__assert_func>
 800b9d6:	2301      	movs	r3, #1
 800b9d8:	6144      	str	r4, [r0, #20]
 800b9da:	6103      	str	r3, [r0, #16]
 800b9dc:	bd10      	pop	{r4, pc}
 800b9de:	bf00      	nop
 800b9e0:	08012fe9 	.word	0x08012fe9
 800b9e4:	08012ffa 	.word	0x08012ffa

0800b9e8 <__multiply>:
 800b9e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9ec:	4691      	mov	r9, r2
 800b9ee:	690a      	ldr	r2, [r1, #16]
 800b9f0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b9f4:	429a      	cmp	r2, r3
 800b9f6:	bfb8      	it	lt
 800b9f8:	460b      	movlt	r3, r1
 800b9fa:	460c      	mov	r4, r1
 800b9fc:	bfbc      	itt	lt
 800b9fe:	464c      	movlt	r4, r9
 800ba00:	4699      	movlt	r9, r3
 800ba02:	6927      	ldr	r7, [r4, #16]
 800ba04:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ba08:	68a3      	ldr	r3, [r4, #8]
 800ba0a:	6861      	ldr	r1, [r4, #4]
 800ba0c:	eb07 060a 	add.w	r6, r7, sl
 800ba10:	42b3      	cmp	r3, r6
 800ba12:	b085      	sub	sp, #20
 800ba14:	bfb8      	it	lt
 800ba16:	3101      	addlt	r1, #1
 800ba18:	f7ff fed8 	bl	800b7cc <_Balloc>
 800ba1c:	b930      	cbnz	r0, 800ba2c <__multiply+0x44>
 800ba1e:	4602      	mov	r2, r0
 800ba20:	4b44      	ldr	r3, [pc, #272]	; (800bb34 <__multiply+0x14c>)
 800ba22:	4845      	ldr	r0, [pc, #276]	; (800bb38 <__multiply+0x150>)
 800ba24:	f240 115d 	movw	r1, #349	; 0x15d
 800ba28:	f001 feae 	bl	800d788 <__assert_func>
 800ba2c:	f100 0514 	add.w	r5, r0, #20
 800ba30:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ba34:	462b      	mov	r3, r5
 800ba36:	2200      	movs	r2, #0
 800ba38:	4543      	cmp	r3, r8
 800ba3a:	d321      	bcc.n	800ba80 <__multiply+0x98>
 800ba3c:	f104 0314 	add.w	r3, r4, #20
 800ba40:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ba44:	f109 0314 	add.w	r3, r9, #20
 800ba48:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ba4c:	9202      	str	r2, [sp, #8]
 800ba4e:	1b3a      	subs	r2, r7, r4
 800ba50:	3a15      	subs	r2, #21
 800ba52:	f022 0203 	bic.w	r2, r2, #3
 800ba56:	3204      	adds	r2, #4
 800ba58:	f104 0115 	add.w	r1, r4, #21
 800ba5c:	428f      	cmp	r7, r1
 800ba5e:	bf38      	it	cc
 800ba60:	2204      	movcc	r2, #4
 800ba62:	9201      	str	r2, [sp, #4]
 800ba64:	9a02      	ldr	r2, [sp, #8]
 800ba66:	9303      	str	r3, [sp, #12]
 800ba68:	429a      	cmp	r2, r3
 800ba6a:	d80c      	bhi.n	800ba86 <__multiply+0x9e>
 800ba6c:	2e00      	cmp	r6, #0
 800ba6e:	dd03      	ble.n	800ba78 <__multiply+0x90>
 800ba70:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d05a      	beq.n	800bb2e <__multiply+0x146>
 800ba78:	6106      	str	r6, [r0, #16]
 800ba7a:	b005      	add	sp, #20
 800ba7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba80:	f843 2b04 	str.w	r2, [r3], #4
 800ba84:	e7d8      	b.n	800ba38 <__multiply+0x50>
 800ba86:	f8b3 a000 	ldrh.w	sl, [r3]
 800ba8a:	f1ba 0f00 	cmp.w	sl, #0
 800ba8e:	d024      	beq.n	800bada <__multiply+0xf2>
 800ba90:	f104 0e14 	add.w	lr, r4, #20
 800ba94:	46a9      	mov	r9, r5
 800ba96:	f04f 0c00 	mov.w	ip, #0
 800ba9a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ba9e:	f8d9 1000 	ldr.w	r1, [r9]
 800baa2:	fa1f fb82 	uxth.w	fp, r2
 800baa6:	b289      	uxth	r1, r1
 800baa8:	fb0a 110b 	mla	r1, sl, fp, r1
 800baac:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bab0:	f8d9 2000 	ldr.w	r2, [r9]
 800bab4:	4461      	add	r1, ip
 800bab6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800baba:	fb0a c20b 	mla	r2, sl, fp, ip
 800babe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bac2:	b289      	uxth	r1, r1
 800bac4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bac8:	4577      	cmp	r7, lr
 800baca:	f849 1b04 	str.w	r1, [r9], #4
 800bace:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bad2:	d8e2      	bhi.n	800ba9a <__multiply+0xb2>
 800bad4:	9a01      	ldr	r2, [sp, #4]
 800bad6:	f845 c002 	str.w	ip, [r5, r2]
 800bada:	9a03      	ldr	r2, [sp, #12]
 800badc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bae0:	3304      	adds	r3, #4
 800bae2:	f1b9 0f00 	cmp.w	r9, #0
 800bae6:	d020      	beq.n	800bb2a <__multiply+0x142>
 800bae8:	6829      	ldr	r1, [r5, #0]
 800baea:	f104 0c14 	add.w	ip, r4, #20
 800baee:	46ae      	mov	lr, r5
 800baf0:	f04f 0a00 	mov.w	sl, #0
 800baf4:	f8bc b000 	ldrh.w	fp, [ip]
 800baf8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bafc:	fb09 220b 	mla	r2, r9, fp, r2
 800bb00:	4492      	add	sl, r2
 800bb02:	b289      	uxth	r1, r1
 800bb04:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800bb08:	f84e 1b04 	str.w	r1, [lr], #4
 800bb0c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800bb10:	f8be 1000 	ldrh.w	r1, [lr]
 800bb14:	0c12      	lsrs	r2, r2, #16
 800bb16:	fb09 1102 	mla	r1, r9, r2, r1
 800bb1a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800bb1e:	4567      	cmp	r7, ip
 800bb20:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bb24:	d8e6      	bhi.n	800baf4 <__multiply+0x10c>
 800bb26:	9a01      	ldr	r2, [sp, #4]
 800bb28:	50a9      	str	r1, [r5, r2]
 800bb2a:	3504      	adds	r5, #4
 800bb2c:	e79a      	b.n	800ba64 <__multiply+0x7c>
 800bb2e:	3e01      	subs	r6, #1
 800bb30:	e79c      	b.n	800ba6c <__multiply+0x84>
 800bb32:	bf00      	nop
 800bb34:	08012fe9 	.word	0x08012fe9
 800bb38:	08012ffa 	.word	0x08012ffa

0800bb3c <__pow5mult>:
 800bb3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb40:	4615      	mov	r5, r2
 800bb42:	f012 0203 	ands.w	r2, r2, #3
 800bb46:	4606      	mov	r6, r0
 800bb48:	460f      	mov	r7, r1
 800bb4a:	d007      	beq.n	800bb5c <__pow5mult+0x20>
 800bb4c:	4c25      	ldr	r4, [pc, #148]	; (800bbe4 <__pow5mult+0xa8>)
 800bb4e:	3a01      	subs	r2, #1
 800bb50:	2300      	movs	r3, #0
 800bb52:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bb56:	f7ff fe9b 	bl	800b890 <__multadd>
 800bb5a:	4607      	mov	r7, r0
 800bb5c:	10ad      	asrs	r5, r5, #2
 800bb5e:	d03d      	beq.n	800bbdc <__pow5mult+0xa0>
 800bb60:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bb62:	b97c      	cbnz	r4, 800bb84 <__pow5mult+0x48>
 800bb64:	2010      	movs	r0, #16
 800bb66:	f7fd ffb5 	bl	8009ad4 <malloc>
 800bb6a:	4602      	mov	r2, r0
 800bb6c:	6270      	str	r0, [r6, #36]	; 0x24
 800bb6e:	b928      	cbnz	r0, 800bb7c <__pow5mult+0x40>
 800bb70:	4b1d      	ldr	r3, [pc, #116]	; (800bbe8 <__pow5mult+0xac>)
 800bb72:	481e      	ldr	r0, [pc, #120]	; (800bbec <__pow5mult+0xb0>)
 800bb74:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800bb78:	f001 fe06 	bl	800d788 <__assert_func>
 800bb7c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bb80:	6004      	str	r4, [r0, #0]
 800bb82:	60c4      	str	r4, [r0, #12]
 800bb84:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bb88:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bb8c:	b94c      	cbnz	r4, 800bba2 <__pow5mult+0x66>
 800bb8e:	f240 2171 	movw	r1, #625	; 0x271
 800bb92:	4630      	mov	r0, r6
 800bb94:	f7ff ff12 	bl	800b9bc <__i2b>
 800bb98:	2300      	movs	r3, #0
 800bb9a:	f8c8 0008 	str.w	r0, [r8, #8]
 800bb9e:	4604      	mov	r4, r0
 800bba0:	6003      	str	r3, [r0, #0]
 800bba2:	f04f 0900 	mov.w	r9, #0
 800bba6:	07eb      	lsls	r3, r5, #31
 800bba8:	d50a      	bpl.n	800bbc0 <__pow5mult+0x84>
 800bbaa:	4639      	mov	r1, r7
 800bbac:	4622      	mov	r2, r4
 800bbae:	4630      	mov	r0, r6
 800bbb0:	f7ff ff1a 	bl	800b9e8 <__multiply>
 800bbb4:	4639      	mov	r1, r7
 800bbb6:	4680      	mov	r8, r0
 800bbb8:	4630      	mov	r0, r6
 800bbba:	f7ff fe47 	bl	800b84c <_Bfree>
 800bbbe:	4647      	mov	r7, r8
 800bbc0:	106d      	asrs	r5, r5, #1
 800bbc2:	d00b      	beq.n	800bbdc <__pow5mult+0xa0>
 800bbc4:	6820      	ldr	r0, [r4, #0]
 800bbc6:	b938      	cbnz	r0, 800bbd8 <__pow5mult+0x9c>
 800bbc8:	4622      	mov	r2, r4
 800bbca:	4621      	mov	r1, r4
 800bbcc:	4630      	mov	r0, r6
 800bbce:	f7ff ff0b 	bl	800b9e8 <__multiply>
 800bbd2:	6020      	str	r0, [r4, #0]
 800bbd4:	f8c0 9000 	str.w	r9, [r0]
 800bbd8:	4604      	mov	r4, r0
 800bbda:	e7e4      	b.n	800bba6 <__pow5mult+0x6a>
 800bbdc:	4638      	mov	r0, r7
 800bbde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bbe2:	bf00      	nop
 800bbe4:	08013148 	.word	0x08013148
 800bbe8:	08012f77 	.word	0x08012f77
 800bbec:	08012ffa 	.word	0x08012ffa

0800bbf0 <__lshift>:
 800bbf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bbf4:	460c      	mov	r4, r1
 800bbf6:	6849      	ldr	r1, [r1, #4]
 800bbf8:	6923      	ldr	r3, [r4, #16]
 800bbfa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bbfe:	68a3      	ldr	r3, [r4, #8]
 800bc00:	4607      	mov	r7, r0
 800bc02:	4691      	mov	r9, r2
 800bc04:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bc08:	f108 0601 	add.w	r6, r8, #1
 800bc0c:	42b3      	cmp	r3, r6
 800bc0e:	db0b      	blt.n	800bc28 <__lshift+0x38>
 800bc10:	4638      	mov	r0, r7
 800bc12:	f7ff fddb 	bl	800b7cc <_Balloc>
 800bc16:	4605      	mov	r5, r0
 800bc18:	b948      	cbnz	r0, 800bc2e <__lshift+0x3e>
 800bc1a:	4602      	mov	r2, r0
 800bc1c:	4b2a      	ldr	r3, [pc, #168]	; (800bcc8 <__lshift+0xd8>)
 800bc1e:	482b      	ldr	r0, [pc, #172]	; (800bccc <__lshift+0xdc>)
 800bc20:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bc24:	f001 fdb0 	bl	800d788 <__assert_func>
 800bc28:	3101      	adds	r1, #1
 800bc2a:	005b      	lsls	r3, r3, #1
 800bc2c:	e7ee      	b.n	800bc0c <__lshift+0x1c>
 800bc2e:	2300      	movs	r3, #0
 800bc30:	f100 0114 	add.w	r1, r0, #20
 800bc34:	f100 0210 	add.w	r2, r0, #16
 800bc38:	4618      	mov	r0, r3
 800bc3a:	4553      	cmp	r3, sl
 800bc3c:	db37      	blt.n	800bcae <__lshift+0xbe>
 800bc3e:	6920      	ldr	r0, [r4, #16]
 800bc40:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bc44:	f104 0314 	add.w	r3, r4, #20
 800bc48:	f019 091f 	ands.w	r9, r9, #31
 800bc4c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bc50:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800bc54:	d02f      	beq.n	800bcb6 <__lshift+0xc6>
 800bc56:	f1c9 0e20 	rsb	lr, r9, #32
 800bc5a:	468a      	mov	sl, r1
 800bc5c:	f04f 0c00 	mov.w	ip, #0
 800bc60:	681a      	ldr	r2, [r3, #0]
 800bc62:	fa02 f209 	lsl.w	r2, r2, r9
 800bc66:	ea42 020c 	orr.w	r2, r2, ip
 800bc6a:	f84a 2b04 	str.w	r2, [sl], #4
 800bc6e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc72:	4298      	cmp	r0, r3
 800bc74:	fa22 fc0e 	lsr.w	ip, r2, lr
 800bc78:	d8f2      	bhi.n	800bc60 <__lshift+0x70>
 800bc7a:	1b03      	subs	r3, r0, r4
 800bc7c:	3b15      	subs	r3, #21
 800bc7e:	f023 0303 	bic.w	r3, r3, #3
 800bc82:	3304      	adds	r3, #4
 800bc84:	f104 0215 	add.w	r2, r4, #21
 800bc88:	4290      	cmp	r0, r2
 800bc8a:	bf38      	it	cc
 800bc8c:	2304      	movcc	r3, #4
 800bc8e:	f841 c003 	str.w	ip, [r1, r3]
 800bc92:	f1bc 0f00 	cmp.w	ip, #0
 800bc96:	d001      	beq.n	800bc9c <__lshift+0xac>
 800bc98:	f108 0602 	add.w	r6, r8, #2
 800bc9c:	3e01      	subs	r6, #1
 800bc9e:	4638      	mov	r0, r7
 800bca0:	612e      	str	r6, [r5, #16]
 800bca2:	4621      	mov	r1, r4
 800bca4:	f7ff fdd2 	bl	800b84c <_Bfree>
 800bca8:	4628      	mov	r0, r5
 800bcaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcae:	f842 0f04 	str.w	r0, [r2, #4]!
 800bcb2:	3301      	adds	r3, #1
 800bcb4:	e7c1      	b.n	800bc3a <__lshift+0x4a>
 800bcb6:	3904      	subs	r1, #4
 800bcb8:	f853 2b04 	ldr.w	r2, [r3], #4
 800bcbc:	f841 2f04 	str.w	r2, [r1, #4]!
 800bcc0:	4298      	cmp	r0, r3
 800bcc2:	d8f9      	bhi.n	800bcb8 <__lshift+0xc8>
 800bcc4:	e7ea      	b.n	800bc9c <__lshift+0xac>
 800bcc6:	bf00      	nop
 800bcc8:	08012fe9 	.word	0x08012fe9
 800bccc:	08012ffa 	.word	0x08012ffa

0800bcd0 <__mcmp>:
 800bcd0:	b530      	push	{r4, r5, lr}
 800bcd2:	6902      	ldr	r2, [r0, #16]
 800bcd4:	690c      	ldr	r4, [r1, #16]
 800bcd6:	1b12      	subs	r2, r2, r4
 800bcd8:	d10e      	bne.n	800bcf8 <__mcmp+0x28>
 800bcda:	f100 0314 	add.w	r3, r0, #20
 800bcde:	3114      	adds	r1, #20
 800bce0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bce4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bce8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bcec:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bcf0:	42a5      	cmp	r5, r4
 800bcf2:	d003      	beq.n	800bcfc <__mcmp+0x2c>
 800bcf4:	d305      	bcc.n	800bd02 <__mcmp+0x32>
 800bcf6:	2201      	movs	r2, #1
 800bcf8:	4610      	mov	r0, r2
 800bcfa:	bd30      	pop	{r4, r5, pc}
 800bcfc:	4283      	cmp	r3, r0
 800bcfe:	d3f3      	bcc.n	800bce8 <__mcmp+0x18>
 800bd00:	e7fa      	b.n	800bcf8 <__mcmp+0x28>
 800bd02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bd06:	e7f7      	b.n	800bcf8 <__mcmp+0x28>

0800bd08 <__mdiff>:
 800bd08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd0c:	460c      	mov	r4, r1
 800bd0e:	4606      	mov	r6, r0
 800bd10:	4611      	mov	r1, r2
 800bd12:	4620      	mov	r0, r4
 800bd14:	4690      	mov	r8, r2
 800bd16:	f7ff ffdb 	bl	800bcd0 <__mcmp>
 800bd1a:	1e05      	subs	r5, r0, #0
 800bd1c:	d110      	bne.n	800bd40 <__mdiff+0x38>
 800bd1e:	4629      	mov	r1, r5
 800bd20:	4630      	mov	r0, r6
 800bd22:	f7ff fd53 	bl	800b7cc <_Balloc>
 800bd26:	b930      	cbnz	r0, 800bd36 <__mdiff+0x2e>
 800bd28:	4b3a      	ldr	r3, [pc, #232]	; (800be14 <__mdiff+0x10c>)
 800bd2a:	4602      	mov	r2, r0
 800bd2c:	f240 2132 	movw	r1, #562	; 0x232
 800bd30:	4839      	ldr	r0, [pc, #228]	; (800be18 <__mdiff+0x110>)
 800bd32:	f001 fd29 	bl	800d788 <__assert_func>
 800bd36:	2301      	movs	r3, #1
 800bd38:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bd3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd40:	bfa4      	itt	ge
 800bd42:	4643      	movge	r3, r8
 800bd44:	46a0      	movge	r8, r4
 800bd46:	4630      	mov	r0, r6
 800bd48:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bd4c:	bfa6      	itte	ge
 800bd4e:	461c      	movge	r4, r3
 800bd50:	2500      	movge	r5, #0
 800bd52:	2501      	movlt	r5, #1
 800bd54:	f7ff fd3a 	bl	800b7cc <_Balloc>
 800bd58:	b920      	cbnz	r0, 800bd64 <__mdiff+0x5c>
 800bd5a:	4b2e      	ldr	r3, [pc, #184]	; (800be14 <__mdiff+0x10c>)
 800bd5c:	4602      	mov	r2, r0
 800bd5e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bd62:	e7e5      	b.n	800bd30 <__mdiff+0x28>
 800bd64:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bd68:	6926      	ldr	r6, [r4, #16]
 800bd6a:	60c5      	str	r5, [r0, #12]
 800bd6c:	f104 0914 	add.w	r9, r4, #20
 800bd70:	f108 0514 	add.w	r5, r8, #20
 800bd74:	f100 0e14 	add.w	lr, r0, #20
 800bd78:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bd7c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bd80:	f108 0210 	add.w	r2, r8, #16
 800bd84:	46f2      	mov	sl, lr
 800bd86:	2100      	movs	r1, #0
 800bd88:	f859 3b04 	ldr.w	r3, [r9], #4
 800bd8c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bd90:	fa1f f883 	uxth.w	r8, r3
 800bd94:	fa11 f18b 	uxtah	r1, r1, fp
 800bd98:	0c1b      	lsrs	r3, r3, #16
 800bd9a:	eba1 0808 	sub.w	r8, r1, r8
 800bd9e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bda2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bda6:	fa1f f888 	uxth.w	r8, r8
 800bdaa:	1419      	asrs	r1, r3, #16
 800bdac:	454e      	cmp	r6, r9
 800bdae:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bdb2:	f84a 3b04 	str.w	r3, [sl], #4
 800bdb6:	d8e7      	bhi.n	800bd88 <__mdiff+0x80>
 800bdb8:	1b33      	subs	r3, r6, r4
 800bdba:	3b15      	subs	r3, #21
 800bdbc:	f023 0303 	bic.w	r3, r3, #3
 800bdc0:	3304      	adds	r3, #4
 800bdc2:	3415      	adds	r4, #21
 800bdc4:	42a6      	cmp	r6, r4
 800bdc6:	bf38      	it	cc
 800bdc8:	2304      	movcc	r3, #4
 800bdca:	441d      	add	r5, r3
 800bdcc:	4473      	add	r3, lr
 800bdce:	469e      	mov	lr, r3
 800bdd0:	462e      	mov	r6, r5
 800bdd2:	4566      	cmp	r6, ip
 800bdd4:	d30e      	bcc.n	800bdf4 <__mdiff+0xec>
 800bdd6:	f10c 0203 	add.w	r2, ip, #3
 800bdda:	1b52      	subs	r2, r2, r5
 800bddc:	f022 0203 	bic.w	r2, r2, #3
 800bde0:	3d03      	subs	r5, #3
 800bde2:	45ac      	cmp	ip, r5
 800bde4:	bf38      	it	cc
 800bde6:	2200      	movcc	r2, #0
 800bde8:	441a      	add	r2, r3
 800bdea:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800bdee:	b17b      	cbz	r3, 800be10 <__mdiff+0x108>
 800bdf0:	6107      	str	r7, [r0, #16]
 800bdf2:	e7a3      	b.n	800bd3c <__mdiff+0x34>
 800bdf4:	f856 8b04 	ldr.w	r8, [r6], #4
 800bdf8:	fa11 f288 	uxtah	r2, r1, r8
 800bdfc:	1414      	asrs	r4, r2, #16
 800bdfe:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800be02:	b292      	uxth	r2, r2
 800be04:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800be08:	f84e 2b04 	str.w	r2, [lr], #4
 800be0c:	1421      	asrs	r1, r4, #16
 800be0e:	e7e0      	b.n	800bdd2 <__mdiff+0xca>
 800be10:	3f01      	subs	r7, #1
 800be12:	e7ea      	b.n	800bdea <__mdiff+0xe2>
 800be14:	08012fe9 	.word	0x08012fe9
 800be18:	08012ffa 	.word	0x08012ffa

0800be1c <__d2b>:
 800be1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800be20:	4689      	mov	r9, r1
 800be22:	2101      	movs	r1, #1
 800be24:	ec57 6b10 	vmov	r6, r7, d0
 800be28:	4690      	mov	r8, r2
 800be2a:	f7ff fccf 	bl	800b7cc <_Balloc>
 800be2e:	4604      	mov	r4, r0
 800be30:	b930      	cbnz	r0, 800be40 <__d2b+0x24>
 800be32:	4602      	mov	r2, r0
 800be34:	4b25      	ldr	r3, [pc, #148]	; (800becc <__d2b+0xb0>)
 800be36:	4826      	ldr	r0, [pc, #152]	; (800bed0 <__d2b+0xb4>)
 800be38:	f240 310a 	movw	r1, #778	; 0x30a
 800be3c:	f001 fca4 	bl	800d788 <__assert_func>
 800be40:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800be44:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800be48:	bb35      	cbnz	r5, 800be98 <__d2b+0x7c>
 800be4a:	2e00      	cmp	r6, #0
 800be4c:	9301      	str	r3, [sp, #4]
 800be4e:	d028      	beq.n	800bea2 <__d2b+0x86>
 800be50:	4668      	mov	r0, sp
 800be52:	9600      	str	r6, [sp, #0]
 800be54:	f7ff fd82 	bl	800b95c <__lo0bits>
 800be58:	9900      	ldr	r1, [sp, #0]
 800be5a:	b300      	cbz	r0, 800be9e <__d2b+0x82>
 800be5c:	9a01      	ldr	r2, [sp, #4]
 800be5e:	f1c0 0320 	rsb	r3, r0, #32
 800be62:	fa02 f303 	lsl.w	r3, r2, r3
 800be66:	430b      	orrs	r3, r1
 800be68:	40c2      	lsrs	r2, r0
 800be6a:	6163      	str	r3, [r4, #20]
 800be6c:	9201      	str	r2, [sp, #4]
 800be6e:	9b01      	ldr	r3, [sp, #4]
 800be70:	61a3      	str	r3, [r4, #24]
 800be72:	2b00      	cmp	r3, #0
 800be74:	bf14      	ite	ne
 800be76:	2202      	movne	r2, #2
 800be78:	2201      	moveq	r2, #1
 800be7a:	6122      	str	r2, [r4, #16]
 800be7c:	b1d5      	cbz	r5, 800beb4 <__d2b+0x98>
 800be7e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800be82:	4405      	add	r5, r0
 800be84:	f8c9 5000 	str.w	r5, [r9]
 800be88:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800be8c:	f8c8 0000 	str.w	r0, [r8]
 800be90:	4620      	mov	r0, r4
 800be92:	b003      	add	sp, #12
 800be94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800be98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800be9c:	e7d5      	b.n	800be4a <__d2b+0x2e>
 800be9e:	6161      	str	r1, [r4, #20]
 800bea0:	e7e5      	b.n	800be6e <__d2b+0x52>
 800bea2:	a801      	add	r0, sp, #4
 800bea4:	f7ff fd5a 	bl	800b95c <__lo0bits>
 800bea8:	9b01      	ldr	r3, [sp, #4]
 800beaa:	6163      	str	r3, [r4, #20]
 800beac:	2201      	movs	r2, #1
 800beae:	6122      	str	r2, [r4, #16]
 800beb0:	3020      	adds	r0, #32
 800beb2:	e7e3      	b.n	800be7c <__d2b+0x60>
 800beb4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800beb8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bebc:	f8c9 0000 	str.w	r0, [r9]
 800bec0:	6918      	ldr	r0, [r3, #16]
 800bec2:	f7ff fd2b 	bl	800b91c <__hi0bits>
 800bec6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800beca:	e7df      	b.n	800be8c <__d2b+0x70>
 800becc:	08012fe9 	.word	0x08012fe9
 800bed0:	08012ffa 	.word	0x08012ffa

0800bed4 <_calloc_r>:
 800bed4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bed6:	fba1 2402 	umull	r2, r4, r1, r2
 800beda:	b94c      	cbnz	r4, 800bef0 <_calloc_r+0x1c>
 800bedc:	4611      	mov	r1, r2
 800bede:	9201      	str	r2, [sp, #4]
 800bee0:	f7fd fe8a 	bl	8009bf8 <_malloc_r>
 800bee4:	9a01      	ldr	r2, [sp, #4]
 800bee6:	4605      	mov	r5, r0
 800bee8:	b930      	cbnz	r0, 800bef8 <_calloc_r+0x24>
 800beea:	4628      	mov	r0, r5
 800beec:	b003      	add	sp, #12
 800beee:	bd30      	pop	{r4, r5, pc}
 800bef0:	220c      	movs	r2, #12
 800bef2:	6002      	str	r2, [r0, #0]
 800bef4:	2500      	movs	r5, #0
 800bef6:	e7f8      	b.n	800beea <_calloc_r+0x16>
 800bef8:	4621      	mov	r1, r4
 800befa:	f7fd fe09 	bl	8009b10 <memset>
 800befe:	e7f4      	b.n	800beea <_calloc_r+0x16>

0800bf00 <_sungetc_r>:
 800bf00:	b538      	push	{r3, r4, r5, lr}
 800bf02:	1c4b      	adds	r3, r1, #1
 800bf04:	4614      	mov	r4, r2
 800bf06:	d103      	bne.n	800bf10 <_sungetc_r+0x10>
 800bf08:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800bf0c:	4628      	mov	r0, r5
 800bf0e:	bd38      	pop	{r3, r4, r5, pc}
 800bf10:	8993      	ldrh	r3, [r2, #12]
 800bf12:	f023 0320 	bic.w	r3, r3, #32
 800bf16:	8193      	strh	r3, [r2, #12]
 800bf18:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bf1a:	6852      	ldr	r2, [r2, #4]
 800bf1c:	b2cd      	uxtb	r5, r1
 800bf1e:	b18b      	cbz	r3, 800bf44 <_sungetc_r+0x44>
 800bf20:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800bf22:	4293      	cmp	r3, r2
 800bf24:	dd08      	ble.n	800bf38 <_sungetc_r+0x38>
 800bf26:	6823      	ldr	r3, [r4, #0]
 800bf28:	1e5a      	subs	r2, r3, #1
 800bf2a:	6022      	str	r2, [r4, #0]
 800bf2c:	f803 5c01 	strb.w	r5, [r3, #-1]
 800bf30:	6863      	ldr	r3, [r4, #4]
 800bf32:	3301      	adds	r3, #1
 800bf34:	6063      	str	r3, [r4, #4]
 800bf36:	e7e9      	b.n	800bf0c <_sungetc_r+0xc>
 800bf38:	4621      	mov	r1, r4
 800bf3a:	f001 fbd3 	bl	800d6e4 <__submore>
 800bf3e:	2800      	cmp	r0, #0
 800bf40:	d0f1      	beq.n	800bf26 <_sungetc_r+0x26>
 800bf42:	e7e1      	b.n	800bf08 <_sungetc_r+0x8>
 800bf44:	6921      	ldr	r1, [r4, #16]
 800bf46:	6823      	ldr	r3, [r4, #0]
 800bf48:	b151      	cbz	r1, 800bf60 <_sungetc_r+0x60>
 800bf4a:	4299      	cmp	r1, r3
 800bf4c:	d208      	bcs.n	800bf60 <_sungetc_r+0x60>
 800bf4e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800bf52:	42a9      	cmp	r1, r5
 800bf54:	d104      	bne.n	800bf60 <_sungetc_r+0x60>
 800bf56:	3b01      	subs	r3, #1
 800bf58:	3201      	adds	r2, #1
 800bf5a:	6023      	str	r3, [r4, #0]
 800bf5c:	6062      	str	r2, [r4, #4]
 800bf5e:	e7d5      	b.n	800bf0c <_sungetc_r+0xc>
 800bf60:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800bf64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bf68:	6363      	str	r3, [r4, #52]	; 0x34
 800bf6a:	2303      	movs	r3, #3
 800bf6c:	63a3      	str	r3, [r4, #56]	; 0x38
 800bf6e:	4623      	mov	r3, r4
 800bf70:	f803 5f46 	strb.w	r5, [r3, #70]!
 800bf74:	6023      	str	r3, [r4, #0]
 800bf76:	2301      	movs	r3, #1
 800bf78:	e7dc      	b.n	800bf34 <_sungetc_r+0x34>

0800bf7a <__ssrefill_r>:
 800bf7a:	b510      	push	{r4, lr}
 800bf7c:	460c      	mov	r4, r1
 800bf7e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800bf80:	b169      	cbz	r1, 800bf9e <__ssrefill_r+0x24>
 800bf82:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bf86:	4299      	cmp	r1, r3
 800bf88:	d001      	beq.n	800bf8e <__ssrefill_r+0x14>
 800bf8a:	f7fd fdc9 	bl	8009b20 <_free_r>
 800bf8e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bf90:	6063      	str	r3, [r4, #4]
 800bf92:	2000      	movs	r0, #0
 800bf94:	6360      	str	r0, [r4, #52]	; 0x34
 800bf96:	b113      	cbz	r3, 800bf9e <__ssrefill_r+0x24>
 800bf98:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800bf9a:	6023      	str	r3, [r4, #0]
 800bf9c:	bd10      	pop	{r4, pc}
 800bf9e:	6923      	ldr	r3, [r4, #16]
 800bfa0:	6023      	str	r3, [r4, #0]
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	6063      	str	r3, [r4, #4]
 800bfa6:	89a3      	ldrh	r3, [r4, #12]
 800bfa8:	f043 0320 	orr.w	r3, r3, #32
 800bfac:	81a3      	strh	r3, [r4, #12]
 800bfae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bfb2:	e7f3      	b.n	800bf9c <__ssrefill_r+0x22>

0800bfb4 <__ssvfiscanf_r>:
 800bfb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bfb8:	460c      	mov	r4, r1
 800bfba:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800bfbe:	2100      	movs	r1, #0
 800bfc0:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800bfc4:	49a6      	ldr	r1, [pc, #664]	; (800c260 <__ssvfiscanf_r+0x2ac>)
 800bfc6:	91a0      	str	r1, [sp, #640]	; 0x280
 800bfc8:	f10d 0804 	add.w	r8, sp, #4
 800bfcc:	49a5      	ldr	r1, [pc, #660]	; (800c264 <__ssvfiscanf_r+0x2b0>)
 800bfce:	4fa6      	ldr	r7, [pc, #664]	; (800c268 <__ssvfiscanf_r+0x2b4>)
 800bfd0:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800c26c <__ssvfiscanf_r+0x2b8>
 800bfd4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800bfd8:	4606      	mov	r6, r0
 800bfda:	91a1      	str	r1, [sp, #644]	; 0x284
 800bfdc:	9300      	str	r3, [sp, #0]
 800bfde:	7813      	ldrb	r3, [r2, #0]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	f000 815a 	beq.w	800c29a <__ssvfiscanf_r+0x2e6>
 800bfe6:	5dd9      	ldrb	r1, [r3, r7]
 800bfe8:	f011 0108 	ands.w	r1, r1, #8
 800bfec:	f102 0501 	add.w	r5, r2, #1
 800bff0:	d019      	beq.n	800c026 <__ssvfiscanf_r+0x72>
 800bff2:	6863      	ldr	r3, [r4, #4]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	dd0f      	ble.n	800c018 <__ssvfiscanf_r+0x64>
 800bff8:	6823      	ldr	r3, [r4, #0]
 800bffa:	781a      	ldrb	r2, [r3, #0]
 800bffc:	5cba      	ldrb	r2, [r7, r2]
 800bffe:	0712      	lsls	r2, r2, #28
 800c000:	d401      	bmi.n	800c006 <__ssvfiscanf_r+0x52>
 800c002:	462a      	mov	r2, r5
 800c004:	e7eb      	b.n	800bfde <__ssvfiscanf_r+0x2a>
 800c006:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c008:	3201      	adds	r2, #1
 800c00a:	9245      	str	r2, [sp, #276]	; 0x114
 800c00c:	6862      	ldr	r2, [r4, #4]
 800c00e:	3301      	adds	r3, #1
 800c010:	3a01      	subs	r2, #1
 800c012:	6062      	str	r2, [r4, #4]
 800c014:	6023      	str	r3, [r4, #0]
 800c016:	e7ec      	b.n	800bff2 <__ssvfiscanf_r+0x3e>
 800c018:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c01a:	4621      	mov	r1, r4
 800c01c:	4630      	mov	r0, r6
 800c01e:	4798      	blx	r3
 800c020:	2800      	cmp	r0, #0
 800c022:	d0e9      	beq.n	800bff8 <__ssvfiscanf_r+0x44>
 800c024:	e7ed      	b.n	800c002 <__ssvfiscanf_r+0x4e>
 800c026:	2b25      	cmp	r3, #37	; 0x25
 800c028:	d012      	beq.n	800c050 <__ssvfiscanf_r+0x9c>
 800c02a:	469a      	mov	sl, r3
 800c02c:	6863      	ldr	r3, [r4, #4]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	f340 8091 	ble.w	800c156 <__ssvfiscanf_r+0x1a2>
 800c034:	6822      	ldr	r2, [r4, #0]
 800c036:	7813      	ldrb	r3, [r2, #0]
 800c038:	4553      	cmp	r3, sl
 800c03a:	f040 812e 	bne.w	800c29a <__ssvfiscanf_r+0x2e6>
 800c03e:	6863      	ldr	r3, [r4, #4]
 800c040:	3b01      	subs	r3, #1
 800c042:	6063      	str	r3, [r4, #4]
 800c044:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800c046:	3201      	adds	r2, #1
 800c048:	3301      	adds	r3, #1
 800c04a:	6022      	str	r2, [r4, #0]
 800c04c:	9345      	str	r3, [sp, #276]	; 0x114
 800c04e:	e7d8      	b.n	800c002 <__ssvfiscanf_r+0x4e>
 800c050:	9141      	str	r1, [sp, #260]	; 0x104
 800c052:	9143      	str	r1, [sp, #268]	; 0x10c
 800c054:	7853      	ldrb	r3, [r2, #1]
 800c056:	2b2a      	cmp	r3, #42	; 0x2a
 800c058:	bf02      	ittt	eq
 800c05a:	2310      	moveq	r3, #16
 800c05c:	1c95      	addeq	r5, r2, #2
 800c05e:	9341      	streq	r3, [sp, #260]	; 0x104
 800c060:	220a      	movs	r2, #10
 800c062:	46aa      	mov	sl, r5
 800c064:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800c068:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800c06c:	2b09      	cmp	r3, #9
 800c06e:	d91d      	bls.n	800c0ac <__ssvfiscanf_r+0xf8>
 800c070:	487e      	ldr	r0, [pc, #504]	; (800c26c <__ssvfiscanf_r+0x2b8>)
 800c072:	2203      	movs	r2, #3
 800c074:	f7f4 f8c4 	bl	8000200 <memchr>
 800c078:	b140      	cbz	r0, 800c08c <__ssvfiscanf_r+0xd8>
 800c07a:	2301      	movs	r3, #1
 800c07c:	eba0 0009 	sub.w	r0, r0, r9
 800c080:	fa03 f000 	lsl.w	r0, r3, r0
 800c084:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c086:	4318      	orrs	r0, r3
 800c088:	9041      	str	r0, [sp, #260]	; 0x104
 800c08a:	4655      	mov	r5, sl
 800c08c:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c090:	2b78      	cmp	r3, #120	; 0x78
 800c092:	d806      	bhi.n	800c0a2 <__ssvfiscanf_r+0xee>
 800c094:	2b57      	cmp	r3, #87	; 0x57
 800c096:	d810      	bhi.n	800c0ba <__ssvfiscanf_r+0x106>
 800c098:	2b25      	cmp	r3, #37	; 0x25
 800c09a:	d0c6      	beq.n	800c02a <__ssvfiscanf_r+0x76>
 800c09c:	d856      	bhi.n	800c14c <__ssvfiscanf_r+0x198>
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d064      	beq.n	800c16c <__ssvfiscanf_r+0x1b8>
 800c0a2:	2303      	movs	r3, #3
 800c0a4:	9347      	str	r3, [sp, #284]	; 0x11c
 800c0a6:	230a      	movs	r3, #10
 800c0a8:	9342      	str	r3, [sp, #264]	; 0x108
 800c0aa:	e071      	b.n	800c190 <__ssvfiscanf_r+0x1dc>
 800c0ac:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800c0ae:	fb02 1103 	mla	r1, r2, r3, r1
 800c0b2:	3930      	subs	r1, #48	; 0x30
 800c0b4:	9143      	str	r1, [sp, #268]	; 0x10c
 800c0b6:	4655      	mov	r5, sl
 800c0b8:	e7d3      	b.n	800c062 <__ssvfiscanf_r+0xae>
 800c0ba:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800c0be:	2a20      	cmp	r2, #32
 800c0c0:	d8ef      	bhi.n	800c0a2 <__ssvfiscanf_r+0xee>
 800c0c2:	a101      	add	r1, pc, #4	; (adr r1, 800c0c8 <__ssvfiscanf_r+0x114>)
 800c0c4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c0c8:	0800c17b 	.word	0x0800c17b
 800c0cc:	0800c0a3 	.word	0x0800c0a3
 800c0d0:	0800c0a3 	.word	0x0800c0a3
 800c0d4:	0800c1d9 	.word	0x0800c1d9
 800c0d8:	0800c0a3 	.word	0x0800c0a3
 800c0dc:	0800c0a3 	.word	0x0800c0a3
 800c0e0:	0800c0a3 	.word	0x0800c0a3
 800c0e4:	0800c0a3 	.word	0x0800c0a3
 800c0e8:	0800c0a3 	.word	0x0800c0a3
 800c0ec:	0800c0a3 	.word	0x0800c0a3
 800c0f0:	0800c0a3 	.word	0x0800c0a3
 800c0f4:	0800c1ef 	.word	0x0800c1ef
 800c0f8:	0800c1c5 	.word	0x0800c1c5
 800c0fc:	0800c153 	.word	0x0800c153
 800c100:	0800c153 	.word	0x0800c153
 800c104:	0800c153 	.word	0x0800c153
 800c108:	0800c0a3 	.word	0x0800c0a3
 800c10c:	0800c1c9 	.word	0x0800c1c9
 800c110:	0800c0a3 	.word	0x0800c0a3
 800c114:	0800c0a3 	.word	0x0800c0a3
 800c118:	0800c0a3 	.word	0x0800c0a3
 800c11c:	0800c0a3 	.word	0x0800c0a3
 800c120:	0800c1ff 	.word	0x0800c1ff
 800c124:	0800c1d1 	.word	0x0800c1d1
 800c128:	0800c173 	.word	0x0800c173
 800c12c:	0800c0a3 	.word	0x0800c0a3
 800c130:	0800c0a3 	.word	0x0800c0a3
 800c134:	0800c1fb 	.word	0x0800c1fb
 800c138:	0800c0a3 	.word	0x0800c0a3
 800c13c:	0800c1c5 	.word	0x0800c1c5
 800c140:	0800c0a3 	.word	0x0800c0a3
 800c144:	0800c0a3 	.word	0x0800c0a3
 800c148:	0800c17b 	.word	0x0800c17b
 800c14c:	3b45      	subs	r3, #69	; 0x45
 800c14e:	2b02      	cmp	r3, #2
 800c150:	d8a7      	bhi.n	800c0a2 <__ssvfiscanf_r+0xee>
 800c152:	2305      	movs	r3, #5
 800c154:	e01b      	b.n	800c18e <__ssvfiscanf_r+0x1da>
 800c156:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c158:	4621      	mov	r1, r4
 800c15a:	4630      	mov	r0, r6
 800c15c:	4798      	blx	r3
 800c15e:	2800      	cmp	r0, #0
 800c160:	f43f af68 	beq.w	800c034 <__ssvfiscanf_r+0x80>
 800c164:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c166:	2800      	cmp	r0, #0
 800c168:	f040 808d 	bne.w	800c286 <__ssvfiscanf_r+0x2d2>
 800c16c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c170:	e08f      	b.n	800c292 <__ssvfiscanf_r+0x2de>
 800c172:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c174:	f042 0220 	orr.w	r2, r2, #32
 800c178:	9241      	str	r2, [sp, #260]	; 0x104
 800c17a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c17c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c180:	9241      	str	r2, [sp, #260]	; 0x104
 800c182:	2210      	movs	r2, #16
 800c184:	2b6f      	cmp	r3, #111	; 0x6f
 800c186:	9242      	str	r2, [sp, #264]	; 0x108
 800c188:	bf34      	ite	cc
 800c18a:	2303      	movcc	r3, #3
 800c18c:	2304      	movcs	r3, #4
 800c18e:	9347      	str	r3, [sp, #284]	; 0x11c
 800c190:	6863      	ldr	r3, [r4, #4]
 800c192:	2b00      	cmp	r3, #0
 800c194:	dd42      	ble.n	800c21c <__ssvfiscanf_r+0x268>
 800c196:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c198:	0659      	lsls	r1, r3, #25
 800c19a:	d404      	bmi.n	800c1a6 <__ssvfiscanf_r+0x1f2>
 800c19c:	6823      	ldr	r3, [r4, #0]
 800c19e:	781a      	ldrb	r2, [r3, #0]
 800c1a0:	5cba      	ldrb	r2, [r7, r2]
 800c1a2:	0712      	lsls	r2, r2, #28
 800c1a4:	d441      	bmi.n	800c22a <__ssvfiscanf_r+0x276>
 800c1a6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800c1a8:	2b02      	cmp	r3, #2
 800c1aa:	dc50      	bgt.n	800c24e <__ssvfiscanf_r+0x29a>
 800c1ac:	466b      	mov	r3, sp
 800c1ae:	4622      	mov	r2, r4
 800c1b0:	a941      	add	r1, sp, #260	; 0x104
 800c1b2:	4630      	mov	r0, r6
 800c1b4:	f000 f9d0 	bl	800c558 <_scanf_chars>
 800c1b8:	2801      	cmp	r0, #1
 800c1ba:	d06e      	beq.n	800c29a <__ssvfiscanf_r+0x2e6>
 800c1bc:	2802      	cmp	r0, #2
 800c1be:	f47f af20 	bne.w	800c002 <__ssvfiscanf_r+0x4e>
 800c1c2:	e7cf      	b.n	800c164 <__ssvfiscanf_r+0x1b0>
 800c1c4:	220a      	movs	r2, #10
 800c1c6:	e7dd      	b.n	800c184 <__ssvfiscanf_r+0x1d0>
 800c1c8:	2300      	movs	r3, #0
 800c1ca:	9342      	str	r3, [sp, #264]	; 0x108
 800c1cc:	2303      	movs	r3, #3
 800c1ce:	e7de      	b.n	800c18e <__ssvfiscanf_r+0x1da>
 800c1d0:	2308      	movs	r3, #8
 800c1d2:	9342      	str	r3, [sp, #264]	; 0x108
 800c1d4:	2304      	movs	r3, #4
 800c1d6:	e7da      	b.n	800c18e <__ssvfiscanf_r+0x1da>
 800c1d8:	4629      	mov	r1, r5
 800c1da:	4640      	mov	r0, r8
 800c1dc:	f000 fb68 	bl	800c8b0 <__sccl>
 800c1e0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c1e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c1e6:	9341      	str	r3, [sp, #260]	; 0x104
 800c1e8:	4605      	mov	r5, r0
 800c1ea:	2301      	movs	r3, #1
 800c1ec:	e7cf      	b.n	800c18e <__ssvfiscanf_r+0x1da>
 800c1ee:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c1f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c1f4:	9341      	str	r3, [sp, #260]	; 0x104
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	e7c9      	b.n	800c18e <__ssvfiscanf_r+0x1da>
 800c1fa:	2302      	movs	r3, #2
 800c1fc:	e7c7      	b.n	800c18e <__ssvfiscanf_r+0x1da>
 800c1fe:	9841      	ldr	r0, [sp, #260]	; 0x104
 800c200:	06c3      	lsls	r3, r0, #27
 800c202:	f53f aefe 	bmi.w	800c002 <__ssvfiscanf_r+0x4e>
 800c206:	9b00      	ldr	r3, [sp, #0]
 800c208:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c20a:	1d19      	adds	r1, r3, #4
 800c20c:	9100      	str	r1, [sp, #0]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	f010 0f01 	tst.w	r0, #1
 800c214:	bf14      	ite	ne
 800c216:	801a      	strhne	r2, [r3, #0]
 800c218:	601a      	streq	r2, [r3, #0]
 800c21a:	e6f2      	b.n	800c002 <__ssvfiscanf_r+0x4e>
 800c21c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c21e:	4621      	mov	r1, r4
 800c220:	4630      	mov	r0, r6
 800c222:	4798      	blx	r3
 800c224:	2800      	cmp	r0, #0
 800c226:	d0b6      	beq.n	800c196 <__ssvfiscanf_r+0x1e2>
 800c228:	e79c      	b.n	800c164 <__ssvfiscanf_r+0x1b0>
 800c22a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c22c:	3201      	adds	r2, #1
 800c22e:	9245      	str	r2, [sp, #276]	; 0x114
 800c230:	6862      	ldr	r2, [r4, #4]
 800c232:	3a01      	subs	r2, #1
 800c234:	2a00      	cmp	r2, #0
 800c236:	6062      	str	r2, [r4, #4]
 800c238:	dd02      	ble.n	800c240 <__ssvfiscanf_r+0x28c>
 800c23a:	3301      	adds	r3, #1
 800c23c:	6023      	str	r3, [r4, #0]
 800c23e:	e7ad      	b.n	800c19c <__ssvfiscanf_r+0x1e8>
 800c240:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c242:	4621      	mov	r1, r4
 800c244:	4630      	mov	r0, r6
 800c246:	4798      	blx	r3
 800c248:	2800      	cmp	r0, #0
 800c24a:	d0a7      	beq.n	800c19c <__ssvfiscanf_r+0x1e8>
 800c24c:	e78a      	b.n	800c164 <__ssvfiscanf_r+0x1b0>
 800c24e:	2b04      	cmp	r3, #4
 800c250:	dc0e      	bgt.n	800c270 <__ssvfiscanf_r+0x2bc>
 800c252:	466b      	mov	r3, sp
 800c254:	4622      	mov	r2, r4
 800c256:	a941      	add	r1, sp, #260	; 0x104
 800c258:	4630      	mov	r0, r6
 800c25a:	f000 f9d7 	bl	800c60c <_scanf_i>
 800c25e:	e7ab      	b.n	800c1b8 <__ssvfiscanf_r+0x204>
 800c260:	0800bf01 	.word	0x0800bf01
 800c264:	0800bf7b 	.word	0x0800bf7b
 800c268:	08013369 	.word	0x08013369
 800c26c:	08013154 	.word	0x08013154
 800c270:	4b0b      	ldr	r3, [pc, #44]	; (800c2a0 <__ssvfiscanf_r+0x2ec>)
 800c272:	2b00      	cmp	r3, #0
 800c274:	f43f aec5 	beq.w	800c002 <__ssvfiscanf_r+0x4e>
 800c278:	466b      	mov	r3, sp
 800c27a:	4622      	mov	r2, r4
 800c27c:	a941      	add	r1, sp, #260	; 0x104
 800c27e:	4630      	mov	r0, r6
 800c280:	f3af 8000 	nop.w
 800c284:	e798      	b.n	800c1b8 <__ssvfiscanf_r+0x204>
 800c286:	89a3      	ldrh	r3, [r4, #12]
 800c288:	f013 0f40 	tst.w	r3, #64	; 0x40
 800c28c:	bf18      	it	ne
 800c28e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800c292:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800c296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c29a:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c29c:	e7f9      	b.n	800c292 <__ssvfiscanf_r+0x2de>
 800c29e:	bf00      	nop
 800c2a0:	00000000 	.word	0x00000000

0800c2a4 <__sfputc_r>:
 800c2a4:	6893      	ldr	r3, [r2, #8]
 800c2a6:	3b01      	subs	r3, #1
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	b410      	push	{r4}
 800c2ac:	6093      	str	r3, [r2, #8]
 800c2ae:	da08      	bge.n	800c2c2 <__sfputc_r+0x1e>
 800c2b0:	6994      	ldr	r4, [r2, #24]
 800c2b2:	42a3      	cmp	r3, r4
 800c2b4:	db01      	blt.n	800c2ba <__sfputc_r+0x16>
 800c2b6:	290a      	cmp	r1, #10
 800c2b8:	d103      	bne.n	800c2c2 <__sfputc_r+0x1e>
 800c2ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c2be:	f7fe bae5 	b.w	800a88c <__swbuf_r>
 800c2c2:	6813      	ldr	r3, [r2, #0]
 800c2c4:	1c58      	adds	r0, r3, #1
 800c2c6:	6010      	str	r0, [r2, #0]
 800c2c8:	7019      	strb	r1, [r3, #0]
 800c2ca:	4608      	mov	r0, r1
 800c2cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c2d0:	4770      	bx	lr

0800c2d2 <__sfputs_r>:
 800c2d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2d4:	4606      	mov	r6, r0
 800c2d6:	460f      	mov	r7, r1
 800c2d8:	4614      	mov	r4, r2
 800c2da:	18d5      	adds	r5, r2, r3
 800c2dc:	42ac      	cmp	r4, r5
 800c2de:	d101      	bne.n	800c2e4 <__sfputs_r+0x12>
 800c2e0:	2000      	movs	r0, #0
 800c2e2:	e007      	b.n	800c2f4 <__sfputs_r+0x22>
 800c2e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2e8:	463a      	mov	r2, r7
 800c2ea:	4630      	mov	r0, r6
 800c2ec:	f7ff ffda 	bl	800c2a4 <__sfputc_r>
 800c2f0:	1c43      	adds	r3, r0, #1
 800c2f2:	d1f3      	bne.n	800c2dc <__sfputs_r+0xa>
 800c2f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c2f8 <_vfiprintf_r>:
 800c2f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2fc:	460d      	mov	r5, r1
 800c2fe:	b09d      	sub	sp, #116	; 0x74
 800c300:	4614      	mov	r4, r2
 800c302:	4698      	mov	r8, r3
 800c304:	4606      	mov	r6, r0
 800c306:	b118      	cbz	r0, 800c310 <_vfiprintf_r+0x18>
 800c308:	6983      	ldr	r3, [r0, #24]
 800c30a:	b90b      	cbnz	r3, 800c310 <_vfiprintf_r+0x18>
 800c30c:	f7fd fab8 	bl	8009880 <__sinit>
 800c310:	4b89      	ldr	r3, [pc, #548]	; (800c538 <_vfiprintf_r+0x240>)
 800c312:	429d      	cmp	r5, r3
 800c314:	d11b      	bne.n	800c34e <_vfiprintf_r+0x56>
 800c316:	6875      	ldr	r5, [r6, #4]
 800c318:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c31a:	07d9      	lsls	r1, r3, #31
 800c31c:	d405      	bmi.n	800c32a <_vfiprintf_r+0x32>
 800c31e:	89ab      	ldrh	r3, [r5, #12]
 800c320:	059a      	lsls	r2, r3, #22
 800c322:	d402      	bmi.n	800c32a <_vfiprintf_r+0x32>
 800c324:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c326:	f7fd fb6e 	bl	8009a06 <__retarget_lock_acquire_recursive>
 800c32a:	89ab      	ldrh	r3, [r5, #12]
 800c32c:	071b      	lsls	r3, r3, #28
 800c32e:	d501      	bpl.n	800c334 <_vfiprintf_r+0x3c>
 800c330:	692b      	ldr	r3, [r5, #16]
 800c332:	b9eb      	cbnz	r3, 800c370 <_vfiprintf_r+0x78>
 800c334:	4629      	mov	r1, r5
 800c336:	4630      	mov	r0, r6
 800c338:	f7fe fb0c 	bl	800a954 <__swsetup_r>
 800c33c:	b1c0      	cbz	r0, 800c370 <_vfiprintf_r+0x78>
 800c33e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c340:	07dc      	lsls	r4, r3, #31
 800c342:	d50e      	bpl.n	800c362 <_vfiprintf_r+0x6a>
 800c344:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c348:	b01d      	add	sp, #116	; 0x74
 800c34a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c34e:	4b7b      	ldr	r3, [pc, #492]	; (800c53c <_vfiprintf_r+0x244>)
 800c350:	429d      	cmp	r5, r3
 800c352:	d101      	bne.n	800c358 <_vfiprintf_r+0x60>
 800c354:	68b5      	ldr	r5, [r6, #8]
 800c356:	e7df      	b.n	800c318 <_vfiprintf_r+0x20>
 800c358:	4b79      	ldr	r3, [pc, #484]	; (800c540 <_vfiprintf_r+0x248>)
 800c35a:	429d      	cmp	r5, r3
 800c35c:	bf08      	it	eq
 800c35e:	68f5      	ldreq	r5, [r6, #12]
 800c360:	e7da      	b.n	800c318 <_vfiprintf_r+0x20>
 800c362:	89ab      	ldrh	r3, [r5, #12]
 800c364:	0598      	lsls	r0, r3, #22
 800c366:	d4ed      	bmi.n	800c344 <_vfiprintf_r+0x4c>
 800c368:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c36a:	f7fd fb4d 	bl	8009a08 <__retarget_lock_release_recursive>
 800c36e:	e7e9      	b.n	800c344 <_vfiprintf_r+0x4c>
 800c370:	2300      	movs	r3, #0
 800c372:	9309      	str	r3, [sp, #36]	; 0x24
 800c374:	2320      	movs	r3, #32
 800c376:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c37a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c37e:	2330      	movs	r3, #48	; 0x30
 800c380:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c544 <_vfiprintf_r+0x24c>
 800c384:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c388:	f04f 0901 	mov.w	r9, #1
 800c38c:	4623      	mov	r3, r4
 800c38e:	469a      	mov	sl, r3
 800c390:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c394:	b10a      	cbz	r2, 800c39a <_vfiprintf_r+0xa2>
 800c396:	2a25      	cmp	r2, #37	; 0x25
 800c398:	d1f9      	bne.n	800c38e <_vfiprintf_r+0x96>
 800c39a:	ebba 0b04 	subs.w	fp, sl, r4
 800c39e:	d00b      	beq.n	800c3b8 <_vfiprintf_r+0xc0>
 800c3a0:	465b      	mov	r3, fp
 800c3a2:	4622      	mov	r2, r4
 800c3a4:	4629      	mov	r1, r5
 800c3a6:	4630      	mov	r0, r6
 800c3a8:	f7ff ff93 	bl	800c2d2 <__sfputs_r>
 800c3ac:	3001      	adds	r0, #1
 800c3ae:	f000 80aa 	beq.w	800c506 <_vfiprintf_r+0x20e>
 800c3b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c3b4:	445a      	add	r2, fp
 800c3b6:	9209      	str	r2, [sp, #36]	; 0x24
 800c3b8:	f89a 3000 	ldrb.w	r3, [sl]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	f000 80a2 	beq.w	800c506 <_vfiprintf_r+0x20e>
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c3c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c3cc:	f10a 0a01 	add.w	sl, sl, #1
 800c3d0:	9304      	str	r3, [sp, #16]
 800c3d2:	9307      	str	r3, [sp, #28]
 800c3d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c3d8:	931a      	str	r3, [sp, #104]	; 0x68
 800c3da:	4654      	mov	r4, sl
 800c3dc:	2205      	movs	r2, #5
 800c3de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3e2:	4858      	ldr	r0, [pc, #352]	; (800c544 <_vfiprintf_r+0x24c>)
 800c3e4:	f7f3 ff0c 	bl	8000200 <memchr>
 800c3e8:	9a04      	ldr	r2, [sp, #16]
 800c3ea:	b9d8      	cbnz	r0, 800c424 <_vfiprintf_r+0x12c>
 800c3ec:	06d1      	lsls	r1, r2, #27
 800c3ee:	bf44      	itt	mi
 800c3f0:	2320      	movmi	r3, #32
 800c3f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c3f6:	0713      	lsls	r3, r2, #28
 800c3f8:	bf44      	itt	mi
 800c3fa:	232b      	movmi	r3, #43	; 0x2b
 800c3fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c400:	f89a 3000 	ldrb.w	r3, [sl]
 800c404:	2b2a      	cmp	r3, #42	; 0x2a
 800c406:	d015      	beq.n	800c434 <_vfiprintf_r+0x13c>
 800c408:	9a07      	ldr	r2, [sp, #28]
 800c40a:	4654      	mov	r4, sl
 800c40c:	2000      	movs	r0, #0
 800c40e:	f04f 0c0a 	mov.w	ip, #10
 800c412:	4621      	mov	r1, r4
 800c414:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c418:	3b30      	subs	r3, #48	; 0x30
 800c41a:	2b09      	cmp	r3, #9
 800c41c:	d94e      	bls.n	800c4bc <_vfiprintf_r+0x1c4>
 800c41e:	b1b0      	cbz	r0, 800c44e <_vfiprintf_r+0x156>
 800c420:	9207      	str	r2, [sp, #28]
 800c422:	e014      	b.n	800c44e <_vfiprintf_r+0x156>
 800c424:	eba0 0308 	sub.w	r3, r0, r8
 800c428:	fa09 f303 	lsl.w	r3, r9, r3
 800c42c:	4313      	orrs	r3, r2
 800c42e:	9304      	str	r3, [sp, #16]
 800c430:	46a2      	mov	sl, r4
 800c432:	e7d2      	b.n	800c3da <_vfiprintf_r+0xe2>
 800c434:	9b03      	ldr	r3, [sp, #12]
 800c436:	1d19      	adds	r1, r3, #4
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	9103      	str	r1, [sp, #12]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	bfbb      	ittet	lt
 800c440:	425b      	neglt	r3, r3
 800c442:	f042 0202 	orrlt.w	r2, r2, #2
 800c446:	9307      	strge	r3, [sp, #28]
 800c448:	9307      	strlt	r3, [sp, #28]
 800c44a:	bfb8      	it	lt
 800c44c:	9204      	strlt	r2, [sp, #16]
 800c44e:	7823      	ldrb	r3, [r4, #0]
 800c450:	2b2e      	cmp	r3, #46	; 0x2e
 800c452:	d10c      	bne.n	800c46e <_vfiprintf_r+0x176>
 800c454:	7863      	ldrb	r3, [r4, #1]
 800c456:	2b2a      	cmp	r3, #42	; 0x2a
 800c458:	d135      	bne.n	800c4c6 <_vfiprintf_r+0x1ce>
 800c45a:	9b03      	ldr	r3, [sp, #12]
 800c45c:	1d1a      	adds	r2, r3, #4
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	9203      	str	r2, [sp, #12]
 800c462:	2b00      	cmp	r3, #0
 800c464:	bfb8      	it	lt
 800c466:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c46a:	3402      	adds	r4, #2
 800c46c:	9305      	str	r3, [sp, #20]
 800c46e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c554 <_vfiprintf_r+0x25c>
 800c472:	7821      	ldrb	r1, [r4, #0]
 800c474:	2203      	movs	r2, #3
 800c476:	4650      	mov	r0, sl
 800c478:	f7f3 fec2 	bl	8000200 <memchr>
 800c47c:	b140      	cbz	r0, 800c490 <_vfiprintf_r+0x198>
 800c47e:	2340      	movs	r3, #64	; 0x40
 800c480:	eba0 000a 	sub.w	r0, r0, sl
 800c484:	fa03 f000 	lsl.w	r0, r3, r0
 800c488:	9b04      	ldr	r3, [sp, #16]
 800c48a:	4303      	orrs	r3, r0
 800c48c:	3401      	adds	r4, #1
 800c48e:	9304      	str	r3, [sp, #16]
 800c490:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c494:	482c      	ldr	r0, [pc, #176]	; (800c548 <_vfiprintf_r+0x250>)
 800c496:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c49a:	2206      	movs	r2, #6
 800c49c:	f7f3 feb0 	bl	8000200 <memchr>
 800c4a0:	2800      	cmp	r0, #0
 800c4a2:	d03f      	beq.n	800c524 <_vfiprintf_r+0x22c>
 800c4a4:	4b29      	ldr	r3, [pc, #164]	; (800c54c <_vfiprintf_r+0x254>)
 800c4a6:	bb1b      	cbnz	r3, 800c4f0 <_vfiprintf_r+0x1f8>
 800c4a8:	9b03      	ldr	r3, [sp, #12]
 800c4aa:	3307      	adds	r3, #7
 800c4ac:	f023 0307 	bic.w	r3, r3, #7
 800c4b0:	3308      	adds	r3, #8
 800c4b2:	9303      	str	r3, [sp, #12]
 800c4b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4b6:	443b      	add	r3, r7
 800c4b8:	9309      	str	r3, [sp, #36]	; 0x24
 800c4ba:	e767      	b.n	800c38c <_vfiprintf_r+0x94>
 800c4bc:	fb0c 3202 	mla	r2, ip, r2, r3
 800c4c0:	460c      	mov	r4, r1
 800c4c2:	2001      	movs	r0, #1
 800c4c4:	e7a5      	b.n	800c412 <_vfiprintf_r+0x11a>
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	3401      	adds	r4, #1
 800c4ca:	9305      	str	r3, [sp, #20]
 800c4cc:	4619      	mov	r1, r3
 800c4ce:	f04f 0c0a 	mov.w	ip, #10
 800c4d2:	4620      	mov	r0, r4
 800c4d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c4d8:	3a30      	subs	r2, #48	; 0x30
 800c4da:	2a09      	cmp	r2, #9
 800c4dc:	d903      	bls.n	800c4e6 <_vfiprintf_r+0x1ee>
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d0c5      	beq.n	800c46e <_vfiprintf_r+0x176>
 800c4e2:	9105      	str	r1, [sp, #20]
 800c4e4:	e7c3      	b.n	800c46e <_vfiprintf_r+0x176>
 800c4e6:	fb0c 2101 	mla	r1, ip, r1, r2
 800c4ea:	4604      	mov	r4, r0
 800c4ec:	2301      	movs	r3, #1
 800c4ee:	e7f0      	b.n	800c4d2 <_vfiprintf_r+0x1da>
 800c4f0:	ab03      	add	r3, sp, #12
 800c4f2:	9300      	str	r3, [sp, #0]
 800c4f4:	462a      	mov	r2, r5
 800c4f6:	4b16      	ldr	r3, [pc, #88]	; (800c550 <_vfiprintf_r+0x258>)
 800c4f8:	a904      	add	r1, sp, #16
 800c4fa:	4630      	mov	r0, r6
 800c4fc:	f7fd fc90 	bl	8009e20 <_printf_float>
 800c500:	4607      	mov	r7, r0
 800c502:	1c78      	adds	r0, r7, #1
 800c504:	d1d6      	bne.n	800c4b4 <_vfiprintf_r+0x1bc>
 800c506:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c508:	07d9      	lsls	r1, r3, #31
 800c50a:	d405      	bmi.n	800c518 <_vfiprintf_r+0x220>
 800c50c:	89ab      	ldrh	r3, [r5, #12]
 800c50e:	059a      	lsls	r2, r3, #22
 800c510:	d402      	bmi.n	800c518 <_vfiprintf_r+0x220>
 800c512:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c514:	f7fd fa78 	bl	8009a08 <__retarget_lock_release_recursive>
 800c518:	89ab      	ldrh	r3, [r5, #12]
 800c51a:	065b      	lsls	r3, r3, #25
 800c51c:	f53f af12 	bmi.w	800c344 <_vfiprintf_r+0x4c>
 800c520:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c522:	e711      	b.n	800c348 <_vfiprintf_r+0x50>
 800c524:	ab03      	add	r3, sp, #12
 800c526:	9300      	str	r3, [sp, #0]
 800c528:	462a      	mov	r2, r5
 800c52a:	4b09      	ldr	r3, [pc, #36]	; (800c550 <_vfiprintf_r+0x258>)
 800c52c:	a904      	add	r1, sp, #16
 800c52e:	4630      	mov	r0, r6
 800c530:	f7fd ff1a 	bl	800a368 <_printf_i>
 800c534:	e7e4      	b.n	800c500 <_vfiprintf_r+0x208>
 800c536:	bf00      	nop
 800c538:	08012ef4 	.word	0x08012ef4
 800c53c:	08012f14 	.word	0x08012f14
 800c540:	08012ed4 	.word	0x08012ed4
 800c544:	08013158 	.word	0x08013158
 800c548:	0801315e 	.word	0x0801315e
 800c54c:	08009e21 	.word	0x08009e21
 800c550:	0800c2d3 	.word	0x0800c2d3
 800c554:	08013154 	.word	0x08013154

0800c558 <_scanf_chars>:
 800c558:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c55c:	4615      	mov	r5, r2
 800c55e:	688a      	ldr	r2, [r1, #8]
 800c560:	4680      	mov	r8, r0
 800c562:	460c      	mov	r4, r1
 800c564:	b932      	cbnz	r2, 800c574 <_scanf_chars+0x1c>
 800c566:	698a      	ldr	r2, [r1, #24]
 800c568:	2a00      	cmp	r2, #0
 800c56a:	bf0c      	ite	eq
 800c56c:	2201      	moveq	r2, #1
 800c56e:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 800c572:	608a      	str	r2, [r1, #8]
 800c574:	6822      	ldr	r2, [r4, #0]
 800c576:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800c608 <_scanf_chars+0xb0>
 800c57a:	06d1      	lsls	r1, r2, #27
 800c57c:	bf5f      	itttt	pl
 800c57e:	681a      	ldrpl	r2, [r3, #0]
 800c580:	1d11      	addpl	r1, r2, #4
 800c582:	6019      	strpl	r1, [r3, #0]
 800c584:	6816      	ldrpl	r6, [r2, #0]
 800c586:	2700      	movs	r7, #0
 800c588:	69a0      	ldr	r0, [r4, #24]
 800c58a:	b188      	cbz	r0, 800c5b0 <_scanf_chars+0x58>
 800c58c:	2801      	cmp	r0, #1
 800c58e:	d107      	bne.n	800c5a0 <_scanf_chars+0x48>
 800c590:	682a      	ldr	r2, [r5, #0]
 800c592:	7811      	ldrb	r1, [r2, #0]
 800c594:	6962      	ldr	r2, [r4, #20]
 800c596:	5c52      	ldrb	r2, [r2, r1]
 800c598:	b952      	cbnz	r2, 800c5b0 <_scanf_chars+0x58>
 800c59a:	2f00      	cmp	r7, #0
 800c59c:	d031      	beq.n	800c602 <_scanf_chars+0xaa>
 800c59e:	e022      	b.n	800c5e6 <_scanf_chars+0x8e>
 800c5a0:	2802      	cmp	r0, #2
 800c5a2:	d120      	bne.n	800c5e6 <_scanf_chars+0x8e>
 800c5a4:	682b      	ldr	r3, [r5, #0]
 800c5a6:	781b      	ldrb	r3, [r3, #0]
 800c5a8:	f813 3009 	ldrb.w	r3, [r3, r9]
 800c5ac:	071b      	lsls	r3, r3, #28
 800c5ae:	d41a      	bmi.n	800c5e6 <_scanf_chars+0x8e>
 800c5b0:	6823      	ldr	r3, [r4, #0]
 800c5b2:	06da      	lsls	r2, r3, #27
 800c5b4:	bf5e      	ittt	pl
 800c5b6:	682b      	ldrpl	r3, [r5, #0]
 800c5b8:	781b      	ldrbpl	r3, [r3, #0]
 800c5ba:	f806 3b01 	strbpl.w	r3, [r6], #1
 800c5be:	682a      	ldr	r2, [r5, #0]
 800c5c0:	686b      	ldr	r3, [r5, #4]
 800c5c2:	3201      	adds	r2, #1
 800c5c4:	602a      	str	r2, [r5, #0]
 800c5c6:	68a2      	ldr	r2, [r4, #8]
 800c5c8:	3b01      	subs	r3, #1
 800c5ca:	3a01      	subs	r2, #1
 800c5cc:	606b      	str	r3, [r5, #4]
 800c5ce:	3701      	adds	r7, #1
 800c5d0:	60a2      	str	r2, [r4, #8]
 800c5d2:	b142      	cbz	r2, 800c5e6 <_scanf_chars+0x8e>
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	dcd7      	bgt.n	800c588 <_scanf_chars+0x30>
 800c5d8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c5dc:	4629      	mov	r1, r5
 800c5de:	4640      	mov	r0, r8
 800c5e0:	4798      	blx	r3
 800c5e2:	2800      	cmp	r0, #0
 800c5e4:	d0d0      	beq.n	800c588 <_scanf_chars+0x30>
 800c5e6:	6823      	ldr	r3, [r4, #0]
 800c5e8:	f013 0310 	ands.w	r3, r3, #16
 800c5ec:	d105      	bne.n	800c5fa <_scanf_chars+0xa2>
 800c5ee:	68e2      	ldr	r2, [r4, #12]
 800c5f0:	3201      	adds	r2, #1
 800c5f2:	60e2      	str	r2, [r4, #12]
 800c5f4:	69a2      	ldr	r2, [r4, #24]
 800c5f6:	b102      	cbz	r2, 800c5fa <_scanf_chars+0xa2>
 800c5f8:	7033      	strb	r3, [r6, #0]
 800c5fa:	6923      	ldr	r3, [r4, #16]
 800c5fc:	443b      	add	r3, r7
 800c5fe:	6123      	str	r3, [r4, #16]
 800c600:	2000      	movs	r0, #0
 800c602:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c606:	bf00      	nop
 800c608:	08013369 	.word	0x08013369

0800c60c <_scanf_i>:
 800c60c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c610:	4698      	mov	r8, r3
 800c612:	4b76      	ldr	r3, [pc, #472]	; (800c7ec <_scanf_i+0x1e0>)
 800c614:	460c      	mov	r4, r1
 800c616:	4682      	mov	sl, r0
 800c618:	4616      	mov	r6, r2
 800c61a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c61e:	b087      	sub	sp, #28
 800c620:	ab03      	add	r3, sp, #12
 800c622:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c626:	4b72      	ldr	r3, [pc, #456]	; (800c7f0 <_scanf_i+0x1e4>)
 800c628:	69a1      	ldr	r1, [r4, #24]
 800c62a:	4a72      	ldr	r2, [pc, #456]	; (800c7f4 <_scanf_i+0x1e8>)
 800c62c:	2903      	cmp	r1, #3
 800c62e:	bf18      	it	ne
 800c630:	461a      	movne	r2, r3
 800c632:	68a3      	ldr	r3, [r4, #8]
 800c634:	9201      	str	r2, [sp, #4]
 800c636:	1e5a      	subs	r2, r3, #1
 800c638:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c63c:	bf88      	it	hi
 800c63e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c642:	4627      	mov	r7, r4
 800c644:	bf82      	ittt	hi
 800c646:	eb03 0905 	addhi.w	r9, r3, r5
 800c64a:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c64e:	60a3      	strhi	r3, [r4, #8]
 800c650:	f857 3b1c 	ldr.w	r3, [r7], #28
 800c654:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800c658:	bf98      	it	ls
 800c65a:	f04f 0900 	movls.w	r9, #0
 800c65e:	6023      	str	r3, [r4, #0]
 800c660:	463d      	mov	r5, r7
 800c662:	f04f 0b00 	mov.w	fp, #0
 800c666:	6831      	ldr	r1, [r6, #0]
 800c668:	ab03      	add	r3, sp, #12
 800c66a:	7809      	ldrb	r1, [r1, #0]
 800c66c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800c670:	2202      	movs	r2, #2
 800c672:	f7f3 fdc5 	bl	8000200 <memchr>
 800c676:	b328      	cbz	r0, 800c6c4 <_scanf_i+0xb8>
 800c678:	f1bb 0f01 	cmp.w	fp, #1
 800c67c:	d159      	bne.n	800c732 <_scanf_i+0x126>
 800c67e:	6862      	ldr	r2, [r4, #4]
 800c680:	b92a      	cbnz	r2, 800c68e <_scanf_i+0x82>
 800c682:	6822      	ldr	r2, [r4, #0]
 800c684:	2308      	movs	r3, #8
 800c686:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c68a:	6063      	str	r3, [r4, #4]
 800c68c:	6022      	str	r2, [r4, #0]
 800c68e:	6822      	ldr	r2, [r4, #0]
 800c690:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800c694:	6022      	str	r2, [r4, #0]
 800c696:	68a2      	ldr	r2, [r4, #8]
 800c698:	1e51      	subs	r1, r2, #1
 800c69a:	60a1      	str	r1, [r4, #8]
 800c69c:	b192      	cbz	r2, 800c6c4 <_scanf_i+0xb8>
 800c69e:	6832      	ldr	r2, [r6, #0]
 800c6a0:	1c51      	adds	r1, r2, #1
 800c6a2:	6031      	str	r1, [r6, #0]
 800c6a4:	7812      	ldrb	r2, [r2, #0]
 800c6a6:	f805 2b01 	strb.w	r2, [r5], #1
 800c6aa:	6872      	ldr	r2, [r6, #4]
 800c6ac:	3a01      	subs	r2, #1
 800c6ae:	2a00      	cmp	r2, #0
 800c6b0:	6072      	str	r2, [r6, #4]
 800c6b2:	dc07      	bgt.n	800c6c4 <_scanf_i+0xb8>
 800c6b4:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800c6b8:	4631      	mov	r1, r6
 800c6ba:	4650      	mov	r0, sl
 800c6bc:	4790      	blx	r2
 800c6be:	2800      	cmp	r0, #0
 800c6c0:	f040 8085 	bne.w	800c7ce <_scanf_i+0x1c2>
 800c6c4:	f10b 0b01 	add.w	fp, fp, #1
 800c6c8:	f1bb 0f03 	cmp.w	fp, #3
 800c6cc:	d1cb      	bne.n	800c666 <_scanf_i+0x5a>
 800c6ce:	6863      	ldr	r3, [r4, #4]
 800c6d0:	b90b      	cbnz	r3, 800c6d6 <_scanf_i+0xca>
 800c6d2:	230a      	movs	r3, #10
 800c6d4:	6063      	str	r3, [r4, #4]
 800c6d6:	6863      	ldr	r3, [r4, #4]
 800c6d8:	4947      	ldr	r1, [pc, #284]	; (800c7f8 <_scanf_i+0x1ec>)
 800c6da:	6960      	ldr	r0, [r4, #20]
 800c6dc:	1ac9      	subs	r1, r1, r3
 800c6de:	f000 f8e7 	bl	800c8b0 <__sccl>
 800c6e2:	f04f 0b00 	mov.w	fp, #0
 800c6e6:	68a3      	ldr	r3, [r4, #8]
 800c6e8:	6822      	ldr	r2, [r4, #0]
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d03d      	beq.n	800c76a <_scanf_i+0x15e>
 800c6ee:	6831      	ldr	r1, [r6, #0]
 800c6f0:	6960      	ldr	r0, [r4, #20]
 800c6f2:	f891 c000 	ldrb.w	ip, [r1]
 800c6f6:	f810 000c 	ldrb.w	r0, [r0, ip]
 800c6fa:	2800      	cmp	r0, #0
 800c6fc:	d035      	beq.n	800c76a <_scanf_i+0x15e>
 800c6fe:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800c702:	d124      	bne.n	800c74e <_scanf_i+0x142>
 800c704:	0510      	lsls	r0, r2, #20
 800c706:	d522      	bpl.n	800c74e <_scanf_i+0x142>
 800c708:	f10b 0b01 	add.w	fp, fp, #1
 800c70c:	f1b9 0f00 	cmp.w	r9, #0
 800c710:	d003      	beq.n	800c71a <_scanf_i+0x10e>
 800c712:	3301      	adds	r3, #1
 800c714:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800c718:	60a3      	str	r3, [r4, #8]
 800c71a:	6873      	ldr	r3, [r6, #4]
 800c71c:	3b01      	subs	r3, #1
 800c71e:	2b00      	cmp	r3, #0
 800c720:	6073      	str	r3, [r6, #4]
 800c722:	dd1b      	ble.n	800c75c <_scanf_i+0x150>
 800c724:	6833      	ldr	r3, [r6, #0]
 800c726:	3301      	adds	r3, #1
 800c728:	6033      	str	r3, [r6, #0]
 800c72a:	68a3      	ldr	r3, [r4, #8]
 800c72c:	3b01      	subs	r3, #1
 800c72e:	60a3      	str	r3, [r4, #8]
 800c730:	e7d9      	b.n	800c6e6 <_scanf_i+0xda>
 800c732:	f1bb 0f02 	cmp.w	fp, #2
 800c736:	d1ae      	bne.n	800c696 <_scanf_i+0x8a>
 800c738:	6822      	ldr	r2, [r4, #0]
 800c73a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800c73e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800c742:	d1bf      	bne.n	800c6c4 <_scanf_i+0xb8>
 800c744:	2310      	movs	r3, #16
 800c746:	6063      	str	r3, [r4, #4]
 800c748:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c74c:	e7a2      	b.n	800c694 <_scanf_i+0x88>
 800c74e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800c752:	6022      	str	r2, [r4, #0]
 800c754:	780b      	ldrb	r3, [r1, #0]
 800c756:	f805 3b01 	strb.w	r3, [r5], #1
 800c75a:	e7de      	b.n	800c71a <_scanf_i+0x10e>
 800c75c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c760:	4631      	mov	r1, r6
 800c762:	4650      	mov	r0, sl
 800c764:	4798      	blx	r3
 800c766:	2800      	cmp	r0, #0
 800c768:	d0df      	beq.n	800c72a <_scanf_i+0x11e>
 800c76a:	6823      	ldr	r3, [r4, #0]
 800c76c:	05db      	lsls	r3, r3, #23
 800c76e:	d50d      	bpl.n	800c78c <_scanf_i+0x180>
 800c770:	42bd      	cmp	r5, r7
 800c772:	d909      	bls.n	800c788 <_scanf_i+0x17c>
 800c774:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800c778:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c77c:	4632      	mov	r2, r6
 800c77e:	4650      	mov	r0, sl
 800c780:	4798      	blx	r3
 800c782:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800c786:	464d      	mov	r5, r9
 800c788:	42bd      	cmp	r5, r7
 800c78a:	d02d      	beq.n	800c7e8 <_scanf_i+0x1dc>
 800c78c:	6822      	ldr	r2, [r4, #0]
 800c78e:	f012 0210 	ands.w	r2, r2, #16
 800c792:	d113      	bne.n	800c7bc <_scanf_i+0x1b0>
 800c794:	702a      	strb	r2, [r5, #0]
 800c796:	6863      	ldr	r3, [r4, #4]
 800c798:	9e01      	ldr	r6, [sp, #4]
 800c79a:	4639      	mov	r1, r7
 800c79c:	4650      	mov	r0, sl
 800c79e:	47b0      	blx	r6
 800c7a0:	6821      	ldr	r1, [r4, #0]
 800c7a2:	f8d8 3000 	ldr.w	r3, [r8]
 800c7a6:	f011 0f20 	tst.w	r1, #32
 800c7aa:	d013      	beq.n	800c7d4 <_scanf_i+0x1c8>
 800c7ac:	1d1a      	adds	r2, r3, #4
 800c7ae:	f8c8 2000 	str.w	r2, [r8]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	6018      	str	r0, [r3, #0]
 800c7b6:	68e3      	ldr	r3, [r4, #12]
 800c7b8:	3301      	adds	r3, #1
 800c7ba:	60e3      	str	r3, [r4, #12]
 800c7bc:	1bed      	subs	r5, r5, r7
 800c7be:	44ab      	add	fp, r5
 800c7c0:	6925      	ldr	r5, [r4, #16]
 800c7c2:	445d      	add	r5, fp
 800c7c4:	6125      	str	r5, [r4, #16]
 800c7c6:	2000      	movs	r0, #0
 800c7c8:	b007      	add	sp, #28
 800c7ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7ce:	f04f 0b00 	mov.w	fp, #0
 800c7d2:	e7ca      	b.n	800c76a <_scanf_i+0x15e>
 800c7d4:	1d1a      	adds	r2, r3, #4
 800c7d6:	f8c8 2000 	str.w	r2, [r8]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	f011 0f01 	tst.w	r1, #1
 800c7e0:	bf14      	ite	ne
 800c7e2:	8018      	strhne	r0, [r3, #0]
 800c7e4:	6018      	streq	r0, [r3, #0]
 800c7e6:	e7e6      	b.n	800c7b6 <_scanf_i+0x1aa>
 800c7e8:	2001      	movs	r0, #1
 800c7ea:	e7ed      	b.n	800c7c8 <_scanf_i+0x1bc>
 800c7ec:	0800f0b0 	.word	0x0800f0b0
 800c7f0:	0800cb0d 	.word	0x0800cb0d
 800c7f4:	0800ca25 	.word	0x0800ca25
 800c7f8:	0801317e 	.word	0x0801317e

0800c7fc <_putc_r>:
 800c7fc:	b570      	push	{r4, r5, r6, lr}
 800c7fe:	460d      	mov	r5, r1
 800c800:	4614      	mov	r4, r2
 800c802:	4606      	mov	r6, r0
 800c804:	b118      	cbz	r0, 800c80e <_putc_r+0x12>
 800c806:	6983      	ldr	r3, [r0, #24]
 800c808:	b90b      	cbnz	r3, 800c80e <_putc_r+0x12>
 800c80a:	f7fd f839 	bl	8009880 <__sinit>
 800c80e:	4b1c      	ldr	r3, [pc, #112]	; (800c880 <_putc_r+0x84>)
 800c810:	429c      	cmp	r4, r3
 800c812:	d124      	bne.n	800c85e <_putc_r+0x62>
 800c814:	6874      	ldr	r4, [r6, #4]
 800c816:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c818:	07d8      	lsls	r0, r3, #31
 800c81a:	d405      	bmi.n	800c828 <_putc_r+0x2c>
 800c81c:	89a3      	ldrh	r3, [r4, #12]
 800c81e:	0599      	lsls	r1, r3, #22
 800c820:	d402      	bmi.n	800c828 <_putc_r+0x2c>
 800c822:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c824:	f7fd f8ef 	bl	8009a06 <__retarget_lock_acquire_recursive>
 800c828:	68a3      	ldr	r3, [r4, #8]
 800c82a:	3b01      	subs	r3, #1
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	60a3      	str	r3, [r4, #8]
 800c830:	da05      	bge.n	800c83e <_putc_r+0x42>
 800c832:	69a2      	ldr	r2, [r4, #24]
 800c834:	4293      	cmp	r3, r2
 800c836:	db1c      	blt.n	800c872 <_putc_r+0x76>
 800c838:	b2eb      	uxtb	r3, r5
 800c83a:	2b0a      	cmp	r3, #10
 800c83c:	d019      	beq.n	800c872 <_putc_r+0x76>
 800c83e:	6823      	ldr	r3, [r4, #0]
 800c840:	1c5a      	adds	r2, r3, #1
 800c842:	6022      	str	r2, [r4, #0]
 800c844:	701d      	strb	r5, [r3, #0]
 800c846:	b2ed      	uxtb	r5, r5
 800c848:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c84a:	07da      	lsls	r2, r3, #31
 800c84c:	d405      	bmi.n	800c85a <_putc_r+0x5e>
 800c84e:	89a3      	ldrh	r3, [r4, #12]
 800c850:	059b      	lsls	r3, r3, #22
 800c852:	d402      	bmi.n	800c85a <_putc_r+0x5e>
 800c854:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c856:	f7fd f8d7 	bl	8009a08 <__retarget_lock_release_recursive>
 800c85a:	4628      	mov	r0, r5
 800c85c:	bd70      	pop	{r4, r5, r6, pc}
 800c85e:	4b09      	ldr	r3, [pc, #36]	; (800c884 <_putc_r+0x88>)
 800c860:	429c      	cmp	r4, r3
 800c862:	d101      	bne.n	800c868 <_putc_r+0x6c>
 800c864:	68b4      	ldr	r4, [r6, #8]
 800c866:	e7d6      	b.n	800c816 <_putc_r+0x1a>
 800c868:	4b07      	ldr	r3, [pc, #28]	; (800c888 <_putc_r+0x8c>)
 800c86a:	429c      	cmp	r4, r3
 800c86c:	bf08      	it	eq
 800c86e:	68f4      	ldreq	r4, [r6, #12]
 800c870:	e7d1      	b.n	800c816 <_putc_r+0x1a>
 800c872:	4629      	mov	r1, r5
 800c874:	4622      	mov	r2, r4
 800c876:	4630      	mov	r0, r6
 800c878:	f7fe f808 	bl	800a88c <__swbuf_r>
 800c87c:	4605      	mov	r5, r0
 800c87e:	e7e3      	b.n	800c848 <_putc_r+0x4c>
 800c880:	08012ef4 	.word	0x08012ef4
 800c884:	08012f14 	.word	0x08012f14
 800c888:	08012ed4 	.word	0x08012ed4

0800c88c <_read_r>:
 800c88c:	b538      	push	{r3, r4, r5, lr}
 800c88e:	4d07      	ldr	r5, [pc, #28]	; (800c8ac <_read_r+0x20>)
 800c890:	4604      	mov	r4, r0
 800c892:	4608      	mov	r0, r1
 800c894:	4611      	mov	r1, r2
 800c896:	2200      	movs	r2, #0
 800c898:	602a      	str	r2, [r5, #0]
 800c89a:	461a      	mov	r2, r3
 800c89c:	f7f6 f934 	bl	8002b08 <_read>
 800c8a0:	1c43      	adds	r3, r0, #1
 800c8a2:	d102      	bne.n	800c8aa <_read_r+0x1e>
 800c8a4:	682b      	ldr	r3, [r5, #0]
 800c8a6:	b103      	cbz	r3, 800c8aa <_read_r+0x1e>
 800c8a8:	6023      	str	r3, [r4, #0]
 800c8aa:	bd38      	pop	{r3, r4, r5, pc}
 800c8ac:	2000049c 	.word	0x2000049c

0800c8b0 <__sccl>:
 800c8b0:	b570      	push	{r4, r5, r6, lr}
 800c8b2:	780b      	ldrb	r3, [r1, #0]
 800c8b4:	4604      	mov	r4, r0
 800c8b6:	2b5e      	cmp	r3, #94	; 0x5e
 800c8b8:	bf0b      	itete	eq
 800c8ba:	784b      	ldrbeq	r3, [r1, #1]
 800c8bc:	1c48      	addne	r0, r1, #1
 800c8be:	1c88      	addeq	r0, r1, #2
 800c8c0:	2200      	movne	r2, #0
 800c8c2:	bf08      	it	eq
 800c8c4:	2201      	moveq	r2, #1
 800c8c6:	1e61      	subs	r1, r4, #1
 800c8c8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800c8cc:	f801 2f01 	strb.w	r2, [r1, #1]!
 800c8d0:	42a9      	cmp	r1, r5
 800c8d2:	d1fb      	bne.n	800c8cc <__sccl+0x1c>
 800c8d4:	b90b      	cbnz	r3, 800c8da <__sccl+0x2a>
 800c8d6:	3801      	subs	r0, #1
 800c8d8:	bd70      	pop	{r4, r5, r6, pc}
 800c8da:	f082 0201 	eor.w	r2, r2, #1
 800c8de:	54e2      	strb	r2, [r4, r3]
 800c8e0:	4605      	mov	r5, r0
 800c8e2:	4628      	mov	r0, r5
 800c8e4:	f810 1b01 	ldrb.w	r1, [r0], #1
 800c8e8:	292d      	cmp	r1, #45	; 0x2d
 800c8ea:	d006      	beq.n	800c8fa <__sccl+0x4a>
 800c8ec:	295d      	cmp	r1, #93	; 0x5d
 800c8ee:	d0f3      	beq.n	800c8d8 <__sccl+0x28>
 800c8f0:	b909      	cbnz	r1, 800c8f6 <__sccl+0x46>
 800c8f2:	4628      	mov	r0, r5
 800c8f4:	e7f0      	b.n	800c8d8 <__sccl+0x28>
 800c8f6:	460b      	mov	r3, r1
 800c8f8:	e7f1      	b.n	800c8de <__sccl+0x2e>
 800c8fa:	786e      	ldrb	r6, [r5, #1]
 800c8fc:	2e5d      	cmp	r6, #93	; 0x5d
 800c8fe:	d0fa      	beq.n	800c8f6 <__sccl+0x46>
 800c900:	42b3      	cmp	r3, r6
 800c902:	dcf8      	bgt.n	800c8f6 <__sccl+0x46>
 800c904:	3502      	adds	r5, #2
 800c906:	4619      	mov	r1, r3
 800c908:	3101      	adds	r1, #1
 800c90a:	428e      	cmp	r6, r1
 800c90c:	5462      	strb	r2, [r4, r1]
 800c90e:	dcfb      	bgt.n	800c908 <__sccl+0x58>
 800c910:	1af1      	subs	r1, r6, r3
 800c912:	3901      	subs	r1, #1
 800c914:	1c58      	adds	r0, r3, #1
 800c916:	42b3      	cmp	r3, r6
 800c918:	bfa8      	it	ge
 800c91a:	2100      	movge	r1, #0
 800c91c:	1843      	adds	r3, r0, r1
 800c91e:	e7e0      	b.n	800c8e2 <__sccl+0x32>

0800c920 <_strtol_l.constprop.0>:
 800c920:	2b01      	cmp	r3, #1
 800c922:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c926:	d001      	beq.n	800c92c <_strtol_l.constprop.0+0xc>
 800c928:	2b24      	cmp	r3, #36	; 0x24
 800c92a:	d906      	bls.n	800c93a <_strtol_l.constprop.0+0x1a>
 800c92c:	f7fc fe76 	bl	800961c <__errno>
 800c930:	2316      	movs	r3, #22
 800c932:	6003      	str	r3, [r0, #0]
 800c934:	2000      	movs	r0, #0
 800c936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c93a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800ca20 <_strtol_l.constprop.0+0x100>
 800c93e:	460d      	mov	r5, r1
 800c940:	462e      	mov	r6, r5
 800c942:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c946:	f814 700c 	ldrb.w	r7, [r4, ip]
 800c94a:	f017 0708 	ands.w	r7, r7, #8
 800c94e:	d1f7      	bne.n	800c940 <_strtol_l.constprop.0+0x20>
 800c950:	2c2d      	cmp	r4, #45	; 0x2d
 800c952:	d132      	bne.n	800c9ba <_strtol_l.constprop.0+0x9a>
 800c954:	782c      	ldrb	r4, [r5, #0]
 800c956:	2701      	movs	r7, #1
 800c958:	1cb5      	adds	r5, r6, #2
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d05b      	beq.n	800ca16 <_strtol_l.constprop.0+0xf6>
 800c95e:	2b10      	cmp	r3, #16
 800c960:	d109      	bne.n	800c976 <_strtol_l.constprop.0+0x56>
 800c962:	2c30      	cmp	r4, #48	; 0x30
 800c964:	d107      	bne.n	800c976 <_strtol_l.constprop.0+0x56>
 800c966:	782c      	ldrb	r4, [r5, #0]
 800c968:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c96c:	2c58      	cmp	r4, #88	; 0x58
 800c96e:	d14d      	bne.n	800ca0c <_strtol_l.constprop.0+0xec>
 800c970:	786c      	ldrb	r4, [r5, #1]
 800c972:	2310      	movs	r3, #16
 800c974:	3502      	adds	r5, #2
 800c976:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c97a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800c97e:	f04f 0c00 	mov.w	ip, #0
 800c982:	fbb8 f9f3 	udiv	r9, r8, r3
 800c986:	4666      	mov	r6, ip
 800c988:	fb03 8a19 	mls	sl, r3, r9, r8
 800c98c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800c990:	f1be 0f09 	cmp.w	lr, #9
 800c994:	d816      	bhi.n	800c9c4 <_strtol_l.constprop.0+0xa4>
 800c996:	4674      	mov	r4, lr
 800c998:	42a3      	cmp	r3, r4
 800c99a:	dd24      	ble.n	800c9e6 <_strtol_l.constprop.0+0xc6>
 800c99c:	f1bc 0f00 	cmp.w	ip, #0
 800c9a0:	db1e      	blt.n	800c9e0 <_strtol_l.constprop.0+0xc0>
 800c9a2:	45b1      	cmp	r9, r6
 800c9a4:	d31c      	bcc.n	800c9e0 <_strtol_l.constprop.0+0xc0>
 800c9a6:	d101      	bne.n	800c9ac <_strtol_l.constprop.0+0x8c>
 800c9a8:	45a2      	cmp	sl, r4
 800c9aa:	db19      	blt.n	800c9e0 <_strtol_l.constprop.0+0xc0>
 800c9ac:	fb06 4603 	mla	r6, r6, r3, r4
 800c9b0:	f04f 0c01 	mov.w	ip, #1
 800c9b4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c9b8:	e7e8      	b.n	800c98c <_strtol_l.constprop.0+0x6c>
 800c9ba:	2c2b      	cmp	r4, #43	; 0x2b
 800c9bc:	bf04      	itt	eq
 800c9be:	782c      	ldrbeq	r4, [r5, #0]
 800c9c0:	1cb5      	addeq	r5, r6, #2
 800c9c2:	e7ca      	b.n	800c95a <_strtol_l.constprop.0+0x3a>
 800c9c4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800c9c8:	f1be 0f19 	cmp.w	lr, #25
 800c9cc:	d801      	bhi.n	800c9d2 <_strtol_l.constprop.0+0xb2>
 800c9ce:	3c37      	subs	r4, #55	; 0x37
 800c9d0:	e7e2      	b.n	800c998 <_strtol_l.constprop.0+0x78>
 800c9d2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800c9d6:	f1be 0f19 	cmp.w	lr, #25
 800c9da:	d804      	bhi.n	800c9e6 <_strtol_l.constprop.0+0xc6>
 800c9dc:	3c57      	subs	r4, #87	; 0x57
 800c9de:	e7db      	b.n	800c998 <_strtol_l.constprop.0+0x78>
 800c9e0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800c9e4:	e7e6      	b.n	800c9b4 <_strtol_l.constprop.0+0x94>
 800c9e6:	f1bc 0f00 	cmp.w	ip, #0
 800c9ea:	da05      	bge.n	800c9f8 <_strtol_l.constprop.0+0xd8>
 800c9ec:	2322      	movs	r3, #34	; 0x22
 800c9ee:	6003      	str	r3, [r0, #0]
 800c9f0:	4646      	mov	r6, r8
 800c9f2:	b942      	cbnz	r2, 800ca06 <_strtol_l.constprop.0+0xe6>
 800c9f4:	4630      	mov	r0, r6
 800c9f6:	e79e      	b.n	800c936 <_strtol_l.constprop.0+0x16>
 800c9f8:	b107      	cbz	r7, 800c9fc <_strtol_l.constprop.0+0xdc>
 800c9fa:	4276      	negs	r6, r6
 800c9fc:	2a00      	cmp	r2, #0
 800c9fe:	d0f9      	beq.n	800c9f4 <_strtol_l.constprop.0+0xd4>
 800ca00:	f1bc 0f00 	cmp.w	ip, #0
 800ca04:	d000      	beq.n	800ca08 <_strtol_l.constprop.0+0xe8>
 800ca06:	1e69      	subs	r1, r5, #1
 800ca08:	6011      	str	r1, [r2, #0]
 800ca0a:	e7f3      	b.n	800c9f4 <_strtol_l.constprop.0+0xd4>
 800ca0c:	2430      	movs	r4, #48	; 0x30
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d1b1      	bne.n	800c976 <_strtol_l.constprop.0+0x56>
 800ca12:	2308      	movs	r3, #8
 800ca14:	e7af      	b.n	800c976 <_strtol_l.constprop.0+0x56>
 800ca16:	2c30      	cmp	r4, #48	; 0x30
 800ca18:	d0a5      	beq.n	800c966 <_strtol_l.constprop.0+0x46>
 800ca1a:	230a      	movs	r3, #10
 800ca1c:	e7ab      	b.n	800c976 <_strtol_l.constprop.0+0x56>
 800ca1e:	bf00      	nop
 800ca20:	08013369 	.word	0x08013369

0800ca24 <_strtol_r>:
 800ca24:	f7ff bf7c 	b.w	800c920 <_strtol_l.constprop.0>

0800ca28 <_strtoul_l.constprop.0>:
 800ca28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ca2c:	4f36      	ldr	r7, [pc, #216]	; (800cb08 <_strtoul_l.constprop.0+0xe0>)
 800ca2e:	4686      	mov	lr, r0
 800ca30:	460d      	mov	r5, r1
 800ca32:	4628      	mov	r0, r5
 800ca34:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ca38:	5de6      	ldrb	r6, [r4, r7]
 800ca3a:	f016 0608 	ands.w	r6, r6, #8
 800ca3e:	d1f8      	bne.n	800ca32 <_strtoul_l.constprop.0+0xa>
 800ca40:	2c2d      	cmp	r4, #45	; 0x2d
 800ca42:	d12f      	bne.n	800caa4 <_strtoul_l.constprop.0+0x7c>
 800ca44:	782c      	ldrb	r4, [r5, #0]
 800ca46:	2601      	movs	r6, #1
 800ca48:	1c85      	adds	r5, r0, #2
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d057      	beq.n	800cafe <_strtoul_l.constprop.0+0xd6>
 800ca4e:	2b10      	cmp	r3, #16
 800ca50:	d109      	bne.n	800ca66 <_strtoul_l.constprop.0+0x3e>
 800ca52:	2c30      	cmp	r4, #48	; 0x30
 800ca54:	d107      	bne.n	800ca66 <_strtoul_l.constprop.0+0x3e>
 800ca56:	7828      	ldrb	r0, [r5, #0]
 800ca58:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800ca5c:	2858      	cmp	r0, #88	; 0x58
 800ca5e:	d149      	bne.n	800caf4 <_strtoul_l.constprop.0+0xcc>
 800ca60:	786c      	ldrb	r4, [r5, #1]
 800ca62:	2310      	movs	r3, #16
 800ca64:	3502      	adds	r5, #2
 800ca66:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800ca6a:	2700      	movs	r7, #0
 800ca6c:	fbb8 f8f3 	udiv	r8, r8, r3
 800ca70:	fb03 f908 	mul.w	r9, r3, r8
 800ca74:	ea6f 0909 	mvn.w	r9, r9
 800ca78:	4638      	mov	r0, r7
 800ca7a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800ca7e:	f1bc 0f09 	cmp.w	ip, #9
 800ca82:	d814      	bhi.n	800caae <_strtoul_l.constprop.0+0x86>
 800ca84:	4664      	mov	r4, ip
 800ca86:	42a3      	cmp	r3, r4
 800ca88:	dd22      	ble.n	800cad0 <_strtoul_l.constprop.0+0xa8>
 800ca8a:	2f00      	cmp	r7, #0
 800ca8c:	db1d      	blt.n	800caca <_strtoul_l.constprop.0+0xa2>
 800ca8e:	4580      	cmp	r8, r0
 800ca90:	d31b      	bcc.n	800caca <_strtoul_l.constprop.0+0xa2>
 800ca92:	d101      	bne.n	800ca98 <_strtoul_l.constprop.0+0x70>
 800ca94:	45a1      	cmp	r9, r4
 800ca96:	db18      	blt.n	800caca <_strtoul_l.constprop.0+0xa2>
 800ca98:	fb00 4003 	mla	r0, r0, r3, r4
 800ca9c:	2701      	movs	r7, #1
 800ca9e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800caa2:	e7ea      	b.n	800ca7a <_strtoul_l.constprop.0+0x52>
 800caa4:	2c2b      	cmp	r4, #43	; 0x2b
 800caa6:	bf04      	itt	eq
 800caa8:	782c      	ldrbeq	r4, [r5, #0]
 800caaa:	1c85      	addeq	r5, r0, #2
 800caac:	e7cd      	b.n	800ca4a <_strtoul_l.constprop.0+0x22>
 800caae:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800cab2:	f1bc 0f19 	cmp.w	ip, #25
 800cab6:	d801      	bhi.n	800cabc <_strtoul_l.constprop.0+0x94>
 800cab8:	3c37      	subs	r4, #55	; 0x37
 800caba:	e7e4      	b.n	800ca86 <_strtoul_l.constprop.0+0x5e>
 800cabc:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800cac0:	f1bc 0f19 	cmp.w	ip, #25
 800cac4:	d804      	bhi.n	800cad0 <_strtoul_l.constprop.0+0xa8>
 800cac6:	3c57      	subs	r4, #87	; 0x57
 800cac8:	e7dd      	b.n	800ca86 <_strtoul_l.constprop.0+0x5e>
 800caca:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800cace:	e7e6      	b.n	800ca9e <_strtoul_l.constprop.0+0x76>
 800cad0:	2f00      	cmp	r7, #0
 800cad2:	da07      	bge.n	800cae4 <_strtoul_l.constprop.0+0xbc>
 800cad4:	2322      	movs	r3, #34	; 0x22
 800cad6:	f8ce 3000 	str.w	r3, [lr]
 800cada:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cade:	b932      	cbnz	r2, 800caee <_strtoul_l.constprop.0+0xc6>
 800cae0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cae4:	b106      	cbz	r6, 800cae8 <_strtoul_l.constprop.0+0xc0>
 800cae6:	4240      	negs	r0, r0
 800cae8:	2a00      	cmp	r2, #0
 800caea:	d0f9      	beq.n	800cae0 <_strtoul_l.constprop.0+0xb8>
 800caec:	b107      	cbz	r7, 800caf0 <_strtoul_l.constprop.0+0xc8>
 800caee:	1e69      	subs	r1, r5, #1
 800caf0:	6011      	str	r1, [r2, #0]
 800caf2:	e7f5      	b.n	800cae0 <_strtoul_l.constprop.0+0xb8>
 800caf4:	2430      	movs	r4, #48	; 0x30
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d1b5      	bne.n	800ca66 <_strtoul_l.constprop.0+0x3e>
 800cafa:	2308      	movs	r3, #8
 800cafc:	e7b3      	b.n	800ca66 <_strtoul_l.constprop.0+0x3e>
 800cafe:	2c30      	cmp	r4, #48	; 0x30
 800cb00:	d0a9      	beq.n	800ca56 <_strtoul_l.constprop.0+0x2e>
 800cb02:	230a      	movs	r3, #10
 800cb04:	e7af      	b.n	800ca66 <_strtoul_l.constprop.0+0x3e>
 800cb06:	bf00      	nop
 800cb08:	08013369 	.word	0x08013369

0800cb0c <_strtoul_r>:
 800cb0c:	f7ff bf8c 	b.w	800ca28 <_strtoul_l.constprop.0>

0800cb10 <wcvt>:
 800cb10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb14:	b085      	sub	sp, #20
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	461d      	mov	r5, r3
 800cb1a:	4614      	mov	r4, r2
 800cb1c:	bfbc      	itt	lt
 800cb1e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800cb22:	4614      	movlt	r4, r2
 800cb24:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800cb26:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800cb28:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 800cb2c:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
 800cb30:	bfb6      	itet	lt
 800cb32:	461d      	movlt	r5, r3
 800cb34:	2300      	movge	r3, #0
 800cb36:	232d      	movlt	r3, #45	; 0x2d
 800cb38:	6013      	str	r3, [r2, #0]
 800cb3a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cb3c:	f023 0820 	bic.w	r8, r3, #32
 800cb40:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cb44:	d005      	beq.n	800cb52 <wcvt+0x42>
 800cb46:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800cb4a:	d100      	bne.n	800cb4e <wcvt+0x3e>
 800cb4c:	3601      	adds	r6, #1
 800cb4e:	2102      	movs	r1, #2
 800cb50:	e000      	b.n	800cb54 <wcvt+0x44>
 800cb52:	2103      	movs	r1, #3
 800cb54:	ab03      	add	r3, sp, #12
 800cb56:	9301      	str	r3, [sp, #4]
 800cb58:	ab02      	add	r3, sp, #8
 800cb5a:	9300      	str	r3, [sp, #0]
 800cb5c:	ec45 4b10 	vmov	d0, r4, r5
 800cb60:	4653      	mov	r3, sl
 800cb62:	4632      	mov	r2, r6
 800cb64:	f7fe f800 	bl	800ab68 <_dtoa_r>
 800cb68:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800cb6c:	4607      	mov	r7, r0
 800cb6e:	d112      	bne.n	800cb96 <wcvt+0x86>
 800cb70:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cb72:	07db      	lsls	r3, r3, #31
 800cb74:	d40f      	bmi.n	800cb96 <wcvt+0x86>
 800cb76:	9b03      	ldr	r3, [sp, #12]
 800cb78:	1bdb      	subs	r3, r3, r7
 800cb7a:	f8cb 3000 	str.w	r3, [fp]
 800cb7e:	2300      	movs	r3, #0
 800cb80:	f8db 2000 	ldr.w	r2, [fp]
 800cb84:	429a      	cmp	r2, r3
 800cb86:	dd02      	ble.n	800cb8e <wcvt+0x7e>
 800cb88:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800cb8a:	4293      	cmp	r3, r2
 800cb8c:	db2a      	blt.n	800cbe4 <wcvt+0xd4>
 800cb8e:	9814      	ldr	r0, [sp, #80]	; 0x50
 800cb90:	b005      	add	sp, #20
 800cb92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb96:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cb9a:	eb07 0906 	add.w	r9, r7, r6
 800cb9e:	d110      	bne.n	800cbc2 <wcvt+0xb2>
 800cba0:	783b      	ldrb	r3, [r7, #0]
 800cba2:	2b30      	cmp	r3, #48	; 0x30
 800cba4:	d10a      	bne.n	800cbbc <wcvt+0xac>
 800cba6:	2200      	movs	r2, #0
 800cba8:	2300      	movs	r3, #0
 800cbaa:	4620      	mov	r0, r4
 800cbac:	4629      	mov	r1, r5
 800cbae:	f7f3 ff9b 	bl	8000ae8 <__aeabi_dcmpeq>
 800cbb2:	b918      	cbnz	r0, 800cbbc <wcvt+0xac>
 800cbb4:	f1c6 0601 	rsb	r6, r6, #1
 800cbb8:	f8ca 6000 	str.w	r6, [sl]
 800cbbc:	f8da 3000 	ldr.w	r3, [sl]
 800cbc0:	4499      	add	r9, r3
 800cbc2:	2200      	movs	r2, #0
 800cbc4:	2300      	movs	r3, #0
 800cbc6:	4620      	mov	r0, r4
 800cbc8:	4629      	mov	r1, r5
 800cbca:	f7f3 ff8d 	bl	8000ae8 <__aeabi_dcmpeq>
 800cbce:	b108      	cbz	r0, 800cbd4 <wcvt+0xc4>
 800cbd0:	f8cd 900c 	str.w	r9, [sp, #12]
 800cbd4:	2230      	movs	r2, #48	; 0x30
 800cbd6:	9b03      	ldr	r3, [sp, #12]
 800cbd8:	454b      	cmp	r3, r9
 800cbda:	d2cc      	bcs.n	800cb76 <wcvt+0x66>
 800cbdc:	1c59      	adds	r1, r3, #1
 800cbde:	9103      	str	r1, [sp, #12]
 800cbe0:	701a      	strb	r2, [r3, #0]
 800cbe2:	e7f8      	b.n	800cbd6 <wcvt+0xc6>
 800cbe4:	9914      	ldr	r1, [sp, #80]	; 0x50
 800cbe6:	5cfa      	ldrb	r2, [r7, r3]
 800cbe8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800cbec:	3301      	adds	r3, #1
 800cbee:	e7c7      	b.n	800cb80 <wcvt+0x70>

0800cbf0 <_svfwprintf_r>:
 800cbf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbf4:	ed2d 8b04 	vpush	{d8-d9}
 800cbf8:	b0d3      	sub	sp, #332	; 0x14c
 800cbfa:	461d      	mov	r5, r3
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	4689      	mov	r9, r1
 800cc00:	9319      	str	r3, [sp, #100]	; 0x64
 800cc02:	4683      	mov	fp, r0
 800cc04:	920b      	str	r2, [sp, #44]	; 0x2c
 800cc06:	f7fe fdbf 	bl	800b788 <_localeconv_r>
 800cc0a:	6803      	ldr	r3, [r0, #0]
 800cc0c:	781b      	ldrb	r3, [r3, #0]
 800cc0e:	9316      	str	r3, [sp, #88]	; 0x58
 800cc10:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800cc14:	061e      	lsls	r6, r3, #24
 800cc16:	d51a      	bpl.n	800cc4e <_svfwprintf_r+0x5e>
 800cc18:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cc1c:	b9bb      	cbnz	r3, 800cc4e <_svfwprintf_r+0x5e>
 800cc1e:	2140      	movs	r1, #64	; 0x40
 800cc20:	4658      	mov	r0, fp
 800cc22:	f7fc ffe9 	bl	8009bf8 <_malloc_r>
 800cc26:	f8c9 0000 	str.w	r0, [r9]
 800cc2a:	f8c9 0010 	str.w	r0, [r9, #16]
 800cc2e:	b958      	cbnz	r0, 800cc48 <_svfwprintf_r+0x58>
 800cc30:	230c      	movs	r3, #12
 800cc32:	f8cb 3000 	str.w	r3, [fp]
 800cc36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cc3a:	930d      	str	r3, [sp, #52]	; 0x34
 800cc3c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800cc3e:	b053      	add	sp, #332	; 0x14c
 800cc40:	ecbd 8b04 	vpop	{d8-d9}
 800cc44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc48:	2340      	movs	r3, #64	; 0x40
 800cc4a:	f8c9 3014 	str.w	r3, [r9, #20]
 800cc4e:	ed9f 7b8e 	vldr	d7, [pc, #568]	; 800ce88 <_svfwprintf_r+0x298>
 800cc52:	2300      	movs	r3, #0
 800cc54:	930f      	str	r3, [sp, #60]	; 0x3c
 800cc56:	9311      	str	r3, [sp, #68]	; 0x44
 800cc58:	930d      	str	r3, [sp, #52]	; 0x34
 800cc5a:	eeb0 8a47 	vmov.f32	s16, s14
 800cc5e:	eef0 8a67 	vmov.f32	s17, s15
 800cc62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cc64:	461c      	mov	r4, r3
 800cc66:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc6a:	b10a      	cbz	r2, 800cc70 <_svfwprintf_r+0x80>
 800cc6c:	2a25      	cmp	r2, #37	; 0x25
 800cc6e:	d1f9      	bne.n	800cc64 <_svfwprintf_r+0x74>
 800cc70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cc72:	42a3      	cmp	r3, r4
 800cc74:	d00d      	beq.n	800cc92 <_svfwprintf_r+0xa2>
 800cc76:	1ae6      	subs	r6, r4, r3
 800cc78:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cc7a:	4633      	mov	r3, r6
 800cc7c:	4649      	mov	r1, r9
 800cc7e:	4658      	mov	r0, fp
 800cc80:	f000 fe57 	bl	800d932 <__ssputs_r>
 800cc84:	3001      	adds	r0, #1
 800cc86:	f000 80e9 	beq.w	800ce5c <_svfwprintf_r+0x26c>
 800cc8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cc8c:	eb03 03a6 	add.w	r3, r3, r6, asr #2
 800cc90:	930d      	str	r3, [sp, #52]	; 0x34
 800cc92:	6823      	ldr	r3, [r4, #0]
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	f000 80e1 	beq.w	800ce5c <_svfwprintf_r+0x26c>
 800cc9a:	2100      	movs	r1, #0
 800cc9c:	1d22      	adds	r2, r4, #4
 800cc9e:	9115      	str	r1, [sp, #84]	; 0x54
 800cca0:	460e      	mov	r6, r1
 800cca2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800cca6:	910c      	str	r1, [sp, #48]	; 0x30
 800cca8:	460f      	mov	r7, r1
 800ccaa:	200a      	movs	r0, #10
 800ccac:	4613      	mov	r3, r2
 800ccae:	f853 2b04 	ldr.w	r2, [r3], #4
 800ccb2:	9209      	str	r2, [sp, #36]	; 0x24
 800ccb4:	930b      	str	r3, [sp, #44]	; 0x2c
 800ccb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ccb8:	2b39      	cmp	r3, #57	; 0x39
 800ccba:	d84c      	bhi.n	800cd56 <_svfwprintf_r+0x166>
 800ccbc:	2b1f      	cmp	r3, #31
 800ccbe:	d94f      	bls.n	800cd60 <_svfwprintf_r+0x170>
 800ccc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ccc2:	3b20      	subs	r3, #32
 800ccc4:	2b19      	cmp	r3, #25
 800ccc6:	d84a      	bhi.n	800cd5e <_svfwprintf_r+0x16e>
 800ccc8:	e8df f003 	tbb	[pc, r3]
 800cccc:	7049496b 	.word	0x7049496b
 800ccd0:	49494949 	.word	0x49494949
 800ccd4:	6c734949 	.word	0x6c734949
 800ccd8:	497d7a49 	.word	0x497d7a49
 800ccdc:	9b9b9b98 	.word	0x9b9b9b98
 800cce0:	9b9b9b9b 	.word	0x9b9b9b9b
 800cce4:	9b9b      	.short	0x9b9b
 800cce6:	2b33      	cmp	r3, #51	; 0x33
 800cce8:	d839      	bhi.n	800cd5e <_svfwprintf_r+0x16e>
 800ccea:	e8df f013 	tbh	[pc, r3, lsl #1]
 800ccee:	00e5      	.short	0x00e5
 800ccf0:	00e50038 	.word	0x00e50038
 800ccf4:	00380038 	.word	0x00380038
 800ccf8:	00380038 	.word	0x00380038
 800ccfc:	0038009c 	.word	0x0038009c
 800cd00:	00380038 	.word	0x00380038
 800cd04:	00380038 	.word	0x00380038
 800cd08:	00380038 	.word	0x00380038
 800cd0c:	00380038 	.word	0x00380038
 800cd10:	00380038 	.word	0x00380038
 800cd14:	0038031e 	.word	0x0038031e
 800cd18:	00380038 	.word	0x00380038
 800cd1c:	00380038 	.word	0x00380038
 800cd20:	00380038 	.word	0x00380038
 800cd24:	00380038 	.word	0x00380038
 800cd28:	00a50038 	.word	0x00a50038
 800cd2c:	00e500d3 	.word	0x00e500d3
 800cd30:	00e500e5 	.word	0x00e500e5
 800cd34:	00d3009f 	.word	0x00d3009f
 800cd38:	00380038 	.word	0x00380038
 800cd3c:	003800a2 	.word	0x003800a2
 800cd40:	02950284 	.word	0x02950284
 800cd44:	00a202b3 	.word	0x00a202b3
 800cd48:	02c20038 	.word	0x02c20038
 800cd4c:	03120038 	.word	0x03120038
 800cd50:	00380038 	.word	0x00380038
 800cd54:	0042      	.short	0x0042
 800cd56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd58:	3b45      	subs	r3, #69	; 0x45
 800cd5a:	2b33      	cmp	r3, #51	; 0x33
 800cd5c:	d9c3      	bls.n	800cce6 <_svfwprintf_r+0xf6>
 800cd5e:	b111      	cbz	r1, 800cd66 <_svfwprintf_r+0x176>
 800cd60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d07a      	beq.n	800ce5c <_svfwprintf_r+0x26c>
 800cd66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd68:	932a      	str	r3, [sp, #168]	; 0xa8
 800cd6a:	2000      	movs	r0, #0
 800cd6c:	9015      	str	r0, [sp, #84]	; 0x54
 800cd6e:	950a      	str	r5, [sp, #40]	; 0x28
 800cd70:	e081      	b.n	800ce76 <_svfwprintf_r+0x286>
 800cd72:	b101      	cbz	r1, 800cd76 <_svfwprintf_r+0x186>
 800cd74:	9615      	str	r6, [sp, #84]	; 0x54
 800cd76:	4b46      	ldr	r3, [pc, #280]	; (800ce90 <_svfwprintf_r+0x2a0>)
 800cd78:	930f      	str	r3, [sp, #60]	; 0x3c
 800cd7a:	462a      	mov	r2, r5
 800cd7c:	06f8      	lsls	r0, r7, #27
 800cd7e:	f852 3b04 	ldr.w	r3, [r2], #4
 800cd82:	920a      	str	r2, [sp, #40]	; 0x28
 800cd84:	d402      	bmi.n	800cd8c <_svfwprintf_r+0x19c>
 800cd86:	0679      	lsls	r1, r7, #25
 800cd88:	bf48      	it	mi
 800cd8a:	b29b      	uxthmi	r3, r3
 800cd8c:	07fa      	lsls	r2, r7, #31
 800cd8e:	d506      	bpl.n	800cd9e <_svfwprintf_r+0x1ae>
 800cd90:	b12b      	cbz	r3, 800cd9e <_svfwprintf_r+0x1ae>
 800cd92:	2230      	movs	r2, #48	; 0x30
 800cd94:	921a      	str	r2, [sp, #104]	; 0x68
 800cd96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cd98:	921b      	str	r2, [sp, #108]	; 0x6c
 800cd9a:	f047 0702 	orr.w	r7, r7, #2
 800cd9e:	2202      	movs	r2, #2
 800cda0:	e242      	b.n	800d228 <_svfwprintf_r+0x638>
 800cda2:	b90e      	cbnz	r6, 800cda8 <_svfwprintf_r+0x1b8>
 800cda4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800cda6:	2101      	movs	r1, #1
 800cda8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cdaa:	e77f      	b.n	800ccac <_svfwprintf_r+0xbc>
 800cdac:	f047 0701 	orr.w	r7, r7, #1
 800cdb0:	e7fa      	b.n	800cda8 <_svfwprintf_r+0x1b8>
 800cdb2:	f855 3b04 	ldr.w	r3, [r5], #4
 800cdb6:	930c      	str	r3, [sp, #48]	; 0x30
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	daf5      	bge.n	800cda8 <_svfwprintf_r+0x1b8>
 800cdbc:	425b      	negs	r3, r3
 800cdbe:	930c      	str	r3, [sp, #48]	; 0x30
 800cdc0:	f047 0704 	orr.w	r7, r7, #4
 800cdc4:	e7f0      	b.n	800cda8 <_svfwprintf_r+0x1b8>
 800cdc6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cdc8:	f852 3b04 	ldr.w	r3, [r2], #4
 800cdcc:	9309      	str	r3, [sp, #36]	; 0x24
 800cdce:	2b2a      	cmp	r3, #42	; 0x2a
 800cdd0:	d112      	bne.n	800cdf8 <_svfwprintf_r+0x208>
 800cdd2:	f855 4b04 	ldr.w	r4, [r5], #4
 800cdd6:	920b      	str	r2, [sp, #44]	; 0x2c
 800cdd8:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
 800cddc:	e7e4      	b.n	800cda8 <_svfwprintf_r+0x1b8>
 800cdde:	fb00 3404 	mla	r4, r0, r4, r3
 800cde2:	f852 3b04 	ldr.w	r3, [r2], #4
 800cde6:	9309      	str	r3, [sp, #36]	; 0x24
 800cde8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cdea:	3b30      	subs	r3, #48	; 0x30
 800cdec:	2b09      	cmp	r3, #9
 800cdee:	d9f6      	bls.n	800cdde <_svfwprintf_r+0x1ee>
 800cdf0:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
 800cdf4:	920b      	str	r2, [sp, #44]	; 0x2c
 800cdf6:	e75e      	b.n	800ccb6 <_svfwprintf_r+0xc6>
 800cdf8:	2400      	movs	r4, #0
 800cdfa:	e7f5      	b.n	800cde8 <_svfwprintf_r+0x1f8>
 800cdfc:	f047 0780 	orr.w	r7, r7, #128	; 0x80
 800ce00:	e7d2      	b.n	800cda8 <_svfwprintf_r+0x1b8>
 800ce02:	2300      	movs	r3, #0
 800ce04:	930c      	str	r3, [sp, #48]	; 0x30
 800ce06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ce08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce0a:	fb00 3302 	mla	r3, r0, r2, r3
 800ce0e:	3b30      	subs	r3, #48	; 0x30
 800ce10:	930c      	str	r3, [sp, #48]	; 0x30
 800ce12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ce14:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce18:	930b      	str	r3, [sp, #44]	; 0x2c
 800ce1a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800ce1e:	2b09      	cmp	r3, #9
 800ce20:	9209      	str	r2, [sp, #36]	; 0x24
 800ce22:	d9f0      	bls.n	800ce06 <_svfwprintf_r+0x216>
 800ce24:	e747      	b.n	800ccb6 <_svfwprintf_r+0xc6>
 800ce26:	f047 0708 	orr.w	r7, r7, #8
 800ce2a:	e7bd      	b.n	800cda8 <_svfwprintf_r+0x1b8>
 800ce2c:	f047 0740 	orr.w	r7, r7, #64	; 0x40
 800ce30:	e7ba      	b.n	800cda8 <_svfwprintf_r+0x1b8>
 800ce32:	f047 0710 	orr.w	r7, r7, #16
 800ce36:	e7b7      	b.n	800cda8 <_svfwprintf_r+0x1b8>
 800ce38:	b101      	cbz	r1, 800ce3c <_svfwprintf_r+0x24c>
 800ce3a:	9615      	str	r6, [sp, #84]	; 0x54
 800ce3c:	462b      	mov	r3, r5
 800ce3e:	06fd      	lsls	r5, r7, #27
 800ce40:	f853 0b04 	ldr.w	r0, [r3], #4
 800ce44:	930a      	str	r3, [sp, #40]	; 0x28
 800ce46:	d412      	bmi.n	800ce6e <_svfwprintf_r+0x27e>
 800ce48:	f000 fcbc 	bl	800d7c4 <btowc>
 800ce4c:	1c44      	adds	r4, r0, #1
 800ce4e:	d10e      	bne.n	800ce6e <_svfwprintf_r+0x27e>
 800ce50:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800ce54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce58:	f8a9 300c 	strh.w	r3, [r9, #12]
 800ce5c:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800ce60:	f013 0f40 	tst.w	r3, #64	; 0x40
 800ce64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ce66:	bf18      	it	ne
 800ce68:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 800ce6c:	e6e5      	b.n	800cc3a <_svfwprintf_r+0x4a>
 800ce6e:	902a      	str	r0, [sp, #168]	; 0xa8
 800ce70:	2000      	movs	r0, #0
 800ce72:	902b      	str	r0, [sp, #172]	; 0xac
 800ce74:	9015      	str	r0, [sp, #84]	; 0x54
 800ce76:	4680      	mov	r8, r0
 800ce78:	2401      	movs	r4, #1
 800ce7a:	4606      	mov	r6, r0
 800ce7c:	4605      	mov	r5, r0
 800ce7e:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 800ce82:	e104      	b.n	800d08e <_svfwprintf_r+0x49e>
 800ce84:	f3af 8000 	nop.w
	...
 800ce90:	08013204 	.word	0x08013204
 800ce94:	b101      	cbz	r1, 800ce98 <_svfwprintf_r+0x2a8>
 800ce96:	9615      	str	r6, [sp, #84]	; 0x54
 800ce98:	462a      	mov	r2, r5
 800ce9a:	06f9      	lsls	r1, r7, #27
 800ce9c:	f852 3b04 	ldr.w	r3, [r2], #4
 800cea0:	920a      	str	r2, [sp, #40]	; 0x28
 800cea2:	d402      	bmi.n	800ceaa <_svfwprintf_r+0x2ba>
 800cea4:	067a      	lsls	r2, r7, #25
 800cea6:	bf48      	it	mi
 800cea8:	b21b      	sxthmi	r3, r3
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	da02      	bge.n	800ceb4 <_svfwprintf_r+0x2c4>
 800ceae:	222d      	movs	r2, #45	; 0x2d
 800ceb0:	425b      	negs	r3, r3
 800ceb2:	9215      	str	r2, [sp, #84]	; 0x54
 800ceb4:	2201      	movs	r2, #1
 800ceb6:	e1b9      	b.n	800d22c <_svfwprintf_r+0x63c>
 800ceb8:	b101      	cbz	r1, 800cebc <_svfwprintf_r+0x2cc>
 800ceba:	9615      	str	r6, [sp, #84]	; 0x54
 800cebc:	3507      	adds	r5, #7
 800cebe:	f025 0307 	bic.w	r3, r5, #7
 800cec2:	ecb3 7b02 	vldmia	r3!, {d7}
 800cec6:	930a      	str	r3, [sp, #40]	; 0x28
 800cec8:	eeb0 8a47 	vmov.f32	s16, s14
 800cecc:	eef0 8a67 	vmov.f32	s17, s15
 800ced0:	ee18 3a90 	vmov	r3, s17
 800ced4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ced8:	ee09 3a90 	vmov	s19, r3
 800cedc:	eeb0 9a47 	vmov.f32	s18, s14
 800cee0:	4ba6      	ldr	r3, [pc, #664]	; (800d17c <_svfwprintf_r+0x58c>)
 800cee2:	ec51 0b19 	vmov	r0, r1, d9
 800cee6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ceea:	f7f3 fe2f 	bl	8000b4c <__aeabi_dcmpun>
 800ceee:	b9f0      	cbnz	r0, 800cf2e <_svfwprintf_r+0x33e>
 800cef0:	4ba2      	ldr	r3, [pc, #648]	; (800d17c <_svfwprintf_r+0x58c>)
 800cef2:	ec51 0b19 	vmov	r0, r1, d9
 800cef6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cefa:	f7f3 fe09 	bl	8000b10 <__aeabi_dcmple>
 800cefe:	b9b0      	cbnz	r0, 800cf2e <_svfwprintf_r+0x33e>
 800cf00:	ec51 0b18 	vmov	r0, r1, d8
 800cf04:	2200      	movs	r2, #0
 800cf06:	2300      	movs	r3, #0
 800cf08:	f7f3 fdf8 	bl	8000afc <__aeabi_dcmplt>
 800cf0c:	b108      	cbz	r0, 800cf12 <_svfwprintf_r+0x322>
 800cf0e:	232d      	movs	r3, #45	; 0x2d
 800cf10:	9315      	str	r3, [sp, #84]	; 0x54
 800cf12:	4b9b      	ldr	r3, [pc, #620]	; (800d180 <_svfwprintf_r+0x590>)
 800cf14:	489b      	ldr	r0, [pc, #620]	; (800d184 <_svfwprintf_r+0x594>)
 800cf16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cf18:	f027 0780 	bic.w	r7, r7, #128	; 0x80
 800cf1c:	2a47      	cmp	r2, #71	; 0x47
 800cf1e:	bf94      	ite	ls
 800cf20:	469a      	movls	sl, r3
 800cf22:	4682      	movhi	sl, r0
 800cf24:	f04f 0800 	mov.w	r8, #0
 800cf28:	2403      	movs	r4, #3
 800cf2a:	4646      	mov	r6, r8
 800cf2c:	e3d4      	b.n	800d6d8 <_svfwprintf_r+0xae8>
 800cf2e:	ec53 2b18 	vmov	r2, r3, d8
 800cf32:	ec51 0b18 	vmov	r0, r1, d8
 800cf36:	f7f3 fe09 	bl	8000b4c <__aeabi_dcmpun>
 800cf3a:	b140      	cbz	r0, 800cf4e <_svfwprintf_r+0x35e>
 800cf3c:	ee18 3a90 	vmov	r3, s17
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	bfbc      	itt	lt
 800cf44:	232d      	movlt	r3, #45	; 0x2d
 800cf46:	9315      	strlt	r3, [sp, #84]	; 0x54
 800cf48:	488f      	ldr	r0, [pc, #572]	; (800d188 <_svfwprintf_r+0x598>)
 800cf4a:	4b90      	ldr	r3, [pc, #576]	; (800d18c <_svfwprintf_r+0x59c>)
 800cf4c:	e7e3      	b.n	800cf16 <_svfwprintf_r+0x326>
 800cf4e:	1c63      	adds	r3, r4, #1
 800cf50:	f000 810f 	beq.w	800d172 <_svfwprintf_r+0x582>
 800cf54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf56:	f023 0320 	bic.w	r3, r3, #32
 800cf5a:	2b47      	cmp	r3, #71	; 0x47
 800cf5c:	d102      	bne.n	800cf64 <_svfwprintf_r+0x374>
 800cf5e:	2c00      	cmp	r4, #0
 800cf60:	bf08      	it	eq
 800cf62:	2401      	moveq	r4, #1
 800cf64:	f447 7380 	orr.w	r3, r7, #256	; 0x100
 800cf68:	930e      	str	r3, [sp, #56]	; 0x38
 800cf6a:	2328      	movs	r3, #40	; 0x28
 800cf6c:	9307      	str	r3, [sp, #28]
 800cf6e:	ab19      	add	r3, sp, #100	; 0x64
 800cf70:	9305      	str	r3, [sp, #20]
 800cf72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf74:	9304      	str	r3, [sp, #16]
 800cf76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cf78:	f10d 08a8 	add.w	r8, sp, #168	; 0xa8
 800cf7c:	ae18      	add	r6, sp, #96	; 0x60
 800cf7e:	ad17      	add	r5, sp, #92	; 0x5c
 800cf80:	e9cd 4300 	strd	r4, r3, [sp]
 800cf84:	f8cd 8018 	str.w	r8, [sp, #24]
 800cf88:	ec53 2b18 	vmov	r2, r3, d8
 800cf8c:	9603      	str	r6, [sp, #12]
 800cf8e:	9502      	str	r5, [sp, #8]
 800cf90:	4658      	mov	r0, fp
 800cf92:	f7ff fdbd 	bl	800cb10 <wcvt>
 800cf96:	4540      	cmp	r0, r8
 800cf98:	4682      	mov	sl, r0
 800cf9a:	f040 80ec 	bne.w	800d176 <_svfwprintf_r+0x586>
 800cf9e:	9919      	ldr	r1, [sp, #100]	; 0x64
 800cfa0:	2928      	cmp	r1, #40	; 0x28
 800cfa2:	f340 80e8 	ble.w	800d176 <_svfwprintf_r+0x586>
 800cfa6:	0089      	lsls	r1, r1, #2
 800cfa8:	4658      	mov	r0, fp
 800cfaa:	f7fc fe25 	bl	8009bf8 <_malloc_r>
 800cfae:	4680      	mov	r8, r0
 800cfb0:	2800      	cmp	r0, #0
 800cfb2:	f43f af4d 	beq.w	800ce50 <_svfwprintf_r+0x260>
 800cfb6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cfb8:	9502      	str	r5, [sp, #8]
 800cfba:	e9cd 0306 	strd	r0, r3, [sp, #24]
 800cfbe:	ab19      	add	r3, sp, #100	; 0x64
 800cfc0:	9305      	str	r3, [sp, #20]
 800cfc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cfc4:	e9cd 6303 	strd	r6, r3, [sp, #12]
 800cfc8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cfca:	4658      	mov	r0, fp
 800cfcc:	e9cd 4300 	strd	r4, r3, [sp]
 800cfd0:	ec53 2b18 	vmov	r2, r3, d8
 800cfd4:	f7ff fd9c 	bl	800cb10 <wcvt>
 800cfd8:	4682      	mov	sl, r0
 800cfda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cfdc:	9d18      	ldr	r5, [sp, #96]	; 0x60
 800cfde:	f023 0320 	bic.w	r3, r3, #32
 800cfe2:	2b47      	cmp	r3, #71	; 0x47
 800cfe4:	f040 80d6 	bne.w	800d194 <_svfwprintf_r+0x5a4>
 800cfe8:	1cee      	adds	r6, r5, #3
 800cfea:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cfec:	db02      	blt.n	800cff4 <_svfwprintf_r+0x404>
 800cfee:	42ac      	cmp	r4, r5
 800cff0:	f280 80ec 	bge.w	800d1cc <_svfwprintf_r+0x5dc>
 800cff4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cff6:	3b02      	subs	r3, #2
 800cff8:	9309      	str	r3, [sp, #36]	; 0x24
 800cffa:	1e6b      	subs	r3, r5, #1
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d000:	9318      	str	r3, [sp, #96]	; 0x60
 800d002:	bfb8      	it	lt
 800d004:	f1c5 0301 	rsblt	r3, r5, #1
 800d008:	921c      	str	r2, [sp, #112]	; 0x70
 800d00a:	bfb4      	ite	lt
 800d00c:	222d      	movlt	r2, #45	; 0x2d
 800d00e:	222b      	movge	r2, #43	; 0x2b
 800d010:	2b09      	cmp	r3, #9
 800d012:	921d      	str	r2, [sp, #116]	; 0x74
 800d014:	f340 80d1 	ble.w	800d1ba <_svfwprintf_r+0x5ca>
 800d018:	a82a      	add	r0, sp, #168	; 0xa8
 800d01a:	250a      	movs	r5, #10
 800d01c:	4602      	mov	r2, r0
 800d01e:	fb93 f4f5 	sdiv	r4, r3, r5
 800d022:	fb05 3114 	mls	r1, r5, r4, r3
 800d026:	3130      	adds	r1, #48	; 0x30
 800d028:	f842 1c04 	str.w	r1, [r2, #-4]
 800d02c:	4619      	mov	r1, r3
 800d02e:	2963      	cmp	r1, #99	; 0x63
 800d030:	f1a0 0004 	sub.w	r0, r0, #4
 800d034:	4623      	mov	r3, r4
 800d036:	dcf1      	bgt.n	800d01c <_svfwprintf_r+0x42c>
 800d038:	3330      	adds	r3, #48	; 0x30
 800d03a:	f840 3c04 	str.w	r3, [r0, #-4]
 800d03e:	f1a2 0108 	sub.w	r1, r2, #8
 800d042:	a81e      	add	r0, sp, #120	; 0x78
 800d044:	ab2a      	add	r3, sp, #168	; 0xa8
 800d046:	4299      	cmp	r1, r3
 800d048:	f0c0 80b2 	bcc.w	800d1b0 <_svfwprintf_r+0x5c0>
 800d04c:	f10d 04b3 	add.w	r4, sp, #179	; 0xb3
 800d050:	1aa4      	subs	r4, r4, r2
 800d052:	f024 0403 	bic.w	r4, r4, #3
 800d056:	3a0b      	subs	r2, #11
 800d058:	4293      	cmp	r3, r2
 800d05a:	bf38      	it	cc
 800d05c:	2400      	movcc	r4, #0
 800d05e:	ab1e      	add	r3, sp, #120	; 0x78
 800d060:	441c      	add	r4, r3
 800d062:	a81c      	add	r0, sp, #112	; 0x70
 800d064:	1a24      	subs	r4, r4, r0
 800d066:	10a3      	asrs	r3, r4, #2
 800d068:	9311      	str	r3, [sp, #68]	; 0x44
 800d06a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d06c:	2b01      	cmp	r3, #1
 800d06e:	eb03 04a4 	add.w	r4, r3, r4, asr #2
 800d072:	dc02      	bgt.n	800d07a <_svfwprintf_r+0x48a>
 800d074:	f017 0501 	ands.w	r5, r7, #1
 800d078:	d001      	beq.n	800d07e <_svfwprintf_r+0x48e>
 800d07a:	3401      	adds	r4, #1
 800d07c:	2500      	movs	r5, #0
 800d07e:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800d080:	2e00      	cmp	r6, #0
 800d082:	f000 817e 	beq.w	800d382 <_svfwprintf_r+0x792>
 800d086:	232d      	movs	r3, #45	; 0x2d
 800d088:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800d08a:	9315      	str	r3, [sp, #84]	; 0x54
 800d08c:	2600      	movs	r6, #0
 800d08e:	42a6      	cmp	r6, r4
 800d090:	4633      	mov	r3, r6
 800d092:	bfb8      	it	lt
 800d094:	4623      	movlt	r3, r4
 800d096:	930e      	str	r3, [sp, #56]	; 0x38
 800d098:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d09a:	b113      	cbz	r3, 800d0a2 <_svfwprintf_r+0x4b2>
 800d09c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d09e:	3301      	adds	r3, #1
 800d0a0:	930e      	str	r3, [sp, #56]	; 0x38
 800d0a2:	f017 0302 	ands.w	r3, r7, #2
 800d0a6:	9312      	str	r3, [sp, #72]	; 0x48
 800d0a8:	bf1e      	ittt	ne
 800d0aa:	9b0e      	ldrne	r3, [sp, #56]	; 0x38
 800d0ac:	3302      	addne	r3, #2
 800d0ae:	930e      	strne	r3, [sp, #56]	; 0x38
 800d0b0:	f017 0384 	ands.w	r3, r7, #132	; 0x84
 800d0b4:	9313      	str	r3, [sp, #76]	; 0x4c
 800d0b6:	f000 8166 	beq.w	800d386 <_svfwprintf_r+0x796>
 800d0ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d0bc:	b143      	cbz	r3, 800d0d0 <_svfwprintf_r+0x4e0>
 800d0be:	2304      	movs	r3, #4
 800d0c0:	aa15      	add	r2, sp, #84	; 0x54
 800d0c2:	4649      	mov	r1, r9
 800d0c4:	4658      	mov	r0, fp
 800d0c6:	f000 fc34 	bl	800d932 <__ssputs_r>
 800d0ca:	3001      	adds	r0, #1
 800d0cc:	f000 816e 	beq.w	800d3ac <_svfwprintf_r+0x7bc>
 800d0d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d0d2:	b143      	cbz	r3, 800d0e6 <_svfwprintf_r+0x4f6>
 800d0d4:	2308      	movs	r3, #8
 800d0d6:	aa1a      	add	r2, sp, #104	; 0x68
 800d0d8:	4649      	mov	r1, r9
 800d0da:	4658      	mov	r0, fp
 800d0dc:	f000 fc29 	bl	800d932 <__ssputs_r>
 800d0e0:	3001      	adds	r0, #1
 800d0e2:	f000 8163 	beq.w	800d3ac <_svfwprintf_r+0x7bc>
 800d0e6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d0e8:	2b80      	cmp	r3, #128	; 0x80
 800d0ea:	d113      	bne.n	800d114 <_svfwprintf_r+0x524>
 800d0ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d0ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d0f0:	1a9b      	subs	r3, r3, r2
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	9310      	str	r3, [sp, #64]	; 0x40
 800d0f6:	dd0d      	ble.n	800d114 <_svfwprintf_r+0x524>
 800d0f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d0fa:	4a25      	ldr	r2, [pc, #148]	; (800d190 <_svfwprintf_r+0x5a0>)
 800d0fc:	2b10      	cmp	r3, #16
 800d0fe:	f300 816a 	bgt.w	800d3d6 <_svfwprintf_r+0x7e6>
 800d102:	4a23      	ldr	r2, [pc, #140]	; (800d190 <_svfwprintf_r+0x5a0>)
 800d104:	009b      	lsls	r3, r3, #2
 800d106:	4649      	mov	r1, r9
 800d108:	4658      	mov	r0, fp
 800d10a:	f000 fc12 	bl	800d932 <__ssputs_r>
 800d10e:	3001      	adds	r0, #1
 800d110:	f000 814c 	beq.w	800d3ac <_svfwprintf_r+0x7bc>
 800d114:	1b36      	subs	r6, r6, r4
 800d116:	2e00      	cmp	r6, #0
 800d118:	dd0c      	ble.n	800d134 <_svfwprintf_r+0x544>
 800d11a:	2e10      	cmp	r6, #16
 800d11c:	4a1c      	ldr	r2, [pc, #112]	; (800d190 <_svfwprintf_r+0x5a0>)
 800d11e:	f300 8165 	bgt.w	800d3ec <_svfwprintf_r+0x7fc>
 800d122:	4a1b      	ldr	r2, [pc, #108]	; (800d190 <_svfwprintf_r+0x5a0>)
 800d124:	00b3      	lsls	r3, r6, #2
 800d126:	4649      	mov	r1, r9
 800d128:	4658      	mov	r0, fp
 800d12a:	f000 fc02 	bl	800d932 <__ssputs_r>
 800d12e:	3001      	adds	r0, #1
 800d130:	f000 813c 	beq.w	800d3ac <_svfwprintf_r+0x7bc>
 800d134:	05f9      	lsls	r1, r7, #23
 800d136:	f100 8162 	bmi.w	800d3fe <_svfwprintf_r+0x80e>
 800d13a:	00a3      	lsls	r3, r4, #2
 800d13c:	4652      	mov	r2, sl
 800d13e:	4649      	mov	r1, r9
 800d140:	4658      	mov	r0, fp
 800d142:	f000 fbf6 	bl	800d932 <__ssputs_r>
 800d146:	3001      	adds	r0, #1
 800d148:	f000 8130 	beq.w	800d3ac <_svfwprintf_r+0x7bc>
 800d14c:	077a      	lsls	r2, r7, #29
 800d14e:	f100 8281 	bmi.w	800d654 <_svfwprintf_r+0xa64>
 800d152:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d156:	990e      	ldr	r1, [sp, #56]	; 0x38
 800d158:	428a      	cmp	r2, r1
 800d15a:	bfac      	ite	ge
 800d15c:	189b      	addge	r3, r3, r2
 800d15e:	185b      	addlt	r3, r3, r1
 800d160:	930d      	str	r3, [sp, #52]	; 0x34
 800d162:	f1b8 0f00 	cmp.w	r8, #0
 800d166:	d055      	beq.n	800d214 <_svfwprintf_r+0x624>
 800d168:	4641      	mov	r1, r8
 800d16a:	4658      	mov	r0, fp
 800d16c:	f7fc fcd8 	bl	8009b20 <_free_r>
 800d170:	e050      	b.n	800d214 <_svfwprintf_r+0x624>
 800d172:	2406      	movs	r4, #6
 800d174:	e6f6      	b.n	800cf64 <_svfwprintf_r+0x374>
 800d176:	f04f 0800 	mov.w	r8, #0
 800d17a:	e72e      	b.n	800cfda <_svfwprintf_r+0x3ea>
 800d17c:	7fefffff 	.word	0x7fefffff
 800d180:	08013180 	.word	0x08013180
 800d184:	08013190 	.word	0x08013190
 800d188:	080131b0 	.word	0x080131b0
 800d18c:	080131a0 	.word	0x080131a0
 800d190:	08013290 	.word	0x08013290
 800d194:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d196:	2b66      	cmp	r3, #102	; 0x66
 800d198:	f47f af2f 	bne.w	800cffa <_svfwprintf_r+0x40a>
 800d19c:	f007 0301 	and.w	r3, r7, #1
 800d1a0:	2d00      	cmp	r5, #0
 800d1a2:	ea43 0304 	orr.w	r3, r3, r4
 800d1a6:	dd0e      	ble.n	800d1c6 <_svfwprintf_r+0x5d6>
 800d1a8:	b1fb      	cbz	r3, 800d1ea <_svfwprintf_r+0x5fa>
 800d1aa:	3401      	adds	r4, #1
 800d1ac:	442c      	add	r4, r5
 800d1ae:	e766      	b.n	800d07e <_svfwprintf_r+0x48e>
 800d1b0:	f851 4b04 	ldr.w	r4, [r1], #4
 800d1b4:	f840 4b04 	str.w	r4, [r0], #4
 800d1b8:	e745      	b.n	800d046 <_svfwprintf_r+0x456>
 800d1ba:	2230      	movs	r2, #48	; 0x30
 800d1bc:	4413      	add	r3, r2
 800d1be:	921e      	str	r2, [sp, #120]	; 0x78
 800d1c0:	931f      	str	r3, [sp, #124]	; 0x7c
 800d1c2:	ac20      	add	r4, sp, #128	; 0x80
 800d1c4:	e74d      	b.n	800d062 <_svfwprintf_r+0x472>
 800d1c6:	b193      	cbz	r3, 800d1ee <_svfwprintf_r+0x5fe>
 800d1c8:	3402      	adds	r4, #2
 800d1ca:	e758      	b.n	800d07e <_svfwprintf_r+0x48e>
 800d1cc:	42ab      	cmp	r3, r5
 800d1ce:	dc05      	bgt.n	800d1dc <_svfwprintf_r+0x5ec>
 800d1d0:	07fc      	lsls	r4, r7, #31
 800d1d2:	d50e      	bpl.n	800d1f2 <_svfwprintf_r+0x602>
 800d1d4:	1c6c      	adds	r4, r5, #1
 800d1d6:	2367      	movs	r3, #103	; 0x67
 800d1d8:	9309      	str	r3, [sp, #36]	; 0x24
 800d1da:	e750      	b.n	800d07e <_svfwprintf_r+0x48e>
 800d1dc:	2d00      	cmp	r5, #0
 800d1de:	bfd4      	ite	le
 800d1e0:	f1c5 0402 	rsble	r4, r5, #2
 800d1e4:	2401      	movgt	r4, #1
 800d1e6:	441c      	add	r4, r3
 800d1e8:	e7f5      	b.n	800d1d6 <_svfwprintf_r+0x5e6>
 800d1ea:	462c      	mov	r4, r5
 800d1ec:	e747      	b.n	800d07e <_svfwprintf_r+0x48e>
 800d1ee:	2401      	movs	r4, #1
 800d1f0:	e745      	b.n	800d07e <_svfwprintf_r+0x48e>
 800d1f2:	462c      	mov	r4, r5
 800d1f4:	e7ef      	b.n	800d1d6 <_svfwprintf_r+0x5e6>
 800d1f6:	b101      	cbz	r1, 800d1fa <_svfwprintf_r+0x60a>
 800d1f8:	9615      	str	r6, [sp, #84]	; 0x54
 800d1fa:	1d2b      	adds	r3, r5, #4
 800d1fc:	06f8      	lsls	r0, r7, #27
 800d1fe:	930a      	str	r3, [sp, #40]	; 0x28
 800d200:	d503      	bpl.n	800d20a <_svfwprintf_r+0x61a>
 800d202:	682b      	ldr	r3, [r5, #0]
 800d204:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d206:	601a      	str	r2, [r3, #0]
 800d208:	e004      	b.n	800d214 <_svfwprintf_r+0x624>
 800d20a:	0679      	lsls	r1, r7, #25
 800d20c:	d5f9      	bpl.n	800d202 <_svfwprintf_r+0x612>
 800d20e:	682b      	ldr	r3, [r5, #0]
 800d210:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d212:	801a      	strh	r2, [r3, #0]
 800d214:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800d216:	e524      	b.n	800cc62 <_svfwprintf_r+0x72>
 800d218:	462a      	mov	r2, r5
 800d21a:	f017 0110 	ands.w	r1, r7, #16
 800d21e:	f852 3b04 	ldr.w	r3, [r2], #4
 800d222:	920a      	str	r2, [sp, #40]	; 0x28
 800d224:	d011      	beq.n	800d24a <_svfwprintf_r+0x65a>
 800d226:	2200      	movs	r2, #0
 800d228:	2100      	movs	r1, #0
 800d22a:	9115      	str	r1, [sp, #84]	; 0x54
 800d22c:	1c66      	adds	r6, r4, #1
 800d22e:	f000 822e 	beq.w	800d68e <_svfwprintf_r+0xa9e>
 800d232:	f027 0180 	bic.w	r1, r7, #128	; 0x80
 800d236:	2b00      	cmp	r3, #0
 800d238:	f040 822d 	bne.w	800d696 <_svfwprintf_r+0xaa6>
 800d23c:	2c00      	cmp	r4, #0
 800d23e:	f000 8098 	beq.w	800d372 <_svfwprintf_r+0x782>
 800d242:	2a01      	cmp	r2, #1
 800d244:	f040 822a 	bne.w	800d69c <_svfwprintf_r+0xaac>
 800d248:	e075      	b.n	800d336 <_svfwprintf_r+0x746>
 800d24a:	f017 0240 	ands.w	r2, r7, #64	; 0x40
 800d24e:	d0eb      	beq.n	800d228 <_svfwprintf_r+0x638>
 800d250:	b29b      	uxth	r3, r3
 800d252:	e7e8      	b.n	800d226 <_svfwprintf_r+0x636>
 800d254:	462a      	mov	r2, r5
 800d256:	2178      	movs	r1, #120	; 0x78
 800d258:	f852 3b04 	ldr.w	r3, [r2], #4
 800d25c:	920a      	str	r2, [sp, #40]	; 0x28
 800d25e:	2230      	movs	r2, #48	; 0x30
 800d260:	e9cd 211a 	strd	r2, r1, [sp, #104]	; 0x68
 800d264:	4a9e      	ldr	r2, [pc, #632]	; (800d4e0 <_svfwprintf_r+0x8f0>)
 800d266:	920f      	str	r2, [sp, #60]	; 0x3c
 800d268:	f047 0702 	orr.w	r7, r7, #2
 800d26c:	2202      	movs	r2, #2
 800d26e:	9109      	str	r1, [sp, #36]	; 0x24
 800d270:	e7da      	b.n	800d228 <_svfwprintf_r+0x638>
 800d272:	462b      	mov	r3, r5
 800d274:	2600      	movs	r6, #0
 800d276:	f853 ab04 	ldr.w	sl, [r3], #4
 800d27a:	930a      	str	r3, [sp, #40]	; 0x28
 800d27c:	f017 0510 	ands.w	r5, r7, #16
 800d280:	9615      	str	r6, [sp, #84]	; 0x54
 800d282:	d12d      	bne.n	800d2e0 <_svfwprintf_r+0x6f0>
 800d284:	1c62      	adds	r2, r4, #1
 800d286:	d014      	beq.n	800d2b2 <_svfwprintf_r+0x6c2>
 800d288:	4622      	mov	r2, r4
 800d28a:	4629      	mov	r1, r5
 800d28c:	4650      	mov	r0, sl
 800d28e:	4626      	mov	r6, r4
 800d290:	f7f2 ffb6 	bl	8000200 <memchr>
 800d294:	b108      	cbz	r0, 800d29a <_svfwprintf_r+0x6aa>
 800d296:	eba0 060a 	sub.w	r6, r0, sl
 800d29a:	2e27      	cmp	r6, #39	; 0x27
 800d29c:	d90e      	bls.n	800d2bc <_svfwprintf_r+0x6cc>
 800d29e:	1c71      	adds	r1, r6, #1
 800d2a0:	0089      	lsls	r1, r1, #2
 800d2a2:	4658      	mov	r0, fp
 800d2a4:	f7fc fca8 	bl	8009bf8 <_malloc_r>
 800d2a8:	2800      	cmp	r0, #0
 800d2aa:	f43f add1 	beq.w	800ce50 <_svfwprintf_r+0x260>
 800d2ae:	4680      	mov	r8, r0
 800d2b0:	e007      	b.n	800d2c2 <_svfwprintf_r+0x6d2>
 800d2b2:	4650      	mov	r0, sl
 800d2b4:	f7f2 ff96 	bl	80001e4 <strlen>
 800d2b8:	4606      	mov	r6, r0
 800d2ba:	e7ee      	b.n	800d29a <_svfwprintf_r+0x6aa>
 800d2bc:	f04f 0800 	mov.w	r8, #0
 800d2c0:	a82a      	add	r0, sp, #168	; 0xa8
 800d2c2:	4634      	mov	r4, r6
 800d2c4:	2300      	movs	r3, #0
 800d2c6:	42b3      	cmp	r3, r6
 800d2c8:	d104      	bne.n	800d2d4 <_svfwprintf_r+0x6e4>
 800d2ca:	2600      	movs	r6, #0
 800d2cc:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 800d2d0:	4682      	mov	sl, r0
 800d2d2:	e6dc      	b.n	800d08e <_svfwprintf_r+0x49e>
 800d2d4:	f81a 2003 	ldrb.w	r2, [sl, r3]
 800d2d8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 800d2dc:	3301      	adds	r3, #1
 800d2de:	e7f2      	b.n	800d2c6 <_svfwprintf_r+0x6d6>
 800d2e0:	1c63      	adds	r3, r4, #1
 800d2e2:	d011      	beq.n	800d308 <_svfwprintf_r+0x718>
 800d2e4:	4622      	mov	r2, r4
 800d2e6:	4631      	mov	r1, r6
 800d2e8:	4650      	mov	r0, sl
 800d2ea:	f000 fa3e 	bl	800d76a <wmemchr>
 800d2ee:	4680      	mov	r8, r0
 800d2f0:	2800      	cmp	r0, #0
 800d2f2:	f43f ae1a 	beq.w	800cf2a <_svfwprintf_r+0x33a>
 800d2f6:	eba0 080a 	sub.w	r8, r0, sl
 800d2fa:	ea4f 08a8 	mov.w	r8, r8, asr #2
 800d2fe:	4544      	cmp	r4, r8
 800d300:	bfa8      	it	ge
 800d302:	4644      	movge	r4, r8
 800d304:	46b0      	mov	r8, r6
 800d306:	e610      	b.n	800cf2a <_svfwprintf_r+0x33a>
 800d308:	4650      	mov	r0, sl
 800d30a:	f000 fa25 	bl	800d758 <wcslen>
 800d30e:	4604      	mov	r4, r0
 800d310:	e7f8      	b.n	800d304 <_svfwprintf_r+0x714>
 800d312:	462a      	mov	r2, r5
 800d314:	06fe      	lsls	r6, r7, #27
 800d316:	f852 3b04 	ldr.w	r3, [r2], #4
 800d31a:	920a      	str	r2, [sp, #40]	; 0x28
 800d31c:	d501      	bpl.n	800d322 <_svfwprintf_r+0x732>
 800d31e:	2201      	movs	r2, #1
 800d320:	e782      	b.n	800d228 <_svfwprintf_r+0x638>
 800d322:	067d      	lsls	r5, r7, #25
 800d324:	bf48      	it	mi
 800d326:	b29b      	uxthmi	r3, r3
 800d328:	e7f9      	b.n	800d31e <_svfwprintf_r+0x72e>
 800d32a:	b101      	cbz	r1, 800d32e <_svfwprintf_r+0x73e>
 800d32c:	9615      	str	r6, [sp, #84]	; 0x54
 800d32e:	4b6d      	ldr	r3, [pc, #436]	; (800d4e4 <_svfwprintf_r+0x8f4>)
 800d330:	e522      	b.n	800cd78 <_svfwprintf_r+0x188>
 800d332:	2b09      	cmp	r3, #9
 800d334:	d804      	bhi.n	800d340 <_svfwprintf_r+0x750>
 800d336:	3330      	adds	r3, #48	; 0x30
 800d338:	9351      	str	r3, [sp, #324]	; 0x144
 800d33a:	f50d 7aa2 	add.w	sl, sp, #324	; 0x144
 800d33e:	e1c3      	b.n	800d6c8 <_svfwprintf_r+0xad8>
 800d340:	f50d 7aa4 	add.w	sl, sp, #328	; 0x148
 800d344:	250a      	movs	r5, #10
 800d346:	fbb3 f0f5 	udiv	r0, r3, r5
 800d34a:	fb05 3210 	mls	r2, r5, r0, r3
 800d34e:	3230      	adds	r2, #48	; 0x30
 800d350:	f84a 2d04 	str.w	r2, [sl, #-4]!
 800d354:	461a      	mov	r2, r3
 800d356:	2a09      	cmp	r2, #9
 800d358:	4603      	mov	r3, r0
 800d35a:	d8f4      	bhi.n	800d346 <_svfwprintf_r+0x756>
 800d35c:	e1b4      	b.n	800d6c8 <_svfwprintf_r+0xad8>
 800d35e:	f003 020f 	and.w	r2, r3, #15
 800d362:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800d364:	091b      	lsrs	r3, r3, #4
 800d366:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800d36a:	f84a 2d04 	str.w	r2, [sl, #-4]!
 800d36e:	d1f6      	bne.n	800d35e <_svfwprintf_r+0x76e>
 800d370:	e1aa      	b.n	800d6c8 <_svfwprintf_r+0xad8>
 800d372:	b91a      	cbnz	r2, 800d37c <_svfwprintf_r+0x78c>
 800d374:	07f8      	lsls	r0, r7, #31
 800d376:	d501      	bpl.n	800d37c <_svfwprintf_r+0x78c>
 800d378:	2330      	movs	r3, #48	; 0x30
 800d37a:	e7dd      	b.n	800d338 <_svfwprintf_r+0x748>
 800d37c:	f50d 7aa4 	add.w	sl, sp, #328	; 0x148
 800d380:	e1a2      	b.n	800d6c8 <_svfwprintf_r+0xad8>
 800d382:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800d384:	e683      	b.n	800d08e <_svfwprintf_r+0x49e>
 800d386:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d388:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d38a:	1a9b      	subs	r3, r3, r2
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	9310      	str	r3, [sp, #64]	; 0x40
 800d390:	f77f ae93 	ble.w	800d0ba <_svfwprintf_r+0x4ca>
 800d394:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d396:	2b10      	cmp	r3, #16
 800d398:	dc11      	bgt.n	800d3be <_svfwprintf_r+0x7ce>
 800d39a:	4a53      	ldr	r2, [pc, #332]	; (800d4e8 <_svfwprintf_r+0x8f8>)
 800d39c:	009b      	lsls	r3, r3, #2
 800d39e:	4649      	mov	r1, r9
 800d3a0:	4658      	mov	r0, fp
 800d3a2:	f000 fac6 	bl	800d932 <__ssputs_r>
 800d3a6:	3001      	adds	r0, #1
 800d3a8:	f47f ae87 	bne.w	800d0ba <_svfwprintf_r+0x4ca>
 800d3ac:	f1b8 0f00 	cmp.w	r8, #0
 800d3b0:	f43f ad54 	beq.w	800ce5c <_svfwprintf_r+0x26c>
 800d3b4:	4641      	mov	r1, r8
 800d3b6:	4658      	mov	r0, fp
 800d3b8:	f7fc fbb2 	bl	8009b20 <_free_r>
 800d3bc:	e54e      	b.n	800ce5c <_svfwprintf_r+0x26c>
 800d3be:	4a4a      	ldr	r2, [pc, #296]	; (800d4e8 <_svfwprintf_r+0x8f8>)
 800d3c0:	2340      	movs	r3, #64	; 0x40
 800d3c2:	4649      	mov	r1, r9
 800d3c4:	4658      	mov	r0, fp
 800d3c6:	f000 fab4 	bl	800d932 <__ssputs_r>
 800d3ca:	3001      	adds	r0, #1
 800d3cc:	d0ee      	beq.n	800d3ac <_svfwprintf_r+0x7bc>
 800d3ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d3d0:	3b10      	subs	r3, #16
 800d3d2:	9310      	str	r3, [sp, #64]	; 0x40
 800d3d4:	e7de      	b.n	800d394 <_svfwprintf_r+0x7a4>
 800d3d6:	2340      	movs	r3, #64	; 0x40
 800d3d8:	4649      	mov	r1, r9
 800d3da:	4658      	mov	r0, fp
 800d3dc:	f000 faa9 	bl	800d932 <__ssputs_r>
 800d3e0:	3001      	adds	r0, #1
 800d3e2:	d0e3      	beq.n	800d3ac <_svfwprintf_r+0x7bc>
 800d3e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d3e6:	3b10      	subs	r3, #16
 800d3e8:	9310      	str	r3, [sp, #64]	; 0x40
 800d3ea:	e685      	b.n	800d0f8 <_svfwprintf_r+0x508>
 800d3ec:	2340      	movs	r3, #64	; 0x40
 800d3ee:	4649      	mov	r1, r9
 800d3f0:	4658      	mov	r0, fp
 800d3f2:	f000 fa9e 	bl	800d932 <__ssputs_r>
 800d3f6:	3001      	adds	r0, #1
 800d3f8:	d0d8      	beq.n	800d3ac <_svfwprintf_r+0x7bc>
 800d3fa:	3e10      	subs	r6, #16
 800d3fc:	e68d      	b.n	800d11a <_svfwprintf_r+0x52a>
 800d3fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d400:	2b65      	cmp	r3, #101	; 0x65
 800d402:	f240 80e5 	bls.w	800d5d0 <_svfwprintf_r+0x9e0>
 800d406:	ec51 0b18 	vmov	r0, r1, d8
 800d40a:	2200      	movs	r2, #0
 800d40c:	2300      	movs	r3, #0
 800d40e:	f7f3 fb6b 	bl	8000ae8 <__aeabi_dcmpeq>
 800d412:	b358      	cbz	r0, 800d46c <_svfwprintf_r+0x87c>
 800d414:	4a35      	ldr	r2, [pc, #212]	; (800d4ec <_svfwprintf_r+0x8fc>)
 800d416:	2304      	movs	r3, #4
 800d418:	4649      	mov	r1, r9
 800d41a:	4658      	mov	r0, fp
 800d41c:	f000 fa89 	bl	800d932 <__ssputs_r>
 800d420:	3001      	adds	r0, #1
 800d422:	d0c3      	beq.n	800d3ac <_svfwprintf_r+0x7bc>
 800d424:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800d428:	429a      	cmp	r2, r3
 800d42a:	db02      	blt.n	800d432 <_svfwprintf_r+0x842>
 800d42c:	07fb      	lsls	r3, r7, #31
 800d42e:	f57f ae8d 	bpl.w	800d14c <_svfwprintf_r+0x55c>
 800d432:	2304      	movs	r3, #4
 800d434:	aa16      	add	r2, sp, #88	; 0x58
 800d436:	4649      	mov	r1, r9
 800d438:	4658      	mov	r0, fp
 800d43a:	f000 fa7a 	bl	800d932 <__ssputs_r>
 800d43e:	3001      	adds	r0, #1
 800d440:	d0b4      	beq.n	800d3ac <_svfwprintf_r+0x7bc>
 800d442:	9c19      	ldr	r4, [sp, #100]	; 0x64
 800d444:	3c01      	subs	r4, #1
 800d446:	2c00      	cmp	r4, #0
 800d448:	f77f ae80 	ble.w	800d14c <_svfwprintf_r+0x55c>
 800d44c:	4d28      	ldr	r5, [pc, #160]	; (800d4f0 <_svfwprintf_r+0x900>)
 800d44e:	2c10      	cmp	r4, #16
 800d450:	dc02      	bgt.n	800d458 <_svfwprintf_r+0x868>
 800d452:	00a3      	lsls	r3, r4, #2
 800d454:	4a26      	ldr	r2, [pc, #152]	; (800d4f0 <_svfwprintf_r+0x900>)
 800d456:	e672      	b.n	800d13e <_svfwprintf_r+0x54e>
 800d458:	2340      	movs	r3, #64	; 0x40
 800d45a:	462a      	mov	r2, r5
 800d45c:	4649      	mov	r1, r9
 800d45e:	4658      	mov	r0, fp
 800d460:	f000 fa67 	bl	800d932 <__ssputs_r>
 800d464:	3001      	adds	r0, #1
 800d466:	d0a1      	beq.n	800d3ac <_svfwprintf_r+0x7bc>
 800d468:	3c10      	subs	r4, #16
 800d46a:	e7f0      	b.n	800d44e <_svfwprintf_r+0x85e>
 800d46c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800d46e:	2b00      	cmp	r3, #0
 800d470:	dc40      	bgt.n	800d4f4 <_svfwprintf_r+0x904>
 800d472:	4a1e      	ldr	r2, [pc, #120]	; (800d4ec <_svfwprintf_r+0x8fc>)
 800d474:	2304      	movs	r3, #4
 800d476:	4649      	mov	r1, r9
 800d478:	4658      	mov	r0, fp
 800d47a:	f000 fa5a 	bl	800d932 <__ssputs_r>
 800d47e:	3001      	adds	r0, #1
 800d480:	d094      	beq.n	800d3ac <_svfwprintf_r+0x7bc>
 800d482:	e9dd 3218 	ldrd	r3, r2, [sp, #96]	; 0x60
 800d486:	4313      	orrs	r3, r2
 800d488:	f007 0201 	and.w	r2, r7, #1
 800d48c:	4313      	orrs	r3, r2
 800d48e:	f43f ae5d 	beq.w	800d14c <_svfwprintf_r+0x55c>
 800d492:	2304      	movs	r3, #4
 800d494:	aa16      	add	r2, sp, #88	; 0x58
 800d496:	4649      	mov	r1, r9
 800d498:	4658      	mov	r0, fp
 800d49a:	f000 fa4a 	bl	800d932 <__ssputs_r>
 800d49e:	3001      	adds	r0, #1
 800d4a0:	d084      	beq.n	800d3ac <_svfwprintf_r+0x7bc>
 800d4a2:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800d4a4:	2c00      	cmp	r4, #0
 800d4a6:	da0c      	bge.n	800d4c2 <_svfwprintf_r+0x8d2>
 800d4a8:	4d11      	ldr	r5, [pc, #68]	; (800d4f0 <_svfwprintf_r+0x900>)
 800d4aa:	4264      	negs	r4, r4
 800d4ac:	2c10      	cmp	r4, #16
 800d4ae:	dc0b      	bgt.n	800d4c8 <_svfwprintf_r+0x8d8>
 800d4b0:	4a0f      	ldr	r2, [pc, #60]	; (800d4f0 <_svfwprintf_r+0x900>)
 800d4b2:	00a3      	lsls	r3, r4, #2
 800d4b4:	4649      	mov	r1, r9
 800d4b6:	4658      	mov	r0, fp
 800d4b8:	f000 fa3b 	bl	800d932 <__ssputs_r>
 800d4bc:	3001      	adds	r0, #1
 800d4be:	f43f af75 	beq.w	800d3ac <_svfwprintf_r+0x7bc>
 800d4c2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d4c4:	009b      	lsls	r3, r3, #2
 800d4c6:	e639      	b.n	800d13c <_svfwprintf_r+0x54c>
 800d4c8:	2340      	movs	r3, #64	; 0x40
 800d4ca:	462a      	mov	r2, r5
 800d4cc:	4649      	mov	r1, r9
 800d4ce:	4658      	mov	r0, fp
 800d4d0:	f000 fa2f 	bl	800d932 <__ssputs_r>
 800d4d4:	3001      	adds	r0, #1
 800d4d6:	f43f af69 	beq.w	800d3ac <_svfwprintf_r+0x7bc>
 800d4da:	3c10      	subs	r4, #16
 800d4dc:	e7e6      	b.n	800d4ac <_svfwprintf_r+0x8bc>
 800d4de:	bf00      	nop
 800d4e0:	08013204 	.word	0x08013204
 800d4e4:	080131c0 	.word	0x080131c0
 800d4e8:	08013250 	.word	0x08013250
 800d4ec:	08013248 	.word	0x08013248
 800d4f0:	08013290 	.word	0x08013290
 800d4f4:	9c19      	ldr	r4, [sp, #100]	; 0x64
 800d4f6:	f344 041d 	sbfx	r4, r4, #0, #30
 800d4fa:	42ac      	cmp	r4, r5
 800d4fc:	bfa8      	it	ge
 800d4fe:	462c      	movge	r4, r5
 800d500:	2c00      	cmp	r4, #0
 800d502:	dc20      	bgt.n	800d546 <_svfwprintf_r+0x956>
 800d504:	2c00      	cmp	r4, #0
 800d506:	bfac      	ite	ge
 800d508:	1b2e      	subge	r6, r5, r4
 800d50a:	462e      	movlt	r6, r5
 800d50c:	2e00      	cmp	r6, #0
 800d50e:	dd0b      	ble.n	800d528 <_svfwprintf_r+0x938>
 800d510:	4c72      	ldr	r4, [pc, #456]	; (800d6dc <_svfwprintf_r+0xaec>)
 800d512:	2e10      	cmp	r6, #16
 800d514:	dc20      	bgt.n	800d558 <_svfwprintf_r+0x968>
 800d516:	4a71      	ldr	r2, [pc, #452]	; (800d6dc <_svfwprintf_r+0xaec>)
 800d518:	00b3      	lsls	r3, r6, #2
 800d51a:	4649      	mov	r1, r9
 800d51c:	4658      	mov	r0, fp
 800d51e:	f000 fa08 	bl	800d932 <__ssputs_r>
 800d522:	3001      	adds	r0, #1
 800d524:	f43f af42 	beq.w	800d3ac <_svfwprintf_r+0x7bc>
 800d528:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800d52c:	429a      	cmp	r2, r3
 800d52e:	ea4f 0585 	mov.w	r5, r5, lsl #2
 800d532:	da1c      	bge.n	800d56e <_svfwprintf_r+0x97e>
 800d534:	2304      	movs	r3, #4
 800d536:	aa16      	add	r2, sp, #88	; 0x58
 800d538:	4649      	mov	r1, r9
 800d53a:	4658      	mov	r0, fp
 800d53c:	f000 f9f9 	bl	800d932 <__ssputs_r>
 800d540:	3001      	adds	r0, #1
 800d542:	d116      	bne.n	800d572 <_svfwprintf_r+0x982>
 800d544:	e732      	b.n	800d3ac <_svfwprintf_r+0x7bc>
 800d546:	00a3      	lsls	r3, r4, #2
 800d548:	4652      	mov	r2, sl
 800d54a:	4649      	mov	r1, r9
 800d54c:	4658      	mov	r0, fp
 800d54e:	f000 f9f0 	bl	800d932 <__ssputs_r>
 800d552:	3001      	adds	r0, #1
 800d554:	d1d6      	bne.n	800d504 <_svfwprintf_r+0x914>
 800d556:	e729      	b.n	800d3ac <_svfwprintf_r+0x7bc>
 800d558:	2340      	movs	r3, #64	; 0x40
 800d55a:	4622      	mov	r2, r4
 800d55c:	4649      	mov	r1, r9
 800d55e:	4658      	mov	r0, fp
 800d560:	f000 f9e7 	bl	800d932 <__ssputs_r>
 800d564:	3001      	adds	r0, #1
 800d566:	f43f af21 	beq.w	800d3ac <_svfwprintf_r+0x7bc>
 800d56a:	3e10      	subs	r6, #16
 800d56c:	e7d1      	b.n	800d512 <_svfwprintf_r+0x922>
 800d56e:	07fe      	lsls	r6, r7, #31
 800d570:	d4e0      	bmi.n	800d534 <_svfwprintf_r+0x944>
 800d572:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d574:	ebc5 0483 	rsb	r4, r5, r3, lsl #2
 800d578:	10a2      	asrs	r2, r4, #2
 800d57a:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800d57c:	1b1c      	subs	r4, r3, r4
 800d57e:	4294      	cmp	r4, r2
 800d580:	bfa8      	it	ge
 800d582:	4614      	movge	r4, r2
 800d584:	2c00      	cmp	r4, #0
 800d586:	dd09      	ble.n	800d59c <_svfwprintf_r+0x9ac>
 800d588:	00a3      	lsls	r3, r4, #2
 800d58a:	eb0a 0205 	add.w	r2, sl, r5
 800d58e:	4649      	mov	r1, r9
 800d590:	4658      	mov	r0, fp
 800d592:	f000 f9ce 	bl	800d932 <__ssputs_r>
 800d596:	3001      	adds	r0, #1
 800d598:	f43f af08 	beq.w	800d3ac <_svfwprintf_r+0x7bc>
 800d59c:	e9dd 3518 	ldrd	r3, r5, [sp, #96]	; 0x60
 800d5a0:	2c00      	cmp	r4, #0
 800d5a2:	eba5 0503 	sub.w	r5, r5, r3
 800d5a6:	bfa8      	it	ge
 800d5a8:	1b2d      	subge	r5, r5, r4
 800d5aa:	2d00      	cmp	r5, #0
 800d5ac:	f77f adce 	ble.w	800d14c <_svfwprintf_r+0x55c>
 800d5b0:	4c4a      	ldr	r4, [pc, #296]	; (800d6dc <_svfwprintf_r+0xaec>)
 800d5b2:	2d10      	cmp	r5, #16
 800d5b4:	dc01      	bgt.n	800d5ba <_svfwprintf_r+0x9ca>
 800d5b6:	00ab      	lsls	r3, r5, #2
 800d5b8:	e74c      	b.n	800d454 <_svfwprintf_r+0x864>
 800d5ba:	2340      	movs	r3, #64	; 0x40
 800d5bc:	4622      	mov	r2, r4
 800d5be:	4649      	mov	r1, r9
 800d5c0:	4658      	mov	r0, fp
 800d5c2:	f000 f9b6 	bl	800d932 <__ssputs_r>
 800d5c6:	3001      	adds	r0, #1
 800d5c8:	f43f aef0 	beq.w	800d3ac <_svfwprintf_r+0x7bc>
 800d5cc:	3d10      	subs	r5, #16
 800d5ce:	e7f0      	b.n	800d5b2 <_svfwprintf_r+0x9c2>
 800d5d0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d5d2:	2b01      	cmp	r3, #1
 800d5d4:	4652      	mov	r2, sl
 800d5d6:	f04f 0304 	mov.w	r3, #4
 800d5da:	4649      	mov	r1, r9
 800d5dc:	4658      	mov	r0, fp
 800d5de:	dc01      	bgt.n	800d5e4 <_svfwprintf_r+0x9f4>
 800d5e0:	07fc      	lsls	r4, r7, #31
 800d5e2:	d51b      	bpl.n	800d61c <_svfwprintf_r+0xa2c>
 800d5e4:	f000 f9a5 	bl	800d932 <__ssputs_r>
 800d5e8:	3001      	adds	r0, #1
 800d5ea:	f43f aedf 	beq.w	800d3ac <_svfwprintf_r+0x7bc>
 800d5ee:	2304      	movs	r3, #4
 800d5f0:	aa16      	add	r2, sp, #88	; 0x58
 800d5f2:	4649      	mov	r1, r9
 800d5f4:	4658      	mov	r0, fp
 800d5f6:	f000 f99c 	bl	800d932 <__ssputs_r>
 800d5fa:	3001      	adds	r0, #1
 800d5fc:	f43f aed6 	beq.w	800d3ac <_svfwprintf_r+0x7bc>
 800d600:	9c19      	ldr	r4, [sp, #100]	; 0x64
 800d602:	ec51 0b18 	vmov	r0, r1, d8
 800d606:	2200      	movs	r2, #0
 800d608:	2300      	movs	r3, #0
 800d60a:	3c01      	subs	r4, #1
 800d60c:	f7f3 fa6c 	bl	8000ae8 <__aeabi_dcmpeq>
 800d610:	b968      	cbnz	r0, 800d62e <_svfwprintf_r+0xa3e>
 800d612:	00a3      	lsls	r3, r4, #2
 800d614:	f10a 0204 	add.w	r2, sl, #4
 800d618:	4649      	mov	r1, r9
 800d61a:	4658      	mov	r0, fp
 800d61c:	f000 f989 	bl	800d932 <__ssputs_r>
 800d620:	3001      	adds	r0, #1
 800d622:	f43f aec3 	beq.w	800d3ac <_svfwprintf_r+0x7bc>
 800d626:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d628:	aa1c      	add	r2, sp, #112	; 0x70
 800d62a:	009b      	lsls	r3, r3, #2
 800d62c:	e587      	b.n	800d13e <_svfwprintf_r+0x54e>
 800d62e:	2c00      	cmp	r4, #0
 800d630:	ddf9      	ble.n	800d626 <_svfwprintf_r+0xa36>
 800d632:	4d2a      	ldr	r5, [pc, #168]	; (800d6dc <_svfwprintf_r+0xaec>)
 800d634:	2c10      	cmp	r4, #16
 800d636:	dc02      	bgt.n	800d63e <_svfwprintf_r+0xa4e>
 800d638:	4a28      	ldr	r2, [pc, #160]	; (800d6dc <_svfwprintf_r+0xaec>)
 800d63a:	00a3      	lsls	r3, r4, #2
 800d63c:	e7ec      	b.n	800d618 <_svfwprintf_r+0xa28>
 800d63e:	2340      	movs	r3, #64	; 0x40
 800d640:	462a      	mov	r2, r5
 800d642:	4649      	mov	r1, r9
 800d644:	4658      	mov	r0, fp
 800d646:	f000 f974 	bl	800d932 <__ssputs_r>
 800d64a:	3001      	adds	r0, #1
 800d64c:	f43f aeae 	beq.w	800d3ac <_svfwprintf_r+0x7bc>
 800d650:	3c10      	subs	r4, #16
 800d652:	e7ef      	b.n	800d634 <_svfwprintf_r+0xa44>
 800d654:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d656:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d658:	1a9c      	subs	r4, r3, r2
 800d65a:	2c00      	cmp	r4, #0
 800d65c:	f77f ad79 	ble.w	800d152 <_svfwprintf_r+0x562>
 800d660:	2c10      	cmp	r4, #16
 800d662:	dc09      	bgt.n	800d678 <_svfwprintf_r+0xa88>
 800d664:	4a1e      	ldr	r2, [pc, #120]	; (800d6e0 <_svfwprintf_r+0xaf0>)
 800d666:	00a3      	lsls	r3, r4, #2
 800d668:	4649      	mov	r1, r9
 800d66a:	4658      	mov	r0, fp
 800d66c:	f000 f961 	bl	800d932 <__ssputs_r>
 800d670:	3001      	adds	r0, #1
 800d672:	f47f ad6e 	bne.w	800d152 <_svfwprintf_r+0x562>
 800d676:	e699      	b.n	800d3ac <_svfwprintf_r+0x7bc>
 800d678:	4a19      	ldr	r2, [pc, #100]	; (800d6e0 <_svfwprintf_r+0xaf0>)
 800d67a:	2340      	movs	r3, #64	; 0x40
 800d67c:	4649      	mov	r1, r9
 800d67e:	4658      	mov	r0, fp
 800d680:	f000 f957 	bl	800d932 <__ssputs_r>
 800d684:	3001      	adds	r0, #1
 800d686:	f43f ae91 	beq.w	800d3ac <_svfwprintf_r+0x7bc>
 800d68a:	3c10      	subs	r4, #16
 800d68c:	e7e8      	b.n	800d660 <_svfwprintf_r+0xa70>
 800d68e:	4639      	mov	r1, r7
 800d690:	2b00      	cmp	r3, #0
 800d692:	f43f add6 	beq.w	800d242 <_svfwprintf_r+0x652>
 800d696:	2a01      	cmp	r2, #1
 800d698:	f43f ae4b 	beq.w	800d332 <_svfwprintf_r+0x742>
 800d69c:	2a02      	cmp	r2, #2
 800d69e:	f50d 7aa4 	add.w	sl, sp, #328	; 0x148
 800d6a2:	f43f ae5c 	beq.w	800d35e <_svfwprintf_r+0x76e>
 800d6a6:	f003 0207 	and.w	r2, r3, #7
 800d6aa:	3230      	adds	r2, #48	; 0x30
 800d6ac:	08db      	lsrs	r3, r3, #3
 800d6ae:	4650      	mov	r0, sl
 800d6b0:	f84a 2d04 	str.w	r2, [sl, #-4]!
 800d6b4:	d1f7      	bne.n	800d6a6 <_svfwprintf_r+0xab6>
 800d6b6:	07cd      	lsls	r5, r1, #31
 800d6b8:	d506      	bpl.n	800d6c8 <_svfwprintf_r+0xad8>
 800d6ba:	2a30      	cmp	r2, #48	; 0x30
 800d6bc:	d004      	beq.n	800d6c8 <_svfwprintf_r+0xad8>
 800d6be:	2330      	movs	r3, #48	; 0x30
 800d6c0:	f84a 3c04 	str.w	r3, [sl, #-4]
 800d6c4:	f1a0 0a08 	sub.w	sl, r0, #8
 800d6c8:	ab52      	add	r3, sp, #328	; 0x148
 800d6ca:	4626      	mov	r6, r4
 800d6cc:	eba3 040a 	sub.w	r4, r3, sl
 800d6d0:	10a4      	asrs	r4, r4, #2
 800d6d2:	460f      	mov	r7, r1
 800d6d4:	f04f 0800 	mov.w	r8, #0
 800d6d8:	4645      	mov	r5, r8
 800d6da:	e4d8      	b.n	800d08e <_svfwprintf_r+0x49e>
 800d6dc:	08013290 	.word	0x08013290
 800d6e0:	08013250 	.word	0x08013250

0800d6e4 <__submore>:
 800d6e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6e8:	460c      	mov	r4, r1
 800d6ea:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800d6ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d6f0:	4299      	cmp	r1, r3
 800d6f2:	d11d      	bne.n	800d730 <__submore+0x4c>
 800d6f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800d6f8:	f7fc fa7e 	bl	8009bf8 <_malloc_r>
 800d6fc:	b918      	cbnz	r0, 800d706 <__submore+0x22>
 800d6fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d702:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d706:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d70a:	63a3      	str	r3, [r4, #56]	; 0x38
 800d70c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800d710:	6360      	str	r0, [r4, #52]	; 0x34
 800d712:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800d716:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800d71a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800d71e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800d722:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800d726:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800d72a:	6020      	str	r0, [r4, #0]
 800d72c:	2000      	movs	r0, #0
 800d72e:	e7e8      	b.n	800d702 <__submore+0x1e>
 800d730:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800d732:	0077      	lsls	r7, r6, #1
 800d734:	463a      	mov	r2, r7
 800d736:	f000 f8cd 	bl	800d8d4 <_realloc_r>
 800d73a:	4605      	mov	r5, r0
 800d73c:	2800      	cmp	r0, #0
 800d73e:	d0de      	beq.n	800d6fe <__submore+0x1a>
 800d740:	eb00 0806 	add.w	r8, r0, r6
 800d744:	4601      	mov	r1, r0
 800d746:	4632      	mov	r2, r6
 800d748:	4640      	mov	r0, r8
 800d74a:	f7fc f9d3 	bl	8009af4 <memcpy>
 800d74e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800d752:	f8c4 8000 	str.w	r8, [r4]
 800d756:	e7e9      	b.n	800d72c <__submore+0x48>

0800d758 <wcslen>:
 800d758:	4602      	mov	r2, r0
 800d75a:	4613      	mov	r3, r2
 800d75c:	3204      	adds	r2, #4
 800d75e:	6819      	ldr	r1, [r3, #0]
 800d760:	2900      	cmp	r1, #0
 800d762:	d1fa      	bne.n	800d75a <wcslen+0x2>
 800d764:	1a18      	subs	r0, r3, r0
 800d766:	1080      	asrs	r0, r0, #2
 800d768:	4770      	bx	lr

0800d76a <wmemchr>:
 800d76a:	b530      	push	{r4, r5, lr}
 800d76c:	2400      	movs	r4, #0
 800d76e:	4294      	cmp	r4, r2
 800d770:	4603      	mov	r3, r0
 800d772:	d102      	bne.n	800d77a <wmemchr+0x10>
 800d774:	2300      	movs	r3, #0
 800d776:	4618      	mov	r0, r3
 800d778:	bd30      	pop	{r4, r5, pc}
 800d77a:	681d      	ldr	r5, [r3, #0]
 800d77c:	428d      	cmp	r5, r1
 800d77e:	f100 0004 	add.w	r0, r0, #4
 800d782:	d0f8      	beq.n	800d776 <wmemchr+0xc>
 800d784:	3401      	adds	r4, #1
 800d786:	e7f2      	b.n	800d76e <wmemchr+0x4>

0800d788 <__assert_func>:
 800d788:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d78a:	4614      	mov	r4, r2
 800d78c:	461a      	mov	r2, r3
 800d78e:	4b09      	ldr	r3, [pc, #36]	; (800d7b4 <__assert_func+0x2c>)
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	4605      	mov	r5, r0
 800d794:	68d8      	ldr	r0, [r3, #12]
 800d796:	b14c      	cbz	r4, 800d7ac <__assert_func+0x24>
 800d798:	4b07      	ldr	r3, [pc, #28]	; (800d7b8 <__assert_func+0x30>)
 800d79a:	9100      	str	r1, [sp, #0]
 800d79c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d7a0:	4906      	ldr	r1, [pc, #24]	; (800d7bc <__assert_func+0x34>)
 800d7a2:	462b      	mov	r3, r5
 800d7a4:	f000 f858 	bl	800d858 <fiprintf>
 800d7a8:	f000 f92b 	bl	800da02 <abort>
 800d7ac:	4b04      	ldr	r3, [pc, #16]	; (800d7c0 <__assert_func+0x38>)
 800d7ae:	461c      	mov	r4, r3
 800d7b0:	e7f3      	b.n	800d79a <__assert_func+0x12>
 800d7b2:	bf00      	nop
 800d7b4:	20000014 	.word	0x20000014
 800d7b8:	080132d0 	.word	0x080132d0
 800d7bc:	080132dd 	.word	0x080132dd
 800d7c0:	0801330b 	.word	0x0801330b

0800d7c4 <btowc>:
 800d7c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d7c6:	1c43      	adds	r3, r0, #1
 800d7c8:	b087      	sub	sp, #28
 800d7ca:	d103      	bne.n	800d7d4 <btowc+0x10>
 800d7cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d7d0:	b007      	add	sp, #28
 800d7d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d7d4:	4d1c      	ldr	r5, [pc, #112]	; (800d848 <btowc+0x84>)
 800d7d6:	f88d 000b 	strb.w	r0, [sp, #11]
 800d7da:	ae04      	add	r6, sp, #16
 800d7dc:	2208      	movs	r2, #8
 800d7de:	2100      	movs	r1, #0
 800d7e0:	4630      	mov	r0, r6
 800d7e2:	f7fc f995 	bl	8009b10 <memset>
 800d7e6:	682f      	ldr	r7, [r5, #0]
 800d7e8:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800d7ea:	b9fc      	cbnz	r4, 800d82c <btowc+0x68>
 800d7ec:	2050      	movs	r0, #80	; 0x50
 800d7ee:	f7fc f971 	bl	8009ad4 <malloc>
 800d7f2:	4602      	mov	r2, r0
 800d7f4:	65b8      	str	r0, [r7, #88]	; 0x58
 800d7f6:	b920      	cbnz	r0, 800d802 <btowc+0x3e>
 800d7f8:	4b14      	ldr	r3, [pc, #80]	; (800d84c <btowc+0x88>)
 800d7fa:	4815      	ldr	r0, [pc, #84]	; (800d850 <btowc+0x8c>)
 800d7fc:	2118      	movs	r1, #24
 800d7fe:	f7ff ffc3 	bl	800d788 <__assert_func>
 800d802:	682b      	ldr	r3, [r5, #0]
 800d804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d806:	e9c3 4400 	strd	r4, r4, [r3]
 800d80a:	e9c3 4402 	strd	r4, r4, [r3, #8]
 800d80e:	e9c3 4404 	strd	r4, r4, [r3, #16]
 800d812:	e9c3 440a 	strd	r4, r4, [r3, #40]	; 0x28
 800d816:	e9c3 440c 	strd	r4, r4, [r3, #48]	; 0x30
 800d81a:	e9c3 440e 	strd	r4, r4, [r3, #56]	; 0x38
 800d81e:	e9c3 4410 	strd	r4, r4, [r3, #64]	; 0x40
 800d822:	e9c3 4412 	strd	r4, r4, [r3, #72]	; 0x48
 800d826:	619c      	str	r4, [r3, #24]
 800d828:	771c      	strb	r4, [r3, #28]
 800d82a:	625c      	str	r4, [r3, #36]	; 0x24
 800d82c:	4b09      	ldr	r3, [pc, #36]	; (800d854 <btowc+0x90>)
 800d82e:	9600      	str	r6, [sp, #0]
 800d830:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
 800d834:	6828      	ldr	r0, [r5, #0]
 800d836:	2301      	movs	r3, #1
 800d838:	f10d 020b 	add.w	r2, sp, #11
 800d83c:	a903      	add	r1, sp, #12
 800d83e:	47a0      	blx	r4
 800d840:	2801      	cmp	r0, #1
 800d842:	d8c3      	bhi.n	800d7cc <btowc+0x8>
 800d844:	9803      	ldr	r0, [sp, #12]
 800d846:	e7c3      	b.n	800d7d0 <btowc+0xc>
 800d848:	20000014 	.word	0x20000014
 800d84c:	08012f77 	.word	0x08012f77
 800d850:	0801330c 	.word	0x0801330c
 800d854:	20000078 	.word	0x20000078

0800d858 <fiprintf>:
 800d858:	b40e      	push	{r1, r2, r3}
 800d85a:	b503      	push	{r0, r1, lr}
 800d85c:	4601      	mov	r1, r0
 800d85e:	ab03      	add	r3, sp, #12
 800d860:	4805      	ldr	r0, [pc, #20]	; (800d878 <fiprintf+0x20>)
 800d862:	f853 2b04 	ldr.w	r2, [r3], #4
 800d866:	6800      	ldr	r0, [r0, #0]
 800d868:	9301      	str	r3, [sp, #4]
 800d86a:	f7fe fd45 	bl	800c2f8 <_vfiprintf_r>
 800d86e:	b002      	add	sp, #8
 800d870:	f85d eb04 	ldr.w	lr, [sp], #4
 800d874:	b003      	add	sp, #12
 800d876:	4770      	bx	lr
 800d878:	20000014 	.word	0x20000014

0800d87c <__ascii_mbtowc>:
 800d87c:	b082      	sub	sp, #8
 800d87e:	b901      	cbnz	r1, 800d882 <__ascii_mbtowc+0x6>
 800d880:	a901      	add	r1, sp, #4
 800d882:	b142      	cbz	r2, 800d896 <__ascii_mbtowc+0x1a>
 800d884:	b14b      	cbz	r3, 800d89a <__ascii_mbtowc+0x1e>
 800d886:	7813      	ldrb	r3, [r2, #0]
 800d888:	600b      	str	r3, [r1, #0]
 800d88a:	7812      	ldrb	r2, [r2, #0]
 800d88c:	1e10      	subs	r0, r2, #0
 800d88e:	bf18      	it	ne
 800d890:	2001      	movne	r0, #1
 800d892:	b002      	add	sp, #8
 800d894:	4770      	bx	lr
 800d896:	4610      	mov	r0, r2
 800d898:	e7fb      	b.n	800d892 <__ascii_mbtowc+0x16>
 800d89a:	f06f 0001 	mvn.w	r0, #1
 800d89e:	e7f8      	b.n	800d892 <__ascii_mbtowc+0x16>

0800d8a0 <memmove>:
 800d8a0:	4288      	cmp	r0, r1
 800d8a2:	b510      	push	{r4, lr}
 800d8a4:	eb01 0402 	add.w	r4, r1, r2
 800d8a8:	d902      	bls.n	800d8b0 <memmove+0x10>
 800d8aa:	4284      	cmp	r4, r0
 800d8ac:	4623      	mov	r3, r4
 800d8ae:	d807      	bhi.n	800d8c0 <memmove+0x20>
 800d8b0:	1e43      	subs	r3, r0, #1
 800d8b2:	42a1      	cmp	r1, r4
 800d8b4:	d008      	beq.n	800d8c8 <memmove+0x28>
 800d8b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d8ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d8be:	e7f8      	b.n	800d8b2 <memmove+0x12>
 800d8c0:	4402      	add	r2, r0
 800d8c2:	4601      	mov	r1, r0
 800d8c4:	428a      	cmp	r2, r1
 800d8c6:	d100      	bne.n	800d8ca <memmove+0x2a>
 800d8c8:	bd10      	pop	{r4, pc}
 800d8ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d8ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d8d2:	e7f7      	b.n	800d8c4 <memmove+0x24>

0800d8d4 <_realloc_r>:
 800d8d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8d8:	4680      	mov	r8, r0
 800d8da:	4614      	mov	r4, r2
 800d8dc:	460e      	mov	r6, r1
 800d8de:	b921      	cbnz	r1, 800d8ea <_realloc_r+0x16>
 800d8e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d8e4:	4611      	mov	r1, r2
 800d8e6:	f7fc b987 	b.w	8009bf8 <_malloc_r>
 800d8ea:	b92a      	cbnz	r2, 800d8f8 <_realloc_r+0x24>
 800d8ec:	f7fc f918 	bl	8009b20 <_free_r>
 800d8f0:	4625      	mov	r5, r4
 800d8f2:	4628      	mov	r0, r5
 800d8f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8f8:	f000 f88a 	bl	800da10 <_malloc_usable_size_r>
 800d8fc:	4284      	cmp	r4, r0
 800d8fe:	4607      	mov	r7, r0
 800d900:	d802      	bhi.n	800d908 <_realloc_r+0x34>
 800d902:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d906:	d812      	bhi.n	800d92e <_realloc_r+0x5a>
 800d908:	4621      	mov	r1, r4
 800d90a:	4640      	mov	r0, r8
 800d90c:	f7fc f974 	bl	8009bf8 <_malloc_r>
 800d910:	4605      	mov	r5, r0
 800d912:	2800      	cmp	r0, #0
 800d914:	d0ed      	beq.n	800d8f2 <_realloc_r+0x1e>
 800d916:	42bc      	cmp	r4, r7
 800d918:	4622      	mov	r2, r4
 800d91a:	4631      	mov	r1, r6
 800d91c:	bf28      	it	cs
 800d91e:	463a      	movcs	r2, r7
 800d920:	f7fc f8e8 	bl	8009af4 <memcpy>
 800d924:	4631      	mov	r1, r6
 800d926:	4640      	mov	r0, r8
 800d928:	f7fc f8fa 	bl	8009b20 <_free_r>
 800d92c:	e7e1      	b.n	800d8f2 <_realloc_r+0x1e>
 800d92e:	4635      	mov	r5, r6
 800d930:	e7df      	b.n	800d8f2 <_realloc_r+0x1e>

0800d932 <__ssputs_r>:
 800d932:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d936:	688e      	ldr	r6, [r1, #8]
 800d938:	429e      	cmp	r6, r3
 800d93a:	4682      	mov	sl, r0
 800d93c:	460c      	mov	r4, r1
 800d93e:	4690      	mov	r8, r2
 800d940:	461f      	mov	r7, r3
 800d942:	d838      	bhi.n	800d9b6 <__ssputs_r+0x84>
 800d944:	898a      	ldrh	r2, [r1, #12]
 800d946:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d94a:	d032      	beq.n	800d9b2 <__ssputs_r+0x80>
 800d94c:	6825      	ldr	r5, [r4, #0]
 800d94e:	6909      	ldr	r1, [r1, #16]
 800d950:	eba5 0901 	sub.w	r9, r5, r1
 800d954:	6965      	ldr	r5, [r4, #20]
 800d956:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d95a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d95e:	3301      	adds	r3, #1
 800d960:	444b      	add	r3, r9
 800d962:	106d      	asrs	r5, r5, #1
 800d964:	429d      	cmp	r5, r3
 800d966:	bf38      	it	cc
 800d968:	461d      	movcc	r5, r3
 800d96a:	0553      	lsls	r3, r2, #21
 800d96c:	d531      	bpl.n	800d9d2 <__ssputs_r+0xa0>
 800d96e:	4629      	mov	r1, r5
 800d970:	f7fc f942 	bl	8009bf8 <_malloc_r>
 800d974:	4606      	mov	r6, r0
 800d976:	b950      	cbnz	r0, 800d98e <__ssputs_r+0x5c>
 800d978:	230c      	movs	r3, #12
 800d97a:	f8ca 3000 	str.w	r3, [sl]
 800d97e:	89a3      	ldrh	r3, [r4, #12]
 800d980:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d984:	81a3      	strh	r3, [r4, #12]
 800d986:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d98a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d98e:	6921      	ldr	r1, [r4, #16]
 800d990:	464a      	mov	r2, r9
 800d992:	f7fc f8af 	bl	8009af4 <memcpy>
 800d996:	89a3      	ldrh	r3, [r4, #12]
 800d998:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d99c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d9a0:	81a3      	strh	r3, [r4, #12]
 800d9a2:	6126      	str	r6, [r4, #16]
 800d9a4:	6165      	str	r5, [r4, #20]
 800d9a6:	444e      	add	r6, r9
 800d9a8:	eba5 0509 	sub.w	r5, r5, r9
 800d9ac:	6026      	str	r6, [r4, #0]
 800d9ae:	60a5      	str	r5, [r4, #8]
 800d9b0:	463e      	mov	r6, r7
 800d9b2:	42be      	cmp	r6, r7
 800d9b4:	d900      	bls.n	800d9b8 <__ssputs_r+0x86>
 800d9b6:	463e      	mov	r6, r7
 800d9b8:	6820      	ldr	r0, [r4, #0]
 800d9ba:	4632      	mov	r2, r6
 800d9bc:	4641      	mov	r1, r8
 800d9be:	f7ff ff6f 	bl	800d8a0 <memmove>
 800d9c2:	68a3      	ldr	r3, [r4, #8]
 800d9c4:	1b9b      	subs	r3, r3, r6
 800d9c6:	60a3      	str	r3, [r4, #8]
 800d9c8:	6823      	ldr	r3, [r4, #0]
 800d9ca:	4433      	add	r3, r6
 800d9cc:	6023      	str	r3, [r4, #0]
 800d9ce:	2000      	movs	r0, #0
 800d9d0:	e7db      	b.n	800d98a <__ssputs_r+0x58>
 800d9d2:	462a      	mov	r2, r5
 800d9d4:	f7ff ff7e 	bl	800d8d4 <_realloc_r>
 800d9d8:	4606      	mov	r6, r0
 800d9da:	2800      	cmp	r0, #0
 800d9dc:	d1e1      	bne.n	800d9a2 <__ssputs_r+0x70>
 800d9de:	6921      	ldr	r1, [r4, #16]
 800d9e0:	4650      	mov	r0, sl
 800d9e2:	f7fc f89d 	bl	8009b20 <_free_r>
 800d9e6:	e7c7      	b.n	800d978 <__ssputs_r+0x46>

0800d9e8 <__ascii_wctomb>:
 800d9e8:	b149      	cbz	r1, 800d9fe <__ascii_wctomb+0x16>
 800d9ea:	2aff      	cmp	r2, #255	; 0xff
 800d9ec:	bf85      	ittet	hi
 800d9ee:	238a      	movhi	r3, #138	; 0x8a
 800d9f0:	6003      	strhi	r3, [r0, #0]
 800d9f2:	700a      	strbls	r2, [r1, #0]
 800d9f4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800d9f8:	bf98      	it	ls
 800d9fa:	2001      	movls	r0, #1
 800d9fc:	4770      	bx	lr
 800d9fe:	4608      	mov	r0, r1
 800da00:	4770      	bx	lr

0800da02 <abort>:
 800da02:	b508      	push	{r3, lr}
 800da04:	2006      	movs	r0, #6
 800da06:	f000 f833 	bl	800da70 <raise>
 800da0a:	2001      	movs	r0, #1
 800da0c:	f7f5 f872 	bl	8002af4 <_exit>

0800da10 <_malloc_usable_size_r>:
 800da10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800da14:	1f18      	subs	r0, r3, #4
 800da16:	2b00      	cmp	r3, #0
 800da18:	bfbc      	itt	lt
 800da1a:	580b      	ldrlt	r3, [r1, r0]
 800da1c:	18c0      	addlt	r0, r0, r3
 800da1e:	4770      	bx	lr

0800da20 <_raise_r>:
 800da20:	291f      	cmp	r1, #31
 800da22:	b538      	push	{r3, r4, r5, lr}
 800da24:	4604      	mov	r4, r0
 800da26:	460d      	mov	r5, r1
 800da28:	d904      	bls.n	800da34 <_raise_r+0x14>
 800da2a:	2316      	movs	r3, #22
 800da2c:	6003      	str	r3, [r0, #0]
 800da2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800da32:	bd38      	pop	{r3, r4, r5, pc}
 800da34:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800da36:	b112      	cbz	r2, 800da3e <_raise_r+0x1e>
 800da38:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800da3c:	b94b      	cbnz	r3, 800da52 <_raise_r+0x32>
 800da3e:	4620      	mov	r0, r4
 800da40:	f000 f830 	bl	800daa4 <_getpid_r>
 800da44:	462a      	mov	r2, r5
 800da46:	4601      	mov	r1, r0
 800da48:	4620      	mov	r0, r4
 800da4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800da4e:	f000 b817 	b.w	800da80 <_kill_r>
 800da52:	2b01      	cmp	r3, #1
 800da54:	d00a      	beq.n	800da6c <_raise_r+0x4c>
 800da56:	1c59      	adds	r1, r3, #1
 800da58:	d103      	bne.n	800da62 <_raise_r+0x42>
 800da5a:	2316      	movs	r3, #22
 800da5c:	6003      	str	r3, [r0, #0]
 800da5e:	2001      	movs	r0, #1
 800da60:	e7e7      	b.n	800da32 <_raise_r+0x12>
 800da62:	2400      	movs	r4, #0
 800da64:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800da68:	4628      	mov	r0, r5
 800da6a:	4798      	blx	r3
 800da6c:	2000      	movs	r0, #0
 800da6e:	e7e0      	b.n	800da32 <_raise_r+0x12>

0800da70 <raise>:
 800da70:	4b02      	ldr	r3, [pc, #8]	; (800da7c <raise+0xc>)
 800da72:	4601      	mov	r1, r0
 800da74:	6818      	ldr	r0, [r3, #0]
 800da76:	f7ff bfd3 	b.w	800da20 <_raise_r>
 800da7a:	bf00      	nop
 800da7c:	20000014 	.word	0x20000014

0800da80 <_kill_r>:
 800da80:	b538      	push	{r3, r4, r5, lr}
 800da82:	4d07      	ldr	r5, [pc, #28]	; (800daa0 <_kill_r+0x20>)
 800da84:	2300      	movs	r3, #0
 800da86:	4604      	mov	r4, r0
 800da88:	4608      	mov	r0, r1
 800da8a:	4611      	mov	r1, r2
 800da8c:	602b      	str	r3, [r5, #0]
 800da8e:	f7f5 f821 	bl	8002ad4 <_kill>
 800da92:	1c43      	adds	r3, r0, #1
 800da94:	d102      	bne.n	800da9c <_kill_r+0x1c>
 800da96:	682b      	ldr	r3, [r5, #0]
 800da98:	b103      	cbz	r3, 800da9c <_kill_r+0x1c>
 800da9a:	6023      	str	r3, [r4, #0]
 800da9c:	bd38      	pop	{r3, r4, r5, pc}
 800da9e:	bf00      	nop
 800daa0:	2000049c 	.word	0x2000049c

0800daa4 <_getpid_r>:
 800daa4:	f7f5 b80e 	b.w	8002ac4 <_getpid>

0800daa8 <exp>:
 800daa8:	b538      	push	{r3, r4, r5, lr}
 800daaa:	ed2d 8b02 	vpush	{d8}
 800daae:	ec55 4b10 	vmov	r4, r5, d0
 800dab2:	f000 f8b1 	bl	800dc18 <__ieee754_exp>
 800dab6:	eeb0 8a40 	vmov.f32	s16, s0
 800daba:	eef0 8a60 	vmov.f32	s17, s1
 800dabe:	ec45 4b10 	vmov	d0, r4, r5
 800dac2:	f001 f846 	bl	800eb52 <finite>
 800dac6:	b168      	cbz	r0, 800dae4 <exp+0x3c>
 800dac8:	a317      	add	r3, pc, #92	; (adr r3, 800db28 <exp+0x80>)
 800daca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dace:	4620      	mov	r0, r4
 800dad0:	4629      	mov	r1, r5
 800dad2:	f7f3 f831 	bl	8000b38 <__aeabi_dcmpgt>
 800dad6:	b160      	cbz	r0, 800daf2 <exp+0x4a>
 800dad8:	f7fb fda0 	bl	800961c <__errno>
 800dadc:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 800db18 <exp+0x70>
 800dae0:	2322      	movs	r3, #34	; 0x22
 800dae2:	6003      	str	r3, [r0, #0]
 800dae4:	eeb0 0a48 	vmov.f32	s0, s16
 800dae8:	eef0 0a68 	vmov.f32	s1, s17
 800daec:	ecbd 8b02 	vpop	{d8}
 800daf0:	bd38      	pop	{r3, r4, r5, pc}
 800daf2:	a30f      	add	r3, pc, #60	; (adr r3, 800db30 <exp+0x88>)
 800daf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daf8:	4620      	mov	r0, r4
 800dafa:	4629      	mov	r1, r5
 800dafc:	f7f2 fffe 	bl	8000afc <__aeabi_dcmplt>
 800db00:	2800      	cmp	r0, #0
 800db02:	d0ef      	beq.n	800dae4 <exp+0x3c>
 800db04:	f7fb fd8a 	bl	800961c <__errno>
 800db08:	2322      	movs	r3, #34	; 0x22
 800db0a:	ed9f 8b05 	vldr	d8, [pc, #20]	; 800db20 <exp+0x78>
 800db0e:	6003      	str	r3, [r0, #0]
 800db10:	e7e8      	b.n	800dae4 <exp+0x3c>
 800db12:	bf00      	nop
 800db14:	f3af 8000 	nop.w
 800db18:	00000000 	.word	0x00000000
 800db1c:	7ff00000 	.word	0x7ff00000
	...
 800db28:	fefa39ef 	.word	0xfefa39ef
 800db2c:	40862e42 	.word	0x40862e42
 800db30:	d52d3051 	.word	0xd52d3051
 800db34:	c0874910 	.word	0xc0874910

0800db38 <pow>:
 800db38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db3a:	ed2d 8b02 	vpush	{d8}
 800db3e:	eeb0 8a40 	vmov.f32	s16, s0
 800db42:	eef0 8a60 	vmov.f32	s17, s1
 800db46:	ec55 4b11 	vmov	r4, r5, d1
 800db4a:	f000 f9e9 	bl	800df20 <__ieee754_pow>
 800db4e:	4622      	mov	r2, r4
 800db50:	462b      	mov	r3, r5
 800db52:	4620      	mov	r0, r4
 800db54:	4629      	mov	r1, r5
 800db56:	ec57 6b10 	vmov	r6, r7, d0
 800db5a:	f7f2 fff7 	bl	8000b4c <__aeabi_dcmpun>
 800db5e:	2800      	cmp	r0, #0
 800db60:	d13b      	bne.n	800dbda <pow+0xa2>
 800db62:	ec51 0b18 	vmov	r0, r1, d8
 800db66:	2200      	movs	r2, #0
 800db68:	2300      	movs	r3, #0
 800db6a:	f7f2 ffbd 	bl	8000ae8 <__aeabi_dcmpeq>
 800db6e:	b1b8      	cbz	r0, 800dba0 <pow+0x68>
 800db70:	2200      	movs	r2, #0
 800db72:	2300      	movs	r3, #0
 800db74:	4620      	mov	r0, r4
 800db76:	4629      	mov	r1, r5
 800db78:	f7f2 ffb6 	bl	8000ae8 <__aeabi_dcmpeq>
 800db7c:	2800      	cmp	r0, #0
 800db7e:	d146      	bne.n	800dc0e <pow+0xd6>
 800db80:	ec45 4b10 	vmov	d0, r4, r5
 800db84:	f000 ffe5 	bl	800eb52 <finite>
 800db88:	b338      	cbz	r0, 800dbda <pow+0xa2>
 800db8a:	2200      	movs	r2, #0
 800db8c:	2300      	movs	r3, #0
 800db8e:	4620      	mov	r0, r4
 800db90:	4629      	mov	r1, r5
 800db92:	f7f2 ffb3 	bl	8000afc <__aeabi_dcmplt>
 800db96:	b300      	cbz	r0, 800dbda <pow+0xa2>
 800db98:	f7fb fd40 	bl	800961c <__errno>
 800db9c:	2322      	movs	r3, #34	; 0x22
 800db9e:	e01b      	b.n	800dbd8 <pow+0xa0>
 800dba0:	ec47 6b10 	vmov	d0, r6, r7
 800dba4:	f000 ffd5 	bl	800eb52 <finite>
 800dba8:	b9e0      	cbnz	r0, 800dbe4 <pow+0xac>
 800dbaa:	eeb0 0a48 	vmov.f32	s0, s16
 800dbae:	eef0 0a68 	vmov.f32	s1, s17
 800dbb2:	f000 ffce 	bl	800eb52 <finite>
 800dbb6:	b1a8      	cbz	r0, 800dbe4 <pow+0xac>
 800dbb8:	ec45 4b10 	vmov	d0, r4, r5
 800dbbc:	f000 ffc9 	bl	800eb52 <finite>
 800dbc0:	b180      	cbz	r0, 800dbe4 <pow+0xac>
 800dbc2:	4632      	mov	r2, r6
 800dbc4:	463b      	mov	r3, r7
 800dbc6:	4630      	mov	r0, r6
 800dbc8:	4639      	mov	r1, r7
 800dbca:	f7f2 ffbf 	bl	8000b4c <__aeabi_dcmpun>
 800dbce:	2800      	cmp	r0, #0
 800dbd0:	d0e2      	beq.n	800db98 <pow+0x60>
 800dbd2:	f7fb fd23 	bl	800961c <__errno>
 800dbd6:	2321      	movs	r3, #33	; 0x21
 800dbd8:	6003      	str	r3, [r0, #0]
 800dbda:	ecbd 8b02 	vpop	{d8}
 800dbde:	ec47 6b10 	vmov	d0, r6, r7
 800dbe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dbe4:	2200      	movs	r2, #0
 800dbe6:	2300      	movs	r3, #0
 800dbe8:	4630      	mov	r0, r6
 800dbea:	4639      	mov	r1, r7
 800dbec:	f7f2 ff7c 	bl	8000ae8 <__aeabi_dcmpeq>
 800dbf0:	2800      	cmp	r0, #0
 800dbf2:	d0f2      	beq.n	800dbda <pow+0xa2>
 800dbf4:	eeb0 0a48 	vmov.f32	s0, s16
 800dbf8:	eef0 0a68 	vmov.f32	s1, s17
 800dbfc:	f000 ffa9 	bl	800eb52 <finite>
 800dc00:	2800      	cmp	r0, #0
 800dc02:	d0ea      	beq.n	800dbda <pow+0xa2>
 800dc04:	ec45 4b10 	vmov	d0, r4, r5
 800dc08:	f000 ffa3 	bl	800eb52 <finite>
 800dc0c:	e7c3      	b.n	800db96 <pow+0x5e>
 800dc0e:	4f01      	ldr	r7, [pc, #4]	; (800dc14 <pow+0xdc>)
 800dc10:	2600      	movs	r6, #0
 800dc12:	e7e2      	b.n	800dbda <pow+0xa2>
 800dc14:	3ff00000 	.word	0x3ff00000

0800dc18 <__ieee754_exp>:
 800dc18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc1c:	ec55 4b10 	vmov	r4, r5, d0
 800dc20:	49b5      	ldr	r1, [pc, #724]	; (800def8 <__ieee754_exp+0x2e0>)
 800dc22:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800dc26:	428b      	cmp	r3, r1
 800dc28:	ed2d 8b04 	vpush	{d8-d9}
 800dc2c:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 800dc30:	d93d      	bls.n	800dcae <__ieee754_exp+0x96>
 800dc32:	49b2      	ldr	r1, [pc, #712]	; (800defc <__ieee754_exp+0x2e4>)
 800dc34:	428b      	cmp	r3, r1
 800dc36:	d918      	bls.n	800dc6a <__ieee754_exp+0x52>
 800dc38:	ee10 3a10 	vmov	r3, s0
 800dc3c:	f3c5 0213 	ubfx	r2, r5, #0, #20
 800dc40:	4313      	orrs	r3, r2
 800dc42:	d009      	beq.n	800dc58 <__ieee754_exp+0x40>
 800dc44:	ee10 2a10 	vmov	r2, s0
 800dc48:	462b      	mov	r3, r5
 800dc4a:	4620      	mov	r0, r4
 800dc4c:	4629      	mov	r1, r5
 800dc4e:	f7f2 fb2d 	bl	80002ac <__adddf3>
 800dc52:	4604      	mov	r4, r0
 800dc54:	460d      	mov	r5, r1
 800dc56:	e002      	b.n	800dc5e <__ieee754_exp+0x46>
 800dc58:	b10e      	cbz	r6, 800dc5e <__ieee754_exp+0x46>
 800dc5a:	2400      	movs	r4, #0
 800dc5c:	2500      	movs	r5, #0
 800dc5e:	ecbd 8b04 	vpop	{d8-d9}
 800dc62:	ec45 4b10 	vmov	d0, r4, r5
 800dc66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc6a:	a38d      	add	r3, pc, #564	; (adr r3, 800dea0 <__ieee754_exp+0x288>)
 800dc6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc70:	ee10 0a10 	vmov	r0, s0
 800dc74:	4629      	mov	r1, r5
 800dc76:	f7f2 ff5f 	bl	8000b38 <__aeabi_dcmpgt>
 800dc7a:	4607      	mov	r7, r0
 800dc7c:	b130      	cbz	r0, 800dc8c <__ieee754_exp+0x74>
 800dc7e:	ecbd 8b04 	vpop	{d8-d9}
 800dc82:	2000      	movs	r0, #0
 800dc84:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc88:	f000 bf51 	b.w	800eb2e <__math_oflow>
 800dc8c:	a386      	add	r3, pc, #536	; (adr r3, 800dea8 <__ieee754_exp+0x290>)
 800dc8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc92:	4620      	mov	r0, r4
 800dc94:	4629      	mov	r1, r5
 800dc96:	f7f2 ff31 	bl	8000afc <__aeabi_dcmplt>
 800dc9a:	2800      	cmp	r0, #0
 800dc9c:	f000 808b 	beq.w	800ddb6 <__ieee754_exp+0x19e>
 800dca0:	ecbd 8b04 	vpop	{d8-d9}
 800dca4:	4638      	mov	r0, r7
 800dca6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dcaa:	f000 bf37 	b.w	800eb1c <__math_uflow>
 800dcae:	4a94      	ldr	r2, [pc, #592]	; (800df00 <__ieee754_exp+0x2e8>)
 800dcb0:	4293      	cmp	r3, r2
 800dcb2:	f240 80ac 	bls.w	800de0e <__ieee754_exp+0x1f6>
 800dcb6:	4a93      	ldr	r2, [pc, #588]	; (800df04 <__ieee754_exp+0x2ec>)
 800dcb8:	4293      	cmp	r3, r2
 800dcba:	d87c      	bhi.n	800ddb6 <__ieee754_exp+0x19e>
 800dcbc:	4b92      	ldr	r3, [pc, #584]	; (800df08 <__ieee754_exp+0x2f0>)
 800dcbe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800dcc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcc6:	ee10 0a10 	vmov	r0, s0
 800dcca:	4629      	mov	r1, r5
 800dccc:	f7f2 faec 	bl	80002a8 <__aeabi_dsub>
 800dcd0:	4b8e      	ldr	r3, [pc, #568]	; (800df0c <__ieee754_exp+0x2f4>)
 800dcd2:	00f7      	lsls	r7, r6, #3
 800dcd4:	443b      	add	r3, r7
 800dcd6:	ed93 7b00 	vldr	d7, [r3]
 800dcda:	f1c6 0a01 	rsb	sl, r6, #1
 800dcde:	4680      	mov	r8, r0
 800dce0:	4689      	mov	r9, r1
 800dce2:	ebaa 0a06 	sub.w	sl, sl, r6
 800dce6:	eeb0 8a47 	vmov.f32	s16, s14
 800dcea:	eef0 8a67 	vmov.f32	s17, s15
 800dcee:	ec53 2b18 	vmov	r2, r3, d8
 800dcf2:	4640      	mov	r0, r8
 800dcf4:	4649      	mov	r1, r9
 800dcf6:	f7f2 fad7 	bl	80002a8 <__aeabi_dsub>
 800dcfa:	4604      	mov	r4, r0
 800dcfc:	460d      	mov	r5, r1
 800dcfe:	4622      	mov	r2, r4
 800dd00:	462b      	mov	r3, r5
 800dd02:	4620      	mov	r0, r4
 800dd04:	4629      	mov	r1, r5
 800dd06:	f7f2 fc87 	bl	8000618 <__aeabi_dmul>
 800dd0a:	a369      	add	r3, pc, #420	; (adr r3, 800deb0 <__ieee754_exp+0x298>)
 800dd0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd10:	4606      	mov	r6, r0
 800dd12:	460f      	mov	r7, r1
 800dd14:	f7f2 fc80 	bl	8000618 <__aeabi_dmul>
 800dd18:	a367      	add	r3, pc, #412	; (adr r3, 800deb8 <__ieee754_exp+0x2a0>)
 800dd1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd1e:	f7f2 fac3 	bl	80002a8 <__aeabi_dsub>
 800dd22:	4632      	mov	r2, r6
 800dd24:	463b      	mov	r3, r7
 800dd26:	f7f2 fc77 	bl	8000618 <__aeabi_dmul>
 800dd2a:	a365      	add	r3, pc, #404	; (adr r3, 800dec0 <__ieee754_exp+0x2a8>)
 800dd2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd30:	f7f2 fabc 	bl	80002ac <__adddf3>
 800dd34:	4632      	mov	r2, r6
 800dd36:	463b      	mov	r3, r7
 800dd38:	f7f2 fc6e 	bl	8000618 <__aeabi_dmul>
 800dd3c:	a362      	add	r3, pc, #392	; (adr r3, 800dec8 <__ieee754_exp+0x2b0>)
 800dd3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd42:	f7f2 fab1 	bl	80002a8 <__aeabi_dsub>
 800dd46:	4632      	mov	r2, r6
 800dd48:	463b      	mov	r3, r7
 800dd4a:	f7f2 fc65 	bl	8000618 <__aeabi_dmul>
 800dd4e:	a360      	add	r3, pc, #384	; (adr r3, 800ded0 <__ieee754_exp+0x2b8>)
 800dd50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd54:	f7f2 faaa 	bl	80002ac <__adddf3>
 800dd58:	4632      	mov	r2, r6
 800dd5a:	463b      	mov	r3, r7
 800dd5c:	f7f2 fc5c 	bl	8000618 <__aeabi_dmul>
 800dd60:	4602      	mov	r2, r0
 800dd62:	460b      	mov	r3, r1
 800dd64:	4620      	mov	r0, r4
 800dd66:	4629      	mov	r1, r5
 800dd68:	f7f2 fa9e 	bl	80002a8 <__aeabi_dsub>
 800dd6c:	4602      	mov	r2, r0
 800dd6e:	460b      	mov	r3, r1
 800dd70:	4606      	mov	r6, r0
 800dd72:	460f      	mov	r7, r1
 800dd74:	4620      	mov	r0, r4
 800dd76:	4629      	mov	r1, r5
 800dd78:	f7f2 fc4e 	bl	8000618 <__aeabi_dmul>
 800dd7c:	ec41 0b19 	vmov	d9, r0, r1
 800dd80:	f1ba 0f00 	cmp.w	sl, #0
 800dd84:	d15d      	bne.n	800de42 <__ieee754_exp+0x22a>
 800dd86:	2200      	movs	r2, #0
 800dd88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800dd8c:	4630      	mov	r0, r6
 800dd8e:	4639      	mov	r1, r7
 800dd90:	f7f2 fa8a 	bl	80002a8 <__aeabi_dsub>
 800dd94:	4602      	mov	r2, r0
 800dd96:	460b      	mov	r3, r1
 800dd98:	ec51 0b19 	vmov	r0, r1, d9
 800dd9c:	f7f2 fd66 	bl	800086c <__aeabi_ddiv>
 800dda0:	4622      	mov	r2, r4
 800dda2:	462b      	mov	r3, r5
 800dda4:	f7f2 fa80 	bl	80002a8 <__aeabi_dsub>
 800dda8:	4602      	mov	r2, r0
 800ddaa:	460b      	mov	r3, r1
 800ddac:	2000      	movs	r0, #0
 800ddae:	4958      	ldr	r1, [pc, #352]	; (800df10 <__ieee754_exp+0x2f8>)
 800ddb0:	f7f2 fa7a 	bl	80002a8 <__aeabi_dsub>
 800ddb4:	e74d      	b.n	800dc52 <__ieee754_exp+0x3a>
 800ddb6:	4857      	ldr	r0, [pc, #348]	; (800df14 <__ieee754_exp+0x2fc>)
 800ddb8:	a347      	add	r3, pc, #284	; (adr r3, 800ded8 <__ieee754_exp+0x2c0>)
 800ddba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddbe:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800ddc2:	4629      	mov	r1, r5
 800ddc4:	4620      	mov	r0, r4
 800ddc6:	f7f2 fc27 	bl	8000618 <__aeabi_dmul>
 800ddca:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ddce:	f7f2 fa6d 	bl	80002ac <__adddf3>
 800ddd2:	f7f2 fed1 	bl	8000b78 <__aeabi_d2iz>
 800ddd6:	4682      	mov	sl, r0
 800ddd8:	f7f2 fbb4 	bl	8000544 <__aeabi_i2d>
 800dddc:	a340      	add	r3, pc, #256	; (adr r3, 800dee0 <__ieee754_exp+0x2c8>)
 800ddde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dde2:	4606      	mov	r6, r0
 800dde4:	460f      	mov	r7, r1
 800dde6:	f7f2 fc17 	bl	8000618 <__aeabi_dmul>
 800ddea:	4602      	mov	r2, r0
 800ddec:	460b      	mov	r3, r1
 800ddee:	4620      	mov	r0, r4
 800ddf0:	4629      	mov	r1, r5
 800ddf2:	f7f2 fa59 	bl	80002a8 <__aeabi_dsub>
 800ddf6:	a33c      	add	r3, pc, #240	; (adr r3, 800dee8 <__ieee754_exp+0x2d0>)
 800ddf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddfc:	4680      	mov	r8, r0
 800ddfe:	4689      	mov	r9, r1
 800de00:	4630      	mov	r0, r6
 800de02:	4639      	mov	r1, r7
 800de04:	f7f2 fc08 	bl	8000618 <__aeabi_dmul>
 800de08:	ec41 0b18 	vmov	d8, r0, r1
 800de0c:	e76f      	b.n	800dcee <__ieee754_exp+0xd6>
 800de0e:	4a42      	ldr	r2, [pc, #264]	; (800df18 <__ieee754_exp+0x300>)
 800de10:	4293      	cmp	r3, r2
 800de12:	d811      	bhi.n	800de38 <__ieee754_exp+0x220>
 800de14:	a336      	add	r3, pc, #216	; (adr r3, 800def0 <__ieee754_exp+0x2d8>)
 800de16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de1a:	ee10 0a10 	vmov	r0, s0
 800de1e:	4629      	mov	r1, r5
 800de20:	f7f2 fa44 	bl	80002ac <__adddf3>
 800de24:	4b3a      	ldr	r3, [pc, #232]	; (800df10 <__ieee754_exp+0x2f8>)
 800de26:	2200      	movs	r2, #0
 800de28:	f7f2 fe86 	bl	8000b38 <__aeabi_dcmpgt>
 800de2c:	b138      	cbz	r0, 800de3e <__ieee754_exp+0x226>
 800de2e:	4b38      	ldr	r3, [pc, #224]	; (800df10 <__ieee754_exp+0x2f8>)
 800de30:	2200      	movs	r2, #0
 800de32:	4620      	mov	r0, r4
 800de34:	4629      	mov	r1, r5
 800de36:	e70a      	b.n	800dc4e <__ieee754_exp+0x36>
 800de38:	f04f 0a00 	mov.w	sl, #0
 800de3c:	e75f      	b.n	800dcfe <__ieee754_exp+0xe6>
 800de3e:	4682      	mov	sl, r0
 800de40:	e75d      	b.n	800dcfe <__ieee754_exp+0xe6>
 800de42:	4632      	mov	r2, r6
 800de44:	463b      	mov	r3, r7
 800de46:	2000      	movs	r0, #0
 800de48:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800de4c:	f7f2 fa2c 	bl	80002a8 <__aeabi_dsub>
 800de50:	4602      	mov	r2, r0
 800de52:	460b      	mov	r3, r1
 800de54:	ec51 0b19 	vmov	r0, r1, d9
 800de58:	f7f2 fd08 	bl	800086c <__aeabi_ddiv>
 800de5c:	4602      	mov	r2, r0
 800de5e:	460b      	mov	r3, r1
 800de60:	ec51 0b18 	vmov	r0, r1, d8
 800de64:	f7f2 fa20 	bl	80002a8 <__aeabi_dsub>
 800de68:	4642      	mov	r2, r8
 800de6a:	464b      	mov	r3, r9
 800de6c:	f7f2 fa1c 	bl	80002a8 <__aeabi_dsub>
 800de70:	4602      	mov	r2, r0
 800de72:	460b      	mov	r3, r1
 800de74:	2000      	movs	r0, #0
 800de76:	4926      	ldr	r1, [pc, #152]	; (800df10 <__ieee754_exp+0x2f8>)
 800de78:	f7f2 fa16 	bl	80002a8 <__aeabi_dsub>
 800de7c:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 800de80:	4592      	cmp	sl, r2
 800de82:	db02      	blt.n	800de8a <__ieee754_exp+0x272>
 800de84:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800de88:	e6e3      	b.n	800dc52 <__ieee754_exp+0x3a>
 800de8a:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 800de8e:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800de92:	2200      	movs	r2, #0
 800de94:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 800de98:	f7f2 fbbe 	bl	8000618 <__aeabi_dmul>
 800de9c:	e6d9      	b.n	800dc52 <__ieee754_exp+0x3a>
 800de9e:	bf00      	nop
 800dea0:	fefa39ef 	.word	0xfefa39ef
 800dea4:	40862e42 	.word	0x40862e42
 800dea8:	d52d3051 	.word	0xd52d3051
 800deac:	c0874910 	.word	0xc0874910
 800deb0:	72bea4d0 	.word	0x72bea4d0
 800deb4:	3e663769 	.word	0x3e663769
 800deb8:	c5d26bf1 	.word	0xc5d26bf1
 800debc:	3ebbbd41 	.word	0x3ebbbd41
 800dec0:	af25de2c 	.word	0xaf25de2c
 800dec4:	3f11566a 	.word	0x3f11566a
 800dec8:	16bebd93 	.word	0x16bebd93
 800decc:	3f66c16c 	.word	0x3f66c16c
 800ded0:	5555553e 	.word	0x5555553e
 800ded4:	3fc55555 	.word	0x3fc55555
 800ded8:	652b82fe 	.word	0x652b82fe
 800dedc:	3ff71547 	.word	0x3ff71547
 800dee0:	fee00000 	.word	0xfee00000
 800dee4:	3fe62e42 	.word	0x3fe62e42
 800dee8:	35793c76 	.word	0x35793c76
 800deec:	3dea39ef 	.word	0x3dea39ef
 800def0:	8800759c 	.word	0x8800759c
 800def4:	7e37e43c 	.word	0x7e37e43c
 800def8:	40862e41 	.word	0x40862e41
 800defc:	7fefffff 	.word	0x7fefffff
 800df00:	3fd62e42 	.word	0x3fd62e42
 800df04:	3ff0a2b1 	.word	0x3ff0a2b1
 800df08:	08013488 	.word	0x08013488
 800df0c:	08013498 	.word	0x08013498
 800df10:	3ff00000 	.word	0x3ff00000
 800df14:	08013478 	.word	0x08013478
 800df18:	3defffff 	.word	0x3defffff
 800df1c:	00000000 	.word	0x00000000

0800df20 <__ieee754_pow>:
 800df20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df24:	ed2d 8b06 	vpush	{d8-d10}
 800df28:	b089      	sub	sp, #36	; 0x24
 800df2a:	ed8d 1b00 	vstr	d1, [sp]
 800df2e:	e9dd 2900 	ldrd	r2, r9, [sp]
 800df32:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800df36:	ea58 0102 	orrs.w	r1, r8, r2
 800df3a:	ec57 6b10 	vmov	r6, r7, d0
 800df3e:	d115      	bne.n	800df6c <__ieee754_pow+0x4c>
 800df40:	19b3      	adds	r3, r6, r6
 800df42:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800df46:	4152      	adcs	r2, r2
 800df48:	4299      	cmp	r1, r3
 800df4a:	4b89      	ldr	r3, [pc, #548]	; (800e170 <__ieee754_pow+0x250>)
 800df4c:	4193      	sbcs	r3, r2
 800df4e:	f080 84d2 	bcs.w	800e8f6 <__ieee754_pow+0x9d6>
 800df52:	e9dd 2300 	ldrd	r2, r3, [sp]
 800df56:	4630      	mov	r0, r6
 800df58:	4639      	mov	r1, r7
 800df5a:	f7f2 f9a7 	bl	80002ac <__adddf3>
 800df5e:	ec41 0b10 	vmov	d0, r0, r1
 800df62:	b009      	add	sp, #36	; 0x24
 800df64:	ecbd 8b06 	vpop	{d8-d10}
 800df68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df6c:	4b81      	ldr	r3, [pc, #516]	; (800e174 <__ieee754_pow+0x254>)
 800df6e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800df72:	429c      	cmp	r4, r3
 800df74:	ee10 aa10 	vmov	sl, s0
 800df78:	463d      	mov	r5, r7
 800df7a:	dc06      	bgt.n	800df8a <__ieee754_pow+0x6a>
 800df7c:	d101      	bne.n	800df82 <__ieee754_pow+0x62>
 800df7e:	2e00      	cmp	r6, #0
 800df80:	d1e7      	bne.n	800df52 <__ieee754_pow+0x32>
 800df82:	4598      	cmp	r8, r3
 800df84:	dc01      	bgt.n	800df8a <__ieee754_pow+0x6a>
 800df86:	d10f      	bne.n	800dfa8 <__ieee754_pow+0x88>
 800df88:	b172      	cbz	r2, 800dfa8 <__ieee754_pow+0x88>
 800df8a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800df8e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800df92:	ea55 050a 	orrs.w	r5, r5, sl
 800df96:	d1dc      	bne.n	800df52 <__ieee754_pow+0x32>
 800df98:	e9dd 3200 	ldrd	r3, r2, [sp]
 800df9c:	18db      	adds	r3, r3, r3
 800df9e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800dfa2:	4152      	adcs	r2, r2
 800dfa4:	429d      	cmp	r5, r3
 800dfa6:	e7d0      	b.n	800df4a <__ieee754_pow+0x2a>
 800dfa8:	2d00      	cmp	r5, #0
 800dfaa:	da3b      	bge.n	800e024 <__ieee754_pow+0x104>
 800dfac:	4b72      	ldr	r3, [pc, #456]	; (800e178 <__ieee754_pow+0x258>)
 800dfae:	4598      	cmp	r8, r3
 800dfb0:	dc51      	bgt.n	800e056 <__ieee754_pow+0x136>
 800dfb2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800dfb6:	4598      	cmp	r8, r3
 800dfb8:	f340 84ac 	ble.w	800e914 <__ieee754_pow+0x9f4>
 800dfbc:	ea4f 5328 	mov.w	r3, r8, asr #20
 800dfc0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800dfc4:	2b14      	cmp	r3, #20
 800dfc6:	dd0f      	ble.n	800dfe8 <__ieee754_pow+0xc8>
 800dfc8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800dfcc:	fa22 f103 	lsr.w	r1, r2, r3
 800dfd0:	fa01 f303 	lsl.w	r3, r1, r3
 800dfd4:	4293      	cmp	r3, r2
 800dfd6:	f040 849d 	bne.w	800e914 <__ieee754_pow+0x9f4>
 800dfda:	f001 0101 	and.w	r1, r1, #1
 800dfde:	f1c1 0302 	rsb	r3, r1, #2
 800dfe2:	9304      	str	r3, [sp, #16]
 800dfe4:	b182      	cbz	r2, 800e008 <__ieee754_pow+0xe8>
 800dfe6:	e05f      	b.n	800e0a8 <__ieee754_pow+0x188>
 800dfe8:	2a00      	cmp	r2, #0
 800dfea:	d15b      	bne.n	800e0a4 <__ieee754_pow+0x184>
 800dfec:	f1c3 0314 	rsb	r3, r3, #20
 800dff0:	fa48 f103 	asr.w	r1, r8, r3
 800dff4:	fa01 f303 	lsl.w	r3, r1, r3
 800dff8:	4543      	cmp	r3, r8
 800dffa:	f040 8488 	bne.w	800e90e <__ieee754_pow+0x9ee>
 800dffe:	f001 0101 	and.w	r1, r1, #1
 800e002:	f1c1 0302 	rsb	r3, r1, #2
 800e006:	9304      	str	r3, [sp, #16]
 800e008:	4b5c      	ldr	r3, [pc, #368]	; (800e17c <__ieee754_pow+0x25c>)
 800e00a:	4598      	cmp	r8, r3
 800e00c:	d132      	bne.n	800e074 <__ieee754_pow+0x154>
 800e00e:	f1b9 0f00 	cmp.w	r9, #0
 800e012:	f280 8478 	bge.w	800e906 <__ieee754_pow+0x9e6>
 800e016:	4959      	ldr	r1, [pc, #356]	; (800e17c <__ieee754_pow+0x25c>)
 800e018:	4632      	mov	r2, r6
 800e01a:	463b      	mov	r3, r7
 800e01c:	2000      	movs	r0, #0
 800e01e:	f7f2 fc25 	bl	800086c <__aeabi_ddiv>
 800e022:	e79c      	b.n	800df5e <__ieee754_pow+0x3e>
 800e024:	2300      	movs	r3, #0
 800e026:	9304      	str	r3, [sp, #16]
 800e028:	2a00      	cmp	r2, #0
 800e02a:	d13d      	bne.n	800e0a8 <__ieee754_pow+0x188>
 800e02c:	4b51      	ldr	r3, [pc, #324]	; (800e174 <__ieee754_pow+0x254>)
 800e02e:	4598      	cmp	r8, r3
 800e030:	d1ea      	bne.n	800e008 <__ieee754_pow+0xe8>
 800e032:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800e036:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800e03a:	ea53 030a 	orrs.w	r3, r3, sl
 800e03e:	f000 845a 	beq.w	800e8f6 <__ieee754_pow+0x9d6>
 800e042:	4b4f      	ldr	r3, [pc, #316]	; (800e180 <__ieee754_pow+0x260>)
 800e044:	429c      	cmp	r4, r3
 800e046:	dd08      	ble.n	800e05a <__ieee754_pow+0x13a>
 800e048:	f1b9 0f00 	cmp.w	r9, #0
 800e04c:	f2c0 8457 	blt.w	800e8fe <__ieee754_pow+0x9de>
 800e050:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e054:	e783      	b.n	800df5e <__ieee754_pow+0x3e>
 800e056:	2302      	movs	r3, #2
 800e058:	e7e5      	b.n	800e026 <__ieee754_pow+0x106>
 800e05a:	f1b9 0f00 	cmp.w	r9, #0
 800e05e:	f04f 0000 	mov.w	r0, #0
 800e062:	f04f 0100 	mov.w	r1, #0
 800e066:	f6bf af7a 	bge.w	800df5e <__ieee754_pow+0x3e>
 800e06a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800e06e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e072:	e774      	b.n	800df5e <__ieee754_pow+0x3e>
 800e074:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800e078:	d106      	bne.n	800e088 <__ieee754_pow+0x168>
 800e07a:	4632      	mov	r2, r6
 800e07c:	463b      	mov	r3, r7
 800e07e:	4630      	mov	r0, r6
 800e080:	4639      	mov	r1, r7
 800e082:	f7f2 fac9 	bl	8000618 <__aeabi_dmul>
 800e086:	e76a      	b.n	800df5e <__ieee754_pow+0x3e>
 800e088:	4b3e      	ldr	r3, [pc, #248]	; (800e184 <__ieee754_pow+0x264>)
 800e08a:	4599      	cmp	r9, r3
 800e08c:	d10c      	bne.n	800e0a8 <__ieee754_pow+0x188>
 800e08e:	2d00      	cmp	r5, #0
 800e090:	db0a      	blt.n	800e0a8 <__ieee754_pow+0x188>
 800e092:	ec47 6b10 	vmov	d0, r6, r7
 800e096:	b009      	add	sp, #36	; 0x24
 800e098:	ecbd 8b06 	vpop	{d8-d10}
 800e09c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0a0:	f000 bc6c 	b.w	800e97c <__ieee754_sqrt>
 800e0a4:	2300      	movs	r3, #0
 800e0a6:	9304      	str	r3, [sp, #16]
 800e0a8:	ec47 6b10 	vmov	d0, r6, r7
 800e0ac:	f000 fd48 	bl	800eb40 <fabs>
 800e0b0:	ec51 0b10 	vmov	r0, r1, d0
 800e0b4:	f1ba 0f00 	cmp.w	sl, #0
 800e0b8:	d129      	bne.n	800e10e <__ieee754_pow+0x1ee>
 800e0ba:	b124      	cbz	r4, 800e0c6 <__ieee754_pow+0x1a6>
 800e0bc:	4b2f      	ldr	r3, [pc, #188]	; (800e17c <__ieee754_pow+0x25c>)
 800e0be:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800e0c2:	429a      	cmp	r2, r3
 800e0c4:	d123      	bne.n	800e10e <__ieee754_pow+0x1ee>
 800e0c6:	f1b9 0f00 	cmp.w	r9, #0
 800e0ca:	da05      	bge.n	800e0d8 <__ieee754_pow+0x1b8>
 800e0cc:	4602      	mov	r2, r0
 800e0ce:	460b      	mov	r3, r1
 800e0d0:	2000      	movs	r0, #0
 800e0d2:	492a      	ldr	r1, [pc, #168]	; (800e17c <__ieee754_pow+0x25c>)
 800e0d4:	f7f2 fbca 	bl	800086c <__aeabi_ddiv>
 800e0d8:	2d00      	cmp	r5, #0
 800e0da:	f6bf af40 	bge.w	800df5e <__ieee754_pow+0x3e>
 800e0de:	9b04      	ldr	r3, [sp, #16]
 800e0e0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800e0e4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e0e8:	4323      	orrs	r3, r4
 800e0ea:	d108      	bne.n	800e0fe <__ieee754_pow+0x1de>
 800e0ec:	4602      	mov	r2, r0
 800e0ee:	460b      	mov	r3, r1
 800e0f0:	4610      	mov	r0, r2
 800e0f2:	4619      	mov	r1, r3
 800e0f4:	f7f2 f8d8 	bl	80002a8 <__aeabi_dsub>
 800e0f8:	4602      	mov	r2, r0
 800e0fa:	460b      	mov	r3, r1
 800e0fc:	e78f      	b.n	800e01e <__ieee754_pow+0xfe>
 800e0fe:	9b04      	ldr	r3, [sp, #16]
 800e100:	2b01      	cmp	r3, #1
 800e102:	f47f af2c 	bne.w	800df5e <__ieee754_pow+0x3e>
 800e106:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e10a:	4619      	mov	r1, r3
 800e10c:	e727      	b.n	800df5e <__ieee754_pow+0x3e>
 800e10e:	0feb      	lsrs	r3, r5, #31
 800e110:	3b01      	subs	r3, #1
 800e112:	9306      	str	r3, [sp, #24]
 800e114:	9a06      	ldr	r2, [sp, #24]
 800e116:	9b04      	ldr	r3, [sp, #16]
 800e118:	4313      	orrs	r3, r2
 800e11a:	d102      	bne.n	800e122 <__ieee754_pow+0x202>
 800e11c:	4632      	mov	r2, r6
 800e11e:	463b      	mov	r3, r7
 800e120:	e7e6      	b.n	800e0f0 <__ieee754_pow+0x1d0>
 800e122:	4b19      	ldr	r3, [pc, #100]	; (800e188 <__ieee754_pow+0x268>)
 800e124:	4598      	cmp	r8, r3
 800e126:	f340 80fb 	ble.w	800e320 <__ieee754_pow+0x400>
 800e12a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800e12e:	4598      	cmp	r8, r3
 800e130:	4b13      	ldr	r3, [pc, #76]	; (800e180 <__ieee754_pow+0x260>)
 800e132:	dd0c      	ble.n	800e14e <__ieee754_pow+0x22e>
 800e134:	429c      	cmp	r4, r3
 800e136:	dc0f      	bgt.n	800e158 <__ieee754_pow+0x238>
 800e138:	f1b9 0f00 	cmp.w	r9, #0
 800e13c:	da0f      	bge.n	800e15e <__ieee754_pow+0x23e>
 800e13e:	2000      	movs	r0, #0
 800e140:	b009      	add	sp, #36	; 0x24
 800e142:	ecbd 8b06 	vpop	{d8-d10}
 800e146:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e14a:	f000 bcf0 	b.w	800eb2e <__math_oflow>
 800e14e:	429c      	cmp	r4, r3
 800e150:	dbf2      	blt.n	800e138 <__ieee754_pow+0x218>
 800e152:	4b0a      	ldr	r3, [pc, #40]	; (800e17c <__ieee754_pow+0x25c>)
 800e154:	429c      	cmp	r4, r3
 800e156:	dd19      	ble.n	800e18c <__ieee754_pow+0x26c>
 800e158:	f1b9 0f00 	cmp.w	r9, #0
 800e15c:	dcef      	bgt.n	800e13e <__ieee754_pow+0x21e>
 800e15e:	2000      	movs	r0, #0
 800e160:	b009      	add	sp, #36	; 0x24
 800e162:	ecbd 8b06 	vpop	{d8-d10}
 800e166:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e16a:	f000 bcd7 	b.w	800eb1c <__math_uflow>
 800e16e:	bf00      	nop
 800e170:	fff00000 	.word	0xfff00000
 800e174:	7ff00000 	.word	0x7ff00000
 800e178:	433fffff 	.word	0x433fffff
 800e17c:	3ff00000 	.word	0x3ff00000
 800e180:	3fefffff 	.word	0x3fefffff
 800e184:	3fe00000 	.word	0x3fe00000
 800e188:	41e00000 	.word	0x41e00000
 800e18c:	4b60      	ldr	r3, [pc, #384]	; (800e310 <__ieee754_pow+0x3f0>)
 800e18e:	2200      	movs	r2, #0
 800e190:	f7f2 f88a 	bl	80002a8 <__aeabi_dsub>
 800e194:	a354      	add	r3, pc, #336	; (adr r3, 800e2e8 <__ieee754_pow+0x3c8>)
 800e196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e19a:	4604      	mov	r4, r0
 800e19c:	460d      	mov	r5, r1
 800e19e:	f7f2 fa3b 	bl	8000618 <__aeabi_dmul>
 800e1a2:	a353      	add	r3, pc, #332	; (adr r3, 800e2f0 <__ieee754_pow+0x3d0>)
 800e1a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1a8:	4606      	mov	r6, r0
 800e1aa:	460f      	mov	r7, r1
 800e1ac:	4620      	mov	r0, r4
 800e1ae:	4629      	mov	r1, r5
 800e1b0:	f7f2 fa32 	bl	8000618 <__aeabi_dmul>
 800e1b4:	4b57      	ldr	r3, [pc, #348]	; (800e314 <__ieee754_pow+0x3f4>)
 800e1b6:	4682      	mov	sl, r0
 800e1b8:	468b      	mov	fp, r1
 800e1ba:	2200      	movs	r2, #0
 800e1bc:	4620      	mov	r0, r4
 800e1be:	4629      	mov	r1, r5
 800e1c0:	f7f2 fa2a 	bl	8000618 <__aeabi_dmul>
 800e1c4:	4602      	mov	r2, r0
 800e1c6:	460b      	mov	r3, r1
 800e1c8:	a14b      	add	r1, pc, #300	; (adr r1, 800e2f8 <__ieee754_pow+0x3d8>)
 800e1ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e1ce:	f7f2 f86b 	bl	80002a8 <__aeabi_dsub>
 800e1d2:	4622      	mov	r2, r4
 800e1d4:	462b      	mov	r3, r5
 800e1d6:	f7f2 fa1f 	bl	8000618 <__aeabi_dmul>
 800e1da:	4602      	mov	r2, r0
 800e1dc:	460b      	mov	r3, r1
 800e1de:	2000      	movs	r0, #0
 800e1e0:	494d      	ldr	r1, [pc, #308]	; (800e318 <__ieee754_pow+0x3f8>)
 800e1e2:	f7f2 f861 	bl	80002a8 <__aeabi_dsub>
 800e1e6:	4622      	mov	r2, r4
 800e1e8:	4680      	mov	r8, r0
 800e1ea:	4689      	mov	r9, r1
 800e1ec:	462b      	mov	r3, r5
 800e1ee:	4620      	mov	r0, r4
 800e1f0:	4629      	mov	r1, r5
 800e1f2:	f7f2 fa11 	bl	8000618 <__aeabi_dmul>
 800e1f6:	4602      	mov	r2, r0
 800e1f8:	460b      	mov	r3, r1
 800e1fa:	4640      	mov	r0, r8
 800e1fc:	4649      	mov	r1, r9
 800e1fe:	f7f2 fa0b 	bl	8000618 <__aeabi_dmul>
 800e202:	a33f      	add	r3, pc, #252	; (adr r3, 800e300 <__ieee754_pow+0x3e0>)
 800e204:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e208:	f7f2 fa06 	bl	8000618 <__aeabi_dmul>
 800e20c:	4602      	mov	r2, r0
 800e20e:	460b      	mov	r3, r1
 800e210:	4650      	mov	r0, sl
 800e212:	4659      	mov	r1, fp
 800e214:	f7f2 f848 	bl	80002a8 <__aeabi_dsub>
 800e218:	4602      	mov	r2, r0
 800e21a:	460b      	mov	r3, r1
 800e21c:	4680      	mov	r8, r0
 800e21e:	4689      	mov	r9, r1
 800e220:	4630      	mov	r0, r6
 800e222:	4639      	mov	r1, r7
 800e224:	f7f2 f842 	bl	80002ac <__adddf3>
 800e228:	2000      	movs	r0, #0
 800e22a:	4632      	mov	r2, r6
 800e22c:	463b      	mov	r3, r7
 800e22e:	4604      	mov	r4, r0
 800e230:	460d      	mov	r5, r1
 800e232:	f7f2 f839 	bl	80002a8 <__aeabi_dsub>
 800e236:	4602      	mov	r2, r0
 800e238:	460b      	mov	r3, r1
 800e23a:	4640      	mov	r0, r8
 800e23c:	4649      	mov	r1, r9
 800e23e:	f7f2 f833 	bl	80002a8 <__aeabi_dsub>
 800e242:	9b04      	ldr	r3, [sp, #16]
 800e244:	9a06      	ldr	r2, [sp, #24]
 800e246:	3b01      	subs	r3, #1
 800e248:	4313      	orrs	r3, r2
 800e24a:	4682      	mov	sl, r0
 800e24c:	468b      	mov	fp, r1
 800e24e:	f040 81e7 	bne.w	800e620 <__ieee754_pow+0x700>
 800e252:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800e308 <__ieee754_pow+0x3e8>
 800e256:	eeb0 8a47 	vmov.f32	s16, s14
 800e25a:	eef0 8a67 	vmov.f32	s17, s15
 800e25e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800e262:	2600      	movs	r6, #0
 800e264:	4632      	mov	r2, r6
 800e266:	463b      	mov	r3, r7
 800e268:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e26c:	f7f2 f81c 	bl	80002a8 <__aeabi_dsub>
 800e270:	4622      	mov	r2, r4
 800e272:	462b      	mov	r3, r5
 800e274:	f7f2 f9d0 	bl	8000618 <__aeabi_dmul>
 800e278:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e27c:	4680      	mov	r8, r0
 800e27e:	4689      	mov	r9, r1
 800e280:	4650      	mov	r0, sl
 800e282:	4659      	mov	r1, fp
 800e284:	f7f2 f9c8 	bl	8000618 <__aeabi_dmul>
 800e288:	4602      	mov	r2, r0
 800e28a:	460b      	mov	r3, r1
 800e28c:	4640      	mov	r0, r8
 800e28e:	4649      	mov	r1, r9
 800e290:	f7f2 f80c 	bl	80002ac <__adddf3>
 800e294:	4632      	mov	r2, r6
 800e296:	463b      	mov	r3, r7
 800e298:	4680      	mov	r8, r0
 800e29a:	4689      	mov	r9, r1
 800e29c:	4620      	mov	r0, r4
 800e29e:	4629      	mov	r1, r5
 800e2a0:	f7f2 f9ba 	bl	8000618 <__aeabi_dmul>
 800e2a4:	460b      	mov	r3, r1
 800e2a6:	4604      	mov	r4, r0
 800e2a8:	460d      	mov	r5, r1
 800e2aa:	4602      	mov	r2, r0
 800e2ac:	4649      	mov	r1, r9
 800e2ae:	4640      	mov	r0, r8
 800e2b0:	f7f1 fffc 	bl	80002ac <__adddf3>
 800e2b4:	4b19      	ldr	r3, [pc, #100]	; (800e31c <__ieee754_pow+0x3fc>)
 800e2b6:	4299      	cmp	r1, r3
 800e2b8:	ec45 4b19 	vmov	d9, r4, r5
 800e2bc:	4606      	mov	r6, r0
 800e2be:	460f      	mov	r7, r1
 800e2c0:	468b      	mov	fp, r1
 800e2c2:	f340 82f1 	ble.w	800e8a8 <__ieee754_pow+0x988>
 800e2c6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800e2ca:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800e2ce:	4303      	orrs	r3, r0
 800e2d0:	f000 81e4 	beq.w	800e69c <__ieee754_pow+0x77c>
 800e2d4:	ec51 0b18 	vmov	r0, r1, d8
 800e2d8:	2200      	movs	r2, #0
 800e2da:	2300      	movs	r3, #0
 800e2dc:	f7f2 fc0e 	bl	8000afc <__aeabi_dcmplt>
 800e2e0:	3800      	subs	r0, #0
 800e2e2:	bf18      	it	ne
 800e2e4:	2001      	movne	r0, #1
 800e2e6:	e72b      	b.n	800e140 <__ieee754_pow+0x220>
 800e2e8:	60000000 	.word	0x60000000
 800e2ec:	3ff71547 	.word	0x3ff71547
 800e2f0:	f85ddf44 	.word	0xf85ddf44
 800e2f4:	3e54ae0b 	.word	0x3e54ae0b
 800e2f8:	55555555 	.word	0x55555555
 800e2fc:	3fd55555 	.word	0x3fd55555
 800e300:	652b82fe 	.word	0x652b82fe
 800e304:	3ff71547 	.word	0x3ff71547
 800e308:	00000000 	.word	0x00000000
 800e30c:	bff00000 	.word	0xbff00000
 800e310:	3ff00000 	.word	0x3ff00000
 800e314:	3fd00000 	.word	0x3fd00000
 800e318:	3fe00000 	.word	0x3fe00000
 800e31c:	408fffff 	.word	0x408fffff
 800e320:	4bd5      	ldr	r3, [pc, #852]	; (800e678 <__ieee754_pow+0x758>)
 800e322:	402b      	ands	r3, r5
 800e324:	2200      	movs	r2, #0
 800e326:	b92b      	cbnz	r3, 800e334 <__ieee754_pow+0x414>
 800e328:	4bd4      	ldr	r3, [pc, #848]	; (800e67c <__ieee754_pow+0x75c>)
 800e32a:	f7f2 f975 	bl	8000618 <__aeabi_dmul>
 800e32e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800e332:	460c      	mov	r4, r1
 800e334:	1523      	asrs	r3, r4, #20
 800e336:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e33a:	4413      	add	r3, r2
 800e33c:	9305      	str	r3, [sp, #20]
 800e33e:	4bd0      	ldr	r3, [pc, #832]	; (800e680 <__ieee754_pow+0x760>)
 800e340:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800e344:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800e348:	429c      	cmp	r4, r3
 800e34a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800e34e:	dd08      	ble.n	800e362 <__ieee754_pow+0x442>
 800e350:	4bcc      	ldr	r3, [pc, #816]	; (800e684 <__ieee754_pow+0x764>)
 800e352:	429c      	cmp	r4, r3
 800e354:	f340 8162 	ble.w	800e61c <__ieee754_pow+0x6fc>
 800e358:	9b05      	ldr	r3, [sp, #20]
 800e35a:	3301      	adds	r3, #1
 800e35c:	9305      	str	r3, [sp, #20]
 800e35e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800e362:	2400      	movs	r4, #0
 800e364:	00e3      	lsls	r3, r4, #3
 800e366:	9307      	str	r3, [sp, #28]
 800e368:	4bc7      	ldr	r3, [pc, #796]	; (800e688 <__ieee754_pow+0x768>)
 800e36a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e36e:	ed93 7b00 	vldr	d7, [r3]
 800e372:	4629      	mov	r1, r5
 800e374:	ec53 2b17 	vmov	r2, r3, d7
 800e378:	eeb0 9a47 	vmov.f32	s18, s14
 800e37c:	eef0 9a67 	vmov.f32	s19, s15
 800e380:	4682      	mov	sl, r0
 800e382:	f7f1 ff91 	bl	80002a8 <__aeabi_dsub>
 800e386:	4652      	mov	r2, sl
 800e388:	4606      	mov	r6, r0
 800e38a:	460f      	mov	r7, r1
 800e38c:	462b      	mov	r3, r5
 800e38e:	ec51 0b19 	vmov	r0, r1, d9
 800e392:	f7f1 ff8b 	bl	80002ac <__adddf3>
 800e396:	4602      	mov	r2, r0
 800e398:	460b      	mov	r3, r1
 800e39a:	2000      	movs	r0, #0
 800e39c:	49bb      	ldr	r1, [pc, #748]	; (800e68c <__ieee754_pow+0x76c>)
 800e39e:	f7f2 fa65 	bl	800086c <__aeabi_ddiv>
 800e3a2:	ec41 0b1a 	vmov	d10, r0, r1
 800e3a6:	4602      	mov	r2, r0
 800e3a8:	460b      	mov	r3, r1
 800e3aa:	4630      	mov	r0, r6
 800e3ac:	4639      	mov	r1, r7
 800e3ae:	f7f2 f933 	bl	8000618 <__aeabi_dmul>
 800e3b2:	2300      	movs	r3, #0
 800e3b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e3b8:	9302      	str	r3, [sp, #8]
 800e3ba:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e3be:	46ab      	mov	fp, r5
 800e3c0:	106d      	asrs	r5, r5, #1
 800e3c2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800e3c6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800e3ca:	ec41 0b18 	vmov	d8, r0, r1
 800e3ce:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800e3d2:	2200      	movs	r2, #0
 800e3d4:	4640      	mov	r0, r8
 800e3d6:	4649      	mov	r1, r9
 800e3d8:	4614      	mov	r4, r2
 800e3da:	461d      	mov	r5, r3
 800e3dc:	f7f2 f91c 	bl	8000618 <__aeabi_dmul>
 800e3e0:	4602      	mov	r2, r0
 800e3e2:	460b      	mov	r3, r1
 800e3e4:	4630      	mov	r0, r6
 800e3e6:	4639      	mov	r1, r7
 800e3e8:	f7f1 ff5e 	bl	80002a8 <__aeabi_dsub>
 800e3ec:	ec53 2b19 	vmov	r2, r3, d9
 800e3f0:	4606      	mov	r6, r0
 800e3f2:	460f      	mov	r7, r1
 800e3f4:	4620      	mov	r0, r4
 800e3f6:	4629      	mov	r1, r5
 800e3f8:	f7f1 ff56 	bl	80002a8 <__aeabi_dsub>
 800e3fc:	4602      	mov	r2, r0
 800e3fe:	460b      	mov	r3, r1
 800e400:	4650      	mov	r0, sl
 800e402:	4659      	mov	r1, fp
 800e404:	f7f1 ff50 	bl	80002a8 <__aeabi_dsub>
 800e408:	4642      	mov	r2, r8
 800e40a:	464b      	mov	r3, r9
 800e40c:	f7f2 f904 	bl	8000618 <__aeabi_dmul>
 800e410:	4602      	mov	r2, r0
 800e412:	460b      	mov	r3, r1
 800e414:	4630      	mov	r0, r6
 800e416:	4639      	mov	r1, r7
 800e418:	f7f1 ff46 	bl	80002a8 <__aeabi_dsub>
 800e41c:	ec53 2b1a 	vmov	r2, r3, d10
 800e420:	f7f2 f8fa 	bl	8000618 <__aeabi_dmul>
 800e424:	ec53 2b18 	vmov	r2, r3, d8
 800e428:	ec41 0b19 	vmov	d9, r0, r1
 800e42c:	ec51 0b18 	vmov	r0, r1, d8
 800e430:	f7f2 f8f2 	bl	8000618 <__aeabi_dmul>
 800e434:	a37c      	add	r3, pc, #496	; (adr r3, 800e628 <__ieee754_pow+0x708>)
 800e436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e43a:	4604      	mov	r4, r0
 800e43c:	460d      	mov	r5, r1
 800e43e:	f7f2 f8eb 	bl	8000618 <__aeabi_dmul>
 800e442:	a37b      	add	r3, pc, #492	; (adr r3, 800e630 <__ieee754_pow+0x710>)
 800e444:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e448:	f7f1 ff30 	bl	80002ac <__adddf3>
 800e44c:	4622      	mov	r2, r4
 800e44e:	462b      	mov	r3, r5
 800e450:	f7f2 f8e2 	bl	8000618 <__aeabi_dmul>
 800e454:	a378      	add	r3, pc, #480	; (adr r3, 800e638 <__ieee754_pow+0x718>)
 800e456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e45a:	f7f1 ff27 	bl	80002ac <__adddf3>
 800e45e:	4622      	mov	r2, r4
 800e460:	462b      	mov	r3, r5
 800e462:	f7f2 f8d9 	bl	8000618 <__aeabi_dmul>
 800e466:	a376      	add	r3, pc, #472	; (adr r3, 800e640 <__ieee754_pow+0x720>)
 800e468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e46c:	f7f1 ff1e 	bl	80002ac <__adddf3>
 800e470:	4622      	mov	r2, r4
 800e472:	462b      	mov	r3, r5
 800e474:	f7f2 f8d0 	bl	8000618 <__aeabi_dmul>
 800e478:	a373      	add	r3, pc, #460	; (adr r3, 800e648 <__ieee754_pow+0x728>)
 800e47a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e47e:	f7f1 ff15 	bl	80002ac <__adddf3>
 800e482:	4622      	mov	r2, r4
 800e484:	462b      	mov	r3, r5
 800e486:	f7f2 f8c7 	bl	8000618 <__aeabi_dmul>
 800e48a:	a371      	add	r3, pc, #452	; (adr r3, 800e650 <__ieee754_pow+0x730>)
 800e48c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e490:	f7f1 ff0c 	bl	80002ac <__adddf3>
 800e494:	4622      	mov	r2, r4
 800e496:	4606      	mov	r6, r0
 800e498:	460f      	mov	r7, r1
 800e49a:	462b      	mov	r3, r5
 800e49c:	4620      	mov	r0, r4
 800e49e:	4629      	mov	r1, r5
 800e4a0:	f7f2 f8ba 	bl	8000618 <__aeabi_dmul>
 800e4a4:	4602      	mov	r2, r0
 800e4a6:	460b      	mov	r3, r1
 800e4a8:	4630      	mov	r0, r6
 800e4aa:	4639      	mov	r1, r7
 800e4ac:	f7f2 f8b4 	bl	8000618 <__aeabi_dmul>
 800e4b0:	4642      	mov	r2, r8
 800e4b2:	4604      	mov	r4, r0
 800e4b4:	460d      	mov	r5, r1
 800e4b6:	464b      	mov	r3, r9
 800e4b8:	ec51 0b18 	vmov	r0, r1, d8
 800e4bc:	f7f1 fef6 	bl	80002ac <__adddf3>
 800e4c0:	ec53 2b19 	vmov	r2, r3, d9
 800e4c4:	f7f2 f8a8 	bl	8000618 <__aeabi_dmul>
 800e4c8:	4622      	mov	r2, r4
 800e4ca:	462b      	mov	r3, r5
 800e4cc:	f7f1 feee 	bl	80002ac <__adddf3>
 800e4d0:	4642      	mov	r2, r8
 800e4d2:	4682      	mov	sl, r0
 800e4d4:	468b      	mov	fp, r1
 800e4d6:	464b      	mov	r3, r9
 800e4d8:	4640      	mov	r0, r8
 800e4da:	4649      	mov	r1, r9
 800e4dc:	f7f2 f89c 	bl	8000618 <__aeabi_dmul>
 800e4e0:	4b6b      	ldr	r3, [pc, #428]	; (800e690 <__ieee754_pow+0x770>)
 800e4e2:	2200      	movs	r2, #0
 800e4e4:	4606      	mov	r6, r0
 800e4e6:	460f      	mov	r7, r1
 800e4e8:	f7f1 fee0 	bl	80002ac <__adddf3>
 800e4ec:	4652      	mov	r2, sl
 800e4ee:	465b      	mov	r3, fp
 800e4f0:	f7f1 fedc 	bl	80002ac <__adddf3>
 800e4f4:	2000      	movs	r0, #0
 800e4f6:	4604      	mov	r4, r0
 800e4f8:	460d      	mov	r5, r1
 800e4fa:	4602      	mov	r2, r0
 800e4fc:	460b      	mov	r3, r1
 800e4fe:	4640      	mov	r0, r8
 800e500:	4649      	mov	r1, r9
 800e502:	f7f2 f889 	bl	8000618 <__aeabi_dmul>
 800e506:	4b62      	ldr	r3, [pc, #392]	; (800e690 <__ieee754_pow+0x770>)
 800e508:	4680      	mov	r8, r0
 800e50a:	4689      	mov	r9, r1
 800e50c:	2200      	movs	r2, #0
 800e50e:	4620      	mov	r0, r4
 800e510:	4629      	mov	r1, r5
 800e512:	f7f1 fec9 	bl	80002a8 <__aeabi_dsub>
 800e516:	4632      	mov	r2, r6
 800e518:	463b      	mov	r3, r7
 800e51a:	f7f1 fec5 	bl	80002a8 <__aeabi_dsub>
 800e51e:	4602      	mov	r2, r0
 800e520:	460b      	mov	r3, r1
 800e522:	4650      	mov	r0, sl
 800e524:	4659      	mov	r1, fp
 800e526:	f7f1 febf 	bl	80002a8 <__aeabi_dsub>
 800e52a:	ec53 2b18 	vmov	r2, r3, d8
 800e52e:	f7f2 f873 	bl	8000618 <__aeabi_dmul>
 800e532:	4622      	mov	r2, r4
 800e534:	4606      	mov	r6, r0
 800e536:	460f      	mov	r7, r1
 800e538:	462b      	mov	r3, r5
 800e53a:	ec51 0b19 	vmov	r0, r1, d9
 800e53e:	f7f2 f86b 	bl	8000618 <__aeabi_dmul>
 800e542:	4602      	mov	r2, r0
 800e544:	460b      	mov	r3, r1
 800e546:	4630      	mov	r0, r6
 800e548:	4639      	mov	r1, r7
 800e54a:	f7f1 feaf 	bl	80002ac <__adddf3>
 800e54e:	4606      	mov	r6, r0
 800e550:	460f      	mov	r7, r1
 800e552:	4602      	mov	r2, r0
 800e554:	460b      	mov	r3, r1
 800e556:	4640      	mov	r0, r8
 800e558:	4649      	mov	r1, r9
 800e55a:	f7f1 fea7 	bl	80002ac <__adddf3>
 800e55e:	a33e      	add	r3, pc, #248	; (adr r3, 800e658 <__ieee754_pow+0x738>)
 800e560:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e564:	2000      	movs	r0, #0
 800e566:	4604      	mov	r4, r0
 800e568:	460d      	mov	r5, r1
 800e56a:	f7f2 f855 	bl	8000618 <__aeabi_dmul>
 800e56e:	4642      	mov	r2, r8
 800e570:	ec41 0b18 	vmov	d8, r0, r1
 800e574:	464b      	mov	r3, r9
 800e576:	4620      	mov	r0, r4
 800e578:	4629      	mov	r1, r5
 800e57a:	f7f1 fe95 	bl	80002a8 <__aeabi_dsub>
 800e57e:	4602      	mov	r2, r0
 800e580:	460b      	mov	r3, r1
 800e582:	4630      	mov	r0, r6
 800e584:	4639      	mov	r1, r7
 800e586:	f7f1 fe8f 	bl	80002a8 <__aeabi_dsub>
 800e58a:	a335      	add	r3, pc, #212	; (adr r3, 800e660 <__ieee754_pow+0x740>)
 800e58c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e590:	f7f2 f842 	bl	8000618 <__aeabi_dmul>
 800e594:	a334      	add	r3, pc, #208	; (adr r3, 800e668 <__ieee754_pow+0x748>)
 800e596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e59a:	4606      	mov	r6, r0
 800e59c:	460f      	mov	r7, r1
 800e59e:	4620      	mov	r0, r4
 800e5a0:	4629      	mov	r1, r5
 800e5a2:	f7f2 f839 	bl	8000618 <__aeabi_dmul>
 800e5a6:	4602      	mov	r2, r0
 800e5a8:	460b      	mov	r3, r1
 800e5aa:	4630      	mov	r0, r6
 800e5ac:	4639      	mov	r1, r7
 800e5ae:	f7f1 fe7d 	bl	80002ac <__adddf3>
 800e5b2:	9a07      	ldr	r2, [sp, #28]
 800e5b4:	4b37      	ldr	r3, [pc, #220]	; (800e694 <__ieee754_pow+0x774>)
 800e5b6:	4413      	add	r3, r2
 800e5b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5bc:	f7f1 fe76 	bl	80002ac <__adddf3>
 800e5c0:	4682      	mov	sl, r0
 800e5c2:	9805      	ldr	r0, [sp, #20]
 800e5c4:	468b      	mov	fp, r1
 800e5c6:	f7f1 ffbd 	bl	8000544 <__aeabi_i2d>
 800e5ca:	9a07      	ldr	r2, [sp, #28]
 800e5cc:	4b32      	ldr	r3, [pc, #200]	; (800e698 <__ieee754_pow+0x778>)
 800e5ce:	4413      	add	r3, r2
 800e5d0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e5d4:	4606      	mov	r6, r0
 800e5d6:	460f      	mov	r7, r1
 800e5d8:	4652      	mov	r2, sl
 800e5da:	465b      	mov	r3, fp
 800e5dc:	ec51 0b18 	vmov	r0, r1, d8
 800e5e0:	f7f1 fe64 	bl	80002ac <__adddf3>
 800e5e4:	4642      	mov	r2, r8
 800e5e6:	464b      	mov	r3, r9
 800e5e8:	f7f1 fe60 	bl	80002ac <__adddf3>
 800e5ec:	4632      	mov	r2, r6
 800e5ee:	463b      	mov	r3, r7
 800e5f0:	f7f1 fe5c 	bl	80002ac <__adddf3>
 800e5f4:	2000      	movs	r0, #0
 800e5f6:	4632      	mov	r2, r6
 800e5f8:	463b      	mov	r3, r7
 800e5fa:	4604      	mov	r4, r0
 800e5fc:	460d      	mov	r5, r1
 800e5fe:	f7f1 fe53 	bl	80002a8 <__aeabi_dsub>
 800e602:	4642      	mov	r2, r8
 800e604:	464b      	mov	r3, r9
 800e606:	f7f1 fe4f 	bl	80002a8 <__aeabi_dsub>
 800e60a:	ec53 2b18 	vmov	r2, r3, d8
 800e60e:	f7f1 fe4b 	bl	80002a8 <__aeabi_dsub>
 800e612:	4602      	mov	r2, r0
 800e614:	460b      	mov	r3, r1
 800e616:	4650      	mov	r0, sl
 800e618:	4659      	mov	r1, fp
 800e61a:	e610      	b.n	800e23e <__ieee754_pow+0x31e>
 800e61c:	2401      	movs	r4, #1
 800e61e:	e6a1      	b.n	800e364 <__ieee754_pow+0x444>
 800e620:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800e670 <__ieee754_pow+0x750>
 800e624:	e617      	b.n	800e256 <__ieee754_pow+0x336>
 800e626:	bf00      	nop
 800e628:	4a454eef 	.word	0x4a454eef
 800e62c:	3fca7e28 	.word	0x3fca7e28
 800e630:	93c9db65 	.word	0x93c9db65
 800e634:	3fcd864a 	.word	0x3fcd864a
 800e638:	a91d4101 	.word	0xa91d4101
 800e63c:	3fd17460 	.word	0x3fd17460
 800e640:	518f264d 	.word	0x518f264d
 800e644:	3fd55555 	.word	0x3fd55555
 800e648:	db6fabff 	.word	0xdb6fabff
 800e64c:	3fdb6db6 	.word	0x3fdb6db6
 800e650:	33333303 	.word	0x33333303
 800e654:	3fe33333 	.word	0x3fe33333
 800e658:	e0000000 	.word	0xe0000000
 800e65c:	3feec709 	.word	0x3feec709
 800e660:	dc3a03fd 	.word	0xdc3a03fd
 800e664:	3feec709 	.word	0x3feec709
 800e668:	145b01f5 	.word	0x145b01f5
 800e66c:	be3e2fe0 	.word	0xbe3e2fe0
 800e670:	00000000 	.word	0x00000000
 800e674:	3ff00000 	.word	0x3ff00000
 800e678:	7ff00000 	.word	0x7ff00000
 800e67c:	43400000 	.word	0x43400000
 800e680:	0003988e 	.word	0x0003988e
 800e684:	000bb679 	.word	0x000bb679
 800e688:	080134a8 	.word	0x080134a8
 800e68c:	3ff00000 	.word	0x3ff00000
 800e690:	40080000 	.word	0x40080000
 800e694:	080134c8 	.word	0x080134c8
 800e698:	080134b8 	.word	0x080134b8
 800e69c:	a3b5      	add	r3, pc, #724	; (adr r3, 800e974 <__ieee754_pow+0xa54>)
 800e69e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6a2:	4640      	mov	r0, r8
 800e6a4:	4649      	mov	r1, r9
 800e6a6:	f7f1 fe01 	bl	80002ac <__adddf3>
 800e6aa:	4622      	mov	r2, r4
 800e6ac:	ec41 0b1a 	vmov	d10, r0, r1
 800e6b0:	462b      	mov	r3, r5
 800e6b2:	4630      	mov	r0, r6
 800e6b4:	4639      	mov	r1, r7
 800e6b6:	f7f1 fdf7 	bl	80002a8 <__aeabi_dsub>
 800e6ba:	4602      	mov	r2, r0
 800e6bc:	460b      	mov	r3, r1
 800e6be:	ec51 0b1a 	vmov	r0, r1, d10
 800e6c2:	f7f2 fa39 	bl	8000b38 <__aeabi_dcmpgt>
 800e6c6:	2800      	cmp	r0, #0
 800e6c8:	f47f ae04 	bne.w	800e2d4 <__ieee754_pow+0x3b4>
 800e6cc:	4aa4      	ldr	r2, [pc, #656]	; (800e960 <__ieee754_pow+0xa40>)
 800e6ce:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e6d2:	4293      	cmp	r3, r2
 800e6d4:	f340 8108 	ble.w	800e8e8 <__ieee754_pow+0x9c8>
 800e6d8:	151b      	asrs	r3, r3, #20
 800e6da:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800e6de:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800e6e2:	fa4a f303 	asr.w	r3, sl, r3
 800e6e6:	445b      	add	r3, fp
 800e6e8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800e6ec:	4e9d      	ldr	r6, [pc, #628]	; (800e964 <__ieee754_pow+0xa44>)
 800e6ee:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800e6f2:	4116      	asrs	r6, r2
 800e6f4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800e6f8:	2000      	movs	r0, #0
 800e6fa:	ea23 0106 	bic.w	r1, r3, r6
 800e6fe:	f1c2 0214 	rsb	r2, r2, #20
 800e702:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800e706:	fa4a fa02 	asr.w	sl, sl, r2
 800e70a:	f1bb 0f00 	cmp.w	fp, #0
 800e70e:	4602      	mov	r2, r0
 800e710:	460b      	mov	r3, r1
 800e712:	4620      	mov	r0, r4
 800e714:	4629      	mov	r1, r5
 800e716:	bfb8      	it	lt
 800e718:	f1ca 0a00 	rsblt	sl, sl, #0
 800e71c:	f7f1 fdc4 	bl	80002a8 <__aeabi_dsub>
 800e720:	ec41 0b19 	vmov	d9, r0, r1
 800e724:	4642      	mov	r2, r8
 800e726:	464b      	mov	r3, r9
 800e728:	ec51 0b19 	vmov	r0, r1, d9
 800e72c:	f7f1 fdbe 	bl	80002ac <__adddf3>
 800e730:	a37b      	add	r3, pc, #492	; (adr r3, 800e920 <__ieee754_pow+0xa00>)
 800e732:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e736:	2000      	movs	r0, #0
 800e738:	4604      	mov	r4, r0
 800e73a:	460d      	mov	r5, r1
 800e73c:	f7f1 ff6c 	bl	8000618 <__aeabi_dmul>
 800e740:	ec53 2b19 	vmov	r2, r3, d9
 800e744:	4606      	mov	r6, r0
 800e746:	460f      	mov	r7, r1
 800e748:	4620      	mov	r0, r4
 800e74a:	4629      	mov	r1, r5
 800e74c:	f7f1 fdac 	bl	80002a8 <__aeabi_dsub>
 800e750:	4602      	mov	r2, r0
 800e752:	460b      	mov	r3, r1
 800e754:	4640      	mov	r0, r8
 800e756:	4649      	mov	r1, r9
 800e758:	f7f1 fda6 	bl	80002a8 <__aeabi_dsub>
 800e75c:	a372      	add	r3, pc, #456	; (adr r3, 800e928 <__ieee754_pow+0xa08>)
 800e75e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e762:	f7f1 ff59 	bl	8000618 <__aeabi_dmul>
 800e766:	a372      	add	r3, pc, #456	; (adr r3, 800e930 <__ieee754_pow+0xa10>)
 800e768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e76c:	4680      	mov	r8, r0
 800e76e:	4689      	mov	r9, r1
 800e770:	4620      	mov	r0, r4
 800e772:	4629      	mov	r1, r5
 800e774:	f7f1 ff50 	bl	8000618 <__aeabi_dmul>
 800e778:	4602      	mov	r2, r0
 800e77a:	460b      	mov	r3, r1
 800e77c:	4640      	mov	r0, r8
 800e77e:	4649      	mov	r1, r9
 800e780:	f7f1 fd94 	bl	80002ac <__adddf3>
 800e784:	4604      	mov	r4, r0
 800e786:	460d      	mov	r5, r1
 800e788:	4602      	mov	r2, r0
 800e78a:	460b      	mov	r3, r1
 800e78c:	4630      	mov	r0, r6
 800e78e:	4639      	mov	r1, r7
 800e790:	f7f1 fd8c 	bl	80002ac <__adddf3>
 800e794:	4632      	mov	r2, r6
 800e796:	463b      	mov	r3, r7
 800e798:	4680      	mov	r8, r0
 800e79a:	4689      	mov	r9, r1
 800e79c:	f7f1 fd84 	bl	80002a8 <__aeabi_dsub>
 800e7a0:	4602      	mov	r2, r0
 800e7a2:	460b      	mov	r3, r1
 800e7a4:	4620      	mov	r0, r4
 800e7a6:	4629      	mov	r1, r5
 800e7a8:	f7f1 fd7e 	bl	80002a8 <__aeabi_dsub>
 800e7ac:	4642      	mov	r2, r8
 800e7ae:	4606      	mov	r6, r0
 800e7b0:	460f      	mov	r7, r1
 800e7b2:	464b      	mov	r3, r9
 800e7b4:	4640      	mov	r0, r8
 800e7b6:	4649      	mov	r1, r9
 800e7b8:	f7f1 ff2e 	bl	8000618 <__aeabi_dmul>
 800e7bc:	a35e      	add	r3, pc, #376	; (adr r3, 800e938 <__ieee754_pow+0xa18>)
 800e7be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7c2:	4604      	mov	r4, r0
 800e7c4:	460d      	mov	r5, r1
 800e7c6:	f7f1 ff27 	bl	8000618 <__aeabi_dmul>
 800e7ca:	a35d      	add	r3, pc, #372	; (adr r3, 800e940 <__ieee754_pow+0xa20>)
 800e7cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7d0:	f7f1 fd6a 	bl	80002a8 <__aeabi_dsub>
 800e7d4:	4622      	mov	r2, r4
 800e7d6:	462b      	mov	r3, r5
 800e7d8:	f7f1 ff1e 	bl	8000618 <__aeabi_dmul>
 800e7dc:	a35a      	add	r3, pc, #360	; (adr r3, 800e948 <__ieee754_pow+0xa28>)
 800e7de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7e2:	f7f1 fd63 	bl	80002ac <__adddf3>
 800e7e6:	4622      	mov	r2, r4
 800e7e8:	462b      	mov	r3, r5
 800e7ea:	f7f1 ff15 	bl	8000618 <__aeabi_dmul>
 800e7ee:	a358      	add	r3, pc, #352	; (adr r3, 800e950 <__ieee754_pow+0xa30>)
 800e7f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7f4:	f7f1 fd58 	bl	80002a8 <__aeabi_dsub>
 800e7f8:	4622      	mov	r2, r4
 800e7fa:	462b      	mov	r3, r5
 800e7fc:	f7f1 ff0c 	bl	8000618 <__aeabi_dmul>
 800e800:	a355      	add	r3, pc, #340	; (adr r3, 800e958 <__ieee754_pow+0xa38>)
 800e802:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e806:	f7f1 fd51 	bl	80002ac <__adddf3>
 800e80a:	4622      	mov	r2, r4
 800e80c:	462b      	mov	r3, r5
 800e80e:	f7f1 ff03 	bl	8000618 <__aeabi_dmul>
 800e812:	4602      	mov	r2, r0
 800e814:	460b      	mov	r3, r1
 800e816:	4640      	mov	r0, r8
 800e818:	4649      	mov	r1, r9
 800e81a:	f7f1 fd45 	bl	80002a8 <__aeabi_dsub>
 800e81e:	4604      	mov	r4, r0
 800e820:	460d      	mov	r5, r1
 800e822:	4602      	mov	r2, r0
 800e824:	460b      	mov	r3, r1
 800e826:	4640      	mov	r0, r8
 800e828:	4649      	mov	r1, r9
 800e82a:	f7f1 fef5 	bl	8000618 <__aeabi_dmul>
 800e82e:	2200      	movs	r2, #0
 800e830:	ec41 0b19 	vmov	d9, r0, r1
 800e834:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e838:	4620      	mov	r0, r4
 800e83a:	4629      	mov	r1, r5
 800e83c:	f7f1 fd34 	bl	80002a8 <__aeabi_dsub>
 800e840:	4602      	mov	r2, r0
 800e842:	460b      	mov	r3, r1
 800e844:	ec51 0b19 	vmov	r0, r1, d9
 800e848:	f7f2 f810 	bl	800086c <__aeabi_ddiv>
 800e84c:	4632      	mov	r2, r6
 800e84e:	4604      	mov	r4, r0
 800e850:	460d      	mov	r5, r1
 800e852:	463b      	mov	r3, r7
 800e854:	4640      	mov	r0, r8
 800e856:	4649      	mov	r1, r9
 800e858:	f7f1 fede 	bl	8000618 <__aeabi_dmul>
 800e85c:	4632      	mov	r2, r6
 800e85e:	463b      	mov	r3, r7
 800e860:	f7f1 fd24 	bl	80002ac <__adddf3>
 800e864:	4602      	mov	r2, r0
 800e866:	460b      	mov	r3, r1
 800e868:	4620      	mov	r0, r4
 800e86a:	4629      	mov	r1, r5
 800e86c:	f7f1 fd1c 	bl	80002a8 <__aeabi_dsub>
 800e870:	4642      	mov	r2, r8
 800e872:	464b      	mov	r3, r9
 800e874:	f7f1 fd18 	bl	80002a8 <__aeabi_dsub>
 800e878:	460b      	mov	r3, r1
 800e87a:	4602      	mov	r2, r0
 800e87c:	493a      	ldr	r1, [pc, #232]	; (800e968 <__ieee754_pow+0xa48>)
 800e87e:	2000      	movs	r0, #0
 800e880:	f7f1 fd12 	bl	80002a8 <__aeabi_dsub>
 800e884:	ec41 0b10 	vmov	d0, r0, r1
 800e888:	ee10 3a90 	vmov	r3, s1
 800e88c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800e890:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e894:	da2b      	bge.n	800e8ee <__ieee754_pow+0x9ce>
 800e896:	4650      	mov	r0, sl
 800e898:	f000 f966 	bl	800eb68 <scalbn>
 800e89c:	ec51 0b10 	vmov	r0, r1, d0
 800e8a0:	ec53 2b18 	vmov	r2, r3, d8
 800e8a4:	f7ff bbed 	b.w	800e082 <__ieee754_pow+0x162>
 800e8a8:	4b30      	ldr	r3, [pc, #192]	; (800e96c <__ieee754_pow+0xa4c>)
 800e8aa:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800e8ae:	429e      	cmp	r6, r3
 800e8b0:	f77f af0c 	ble.w	800e6cc <__ieee754_pow+0x7ac>
 800e8b4:	4b2e      	ldr	r3, [pc, #184]	; (800e970 <__ieee754_pow+0xa50>)
 800e8b6:	440b      	add	r3, r1
 800e8b8:	4303      	orrs	r3, r0
 800e8ba:	d009      	beq.n	800e8d0 <__ieee754_pow+0x9b0>
 800e8bc:	ec51 0b18 	vmov	r0, r1, d8
 800e8c0:	2200      	movs	r2, #0
 800e8c2:	2300      	movs	r3, #0
 800e8c4:	f7f2 f91a 	bl	8000afc <__aeabi_dcmplt>
 800e8c8:	3800      	subs	r0, #0
 800e8ca:	bf18      	it	ne
 800e8cc:	2001      	movne	r0, #1
 800e8ce:	e447      	b.n	800e160 <__ieee754_pow+0x240>
 800e8d0:	4622      	mov	r2, r4
 800e8d2:	462b      	mov	r3, r5
 800e8d4:	f7f1 fce8 	bl	80002a8 <__aeabi_dsub>
 800e8d8:	4642      	mov	r2, r8
 800e8da:	464b      	mov	r3, r9
 800e8dc:	f7f2 f922 	bl	8000b24 <__aeabi_dcmpge>
 800e8e0:	2800      	cmp	r0, #0
 800e8e2:	f43f aef3 	beq.w	800e6cc <__ieee754_pow+0x7ac>
 800e8e6:	e7e9      	b.n	800e8bc <__ieee754_pow+0x99c>
 800e8e8:	f04f 0a00 	mov.w	sl, #0
 800e8ec:	e71a      	b.n	800e724 <__ieee754_pow+0x804>
 800e8ee:	ec51 0b10 	vmov	r0, r1, d0
 800e8f2:	4619      	mov	r1, r3
 800e8f4:	e7d4      	b.n	800e8a0 <__ieee754_pow+0x980>
 800e8f6:	491c      	ldr	r1, [pc, #112]	; (800e968 <__ieee754_pow+0xa48>)
 800e8f8:	2000      	movs	r0, #0
 800e8fa:	f7ff bb30 	b.w	800df5e <__ieee754_pow+0x3e>
 800e8fe:	2000      	movs	r0, #0
 800e900:	2100      	movs	r1, #0
 800e902:	f7ff bb2c 	b.w	800df5e <__ieee754_pow+0x3e>
 800e906:	4630      	mov	r0, r6
 800e908:	4639      	mov	r1, r7
 800e90a:	f7ff bb28 	b.w	800df5e <__ieee754_pow+0x3e>
 800e90e:	9204      	str	r2, [sp, #16]
 800e910:	f7ff bb7a 	b.w	800e008 <__ieee754_pow+0xe8>
 800e914:	2300      	movs	r3, #0
 800e916:	f7ff bb64 	b.w	800dfe2 <__ieee754_pow+0xc2>
 800e91a:	bf00      	nop
 800e91c:	f3af 8000 	nop.w
 800e920:	00000000 	.word	0x00000000
 800e924:	3fe62e43 	.word	0x3fe62e43
 800e928:	fefa39ef 	.word	0xfefa39ef
 800e92c:	3fe62e42 	.word	0x3fe62e42
 800e930:	0ca86c39 	.word	0x0ca86c39
 800e934:	be205c61 	.word	0xbe205c61
 800e938:	72bea4d0 	.word	0x72bea4d0
 800e93c:	3e663769 	.word	0x3e663769
 800e940:	c5d26bf1 	.word	0xc5d26bf1
 800e944:	3ebbbd41 	.word	0x3ebbbd41
 800e948:	af25de2c 	.word	0xaf25de2c
 800e94c:	3f11566a 	.word	0x3f11566a
 800e950:	16bebd93 	.word	0x16bebd93
 800e954:	3f66c16c 	.word	0x3f66c16c
 800e958:	5555553e 	.word	0x5555553e
 800e95c:	3fc55555 	.word	0x3fc55555
 800e960:	3fe00000 	.word	0x3fe00000
 800e964:	000fffff 	.word	0x000fffff
 800e968:	3ff00000 	.word	0x3ff00000
 800e96c:	4090cbff 	.word	0x4090cbff
 800e970:	3f6f3400 	.word	0x3f6f3400
 800e974:	652b82fe 	.word	0x652b82fe
 800e978:	3c971547 	.word	0x3c971547

0800e97c <__ieee754_sqrt>:
 800e97c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e980:	ec55 4b10 	vmov	r4, r5, d0
 800e984:	4e55      	ldr	r6, [pc, #340]	; (800eadc <__ieee754_sqrt+0x160>)
 800e986:	43ae      	bics	r6, r5
 800e988:	ee10 0a10 	vmov	r0, s0
 800e98c:	ee10 3a10 	vmov	r3, s0
 800e990:	462a      	mov	r2, r5
 800e992:	4629      	mov	r1, r5
 800e994:	d110      	bne.n	800e9b8 <__ieee754_sqrt+0x3c>
 800e996:	ee10 2a10 	vmov	r2, s0
 800e99a:	462b      	mov	r3, r5
 800e99c:	f7f1 fe3c 	bl	8000618 <__aeabi_dmul>
 800e9a0:	4602      	mov	r2, r0
 800e9a2:	460b      	mov	r3, r1
 800e9a4:	4620      	mov	r0, r4
 800e9a6:	4629      	mov	r1, r5
 800e9a8:	f7f1 fc80 	bl	80002ac <__adddf3>
 800e9ac:	4604      	mov	r4, r0
 800e9ae:	460d      	mov	r5, r1
 800e9b0:	ec45 4b10 	vmov	d0, r4, r5
 800e9b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9b8:	2d00      	cmp	r5, #0
 800e9ba:	dc10      	bgt.n	800e9de <__ieee754_sqrt+0x62>
 800e9bc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e9c0:	4330      	orrs	r0, r6
 800e9c2:	d0f5      	beq.n	800e9b0 <__ieee754_sqrt+0x34>
 800e9c4:	b15d      	cbz	r5, 800e9de <__ieee754_sqrt+0x62>
 800e9c6:	ee10 2a10 	vmov	r2, s0
 800e9ca:	462b      	mov	r3, r5
 800e9cc:	ee10 0a10 	vmov	r0, s0
 800e9d0:	f7f1 fc6a 	bl	80002a8 <__aeabi_dsub>
 800e9d4:	4602      	mov	r2, r0
 800e9d6:	460b      	mov	r3, r1
 800e9d8:	f7f1 ff48 	bl	800086c <__aeabi_ddiv>
 800e9dc:	e7e6      	b.n	800e9ac <__ieee754_sqrt+0x30>
 800e9de:	1512      	asrs	r2, r2, #20
 800e9e0:	d074      	beq.n	800eacc <__ieee754_sqrt+0x150>
 800e9e2:	07d4      	lsls	r4, r2, #31
 800e9e4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800e9e8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800e9ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800e9f0:	bf5e      	ittt	pl
 800e9f2:	0fda      	lsrpl	r2, r3, #31
 800e9f4:	005b      	lslpl	r3, r3, #1
 800e9f6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800e9fa:	2400      	movs	r4, #0
 800e9fc:	0fda      	lsrs	r2, r3, #31
 800e9fe:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800ea02:	107f      	asrs	r7, r7, #1
 800ea04:	005b      	lsls	r3, r3, #1
 800ea06:	2516      	movs	r5, #22
 800ea08:	4620      	mov	r0, r4
 800ea0a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800ea0e:	1886      	adds	r6, r0, r2
 800ea10:	428e      	cmp	r6, r1
 800ea12:	bfde      	ittt	le
 800ea14:	1b89      	suble	r1, r1, r6
 800ea16:	18b0      	addle	r0, r6, r2
 800ea18:	18a4      	addle	r4, r4, r2
 800ea1a:	0049      	lsls	r1, r1, #1
 800ea1c:	3d01      	subs	r5, #1
 800ea1e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800ea22:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800ea26:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ea2a:	d1f0      	bne.n	800ea0e <__ieee754_sqrt+0x92>
 800ea2c:	462a      	mov	r2, r5
 800ea2e:	f04f 0e20 	mov.w	lr, #32
 800ea32:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800ea36:	4281      	cmp	r1, r0
 800ea38:	eb06 0c05 	add.w	ip, r6, r5
 800ea3c:	dc02      	bgt.n	800ea44 <__ieee754_sqrt+0xc8>
 800ea3e:	d113      	bne.n	800ea68 <__ieee754_sqrt+0xec>
 800ea40:	459c      	cmp	ip, r3
 800ea42:	d811      	bhi.n	800ea68 <__ieee754_sqrt+0xec>
 800ea44:	f1bc 0f00 	cmp.w	ip, #0
 800ea48:	eb0c 0506 	add.w	r5, ip, r6
 800ea4c:	da43      	bge.n	800ead6 <__ieee754_sqrt+0x15a>
 800ea4e:	2d00      	cmp	r5, #0
 800ea50:	db41      	blt.n	800ead6 <__ieee754_sqrt+0x15a>
 800ea52:	f100 0801 	add.w	r8, r0, #1
 800ea56:	1a09      	subs	r1, r1, r0
 800ea58:	459c      	cmp	ip, r3
 800ea5a:	bf88      	it	hi
 800ea5c:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 800ea60:	eba3 030c 	sub.w	r3, r3, ip
 800ea64:	4432      	add	r2, r6
 800ea66:	4640      	mov	r0, r8
 800ea68:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800ea6c:	f1be 0e01 	subs.w	lr, lr, #1
 800ea70:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800ea74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ea78:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800ea7c:	d1db      	bne.n	800ea36 <__ieee754_sqrt+0xba>
 800ea7e:	430b      	orrs	r3, r1
 800ea80:	d006      	beq.n	800ea90 <__ieee754_sqrt+0x114>
 800ea82:	1c50      	adds	r0, r2, #1
 800ea84:	bf13      	iteet	ne
 800ea86:	3201      	addne	r2, #1
 800ea88:	3401      	addeq	r4, #1
 800ea8a:	4672      	moveq	r2, lr
 800ea8c:	f022 0201 	bicne.w	r2, r2, #1
 800ea90:	1063      	asrs	r3, r4, #1
 800ea92:	0852      	lsrs	r2, r2, #1
 800ea94:	07e1      	lsls	r1, r4, #31
 800ea96:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800ea9a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800ea9e:	bf48      	it	mi
 800eaa0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800eaa4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800eaa8:	4614      	mov	r4, r2
 800eaaa:	e781      	b.n	800e9b0 <__ieee754_sqrt+0x34>
 800eaac:	0ad9      	lsrs	r1, r3, #11
 800eaae:	3815      	subs	r0, #21
 800eab0:	055b      	lsls	r3, r3, #21
 800eab2:	2900      	cmp	r1, #0
 800eab4:	d0fa      	beq.n	800eaac <__ieee754_sqrt+0x130>
 800eab6:	02cd      	lsls	r5, r1, #11
 800eab8:	d50a      	bpl.n	800ead0 <__ieee754_sqrt+0x154>
 800eaba:	f1c2 0420 	rsb	r4, r2, #32
 800eabe:	fa23 f404 	lsr.w	r4, r3, r4
 800eac2:	1e55      	subs	r5, r2, #1
 800eac4:	4093      	lsls	r3, r2
 800eac6:	4321      	orrs	r1, r4
 800eac8:	1b42      	subs	r2, r0, r5
 800eaca:	e78a      	b.n	800e9e2 <__ieee754_sqrt+0x66>
 800eacc:	4610      	mov	r0, r2
 800eace:	e7f0      	b.n	800eab2 <__ieee754_sqrt+0x136>
 800ead0:	0049      	lsls	r1, r1, #1
 800ead2:	3201      	adds	r2, #1
 800ead4:	e7ef      	b.n	800eab6 <__ieee754_sqrt+0x13a>
 800ead6:	4680      	mov	r8, r0
 800ead8:	e7bd      	b.n	800ea56 <__ieee754_sqrt+0xda>
 800eada:	bf00      	nop
 800eadc:	7ff00000 	.word	0x7ff00000

0800eae0 <with_errno>:
 800eae0:	b570      	push	{r4, r5, r6, lr}
 800eae2:	4604      	mov	r4, r0
 800eae4:	460d      	mov	r5, r1
 800eae6:	4616      	mov	r6, r2
 800eae8:	f7fa fd98 	bl	800961c <__errno>
 800eaec:	4629      	mov	r1, r5
 800eaee:	6006      	str	r6, [r0, #0]
 800eaf0:	4620      	mov	r0, r4
 800eaf2:	bd70      	pop	{r4, r5, r6, pc}

0800eaf4 <xflow>:
 800eaf4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800eaf6:	4614      	mov	r4, r2
 800eaf8:	461d      	mov	r5, r3
 800eafa:	b108      	cbz	r0, 800eb00 <xflow+0xc>
 800eafc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800eb00:	e9cd 2300 	strd	r2, r3, [sp]
 800eb04:	e9dd 2300 	ldrd	r2, r3, [sp]
 800eb08:	4620      	mov	r0, r4
 800eb0a:	4629      	mov	r1, r5
 800eb0c:	f7f1 fd84 	bl	8000618 <__aeabi_dmul>
 800eb10:	2222      	movs	r2, #34	; 0x22
 800eb12:	b003      	add	sp, #12
 800eb14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800eb18:	f7ff bfe2 	b.w	800eae0 <with_errno>

0800eb1c <__math_uflow>:
 800eb1c:	b508      	push	{r3, lr}
 800eb1e:	2200      	movs	r2, #0
 800eb20:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800eb24:	f7ff ffe6 	bl	800eaf4 <xflow>
 800eb28:	ec41 0b10 	vmov	d0, r0, r1
 800eb2c:	bd08      	pop	{r3, pc}

0800eb2e <__math_oflow>:
 800eb2e:	b508      	push	{r3, lr}
 800eb30:	2200      	movs	r2, #0
 800eb32:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800eb36:	f7ff ffdd 	bl	800eaf4 <xflow>
 800eb3a:	ec41 0b10 	vmov	d0, r0, r1
 800eb3e:	bd08      	pop	{r3, pc}

0800eb40 <fabs>:
 800eb40:	ec51 0b10 	vmov	r0, r1, d0
 800eb44:	ee10 2a10 	vmov	r2, s0
 800eb48:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800eb4c:	ec43 2b10 	vmov	d0, r2, r3
 800eb50:	4770      	bx	lr

0800eb52 <finite>:
 800eb52:	b082      	sub	sp, #8
 800eb54:	ed8d 0b00 	vstr	d0, [sp]
 800eb58:	9801      	ldr	r0, [sp, #4]
 800eb5a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800eb5e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800eb62:	0fc0      	lsrs	r0, r0, #31
 800eb64:	b002      	add	sp, #8
 800eb66:	4770      	bx	lr

0800eb68 <scalbn>:
 800eb68:	b570      	push	{r4, r5, r6, lr}
 800eb6a:	ec55 4b10 	vmov	r4, r5, d0
 800eb6e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800eb72:	4606      	mov	r6, r0
 800eb74:	462b      	mov	r3, r5
 800eb76:	b99a      	cbnz	r2, 800eba0 <scalbn+0x38>
 800eb78:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800eb7c:	4323      	orrs	r3, r4
 800eb7e:	d036      	beq.n	800ebee <scalbn+0x86>
 800eb80:	4b39      	ldr	r3, [pc, #228]	; (800ec68 <scalbn+0x100>)
 800eb82:	4629      	mov	r1, r5
 800eb84:	ee10 0a10 	vmov	r0, s0
 800eb88:	2200      	movs	r2, #0
 800eb8a:	f7f1 fd45 	bl	8000618 <__aeabi_dmul>
 800eb8e:	4b37      	ldr	r3, [pc, #220]	; (800ec6c <scalbn+0x104>)
 800eb90:	429e      	cmp	r6, r3
 800eb92:	4604      	mov	r4, r0
 800eb94:	460d      	mov	r5, r1
 800eb96:	da10      	bge.n	800ebba <scalbn+0x52>
 800eb98:	a32b      	add	r3, pc, #172	; (adr r3, 800ec48 <scalbn+0xe0>)
 800eb9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb9e:	e03a      	b.n	800ec16 <scalbn+0xae>
 800eba0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800eba4:	428a      	cmp	r2, r1
 800eba6:	d10c      	bne.n	800ebc2 <scalbn+0x5a>
 800eba8:	ee10 2a10 	vmov	r2, s0
 800ebac:	4620      	mov	r0, r4
 800ebae:	4629      	mov	r1, r5
 800ebb0:	f7f1 fb7c 	bl	80002ac <__adddf3>
 800ebb4:	4604      	mov	r4, r0
 800ebb6:	460d      	mov	r5, r1
 800ebb8:	e019      	b.n	800ebee <scalbn+0x86>
 800ebba:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ebbe:	460b      	mov	r3, r1
 800ebc0:	3a36      	subs	r2, #54	; 0x36
 800ebc2:	4432      	add	r2, r6
 800ebc4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ebc8:	428a      	cmp	r2, r1
 800ebca:	dd08      	ble.n	800ebde <scalbn+0x76>
 800ebcc:	2d00      	cmp	r5, #0
 800ebce:	a120      	add	r1, pc, #128	; (adr r1, 800ec50 <scalbn+0xe8>)
 800ebd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ebd4:	da1c      	bge.n	800ec10 <scalbn+0xa8>
 800ebd6:	a120      	add	r1, pc, #128	; (adr r1, 800ec58 <scalbn+0xf0>)
 800ebd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ebdc:	e018      	b.n	800ec10 <scalbn+0xa8>
 800ebde:	2a00      	cmp	r2, #0
 800ebe0:	dd08      	ble.n	800ebf4 <scalbn+0x8c>
 800ebe2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ebe6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ebea:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ebee:	ec45 4b10 	vmov	d0, r4, r5
 800ebf2:	bd70      	pop	{r4, r5, r6, pc}
 800ebf4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800ebf8:	da19      	bge.n	800ec2e <scalbn+0xc6>
 800ebfa:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ebfe:	429e      	cmp	r6, r3
 800ec00:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800ec04:	dd0a      	ble.n	800ec1c <scalbn+0xb4>
 800ec06:	a112      	add	r1, pc, #72	; (adr r1, 800ec50 <scalbn+0xe8>)
 800ec08:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d1e2      	bne.n	800ebd6 <scalbn+0x6e>
 800ec10:	a30f      	add	r3, pc, #60	; (adr r3, 800ec50 <scalbn+0xe8>)
 800ec12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec16:	f7f1 fcff 	bl	8000618 <__aeabi_dmul>
 800ec1a:	e7cb      	b.n	800ebb4 <scalbn+0x4c>
 800ec1c:	a10a      	add	r1, pc, #40	; (adr r1, 800ec48 <scalbn+0xe0>)
 800ec1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d0b8      	beq.n	800eb98 <scalbn+0x30>
 800ec26:	a10e      	add	r1, pc, #56	; (adr r1, 800ec60 <scalbn+0xf8>)
 800ec28:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ec2c:	e7b4      	b.n	800eb98 <scalbn+0x30>
 800ec2e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ec32:	3236      	adds	r2, #54	; 0x36
 800ec34:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ec38:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800ec3c:	4620      	mov	r0, r4
 800ec3e:	4b0c      	ldr	r3, [pc, #48]	; (800ec70 <scalbn+0x108>)
 800ec40:	2200      	movs	r2, #0
 800ec42:	e7e8      	b.n	800ec16 <scalbn+0xae>
 800ec44:	f3af 8000 	nop.w
 800ec48:	c2f8f359 	.word	0xc2f8f359
 800ec4c:	01a56e1f 	.word	0x01a56e1f
 800ec50:	8800759c 	.word	0x8800759c
 800ec54:	7e37e43c 	.word	0x7e37e43c
 800ec58:	8800759c 	.word	0x8800759c
 800ec5c:	fe37e43c 	.word	0xfe37e43c
 800ec60:	c2f8f359 	.word	0xc2f8f359
 800ec64:	81a56e1f 	.word	0x81a56e1f
 800ec68:	43500000 	.word	0x43500000
 800ec6c:	ffff3cb0 	.word	0xffff3cb0
 800ec70:	3c900000 	.word	0x3c900000

0800ec74 <_init>:
 800ec74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec76:	bf00      	nop
 800ec78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec7a:	bc08      	pop	{r3}
 800ec7c:	469e      	mov	lr, r3
 800ec7e:	4770      	bx	lr

0800ec80 <_fini>:
 800ec80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec82:	bf00      	nop
 800ec84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec86:	bc08      	pop	{r3}
 800ec88:	469e      	mov	lr, r3
 800ec8a:	4770      	bx	lr
