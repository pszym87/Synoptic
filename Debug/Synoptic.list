
Synoptic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b014  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004608  0800b1a8  0800b1a8  0001b1a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f7b0  0800f7b0  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800f7b0  0800f7b0  0001f7b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f7b8  0800f7b8  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f7b8  0800f7b8  0001f7b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f7bc  0800f7bc  0001f7bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800f7c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  200001e4  0800f9a4  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000364  0800f9a4  00020364  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000150f5  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003377  00000000  00000000  00035309  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011a0  00000000  00000000  00038680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001008  00000000  00000000  00039820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000295e6  00000000  00000000  0003a828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000185bf  00000000  00000000  00063e0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f0b9f  00000000  00000000  0007c3cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016cf6c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005dc0  00000000  00000000  0016cfbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b18c 	.word	0x0800b18c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	0800b18c 	.word	0x0800b18c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <MX_GPIO_Init>:
        * EXTI
     PA2   ------> USART2_TX
     PA3   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b08a      	sub	sp, #40	; 0x28
 8000f50:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f52:	f107 0314 	add.w	r3, r7, #20
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
 8000f5a:	605a      	str	r2, [r3, #4]
 8000f5c:	609a      	str	r2, [r3, #8]
 8000f5e:	60da      	str	r2, [r3, #12]
 8000f60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f62:	4b41      	ldr	r3, [pc, #260]	; (8001068 <MX_GPIO_Init+0x11c>)
 8000f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f66:	4a40      	ldr	r2, [pc, #256]	; (8001068 <MX_GPIO_Init+0x11c>)
 8000f68:	f043 0304 	orr.w	r3, r3, #4
 8000f6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f6e:	4b3e      	ldr	r3, [pc, #248]	; (8001068 <MX_GPIO_Init+0x11c>)
 8000f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f72:	f003 0304 	and.w	r3, r3, #4
 8000f76:	613b      	str	r3, [r7, #16]
 8000f78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f7a:	4b3b      	ldr	r3, [pc, #236]	; (8001068 <MX_GPIO_Init+0x11c>)
 8000f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f7e:	4a3a      	ldr	r2, [pc, #232]	; (8001068 <MX_GPIO_Init+0x11c>)
 8000f80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f86:	4b38      	ldr	r3, [pc, #224]	; (8001068 <MX_GPIO_Init+0x11c>)
 8000f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f92:	4b35      	ldr	r3, [pc, #212]	; (8001068 <MX_GPIO_Init+0x11c>)
 8000f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f96:	4a34      	ldr	r2, [pc, #208]	; (8001068 <MX_GPIO_Init+0x11c>)
 8000f98:	f043 0301 	orr.w	r3, r3, #1
 8000f9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f9e:	4b32      	ldr	r3, [pc, #200]	; (8001068 <MX_GPIO_Init+0x11c>)
 8000fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa2:	f003 0301 	and.w	r3, r3, #1
 8000fa6:	60bb      	str	r3, [r7, #8]
 8000fa8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000faa:	4b2f      	ldr	r3, [pc, #188]	; (8001068 <MX_GPIO_Init+0x11c>)
 8000fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fae:	4a2e      	ldr	r2, [pc, #184]	; (8001068 <MX_GPIO_Init+0x11c>)
 8000fb0:	f043 0302 	orr.w	r3, r3, #2
 8000fb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fb6:	4b2c      	ldr	r3, [pc, #176]	; (8001068 <MX_GPIO_Init+0x11c>)
 8000fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fba:	f003 0302 	and.w	r3, r3, #2
 8000fbe:	607b      	str	r3, [r7, #4]
 8000fc0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	2120      	movs	r1, #32
 8000fc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fca:	f001 fb39 	bl	8002640 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RST_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	f640 0104 	movw	r1, #2052	; 0x804
 8000fd4:	4825      	ldr	r0, [pc, #148]	; (800106c <MX_GPIO_Init+0x120>)
 8000fd6:	f001 fb33 	bl	8002640 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000fda:	2201      	movs	r2, #1
 8000fdc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fe0:	4822      	ldr	r0, [pc, #136]	; (800106c <MX_GPIO_Init+0x120>)
 8000fe2:	f001 fb2d 	bl	8002640 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000fe6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fec:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000ff0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ff6:	f107 0314 	add.w	r3, r7, #20
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	481c      	ldr	r0, [pc, #112]	; (8001070 <MX_GPIO_Init+0x124>)
 8000ffe:	f001 f975 	bl	80022ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001002:	230c      	movs	r3, #12
 8001004:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001006:	2302      	movs	r3, #2
 8001008:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100a:	2300      	movs	r3, #0
 800100c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800100e:	2303      	movs	r3, #3
 8001010:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001012:	2307      	movs	r3, #7
 8001014:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001016:	f107 0314 	add.w	r3, r7, #20
 800101a:	4619      	mov	r1, r3
 800101c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001020:	f001 f964 	bl	80022ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001024:	2320      	movs	r3, #32
 8001026:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001028:	2301      	movs	r3, #1
 800102a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102c:	2300      	movs	r3, #0
 800102e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001030:	2300      	movs	r3, #0
 8001032:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001034:	f107 0314 	add.w	r3, r7, #20
 8001038:	4619      	mov	r1, r3
 800103a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800103e:	f001 f955 	bl	80022ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_DC_Pin|LCD_CS_Pin;
 8001042:	f641 0304 	movw	r3, #6148	; 0x1804
 8001046:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001048:	2301      	movs	r3, #1
 800104a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104c:	2300      	movs	r3, #0
 800104e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001050:	2300      	movs	r3, #0
 8001052:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001054:	f107 0314 	add.w	r3, r7, #20
 8001058:	4619      	mov	r1, r3
 800105a:	4804      	ldr	r0, [pc, #16]	; (800106c <MX_GPIO_Init+0x120>)
 800105c:	f001 f946 	bl	80022ec <HAL_GPIO_Init>

}
 8001060:	bf00      	nop
 8001062:	3728      	adds	r7, #40	; 0x28
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	40021000 	.word	0x40021000
 800106c:	48000400 	.word	0x48000400
 8001070:	48000800 	.word	0x48000800

08001074 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001078:	4b1b      	ldr	r3, [pc, #108]	; (80010e8 <MX_I2C1_Init+0x74>)
 800107a:	4a1c      	ldr	r2, [pc, #112]	; (80010ec <MX_I2C1_Init+0x78>)
 800107c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800107e:	4b1a      	ldr	r3, [pc, #104]	; (80010e8 <MX_I2C1_Init+0x74>)
 8001080:	4a1b      	ldr	r2, [pc, #108]	; (80010f0 <MX_I2C1_Init+0x7c>)
 8001082:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001084:	4b18      	ldr	r3, [pc, #96]	; (80010e8 <MX_I2C1_Init+0x74>)
 8001086:	2200      	movs	r2, #0
 8001088:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800108a:	4b17      	ldr	r3, [pc, #92]	; (80010e8 <MX_I2C1_Init+0x74>)
 800108c:	2201      	movs	r2, #1
 800108e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001090:	4b15      	ldr	r3, [pc, #84]	; (80010e8 <MX_I2C1_Init+0x74>)
 8001092:	2200      	movs	r2, #0
 8001094:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001096:	4b14      	ldr	r3, [pc, #80]	; (80010e8 <MX_I2C1_Init+0x74>)
 8001098:	2200      	movs	r2, #0
 800109a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800109c:	4b12      	ldr	r3, [pc, #72]	; (80010e8 <MX_I2C1_Init+0x74>)
 800109e:	2200      	movs	r2, #0
 80010a0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010a2:	4b11      	ldr	r3, [pc, #68]	; (80010e8 <MX_I2C1_Init+0x74>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010a8:	4b0f      	ldr	r3, [pc, #60]	; (80010e8 <MX_I2C1_Init+0x74>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010ae:	480e      	ldr	r0, [pc, #56]	; (80010e8 <MX_I2C1_Init+0x74>)
 80010b0:	f001 fade 	bl	8002670 <HAL_I2C_Init>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80010ba:	f000 fcfb 	bl	8001ab4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010be:	2100      	movs	r1, #0
 80010c0:	4809      	ldr	r0, [pc, #36]	; (80010e8 <MX_I2C1_Init+0x74>)
 80010c2:	f001 ffc7 	bl	8003054 <HAL_I2CEx_ConfigAnalogFilter>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80010cc:	f000 fcf2 	bl	8001ab4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80010d0:	2100      	movs	r1, #0
 80010d2:	4805      	ldr	r0, [pc, #20]	; (80010e8 <MX_I2C1_Init+0x74>)
 80010d4:	f002 f809 	bl	80030ea <HAL_I2CEx_ConfigDigitalFilter>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80010de:	f000 fce9 	bl	8001ab4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	20000200 	.word	0x20000200
 80010ec:	40005400 	.word	0x40005400
 80010f0:	10909cec 	.word	0x10909cec

080010f4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b0ac      	sub	sp, #176	; 0xb0
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
 8001106:	609a      	str	r2, [r3, #8]
 8001108:	60da      	str	r2, [r3, #12]
 800110a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800110c:	f107 0314 	add.w	r3, r7, #20
 8001110:	2288      	movs	r2, #136	; 0x88
 8001112:	2100      	movs	r1, #0
 8001114:	4618      	mov	r0, r3
 8001116:	f005 fcaf 	bl	8006a78 <memset>
  if(i2cHandle->Instance==I2C1)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a21      	ldr	r2, [pc, #132]	; (80011a4 <HAL_I2C_MspInit+0xb0>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d13a      	bne.n	800119a <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001124:	2340      	movs	r3, #64	; 0x40
 8001126:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001128:	2300      	movs	r3, #0
 800112a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800112c:	f107 0314 	add.w	r3, r7, #20
 8001130:	4618      	mov	r0, r3
 8001132:	f002 fee9 	bl	8003f08 <HAL_RCCEx_PeriphCLKConfig>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800113c:	f000 fcba 	bl	8001ab4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001140:	4b19      	ldr	r3, [pc, #100]	; (80011a8 <HAL_I2C_MspInit+0xb4>)
 8001142:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001144:	4a18      	ldr	r2, [pc, #96]	; (80011a8 <HAL_I2C_MspInit+0xb4>)
 8001146:	f043 0302 	orr.w	r3, r3, #2
 800114a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800114c:	4b16      	ldr	r3, [pc, #88]	; (80011a8 <HAL_I2C_MspInit+0xb4>)
 800114e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001150:	f003 0302 	and.w	r3, r3, #2
 8001154:	613b      	str	r3, [r7, #16]
 8001156:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001158:	23c0      	movs	r3, #192	; 0xc0
 800115a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800115e:	2312      	movs	r3, #18
 8001160:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001164:	2300      	movs	r3, #0
 8001166:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800116a:	2303      	movs	r3, #3
 800116c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001170:	2304      	movs	r3, #4
 8001172:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001176:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800117a:	4619      	mov	r1, r3
 800117c:	480b      	ldr	r0, [pc, #44]	; (80011ac <HAL_I2C_MspInit+0xb8>)
 800117e:	f001 f8b5 	bl	80022ec <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001182:	4b09      	ldr	r3, [pc, #36]	; (80011a8 <HAL_I2C_MspInit+0xb4>)
 8001184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001186:	4a08      	ldr	r2, [pc, #32]	; (80011a8 <HAL_I2C_MspInit+0xb4>)
 8001188:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800118c:	6593      	str	r3, [r2, #88]	; 0x58
 800118e:	4b06      	ldr	r3, [pc, #24]	; (80011a8 <HAL_I2C_MspInit+0xb4>)
 8001190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001192:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800119a:	bf00      	nop
 800119c:	37b0      	adds	r7, #176	; 0xb0
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	40005400 	.word	0x40005400
 80011a8:	40021000 	.word	0x40021000
 80011ac:	48000400 	.word	0x48000400

080011b0 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80011b4:	4b0b      	ldr	r3, [pc, #44]	; (80011e4 <MX_IWDG_Init+0x34>)
 80011b6:	4a0c      	ldr	r2, [pc, #48]	; (80011e8 <MX_IWDG_Init+0x38>)
 80011b8:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 80011ba:	4b0a      	ldr	r3, [pc, #40]	; (80011e4 <MX_IWDG_Init+0x34>)
 80011bc:	2204      	movs	r2, #4
 80011be:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 80011c0:	4b08      	ldr	r3, [pc, #32]	; (80011e4 <MX_IWDG_Init+0x34>)
 80011c2:	f640 72ff 	movw	r2, #4095	; 0xfff
 80011c6:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 80011c8:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <MX_IWDG_Init+0x34>)
 80011ca:	f640 72ff 	movw	r2, #4095	; 0xfff
 80011ce:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80011d0:	4804      	ldr	r0, [pc, #16]	; (80011e4 <MX_IWDG_Init+0x34>)
 80011d2:	f001 ffd6 	bl	8003182 <HAL_IWDG_Init>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 80011dc:	f000 fc6a 	bl	8001ab4 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80011e0:	bf00      	nop
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	20000254 	.word	0x20000254
 80011e8:	40003000 	.word	0x40003000

080011ec <lcd_cmd>:
		CMD(0xf6), 0x00,
		CMD(ST7735S_COLMOD), 0x05,
		CMD(ST7735S_MADCTL), 0xa0
};

static void lcd_cmd(uint8_t cmd){
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 80011f6:	2200      	movs	r2, #0
 80011f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011fc:	480c      	ldr	r0, [pc, #48]	; (8001230 <lcd_cmd+0x44>)
 80011fe:	f001 fa1f 	bl	8002640 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001202:	2200      	movs	r2, #0
 8001204:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001208:	4809      	ldr	r0, [pc, #36]	; (8001230 <lcd_cmd+0x44>)
 800120a:	f001 fa19 	bl	8002640 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &cmd, 1, HAL_MAX_DELAY);
 800120e:	1df9      	adds	r1, r7, #7
 8001210:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001214:	2201      	movs	r2, #1
 8001216:	4807      	ldr	r0, [pc, #28]	; (8001234 <lcd_cmd+0x48>)
 8001218:	f003 fbd5 	bl	80049c6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 800121c:	2201      	movs	r2, #1
 800121e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001222:	4803      	ldr	r0, [pc, #12]	; (8001230 <lcd_cmd+0x44>)
 8001224:	f001 fa0c 	bl	8002640 <HAL_GPIO_WritePin>
}
 8001228:	bf00      	nop
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	48000400 	.word	0x48000400
 8001234:	20000264 	.word	0x20000264

08001238 <lcd_data>:

static void lcd_data(uint8_t data){
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8001242:	2201      	movs	r2, #1
 8001244:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001248:	480c      	ldr	r0, [pc, #48]	; (800127c <lcd_data+0x44>)
 800124a:	f001 f9f9 	bl	8002640 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 800124e:	2200      	movs	r2, #0
 8001250:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001254:	4809      	ldr	r0, [pc, #36]	; (800127c <lcd_data+0x44>)
 8001256:	f001 f9f3 	bl	8002640 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &data, 1, HAL_MAX_DELAY);
 800125a:	1df9      	adds	r1, r7, #7
 800125c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001260:	2201      	movs	r2, #1
 8001262:	4807      	ldr	r0, [pc, #28]	; (8001280 <lcd_data+0x48>)
 8001264:	f003 fbaf 	bl	80049c6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001268:	2201      	movs	r2, #1
 800126a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800126e:	4803      	ldr	r0, [pc, #12]	; (800127c <lcd_data+0x44>)
 8001270:	f001 f9e6 	bl	8002640 <HAL_GPIO_WritePin>
}
 8001274:	bf00      	nop
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	48000400 	.word	0x48000400
 8001280:	20000264 	.word	0x20000264

08001284 <lcd_send>:

static void lcd_send(uint16_t value){
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	80fb      	strh	r3, [r7, #6]
	if(value & 0x100){
 800128e:	88fb      	ldrh	r3, [r7, #6]
 8001290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001294:	2b00      	cmp	r3, #0
 8001296:	d005      	beq.n	80012a4 <lcd_send+0x20>
		lcd_cmd(value);
 8001298:	88fb      	ldrh	r3, [r7, #6]
 800129a:	b2db      	uxtb	r3, r3
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff ffa5 	bl	80011ec <lcd_cmd>
	} else{
		lcd_data(value);
	}
}
 80012a2:	e004      	b.n	80012ae <lcd_send+0x2a>
		lcd_data(value);
 80012a4:	88fb      	ldrh	r3, [r7, #6]
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff ffc5 	bl	8001238 <lcd_data>
}
 80012ae:	bf00      	nop
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <lcd_data16>:

static void lcd_data16(uint16_t value){
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b082      	sub	sp, #8
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	4603      	mov	r3, r0
 80012be:	80fb      	strh	r3, [r7, #6]
	lcd_data(value >> 8);
 80012c0:	88fb      	ldrh	r3, [r7, #6]
 80012c2:	0a1b      	lsrs	r3, r3, #8
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff ffb5 	bl	8001238 <lcd_data>
	lcd_data(value);
 80012ce:	88fb      	ldrh	r3, [r7, #6]
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff ffb0 	bl	8001238 <lcd_data>
}
 80012d8:	bf00      	nop
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}

080012e0 <lcd_set_window>:

static void lcd_set_window(int x, int y, int width, int height){
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	60b9      	str	r1, [r7, #8]
 80012ea:	607a      	str	r2, [r7, #4]
 80012ec:	603b      	str	r3, [r7, #0]
	lcd_cmd(ST7735S_CASET);
 80012ee:	202a      	movs	r0, #42	; 0x2a
 80012f0:	f7ff ff7c 	bl	80011ec <lcd_cmd>
	lcd_data16(LCD_OFFSET_X + x);
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	b29b      	uxth	r3, r3
 80012f8:	3301      	adds	r3, #1
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff ffda 	bl	80012b6 <lcd_data16>
	lcd_data16(LCD_OFFSET_X + x + width - 1);
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	b29a      	uxth	r2, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	b29b      	uxth	r3, r3
 800130a:	4413      	add	r3, r2
 800130c:	b29b      	uxth	r3, r3
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff ffd1 	bl	80012b6 <lcd_data16>

	lcd_cmd(ST7735S_RASET);
 8001314:	202b      	movs	r0, #43	; 0x2b
 8001316:	f7ff ff69 	bl	80011ec <lcd_cmd>
	lcd_data16(LCD_OFFSET_Y + y);
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	b29b      	uxth	r3, r3
 800131e:	3302      	adds	r3, #2
 8001320:	b29b      	uxth	r3, r3
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff ffc7 	bl	80012b6 <lcd_data16>
	lcd_data16(LCD_OFFSET_Y + y + height -1);
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	b29a      	uxth	r2, r3
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	b29b      	uxth	r3, r3
 8001330:	4413      	add	r3, r2
 8001332:	b29b      	uxth	r3, r3
 8001334:	3301      	adds	r3, #1
 8001336:	b29b      	uxth	r3, r3
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff ffbc 	bl	80012b6 <lcd_data16>

}
 800133e:	bf00      	nop
 8001340:	3710      	adds	r7, #16
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <lcd_fill_box>:

void lcd_fill_box(int x, int y, int width, int height, uint16_t color){
 8001346:	b580      	push	{r7, lr}
 8001348:	b086      	sub	sp, #24
 800134a:	af00      	add	r7, sp, #0
 800134c:	60f8      	str	r0, [r7, #12]
 800134e:	60b9      	str	r1, [r7, #8]
 8001350:	607a      	str	r2, [r7, #4]
 8001352:	603b      	str	r3, [r7, #0]
	lcd_set_window(x, y, width, height);
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	68b9      	ldr	r1, [r7, #8]
 800135a:	68f8      	ldr	r0, [r7, #12]
 800135c:	f7ff ffc0 	bl	80012e0 <lcd_set_window>

	lcd_cmd(ST7735S_RAMWR);
 8001360:	202c      	movs	r0, #44	; 0x2c
 8001362:	f7ff ff43 	bl	80011ec <lcd_cmd>
	for(int i=0; i< width * height; i++)
 8001366:	2300      	movs	r3, #0
 8001368:	617b      	str	r3, [r7, #20]
 800136a:	e006      	b.n	800137a <lcd_fill_box+0x34>
		lcd_data16(color);
 800136c:	8c3b      	ldrh	r3, [r7, #32]
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff ffa1 	bl	80012b6 <lcd_data16>
	for(int i=0; i< width * height; i++)
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	3301      	adds	r3, #1
 8001378:	617b      	str	r3, [r7, #20]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	683a      	ldr	r2, [r7, #0]
 800137e:	fb02 f303 	mul.w	r3, r2, r3
 8001382:	697a      	ldr	r2, [r7, #20]
 8001384:	429a      	cmp	r2, r3
 8001386:	dbf1      	blt.n	800136c <lcd_fill_box+0x26>
}
 8001388:	bf00      	nop
 800138a:	bf00      	nop
 800138c:	3718      	adds	r7, #24
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
	...

08001394 <lcd_init>:
	lcd_cmd(ST7735S_SLPOUT);
	HAL_Delay(120);
}


void lcd_init(void){
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
	int i;
	HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 800139a:	2200      	movs	r2, #0
 800139c:	2104      	movs	r1, #4
 800139e:	4817      	ldr	r0, [pc, #92]	; (80013fc <lcd_init+0x68>)
 80013a0:	f001 f94e 	bl	8002640 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80013a4:	2064      	movs	r0, #100	; 0x64
 80013a6:	f000 fe97 	bl	80020d8 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 80013aa:	2201      	movs	r2, #1
 80013ac:	2104      	movs	r1, #4
 80013ae:	4813      	ldr	r0, [pc, #76]	; (80013fc <lcd_init+0x68>)
 80013b0:	f001 f946 	bl	8002640 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80013b4:	2064      	movs	r0, #100	; 0x64
 80013b6:	f000 fe8f 	bl	80020d8 <HAL_Delay>

	for(i=0; i< sizeof init_table / sizeof (uint16_t); i++){
 80013ba:	2300      	movs	r3, #0
 80013bc:	607b      	str	r3, [r7, #4]
 80013be:	e009      	b.n	80013d4 <lcd_init+0x40>
		lcd_send(init_table[i]);
 80013c0:	4a0f      	ldr	r2, [pc, #60]	; (8001400 <lcd_init+0x6c>)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff ff5b 	bl	8001284 <lcd_send>
	for(i=0; i< sizeof init_table / sizeof (uint16_t); i++){
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	3301      	adds	r3, #1
 80013d2:	607b      	str	r3, [r7, #4]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2b4b      	cmp	r3, #75	; 0x4b
 80013d8:	d9f2      	bls.n	80013c0 <lcd_init+0x2c>
	}

	HAL_Delay(200);
 80013da:	20c8      	movs	r0, #200	; 0xc8
 80013dc:	f000 fe7c 	bl	80020d8 <HAL_Delay>
	lcd_cmd(ST7735S_SLPOUT);
 80013e0:	2011      	movs	r0, #17
 80013e2:	f7ff ff03 	bl	80011ec <lcd_cmd>
	HAL_Delay(120);
 80013e6:	2078      	movs	r0, #120	; 0x78
 80013e8:	f000 fe76 	bl	80020d8 <HAL_Delay>
	lcd_cmd(ST7735S_DISPON);
 80013ec:	2029      	movs	r0, #41	; 0x29
 80013ee:	f7ff fefd 	bl	80011ec <lcd_cmd>
}
 80013f2:	bf00      	nop
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	48000400 	.word	0x48000400
 8001400:	0800b3a8 	.word	0x0800b3a8

08001404 <lcd_draw_point>:
void lcd_invoff(){
	lcd_cmd(ST7735S_INVOFF);
}


void lcd_draw_point(int x, int y, uint16_t color){
 8001404:	b580      	push	{r7, lr}
 8001406:	b086      	sub	sp, #24
 8001408:	af02      	add	r7, sp, #8
 800140a:	60f8      	str	r0, [r7, #12]
 800140c:	60b9      	str	r1, [r7, #8]
 800140e:	4613      	mov	r3, r2
 8001410:	80fb      	strh	r3, [r7, #6]
	lcd_fill_box(x, y, 1, 1, color);
 8001412:	88fb      	ldrh	r3, [r7, #6]
 8001414:	9300      	str	r3, [sp, #0]
 8001416:	2301      	movs	r3, #1
 8001418:	2201      	movs	r2, #1
 800141a:	68b9      	ldr	r1, [r7, #8]
 800141c:	68f8      	ldr	r0, [r7, #12]
 800141e:	f7ff ff92 	bl	8001346 <lcd_fill_box>
}
 8001422:	bf00      	nop
 8001424:	3710      	adds	r7, #16
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
	...

0800142c <lcd_draw_image_fast>:
			array_counter++;
			lcd_colorize_pixel(ix, iy, mcolor);
		}
}

void lcd_draw_image_fast(int x, int y, int width, int height, uint8_t *data){
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	60f8      	str	r0, [r7, #12]
 8001434:	60b9      	str	r1, [r7, #8]
 8001436:	607a      	str	r2, [r7, #4]
 8001438:	603b      	str	r3, [r7, #0]

	lcd_cmd(ST7735S_CASET);
 800143a:	202a      	movs	r0, #42	; 0x2a
 800143c:	f7ff fed6 	bl	80011ec <lcd_cmd>
	lcd_data16(x);
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	b29b      	uxth	r3, r3
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff ff36 	bl	80012b6 <lcd_data16>
	lcd_data16(x+width-1);
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	b29a      	uxth	r2, r3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	b29b      	uxth	r3, r3
 8001452:	4413      	add	r3, r2
 8001454:	b29b      	uxth	r3, r3
 8001456:	3b01      	subs	r3, #1
 8001458:	b29b      	uxth	r3, r3
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff ff2b 	bl	80012b6 <lcd_data16>

	lcd_cmd(ST7735S_RASET);
 8001460:	202b      	movs	r0, #43	; 0x2b
 8001462:	f7ff fec3 	bl	80011ec <lcd_cmd>
	lcd_data16(y);
 8001466:	68bb      	ldr	r3, [r7, #8]
 8001468:	b29b      	uxth	r3, r3
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff ff23 	bl	80012b6 <lcd_data16>
	lcd_data16(y+height-1);
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	b29a      	uxth	r2, r3
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	b29b      	uxth	r3, r3
 8001478:	4413      	add	r3, r2
 800147a:	b29b      	uxth	r3, r3
 800147c:	3b01      	subs	r3, #1
 800147e:	b29b      	uxth	r3, r3
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff ff18 	bl	80012b6 <lcd_data16>

	lcd_cmd(ST7735S_RAMWR);
 8001486:	202c      	movs	r0, #44	; 0x2c
 8001488:	f7ff feb0 	bl	80011ec <lcd_cmd>
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 800148c:	2201      	movs	r2, #1
 800148e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001492:	4811      	ldr	r0, [pc, #68]	; (80014d8 <lcd_draw_image_fast+0xac>)
 8001494:	f001 f8d4 	bl	8002640 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001498:	2200      	movs	r2, #0
 800149a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800149e:	480e      	ldr	r0, [pc, #56]	; (80014d8 <lcd_draw_image_fast+0xac>)
 80014a0:	f001 f8ce 	bl	8002640 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi2, data, width*height*2, HAL_MAX_DELAY);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	b29a      	uxth	r2, r3
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	b29b      	uxth	r3, r3
 80014ac:	fb12 f303 	smulbb	r3, r2, r3
 80014b0:	b29b      	uxth	r3, r3
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	b29a      	uxth	r2, r3
 80014b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014ba:	69b9      	ldr	r1, [r7, #24]
 80014bc:	4807      	ldr	r0, [pc, #28]	; (80014dc <lcd_draw_image_fast+0xb0>)
 80014be:	f003 fa82 	bl	80049c6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 80014c2:	2201      	movs	r2, #1
 80014c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014c8:	4803      	ldr	r0, [pc, #12]	; (80014d8 <lcd_draw_image_fast+0xac>)
 80014ca:	f001 f8b9 	bl	8002640 <HAL_GPIO_WritePin>
}
 80014ce:	bf00      	nop
 80014d0:	3710      	adds	r7, #16
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	48000400 	.word	0x48000400
 80014dc:	20000264 	.word	0x20000264

080014e0 <lps_write_to_reg>:
 * \param	reg adres rejestru
 * \param	data byte danych do zapisania
 * \return	status transmisji
 *
 */
static HAL_StatusTypeDef lps_write_to_reg(uint8_t reg, uint8_t data){
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b086      	sub	sp, #24
 80014e4:	af02      	add	r7, sp, #8
 80014e6:	4603      	mov	r3, r0
 80014e8:	460a      	mov	r2, r1
 80014ea:	71fb      	strb	r3, [r7, #7]
 80014ec:	4613      	mov	r3, r2
 80014ee:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef status;
	uint8_t buffer[2] = {reg, data};
 80014f0:	79fb      	ldrb	r3, [r7, #7]
 80014f2:	733b      	strb	r3, [r7, #12]
 80014f4:	79bb      	ldrb	r3, [r7, #6]
 80014f6:	737b      	strb	r3, [r7, #13]

    status = HAL_I2C_Master_Transmit(&hi2c1, LPS25HB_ADDR, buffer, sizeof buffer, HAL_MAX_DELAY);
 80014f8:	f107 020c 	add.w	r2, r7, #12
 80014fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001500:	9300      	str	r3, [sp, #0]
 8001502:	2302      	movs	r3, #2
 8001504:	21ba      	movs	r1, #186	; 0xba
 8001506:	4805      	ldr	r0, [pc, #20]	; (800151c <lps_write_to_reg+0x3c>)
 8001508:	f001 f942 	bl	8002790 <HAL_I2C_Master_Transmit>
 800150c:	4603      	mov	r3, r0
 800150e:	73fb      	strb	r3, [r7, #15]
	return status;
 8001510:	7bfb      	ldrb	r3, [r7, #15]
}
 8001512:	4618      	mov	r0, r3
 8001514:	3710      	adds	r7, #16
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	20000200 	.word	0x20000200

08001520 <lps_read_from_reg>:
 * \param	data odczyt zostanie zapisany pod wskazywanym adresem
 *
 * \return status transmisji (nie rozróżnia czy status dotyczy transmisji o dostep do rejestru, czy statusu odczytu z rejestru)
 *
 */
static HAL_StatusTypeDef lps_read_from_reg(uint8_t reg, uint8_t* data_ptr){
 8001520:	b580      	push	{r7, lr}
 8001522:	b086      	sub	sp, #24
 8001524:	af02      	add	r7, sp, #8
 8001526:	4603      	mov	r3, r0
 8001528:	6039      	str	r1, [r7, #0]
 800152a:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef status;
	if((status = HAL_I2C_Master_Transmit(&hi2c1, LPS25HB_ADDR, &reg, sizeof reg, HAL_MAX_DELAY))!=HAL_OK)
 800152c:	1dfa      	adds	r2, r7, #7
 800152e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001532:	9300      	str	r3, [sp, #0]
 8001534:	2301      	movs	r3, #1
 8001536:	21ba      	movs	r1, #186	; 0xba
 8001538:	480c      	ldr	r0, [pc, #48]	; (800156c <lps_read_from_reg+0x4c>)
 800153a:	f001 f929 	bl	8002790 <HAL_I2C_Master_Transmit>
 800153e:	4603      	mov	r3, r0
 8001540:	73fb      	strb	r3, [r7, #15]
 8001542:	7bfb      	ldrb	r3, [r7, #15]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <lps_read_from_reg+0x2c>
		return status;
 8001548:	7bfb      	ldrb	r3, [r7, #15]
 800154a:	e00b      	b.n	8001564 <lps_read_from_reg+0x44>
	status = HAL_I2C_Master_Receive(&hi2c1, LPS25HB_ADDR, data_ptr, sizeof data_ptr, HAL_MAX_DELAY);
 800154c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001550:	9300      	str	r3, [sp, #0]
 8001552:	2304      	movs	r3, #4
 8001554:	683a      	ldr	r2, [r7, #0]
 8001556:	21ba      	movs	r1, #186	; 0xba
 8001558:	4804      	ldr	r0, [pc, #16]	; (800156c <lps_read_from_reg+0x4c>)
 800155a:	f001 fa0d 	bl	8002978 <HAL_I2C_Master_Receive>
 800155e:	4603      	mov	r3, r0
 8001560:	73fb      	strb	r3, [r7, #15]
	return status;
 8001562:	7bfb      	ldrb	r3, [r7, #15]
}
 8001564:	4618      	mov	r0, r3
 8001566:	3710      	adds	r7, #16
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	20000200 	.word	0x20000200

08001570 <lps_init>:


void lps_init(){
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
	// wlacz urzadzenie i ustaw czestotliwosc pomiaru na 25Hz
	lps_write_to_reg(CTRL_REG1, SET_CTRL_REG1_PD|SET_CTRL_REG1_ODR2);
 8001574:	21c0      	movs	r1, #192	; 0xc0
 8001576:	2020      	movs	r0, #32
 8001578:	f7ff ffb2 	bl	80014e0 <lps_write_to_reg>

	// przy problemach z odczytem danych dodac oczekiwanie 100 ms

	// aktywacja i ustawienie fifo dla pomiarow
	lps_write_to_reg(CTRL_REG2,SET_CTRL_REG2_FIFO);
 800157c:	2140      	movs	r1, #64	; 0x40
 800157e:	2021      	movs	r0, #33	; 0x21
 8001580:	f7ff ffae 	bl	80014e0 <lps_write_to_reg>
	lps_write_to_reg(FIFO_CTRL, SET_FIFO_CTRL_MEAN_MODE|SET_FIFO_CTRL_WTM_32_SMPL);
 8001584:	21cf      	movs	r1, #207	; 0xcf
 8001586:	202e      	movs	r0, #46	; 0x2e
 8001588:	f7ff ffaa 	bl	80014e0 <lps_write_to_reg>

}
 800158c:	bf00      	nop
 800158e:	bd80      	pop	{r7, pc}

08001590 <lps_read_temperature>:

float lps_read_temperature(float temp_conv){
 8001590:	b580      	push	{r7, lr}
 8001592:	b086      	sub	sp, #24
 8001594:	af00      	add	r7, sp, #0
 8001596:	ed87 0a01 	vstr	s0, [r7, #4]
	uint8_t *ptr_lsb, *ptr_msb;
	ptr_lsb = malloc(sizeof(uint8_t));
 800159a:	2001      	movs	r0, #1
 800159c:	f005 fa4e 	bl	8006a3c <malloc>
 80015a0:	4603      	mov	r3, r0
 80015a2:	617b      	str	r3, [r7, #20]
	ptr_msb = malloc(sizeof(uint8_t));
 80015a4:	2001      	movs	r0, #1
 80015a6:	f005 fa49 	bl	8006a3c <malloc>
 80015aa:	4603      	mov	r3, r0
 80015ac:	613b      	str	r3, [r7, #16]
	lps_read_from_reg(TEMP_OUT_L, ptr_lsb);
 80015ae:	6979      	ldr	r1, [r7, #20]
 80015b0:	202b      	movs	r0, #43	; 0x2b
 80015b2:	f7ff ffb5 	bl	8001520 <lps_read_from_reg>
	lps_read_from_reg(TEMP_OUT_H, ptr_msb);
 80015b6:	6939      	ldr	r1, [r7, #16]
 80015b8:	202c      	movs	r0, #44	; 0x2c
 80015ba:	f7ff ffb1 	bl	8001520 <lps_read_from_reg>
    int16_t val = *ptr_lsb + (*ptr_msb <<8);
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	b29a      	uxth	r2, r3
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	b29b      	uxth	r3, r3
 80015ca:	021b      	lsls	r3, r3, #8
 80015cc:	b29b      	uxth	r3, r3
 80015ce:	4413      	add	r3, r2
 80015d0:	b29b      	uxth	r3, r3
 80015d2:	81fb      	strh	r3, [r7, #14]

    free(ptr_lsb);
 80015d4:	6978      	ldr	r0, [r7, #20]
 80015d6:	f005 fa39 	bl	8006a4c <free>
    free(ptr_msb);
 80015da:	6938      	ldr	r0, [r7, #16]
 80015dc:	f005 fa36 	bl	8006a4c <free>

	return 42.5f + val / 480.0f + temp_conv;
 80015e0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015e4:	ee07 3a90 	vmov	s15, r3
 80015e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015ec:	eddf 6a08 	vldr	s13, [pc, #32]	; 8001610 <lps_read_temperature+0x80>
 80015f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015f4:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001614 <lps_read_temperature+0x84>
 80015f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80015fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001600:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001604:	eeb0 0a67 	vmov.f32	s0, s15
 8001608:	3718      	adds	r7, #24
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	43f00000 	.word	0x43f00000
 8001614:	422a0000 	.word	0x422a0000

08001618 <lps_pressure_correction>:

void lps_pressure_correction(uint16_t offset){
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	4603      	mov	r3, r0
 8001620:	80fb      	strh	r3, [r7, #6]
	lps_write_to_reg(RPDS_L, offset);
 8001622:	88fb      	ldrh	r3, [r7, #6]
 8001624:	b2db      	uxtb	r3, r3
 8001626:	4619      	mov	r1, r3
 8001628:	2039      	movs	r0, #57	; 0x39
 800162a:	f7ff ff59 	bl	80014e0 <lps_write_to_reg>
	lps_write_to_reg(RPDS_H, offset >> 8);
 800162e:	88fb      	ldrh	r3, [r7, #6]
 8001630:	0a1b      	lsrs	r3, r3, #8
 8001632:	b29b      	uxth	r3, r3
 8001634:	b2db      	uxtb	r3, r3
 8001636:	4619      	mov	r1, r3
 8001638:	203a      	movs	r0, #58	; 0x3a
 800163a:	f7ff ff51 	bl	80014e0 <lps_write_to_reg>
}
 800163e:	bf00      	nop
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <lps_read_absolute_pressure>:


float lps_read_absolute_pressure(){
 8001646:	b580      	push	{r7, lr}
 8001648:	b082      	sub	sp, #8
 800164a:	af00      	add	r7, sp, #0
	uint8_t *pressure = malloc(sizeof(uint8_t)*3);
 800164c:	2003      	movs	r0, #3
 800164e:	f005 f9f5 	bl	8006a3c <malloc>
 8001652:	4603      	mov	r3, r0
 8001654:	607b      	str	r3, [r7, #4]
	lps_read_from_reg(PRESS_OUT_XL, pressure);
 8001656:	6879      	ldr	r1, [r7, #4]
 8001658:	2028      	movs	r0, #40	; 0x28
 800165a:	f7ff ff61 	bl	8001520 <lps_read_from_reg>
	lps_read_from_reg(PRESS_OUT_L, pressure+1);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	3301      	adds	r3, #1
 8001662:	4619      	mov	r1, r3
 8001664:	2029      	movs	r0, #41	; 0x29
 8001666:	f7ff ff5b 	bl	8001520 <lps_read_from_reg>
	lps_read_from_reg(PRESS_OUT_H, pressure+2);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	3302      	adds	r3, #2
 800166e:	4619      	mov	r1, r3
 8001670:	202a      	movs	r0, #42	; 0x2a
 8001672:	f7ff ff55 	bl	8001520 <lps_read_from_reg>

	int32_t val = (*pressure + (*(pressure+1)<<8) + (*(pressure+2)<<16))/4096;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	461a      	mov	r2, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	3301      	adds	r3, #1
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	021b      	lsls	r3, r3, #8
 8001684:	441a      	add	r2, r3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	3302      	adds	r3, #2
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	041b      	lsls	r3, r3, #16
 800168e:	4413      	add	r3, r2
 8001690:	2b00      	cmp	r3, #0
 8001692:	da01      	bge.n	8001698 <lps_read_absolute_pressure+0x52>
 8001694:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001698:	131b      	asrs	r3, r3, #12
 800169a:	603b      	str	r3, [r7, #0]
	free(pressure);
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	f005 f9d5 	bl	8006a4c <free>
	return val;
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	ee07 3a90 	vmov	s15, r3
 80016a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15

}
 80016ac:	eeb0 0a67 	vmov.f32	s0, s15
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
	...

080016b8 <lps_read_relative_pressure>:

float lps_read_relative_pressure(){
 80016b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80016bc:	b084      	sub	sp, #16
 80016be:	af00      	add	r7, sp, #0
	const float h = 93; // jesli inna wysokosc to zmienic;
 80016c0:	4b25      	ldr	r3, [pc, #148]	; (8001758 <lps_read_relative_pressure+0xa0>)
 80016c2:	60fb      	str	r3, [r7, #12]
	float temp_K = lps_read_temperature(U_KELVIN);
 80016c4:	ed9f 0a25 	vldr	s0, [pc, #148]	; 800175c <lps_read_relative_pressure+0xa4>
 80016c8:	f7ff ff62 	bl	8001590 <lps_read_temperature>
 80016cc:	ed87 0a02 	vstr	s0, [r7, #8]
	float abs_press = lps_read_absolute_pressure();
 80016d0:	f7ff ffb9 	bl	8001646 <lps_read_absolute_pressure>
 80016d4:	ed87 0a01 	vstr	s0, [r7, #4]

	return abs_press * exp(0.034162608734308*h / temp_K);
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f7fe ff35 	bl	8000548 <__aeabi_f2d>
 80016de:	4604      	mov	r4, r0
 80016e0:	460d      	mov	r5, r1
 80016e2:	68f8      	ldr	r0, [r7, #12]
 80016e4:	f7fe ff30 	bl	8000548 <__aeabi_f2d>
 80016e8:	a319      	add	r3, pc, #100	; (adr r3, 8001750 <lps_read_relative_pressure+0x98>)
 80016ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ee:	f7fe ff83 	bl	80005f8 <__aeabi_dmul>
 80016f2:	4602      	mov	r2, r0
 80016f4:	460b      	mov	r3, r1
 80016f6:	4690      	mov	r8, r2
 80016f8:	4699      	mov	r9, r3
 80016fa:	68b8      	ldr	r0, [r7, #8]
 80016fc:	f7fe ff24 	bl	8000548 <__aeabi_f2d>
 8001700:	4602      	mov	r2, r0
 8001702:	460b      	mov	r3, r1
 8001704:	4640      	mov	r0, r8
 8001706:	4649      	mov	r1, r9
 8001708:	f7ff f8a0 	bl	800084c <__aeabi_ddiv>
 800170c:	4602      	mov	r2, r0
 800170e:	460b      	mov	r3, r1
 8001710:	ec43 2b17 	vmov	d7, r2, r3
 8001714:	eeb0 0a47 	vmov.f32	s0, s14
 8001718:	eef0 0a67 	vmov.f32	s1, s15
 800171c:	f008 fc50 	bl	8009fc0 <exp>
 8001720:	ec53 2b10 	vmov	r2, r3, d0
 8001724:	4620      	mov	r0, r4
 8001726:	4629      	mov	r1, r5
 8001728:	f7fe ff66 	bl	80005f8 <__aeabi_dmul>
 800172c:	4602      	mov	r2, r0
 800172e:	460b      	mov	r3, r1
 8001730:	4610      	mov	r0, r2
 8001732:	4619      	mov	r1, r3
 8001734:	f7ff fa38 	bl	8000ba8 <__aeabi_d2f>
 8001738:	4603      	mov	r3, r0
 800173a:	ee07 3a90 	vmov	s15, r3
}
 800173e:	eeb0 0a67 	vmov.f32	s0, s15
 8001742:	3710      	adds	r7, #16
 8001744:	46bd      	mov	sp, r7
 8001746:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800174a:	bf00      	nop
 800174c:	f3af 8000 	nop.w
 8001750:	ee851132 	.word	0xee851132
 8001754:	3fa17dc2 	.word	0x3fa17dc2
 8001758:	42ba0000 	.word	0x42ba0000
 800175c:	43889333 	.word	0x43889333

08001760 <lps_get_altitude_hyps_f>:

float lps_get_altitude_hyps_f(){
 8001760:	b5b0      	push	{r4, r5, r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0

	float p0 = lps_read_relative_pressure(); // sea-level pressure
 8001766:	f7ff ffa7 	bl	80016b8 <lps_read_relative_pressure>
 800176a:	ed87 0a03 	vstr	s0, [r7, #12]
    float p = lps_read_absolute_pressure(); // pressure at location
 800176e:	f7ff ff6a 	bl	8001646 <lps_read_absolute_pressure>
 8001772:	ed87 0a02 	vstr	s0, [r7, #8]
    float temp_K = lps_read_temperature(U_KELVIN);
 8001776:	ed9f 0a26 	vldr	s0, [pc, #152]	; 8001810 <lps_get_altitude_hyps_f+0xb0>
 800177a:	f7ff ff09 	bl	8001590 <lps_read_temperature>
 800177e:	ed87 0a01 	vstr	s0, [r7, #4]

    float h = (( pow(p0/p, 1/5.257) - 1)*( temp_K ))/0.0065;
 8001782:	ed97 7a03 	vldr	s14, [r7, #12]
 8001786:	edd7 7a02 	vldr	s15, [r7, #8]
 800178a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800178e:	ee16 0a90 	vmov	r0, s13
 8001792:	f7fe fed9 	bl	8000548 <__aeabi_f2d>
 8001796:	4602      	mov	r2, r0
 8001798:	460b      	mov	r3, r1
 800179a:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8001800 <lps_get_altitude_hyps_f+0xa0>
 800179e:	ec43 2b10 	vmov	d0, r2, r3
 80017a2:	f008 fc55 	bl	800a050 <pow>
 80017a6:	ec51 0b10 	vmov	r0, r1, d0
 80017aa:	f04f 0200 	mov.w	r2, #0
 80017ae:	4b19      	ldr	r3, [pc, #100]	; (8001814 <lps_get_altitude_hyps_f+0xb4>)
 80017b0:	f7fe fd6a 	bl	8000288 <__aeabi_dsub>
 80017b4:	4602      	mov	r2, r0
 80017b6:	460b      	mov	r3, r1
 80017b8:	4614      	mov	r4, r2
 80017ba:	461d      	mov	r5, r3
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f7fe fec3 	bl	8000548 <__aeabi_f2d>
 80017c2:	4602      	mov	r2, r0
 80017c4:	460b      	mov	r3, r1
 80017c6:	4620      	mov	r0, r4
 80017c8:	4629      	mov	r1, r5
 80017ca:	f7fe ff15 	bl	80005f8 <__aeabi_dmul>
 80017ce:	4602      	mov	r2, r0
 80017d0:	460b      	mov	r3, r1
 80017d2:	4610      	mov	r0, r2
 80017d4:	4619      	mov	r1, r3
 80017d6:	a30c      	add	r3, pc, #48	; (adr r3, 8001808 <lps_get_altitude_hyps_f+0xa8>)
 80017d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017dc:	f7ff f836 	bl	800084c <__aeabi_ddiv>
 80017e0:	4602      	mov	r2, r0
 80017e2:	460b      	mov	r3, r1
 80017e4:	4610      	mov	r0, r2
 80017e6:	4619      	mov	r1, r3
 80017e8:	f7ff f9de 	bl	8000ba8 <__aeabi_d2f>
 80017ec:	4603      	mov	r3, r0
 80017ee:	603b      	str	r3, [r7, #0]

   	return h;
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	ee07 3a90 	vmov	s15, r3

}
 80017f6:	eeb0 0a67 	vmov.f32	s0, s15
 80017fa:	3710      	adds	r7, #16
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bdb0      	pop	{r4, r5, r7, pc}
 8001800:	7dee2d4a 	.word	0x7dee2d4a
 8001804:	3fc85936 	.word	0x3fc85936
 8001808:	76c8b439 	.word	0x76c8b439
 800180c:	3f7a9fbe 	.word	0x3f7a9fbe
 8001810:	43889333 	.word	0x43889333
 8001814:	3ff00000 	.word	0x3ff00000

08001818 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	f5ad 6d97 	sub.w	sp, sp, #1208	; 0x4b8
 800181e:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001820:	f000 fbde 	bl	8001fe0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001824:	f000 f8d2 	bl	80019cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001828:	f7ff fb90 	bl	8000f4c <MX_GPIO_Init>
  MX_I2C1_Init();
 800182c:	f7ff fc22 	bl	8001074 <MX_I2C1_Init>
  MX_SPI2_Init();
 8001830:	f000 f946 	bl	8001ac0 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8001834:	f000 fb0a 	bl	8001e4c <MX_USART1_UART_Init>
  MX_IWDG_Init();
 8001838:	f7ff fcba 	bl	80011b0 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
  checkFlags();
 800183c:	f000 f91a 	bl	8001a74 <checkFlags>
  lps_init();
 8001840:	f7ff fe96 	bl	8001570 <lps_init>
  lps_pressure_correction(48);
 8001844:	2030      	movs	r0, #48	; 0x30
 8001846:	f7ff fee7 	bl	8001618 <lps_pressure_correction>
  printf("\r\n\n *** URUCHOMIENIE URZADZENIA *** \r\n\n");
 800184a:	4852      	ldr	r0, [pc, #328]	; (8001994 <main+0x17c>)
 800184c:	f005 feec 	bl	8007628 <puts>
  printf("UART pracuje poprawnie\r\n");
 8001850:	4851      	ldr	r0, [pc, #324]	; (8001998 <main+0x180>)
 8001852:	f005 fee9 	bl	8007628 <puts>
  printf("Testowy odczyt temperatury= %.2f\r\n", lps_read_temperature(U_CELSIUS));
 8001856:	ed9f 0a51 	vldr	s0, [pc, #324]	; 800199c <main+0x184>
 800185a:	f7ff fe99 	bl	8001590 <lps_read_temperature>
 800185e:	ee10 3a10 	vmov	r3, s0
 8001862:	4618      	mov	r0, r3
 8001864:	f7fe fe70 	bl	8000548 <__aeabi_f2d>
 8001868:	4602      	mov	r2, r0
 800186a:	460b      	mov	r3, r1
 800186c:	484c      	ldr	r0, [pc, #304]	; (80019a0 <main+0x188>)
 800186e:	f005 fe55 	bl	800751c <iprintf>
  printf("Testowy odczyt cisnienia= %.2f\r\n", lps_read_relative_pressure());
 8001872:	f7ff ff21 	bl	80016b8 <lps_read_relative_pressure>
 8001876:	ee10 3a10 	vmov	r3, s0
 800187a:	4618      	mov	r0, r3
 800187c:	f7fe fe64 	bl	8000548 <__aeabi_f2d>
 8001880:	4602      	mov	r2, r0
 8001882:	460b      	mov	r3, r1
 8001884:	4847      	ldr	r0, [pc, #284]	; (80019a4 <main+0x18c>)
 8001886:	f005 fe49 	bl	800751c <iprintf>
  printf("Testowy odczyt wysokosci= %.2f\r\n", lps_get_altitude_hyps_f());
 800188a:	f7ff ff69 	bl	8001760 <lps_get_altitude_hyps_f>
 800188e:	ee10 3a10 	vmov	r3, s0
 8001892:	4618      	mov	r0, r3
 8001894:	f7fe fe58 	bl	8000548 <__aeabi_f2d>
 8001898:	4602      	mov	r2, r0
 800189a:	460b      	mov	r3, r1
 800189c:	4842      	ldr	r0, [pc, #264]	; (80019a8 <main+0x190>)
 800189e:	f005 fe3d 	bl	800751c <iprintf>
  lcd_init();
 80018a2:	f7ff fd77 	bl	8001394 <lcd_init>
  hagl_init();
 80018a6:	f004 fe77 	bl	8006598 <hagl_init>

  /* USER CODE END 2 */
  lcd_fill_box(0, 0, LCD_WIDTH, LCD_HEIGHT, BLACK);
 80018aa:	2300      	movs	r3, #0
 80018ac:	9300      	str	r3, [sp, #0]
 80018ae:	2380      	movs	r3, #128	; 0x80
 80018b0:	22a0      	movs	r2, #160	; 0xa0
 80018b2:	2100      	movs	r1, #0
 80018b4:	2000      	movs	r0, #0
 80018b6:	f7ff fd46 	bl	8001346 <lcd_fill_box>

    /* USER CODE BEGIN 3 */

	// Konwersja tekstow do Wide Chara
	wchar_t text[MAXTXTLEN], text2[MAXTXTLEN], text3[MAXTXTLEN];
	swprintf(text, MAXTXTLEN, L"Temperatura: %.2f C", lps_read_temperature(U_CELSIUS));
 80018ba:	ed9f 0a38 	vldr	s0, [pc, #224]	; 800199c <main+0x184>
 80018be:	f7ff fe67 	bl	8001590 <lps_read_temperature>
 80018c2:	ee10 3a10 	vmov	r3, s0
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7fe fe3e 	bl	8000548 <__aeabi_f2d>
 80018cc:	4602      	mov	r2, r0
 80018ce:	460b      	mov	r3, r1
 80018d0:	4638      	mov	r0, r7
 80018d2:	e9cd 2300 	strd	r2, r3, [sp]
 80018d6:	4a35      	ldr	r2, [pc, #212]	; (80019ac <main+0x194>)
 80018d8:	2164      	movs	r1, #100	; 0x64
 80018da:	f005 ff01 	bl	80076e0 <swprintf>
	swprintf(text2, MAXTXTLEN, L"Cisnienie: %.2f Hpa", lps_read_relative_pressure());
 80018de:	f7ff feeb 	bl	80016b8 <lps_read_relative_pressure>
 80018e2:	ee10 3a10 	vmov	r3, s0
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7fe fe2e 	bl	8000548 <__aeabi_f2d>
 80018ec:	4602      	mov	r2, r0
 80018ee:	460b      	mov	r3, r1
 80018f0:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 80018f4:	e9cd 2300 	strd	r2, r3, [sp]
 80018f8:	4a2d      	ldr	r2, [pc, #180]	; (80019b0 <main+0x198>)
 80018fa:	2164      	movs	r1, #100	; 0x64
 80018fc:	f005 fef0 	bl	80076e0 <swprintf>
	swprintf(text3, MAXTXTLEN, L"Wysokosc: %.0f m.n.p.m.", lps_get_altitude_hyps_f());
 8001900:	f7ff ff2e 	bl	8001760 <lps_get_altitude_hyps_f>
 8001904:	ee10 3a10 	vmov	r3, s0
 8001908:	4618      	mov	r0, r3
 800190a:	f7fe fe1d 	bl	8000548 <__aeabi_f2d>
 800190e:	4602      	mov	r2, r0
 8001910:	460b      	mov	r3, r1
 8001912:	f507 7048 	add.w	r0, r7, #800	; 0x320
 8001916:	e9cd 2300 	strd	r2, r3, [sp]
 800191a:	4a26      	ldr	r2, [pc, #152]	; (80019b4 <main+0x19c>)
 800191c:	2164      	movs	r1, #100	; 0x64
 800191e:	f005 fedf 	bl	80076e0 <swprintf>

	hagl_put_text(text, 30, 17, RED, font6x9);
 8001922:	4638      	mov	r0, r7
 8001924:	4b24      	ldr	r3, [pc, #144]	; (80019b8 <main+0x1a0>)
 8001926:	9300      	str	r3, [sp, #0]
 8001928:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800192c:	2211      	movs	r2, #17
 800192e:	211e      	movs	r1, #30
 8001930:	f004 fd7f 	bl	8006432 <hagl_put_text>
	hagl_put_text(text2, 30, 41, RED, font6x9);
 8001934:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 8001938:	4b1f      	ldr	r3, [pc, #124]	; (80019b8 <main+0x1a0>)
 800193a:	9300      	str	r3, [sp, #0]
 800193c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001940:	2229      	movs	r2, #41	; 0x29
 8001942:	211e      	movs	r1, #30
 8001944:	f004 fd75 	bl	8006432 <hagl_put_text>
	hagl_put_text(text3, 30, 70, RED, font6x9);
 8001948:	f507 7048 	add.w	r0, r7, #800	; 0x320
 800194c:	4b1a      	ldr	r3, [pc, #104]	; (80019b8 <main+0x1a0>)
 800194e:	9300      	str	r3, [sp, #0]
 8001950:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001954:	2246      	movs	r2, #70	; 0x46
 8001956:	211e      	movs	r1, #30
 8001958:	f004 fd6b 	bl	8006432 <hagl_put_text>

	lcd_draw_image_fast(2,5,24,24,temp_icon);
 800195c:	4b17      	ldr	r3, [pc, #92]	; (80019bc <main+0x1a4>)
 800195e:	9300      	str	r3, [sp, #0]
 8001960:	2318      	movs	r3, #24
 8001962:	2218      	movs	r2, #24
 8001964:	2105      	movs	r1, #5
 8001966:	2002      	movs	r0, #2
 8001968:	f7ff fd60 	bl	800142c <lcd_draw_image_fast>
	lcd_draw_image_fast(2,34,24,24,press_icon);
 800196c:	4b14      	ldr	r3, [pc, #80]	; (80019c0 <main+0x1a8>)
 800196e:	9300      	str	r3, [sp, #0]
 8001970:	2318      	movs	r3, #24
 8001972:	2218      	movs	r2, #24
 8001974:	2122      	movs	r1, #34	; 0x22
 8001976:	2002      	movs	r0, #2
 8001978:	f7ff fd58 	bl	800142c <lcd_draw_image_fast>
	lcd_draw_image_fast(2,63,24,24,alt_icon);
 800197c:	4b11      	ldr	r3, [pc, #68]	; (80019c4 <main+0x1ac>)
 800197e:	9300      	str	r3, [sp, #0]
 8001980:	2318      	movs	r3, #24
 8001982:	2218      	movs	r2, #24
 8001984:	213f      	movs	r1, #63	; 0x3f
 8001986:	2002      	movs	r0, #2
 8001988:	f7ff fd50 	bl	800142c <lcd_draw_image_fast>

	HAL_IWDG_Refresh(&hiwdg);
 800198c:	480e      	ldr	r0, [pc, #56]	; (80019c8 <main+0x1b0>)
 800198e:	f001 fc47 	bl	8003220 <HAL_IWDG_Refresh>
  {
 8001992:	e792      	b.n	80018ba <main+0xa2>
 8001994:	0800b1a8 	.word	0x0800b1a8
 8001998:	0800b1d0 	.word	0x0800b1d0
 800199c:	00000000 	.word	0x00000000
 80019a0:	0800b1e8 	.word	0x0800b1e8
 80019a4:	0800b20c 	.word	0x0800b20c
 80019a8:	0800b230 	.word	0x0800b230
 80019ac:	0800b254 	.word	0x0800b254
 80019b0:	0800b2a4 	.word	0x0800b2a4
 80019b4:	0800b2f4 	.word	0x0800b2f4
 80019b8:	0800b440 	.word	0x0800b440
 80019bc:	0800e3f8 	.word	0x0800e3f8
 80019c0:	0800e878 	.word	0x0800e878
 80019c4:	0800ecf8 	.word	0x0800ecf8
 80019c8:	20000254 	.word	0x20000254

080019cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b096      	sub	sp, #88	; 0x58
 80019d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019d2:	f107 0314 	add.w	r3, r7, #20
 80019d6:	2244      	movs	r2, #68	; 0x44
 80019d8:	2100      	movs	r1, #0
 80019da:	4618      	mov	r0, r3
 80019dc:	f005 f84c 	bl	8006a78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019e0:	463b      	mov	r3, r7
 80019e2:	2200      	movs	r2, #0
 80019e4:	601a      	str	r2, [r3, #0]
 80019e6:	605a      	str	r2, [r3, #4]
 80019e8:	609a      	str	r2, [r3, #8]
 80019ea:	60da      	str	r2, [r3, #12]
 80019ec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80019ee:	f44f 7000 	mov.w	r0, #512	; 0x200
 80019f2:	f001 fc33 	bl	800325c <HAL_PWREx_ControlVoltageScaling>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80019fc:	f000 f85a 	bl	8001ab4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001a00:	230a      	movs	r3, #10
 8001a02:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a08:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a0a:	2310      	movs	r3, #16
 8001a0c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a12:	2302      	movs	r3, #2
 8001a14:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a16:	2302      	movs	r3, #2
 8001a18:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001a1e:	230a      	movs	r3, #10
 8001a20:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001a22:	2307      	movs	r3, #7
 8001a24:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001a26:	2302      	movs	r3, #2
 8001a28:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a2e:	f107 0314 	add.w	r3, r7, #20
 8001a32:	4618      	mov	r0, r3
 8001a34:	f001 fc68 	bl	8003308 <HAL_RCC_OscConfig>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <SystemClock_Config+0x76>
  {
    Error_Handler();
 8001a3e:	f000 f839 	bl	8001ab4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a42:	230f      	movs	r3, #15
 8001a44:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a46:	2303      	movs	r3, #3
 8001a48:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a52:	2300      	movs	r3, #0
 8001a54:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001a56:	463b      	mov	r3, r7
 8001a58:	2104      	movs	r1, #4
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f002 f830 	bl	8003ac0 <HAL_RCC_ClockConfig>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001a66:	f000 f825 	bl	8001ab4 <Error_Handler>
  }
}
 8001a6a:	bf00      	nop
 8001a6c:	3758      	adds	r7, #88	; 0x58
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
	...

08001a74 <checkFlags>:

/* USER CODE BEGIN 4 */
void checkFlags(){
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
	if(__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST)){
 8001a78:	4b0b      	ldr	r3, [pc, #44]	; (8001aa8 <checkFlags+0x34>)
 8001a7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a7e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d00b      	beq.n	8001a9e <checkFlags+0x2a>
			printf("System zostal zresetowany przez Watchdoga\r\n");
 8001a86:	4809      	ldr	r0, [pc, #36]	; (8001aac <checkFlags+0x38>)
 8001a88:	f005 fdce 	bl	8007628 <puts>
			__HAL_RCC_CLEAR_RESET_FLAGS();
 8001a8c:	4b06      	ldr	r3, [pc, #24]	; (8001aa8 <checkFlags+0x34>)
 8001a8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a92:	4a05      	ldr	r2, [pc, #20]	; (8001aa8 <checkFlags+0x34>)
 8001a94:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001a98:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
		} else{
			printf("System zostal uruchomiony poprawnie\r\n");
		}
}
 8001a9c:	e002      	b.n	8001aa4 <checkFlags+0x30>
			printf("System zostal uruchomiony poprawnie\r\n");
 8001a9e:	4804      	ldr	r0, [pc, #16]	; (8001ab0 <checkFlags+0x3c>)
 8001aa0:	f005 fdc2 	bl	8007628 <puts>
}
 8001aa4:	bf00      	nop
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	40021000 	.word	0x40021000
 8001aac:	0800b354 	.word	0x0800b354
 8001ab0:	0800b380 	.word	0x0800b380

08001ab4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ab8:	b672      	cpsid	i
}
 8001aba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001abc:	e7fe      	b.n	8001abc <Error_Handler+0x8>
	...

08001ac0 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001ac4:	4b1b      	ldr	r3, [pc, #108]	; (8001b34 <MX_SPI2_Init+0x74>)
 8001ac6:	4a1c      	ldr	r2, [pc, #112]	; (8001b38 <MX_SPI2_Init+0x78>)
 8001ac8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001aca:	4b1a      	ldr	r3, [pc, #104]	; (8001b34 <MX_SPI2_Init+0x74>)
 8001acc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ad0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001ad2:	4b18      	ldr	r3, [pc, #96]	; (8001b34 <MX_SPI2_Init+0x74>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ad8:	4b16      	ldr	r3, [pc, #88]	; (8001b34 <MX_SPI2_Init+0x74>)
 8001ada:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001ade:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ae0:	4b14      	ldr	r3, [pc, #80]	; (8001b34 <MX_SPI2_Init+0x74>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ae6:	4b13      	ldr	r3, [pc, #76]	; (8001b34 <MX_SPI2_Init+0x74>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001aec:	4b11      	ldr	r3, [pc, #68]	; (8001b34 <MX_SPI2_Init+0x74>)
 8001aee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001af2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001af4:	4b0f      	ldr	r3, [pc, #60]	; (8001b34 <MX_SPI2_Init+0x74>)
 8001af6:	2210      	movs	r2, #16
 8001af8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001afa:	4b0e      	ldr	r3, [pc, #56]	; (8001b34 <MX_SPI2_Init+0x74>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b00:	4b0c      	ldr	r3, [pc, #48]	; (8001b34 <MX_SPI2_Init+0x74>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b06:	4b0b      	ldr	r3, [pc, #44]	; (8001b34 <MX_SPI2_Init+0x74>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001b0c:	4b09      	ldr	r3, [pc, #36]	; (8001b34 <MX_SPI2_Init+0x74>)
 8001b0e:	2207      	movs	r2, #7
 8001b10:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001b12:	4b08      	ldr	r3, [pc, #32]	; (8001b34 <MX_SPI2_Init+0x74>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001b18:	4b06      	ldr	r3, [pc, #24]	; (8001b34 <MX_SPI2_Init+0x74>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001b1e:	4805      	ldr	r0, [pc, #20]	; (8001b34 <MX_SPI2_Init+0x74>)
 8001b20:	f002 feae 	bl	8004880 <HAL_SPI_Init>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001b2a:	f7ff ffc3 	bl	8001ab4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001b2e:	bf00      	nop
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	20000264 	.word	0x20000264
 8001b38:	40003800 	.word	0x40003800

08001b3c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b08a      	sub	sp, #40	; 0x28
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b44:	f107 0314 	add.w	r3, r7, #20
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	605a      	str	r2, [r3, #4]
 8001b4e:	609a      	str	r2, [r3, #8]
 8001b50:	60da      	str	r2, [r3, #12]
 8001b52:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a25      	ldr	r2, [pc, #148]	; (8001bf0 <HAL_SPI_MspInit+0xb4>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d144      	bne.n	8001be8 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001b5e:	4b25      	ldr	r3, [pc, #148]	; (8001bf4 <HAL_SPI_MspInit+0xb8>)
 8001b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b62:	4a24      	ldr	r2, [pc, #144]	; (8001bf4 <HAL_SPI_MspInit+0xb8>)
 8001b64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b68:	6593      	str	r3, [r2, #88]	; 0x58
 8001b6a:	4b22      	ldr	r3, [pc, #136]	; (8001bf4 <HAL_SPI_MspInit+0xb8>)
 8001b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b72:	613b      	str	r3, [r7, #16]
 8001b74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b76:	4b1f      	ldr	r3, [pc, #124]	; (8001bf4 <HAL_SPI_MspInit+0xb8>)
 8001b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b7a:	4a1e      	ldr	r2, [pc, #120]	; (8001bf4 <HAL_SPI_MspInit+0xb8>)
 8001b7c:	f043 0304 	orr.w	r3, r3, #4
 8001b80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b82:	4b1c      	ldr	r3, [pc, #112]	; (8001bf4 <HAL_SPI_MspInit+0xb8>)
 8001b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b86:	f003 0304 	and.w	r3, r3, #4
 8001b8a:	60fb      	str	r3, [r7, #12]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b8e:	4b19      	ldr	r3, [pc, #100]	; (8001bf4 <HAL_SPI_MspInit+0xb8>)
 8001b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b92:	4a18      	ldr	r2, [pc, #96]	; (8001bf4 <HAL_SPI_MspInit+0xb8>)
 8001b94:	f043 0302 	orr.w	r3, r3, #2
 8001b98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b9a:	4b16      	ldr	r3, [pc, #88]	; (8001bf4 <HAL_SPI_MspInit+0xb8>)
 8001b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b9e:	f003 0302 	and.w	r3, r3, #2
 8001ba2:	60bb      	str	r3, [r7, #8]
 8001ba4:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001ba6:	2308      	movs	r3, #8
 8001ba8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001baa:	2302      	movs	r3, #2
 8001bac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001bb6:	2305      	movs	r3, #5
 8001bb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bba:	f107 0314 	add.w	r3, r7, #20
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	480d      	ldr	r0, [pc, #52]	; (8001bf8 <HAL_SPI_MspInit+0xbc>)
 8001bc2:	f000 fb93 	bl	80022ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001bc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bcc:	2302      	movs	r3, #2
 8001bce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001bd8:	2305      	movs	r3, #5
 8001bda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bdc:	f107 0314 	add.w	r3, r7, #20
 8001be0:	4619      	mov	r1, r3
 8001be2:	4806      	ldr	r0, [pc, #24]	; (8001bfc <HAL_SPI_MspInit+0xc0>)
 8001be4:	f000 fb82 	bl	80022ec <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001be8:	bf00      	nop
 8001bea:	3728      	adds	r7, #40	; 0x28
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	40003800 	.word	0x40003800
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	48000800 	.word	0x48000800
 8001bfc:	48000400 	.word	0x48000400

08001c00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c06:	4b0f      	ldr	r3, [pc, #60]	; (8001c44 <HAL_MspInit+0x44>)
 8001c08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c0a:	4a0e      	ldr	r2, [pc, #56]	; (8001c44 <HAL_MspInit+0x44>)
 8001c0c:	f043 0301 	orr.w	r3, r3, #1
 8001c10:	6613      	str	r3, [r2, #96]	; 0x60
 8001c12:	4b0c      	ldr	r3, [pc, #48]	; (8001c44 <HAL_MspInit+0x44>)
 8001c14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	607b      	str	r3, [r7, #4]
 8001c1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c1e:	4b09      	ldr	r3, [pc, #36]	; (8001c44 <HAL_MspInit+0x44>)
 8001c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c22:	4a08      	ldr	r2, [pc, #32]	; (8001c44 <HAL_MspInit+0x44>)
 8001c24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c28:	6593      	str	r3, [r2, #88]	; 0x58
 8001c2a:	4b06      	ldr	r3, [pc, #24]	; (8001c44 <HAL_MspInit+0x44>)
 8001c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c32:	603b      	str	r3, [r7, #0]
 8001c34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c36:	bf00      	nop
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	40021000 	.word	0x40021000

08001c48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c4c:	e7fe      	b.n	8001c4c <NMI_Handler+0x4>

08001c4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c4e:	b480      	push	{r7}
 8001c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c52:	e7fe      	b.n	8001c52 <HardFault_Handler+0x4>

08001c54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c58:	e7fe      	b.n	8001c58 <MemManage_Handler+0x4>

08001c5a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c5e:	e7fe      	b.n	8001c5e <BusFault_Handler+0x4>

08001c60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c64:	e7fe      	b.n	8001c64 <UsageFault_Handler+0x4>

08001c66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c66:	b480      	push	{r7}
 8001c68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c6a:	bf00      	nop
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr

08001c74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c78:	bf00      	nop
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr

08001c82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c82:	b480      	push	{r7}
 8001c84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c86:	bf00      	nop
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr

08001c90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c94:	f000 fa00 	bl	8002098 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c98:	bf00      	nop
 8001c9a:	bd80      	pop	{r7, pc}

08001c9c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
	return 1;
 8001ca0:	2301      	movs	r3, #1
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <_kill>:

int _kill(int pid, int sig)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001cb6:	f004 fc77 	bl	80065a8 <__errno>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2216      	movs	r2, #22
 8001cbe:	601a      	str	r2, [r3, #0]
	return -1;
 8001cc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3708      	adds	r7, #8
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <_exit>:

void _exit (int status)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001cd4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f7ff ffe7 	bl	8001cac <_kill>
	while (1) {}		/* Make sure we hang here */
 8001cde:	e7fe      	b.n	8001cde <_exit+0x12>

08001ce0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b086      	sub	sp, #24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cec:	2300      	movs	r3, #0
 8001cee:	617b      	str	r3, [r7, #20]
 8001cf0:	e00a      	b.n	8001d08 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001cf2:	f3af 8000 	nop.w
 8001cf6:	4601      	mov	r1, r0
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	1c5a      	adds	r2, r3, #1
 8001cfc:	60ba      	str	r2, [r7, #8]
 8001cfe:	b2ca      	uxtb	r2, r1
 8001d00:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	3301      	adds	r3, #1
 8001d06:	617b      	str	r3, [r7, #20]
 8001d08:	697a      	ldr	r2, [r7, #20]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	dbf0      	blt.n	8001cf2 <_read+0x12>
	}

return len;
 8001d10:	687b      	ldr	r3, [r7, #4]
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3718      	adds	r7, #24
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b086      	sub	sp, #24
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	60f8      	str	r0, [r7, #12]
 8001d22:	60b9      	str	r1, [r7, #8]
 8001d24:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d26:	2300      	movs	r3, #0
 8001d28:	617b      	str	r3, [r7, #20]
 8001d2a:	e009      	b.n	8001d40 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	1c5a      	adds	r2, r3, #1
 8001d30:	60ba      	str	r2, [r7, #8]
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	4618      	mov	r0, r3
 8001d36:	f000 f917 	bl	8001f68 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	617b      	str	r3, [r7, #20]
 8001d40:	697a      	ldr	r2, [r7, #20]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	dbf1      	blt.n	8001d2c <_write+0x12>
	}
	return len;
 8001d48:	687b      	ldr	r3, [r7, #4]
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3718      	adds	r7, #24
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <_close>:

int _close(int file)
{
 8001d52:	b480      	push	{r7}
 8001d54:	b083      	sub	sp, #12
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
	return -1;
 8001d5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr

08001d6a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	b083      	sub	sp, #12
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
 8001d72:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d7a:	605a      	str	r2, [r3, #4]
	return 0;
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr

08001d8a <_isatty>:

int _isatty(int file)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	b083      	sub	sp, #12
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
	return 1;
 8001d92:	2301      	movs	r3, #1
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b085      	sub	sp, #20
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	60b9      	str	r1, [r7, #8]
 8001daa:	607a      	str	r2, [r7, #4]
	return 0;
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3714      	adds	r7, #20
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
	...

08001dbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b086      	sub	sp, #24
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001dc4:	4a14      	ldr	r2, [pc, #80]	; (8001e18 <_sbrk+0x5c>)
 8001dc6:	4b15      	ldr	r3, [pc, #84]	; (8001e1c <_sbrk+0x60>)
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dd0:	4b13      	ldr	r3, [pc, #76]	; (8001e20 <_sbrk+0x64>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d102      	bne.n	8001dde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dd8:	4b11      	ldr	r3, [pc, #68]	; (8001e20 <_sbrk+0x64>)
 8001dda:	4a12      	ldr	r2, [pc, #72]	; (8001e24 <_sbrk+0x68>)
 8001ddc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dde:	4b10      	ldr	r3, [pc, #64]	; (8001e20 <_sbrk+0x64>)
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4413      	add	r3, r2
 8001de6:	693a      	ldr	r2, [r7, #16]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d207      	bcs.n	8001dfc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dec:	f004 fbdc 	bl	80065a8 <__errno>
 8001df0:	4603      	mov	r3, r0
 8001df2:	220c      	movs	r2, #12
 8001df4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001df6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001dfa:	e009      	b.n	8001e10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dfc:	4b08      	ldr	r3, [pc, #32]	; (8001e20 <_sbrk+0x64>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e02:	4b07      	ldr	r3, [pc, #28]	; (8001e20 <_sbrk+0x64>)
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4413      	add	r3, r2
 8001e0a:	4a05      	ldr	r2, [pc, #20]	; (8001e20 <_sbrk+0x64>)
 8001e0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3718      	adds	r7, #24
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	20018000 	.word	0x20018000
 8001e1c:	00000400 	.word	0x00000400
 8001e20:	200002c8 	.word	0x200002c8
 8001e24:	20000368 	.word	0x20000368

08001e28 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001e2c:	4b06      	ldr	r3, [pc, #24]	; (8001e48 <SystemInit+0x20>)
 8001e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e32:	4a05      	ldr	r2, [pc, #20]	; (8001e48 <SystemInit+0x20>)
 8001e34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001e3c:	bf00      	nop
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	e000ed00 	.word	0xe000ed00

08001e4c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e50:	4b14      	ldr	r3, [pc, #80]	; (8001ea4 <MX_USART1_UART_Init+0x58>)
 8001e52:	4a15      	ldr	r2, [pc, #84]	; (8001ea8 <MX_USART1_UART_Init+0x5c>)
 8001e54:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001e56:	4b13      	ldr	r3, [pc, #76]	; (8001ea4 <MX_USART1_UART_Init+0x58>)
 8001e58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e5c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e5e:	4b11      	ldr	r3, [pc, #68]	; (8001ea4 <MX_USART1_UART_Init+0x58>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e64:	4b0f      	ldr	r3, [pc, #60]	; (8001ea4 <MX_USART1_UART_Init+0x58>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e6a:	4b0e      	ldr	r3, [pc, #56]	; (8001ea4 <MX_USART1_UART_Init+0x58>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e70:	4b0c      	ldr	r3, [pc, #48]	; (8001ea4 <MX_USART1_UART_Init+0x58>)
 8001e72:	220c      	movs	r2, #12
 8001e74:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e76:	4b0b      	ldr	r3, [pc, #44]	; (8001ea4 <MX_USART1_UART_Init+0x58>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e7c:	4b09      	ldr	r3, [pc, #36]	; (8001ea4 <MX_USART1_UART_Init+0x58>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e82:	4b08      	ldr	r3, [pc, #32]	; (8001ea4 <MX_USART1_UART_Init+0x58>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e88:	4b06      	ldr	r3, [pc, #24]	; (8001ea4 <MX_USART1_UART_Init+0x58>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e8e:	4805      	ldr	r0, [pc, #20]	; (8001ea4 <MX_USART1_UART_Init+0x58>)
 8001e90:	f003 f86c 	bl	8004f6c <HAL_UART_Init>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001e9a:	f7ff fe0b 	bl	8001ab4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e9e:	bf00      	nop
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	200002cc 	.word	0x200002cc
 8001ea8:	40013800 	.word	0x40013800

08001eac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b0ac      	sub	sp, #176	; 0xb0
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]
 8001ebc:	605a      	str	r2, [r3, #4]
 8001ebe:	609a      	str	r2, [r3, #8]
 8001ec0:	60da      	str	r2, [r3, #12]
 8001ec2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ec4:	f107 0314 	add.w	r3, r7, #20
 8001ec8:	2288      	movs	r2, #136	; 0x88
 8001eca:	2100      	movs	r1, #0
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f004 fdd3 	bl	8006a78 <memset>
  if(uartHandle->Instance==USART1)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a22      	ldr	r2, [pc, #136]	; (8001f60 <HAL_UART_MspInit+0xb4>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d13c      	bne.n	8001f56 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001edc:	2301      	movs	r3, #1
 8001ede:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ee4:	f107 0314 	add.w	r3, r7, #20
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f002 f80d 	bl	8003f08 <HAL_RCCEx_PeriphCLKConfig>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001ef4:	f7ff fdde 	bl	8001ab4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ef8:	4b1a      	ldr	r3, [pc, #104]	; (8001f64 <HAL_UART_MspInit+0xb8>)
 8001efa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001efc:	4a19      	ldr	r2, [pc, #100]	; (8001f64 <HAL_UART_MspInit+0xb8>)
 8001efe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f02:	6613      	str	r3, [r2, #96]	; 0x60
 8001f04:	4b17      	ldr	r3, [pc, #92]	; (8001f64 <HAL_UART_MspInit+0xb8>)
 8001f06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f0c:	613b      	str	r3, [r7, #16]
 8001f0e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f10:	4b14      	ldr	r3, [pc, #80]	; (8001f64 <HAL_UART_MspInit+0xb8>)
 8001f12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f14:	4a13      	ldr	r2, [pc, #76]	; (8001f64 <HAL_UART_MspInit+0xb8>)
 8001f16:	f043 0301 	orr.w	r3, r3, #1
 8001f1a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f1c:	4b11      	ldr	r3, [pc, #68]	; (8001f64 <HAL_UART_MspInit+0xb8>)
 8001f1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f20:	f003 0301 	and.w	r3, r3, #1
 8001f24:	60fb      	str	r3, [r7, #12]
 8001f26:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001f28:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001f2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f30:	2302      	movs	r3, #2
 8001f32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f36:	2300      	movs	r3, #0
 8001f38:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f42:	2307      	movs	r3, #7
 8001f44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f48:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f52:	f000 f9cb 	bl	80022ec <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001f56:	bf00      	nop
 8001f58:	37b0      	adds	r7, #176	; 0xb0
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	40013800 	.word	0x40013800
 8001f64:	40021000 	.word	0x40021000

08001f68 <__io_putchar>:
  }
}

/* USER CODE BEGIN 1 */
int __io_putchar(int ch)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]

  HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001f70:	1d39      	adds	r1, r7, #4
 8001f72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f76:	2201      	movs	r2, #1
 8001f78:	4803      	ldr	r0, [pc, #12]	; (8001f88 <__io_putchar+0x20>)
 8001f7a:	f003 f845 	bl	8005008 <HAL_UART_Transmit>

  return 1;
 8001f7e:	2301      	movs	r3, #1
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3708      	adds	r7, #8
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	200002cc 	.word	0x200002cc

08001f8c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001f8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fc4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f90:	f7ff ff4a 	bl	8001e28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f94:	480c      	ldr	r0, [pc, #48]	; (8001fc8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f96:	490d      	ldr	r1, [pc, #52]	; (8001fcc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f98:	4a0d      	ldr	r2, [pc, #52]	; (8001fd0 <LoopForever+0xe>)
  movs r3, #0
 8001f9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f9c:	e002      	b.n	8001fa4 <LoopCopyDataInit>

08001f9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fa0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fa2:	3304      	adds	r3, #4

08001fa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fa4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fa6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fa8:	d3f9      	bcc.n	8001f9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001faa:	4a0a      	ldr	r2, [pc, #40]	; (8001fd4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001fac:	4c0a      	ldr	r4, [pc, #40]	; (8001fd8 <LoopForever+0x16>)
  movs r3, #0
 8001fae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fb0:	e001      	b.n	8001fb6 <LoopFillZerobss>

08001fb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fb4:	3204      	adds	r2, #4

08001fb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fb8:	d3fb      	bcc.n	8001fb2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fba:	f004 fcb3 	bl	8006924 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001fbe:	f7ff fc2b 	bl	8001818 <main>

08001fc2 <LoopForever>:

LoopForever:
    b LoopForever
 8001fc2:	e7fe      	b.n	8001fc2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001fc4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001fc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fcc:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001fd0:	0800f7c0 	.word	0x0800f7c0
  ldr r2, =_sbss
 8001fd4:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001fd8:	20000364 	.word	0x20000364

08001fdc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001fdc:	e7fe      	b.n	8001fdc <ADC1_2_IRQHandler>
	...

08001fe0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fea:	4b0c      	ldr	r3, [pc, #48]	; (800201c <HAL_Init+0x3c>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a0b      	ldr	r2, [pc, #44]	; (800201c <HAL_Init+0x3c>)
 8001ff0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ff4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ff6:	2003      	movs	r0, #3
 8001ff8:	f000 f944 	bl	8002284 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ffc:	2000      	movs	r0, #0
 8001ffe:	f000 f80f 	bl	8002020 <HAL_InitTick>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d002      	beq.n	800200e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	71fb      	strb	r3, [r7, #7]
 800200c:	e001      	b.n	8002012 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800200e:	f7ff fdf7 	bl	8001c00 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002012:	79fb      	ldrb	r3, [r7, #7]
}
 8002014:	4618      	mov	r0, r3
 8002016:	3708      	adds	r7, #8
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	40022000 	.word	0x40022000

08002020 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002028:	2300      	movs	r3, #0
 800202a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800202c:	4b17      	ldr	r3, [pc, #92]	; (800208c <HAL_InitTick+0x6c>)
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d023      	beq.n	800207c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002034:	4b16      	ldr	r3, [pc, #88]	; (8002090 <HAL_InitTick+0x70>)
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	4b14      	ldr	r3, [pc, #80]	; (800208c <HAL_InitTick+0x6c>)
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	4619      	mov	r1, r3
 800203e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002042:	fbb3 f3f1 	udiv	r3, r3, r1
 8002046:	fbb2 f3f3 	udiv	r3, r2, r3
 800204a:	4618      	mov	r0, r3
 800204c:	f000 f941 	bl	80022d2 <HAL_SYSTICK_Config>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d10f      	bne.n	8002076 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2b0f      	cmp	r3, #15
 800205a:	d809      	bhi.n	8002070 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800205c:	2200      	movs	r2, #0
 800205e:	6879      	ldr	r1, [r7, #4]
 8002060:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002064:	f000 f919 	bl	800229a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002068:	4a0a      	ldr	r2, [pc, #40]	; (8002094 <HAL_InitTick+0x74>)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6013      	str	r3, [r2, #0]
 800206e:	e007      	b.n	8002080 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	73fb      	strb	r3, [r7, #15]
 8002074:	e004      	b.n	8002080 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	73fb      	strb	r3, [r7, #15]
 800207a:	e001      	b.n	8002080 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002080:	7bfb      	ldrb	r3, [r7, #15]
}
 8002082:	4618      	mov	r0, r3
 8002084:	3710      	adds	r7, #16
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	20000008 	.word	0x20000008
 8002090:	20000000 	.word	0x20000000
 8002094:	20000004 	.word	0x20000004

08002098 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800209c:	4b06      	ldr	r3, [pc, #24]	; (80020b8 <HAL_IncTick+0x20>)
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	461a      	mov	r2, r3
 80020a2:	4b06      	ldr	r3, [pc, #24]	; (80020bc <HAL_IncTick+0x24>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4413      	add	r3, r2
 80020a8:	4a04      	ldr	r2, [pc, #16]	; (80020bc <HAL_IncTick+0x24>)
 80020aa:	6013      	str	r3, [r2, #0]
}
 80020ac:	bf00      	nop
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	20000008 	.word	0x20000008
 80020bc:	20000350 	.word	0x20000350

080020c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  return uwTick;
 80020c4:	4b03      	ldr	r3, [pc, #12]	; (80020d4 <HAL_GetTick+0x14>)
 80020c6:	681b      	ldr	r3, [r3, #0]
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	20000350 	.word	0x20000350

080020d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020e0:	f7ff ffee 	bl	80020c0 <HAL_GetTick>
 80020e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020f0:	d005      	beq.n	80020fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80020f2:	4b0a      	ldr	r3, [pc, #40]	; (800211c <HAL_Delay+0x44>)
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	461a      	mov	r2, r3
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	4413      	add	r3, r2
 80020fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020fe:	bf00      	nop
 8002100:	f7ff ffde 	bl	80020c0 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	68fa      	ldr	r2, [r7, #12]
 800210c:	429a      	cmp	r2, r3
 800210e:	d8f7      	bhi.n	8002100 <HAL_Delay+0x28>
  {
  }
}
 8002110:	bf00      	nop
 8002112:	bf00      	nop
 8002114:	3710      	adds	r7, #16
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	20000008 	.word	0x20000008

08002120 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002120:	b480      	push	{r7}
 8002122:	b085      	sub	sp, #20
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f003 0307 	and.w	r3, r3, #7
 800212e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002130:	4b0c      	ldr	r3, [pc, #48]	; (8002164 <__NVIC_SetPriorityGrouping+0x44>)
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002136:	68ba      	ldr	r2, [r7, #8]
 8002138:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800213c:	4013      	ands	r3, r2
 800213e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002148:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800214c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002150:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002152:	4a04      	ldr	r2, [pc, #16]	; (8002164 <__NVIC_SetPriorityGrouping+0x44>)
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	60d3      	str	r3, [r2, #12]
}
 8002158:	bf00      	nop
 800215a:	3714      	adds	r7, #20
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr
 8002164:	e000ed00 	.word	0xe000ed00

08002168 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800216c:	4b04      	ldr	r3, [pc, #16]	; (8002180 <__NVIC_GetPriorityGrouping+0x18>)
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	0a1b      	lsrs	r3, r3, #8
 8002172:	f003 0307 	and.w	r3, r3, #7
}
 8002176:	4618      	mov	r0, r3
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr
 8002180:	e000ed00 	.word	0xe000ed00

08002184 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	4603      	mov	r3, r0
 800218c:	6039      	str	r1, [r7, #0]
 800218e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002194:	2b00      	cmp	r3, #0
 8002196:	db0a      	blt.n	80021ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	b2da      	uxtb	r2, r3
 800219c:	490c      	ldr	r1, [pc, #48]	; (80021d0 <__NVIC_SetPriority+0x4c>)
 800219e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a2:	0112      	lsls	r2, r2, #4
 80021a4:	b2d2      	uxtb	r2, r2
 80021a6:	440b      	add	r3, r1
 80021a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021ac:	e00a      	b.n	80021c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	b2da      	uxtb	r2, r3
 80021b2:	4908      	ldr	r1, [pc, #32]	; (80021d4 <__NVIC_SetPriority+0x50>)
 80021b4:	79fb      	ldrb	r3, [r7, #7]
 80021b6:	f003 030f 	and.w	r3, r3, #15
 80021ba:	3b04      	subs	r3, #4
 80021bc:	0112      	lsls	r2, r2, #4
 80021be:	b2d2      	uxtb	r2, r2
 80021c0:	440b      	add	r3, r1
 80021c2:	761a      	strb	r2, [r3, #24]
}
 80021c4:	bf00      	nop
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr
 80021d0:	e000e100 	.word	0xe000e100
 80021d4:	e000ed00 	.word	0xe000ed00

080021d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021d8:	b480      	push	{r7}
 80021da:	b089      	sub	sp, #36	; 0x24
 80021dc:	af00      	add	r7, sp, #0
 80021de:	60f8      	str	r0, [r7, #12]
 80021e0:	60b9      	str	r1, [r7, #8]
 80021e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	f003 0307 	and.w	r3, r3, #7
 80021ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	f1c3 0307 	rsb	r3, r3, #7
 80021f2:	2b04      	cmp	r3, #4
 80021f4:	bf28      	it	cs
 80021f6:	2304      	movcs	r3, #4
 80021f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	3304      	adds	r3, #4
 80021fe:	2b06      	cmp	r3, #6
 8002200:	d902      	bls.n	8002208 <NVIC_EncodePriority+0x30>
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	3b03      	subs	r3, #3
 8002206:	e000      	b.n	800220a <NVIC_EncodePriority+0x32>
 8002208:	2300      	movs	r3, #0
 800220a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800220c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002210:	69bb      	ldr	r3, [r7, #24]
 8002212:	fa02 f303 	lsl.w	r3, r2, r3
 8002216:	43da      	mvns	r2, r3
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	401a      	ands	r2, r3
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002220:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	fa01 f303 	lsl.w	r3, r1, r3
 800222a:	43d9      	mvns	r1, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002230:	4313      	orrs	r3, r2
         );
}
 8002232:	4618      	mov	r0, r3
 8002234:	3724      	adds	r7, #36	; 0x24
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
	...

08002240 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	3b01      	subs	r3, #1
 800224c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002250:	d301      	bcc.n	8002256 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002252:	2301      	movs	r3, #1
 8002254:	e00f      	b.n	8002276 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002256:	4a0a      	ldr	r2, [pc, #40]	; (8002280 <SysTick_Config+0x40>)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	3b01      	subs	r3, #1
 800225c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800225e:	210f      	movs	r1, #15
 8002260:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002264:	f7ff ff8e 	bl	8002184 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002268:	4b05      	ldr	r3, [pc, #20]	; (8002280 <SysTick_Config+0x40>)
 800226a:	2200      	movs	r2, #0
 800226c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800226e:	4b04      	ldr	r3, [pc, #16]	; (8002280 <SysTick_Config+0x40>)
 8002270:	2207      	movs	r2, #7
 8002272:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002274:	2300      	movs	r3, #0
}
 8002276:	4618      	mov	r0, r3
 8002278:	3708      	adds	r7, #8
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	e000e010 	.word	0xe000e010

08002284 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f7ff ff47 	bl	8002120 <__NVIC_SetPriorityGrouping>
}
 8002292:	bf00      	nop
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	b086      	sub	sp, #24
 800229e:	af00      	add	r7, sp, #0
 80022a0:	4603      	mov	r3, r0
 80022a2:	60b9      	str	r1, [r7, #8]
 80022a4:	607a      	str	r2, [r7, #4]
 80022a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80022a8:	2300      	movs	r3, #0
 80022aa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80022ac:	f7ff ff5c 	bl	8002168 <__NVIC_GetPriorityGrouping>
 80022b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	68b9      	ldr	r1, [r7, #8]
 80022b6:	6978      	ldr	r0, [r7, #20]
 80022b8:	f7ff ff8e 	bl	80021d8 <NVIC_EncodePriority>
 80022bc:	4602      	mov	r2, r0
 80022be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022c2:	4611      	mov	r1, r2
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7ff ff5d 	bl	8002184 <__NVIC_SetPriority>
}
 80022ca:	bf00      	nop
 80022cc:	3718      	adds	r7, #24
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}

080022d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022d2:	b580      	push	{r7, lr}
 80022d4:	b082      	sub	sp, #8
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f7ff ffb0 	bl	8002240 <SysTick_Config>
 80022e0:	4603      	mov	r3, r0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3708      	adds	r7, #8
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
	...

080022ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b087      	sub	sp, #28
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022f6:	2300      	movs	r3, #0
 80022f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022fa:	e17f      	b.n	80025fc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	2101      	movs	r1, #1
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	fa01 f303 	lsl.w	r3, r1, r3
 8002308:	4013      	ands	r3, r2
 800230a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2b00      	cmp	r3, #0
 8002310:	f000 8171 	beq.w	80025f6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f003 0303 	and.w	r3, r3, #3
 800231c:	2b01      	cmp	r3, #1
 800231e:	d005      	beq.n	800232c <HAL_GPIO_Init+0x40>
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f003 0303 	and.w	r3, r3, #3
 8002328:	2b02      	cmp	r3, #2
 800232a:	d130      	bne.n	800238e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	2203      	movs	r2, #3
 8002338:	fa02 f303 	lsl.w	r3, r2, r3
 800233c:	43db      	mvns	r3, r3
 800233e:	693a      	ldr	r2, [r7, #16]
 8002340:	4013      	ands	r3, r2
 8002342:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	68da      	ldr	r2, [r3, #12]
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	fa02 f303 	lsl.w	r3, r2, r3
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	4313      	orrs	r3, r2
 8002354:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	693a      	ldr	r2, [r7, #16]
 800235a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002362:	2201      	movs	r2, #1
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	fa02 f303 	lsl.w	r3, r2, r3
 800236a:	43db      	mvns	r3, r3
 800236c:	693a      	ldr	r2, [r7, #16]
 800236e:	4013      	ands	r3, r2
 8002370:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	091b      	lsrs	r3, r3, #4
 8002378:	f003 0201 	and.w	r2, r3, #1
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	fa02 f303 	lsl.w	r3, r2, r3
 8002382:	693a      	ldr	r2, [r7, #16]
 8002384:	4313      	orrs	r3, r2
 8002386:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	693a      	ldr	r2, [r7, #16]
 800238c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f003 0303 	and.w	r3, r3, #3
 8002396:	2b03      	cmp	r3, #3
 8002398:	d118      	bne.n	80023cc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800239e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80023a0:	2201      	movs	r2, #1
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	fa02 f303 	lsl.w	r3, r2, r3
 80023a8:	43db      	mvns	r3, r3
 80023aa:	693a      	ldr	r2, [r7, #16]
 80023ac:	4013      	ands	r3, r2
 80023ae:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	08db      	lsrs	r3, r3, #3
 80023b6:	f003 0201 	and.w	r2, r3, #1
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	fa02 f303 	lsl.w	r3, r2, r3
 80023c0:	693a      	ldr	r2, [r7, #16]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	693a      	ldr	r2, [r7, #16]
 80023ca:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f003 0303 	and.w	r3, r3, #3
 80023d4:	2b03      	cmp	r3, #3
 80023d6:	d017      	beq.n	8002408 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	005b      	lsls	r3, r3, #1
 80023e2:	2203      	movs	r2, #3
 80023e4:	fa02 f303 	lsl.w	r3, r2, r3
 80023e8:	43db      	mvns	r3, r3
 80023ea:	693a      	ldr	r2, [r7, #16]
 80023ec:	4013      	ands	r3, r2
 80023ee:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	689a      	ldr	r2, [r3, #8]
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	fa02 f303 	lsl.w	r3, r2, r3
 80023fc:	693a      	ldr	r2, [r7, #16]
 80023fe:	4313      	orrs	r3, r2
 8002400:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	693a      	ldr	r2, [r7, #16]
 8002406:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f003 0303 	and.w	r3, r3, #3
 8002410:	2b02      	cmp	r3, #2
 8002412:	d123      	bne.n	800245c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	08da      	lsrs	r2, r3, #3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	3208      	adds	r2, #8
 800241c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002420:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	f003 0307 	and.w	r3, r3, #7
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	220f      	movs	r2, #15
 800242c:	fa02 f303 	lsl.w	r3, r2, r3
 8002430:	43db      	mvns	r3, r3
 8002432:	693a      	ldr	r2, [r7, #16]
 8002434:	4013      	ands	r3, r2
 8002436:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	691a      	ldr	r2, [r3, #16]
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	f003 0307 	and.w	r3, r3, #7
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	fa02 f303 	lsl.w	r3, r2, r3
 8002448:	693a      	ldr	r2, [r7, #16]
 800244a:	4313      	orrs	r3, r2
 800244c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	08da      	lsrs	r2, r3, #3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	3208      	adds	r2, #8
 8002456:	6939      	ldr	r1, [r7, #16]
 8002458:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	2203      	movs	r2, #3
 8002468:	fa02 f303 	lsl.w	r3, r2, r3
 800246c:	43db      	mvns	r3, r3
 800246e:	693a      	ldr	r2, [r7, #16]
 8002470:	4013      	ands	r3, r2
 8002472:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f003 0203 	and.w	r2, r3, #3
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	005b      	lsls	r3, r3, #1
 8002480:	fa02 f303 	lsl.w	r3, r2, r3
 8002484:	693a      	ldr	r2, [r7, #16]
 8002486:	4313      	orrs	r3, r2
 8002488:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	693a      	ldr	r2, [r7, #16]
 800248e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002498:	2b00      	cmp	r3, #0
 800249a:	f000 80ac 	beq.w	80025f6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800249e:	4b5f      	ldr	r3, [pc, #380]	; (800261c <HAL_GPIO_Init+0x330>)
 80024a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024a2:	4a5e      	ldr	r2, [pc, #376]	; (800261c <HAL_GPIO_Init+0x330>)
 80024a4:	f043 0301 	orr.w	r3, r3, #1
 80024a8:	6613      	str	r3, [r2, #96]	; 0x60
 80024aa:	4b5c      	ldr	r3, [pc, #368]	; (800261c <HAL_GPIO_Init+0x330>)
 80024ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	60bb      	str	r3, [r7, #8]
 80024b4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80024b6:	4a5a      	ldr	r2, [pc, #360]	; (8002620 <HAL_GPIO_Init+0x334>)
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	089b      	lsrs	r3, r3, #2
 80024bc:	3302      	adds	r3, #2
 80024be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	f003 0303 	and.w	r3, r3, #3
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	220f      	movs	r2, #15
 80024ce:	fa02 f303 	lsl.w	r3, r2, r3
 80024d2:	43db      	mvns	r3, r3
 80024d4:	693a      	ldr	r2, [r7, #16]
 80024d6:	4013      	ands	r3, r2
 80024d8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80024e0:	d025      	beq.n	800252e <HAL_GPIO_Init+0x242>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a4f      	ldr	r2, [pc, #316]	; (8002624 <HAL_GPIO_Init+0x338>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d01f      	beq.n	800252a <HAL_GPIO_Init+0x23e>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a4e      	ldr	r2, [pc, #312]	; (8002628 <HAL_GPIO_Init+0x33c>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d019      	beq.n	8002526 <HAL_GPIO_Init+0x23a>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a4d      	ldr	r2, [pc, #308]	; (800262c <HAL_GPIO_Init+0x340>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d013      	beq.n	8002522 <HAL_GPIO_Init+0x236>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a4c      	ldr	r2, [pc, #304]	; (8002630 <HAL_GPIO_Init+0x344>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d00d      	beq.n	800251e <HAL_GPIO_Init+0x232>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a4b      	ldr	r2, [pc, #300]	; (8002634 <HAL_GPIO_Init+0x348>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d007      	beq.n	800251a <HAL_GPIO_Init+0x22e>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a4a      	ldr	r2, [pc, #296]	; (8002638 <HAL_GPIO_Init+0x34c>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d101      	bne.n	8002516 <HAL_GPIO_Init+0x22a>
 8002512:	2306      	movs	r3, #6
 8002514:	e00c      	b.n	8002530 <HAL_GPIO_Init+0x244>
 8002516:	2307      	movs	r3, #7
 8002518:	e00a      	b.n	8002530 <HAL_GPIO_Init+0x244>
 800251a:	2305      	movs	r3, #5
 800251c:	e008      	b.n	8002530 <HAL_GPIO_Init+0x244>
 800251e:	2304      	movs	r3, #4
 8002520:	e006      	b.n	8002530 <HAL_GPIO_Init+0x244>
 8002522:	2303      	movs	r3, #3
 8002524:	e004      	b.n	8002530 <HAL_GPIO_Init+0x244>
 8002526:	2302      	movs	r3, #2
 8002528:	e002      	b.n	8002530 <HAL_GPIO_Init+0x244>
 800252a:	2301      	movs	r3, #1
 800252c:	e000      	b.n	8002530 <HAL_GPIO_Init+0x244>
 800252e:	2300      	movs	r3, #0
 8002530:	697a      	ldr	r2, [r7, #20]
 8002532:	f002 0203 	and.w	r2, r2, #3
 8002536:	0092      	lsls	r2, r2, #2
 8002538:	4093      	lsls	r3, r2
 800253a:	693a      	ldr	r2, [r7, #16]
 800253c:	4313      	orrs	r3, r2
 800253e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002540:	4937      	ldr	r1, [pc, #220]	; (8002620 <HAL_GPIO_Init+0x334>)
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	089b      	lsrs	r3, r3, #2
 8002546:	3302      	adds	r3, #2
 8002548:	693a      	ldr	r2, [r7, #16]
 800254a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800254e:	4b3b      	ldr	r3, [pc, #236]	; (800263c <HAL_GPIO_Init+0x350>)
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	43db      	mvns	r3, r3
 8002558:	693a      	ldr	r2, [r7, #16]
 800255a:	4013      	ands	r3, r2
 800255c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d003      	beq.n	8002572 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800256a:	693a      	ldr	r2, [r7, #16]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	4313      	orrs	r3, r2
 8002570:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002572:	4a32      	ldr	r2, [pc, #200]	; (800263c <HAL_GPIO_Init+0x350>)
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002578:	4b30      	ldr	r3, [pc, #192]	; (800263c <HAL_GPIO_Init+0x350>)
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	43db      	mvns	r3, r3
 8002582:	693a      	ldr	r2, [r7, #16]
 8002584:	4013      	ands	r3, r2
 8002586:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d003      	beq.n	800259c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002594:	693a      	ldr	r2, [r7, #16]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	4313      	orrs	r3, r2
 800259a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800259c:	4a27      	ldr	r2, [pc, #156]	; (800263c <HAL_GPIO_Init+0x350>)
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80025a2:	4b26      	ldr	r3, [pc, #152]	; (800263c <HAL_GPIO_Init+0x350>)
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	43db      	mvns	r3, r3
 80025ac:	693a      	ldr	r2, [r7, #16]
 80025ae:	4013      	ands	r3, r2
 80025b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d003      	beq.n	80025c6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80025be:	693a      	ldr	r2, [r7, #16]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80025c6:	4a1d      	ldr	r2, [pc, #116]	; (800263c <HAL_GPIO_Init+0x350>)
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80025cc:	4b1b      	ldr	r3, [pc, #108]	; (800263c <HAL_GPIO_Init+0x350>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	43db      	mvns	r3, r3
 80025d6:	693a      	ldr	r2, [r7, #16]
 80025d8:	4013      	ands	r3, r2
 80025da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d003      	beq.n	80025f0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80025e8:	693a      	ldr	r2, [r7, #16]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80025f0:	4a12      	ldr	r2, [pc, #72]	; (800263c <HAL_GPIO_Init+0x350>)
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	3301      	adds	r3, #1
 80025fa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	fa22 f303 	lsr.w	r3, r2, r3
 8002606:	2b00      	cmp	r3, #0
 8002608:	f47f ae78 	bne.w	80022fc <HAL_GPIO_Init+0x10>
  }
}
 800260c:	bf00      	nop
 800260e:	bf00      	nop
 8002610:	371c      	adds	r7, #28
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	40021000 	.word	0x40021000
 8002620:	40010000 	.word	0x40010000
 8002624:	48000400 	.word	0x48000400
 8002628:	48000800 	.word	0x48000800
 800262c:	48000c00 	.word	0x48000c00
 8002630:	48001000 	.word	0x48001000
 8002634:	48001400 	.word	0x48001400
 8002638:	48001800 	.word	0x48001800
 800263c:	40010400 	.word	0x40010400

08002640 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	460b      	mov	r3, r1
 800264a:	807b      	strh	r3, [r7, #2]
 800264c:	4613      	mov	r3, r2
 800264e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002650:	787b      	ldrb	r3, [r7, #1]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d003      	beq.n	800265e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002656:	887a      	ldrh	r2, [r7, #2]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800265c:	e002      	b.n	8002664 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800265e:	887a      	ldrh	r2, [r7, #2]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002664:	bf00      	nop
 8002666:	370c      	adds	r7, #12
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr

08002670 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d101      	bne.n	8002682 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e081      	b.n	8002786 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002688:	b2db      	uxtb	r3, r3
 800268a:	2b00      	cmp	r3, #0
 800268c:	d106      	bne.n	800269c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f7fe fd2c 	bl	80010f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2224      	movs	r2, #36	; 0x24
 80026a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f022 0201 	bic.w	r2, r2, #1
 80026b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	685a      	ldr	r2, [r3, #4]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80026c0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	689a      	ldr	r2, [r3, #8]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026d0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d107      	bne.n	80026ea <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	689a      	ldr	r2, [r3, #8]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026e6:	609a      	str	r2, [r3, #8]
 80026e8:	e006      	b.n	80026f8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	689a      	ldr	r2, [r3, #8]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80026f6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d104      	bne.n	800270a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002708:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	6812      	ldr	r2, [r2, #0]
 8002714:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002718:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800271c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	68da      	ldr	r2, [r3, #12]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800272c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	691a      	ldr	r2, [r3, #16]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	695b      	ldr	r3, [r3, #20]
 8002736:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	699b      	ldr	r3, [r3, #24]
 800273e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	430a      	orrs	r2, r1
 8002746:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	69d9      	ldr	r1, [r3, #28]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6a1a      	ldr	r2, [r3, #32]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	430a      	orrs	r2, r1
 8002756:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f042 0201 	orr.w	r2, r2, #1
 8002766:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2220      	movs	r2, #32
 8002772:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	3708      	adds	r7, #8
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
	...

08002790 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b088      	sub	sp, #32
 8002794:	af02      	add	r7, sp, #8
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	607a      	str	r2, [r7, #4]
 800279a:	461a      	mov	r2, r3
 800279c:	460b      	mov	r3, r1
 800279e:	817b      	strh	r3, [r7, #10]
 80027a0:	4613      	mov	r3, r2
 80027a2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	2b20      	cmp	r3, #32
 80027ae:	f040 80da 	bne.w	8002966 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d101      	bne.n	80027c0 <HAL_I2C_Master_Transmit+0x30>
 80027bc:	2302      	movs	r3, #2
 80027be:	e0d3      	b.n	8002968 <HAL_I2C_Master_Transmit+0x1d8>
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2201      	movs	r2, #1
 80027c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80027c8:	f7ff fc7a 	bl	80020c0 <HAL_GetTick>
 80027cc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	9300      	str	r3, [sp, #0]
 80027d2:	2319      	movs	r3, #25
 80027d4:	2201      	movs	r2, #1
 80027d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80027da:	68f8      	ldr	r0, [r7, #12]
 80027dc:	f000 f9e6 	bl	8002bac <I2C_WaitOnFlagUntilTimeout>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e0be      	b.n	8002968 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2221      	movs	r2, #33	; 0x21
 80027ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2210      	movs	r2, #16
 80027f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2200      	movs	r2, #0
 80027fe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	893a      	ldrh	r2, [r7, #8]
 800280a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2200      	movs	r2, #0
 8002810:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002816:	b29b      	uxth	r3, r3
 8002818:	2bff      	cmp	r3, #255	; 0xff
 800281a:	d90e      	bls.n	800283a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	22ff      	movs	r2, #255	; 0xff
 8002820:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002826:	b2da      	uxtb	r2, r3
 8002828:	8979      	ldrh	r1, [r7, #10]
 800282a:	4b51      	ldr	r3, [pc, #324]	; (8002970 <HAL_I2C_Master_Transmit+0x1e0>)
 800282c:	9300      	str	r3, [sp, #0]
 800282e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002832:	68f8      	ldr	r0, [r7, #12]
 8002834:	f000 fbdc 	bl	8002ff0 <I2C_TransferConfig>
 8002838:	e06c      	b.n	8002914 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800283e:	b29a      	uxth	r2, r3
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002848:	b2da      	uxtb	r2, r3
 800284a:	8979      	ldrh	r1, [r7, #10]
 800284c:	4b48      	ldr	r3, [pc, #288]	; (8002970 <HAL_I2C_Master_Transmit+0x1e0>)
 800284e:	9300      	str	r3, [sp, #0]
 8002850:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002854:	68f8      	ldr	r0, [r7, #12]
 8002856:	f000 fbcb 	bl	8002ff0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800285a:	e05b      	b.n	8002914 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800285c:	697a      	ldr	r2, [r7, #20]
 800285e:	6a39      	ldr	r1, [r7, #32]
 8002860:	68f8      	ldr	r0, [r7, #12]
 8002862:	f000 f9e3 	bl	8002c2c <I2C_WaitOnTXISFlagUntilTimeout>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d001      	beq.n	8002870 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e07b      	b.n	8002968 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002874:	781a      	ldrb	r2, [r3, #0]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002880:	1c5a      	adds	r2, r3, #1
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800288a:	b29b      	uxth	r3, r3
 800288c:	3b01      	subs	r3, #1
 800288e:	b29a      	uxth	r2, r3
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002898:	3b01      	subs	r3, #1
 800289a:	b29a      	uxth	r2, r3
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028a4:	b29b      	uxth	r3, r3
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d034      	beq.n	8002914 <HAL_I2C_Master_Transmit+0x184>
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d130      	bne.n	8002914 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	9300      	str	r3, [sp, #0]
 80028b6:	6a3b      	ldr	r3, [r7, #32]
 80028b8:	2200      	movs	r2, #0
 80028ba:	2180      	movs	r1, #128	; 0x80
 80028bc:	68f8      	ldr	r0, [r7, #12]
 80028be:	f000 f975 	bl	8002bac <I2C_WaitOnFlagUntilTimeout>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d001      	beq.n	80028cc <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e04d      	b.n	8002968 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	2bff      	cmp	r3, #255	; 0xff
 80028d4:	d90e      	bls.n	80028f4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	22ff      	movs	r2, #255	; 0xff
 80028da:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028e0:	b2da      	uxtb	r2, r3
 80028e2:	8979      	ldrh	r1, [r7, #10]
 80028e4:	2300      	movs	r3, #0
 80028e6:	9300      	str	r3, [sp, #0]
 80028e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028ec:	68f8      	ldr	r0, [r7, #12]
 80028ee:	f000 fb7f 	bl	8002ff0 <I2C_TransferConfig>
 80028f2:	e00f      	b.n	8002914 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028f8:	b29a      	uxth	r2, r3
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002902:	b2da      	uxtb	r2, r3
 8002904:	8979      	ldrh	r1, [r7, #10]
 8002906:	2300      	movs	r3, #0
 8002908:	9300      	str	r3, [sp, #0]
 800290a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800290e:	68f8      	ldr	r0, [r7, #12]
 8002910:	f000 fb6e 	bl	8002ff0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002918:	b29b      	uxth	r3, r3
 800291a:	2b00      	cmp	r3, #0
 800291c:	d19e      	bne.n	800285c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800291e:	697a      	ldr	r2, [r7, #20]
 8002920:	6a39      	ldr	r1, [r7, #32]
 8002922:	68f8      	ldr	r0, [r7, #12]
 8002924:	f000 f9c2 	bl	8002cac <I2C_WaitOnSTOPFlagUntilTimeout>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e01a      	b.n	8002968 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2220      	movs	r2, #32
 8002938:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	6859      	ldr	r1, [r3, #4]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	4b0b      	ldr	r3, [pc, #44]	; (8002974 <HAL_I2C_Master_Transmit+0x1e4>)
 8002946:	400b      	ands	r3, r1
 8002948:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2220      	movs	r2, #32
 800294e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2200      	movs	r2, #0
 8002956:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002962:	2300      	movs	r3, #0
 8002964:	e000      	b.n	8002968 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002966:	2302      	movs	r3, #2
  }
}
 8002968:	4618      	mov	r0, r3
 800296a:	3718      	adds	r7, #24
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	80002000 	.word	0x80002000
 8002974:	fe00e800 	.word	0xfe00e800

08002978 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b088      	sub	sp, #32
 800297c:	af02      	add	r7, sp, #8
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	607a      	str	r2, [r7, #4]
 8002982:	461a      	mov	r2, r3
 8002984:	460b      	mov	r3, r1
 8002986:	817b      	strh	r3, [r7, #10]
 8002988:	4613      	mov	r3, r2
 800298a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002992:	b2db      	uxtb	r3, r3
 8002994:	2b20      	cmp	r3, #32
 8002996:	f040 80db 	bne.w	8002b50 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d101      	bne.n	80029a8 <HAL_I2C_Master_Receive+0x30>
 80029a4:	2302      	movs	r3, #2
 80029a6:	e0d4      	b.n	8002b52 <HAL_I2C_Master_Receive+0x1da>
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80029b0:	f7ff fb86 	bl	80020c0 <HAL_GetTick>
 80029b4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	9300      	str	r3, [sp, #0]
 80029ba:	2319      	movs	r3, #25
 80029bc:	2201      	movs	r2, #1
 80029be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029c2:	68f8      	ldr	r0, [r7, #12]
 80029c4:	f000 f8f2 	bl	8002bac <I2C_WaitOnFlagUntilTimeout>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d001      	beq.n	80029d2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e0bf      	b.n	8002b52 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2222      	movs	r2, #34	; 0x22
 80029d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2210      	movs	r2, #16
 80029de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2200      	movs	r2, #0
 80029e6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	893a      	ldrh	r2, [r7, #8]
 80029f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2200      	movs	r2, #0
 80029f8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	2bff      	cmp	r3, #255	; 0xff
 8002a02:	d90e      	bls.n	8002a22 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	22ff      	movs	r2, #255	; 0xff
 8002a08:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a0e:	b2da      	uxtb	r2, r3
 8002a10:	8979      	ldrh	r1, [r7, #10]
 8002a12:	4b52      	ldr	r3, [pc, #328]	; (8002b5c <HAL_I2C_Master_Receive+0x1e4>)
 8002a14:	9300      	str	r3, [sp, #0]
 8002a16:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a1a:	68f8      	ldr	r0, [r7, #12]
 8002a1c:	f000 fae8 	bl	8002ff0 <I2C_TransferConfig>
 8002a20:	e06d      	b.n	8002afe <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a26:	b29a      	uxth	r2, r3
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a30:	b2da      	uxtb	r2, r3
 8002a32:	8979      	ldrh	r1, [r7, #10]
 8002a34:	4b49      	ldr	r3, [pc, #292]	; (8002b5c <HAL_I2C_Master_Receive+0x1e4>)
 8002a36:	9300      	str	r3, [sp, #0]
 8002a38:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a3c:	68f8      	ldr	r0, [r7, #12]
 8002a3e:	f000 fad7 	bl	8002ff0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002a42:	e05c      	b.n	8002afe <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a44:	697a      	ldr	r2, [r7, #20]
 8002a46:	6a39      	ldr	r1, [r7, #32]
 8002a48:	68f8      	ldr	r0, [r7, #12]
 8002a4a:	f000 f96b 	bl	8002d24 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d001      	beq.n	8002a58 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e07c      	b.n	8002b52 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a62:	b2d2      	uxtb	r2, r2
 8002a64:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6a:	1c5a      	adds	r2, r3, #1
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a74:	3b01      	subs	r3, #1
 8002a76:	b29a      	uxth	r2, r3
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	3b01      	subs	r3, #1
 8002a84:	b29a      	uxth	r2, r3
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d034      	beq.n	8002afe <HAL_I2C_Master_Receive+0x186>
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d130      	bne.n	8002afe <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	9300      	str	r3, [sp, #0]
 8002aa0:	6a3b      	ldr	r3, [r7, #32]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	2180      	movs	r1, #128	; 0x80
 8002aa6:	68f8      	ldr	r0, [r7, #12]
 8002aa8:	f000 f880 	bl	8002bac <I2C_WaitOnFlagUntilTimeout>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d001      	beq.n	8002ab6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e04d      	b.n	8002b52 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	2bff      	cmp	r3, #255	; 0xff
 8002abe:	d90e      	bls.n	8002ade <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	22ff      	movs	r2, #255	; 0xff
 8002ac4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aca:	b2da      	uxtb	r2, r3
 8002acc:	8979      	ldrh	r1, [r7, #10]
 8002ace:	2300      	movs	r3, #0
 8002ad0:	9300      	str	r3, [sp, #0]
 8002ad2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ad6:	68f8      	ldr	r0, [r7, #12]
 8002ad8:	f000 fa8a 	bl	8002ff0 <I2C_TransferConfig>
 8002adc:	e00f      	b.n	8002afe <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ae2:	b29a      	uxth	r2, r3
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aec:	b2da      	uxtb	r2, r3
 8002aee:	8979      	ldrh	r1, [r7, #10]
 8002af0:	2300      	movs	r3, #0
 8002af2:	9300      	str	r3, [sp, #0]
 8002af4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002af8:	68f8      	ldr	r0, [r7, #12]
 8002afa:	f000 fa79 	bl	8002ff0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d19d      	bne.n	8002a44 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b08:	697a      	ldr	r2, [r7, #20]
 8002b0a:	6a39      	ldr	r1, [r7, #32]
 8002b0c:	68f8      	ldr	r0, [r7, #12]
 8002b0e:	f000 f8cd 	bl	8002cac <I2C_WaitOnSTOPFlagUntilTimeout>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d001      	beq.n	8002b1c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e01a      	b.n	8002b52 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2220      	movs	r2, #32
 8002b22:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	6859      	ldr	r1, [r3, #4]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	4b0c      	ldr	r3, [pc, #48]	; (8002b60 <HAL_I2C_Master_Receive+0x1e8>)
 8002b30:	400b      	ands	r3, r1
 8002b32:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2220      	movs	r2, #32
 8002b38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2200      	movs	r2, #0
 8002b48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	e000      	b.n	8002b52 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002b50:	2302      	movs	r3, #2
  }
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3718      	adds	r7, #24
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	80002400 	.word	0x80002400
 8002b60:	fe00e800 	.word	0xfe00e800

08002b64 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	699b      	ldr	r3, [r3, #24]
 8002b72:	f003 0302 	and.w	r3, r3, #2
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d103      	bne.n	8002b82 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	699b      	ldr	r3, [r3, #24]
 8002b88:	f003 0301 	and.w	r3, r3, #1
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d007      	beq.n	8002ba0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	699a      	ldr	r2, [r3, #24]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f042 0201 	orr.w	r2, r2, #1
 8002b9e:	619a      	str	r2, [r3, #24]
  }
}
 8002ba0:	bf00      	nop
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr

08002bac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	603b      	str	r3, [r7, #0]
 8002bb8:	4613      	mov	r3, r2
 8002bba:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bbc:	e022      	b.n	8002c04 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002bc4:	d01e      	beq.n	8002c04 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bc6:	f7ff fa7b 	bl	80020c0 <HAL_GetTick>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	683a      	ldr	r2, [r7, #0]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d302      	bcc.n	8002bdc <I2C_WaitOnFlagUntilTimeout+0x30>
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d113      	bne.n	8002c04 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be0:	f043 0220 	orr.w	r2, r3, #32
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2220      	movs	r2, #32
 8002bec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e00f      	b.n	8002c24 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	699a      	ldr	r2, [r3, #24]
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	68ba      	ldr	r2, [r7, #8]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	bf0c      	ite	eq
 8002c14:	2301      	moveq	r3, #1
 8002c16:	2300      	movne	r3, #0
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	79fb      	ldrb	r3, [r7, #7]
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d0cd      	beq.n	8002bbe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c22:	2300      	movs	r3, #0
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3710      	adds	r7, #16
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002c38:	e02c      	b.n	8002c94 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	68b9      	ldr	r1, [r7, #8]
 8002c3e:	68f8      	ldr	r0, [r7, #12]
 8002c40:	f000 f8ea 	bl	8002e18 <I2C_IsErrorOccurred>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d001      	beq.n	8002c4e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e02a      	b.n	8002ca4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c54:	d01e      	beq.n	8002c94 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c56:	f7ff fa33 	bl	80020c0 <HAL_GetTick>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	68ba      	ldr	r2, [r7, #8]
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d302      	bcc.n	8002c6c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d113      	bne.n	8002c94 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c70:	f043 0220 	orr.w	r2, r3, #32
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2220      	movs	r2, #32
 8002c7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e007      	b.n	8002ca4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d1cb      	bne.n	8002c3a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ca2:	2300      	movs	r3, #0
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3710      	adds	r7, #16
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}

08002cac <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	60b9      	str	r1, [r7, #8]
 8002cb6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002cb8:	e028      	b.n	8002d0c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	68b9      	ldr	r1, [r7, #8]
 8002cbe:	68f8      	ldr	r0, [r7, #12]
 8002cc0:	f000 f8aa 	bl	8002e18 <I2C_IsErrorOccurred>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d001      	beq.n	8002cce <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e026      	b.n	8002d1c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cce:	f7ff f9f7 	bl	80020c0 <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	68ba      	ldr	r2, [r7, #8]
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d302      	bcc.n	8002ce4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d113      	bne.n	8002d0c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce8:	f043 0220 	orr.w	r2, r3, #32
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2220      	movs	r2, #32
 8002cf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e007      	b.n	8002d1c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	699b      	ldr	r3, [r3, #24]
 8002d12:	f003 0320 	and.w	r3, r3, #32
 8002d16:	2b20      	cmp	r3, #32
 8002d18:	d1cf      	bne.n	8002cba <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002d1a:	2300      	movs	r3, #0
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3710      	adds	r7, #16
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	60b9      	str	r1, [r7, #8]
 8002d2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d30:	e064      	b.n	8002dfc <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	68b9      	ldr	r1, [r7, #8]
 8002d36:	68f8      	ldr	r0, [r7, #12]
 8002d38:	f000 f86e 	bl	8002e18 <I2C_IsErrorOccurred>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d001      	beq.n	8002d46 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e062      	b.n	8002e0c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	699b      	ldr	r3, [r3, #24]
 8002d4c:	f003 0320 	and.w	r3, r3, #32
 8002d50:	2b20      	cmp	r3, #32
 8002d52:	d138      	bne.n	8002dc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	699b      	ldr	r3, [r3, #24]
 8002d5a:	f003 0304 	and.w	r3, r3, #4
 8002d5e:	2b04      	cmp	r3, #4
 8002d60:	d105      	bne.n	8002d6e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d001      	beq.n	8002d6e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	e04e      	b.n	8002e0c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	699b      	ldr	r3, [r3, #24]
 8002d74:	f003 0310 	and.w	r3, r3, #16
 8002d78:	2b10      	cmp	r3, #16
 8002d7a:	d107      	bne.n	8002d8c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2210      	movs	r2, #16
 8002d82:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2204      	movs	r2, #4
 8002d88:	645a      	str	r2, [r3, #68]	; 0x44
 8002d8a:	e002      	b.n	8002d92 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	2220      	movs	r2, #32
 8002d98:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	6859      	ldr	r1, [r3, #4]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	4b1b      	ldr	r3, [pc, #108]	; (8002e14 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8002da6:	400b      	ands	r3, r1
 8002da8:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2220      	movs	r2, #32
 8002dae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e022      	b.n	8002e0c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dc6:	f7ff f97b 	bl	80020c0 <HAL_GetTick>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	68ba      	ldr	r2, [r7, #8]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d302      	bcc.n	8002ddc <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d10f      	bne.n	8002dfc <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de0:	f043 0220 	orr.w	r2, r3, #32
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2220      	movs	r2, #32
 8002dec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e007      	b.n	8002e0c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	699b      	ldr	r3, [r3, #24]
 8002e02:	f003 0304 	and.w	r3, r3, #4
 8002e06:	2b04      	cmp	r3, #4
 8002e08:	d193      	bne.n	8002d32 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002e0a:	2300      	movs	r3, #0
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3710      	adds	r7, #16
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	fe00e800 	.word	0xfe00e800

08002e18 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b08a      	sub	sp, #40	; 0x28
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	60b9      	str	r1, [r7, #8]
 8002e22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e24:	2300      	movs	r3, #0
 8002e26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	699b      	ldr	r3, [r3, #24]
 8002e30:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002e32:	2300      	movs	r3, #0
 8002e34:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	f003 0310 	and.w	r3, r3, #16
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d075      	beq.n	8002f30 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2210      	movs	r2, #16
 8002e4a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002e4c:	e056      	b.n	8002efc <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e54:	d052      	beq.n	8002efc <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002e56:	f7ff f933 	bl	80020c0 <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	68ba      	ldr	r2, [r7, #8]
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d302      	bcc.n	8002e6c <I2C_IsErrorOccurred+0x54>
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d147      	bne.n	8002efc <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e76:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002e7e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	699b      	ldr	r3, [r3, #24]
 8002e86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e8e:	d12e      	bne.n	8002eee <I2C_IsErrorOccurred+0xd6>
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e96:	d02a      	beq.n	8002eee <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002e98:	7cfb      	ldrb	r3, [r7, #19]
 8002e9a:	2b20      	cmp	r3, #32
 8002e9c:	d027      	beq.n	8002eee <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	685a      	ldr	r2, [r3, #4]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002eac:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002eae:	f7ff f907 	bl	80020c0 <HAL_GetTick>
 8002eb2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002eb4:	e01b      	b.n	8002eee <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002eb6:	f7ff f903 	bl	80020c0 <HAL_GetTick>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	2b19      	cmp	r3, #25
 8002ec2:	d914      	bls.n	8002eee <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec8:	f043 0220 	orr.w	r2, r3, #32
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2220      	movs	r2, #32
 8002ed4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	699b      	ldr	r3, [r3, #24]
 8002ef4:	f003 0320 	and.w	r3, r3, #32
 8002ef8:	2b20      	cmp	r3, #32
 8002efa:	d1dc      	bne.n	8002eb6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	f003 0320 	and.w	r3, r3, #32
 8002f06:	2b20      	cmp	r3, #32
 8002f08:	d003      	beq.n	8002f12 <I2C_IsErrorOccurred+0xfa>
 8002f0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d09d      	beq.n	8002e4e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002f12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d103      	bne.n	8002f22 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2220      	movs	r2, #32
 8002f20:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002f22:	6a3b      	ldr	r3, [r7, #32]
 8002f24:	f043 0304 	orr.w	r3, r3, #4
 8002f28:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	699b      	ldr	r3, [r3, #24]
 8002f36:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d00b      	beq.n	8002f5a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002f42:	6a3b      	ldr	r3, [r7, #32]
 8002f44:	f043 0301 	orr.w	r3, r3, #1
 8002f48:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f52:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002f5a:	69bb      	ldr	r3, [r7, #24]
 8002f5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d00b      	beq.n	8002f7c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002f64:	6a3b      	ldr	r3, [r7, #32]
 8002f66:	f043 0308 	orr.w	r3, r3, #8
 8002f6a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f74:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d00b      	beq.n	8002f9e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002f86:	6a3b      	ldr	r3, [r7, #32]
 8002f88:	f043 0302 	orr.w	r3, r3, #2
 8002f8c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f96:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002f9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d01c      	beq.n	8002fe0 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002fa6:	68f8      	ldr	r0, [r7, #12]
 8002fa8:	f7ff fddc 	bl	8002b64 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	6859      	ldr	r1, [r3, #4]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	4b0d      	ldr	r3, [pc, #52]	; (8002fec <I2C_IsErrorOccurred+0x1d4>)
 8002fb8:	400b      	ands	r3, r1
 8002fba:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002fc0:	6a3b      	ldr	r3, [r7, #32]
 8002fc2:	431a      	orrs	r2, r3
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2220      	movs	r2, #32
 8002fcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002fe0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3728      	adds	r7, #40	; 0x28
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	fe00e800 	.word	0xfe00e800

08002ff0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b087      	sub	sp, #28
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	607b      	str	r3, [r7, #4]
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	817b      	strh	r3, [r7, #10]
 8002ffe:	4613      	mov	r3, r2
 8003000:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003002:	897b      	ldrh	r3, [r7, #10]
 8003004:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003008:	7a7b      	ldrb	r3, [r7, #9]
 800300a:	041b      	lsls	r3, r3, #16
 800300c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003010:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003016:	6a3b      	ldr	r3, [r7, #32]
 8003018:	4313      	orrs	r3, r2
 800301a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800301e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	685a      	ldr	r2, [r3, #4]
 8003026:	6a3b      	ldr	r3, [r7, #32]
 8003028:	0d5b      	lsrs	r3, r3, #21
 800302a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800302e:	4b08      	ldr	r3, [pc, #32]	; (8003050 <I2C_TransferConfig+0x60>)
 8003030:	430b      	orrs	r3, r1
 8003032:	43db      	mvns	r3, r3
 8003034:	ea02 0103 	and.w	r1, r2, r3
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	697a      	ldr	r2, [r7, #20]
 800303e:	430a      	orrs	r2, r1
 8003040:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003042:	bf00      	nop
 8003044:	371c      	adds	r7, #28
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop
 8003050:	03ff63ff 	.word	0x03ff63ff

08003054 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003064:	b2db      	uxtb	r3, r3
 8003066:	2b20      	cmp	r3, #32
 8003068:	d138      	bne.n	80030dc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003070:	2b01      	cmp	r3, #1
 8003072:	d101      	bne.n	8003078 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003074:	2302      	movs	r3, #2
 8003076:	e032      	b.n	80030de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2224      	movs	r2, #36	; 0x24
 8003084:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f022 0201 	bic.w	r2, r2, #1
 8003096:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80030a6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	6819      	ldr	r1, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	683a      	ldr	r2, [r7, #0]
 80030b4:	430a      	orrs	r2, r1
 80030b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f042 0201 	orr.w	r2, r2, #1
 80030c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2220      	movs	r2, #32
 80030cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80030d8:	2300      	movs	r3, #0
 80030da:	e000      	b.n	80030de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80030dc:	2302      	movs	r3, #2
  }
}
 80030de:	4618      	mov	r0, r3
 80030e0:	370c      	adds	r7, #12
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr

080030ea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80030ea:	b480      	push	{r7}
 80030ec:	b085      	sub	sp, #20
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	6078      	str	r0, [r7, #4]
 80030f2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	2b20      	cmp	r3, #32
 80030fe:	d139      	bne.n	8003174 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003106:	2b01      	cmp	r3, #1
 8003108:	d101      	bne.n	800310e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800310a:	2302      	movs	r3, #2
 800310c:	e033      	b.n	8003176 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2201      	movs	r2, #1
 8003112:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2224      	movs	r2, #36	; 0x24
 800311a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f022 0201 	bic.w	r2, r2, #1
 800312c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800313c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	021b      	lsls	r3, r3, #8
 8003142:	68fa      	ldr	r2, [r7, #12]
 8003144:	4313      	orrs	r3, r2
 8003146:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	68fa      	ldr	r2, [r7, #12]
 800314e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f042 0201 	orr.w	r2, r2, #1
 800315e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2220      	movs	r2, #32
 8003164:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003170:	2300      	movs	r3, #0
 8003172:	e000      	b.n	8003176 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003174:	2302      	movs	r3, #2
  }
}
 8003176:	4618      	mov	r0, r3
 8003178:	3714      	adds	r7, #20
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr

08003182 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8003182:	b580      	push	{r7, lr}
 8003184:	b084      	sub	sp, #16
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d101      	bne.n	8003194 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e041      	b.n	8003218 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800319c:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f245 5255 	movw	r2, #21845	; 0x5555
 80031a6:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	6852      	ldr	r2, [r2, #4]
 80031b0:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	6892      	ldr	r2, [r2, #8]
 80031ba:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80031bc:	f7fe ff80 	bl	80020c0 <HAL_GetTick>
 80031c0:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80031c2:	e00f      	b.n	80031e4 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80031c4:	f7fe ff7c 	bl	80020c0 <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	2b31      	cmp	r3, #49	; 0x31
 80031d0:	d908      	bls.n	80031e4 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	f003 0307 	and.w	r3, r3, #7
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d001      	beq.n	80031e4 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 80031e0:	2303      	movs	r3, #3
 80031e2:	e019      	b.n	8003218 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	f003 0307 	and.w	r3, r3, #7
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d1e8      	bne.n	80031c4 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	691a      	ldr	r2, [r3, #16]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d005      	beq.n	800320c <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	68d2      	ldr	r2, [r2, #12]
 8003208:	611a      	str	r2, [r3, #16]
 800320a:	e004      	b.n	8003216 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8003214:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003216:	2300      	movs	r3, #0
}
 8003218:	4618      	mov	r0, r3
 800321a:	3710      	adds	r7, #16
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}

08003220 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8003230:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003232:	2300      	movs	r3, #0
}
 8003234:	4618      	mov	r0, r3
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr

08003240 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003240:	b480      	push	{r7}
 8003242:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003244:	4b04      	ldr	r3, [pc, #16]	; (8003258 <HAL_PWREx_GetVoltageRange+0x18>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800324c:	4618      	mov	r0, r3
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop
 8003258:	40007000 	.word	0x40007000

0800325c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800325c:	b480      	push	{r7}
 800325e:	b085      	sub	sp, #20
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800326a:	d130      	bne.n	80032ce <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800326c:	4b23      	ldr	r3, [pc, #140]	; (80032fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003274:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003278:	d038      	beq.n	80032ec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800327a:	4b20      	ldr	r3, [pc, #128]	; (80032fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003282:	4a1e      	ldr	r2, [pc, #120]	; (80032fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003284:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003288:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800328a:	4b1d      	ldr	r3, [pc, #116]	; (8003300 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2232      	movs	r2, #50	; 0x32
 8003290:	fb02 f303 	mul.w	r3, r2, r3
 8003294:	4a1b      	ldr	r2, [pc, #108]	; (8003304 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003296:	fba2 2303 	umull	r2, r3, r2, r3
 800329a:	0c9b      	lsrs	r3, r3, #18
 800329c:	3301      	adds	r3, #1
 800329e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032a0:	e002      	b.n	80032a8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	3b01      	subs	r3, #1
 80032a6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032a8:	4b14      	ldr	r3, [pc, #80]	; (80032fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032aa:	695b      	ldr	r3, [r3, #20]
 80032ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032b4:	d102      	bne.n	80032bc <HAL_PWREx_ControlVoltageScaling+0x60>
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d1f2      	bne.n	80032a2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80032bc:	4b0f      	ldr	r3, [pc, #60]	; (80032fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032be:	695b      	ldr	r3, [r3, #20]
 80032c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032c8:	d110      	bne.n	80032ec <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e00f      	b.n	80032ee <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80032ce:	4b0b      	ldr	r3, [pc, #44]	; (80032fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80032d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032da:	d007      	beq.n	80032ec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80032dc:	4b07      	ldr	r3, [pc, #28]	; (80032fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80032e4:	4a05      	ldr	r2, [pc, #20]	; (80032fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032ea:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80032ec:	2300      	movs	r3, #0
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3714      	adds	r7, #20
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr
 80032fa:	bf00      	nop
 80032fc:	40007000 	.word	0x40007000
 8003300:	20000000 	.word	0x20000000
 8003304:	431bde83 	.word	0x431bde83

08003308 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b088      	sub	sp, #32
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d101      	bne.n	800331a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e3ca      	b.n	8003ab0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800331a:	4b97      	ldr	r3, [pc, #604]	; (8003578 <HAL_RCC_OscConfig+0x270>)
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	f003 030c 	and.w	r3, r3, #12
 8003322:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003324:	4b94      	ldr	r3, [pc, #592]	; (8003578 <HAL_RCC_OscConfig+0x270>)
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	f003 0303 	and.w	r3, r3, #3
 800332c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0310 	and.w	r3, r3, #16
 8003336:	2b00      	cmp	r3, #0
 8003338:	f000 80e4 	beq.w	8003504 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d007      	beq.n	8003352 <HAL_RCC_OscConfig+0x4a>
 8003342:	69bb      	ldr	r3, [r7, #24]
 8003344:	2b0c      	cmp	r3, #12
 8003346:	f040 808b 	bne.w	8003460 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	2b01      	cmp	r3, #1
 800334e:	f040 8087 	bne.w	8003460 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003352:	4b89      	ldr	r3, [pc, #548]	; (8003578 <HAL_RCC_OscConfig+0x270>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d005      	beq.n	800336a <HAL_RCC_OscConfig+0x62>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	699b      	ldr	r3, [r3, #24]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d101      	bne.n	800336a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e3a2      	b.n	8003ab0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6a1a      	ldr	r2, [r3, #32]
 800336e:	4b82      	ldr	r3, [pc, #520]	; (8003578 <HAL_RCC_OscConfig+0x270>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0308 	and.w	r3, r3, #8
 8003376:	2b00      	cmp	r3, #0
 8003378:	d004      	beq.n	8003384 <HAL_RCC_OscConfig+0x7c>
 800337a:	4b7f      	ldr	r3, [pc, #508]	; (8003578 <HAL_RCC_OscConfig+0x270>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003382:	e005      	b.n	8003390 <HAL_RCC_OscConfig+0x88>
 8003384:	4b7c      	ldr	r3, [pc, #496]	; (8003578 <HAL_RCC_OscConfig+0x270>)
 8003386:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800338a:	091b      	lsrs	r3, r3, #4
 800338c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003390:	4293      	cmp	r3, r2
 8003392:	d223      	bcs.n	80033dc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a1b      	ldr	r3, [r3, #32]
 8003398:	4618      	mov	r0, r3
 800339a:	f000 fd55 	bl	8003e48 <RCC_SetFlashLatencyFromMSIRange>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d001      	beq.n	80033a8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e383      	b.n	8003ab0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033a8:	4b73      	ldr	r3, [pc, #460]	; (8003578 <HAL_RCC_OscConfig+0x270>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a72      	ldr	r2, [pc, #456]	; (8003578 <HAL_RCC_OscConfig+0x270>)
 80033ae:	f043 0308 	orr.w	r3, r3, #8
 80033b2:	6013      	str	r3, [r2, #0]
 80033b4:	4b70      	ldr	r3, [pc, #448]	; (8003578 <HAL_RCC_OscConfig+0x270>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a1b      	ldr	r3, [r3, #32]
 80033c0:	496d      	ldr	r1, [pc, #436]	; (8003578 <HAL_RCC_OscConfig+0x270>)
 80033c2:	4313      	orrs	r3, r2
 80033c4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033c6:	4b6c      	ldr	r3, [pc, #432]	; (8003578 <HAL_RCC_OscConfig+0x270>)
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	69db      	ldr	r3, [r3, #28]
 80033d2:	021b      	lsls	r3, r3, #8
 80033d4:	4968      	ldr	r1, [pc, #416]	; (8003578 <HAL_RCC_OscConfig+0x270>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	604b      	str	r3, [r1, #4]
 80033da:	e025      	b.n	8003428 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033dc:	4b66      	ldr	r3, [pc, #408]	; (8003578 <HAL_RCC_OscConfig+0x270>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a65      	ldr	r2, [pc, #404]	; (8003578 <HAL_RCC_OscConfig+0x270>)
 80033e2:	f043 0308 	orr.w	r3, r3, #8
 80033e6:	6013      	str	r3, [r2, #0]
 80033e8:	4b63      	ldr	r3, [pc, #396]	; (8003578 <HAL_RCC_OscConfig+0x270>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a1b      	ldr	r3, [r3, #32]
 80033f4:	4960      	ldr	r1, [pc, #384]	; (8003578 <HAL_RCC_OscConfig+0x270>)
 80033f6:	4313      	orrs	r3, r2
 80033f8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033fa:	4b5f      	ldr	r3, [pc, #380]	; (8003578 <HAL_RCC_OscConfig+0x270>)
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	69db      	ldr	r3, [r3, #28]
 8003406:	021b      	lsls	r3, r3, #8
 8003408:	495b      	ldr	r1, [pc, #364]	; (8003578 <HAL_RCC_OscConfig+0x270>)
 800340a:	4313      	orrs	r3, r2
 800340c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d109      	bne.n	8003428 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6a1b      	ldr	r3, [r3, #32]
 8003418:	4618      	mov	r0, r3
 800341a:	f000 fd15 	bl	8003e48 <RCC_SetFlashLatencyFromMSIRange>
 800341e:	4603      	mov	r3, r0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d001      	beq.n	8003428 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e343      	b.n	8003ab0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003428:	f000 fc4a 	bl	8003cc0 <HAL_RCC_GetSysClockFreq>
 800342c:	4602      	mov	r2, r0
 800342e:	4b52      	ldr	r3, [pc, #328]	; (8003578 <HAL_RCC_OscConfig+0x270>)
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	091b      	lsrs	r3, r3, #4
 8003434:	f003 030f 	and.w	r3, r3, #15
 8003438:	4950      	ldr	r1, [pc, #320]	; (800357c <HAL_RCC_OscConfig+0x274>)
 800343a:	5ccb      	ldrb	r3, [r1, r3]
 800343c:	f003 031f 	and.w	r3, r3, #31
 8003440:	fa22 f303 	lsr.w	r3, r2, r3
 8003444:	4a4e      	ldr	r2, [pc, #312]	; (8003580 <HAL_RCC_OscConfig+0x278>)
 8003446:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003448:	4b4e      	ldr	r3, [pc, #312]	; (8003584 <HAL_RCC_OscConfig+0x27c>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4618      	mov	r0, r3
 800344e:	f7fe fde7 	bl	8002020 <HAL_InitTick>
 8003452:	4603      	mov	r3, r0
 8003454:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003456:	7bfb      	ldrb	r3, [r7, #15]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d052      	beq.n	8003502 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800345c:	7bfb      	ldrb	r3, [r7, #15]
 800345e:	e327      	b.n	8003ab0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	699b      	ldr	r3, [r3, #24]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d032      	beq.n	80034ce <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003468:	4b43      	ldr	r3, [pc, #268]	; (8003578 <HAL_RCC_OscConfig+0x270>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a42      	ldr	r2, [pc, #264]	; (8003578 <HAL_RCC_OscConfig+0x270>)
 800346e:	f043 0301 	orr.w	r3, r3, #1
 8003472:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003474:	f7fe fe24 	bl	80020c0 <HAL_GetTick>
 8003478:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800347a:	e008      	b.n	800348e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800347c:	f7fe fe20 	bl	80020c0 <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	2b02      	cmp	r3, #2
 8003488:	d901      	bls.n	800348e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e310      	b.n	8003ab0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800348e:	4b3a      	ldr	r3, [pc, #232]	; (8003578 <HAL_RCC_OscConfig+0x270>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0302 	and.w	r3, r3, #2
 8003496:	2b00      	cmp	r3, #0
 8003498:	d0f0      	beq.n	800347c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800349a:	4b37      	ldr	r3, [pc, #220]	; (8003578 <HAL_RCC_OscConfig+0x270>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a36      	ldr	r2, [pc, #216]	; (8003578 <HAL_RCC_OscConfig+0x270>)
 80034a0:	f043 0308 	orr.w	r3, r3, #8
 80034a4:	6013      	str	r3, [r2, #0]
 80034a6:	4b34      	ldr	r3, [pc, #208]	; (8003578 <HAL_RCC_OscConfig+0x270>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a1b      	ldr	r3, [r3, #32]
 80034b2:	4931      	ldr	r1, [pc, #196]	; (8003578 <HAL_RCC_OscConfig+0x270>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034b8:	4b2f      	ldr	r3, [pc, #188]	; (8003578 <HAL_RCC_OscConfig+0x270>)
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	69db      	ldr	r3, [r3, #28]
 80034c4:	021b      	lsls	r3, r3, #8
 80034c6:	492c      	ldr	r1, [pc, #176]	; (8003578 <HAL_RCC_OscConfig+0x270>)
 80034c8:	4313      	orrs	r3, r2
 80034ca:	604b      	str	r3, [r1, #4]
 80034cc:	e01a      	b.n	8003504 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80034ce:	4b2a      	ldr	r3, [pc, #168]	; (8003578 <HAL_RCC_OscConfig+0x270>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a29      	ldr	r2, [pc, #164]	; (8003578 <HAL_RCC_OscConfig+0x270>)
 80034d4:	f023 0301 	bic.w	r3, r3, #1
 80034d8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80034da:	f7fe fdf1 	bl	80020c0 <HAL_GetTick>
 80034de:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80034e0:	e008      	b.n	80034f4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034e2:	f7fe fded 	bl	80020c0 <HAL_GetTick>
 80034e6:	4602      	mov	r2, r0
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d901      	bls.n	80034f4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	e2dd      	b.n	8003ab0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80034f4:	4b20      	ldr	r3, [pc, #128]	; (8003578 <HAL_RCC_OscConfig+0x270>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0302 	and.w	r3, r3, #2
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d1f0      	bne.n	80034e2 <HAL_RCC_OscConfig+0x1da>
 8003500:	e000      	b.n	8003504 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003502:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0301 	and.w	r3, r3, #1
 800350c:	2b00      	cmp	r3, #0
 800350e:	d074      	beq.n	80035fa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003510:	69bb      	ldr	r3, [r7, #24]
 8003512:	2b08      	cmp	r3, #8
 8003514:	d005      	beq.n	8003522 <HAL_RCC_OscConfig+0x21a>
 8003516:	69bb      	ldr	r3, [r7, #24]
 8003518:	2b0c      	cmp	r3, #12
 800351a:	d10e      	bne.n	800353a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	2b03      	cmp	r3, #3
 8003520:	d10b      	bne.n	800353a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003522:	4b15      	ldr	r3, [pc, #84]	; (8003578 <HAL_RCC_OscConfig+0x270>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d064      	beq.n	80035f8 <HAL_RCC_OscConfig+0x2f0>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d160      	bne.n	80035f8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e2ba      	b.n	8003ab0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003542:	d106      	bne.n	8003552 <HAL_RCC_OscConfig+0x24a>
 8003544:	4b0c      	ldr	r3, [pc, #48]	; (8003578 <HAL_RCC_OscConfig+0x270>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a0b      	ldr	r2, [pc, #44]	; (8003578 <HAL_RCC_OscConfig+0x270>)
 800354a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800354e:	6013      	str	r3, [r2, #0]
 8003550:	e026      	b.n	80035a0 <HAL_RCC_OscConfig+0x298>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800355a:	d115      	bne.n	8003588 <HAL_RCC_OscConfig+0x280>
 800355c:	4b06      	ldr	r3, [pc, #24]	; (8003578 <HAL_RCC_OscConfig+0x270>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a05      	ldr	r2, [pc, #20]	; (8003578 <HAL_RCC_OscConfig+0x270>)
 8003562:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003566:	6013      	str	r3, [r2, #0]
 8003568:	4b03      	ldr	r3, [pc, #12]	; (8003578 <HAL_RCC_OscConfig+0x270>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a02      	ldr	r2, [pc, #8]	; (8003578 <HAL_RCC_OscConfig+0x270>)
 800356e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003572:	6013      	str	r3, [r2, #0]
 8003574:	e014      	b.n	80035a0 <HAL_RCC_OscConfig+0x298>
 8003576:	bf00      	nop
 8003578:	40021000 	.word	0x40021000
 800357c:	0800f178 	.word	0x0800f178
 8003580:	20000000 	.word	0x20000000
 8003584:	20000004 	.word	0x20000004
 8003588:	4ba0      	ldr	r3, [pc, #640]	; (800380c <HAL_RCC_OscConfig+0x504>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a9f      	ldr	r2, [pc, #636]	; (800380c <HAL_RCC_OscConfig+0x504>)
 800358e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003592:	6013      	str	r3, [r2, #0]
 8003594:	4b9d      	ldr	r3, [pc, #628]	; (800380c <HAL_RCC_OscConfig+0x504>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a9c      	ldr	r2, [pc, #624]	; (800380c <HAL_RCC_OscConfig+0x504>)
 800359a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800359e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d013      	beq.n	80035d0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a8:	f7fe fd8a 	bl	80020c0 <HAL_GetTick>
 80035ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035ae:	e008      	b.n	80035c2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035b0:	f7fe fd86 	bl	80020c0 <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	2b64      	cmp	r3, #100	; 0x64
 80035bc:	d901      	bls.n	80035c2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e276      	b.n	8003ab0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035c2:	4b92      	ldr	r3, [pc, #584]	; (800380c <HAL_RCC_OscConfig+0x504>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d0f0      	beq.n	80035b0 <HAL_RCC_OscConfig+0x2a8>
 80035ce:	e014      	b.n	80035fa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035d0:	f7fe fd76 	bl	80020c0 <HAL_GetTick>
 80035d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035d6:	e008      	b.n	80035ea <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035d8:	f7fe fd72 	bl	80020c0 <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	2b64      	cmp	r3, #100	; 0x64
 80035e4:	d901      	bls.n	80035ea <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e262      	b.n	8003ab0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035ea:	4b88      	ldr	r3, [pc, #544]	; (800380c <HAL_RCC_OscConfig+0x504>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d1f0      	bne.n	80035d8 <HAL_RCC_OscConfig+0x2d0>
 80035f6:	e000      	b.n	80035fa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0302 	and.w	r3, r3, #2
 8003602:	2b00      	cmp	r3, #0
 8003604:	d060      	beq.n	80036c8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003606:	69bb      	ldr	r3, [r7, #24]
 8003608:	2b04      	cmp	r3, #4
 800360a:	d005      	beq.n	8003618 <HAL_RCC_OscConfig+0x310>
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	2b0c      	cmp	r3, #12
 8003610:	d119      	bne.n	8003646 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	2b02      	cmp	r3, #2
 8003616:	d116      	bne.n	8003646 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003618:	4b7c      	ldr	r3, [pc, #496]	; (800380c <HAL_RCC_OscConfig+0x504>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003620:	2b00      	cmp	r3, #0
 8003622:	d005      	beq.n	8003630 <HAL_RCC_OscConfig+0x328>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d101      	bne.n	8003630 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e23f      	b.n	8003ab0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003630:	4b76      	ldr	r3, [pc, #472]	; (800380c <HAL_RCC_OscConfig+0x504>)
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	691b      	ldr	r3, [r3, #16]
 800363c:	061b      	lsls	r3, r3, #24
 800363e:	4973      	ldr	r1, [pc, #460]	; (800380c <HAL_RCC_OscConfig+0x504>)
 8003640:	4313      	orrs	r3, r2
 8003642:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003644:	e040      	b.n	80036c8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d023      	beq.n	8003696 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800364e:	4b6f      	ldr	r3, [pc, #444]	; (800380c <HAL_RCC_OscConfig+0x504>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a6e      	ldr	r2, [pc, #440]	; (800380c <HAL_RCC_OscConfig+0x504>)
 8003654:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003658:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800365a:	f7fe fd31 	bl	80020c0 <HAL_GetTick>
 800365e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003660:	e008      	b.n	8003674 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003662:	f7fe fd2d 	bl	80020c0 <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	2b02      	cmp	r3, #2
 800366e:	d901      	bls.n	8003674 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	e21d      	b.n	8003ab0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003674:	4b65      	ldr	r3, [pc, #404]	; (800380c <HAL_RCC_OscConfig+0x504>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800367c:	2b00      	cmp	r3, #0
 800367e:	d0f0      	beq.n	8003662 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003680:	4b62      	ldr	r3, [pc, #392]	; (800380c <HAL_RCC_OscConfig+0x504>)
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	691b      	ldr	r3, [r3, #16]
 800368c:	061b      	lsls	r3, r3, #24
 800368e:	495f      	ldr	r1, [pc, #380]	; (800380c <HAL_RCC_OscConfig+0x504>)
 8003690:	4313      	orrs	r3, r2
 8003692:	604b      	str	r3, [r1, #4]
 8003694:	e018      	b.n	80036c8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003696:	4b5d      	ldr	r3, [pc, #372]	; (800380c <HAL_RCC_OscConfig+0x504>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a5c      	ldr	r2, [pc, #368]	; (800380c <HAL_RCC_OscConfig+0x504>)
 800369c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a2:	f7fe fd0d 	bl	80020c0 <HAL_GetTick>
 80036a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036a8:	e008      	b.n	80036bc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036aa:	f7fe fd09 	bl	80020c0 <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d901      	bls.n	80036bc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	e1f9      	b.n	8003ab0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036bc:	4b53      	ldr	r3, [pc, #332]	; (800380c <HAL_RCC_OscConfig+0x504>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d1f0      	bne.n	80036aa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0308 	and.w	r3, r3, #8
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d03c      	beq.n	800374e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	695b      	ldr	r3, [r3, #20]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d01c      	beq.n	8003716 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036dc:	4b4b      	ldr	r3, [pc, #300]	; (800380c <HAL_RCC_OscConfig+0x504>)
 80036de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036e2:	4a4a      	ldr	r2, [pc, #296]	; (800380c <HAL_RCC_OscConfig+0x504>)
 80036e4:	f043 0301 	orr.w	r3, r3, #1
 80036e8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ec:	f7fe fce8 	bl	80020c0 <HAL_GetTick>
 80036f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036f2:	e008      	b.n	8003706 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036f4:	f7fe fce4 	bl	80020c0 <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d901      	bls.n	8003706 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e1d4      	b.n	8003ab0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003706:	4b41      	ldr	r3, [pc, #260]	; (800380c <HAL_RCC_OscConfig+0x504>)
 8003708:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800370c:	f003 0302 	and.w	r3, r3, #2
 8003710:	2b00      	cmp	r3, #0
 8003712:	d0ef      	beq.n	80036f4 <HAL_RCC_OscConfig+0x3ec>
 8003714:	e01b      	b.n	800374e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003716:	4b3d      	ldr	r3, [pc, #244]	; (800380c <HAL_RCC_OscConfig+0x504>)
 8003718:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800371c:	4a3b      	ldr	r2, [pc, #236]	; (800380c <HAL_RCC_OscConfig+0x504>)
 800371e:	f023 0301 	bic.w	r3, r3, #1
 8003722:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003726:	f7fe fccb 	bl	80020c0 <HAL_GetTick>
 800372a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800372c:	e008      	b.n	8003740 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800372e:	f7fe fcc7 	bl	80020c0 <HAL_GetTick>
 8003732:	4602      	mov	r2, r0
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	1ad3      	subs	r3, r2, r3
 8003738:	2b02      	cmp	r3, #2
 800373a:	d901      	bls.n	8003740 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800373c:	2303      	movs	r3, #3
 800373e:	e1b7      	b.n	8003ab0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003740:	4b32      	ldr	r3, [pc, #200]	; (800380c <HAL_RCC_OscConfig+0x504>)
 8003742:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003746:	f003 0302 	and.w	r3, r3, #2
 800374a:	2b00      	cmp	r3, #0
 800374c:	d1ef      	bne.n	800372e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0304 	and.w	r3, r3, #4
 8003756:	2b00      	cmp	r3, #0
 8003758:	f000 80a6 	beq.w	80038a8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800375c:	2300      	movs	r3, #0
 800375e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003760:	4b2a      	ldr	r3, [pc, #168]	; (800380c <HAL_RCC_OscConfig+0x504>)
 8003762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003764:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d10d      	bne.n	8003788 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800376c:	4b27      	ldr	r3, [pc, #156]	; (800380c <HAL_RCC_OscConfig+0x504>)
 800376e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003770:	4a26      	ldr	r2, [pc, #152]	; (800380c <HAL_RCC_OscConfig+0x504>)
 8003772:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003776:	6593      	str	r3, [r2, #88]	; 0x58
 8003778:	4b24      	ldr	r3, [pc, #144]	; (800380c <HAL_RCC_OscConfig+0x504>)
 800377a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800377c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003780:	60bb      	str	r3, [r7, #8]
 8003782:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003784:	2301      	movs	r3, #1
 8003786:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003788:	4b21      	ldr	r3, [pc, #132]	; (8003810 <HAL_RCC_OscConfig+0x508>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003790:	2b00      	cmp	r3, #0
 8003792:	d118      	bne.n	80037c6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003794:	4b1e      	ldr	r3, [pc, #120]	; (8003810 <HAL_RCC_OscConfig+0x508>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a1d      	ldr	r2, [pc, #116]	; (8003810 <HAL_RCC_OscConfig+0x508>)
 800379a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800379e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037a0:	f7fe fc8e 	bl	80020c0 <HAL_GetTick>
 80037a4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037a6:	e008      	b.n	80037ba <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037a8:	f7fe fc8a 	bl	80020c0 <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d901      	bls.n	80037ba <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e17a      	b.n	8003ab0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037ba:	4b15      	ldr	r3, [pc, #84]	; (8003810 <HAL_RCC_OscConfig+0x508>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d0f0      	beq.n	80037a8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d108      	bne.n	80037e0 <HAL_RCC_OscConfig+0x4d8>
 80037ce:	4b0f      	ldr	r3, [pc, #60]	; (800380c <HAL_RCC_OscConfig+0x504>)
 80037d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037d4:	4a0d      	ldr	r2, [pc, #52]	; (800380c <HAL_RCC_OscConfig+0x504>)
 80037d6:	f043 0301 	orr.w	r3, r3, #1
 80037da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037de:	e029      	b.n	8003834 <HAL_RCC_OscConfig+0x52c>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	2b05      	cmp	r3, #5
 80037e6:	d115      	bne.n	8003814 <HAL_RCC_OscConfig+0x50c>
 80037e8:	4b08      	ldr	r3, [pc, #32]	; (800380c <HAL_RCC_OscConfig+0x504>)
 80037ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ee:	4a07      	ldr	r2, [pc, #28]	; (800380c <HAL_RCC_OscConfig+0x504>)
 80037f0:	f043 0304 	orr.w	r3, r3, #4
 80037f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037f8:	4b04      	ldr	r3, [pc, #16]	; (800380c <HAL_RCC_OscConfig+0x504>)
 80037fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037fe:	4a03      	ldr	r2, [pc, #12]	; (800380c <HAL_RCC_OscConfig+0x504>)
 8003800:	f043 0301 	orr.w	r3, r3, #1
 8003804:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003808:	e014      	b.n	8003834 <HAL_RCC_OscConfig+0x52c>
 800380a:	bf00      	nop
 800380c:	40021000 	.word	0x40021000
 8003810:	40007000 	.word	0x40007000
 8003814:	4b9c      	ldr	r3, [pc, #624]	; (8003a88 <HAL_RCC_OscConfig+0x780>)
 8003816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800381a:	4a9b      	ldr	r2, [pc, #620]	; (8003a88 <HAL_RCC_OscConfig+0x780>)
 800381c:	f023 0301 	bic.w	r3, r3, #1
 8003820:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003824:	4b98      	ldr	r3, [pc, #608]	; (8003a88 <HAL_RCC_OscConfig+0x780>)
 8003826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800382a:	4a97      	ldr	r2, [pc, #604]	; (8003a88 <HAL_RCC_OscConfig+0x780>)
 800382c:	f023 0304 	bic.w	r3, r3, #4
 8003830:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d016      	beq.n	800386a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800383c:	f7fe fc40 	bl	80020c0 <HAL_GetTick>
 8003840:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003842:	e00a      	b.n	800385a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003844:	f7fe fc3c 	bl	80020c0 <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003852:	4293      	cmp	r3, r2
 8003854:	d901      	bls.n	800385a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e12a      	b.n	8003ab0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800385a:	4b8b      	ldr	r3, [pc, #556]	; (8003a88 <HAL_RCC_OscConfig+0x780>)
 800385c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003860:	f003 0302 	and.w	r3, r3, #2
 8003864:	2b00      	cmp	r3, #0
 8003866:	d0ed      	beq.n	8003844 <HAL_RCC_OscConfig+0x53c>
 8003868:	e015      	b.n	8003896 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800386a:	f7fe fc29 	bl	80020c0 <HAL_GetTick>
 800386e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003870:	e00a      	b.n	8003888 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003872:	f7fe fc25 	bl	80020c0 <HAL_GetTick>
 8003876:	4602      	mov	r2, r0
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003880:	4293      	cmp	r3, r2
 8003882:	d901      	bls.n	8003888 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003884:	2303      	movs	r3, #3
 8003886:	e113      	b.n	8003ab0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003888:	4b7f      	ldr	r3, [pc, #508]	; (8003a88 <HAL_RCC_OscConfig+0x780>)
 800388a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d1ed      	bne.n	8003872 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003896:	7ffb      	ldrb	r3, [r7, #31]
 8003898:	2b01      	cmp	r3, #1
 800389a:	d105      	bne.n	80038a8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800389c:	4b7a      	ldr	r3, [pc, #488]	; (8003a88 <HAL_RCC_OscConfig+0x780>)
 800389e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038a0:	4a79      	ldr	r2, [pc, #484]	; (8003a88 <HAL_RCC_OscConfig+0x780>)
 80038a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038a6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	f000 80fe 	beq.w	8003aae <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	f040 80d0 	bne.w	8003a5c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80038bc:	4b72      	ldr	r3, [pc, #456]	; (8003a88 <HAL_RCC_OscConfig+0x780>)
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	f003 0203 	and.w	r2, r3, #3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d130      	bne.n	8003932 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038da:	3b01      	subs	r3, #1
 80038dc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80038de:	429a      	cmp	r2, r3
 80038e0:	d127      	bne.n	8003932 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038ec:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d11f      	bne.n	8003932 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80038fc:	2a07      	cmp	r2, #7
 80038fe:	bf14      	ite	ne
 8003900:	2201      	movne	r2, #1
 8003902:	2200      	moveq	r2, #0
 8003904:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003906:	4293      	cmp	r3, r2
 8003908:	d113      	bne.n	8003932 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003914:	085b      	lsrs	r3, r3, #1
 8003916:	3b01      	subs	r3, #1
 8003918:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800391a:	429a      	cmp	r2, r3
 800391c:	d109      	bne.n	8003932 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003928:	085b      	lsrs	r3, r3, #1
 800392a:	3b01      	subs	r3, #1
 800392c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800392e:	429a      	cmp	r2, r3
 8003930:	d06e      	beq.n	8003a10 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003932:	69bb      	ldr	r3, [r7, #24]
 8003934:	2b0c      	cmp	r3, #12
 8003936:	d069      	beq.n	8003a0c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003938:	4b53      	ldr	r3, [pc, #332]	; (8003a88 <HAL_RCC_OscConfig+0x780>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d105      	bne.n	8003950 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003944:	4b50      	ldr	r3, [pc, #320]	; (8003a88 <HAL_RCC_OscConfig+0x780>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d001      	beq.n	8003954 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e0ad      	b.n	8003ab0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003954:	4b4c      	ldr	r3, [pc, #304]	; (8003a88 <HAL_RCC_OscConfig+0x780>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a4b      	ldr	r2, [pc, #300]	; (8003a88 <HAL_RCC_OscConfig+0x780>)
 800395a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800395e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003960:	f7fe fbae 	bl	80020c0 <HAL_GetTick>
 8003964:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003966:	e008      	b.n	800397a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003968:	f7fe fbaa 	bl	80020c0 <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	2b02      	cmp	r3, #2
 8003974:	d901      	bls.n	800397a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e09a      	b.n	8003ab0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800397a:	4b43      	ldr	r3, [pc, #268]	; (8003a88 <HAL_RCC_OscConfig+0x780>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d1f0      	bne.n	8003968 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003986:	4b40      	ldr	r3, [pc, #256]	; (8003a88 <HAL_RCC_OscConfig+0x780>)
 8003988:	68da      	ldr	r2, [r3, #12]
 800398a:	4b40      	ldr	r3, [pc, #256]	; (8003a8c <HAL_RCC_OscConfig+0x784>)
 800398c:	4013      	ands	r3, r2
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003996:	3a01      	subs	r2, #1
 8003998:	0112      	lsls	r2, r2, #4
 800399a:	4311      	orrs	r1, r2
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80039a0:	0212      	lsls	r2, r2, #8
 80039a2:	4311      	orrs	r1, r2
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80039a8:	0852      	lsrs	r2, r2, #1
 80039aa:	3a01      	subs	r2, #1
 80039ac:	0552      	lsls	r2, r2, #21
 80039ae:	4311      	orrs	r1, r2
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80039b4:	0852      	lsrs	r2, r2, #1
 80039b6:	3a01      	subs	r2, #1
 80039b8:	0652      	lsls	r2, r2, #25
 80039ba:	4311      	orrs	r1, r2
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80039c0:	0912      	lsrs	r2, r2, #4
 80039c2:	0452      	lsls	r2, r2, #17
 80039c4:	430a      	orrs	r2, r1
 80039c6:	4930      	ldr	r1, [pc, #192]	; (8003a88 <HAL_RCC_OscConfig+0x780>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80039cc:	4b2e      	ldr	r3, [pc, #184]	; (8003a88 <HAL_RCC_OscConfig+0x780>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a2d      	ldr	r2, [pc, #180]	; (8003a88 <HAL_RCC_OscConfig+0x780>)
 80039d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039d6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80039d8:	4b2b      	ldr	r3, [pc, #172]	; (8003a88 <HAL_RCC_OscConfig+0x780>)
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	4a2a      	ldr	r2, [pc, #168]	; (8003a88 <HAL_RCC_OscConfig+0x780>)
 80039de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039e2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80039e4:	f7fe fb6c 	bl	80020c0 <HAL_GetTick>
 80039e8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039ea:	e008      	b.n	80039fe <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039ec:	f7fe fb68 	bl	80020c0 <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d901      	bls.n	80039fe <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e058      	b.n	8003ab0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039fe:	4b22      	ldr	r3, [pc, #136]	; (8003a88 <HAL_RCC_OscConfig+0x780>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d0f0      	beq.n	80039ec <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a0a:	e050      	b.n	8003aae <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e04f      	b.n	8003ab0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a10:	4b1d      	ldr	r3, [pc, #116]	; (8003a88 <HAL_RCC_OscConfig+0x780>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d148      	bne.n	8003aae <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003a1c:	4b1a      	ldr	r3, [pc, #104]	; (8003a88 <HAL_RCC_OscConfig+0x780>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a19      	ldr	r2, [pc, #100]	; (8003a88 <HAL_RCC_OscConfig+0x780>)
 8003a22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a26:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a28:	4b17      	ldr	r3, [pc, #92]	; (8003a88 <HAL_RCC_OscConfig+0x780>)
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	4a16      	ldr	r2, [pc, #88]	; (8003a88 <HAL_RCC_OscConfig+0x780>)
 8003a2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a32:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003a34:	f7fe fb44 	bl	80020c0 <HAL_GetTick>
 8003a38:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a3a:	e008      	b.n	8003a4e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a3c:	f7fe fb40 	bl	80020c0 <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d901      	bls.n	8003a4e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e030      	b.n	8003ab0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a4e:	4b0e      	ldr	r3, [pc, #56]	; (8003a88 <HAL_RCC_OscConfig+0x780>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d0f0      	beq.n	8003a3c <HAL_RCC_OscConfig+0x734>
 8003a5a:	e028      	b.n	8003aae <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a5c:	69bb      	ldr	r3, [r7, #24]
 8003a5e:	2b0c      	cmp	r3, #12
 8003a60:	d023      	beq.n	8003aaa <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a62:	4b09      	ldr	r3, [pc, #36]	; (8003a88 <HAL_RCC_OscConfig+0x780>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a08      	ldr	r2, [pc, #32]	; (8003a88 <HAL_RCC_OscConfig+0x780>)
 8003a68:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a6e:	f7fe fb27 	bl	80020c0 <HAL_GetTick>
 8003a72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a74:	e00c      	b.n	8003a90 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a76:	f7fe fb23 	bl	80020c0 <HAL_GetTick>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d905      	bls.n	8003a90 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003a84:	2303      	movs	r3, #3
 8003a86:	e013      	b.n	8003ab0 <HAL_RCC_OscConfig+0x7a8>
 8003a88:	40021000 	.word	0x40021000
 8003a8c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a90:	4b09      	ldr	r3, [pc, #36]	; (8003ab8 <HAL_RCC_OscConfig+0x7b0>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d1ec      	bne.n	8003a76 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003a9c:	4b06      	ldr	r3, [pc, #24]	; (8003ab8 <HAL_RCC_OscConfig+0x7b0>)
 8003a9e:	68da      	ldr	r2, [r3, #12]
 8003aa0:	4905      	ldr	r1, [pc, #20]	; (8003ab8 <HAL_RCC_OscConfig+0x7b0>)
 8003aa2:	4b06      	ldr	r3, [pc, #24]	; (8003abc <HAL_RCC_OscConfig+0x7b4>)
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	60cb      	str	r3, [r1, #12]
 8003aa8:	e001      	b.n	8003aae <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e000      	b.n	8003ab0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003aae:	2300      	movs	r3, #0
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3720      	adds	r7, #32
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	40021000 	.word	0x40021000
 8003abc:	feeefffc 	.word	0xfeeefffc

08003ac0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d101      	bne.n	8003ad4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e0e7      	b.n	8003ca4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ad4:	4b75      	ldr	r3, [pc, #468]	; (8003cac <HAL_RCC_ClockConfig+0x1ec>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0307 	and.w	r3, r3, #7
 8003adc:	683a      	ldr	r2, [r7, #0]
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d910      	bls.n	8003b04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ae2:	4b72      	ldr	r3, [pc, #456]	; (8003cac <HAL_RCC_ClockConfig+0x1ec>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f023 0207 	bic.w	r2, r3, #7
 8003aea:	4970      	ldr	r1, [pc, #448]	; (8003cac <HAL_RCC_ClockConfig+0x1ec>)
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003af2:	4b6e      	ldr	r3, [pc, #440]	; (8003cac <HAL_RCC_ClockConfig+0x1ec>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0307 	and.w	r3, r3, #7
 8003afa:	683a      	ldr	r2, [r7, #0]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d001      	beq.n	8003b04 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e0cf      	b.n	8003ca4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0302 	and.w	r3, r3, #2
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d010      	beq.n	8003b32 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	689a      	ldr	r2, [r3, #8]
 8003b14:	4b66      	ldr	r3, [pc, #408]	; (8003cb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d908      	bls.n	8003b32 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b20:	4b63      	ldr	r3, [pc, #396]	; (8003cb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	4960      	ldr	r1, [pc, #384]	; (8003cb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0301 	and.w	r3, r3, #1
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d04c      	beq.n	8003bd8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	2b03      	cmp	r3, #3
 8003b44:	d107      	bne.n	8003b56 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b46:	4b5a      	ldr	r3, [pc, #360]	; (8003cb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d121      	bne.n	8003b96 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e0a6      	b.n	8003ca4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d107      	bne.n	8003b6e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b5e:	4b54      	ldr	r3, [pc, #336]	; (8003cb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d115      	bne.n	8003b96 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e09a      	b.n	8003ca4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d107      	bne.n	8003b86 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b76:	4b4e      	ldr	r3, [pc, #312]	; (8003cb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0302 	and.w	r3, r3, #2
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d109      	bne.n	8003b96 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e08e      	b.n	8003ca4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b86:	4b4a      	ldr	r3, [pc, #296]	; (8003cb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d101      	bne.n	8003b96 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e086      	b.n	8003ca4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b96:	4b46      	ldr	r3, [pc, #280]	; (8003cb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	f023 0203 	bic.w	r2, r3, #3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	4943      	ldr	r1, [pc, #268]	; (8003cb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ba8:	f7fe fa8a 	bl	80020c0 <HAL_GetTick>
 8003bac:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bae:	e00a      	b.n	8003bc6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bb0:	f7fe fa86 	bl	80020c0 <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d901      	bls.n	8003bc6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e06e      	b.n	8003ca4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bc6:	4b3a      	ldr	r3, [pc, #232]	; (8003cb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	f003 020c 	and.w	r2, r3, #12
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d1eb      	bne.n	8003bb0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0302 	and.w	r3, r3, #2
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d010      	beq.n	8003c06 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	689a      	ldr	r2, [r3, #8]
 8003be8:	4b31      	ldr	r3, [pc, #196]	; (8003cb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d208      	bcs.n	8003c06 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bf4:	4b2e      	ldr	r3, [pc, #184]	; (8003cb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	492b      	ldr	r1, [pc, #172]	; (8003cb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003c02:	4313      	orrs	r3, r2
 8003c04:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c06:	4b29      	ldr	r3, [pc, #164]	; (8003cac <HAL_RCC_ClockConfig+0x1ec>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0307 	and.w	r3, r3, #7
 8003c0e:	683a      	ldr	r2, [r7, #0]
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d210      	bcs.n	8003c36 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c14:	4b25      	ldr	r3, [pc, #148]	; (8003cac <HAL_RCC_ClockConfig+0x1ec>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f023 0207 	bic.w	r2, r3, #7
 8003c1c:	4923      	ldr	r1, [pc, #140]	; (8003cac <HAL_RCC_ClockConfig+0x1ec>)
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c24:	4b21      	ldr	r3, [pc, #132]	; (8003cac <HAL_RCC_ClockConfig+0x1ec>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0307 	and.w	r3, r3, #7
 8003c2c:	683a      	ldr	r2, [r7, #0]
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d001      	beq.n	8003c36 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e036      	b.n	8003ca4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0304 	and.w	r3, r3, #4
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d008      	beq.n	8003c54 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c42:	4b1b      	ldr	r3, [pc, #108]	; (8003cb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	4918      	ldr	r1, [pc, #96]	; (8003cb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003c50:	4313      	orrs	r3, r2
 8003c52:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0308 	and.w	r3, r3, #8
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d009      	beq.n	8003c74 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c60:	4b13      	ldr	r3, [pc, #76]	; (8003cb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	691b      	ldr	r3, [r3, #16]
 8003c6c:	00db      	lsls	r3, r3, #3
 8003c6e:	4910      	ldr	r1, [pc, #64]	; (8003cb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003c70:	4313      	orrs	r3, r2
 8003c72:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c74:	f000 f824 	bl	8003cc0 <HAL_RCC_GetSysClockFreq>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	4b0d      	ldr	r3, [pc, #52]	; (8003cb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	091b      	lsrs	r3, r3, #4
 8003c80:	f003 030f 	and.w	r3, r3, #15
 8003c84:	490b      	ldr	r1, [pc, #44]	; (8003cb4 <HAL_RCC_ClockConfig+0x1f4>)
 8003c86:	5ccb      	ldrb	r3, [r1, r3]
 8003c88:	f003 031f 	and.w	r3, r3, #31
 8003c8c:	fa22 f303 	lsr.w	r3, r2, r3
 8003c90:	4a09      	ldr	r2, [pc, #36]	; (8003cb8 <HAL_RCC_ClockConfig+0x1f8>)
 8003c92:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003c94:	4b09      	ldr	r3, [pc, #36]	; (8003cbc <HAL_RCC_ClockConfig+0x1fc>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f7fe f9c1 	bl	8002020 <HAL_InitTick>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	72fb      	strb	r3, [r7, #11]

  return status;
 8003ca2:	7afb      	ldrb	r3, [r7, #11]
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3710      	adds	r7, #16
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	40022000 	.word	0x40022000
 8003cb0:	40021000 	.word	0x40021000
 8003cb4:	0800f178 	.word	0x0800f178
 8003cb8:	20000000 	.word	0x20000000
 8003cbc:	20000004 	.word	0x20000004

08003cc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b089      	sub	sp, #36	; 0x24
 8003cc4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	61fb      	str	r3, [r7, #28]
 8003cca:	2300      	movs	r3, #0
 8003ccc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cce:	4b3e      	ldr	r3, [pc, #248]	; (8003dc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	f003 030c 	and.w	r3, r3, #12
 8003cd6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003cd8:	4b3b      	ldr	r3, [pc, #236]	; (8003dc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	f003 0303 	and.w	r3, r3, #3
 8003ce0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d005      	beq.n	8003cf4 <HAL_RCC_GetSysClockFreq+0x34>
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	2b0c      	cmp	r3, #12
 8003cec:	d121      	bne.n	8003d32 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d11e      	bne.n	8003d32 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003cf4:	4b34      	ldr	r3, [pc, #208]	; (8003dc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0308 	and.w	r3, r3, #8
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d107      	bne.n	8003d10 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003d00:	4b31      	ldr	r3, [pc, #196]	; (8003dc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d06:	0a1b      	lsrs	r3, r3, #8
 8003d08:	f003 030f 	and.w	r3, r3, #15
 8003d0c:	61fb      	str	r3, [r7, #28]
 8003d0e:	e005      	b.n	8003d1c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003d10:	4b2d      	ldr	r3, [pc, #180]	; (8003dc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	091b      	lsrs	r3, r3, #4
 8003d16:	f003 030f 	and.w	r3, r3, #15
 8003d1a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003d1c:	4a2b      	ldr	r2, [pc, #172]	; (8003dcc <HAL_RCC_GetSysClockFreq+0x10c>)
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d24:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d10d      	bne.n	8003d48 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d30:	e00a      	b.n	8003d48 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	2b04      	cmp	r3, #4
 8003d36:	d102      	bne.n	8003d3e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003d38:	4b25      	ldr	r3, [pc, #148]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003d3a:	61bb      	str	r3, [r7, #24]
 8003d3c:	e004      	b.n	8003d48 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	2b08      	cmp	r3, #8
 8003d42:	d101      	bne.n	8003d48 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003d44:	4b23      	ldr	r3, [pc, #140]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003d46:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	2b0c      	cmp	r3, #12
 8003d4c:	d134      	bne.n	8003db8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d4e:	4b1e      	ldr	r3, [pc, #120]	; (8003dc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	f003 0303 	and.w	r3, r3, #3
 8003d56:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d003      	beq.n	8003d66 <HAL_RCC_GetSysClockFreq+0xa6>
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	2b03      	cmp	r3, #3
 8003d62:	d003      	beq.n	8003d6c <HAL_RCC_GetSysClockFreq+0xac>
 8003d64:	e005      	b.n	8003d72 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003d66:	4b1a      	ldr	r3, [pc, #104]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003d68:	617b      	str	r3, [r7, #20]
      break;
 8003d6a:	e005      	b.n	8003d78 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003d6c:	4b19      	ldr	r3, [pc, #100]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003d6e:	617b      	str	r3, [r7, #20]
      break;
 8003d70:	e002      	b.n	8003d78 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	617b      	str	r3, [r7, #20]
      break;
 8003d76:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d78:	4b13      	ldr	r3, [pc, #76]	; (8003dc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	091b      	lsrs	r3, r3, #4
 8003d7e:	f003 0307 	and.w	r3, r3, #7
 8003d82:	3301      	adds	r3, #1
 8003d84:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003d86:	4b10      	ldr	r3, [pc, #64]	; (8003dc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	0a1b      	lsrs	r3, r3, #8
 8003d8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d90:	697a      	ldr	r2, [r7, #20]
 8003d92:	fb03 f202 	mul.w	r2, r3, r2
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d9c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d9e:	4b0a      	ldr	r3, [pc, #40]	; (8003dc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	0e5b      	lsrs	r3, r3, #25
 8003da4:	f003 0303 	and.w	r3, r3, #3
 8003da8:	3301      	adds	r3, #1
 8003daa:	005b      	lsls	r3, r3, #1
 8003dac:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003dae:	697a      	ldr	r2, [r7, #20]
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003db6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003db8:	69bb      	ldr	r3, [r7, #24]
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3724      	adds	r7, #36	; 0x24
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr
 8003dc6:	bf00      	nop
 8003dc8:	40021000 	.word	0x40021000
 8003dcc:	0800f190 	.word	0x0800f190
 8003dd0:	00f42400 	.word	0x00f42400
 8003dd4:	007a1200 	.word	0x007a1200

08003dd8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ddc:	4b03      	ldr	r3, [pc, #12]	; (8003dec <HAL_RCC_GetHCLKFreq+0x14>)
 8003dde:	681b      	ldr	r3, [r3, #0]
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr
 8003dea:	bf00      	nop
 8003dec:	20000000 	.word	0x20000000

08003df0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003df4:	f7ff fff0 	bl	8003dd8 <HAL_RCC_GetHCLKFreq>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	4b06      	ldr	r3, [pc, #24]	; (8003e14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	0a1b      	lsrs	r3, r3, #8
 8003e00:	f003 0307 	and.w	r3, r3, #7
 8003e04:	4904      	ldr	r1, [pc, #16]	; (8003e18 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003e06:	5ccb      	ldrb	r3, [r1, r3]
 8003e08:	f003 031f 	and.w	r3, r3, #31
 8003e0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	40021000 	.word	0x40021000
 8003e18:	0800f188 	.word	0x0800f188

08003e1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003e20:	f7ff ffda 	bl	8003dd8 <HAL_RCC_GetHCLKFreq>
 8003e24:	4602      	mov	r2, r0
 8003e26:	4b06      	ldr	r3, [pc, #24]	; (8003e40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	0adb      	lsrs	r3, r3, #11
 8003e2c:	f003 0307 	and.w	r3, r3, #7
 8003e30:	4904      	ldr	r1, [pc, #16]	; (8003e44 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003e32:	5ccb      	ldrb	r3, [r1, r3]
 8003e34:	f003 031f 	and.w	r3, r3, #31
 8003e38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	40021000 	.word	0x40021000
 8003e44:	0800f188 	.word	0x0800f188

08003e48 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b086      	sub	sp, #24
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003e50:	2300      	movs	r3, #0
 8003e52:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003e54:	4b2a      	ldr	r3, [pc, #168]	; (8003f00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d003      	beq.n	8003e68 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003e60:	f7ff f9ee 	bl	8003240 <HAL_PWREx_GetVoltageRange>
 8003e64:	6178      	str	r0, [r7, #20]
 8003e66:	e014      	b.n	8003e92 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e68:	4b25      	ldr	r3, [pc, #148]	; (8003f00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e6c:	4a24      	ldr	r2, [pc, #144]	; (8003f00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e72:	6593      	str	r3, [r2, #88]	; 0x58
 8003e74:	4b22      	ldr	r3, [pc, #136]	; (8003f00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e7c:	60fb      	str	r3, [r7, #12]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003e80:	f7ff f9de 	bl	8003240 <HAL_PWREx_GetVoltageRange>
 8003e84:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003e86:	4b1e      	ldr	r3, [pc, #120]	; (8003f00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e8a:	4a1d      	ldr	r2, [pc, #116]	; (8003f00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e90:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e98:	d10b      	bne.n	8003eb2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2b80      	cmp	r3, #128	; 0x80
 8003e9e:	d919      	bls.n	8003ed4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2ba0      	cmp	r3, #160	; 0xa0
 8003ea4:	d902      	bls.n	8003eac <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ea6:	2302      	movs	r3, #2
 8003ea8:	613b      	str	r3, [r7, #16]
 8003eaa:	e013      	b.n	8003ed4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003eac:	2301      	movs	r3, #1
 8003eae:	613b      	str	r3, [r7, #16]
 8003eb0:	e010      	b.n	8003ed4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2b80      	cmp	r3, #128	; 0x80
 8003eb6:	d902      	bls.n	8003ebe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003eb8:	2303      	movs	r3, #3
 8003eba:	613b      	str	r3, [r7, #16]
 8003ebc:	e00a      	b.n	8003ed4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2b80      	cmp	r3, #128	; 0x80
 8003ec2:	d102      	bne.n	8003eca <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ec4:	2302      	movs	r3, #2
 8003ec6:	613b      	str	r3, [r7, #16]
 8003ec8:	e004      	b.n	8003ed4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2b70      	cmp	r3, #112	; 0x70
 8003ece:	d101      	bne.n	8003ed4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003ed4:	4b0b      	ldr	r3, [pc, #44]	; (8003f04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f023 0207 	bic.w	r2, r3, #7
 8003edc:	4909      	ldr	r1, [pc, #36]	; (8003f04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003ee4:	4b07      	ldr	r3, [pc, #28]	; (8003f04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0307 	and.w	r3, r3, #7
 8003eec:	693a      	ldr	r2, [r7, #16]
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d001      	beq.n	8003ef6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e000      	b.n	8003ef8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003ef6:	2300      	movs	r3, #0
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3718      	adds	r7, #24
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	40021000 	.word	0x40021000
 8003f04:	40022000 	.word	0x40022000

08003f08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b086      	sub	sp, #24
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003f10:	2300      	movs	r3, #0
 8003f12:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f14:	2300      	movs	r3, #0
 8003f16:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d041      	beq.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f28:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003f2c:	d02a      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003f2e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003f32:	d824      	bhi.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003f34:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f38:	d008      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003f3a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f3e:	d81e      	bhi.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d00a      	beq.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003f44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f48:	d010      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003f4a:	e018      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003f4c:	4b86      	ldr	r3, [pc, #536]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	4a85      	ldr	r2, [pc, #532]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f56:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f58:	e015      	b.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	3304      	adds	r3, #4
 8003f5e:	2100      	movs	r1, #0
 8003f60:	4618      	mov	r0, r3
 8003f62:	f000 fabb 	bl	80044dc <RCCEx_PLLSAI1_Config>
 8003f66:	4603      	mov	r3, r0
 8003f68:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f6a:	e00c      	b.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	3320      	adds	r3, #32
 8003f70:	2100      	movs	r1, #0
 8003f72:	4618      	mov	r0, r3
 8003f74:	f000 fba6 	bl	80046c4 <RCCEx_PLLSAI2_Config>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f7c:	e003      	b.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	74fb      	strb	r3, [r7, #19]
      break;
 8003f82:	e000      	b.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003f84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f86:	7cfb      	ldrb	r3, [r7, #19]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d10b      	bne.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f8c:	4b76      	ldr	r3, [pc, #472]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f92:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f9a:	4973      	ldr	r1, [pc, #460]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003fa2:	e001      	b.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fa4:	7cfb      	ldrb	r3, [r7, #19]
 8003fa6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d041      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fb8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003fbc:	d02a      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003fbe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003fc2:	d824      	bhi.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003fc4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003fc8:	d008      	beq.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003fca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003fce:	d81e      	bhi.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d00a      	beq.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003fd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003fd8:	d010      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003fda:	e018      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003fdc:	4b62      	ldr	r3, [pc, #392]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	4a61      	ldr	r2, [pc, #388]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fe2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fe6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003fe8:	e015      	b.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	3304      	adds	r3, #4
 8003fee:	2100      	movs	r1, #0
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f000 fa73 	bl	80044dc <RCCEx_PLLSAI1_Config>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ffa:	e00c      	b.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	3320      	adds	r3, #32
 8004000:	2100      	movs	r1, #0
 8004002:	4618      	mov	r0, r3
 8004004:	f000 fb5e 	bl	80046c4 <RCCEx_PLLSAI2_Config>
 8004008:	4603      	mov	r3, r0
 800400a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800400c:	e003      	b.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	74fb      	strb	r3, [r7, #19]
      break;
 8004012:	e000      	b.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004014:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004016:	7cfb      	ldrb	r3, [r7, #19]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d10b      	bne.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800401c:	4b52      	ldr	r3, [pc, #328]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800401e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004022:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800402a:	494f      	ldr	r1, [pc, #316]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800402c:	4313      	orrs	r3, r2
 800402e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004032:	e001      	b.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004034:	7cfb      	ldrb	r3, [r7, #19]
 8004036:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004040:	2b00      	cmp	r3, #0
 8004042:	f000 80a0 	beq.w	8004186 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004046:	2300      	movs	r3, #0
 8004048:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800404a:	4b47      	ldr	r3, [pc, #284]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800404c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800404e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d101      	bne.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004056:	2301      	movs	r3, #1
 8004058:	e000      	b.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800405a:	2300      	movs	r3, #0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00d      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004060:	4b41      	ldr	r3, [pc, #260]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004064:	4a40      	ldr	r2, [pc, #256]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004066:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800406a:	6593      	str	r3, [r2, #88]	; 0x58
 800406c:	4b3e      	ldr	r3, [pc, #248]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800406e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004070:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004074:	60bb      	str	r3, [r7, #8]
 8004076:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004078:	2301      	movs	r3, #1
 800407a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800407c:	4b3b      	ldr	r3, [pc, #236]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a3a      	ldr	r2, [pc, #232]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004082:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004086:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004088:	f7fe f81a 	bl	80020c0 <HAL_GetTick>
 800408c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800408e:	e009      	b.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004090:	f7fe f816 	bl	80020c0 <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	2b02      	cmp	r3, #2
 800409c:	d902      	bls.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	74fb      	strb	r3, [r7, #19]
        break;
 80040a2:	e005      	b.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80040a4:	4b31      	ldr	r3, [pc, #196]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d0ef      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80040b0:	7cfb      	ldrb	r3, [r7, #19]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d15c      	bne.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80040b6:	4b2c      	ldr	r3, [pc, #176]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040c0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d01f      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040ce:	697a      	ldr	r2, [r7, #20]
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d019      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80040d4:	4b24      	ldr	r3, [pc, #144]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040de:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80040e0:	4b21      	ldr	r3, [pc, #132]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040e6:	4a20      	ldr	r2, [pc, #128]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80040f0:	4b1d      	ldr	r3, [pc, #116]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040f6:	4a1c      	ldr	r2, [pc, #112]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004100:	4a19      	ldr	r2, [pc, #100]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	f003 0301 	and.w	r3, r3, #1
 800410e:	2b00      	cmp	r3, #0
 8004110:	d016      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004112:	f7fd ffd5 	bl	80020c0 <HAL_GetTick>
 8004116:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004118:	e00b      	b.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800411a:	f7fd ffd1 	bl	80020c0 <HAL_GetTick>
 800411e:	4602      	mov	r2, r0
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	f241 3288 	movw	r2, #5000	; 0x1388
 8004128:	4293      	cmp	r3, r2
 800412a:	d902      	bls.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800412c:	2303      	movs	r3, #3
 800412e:	74fb      	strb	r3, [r7, #19]
            break;
 8004130:	e006      	b.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004132:	4b0d      	ldr	r3, [pc, #52]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004134:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004138:	f003 0302 	and.w	r3, r3, #2
 800413c:	2b00      	cmp	r3, #0
 800413e:	d0ec      	beq.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004140:	7cfb      	ldrb	r3, [r7, #19]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d10c      	bne.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004146:	4b08      	ldr	r3, [pc, #32]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004148:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800414c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004156:	4904      	ldr	r1, [pc, #16]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004158:	4313      	orrs	r3, r2
 800415a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800415e:	e009      	b.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004160:	7cfb      	ldrb	r3, [r7, #19]
 8004162:	74bb      	strb	r3, [r7, #18]
 8004164:	e006      	b.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004166:	bf00      	nop
 8004168:	40021000 	.word	0x40021000
 800416c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004170:	7cfb      	ldrb	r3, [r7, #19]
 8004172:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004174:	7c7b      	ldrb	r3, [r7, #17]
 8004176:	2b01      	cmp	r3, #1
 8004178:	d105      	bne.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800417a:	4b9e      	ldr	r3, [pc, #632]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800417c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800417e:	4a9d      	ldr	r2, [pc, #628]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004180:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004184:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0301 	and.w	r3, r3, #1
 800418e:	2b00      	cmp	r3, #0
 8004190:	d00a      	beq.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004192:	4b98      	ldr	r3, [pc, #608]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004194:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004198:	f023 0203 	bic.w	r2, r3, #3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a0:	4994      	ldr	r1, [pc, #592]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041a2:	4313      	orrs	r3, r2
 80041a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0302 	and.w	r3, r3, #2
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d00a      	beq.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80041b4:	4b8f      	ldr	r3, [pc, #572]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ba:	f023 020c 	bic.w	r2, r3, #12
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041c2:	498c      	ldr	r1, [pc, #560]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041c4:	4313      	orrs	r3, r2
 80041c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0304 	and.w	r3, r3, #4
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d00a      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80041d6:	4b87      	ldr	r3, [pc, #540]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041dc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e4:	4983      	ldr	r1, [pc, #524]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0308 	and.w	r3, r3, #8
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d00a      	beq.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80041f8:	4b7e      	ldr	r3, [pc, #504]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041fe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004206:	497b      	ldr	r1, [pc, #492]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004208:	4313      	orrs	r3, r2
 800420a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0310 	and.w	r3, r3, #16
 8004216:	2b00      	cmp	r3, #0
 8004218:	d00a      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800421a:	4b76      	ldr	r3, [pc, #472]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800421c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004220:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004228:	4972      	ldr	r1, [pc, #456]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800422a:	4313      	orrs	r3, r2
 800422c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0320 	and.w	r3, r3, #32
 8004238:	2b00      	cmp	r3, #0
 800423a:	d00a      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800423c:	4b6d      	ldr	r3, [pc, #436]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800423e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004242:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800424a:	496a      	ldr	r1, [pc, #424]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800424c:	4313      	orrs	r3, r2
 800424e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00a      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800425e:	4b65      	ldr	r3, [pc, #404]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004260:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004264:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800426c:	4961      	ldr	r1, [pc, #388]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800426e:	4313      	orrs	r3, r2
 8004270:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800427c:	2b00      	cmp	r3, #0
 800427e:	d00a      	beq.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004280:	4b5c      	ldr	r3, [pc, #368]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004286:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800428e:	4959      	ldr	r1, [pc, #356]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004290:	4313      	orrs	r3, r2
 8004292:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d00a      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80042a2:	4b54      	ldr	r3, [pc, #336]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042a8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042b0:	4950      	ldr	r1, [pc, #320]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042b2:	4313      	orrs	r3, r2
 80042b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d00a      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80042c4:	4b4b      	ldr	r3, [pc, #300]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ca:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042d2:	4948      	ldr	r1, [pc, #288]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042d4:	4313      	orrs	r3, r2
 80042d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d00a      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80042e6:	4b43      	ldr	r3, [pc, #268]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042f4:	493f      	ldr	r1, [pc, #252]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042f6:	4313      	orrs	r3, r2
 80042f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004304:	2b00      	cmp	r3, #0
 8004306:	d028      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004308:	4b3a      	ldr	r3, [pc, #232]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800430a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800430e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004316:	4937      	ldr	r1, [pc, #220]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004318:	4313      	orrs	r3, r2
 800431a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004322:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004326:	d106      	bne.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004328:	4b32      	ldr	r3, [pc, #200]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	4a31      	ldr	r2, [pc, #196]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800432e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004332:	60d3      	str	r3, [r2, #12]
 8004334:	e011      	b.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800433a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800433e:	d10c      	bne.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	3304      	adds	r3, #4
 8004344:	2101      	movs	r1, #1
 8004346:	4618      	mov	r0, r3
 8004348:	f000 f8c8 	bl	80044dc <RCCEx_PLLSAI1_Config>
 800434c:	4603      	mov	r3, r0
 800434e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004350:	7cfb      	ldrb	r3, [r7, #19]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d001      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004356:	7cfb      	ldrb	r3, [r7, #19]
 8004358:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004362:	2b00      	cmp	r3, #0
 8004364:	d028      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004366:	4b23      	ldr	r3, [pc, #140]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004368:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800436c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004374:	491f      	ldr	r1, [pc, #124]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004376:	4313      	orrs	r3, r2
 8004378:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004380:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004384:	d106      	bne.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004386:	4b1b      	ldr	r3, [pc, #108]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004388:	68db      	ldr	r3, [r3, #12]
 800438a:	4a1a      	ldr	r2, [pc, #104]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800438c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004390:	60d3      	str	r3, [r2, #12]
 8004392:	e011      	b.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004398:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800439c:	d10c      	bne.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	3304      	adds	r3, #4
 80043a2:	2101      	movs	r1, #1
 80043a4:	4618      	mov	r0, r3
 80043a6:	f000 f899 	bl	80044dc <RCCEx_PLLSAI1_Config>
 80043aa:	4603      	mov	r3, r0
 80043ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043ae:	7cfb      	ldrb	r3, [r7, #19]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d001      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80043b4:	7cfb      	ldrb	r3, [r7, #19]
 80043b6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d02b      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80043c4:	4b0b      	ldr	r3, [pc, #44]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043d2:	4908      	ldr	r1, [pc, #32]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043d4:	4313      	orrs	r3, r2
 80043d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043e2:	d109      	bne.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043e4:	4b03      	ldr	r3, [pc, #12]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	4a02      	ldr	r2, [pc, #8]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043ee:	60d3      	str	r3, [r2, #12]
 80043f0:	e014      	b.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x514>
 80043f2:	bf00      	nop
 80043f4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004400:	d10c      	bne.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	3304      	adds	r3, #4
 8004406:	2101      	movs	r1, #1
 8004408:	4618      	mov	r0, r3
 800440a:	f000 f867 	bl	80044dc <RCCEx_PLLSAI1_Config>
 800440e:	4603      	mov	r3, r0
 8004410:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004412:	7cfb      	ldrb	r3, [r7, #19]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d001      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004418:	7cfb      	ldrb	r3, [r7, #19]
 800441a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004424:	2b00      	cmp	r3, #0
 8004426:	d02f      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004428:	4b2b      	ldr	r3, [pc, #172]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800442a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800442e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004436:	4928      	ldr	r1, [pc, #160]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004438:	4313      	orrs	r3, r2
 800443a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004442:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004446:	d10d      	bne.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	3304      	adds	r3, #4
 800444c:	2102      	movs	r1, #2
 800444e:	4618      	mov	r0, r3
 8004450:	f000 f844 	bl	80044dc <RCCEx_PLLSAI1_Config>
 8004454:	4603      	mov	r3, r0
 8004456:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004458:	7cfb      	ldrb	r3, [r7, #19]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d014      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800445e:	7cfb      	ldrb	r3, [r7, #19]
 8004460:	74bb      	strb	r3, [r7, #18]
 8004462:	e011      	b.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004468:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800446c:	d10c      	bne.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	3320      	adds	r3, #32
 8004472:	2102      	movs	r1, #2
 8004474:	4618      	mov	r0, r3
 8004476:	f000 f925 	bl	80046c4 <RCCEx_PLLSAI2_Config>
 800447a:	4603      	mov	r3, r0
 800447c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800447e:	7cfb      	ldrb	r3, [r7, #19]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d001      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004484:	7cfb      	ldrb	r3, [r7, #19]
 8004486:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d00a      	beq.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004494:	4b10      	ldr	r3, [pc, #64]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800449a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044a2:	490d      	ldr	r1, [pc, #52]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80044a4:	4313      	orrs	r3, r2
 80044a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d00b      	beq.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80044b6:	4b08      	ldr	r3, [pc, #32]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80044b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044bc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044c6:	4904      	ldr	r1, [pc, #16]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80044c8:	4313      	orrs	r3, r2
 80044ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80044ce:	7cbb      	ldrb	r3, [r7, #18]
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3718      	adds	r7, #24
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	40021000 	.word	0x40021000

080044dc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b084      	sub	sp, #16
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80044e6:	2300      	movs	r3, #0
 80044e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80044ea:	4b75      	ldr	r3, [pc, #468]	; (80046c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	f003 0303 	and.w	r3, r3, #3
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d018      	beq.n	8004528 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80044f6:	4b72      	ldr	r3, [pc, #456]	; (80046c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	f003 0203 	and.w	r2, r3, #3
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	429a      	cmp	r2, r3
 8004504:	d10d      	bne.n	8004522 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
       ||
 800450a:	2b00      	cmp	r3, #0
 800450c:	d009      	beq.n	8004522 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800450e:	4b6c      	ldr	r3, [pc, #432]	; (80046c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	091b      	lsrs	r3, r3, #4
 8004514:	f003 0307 	and.w	r3, r3, #7
 8004518:	1c5a      	adds	r2, r3, #1
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	685b      	ldr	r3, [r3, #4]
       ||
 800451e:	429a      	cmp	r2, r3
 8004520:	d047      	beq.n	80045b2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	73fb      	strb	r3, [r7, #15]
 8004526:	e044      	b.n	80045b2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	2b03      	cmp	r3, #3
 800452e:	d018      	beq.n	8004562 <RCCEx_PLLSAI1_Config+0x86>
 8004530:	2b03      	cmp	r3, #3
 8004532:	d825      	bhi.n	8004580 <RCCEx_PLLSAI1_Config+0xa4>
 8004534:	2b01      	cmp	r3, #1
 8004536:	d002      	beq.n	800453e <RCCEx_PLLSAI1_Config+0x62>
 8004538:	2b02      	cmp	r3, #2
 800453a:	d009      	beq.n	8004550 <RCCEx_PLLSAI1_Config+0x74>
 800453c:	e020      	b.n	8004580 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800453e:	4b60      	ldr	r3, [pc, #384]	; (80046c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 0302 	and.w	r3, r3, #2
 8004546:	2b00      	cmp	r3, #0
 8004548:	d11d      	bne.n	8004586 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800454e:	e01a      	b.n	8004586 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004550:	4b5b      	ldr	r3, [pc, #364]	; (80046c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004558:	2b00      	cmp	r3, #0
 800455a:	d116      	bne.n	800458a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004560:	e013      	b.n	800458a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004562:	4b57      	ldr	r3, [pc, #348]	; (80046c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800456a:	2b00      	cmp	r3, #0
 800456c:	d10f      	bne.n	800458e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800456e:	4b54      	ldr	r3, [pc, #336]	; (80046c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d109      	bne.n	800458e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800457e:	e006      	b.n	800458e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	73fb      	strb	r3, [r7, #15]
      break;
 8004584:	e004      	b.n	8004590 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004586:	bf00      	nop
 8004588:	e002      	b.n	8004590 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800458a:	bf00      	nop
 800458c:	e000      	b.n	8004590 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800458e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004590:	7bfb      	ldrb	r3, [r7, #15]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d10d      	bne.n	80045b2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004596:	4b4a      	ldr	r3, [pc, #296]	; (80046c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6819      	ldr	r1, [r3, #0]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	3b01      	subs	r3, #1
 80045a8:	011b      	lsls	r3, r3, #4
 80045aa:	430b      	orrs	r3, r1
 80045ac:	4944      	ldr	r1, [pc, #272]	; (80046c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045ae:	4313      	orrs	r3, r2
 80045b0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80045b2:	7bfb      	ldrb	r3, [r7, #15]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d17d      	bne.n	80046b4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80045b8:	4b41      	ldr	r3, [pc, #260]	; (80046c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a40      	ldr	r2, [pc, #256]	; (80046c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045be:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80045c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045c4:	f7fd fd7c 	bl	80020c0 <HAL_GetTick>
 80045c8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80045ca:	e009      	b.n	80045e0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80045cc:	f7fd fd78 	bl	80020c0 <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	d902      	bls.n	80045e0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	73fb      	strb	r3, [r7, #15]
        break;
 80045de:	e005      	b.n	80045ec <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80045e0:	4b37      	ldr	r3, [pc, #220]	; (80046c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d1ef      	bne.n	80045cc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80045ec:	7bfb      	ldrb	r3, [r7, #15]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d160      	bne.n	80046b4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d111      	bne.n	800461c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045f8:	4b31      	ldr	r3, [pc, #196]	; (80046c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045fa:	691b      	ldr	r3, [r3, #16]
 80045fc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004600:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	6892      	ldr	r2, [r2, #8]
 8004608:	0211      	lsls	r1, r2, #8
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	68d2      	ldr	r2, [r2, #12]
 800460e:	0912      	lsrs	r2, r2, #4
 8004610:	0452      	lsls	r2, r2, #17
 8004612:	430a      	orrs	r2, r1
 8004614:	492a      	ldr	r1, [pc, #168]	; (80046c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004616:	4313      	orrs	r3, r2
 8004618:	610b      	str	r3, [r1, #16]
 800461a:	e027      	b.n	800466c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	2b01      	cmp	r3, #1
 8004620:	d112      	bne.n	8004648 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004622:	4b27      	ldr	r3, [pc, #156]	; (80046c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004624:	691b      	ldr	r3, [r3, #16]
 8004626:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800462a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	6892      	ldr	r2, [r2, #8]
 8004632:	0211      	lsls	r1, r2, #8
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	6912      	ldr	r2, [r2, #16]
 8004638:	0852      	lsrs	r2, r2, #1
 800463a:	3a01      	subs	r2, #1
 800463c:	0552      	lsls	r2, r2, #21
 800463e:	430a      	orrs	r2, r1
 8004640:	491f      	ldr	r1, [pc, #124]	; (80046c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004642:	4313      	orrs	r3, r2
 8004644:	610b      	str	r3, [r1, #16]
 8004646:	e011      	b.n	800466c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004648:	4b1d      	ldr	r3, [pc, #116]	; (80046c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800464a:	691b      	ldr	r3, [r3, #16]
 800464c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004650:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	6892      	ldr	r2, [r2, #8]
 8004658:	0211      	lsls	r1, r2, #8
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	6952      	ldr	r2, [r2, #20]
 800465e:	0852      	lsrs	r2, r2, #1
 8004660:	3a01      	subs	r2, #1
 8004662:	0652      	lsls	r2, r2, #25
 8004664:	430a      	orrs	r2, r1
 8004666:	4916      	ldr	r1, [pc, #88]	; (80046c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004668:	4313      	orrs	r3, r2
 800466a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800466c:	4b14      	ldr	r3, [pc, #80]	; (80046c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a13      	ldr	r2, [pc, #76]	; (80046c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004672:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004676:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004678:	f7fd fd22 	bl	80020c0 <HAL_GetTick>
 800467c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800467e:	e009      	b.n	8004694 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004680:	f7fd fd1e 	bl	80020c0 <HAL_GetTick>
 8004684:	4602      	mov	r2, r0
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	2b02      	cmp	r3, #2
 800468c:	d902      	bls.n	8004694 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	73fb      	strb	r3, [r7, #15]
          break;
 8004692:	e005      	b.n	80046a0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004694:	4b0a      	ldr	r3, [pc, #40]	; (80046c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800469c:	2b00      	cmp	r3, #0
 800469e:	d0ef      	beq.n	8004680 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80046a0:	7bfb      	ldrb	r3, [r7, #15]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d106      	bne.n	80046b4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80046a6:	4b06      	ldr	r3, [pc, #24]	; (80046c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046a8:	691a      	ldr	r2, [r3, #16]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	699b      	ldr	r3, [r3, #24]
 80046ae:	4904      	ldr	r1, [pc, #16]	; (80046c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046b0:	4313      	orrs	r3, r2
 80046b2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80046b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3710      	adds	r7, #16
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop
 80046c0:	40021000 	.word	0x40021000

080046c4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b084      	sub	sp, #16
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80046ce:	2300      	movs	r3, #0
 80046d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80046d2:	4b6a      	ldr	r3, [pc, #424]	; (800487c <RCCEx_PLLSAI2_Config+0x1b8>)
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	f003 0303 	and.w	r3, r3, #3
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d018      	beq.n	8004710 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80046de:	4b67      	ldr	r3, [pc, #412]	; (800487c <RCCEx_PLLSAI2_Config+0x1b8>)
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	f003 0203 	and.w	r2, r3, #3
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d10d      	bne.n	800470a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
       ||
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d009      	beq.n	800470a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80046f6:	4b61      	ldr	r3, [pc, #388]	; (800487c <RCCEx_PLLSAI2_Config+0x1b8>)
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	091b      	lsrs	r3, r3, #4
 80046fc:	f003 0307 	and.w	r3, r3, #7
 8004700:	1c5a      	adds	r2, r3, #1
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	685b      	ldr	r3, [r3, #4]
       ||
 8004706:	429a      	cmp	r2, r3
 8004708:	d047      	beq.n	800479a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	73fb      	strb	r3, [r7, #15]
 800470e:	e044      	b.n	800479a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2b03      	cmp	r3, #3
 8004716:	d018      	beq.n	800474a <RCCEx_PLLSAI2_Config+0x86>
 8004718:	2b03      	cmp	r3, #3
 800471a:	d825      	bhi.n	8004768 <RCCEx_PLLSAI2_Config+0xa4>
 800471c:	2b01      	cmp	r3, #1
 800471e:	d002      	beq.n	8004726 <RCCEx_PLLSAI2_Config+0x62>
 8004720:	2b02      	cmp	r3, #2
 8004722:	d009      	beq.n	8004738 <RCCEx_PLLSAI2_Config+0x74>
 8004724:	e020      	b.n	8004768 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004726:	4b55      	ldr	r3, [pc, #340]	; (800487c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0302 	and.w	r3, r3, #2
 800472e:	2b00      	cmp	r3, #0
 8004730:	d11d      	bne.n	800476e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004736:	e01a      	b.n	800476e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004738:	4b50      	ldr	r3, [pc, #320]	; (800487c <RCCEx_PLLSAI2_Config+0x1b8>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004740:	2b00      	cmp	r3, #0
 8004742:	d116      	bne.n	8004772 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004748:	e013      	b.n	8004772 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800474a:	4b4c      	ldr	r3, [pc, #304]	; (800487c <RCCEx_PLLSAI2_Config+0x1b8>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d10f      	bne.n	8004776 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004756:	4b49      	ldr	r3, [pc, #292]	; (800487c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800475e:	2b00      	cmp	r3, #0
 8004760:	d109      	bne.n	8004776 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004766:	e006      	b.n	8004776 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	73fb      	strb	r3, [r7, #15]
      break;
 800476c:	e004      	b.n	8004778 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800476e:	bf00      	nop
 8004770:	e002      	b.n	8004778 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004772:	bf00      	nop
 8004774:	e000      	b.n	8004778 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004776:	bf00      	nop
    }

    if(status == HAL_OK)
 8004778:	7bfb      	ldrb	r3, [r7, #15]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d10d      	bne.n	800479a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800477e:	4b3f      	ldr	r3, [pc, #252]	; (800487c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6819      	ldr	r1, [r3, #0]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	3b01      	subs	r3, #1
 8004790:	011b      	lsls	r3, r3, #4
 8004792:	430b      	orrs	r3, r1
 8004794:	4939      	ldr	r1, [pc, #228]	; (800487c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004796:	4313      	orrs	r3, r2
 8004798:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800479a:	7bfb      	ldrb	r3, [r7, #15]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d167      	bne.n	8004870 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80047a0:	4b36      	ldr	r3, [pc, #216]	; (800487c <RCCEx_PLLSAI2_Config+0x1b8>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a35      	ldr	r2, [pc, #212]	; (800487c <RCCEx_PLLSAI2_Config+0x1b8>)
 80047a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047ac:	f7fd fc88 	bl	80020c0 <HAL_GetTick>
 80047b0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80047b2:	e009      	b.n	80047c8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80047b4:	f7fd fc84 	bl	80020c0 <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	2b02      	cmp	r3, #2
 80047c0:	d902      	bls.n	80047c8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	73fb      	strb	r3, [r7, #15]
        break;
 80047c6:	e005      	b.n	80047d4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80047c8:	4b2c      	ldr	r3, [pc, #176]	; (800487c <RCCEx_PLLSAI2_Config+0x1b8>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d1ef      	bne.n	80047b4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80047d4:	7bfb      	ldrb	r3, [r7, #15]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d14a      	bne.n	8004870 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d111      	bne.n	8004804 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80047e0:	4b26      	ldr	r3, [pc, #152]	; (800487c <RCCEx_PLLSAI2_Config+0x1b8>)
 80047e2:	695b      	ldr	r3, [r3, #20]
 80047e4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80047e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047ec:	687a      	ldr	r2, [r7, #4]
 80047ee:	6892      	ldr	r2, [r2, #8]
 80047f0:	0211      	lsls	r1, r2, #8
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	68d2      	ldr	r2, [r2, #12]
 80047f6:	0912      	lsrs	r2, r2, #4
 80047f8:	0452      	lsls	r2, r2, #17
 80047fa:	430a      	orrs	r2, r1
 80047fc:	491f      	ldr	r1, [pc, #124]	; (800487c <RCCEx_PLLSAI2_Config+0x1b8>)
 80047fe:	4313      	orrs	r3, r2
 8004800:	614b      	str	r3, [r1, #20]
 8004802:	e011      	b.n	8004828 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004804:	4b1d      	ldr	r3, [pc, #116]	; (800487c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004806:	695b      	ldr	r3, [r3, #20]
 8004808:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800480c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	6892      	ldr	r2, [r2, #8]
 8004814:	0211      	lsls	r1, r2, #8
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	6912      	ldr	r2, [r2, #16]
 800481a:	0852      	lsrs	r2, r2, #1
 800481c:	3a01      	subs	r2, #1
 800481e:	0652      	lsls	r2, r2, #25
 8004820:	430a      	orrs	r2, r1
 8004822:	4916      	ldr	r1, [pc, #88]	; (800487c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004824:	4313      	orrs	r3, r2
 8004826:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004828:	4b14      	ldr	r3, [pc, #80]	; (800487c <RCCEx_PLLSAI2_Config+0x1b8>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a13      	ldr	r2, [pc, #76]	; (800487c <RCCEx_PLLSAI2_Config+0x1b8>)
 800482e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004832:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004834:	f7fd fc44 	bl	80020c0 <HAL_GetTick>
 8004838:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800483a:	e009      	b.n	8004850 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800483c:	f7fd fc40 	bl	80020c0 <HAL_GetTick>
 8004840:	4602      	mov	r2, r0
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	2b02      	cmp	r3, #2
 8004848:	d902      	bls.n	8004850 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800484a:	2303      	movs	r3, #3
 800484c:	73fb      	strb	r3, [r7, #15]
          break;
 800484e:	e005      	b.n	800485c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004850:	4b0a      	ldr	r3, [pc, #40]	; (800487c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004858:	2b00      	cmp	r3, #0
 800485a:	d0ef      	beq.n	800483c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800485c:	7bfb      	ldrb	r3, [r7, #15]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d106      	bne.n	8004870 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004862:	4b06      	ldr	r3, [pc, #24]	; (800487c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004864:	695a      	ldr	r2, [r3, #20]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	695b      	ldr	r3, [r3, #20]
 800486a:	4904      	ldr	r1, [pc, #16]	; (800487c <RCCEx_PLLSAI2_Config+0x1b8>)
 800486c:	4313      	orrs	r3, r2
 800486e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004870:	7bfb      	ldrb	r3, [r7, #15]
}
 8004872:	4618      	mov	r0, r3
 8004874:	3710      	adds	r7, #16
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
 800487a:	bf00      	nop
 800487c:	40021000 	.word	0x40021000

08004880 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b084      	sub	sp, #16
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d101      	bne.n	8004892 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e095      	b.n	80049be <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004896:	2b00      	cmp	r3, #0
 8004898:	d108      	bne.n	80048ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048a2:	d009      	beq.n	80048b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	61da      	str	r2, [r3, #28]
 80048aa:	e005      	b.n	80048b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d106      	bne.n	80048d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f7fd f932 	bl	8001b3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2202      	movs	r2, #2
 80048dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048ee:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80048f8:	d902      	bls.n	8004900 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80048fa:	2300      	movs	r3, #0
 80048fc:	60fb      	str	r3, [r7, #12]
 80048fe:	e002      	b.n	8004906 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004900:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004904:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800490e:	d007      	beq.n	8004920 <HAL_SPI_Init+0xa0>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004918:	d002      	beq.n	8004920 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004930:	431a      	orrs	r2, r3
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	691b      	ldr	r3, [r3, #16]
 8004936:	f003 0302 	and.w	r3, r3, #2
 800493a:	431a      	orrs	r2, r3
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	695b      	ldr	r3, [r3, #20]
 8004940:	f003 0301 	and.w	r3, r3, #1
 8004944:	431a      	orrs	r2, r3
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	699b      	ldr	r3, [r3, #24]
 800494a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800494e:	431a      	orrs	r2, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	69db      	ldr	r3, [r3, #28]
 8004954:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004958:	431a      	orrs	r2, r3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a1b      	ldr	r3, [r3, #32]
 800495e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004962:	ea42 0103 	orr.w	r1, r2, r3
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800496a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	430a      	orrs	r2, r1
 8004974:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	699b      	ldr	r3, [r3, #24]
 800497a:	0c1b      	lsrs	r3, r3, #16
 800497c:	f003 0204 	and.w	r2, r3, #4
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004984:	f003 0310 	and.w	r3, r3, #16
 8004988:	431a      	orrs	r2, r3
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800498e:	f003 0308 	and.w	r3, r3, #8
 8004992:	431a      	orrs	r2, r3
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800499c:	ea42 0103 	orr.w	r1, r2, r3
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	430a      	orrs	r2, r1
 80049ac:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80049bc:	2300      	movs	r3, #0
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3710      	adds	r7, #16
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}

080049c6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049c6:	b580      	push	{r7, lr}
 80049c8:	b088      	sub	sp, #32
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	60f8      	str	r0, [r7, #12]
 80049ce:	60b9      	str	r1, [r7, #8]
 80049d0:	603b      	str	r3, [r7, #0]
 80049d2:	4613      	mov	r3, r2
 80049d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80049d6:	2300      	movs	r3, #0
 80049d8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d101      	bne.n	80049e8 <HAL_SPI_Transmit+0x22>
 80049e4:	2302      	movs	r3, #2
 80049e6:	e158      	b.n	8004c9a <HAL_SPI_Transmit+0x2d4>
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80049f0:	f7fd fb66 	bl	80020c0 <HAL_GetTick>
 80049f4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80049f6:	88fb      	ldrh	r3, [r7, #6]
 80049f8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d002      	beq.n	8004a0c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004a06:	2302      	movs	r3, #2
 8004a08:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a0a:	e13d      	b.n	8004c88 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d002      	beq.n	8004a18 <HAL_SPI_Transmit+0x52>
 8004a12:	88fb      	ldrh	r3, [r7, #6]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d102      	bne.n	8004a1e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a1c:	e134      	b.n	8004c88 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2203      	movs	r2, #3
 8004a22:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	68ba      	ldr	r2, [r7, #8]
 8004a30:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	88fa      	ldrh	r2, [r7, #6]
 8004a36:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	88fa      	ldrh	r2, [r7, #6]
 8004a3c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2200      	movs	r2, #0
 8004a42:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2200      	movs	r2, #0
 8004a58:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a68:	d10f      	bne.n	8004a8a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a78:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a88:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a94:	2b40      	cmp	r3, #64	; 0x40
 8004a96:	d007      	beq.n	8004aa8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004aa6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ab0:	d94b      	bls.n	8004b4a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d002      	beq.n	8004ac0 <HAL_SPI_Transmit+0xfa>
 8004aba:	8afb      	ldrh	r3, [r7, #22]
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d13e      	bne.n	8004b3e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac4:	881a      	ldrh	r2, [r3, #0]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad0:	1c9a      	adds	r2, r3, #2
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	3b01      	subs	r3, #1
 8004ade:	b29a      	uxth	r2, r3
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004ae4:	e02b      	b.n	8004b3e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	f003 0302 	and.w	r3, r3, #2
 8004af0:	2b02      	cmp	r3, #2
 8004af2:	d112      	bne.n	8004b1a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af8:	881a      	ldrh	r2, [r3, #0]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b04:	1c9a      	adds	r2, r3, #2
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b0e:	b29b      	uxth	r3, r3
 8004b10:	3b01      	subs	r3, #1
 8004b12:	b29a      	uxth	r2, r3
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b18:	e011      	b.n	8004b3e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b1a:	f7fd fad1 	bl	80020c0 <HAL_GetTick>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	1ad3      	subs	r3, r2, r3
 8004b24:	683a      	ldr	r2, [r7, #0]
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d803      	bhi.n	8004b32 <HAL_SPI_Transmit+0x16c>
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b30:	d102      	bne.n	8004b38 <HAL_SPI_Transmit+0x172>
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d102      	bne.n	8004b3e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004b38:	2303      	movs	r3, #3
 8004b3a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004b3c:	e0a4      	b.n	8004c88 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d1ce      	bne.n	8004ae6 <HAL_SPI_Transmit+0x120>
 8004b48:	e07c      	b.n	8004c44 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d002      	beq.n	8004b58 <HAL_SPI_Transmit+0x192>
 8004b52:	8afb      	ldrh	r3, [r7, #22]
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d170      	bne.n	8004c3a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d912      	bls.n	8004b88 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b66:	881a      	ldrh	r2, [r3, #0]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b72:	1c9a      	adds	r2, r3, #2
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	3b02      	subs	r3, #2
 8004b80:	b29a      	uxth	r2, r3
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b86:	e058      	b.n	8004c3a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	330c      	adds	r3, #12
 8004b92:	7812      	ldrb	r2, [r2, #0]
 8004b94:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b9a:	1c5a      	adds	r2, r3, #1
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	3b01      	subs	r3, #1
 8004ba8:	b29a      	uxth	r2, r3
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004bae:	e044      	b.n	8004c3a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	f003 0302 	and.w	r3, r3, #2
 8004bba:	2b02      	cmp	r3, #2
 8004bbc:	d12b      	bne.n	8004c16 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d912      	bls.n	8004bee <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bcc:	881a      	ldrh	r2, [r3, #0]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd8:	1c9a      	adds	r2, r3, #2
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	3b02      	subs	r3, #2
 8004be6:	b29a      	uxth	r2, r3
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004bec:	e025      	b.n	8004c3a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	330c      	adds	r3, #12
 8004bf8:	7812      	ldrb	r2, [r2, #0]
 8004bfa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c00:	1c5a      	adds	r2, r3, #1
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	3b01      	subs	r3, #1
 8004c0e:	b29a      	uxth	r2, r3
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c14:	e011      	b.n	8004c3a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c16:	f7fd fa53 	bl	80020c0 <HAL_GetTick>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	69bb      	ldr	r3, [r7, #24]
 8004c1e:	1ad3      	subs	r3, r2, r3
 8004c20:	683a      	ldr	r2, [r7, #0]
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d803      	bhi.n	8004c2e <HAL_SPI_Transmit+0x268>
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c2c:	d102      	bne.n	8004c34 <HAL_SPI_Transmit+0x26e>
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d102      	bne.n	8004c3a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004c34:	2303      	movs	r3, #3
 8004c36:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004c38:	e026      	b.n	8004c88 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d1b5      	bne.n	8004bb0 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c44:	69ba      	ldr	r2, [r7, #24]
 8004c46:	6839      	ldr	r1, [r7, #0]
 8004c48:	68f8      	ldr	r0, [r7, #12]
 8004c4a:	f000 f949 	bl	8004ee0 <SPI_EndRxTxTransaction>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d002      	beq.n	8004c5a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2220      	movs	r2, #32
 8004c58:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d10a      	bne.n	8004c78 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c62:	2300      	movs	r3, #0
 8004c64:	613b      	str	r3, [r7, #16]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	613b      	str	r3, [r7, #16]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	613b      	str	r3, [r7, #16]
 8004c76:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d002      	beq.n	8004c86 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	77fb      	strb	r3, [r7, #31]
 8004c84:	e000      	b.n	8004c88 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004c86:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004c98:	7ffb      	ldrb	r3, [r7, #31]
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3720      	adds	r7, #32
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
	...

08004ca4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b088      	sub	sp, #32
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	60f8      	str	r0, [r7, #12]
 8004cac:	60b9      	str	r1, [r7, #8]
 8004cae:	603b      	str	r3, [r7, #0]
 8004cb0:	4613      	mov	r3, r2
 8004cb2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004cb4:	f7fd fa04 	bl	80020c0 <HAL_GetTick>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cbc:	1a9b      	subs	r3, r3, r2
 8004cbe:	683a      	ldr	r2, [r7, #0]
 8004cc0:	4413      	add	r3, r2
 8004cc2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004cc4:	f7fd f9fc 	bl	80020c0 <HAL_GetTick>
 8004cc8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004cca:	4b39      	ldr	r3, [pc, #228]	; (8004db0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	015b      	lsls	r3, r3, #5
 8004cd0:	0d1b      	lsrs	r3, r3, #20
 8004cd2:	69fa      	ldr	r2, [r7, #28]
 8004cd4:	fb02 f303 	mul.w	r3, r2, r3
 8004cd8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004cda:	e054      	b.n	8004d86 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ce2:	d050      	beq.n	8004d86 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004ce4:	f7fd f9ec 	bl	80020c0 <HAL_GetTick>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	69fa      	ldr	r2, [r7, #28]
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d902      	bls.n	8004cfa <SPI_WaitFlagStateUntilTimeout+0x56>
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d13d      	bne.n	8004d76 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	685a      	ldr	r2, [r3, #4]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004d08:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d12:	d111      	bne.n	8004d38 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d1c:	d004      	beq.n	8004d28 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d26:	d107      	bne.n	8004d38 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d36:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d40:	d10f      	bne.n	8004d62 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d50:	601a      	str	r2, [r3, #0]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d60:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2201      	movs	r2, #1
 8004d66:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004d72:	2303      	movs	r3, #3
 8004d74:	e017      	b.n	8004da6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d101      	bne.n	8004d80 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	3b01      	subs	r3, #1
 8004d84:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	689a      	ldr	r2, [r3, #8]
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	4013      	ands	r3, r2
 8004d90:	68ba      	ldr	r2, [r7, #8]
 8004d92:	429a      	cmp	r2, r3
 8004d94:	bf0c      	ite	eq
 8004d96:	2301      	moveq	r3, #1
 8004d98:	2300      	movne	r3, #0
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	79fb      	ldrb	r3, [r7, #7]
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d19b      	bne.n	8004cdc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004da4:	2300      	movs	r3, #0
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3720      	adds	r7, #32
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
 8004dae:	bf00      	nop
 8004db0:	20000000 	.word	0x20000000

08004db4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b08a      	sub	sp, #40	; 0x28
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	60f8      	str	r0, [r7, #12]
 8004dbc:	60b9      	str	r1, [r7, #8]
 8004dbe:	607a      	str	r2, [r7, #4]
 8004dc0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004dc6:	f7fd f97b 	bl	80020c0 <HAL_GetTick>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dce:	1a9b      	subs	r3, r3, r2
 8004dd0:	683a      	ldr	r2, [r7, #0]
 8004dd2:	4413      	add	r3, r2
 8004dd4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004dd6:	f7fd f973 	bl	80020c0 <HAL_GetTick>
 8004dda:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	330c      	adds	r3, #12
 8004de2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004de4:	4b3d      	ldr	r3, [pc, #244]	; (8004edc <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	4613      	mov	r3, r2
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	4413      	add	r3, r2
 8004dee:	00da      	lsls	r2, r3, #3
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	0d1b      	lsrs	r3, r3, #20
 8004df4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004df6:	fb02 f303 	mul.w	r3, r2, r3
 8004dfa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004dfc:	e060      	b.n	8004ec0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004e04:	d107      	bne.n	8004e16 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d104      	bne.n	8004e16 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	781b      	ldrb	r3, [r3, #0]
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004e14:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e1c:	d050      	beq.n	8004ec0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004e1e:	f7fd f94f 	bl	80020c0 <HAL_GetTick>
 8004e22:	4602      	mov	r2, r0
 8004e24:	6a3b      	ldr	r3, [r7, #32]
 8004e26:	1ad3      	subs	r3, r2, r3
 8004e28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d902      	bls.n	8004e34 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d13d      	bne.n	8004eb0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	685a      	ldr	r2, [r3, #4]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004e42:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e4c:	d111      	bne.n	8004e72 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e56:	d004      	beq.n	8004e62 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e60:	d107      	bne.n	8004e72 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e70:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e7a:	d10f      	bne.n	8004e9c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e8a:	601a      	str	r2, [r3, #0]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e9a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004eac:	2303      	movs	r3, #3
 8004eae:	e010      	b.n	8004ed2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004eb0:	69bb      	ldr	r3, [r7, #24]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d101      	bne.n	8004eba <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004eba:	69bb      	ldr	r3, [r7, #24]
 8004ebc:	3b01      	subs	r3, #1
 8004ebe:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	689a      	ldr	r2, [r3, #8]
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	4013      	ands	r3, r2
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d196      	bne.n	8004dfe <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004ed0:	2300      	movs	r3, #0
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3728      	adds	r7, #40	; 0x28
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}
 8004eda:	bf00      	nop
 8004edc:	20000000 	.word	0x20000000

08004ee0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b086      	sub	sp, #24
 8004ee4:	af02      	add	r7, sp, #8
 8004ee6:	60f8      	str	r0, [r7, #12]
 8004ee8:	60b9      	str	r1, [r7, #8]
 8004eea:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	9300      	str	r3, [sp, #0]
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004ef8:	68f8      	ldr	r0, [r7, #12]
 8004efa:	f7ff ff5b 	bl	8004db4 <SPI_WaitFifoStateUntilTimeout>
 8004efe:	4603      	mov	r3, r0
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d007      	beq.n	8004f14 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f08:	f043 0220 	orr.w	r2, r3, #32
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004f10:	2303      	movs	r3, #3
 8004f12:	e027      	b.n	8004f64 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	9300      	str	r3, [sp, #0]
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	2180      	movs	r1, #128	; 0x80
 8004f1e:	68f8      	ldr	r0, [r7, #12]
 8004f20:	f7ff fec0 	bl	8004ca4 <SPI_WaitFlagStateUntilTimeout>
 8004f24:	4603      	mov	r3, r0
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d007      	beq.n	8004f3a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f2e:	f043 0220 	orr.w	r2, r3, #32
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	e014      	b.n	8004f64 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	9300      	str	r3, [sp, #0]
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	2200      	movs	r2, #0
 8004f42:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004f46:	68f8      	ldr	r0, [r7, #12]
 8004f48:	f7ff ff34 	bl	8004db4 <SPI_WaitFifoStateUntilTimeout>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d007      	beq.n	8004f62 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f56:	f043 0220 	orr.w	r2, r3, #32
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	e000      	b.n	8004f64 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004f62:	2300      	movs	r3, #0
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3710      	adds	r7, #16
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}

08004f6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b082      	sub	sp, #8
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d101      	bne.n	8004f7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e040      	b.n	8005000 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d106      	bne.n	8004f94 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f7fc ff8c 	bl	8001eac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2224      	movs	r2, #36	; 0x24
 8004f98:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f022 0201 	bic.w	r2, r2, #1
 8004fa8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 f8c0 	bl	8005130 <UART_SetConfig>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	d101      	bne.n	8004fba <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e022      	b.n	8005000 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d002      	beq.n	8004fc8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f000 fb6c 	bl	80056a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	685a      	ldr	r2, [r3, #4]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004fd6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	689a      	ldr	r2, [r3, #8]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004fe6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f042 0201 	orr.w	r2, r2, #1
 8004ff6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f000 fbf3 	bl	80057e4 <UART_CheckIdleState>
 8004ffe:	4603      	mov	r3, r0
}
 8005000:	4618      	mov	r0, r3
 8005002:	3708      	adds	r7, #8
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}

08005008 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b08a      	sub	sp, #40	; 0x28
 800500c:	af02      	add	r7, sp, #8
 800500e:	60f8      	str	r0, [r7, #12]
 8005010:	60b9      	str	r1, [r7, #8]
 8005012:	603b      	str	r3, [r7, #0]
 8005014:	4613      	mov	r3, r2
 8005016:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800501c:	2b20      	cmp	r3, #32
 800501e:	f040 8082 	bne.w	8005126 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d002      	beq.n	800502e <HAL_UART_Transmit+0x26>
 8005028:	88fb      	ldrh	r3, [r7, #6]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d101      	bne.n	8005032 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	e07a      	b.n	8005128 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005038:	2b01      	cmp	r3, #1
 800503a:	d101      	bne.n	8005040 <HAL_UART_Transmit+0x38>
 800503c:	2302      	movs	r3, #2
 800503e:	e073      	b.n	8005128 <HAL_UART_Transmit+0x120>
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2200      	movs	r2, #0
 800504c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2221      	movs	r2, #33	; 0x21
 8005054:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005056:	f7fd f833 	bl	80020c0 <HAL_GetTick>
 800505a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	88fa      	ldrh	r2, [r7, #6]
 8005060:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	88fa      	ldrh	r2, [r7, #6]
 8005068:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005074:	d108      	bne.n	8005088 <HAL_UART_Transmit+0x80>
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	691b      	ldr	r3, [r3, #16]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d104      	bne.n	8005088 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800507e:	2300      	movs	r3, #0
 8005080:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	61bb      	str	r3, [r7, #24]
 8005086:	e003      	b.n	8005090 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800508c:	2300      	movs	r3, #0
 800508e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2200      	movs	r2, #0
 8005094:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005098:	e02d      	b.n	80050f6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	9300      	str	r3, [sp, #0]
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	2200      	movs	r2, #0
 80050a2:	2180      	movs	r1, #128	; 0x80
 80050a4:	68f8      	ldr	r0, [r7, #12]
 80050a6:	f000 fbe6 	bl	8005876 <UART_WaitOnFlagUntilTimeout>
 80050aa:	4603      	mov	r3, r0
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d001      	beq.n	80050b4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80050b0:	2303      	movs	r3, #3
 80050b2:	e039      	b.n	8005128 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d10b      	bne.n	80050d2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80050ba:	69bb      	ldr	r3, [r7, #24]
 80050bc:	881a      	ldrh	r2, [r3, #0]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050c6:	b292      	uxth	r2, r2
 80050c8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80050ca:	69bb      	ldr	r3, [r7, #24]
 80050cc:	3302      	adds	r3, #2
 80050ce:	61bb      	str	r3, [r7, #24]
 80050d0:	e008      	b.n	80050e4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	781a      	ldrb	r2, [r3, #0]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	b292      	uxth	r2, r2
 80050dc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	3301      	adds	r3, #1
 80050e2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	3b01      	subs	r3, #1
 80050ee:	b29a      	uxth	r2, r3
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d1cb      	bne.n	800509a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	9300      	str	r3, [sp, #0]
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	2200      	movs	r2, #0
 800510a:	2140      	movs	r1, #64	; 0x40
 800510c:	68f8      	ldr	r0, [r7, #12]
 800510e:	f000 fbb2 	bl	8005876 <UART_WaitOnFlagUntilTimeout>
 8005112:	4603      	mov	r3, r0
 8005114:	2b00      	cmp	r3, #0
 8005116:	d001      	beq.n	800511c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005118:	2303      	movs	r3, #3
 800511a:	e005      	b.n	8005128 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2220      	movs	r2, #32
 8005120:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005122:	2300      	movs	r3, #0
 8005124:	e000      	b.n	8005128 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005126:	2302      	movs	r3, #2
  }
}
 8005128:	4618      	mov	r0, r3
 800512a:	3720      	adds	r7, #32
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}

08005130 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005130:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005134:	b08a      	sub	sp, #40	; 0x28
 8005136:	af00      	add	r7, sp, #0
 8005138:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800513a:	2300      	movs	r3, #0
 800513c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	689a      	ldr	r2, [r3, #8]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	691b      	ldr	r3, [r3, #16]
 8005148:	431a      	orrs	r2, r3
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	695b      	ldr	r3, [r3, #20]
 800514e:	431a      	orrs	r2, r3
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	69db      	ldr	r3, [r3, #28]
 8005154:	4313      	orrs	r3, r2
 8005156:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	4ba4      	ldr	r3, [pc, #656]	; (80053f0 <UART_SetConfig+0x2c0>)
 8005160:	4013      	ands	r3, r2
 8005162:	68fa      	ldr	r2, [r7, #12]
 8005164:	6812      	ldr	r2, [r2, #0]
 8005166:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005168:	430b      	orrs	r3, r1
 800516a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	68da      	ldr	r2, [r3, #12]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	430a      	orrs	r2, r1
 8005180:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	699b      	ldr	r3, [r3, #24]
 8005186:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a99      	ldr	r2, [pc, #612]	; (80053f4 <UART_SetConfig+0x2c4>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d004      	beq.n	800519c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	6a1b      	ldr	r3, [r3, #32]
 8005196:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005198:	4313      	orrs	r3, r2
 800519a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051ac:	430a      	orrs	r2, r1
 80051ae:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a90      	ldr	r2, [pc, #576]	; (80053f8 <UART_SetConfig+0x2c8>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d126      	bne.n	8005208 <UART_SetConfig+0xd8>
 80051ba:	4b90      	ldr	r3, [pc, #576]	; (80053fc <UART_SetConfig+0x2cc>)
 80051bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051c0:	f003 0303 	and.w	r3, r3, #3
 80051c4:	2b03      	cmp	r3, #3
 80051c6:	d81b      	bhi.n	8005200 <UART_SetConfig+0xd0>
 80051c8:	a201      	add	r2, pc, #4	; (adr r2, 80051d0 <UART_SetConfig+0xa0>)
 80051ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ce:	bf00      	nop
 80051d0:	080051e1 	.word	0x080051e1
 80051d4:	080051f1 	.word	0x080051f1
 80051d8:	080051e9 	.word	0x080051e9
 80051dc:	080051f9 	.word	0x080051f9
 80051e0:	2301      	movs	r3, #1
 80051e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051e6:	e116      	b.n	8005416 <UART_SetConfig+0x2e6>
 80051e8:	2302      	movs	r3, #2
 80051ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051ee:	e112      	b.n	8005416 <UART_SetConfig+0x2e6>
 80051f0:	2304      	movs	r3, #4
 80051f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051f6:	e10e      	b.n	8005416 <UART_SetConfig+0x2e6>
 80051f8:	2308      	movs	r3, #8
 80051fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051fe:	e10a      	b.n	8005416 <UART_SetConfig+0x2e6>
 8005200:	2310      	movs	r3, #16
 8005202:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005206:	e106      	b.n	8005416 <UART_SetConfig+0x2e6>
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a7c      	ldr	r2, [pc, #496]	; (8005400 <UART_SetConfig+0x2d0>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d138      	bne.n	8005284 <UART_SetConfig+0x154>
 8005212:	4b7a      	ldr	r3, [pc, #488]	; (80053fc <UART_SetConfig+0x2cc>)
 8005214:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005218:	f003 030c 	and.w	r3, r3, #12
 800521c:	2b0c      	cmp	r3, #12
 800521e:	d82d      	bhi.n	800527c <UART_SetConfig+0x14c>
 8005220:	a201      	add	r2, pc, #4	; (adr r2, 8005228 <UART_SetConfig+0xf8>)
 8005222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005226:	bf00      	nop
 8005228:	0800525d 	.word	0x0800525d
 800522c:	0800527d 	.word	0x0800527d
 8005230:	0800527d 	.word	0x0800527d
 8005234:	0800527d 	.word	0x0800527d
 8005238:	0800526d 	.word	0x0800526d
 800523c:	0800527d 	.word	0x0800527d
 8005240:	0800527d 	.word	0x0800527d
 8005244:	0800527d 	.word	0x0800527d
 8005248:	08005265 	.word	0x08005265
 800524c:	0800527d 	.word	0x0800527d
 8005250:	0800527d 	.word	0x0800527d
 8005254:	0800527d 	.word	0x0800527d
 8005258:	08005275 	.word	0x08005275
 800525c:	2300      	movs	r3, #0
 800525e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005262:	e0d8      	b.n	8005416 <UART_SetConfig+0x2e6>
 8005264:	2302      	movs	r3, #2
 8005266:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800526a:	e0d4      	b.n	8005416 <UART_SetConfig+0x2e6>
 800526c:	2304      	movs	r3, #4
 800526e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005272:	e0d0      	b.n	8005416 <UART_SetConfig+0x2e6>
 8005274:	2308      	movs	r3, #8
 8005276:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800527a:	e0cc      	b.n	8005416 <UART_SetConfig+0x2e6>
 800527c:	2310      	movs	r3, #16
 800527e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005282:	e0c8      	b.n	8005416 <UART_SetConfig+0x2e6>
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a5e      	ldr	r2, [pc, #376]	; (8005404 <UART_SetConfig+0x2d4>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d125      	bne.n	80052da <UART_SetConfig+0x1aa>
 800528e:	4b5b      	ldr	r3, [pc, #364]	; (80053fc <UART_SetConfig+0x2cc>)
 8005290:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005294:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005298:	2b30      	cmp	r3, #48	; 0x30
 800529a:	d016      	beq.n	80052ca <UART_SetConfig+0x19a>
 800529c:	2b30      	cmp	r3, #48	; 0x30
 800529e:	d818      	bhi.n	80052d2 <UART_SetConfig+0x1a2>
 80052a0:	2b20      	cmp	r3, #32
 80052a2:	d00a      	beq.n	80052ba <UART_SetConfig+0x18a>
 80052a4:	2b20      	cmp	r3, #32
 80052a6:	d814      	bhi.n	80052d2 <UART_SetConfig+0x1a2>
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d002      	beq.n	80052b2 <UART_SetConfig+0x182>
 80052ac:	2b10      	cmp	r3, #16
 80052ae:	d008      	beq.n	80052c2 <UART_SetConfig+0x192>
 80052b0:	e00f      	b.n	80052d2 <UART_SetConfig+0x1a2>
 80052b2:	2300      	movs	r3, #0
 80052b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052b8:	e0ad      	b.n	8005416 <UART_SetConfig+0x2e6>
 80052ba:	2302      	movs	r3, #2
 80052bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052c0:	e0a9      	b.n	8005416 <UART_SetConfig+0x2e6>
 80052c2:	2304      	movs	r3, #4
 80052c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052c8:	e0a5      	b.n	8005416 <UART_SetConfig+0x2e6>
 80052ca:	2308      	movs	r3, #8
 80052cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052d0:	e0a1      	b.n	8005416 <UART_SetConfig+0x2e6>
 80052d2:	2310      	movs	r3, #16
 80052d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052d8:	e09d      	b.n	8005416 <UART_SetConfig+0x2e6>
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a4a      	ldr	r2, [pc, #296]	; (8005408 <UART_SetConfig+0x2d8>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d125      	bne.n	8005330 <UART_SetConfig+0x200>
 80052e4:	4b45      	ldr	r3, [pc, #276]	; (80053fc <UART_SetConfig+0x2cc>)
 80052e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80052ee:	2bc0      	cmp	r3, #192	; 0xc0
 80052f0:	d016      	beq.n	8005320 <UART_SetConfig+0x1f0>
 80052f2:	2bc0      	cmp	r3, #192	; 0xc0
 80052f4:	d818      	bhi.n	8005328 <UART_SetConfig+0x1f8>
 80052f6:	2b80      	cmp	r3, #128	; 0x80
 80052f8:	d00a      	beq.n	8005310 <UART_SetConfig+0x1e0>
 80052fa:	2b80      	cmp	r3, #128	; 0x80
 80052fc:	d814      	bhi.n	8005328 <UART_SetConfig+0x1f8>
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d002      	beq.n	8005308 <UART_SetConfig+0x1d8>
 8005302:	2b40      	cmp	r3, #64	; 0x40
 8005304:	d008      	beq.n	8005318 <UART_SetConfig+0x1e8>
 8005306:	e00f      	b.n	8005328 <UART_SetConfig+0x1f8>
 8005308:	2300      	movs	r3, #0
 800530a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800530e:	e082      	b.n	8005416 <UART_SetConfig+0x2e6>
 8005310:	2302      	movs	r3, #2
 8005312:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005316:	e07e      	b.n	8005416 <UART_SetConfig+0x2e6>
 8005318:	2304      	movs	r3, #4
 800531a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800531e:	e07a      	b.n	8005416 <UART_SetConfig+0x2e6>
 8005320:	2308      	movs	r3, #8
 8005322:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005326:	e076      	b.n	8005416 <UART_SetConfig+0x2e6>
 8005328:	2310      	movs	r3, #16
 800532a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800532e:	e072      	b.n	8005416 <UART_SetConfig+0x2e6>
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a35      	ldr	r2, [pc, #212]	; (800540c <UART_SetConfig+0x2dc>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d12a      	bne.n	8005390 <UART_SetConfig+0x260>
 800533a:	4b30      	ldr	r3, [pc, #192]	; (80053fc <UART_SetConfig+0x2cc>)
 800533c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005340:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005344:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005348:	d01a      	beq.n	8005380 <UART_SetConfig+0x250>
 800534a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800534e:	d81b      	bhi.n	8005388 <UART_SetConfig+0x258>
 8005350:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005354:	d00c      	beq.n	8005370 <UART_SetConfig+0x240>
 8005356:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800535a:	d815      	bhi.n	8005388 <UART_SetConfig+0x258>
 800535c:	2b00      	cmp	r3, #0
 800535e:	d003      	beq.n	8005368 <UART_SetConfig+0x238>
 8005360:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005364:	d008      	beq.n	8005378 <UART_SetConfig+0x248>
 8005366:	e00f      	b.n	8005388 <UART_SetConfig+0x258>
 8005368:	2300      	movs	r3, #0
 800536a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800536e:	e052      	b.n	8005416 <UART_SetConfig+0x2e6>
 8005370:	2302      	movs	r3, #2
 8005372:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005376:	e04e      	b.n	8005416 <UART_SetConfig+0x2e6>
 8005378:	2304      	movs	r3, #4
 800537a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800537e:	e04a      	b.n	8005416 <UART_SetConfig+0x2e6>
 8005380:	2308      	movs	r3, #8
 8005382:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005386:	e046      	b.n	8005416 <UART_SetConfig+0x2e6>
 8005388:	2310      	movs	r3, #16
 800538a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800538e:	e042      	b.n	8005416 <UART_SetConfig+0x2e6>
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a17      	ldr	r2, [pc, #92]	; (80053f4 <UART_SetConfig+0x2c4>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d13a      	bne.n	8005410 <UART_SetConfig+0x2e0>
 800539a:	4b18      	ldr	r3, [pc, #96]	; (80053fc <UART_SetConfig+0x2cc>)
 800539c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053a0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80053a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80053a8:	d01a      	beq.n	80053e0 <UART_SetConfig+0x2b0>
 80053aa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80053ae:	d81b      	bhi.n	80053e8 <UART_SetConfig+0x2b8>
 80053b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053b4:	d00c      	beq.n	80053d0 <UART_SetConfig+0x2a0>
 80053b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053ba:	d815      	bhi.n	80053e8 <UART_SetConfig+0x2b8>
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d003      	beq.n	80053c8 <UART_SetConfig+0x298>
 80053c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053c4:	d008      	beq.n	80053d8 <UART_SetConfig+0x2a8>
 80053c6:	e00f      	b.n	80053e8 <UART_SetConfig+0x2b8>
 80053c8:	2300      	movs	r3, #0
 80053ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053ce:	e022      	b.n	8005416 <UART_SetConfig+0x2e6>
 80053d0:	2302      	movs	r3, #2
 80053d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053d6:	e01e      	b.n	8005416 <UART_SetConfig+0x2e6>
 80053d8:	2304      	movs	r3, #4
 80053da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053de:	e01a      	b.n	8005416 <UART_SetConfig+0x2e6>
 80053e0:	2308      	movs	r3, #8
 80053e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053e6:	e016      	b.n	8005416 <UART_SetConfig+0x2e6>
 80053e8:	2310      	movs	r3, #16
 80053ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053ee:	e012      	b.n	8005416 <UART_SetConfig+0x2e6>
 80053f0:	efff69f3 	.word	0xefff69f3
 80053f4:	40008000 	.word	0x40008000
 80053f8:	40013800 	.word	0x40013800
 80053fc:	40021000 	.word	0x40021000
 8005400:	40004400 	.word	0x40004400
 8005404:	40004800 	.word	0x40004800
 8005408:	40004c00 	.word	0x40004c00
 800540c:	40005000 	.word	0x40005000
 8005410:	2310      	movs	r3, #16
 8005412:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a9f      	ldr	r2, [pc, #636]	; (8005698 <UART_SetConfig+0x568>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d17a      	bne.n	8005516 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005420:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005424:	2b08      	cmp	r3, #8
 8005426:	d824      	bhi.n	8005472 <UART_SetConfig+0x342>
 8005428:	a201      	add	r2, pc, #4	; (adr r2, 8005430 <UART_SetConfig+0x300>)
 800542a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800542e:	bf00      	nop
 8005430:	08005455 	.word	0x08005455
 8005434:	08005473 	.word	0x08005473
 8005438:	0800545d 	.word	0x0800545d
 800543c:	08005473 	.word	0x08005473
 8005440:	08005463 	.word	0x08005463
 8005444:	08005473 	.word	0x08005473
 8005448:	08005473 	.word	0x08005473
 800544c:	08005473 	.word	0x08005473
 8005450:	0800546b 	.word	0x0800546b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005454:	f7fe fccc 	bl	8003df0 <HAL_RCC_GetPCLK1Freq>
 8005458:	61f8      	str	r0, [r7, #28]
        break;
 800545a:	e010      	b.n	800547e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800545c:	4b8f      	ldr	r3, [pc, #572]	; (800569c <UART_SetConfig+0x56c>)
 800545e:	61fb      	str	r3, [r7, #28]
        break;
 8005460:	e00d      	b.n	800547e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005462:	f7fe fc2d 	bl	8003cc0 <HAL_RCC_GetSysClockFreq>
 8005466:	61f8      	str	r0, [r7, #28]
        break;
 8005468:	e009      	b.n	800547e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800546a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800546e:	61fb      	str	r3, [r7, #28]
        break;
 8005470:	e005      	b.n	800547e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005472:	2300      	movs	r3, #0
 8005474:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800547c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800547e:	69fb      	ldr	r3, [r7, #28]
 8005480:	2b00      	cmp	r3, #0
 8005482:	f000 80fb 	beq.w	800567c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	685a      	ldr	r2, [r3, #4]
 800548a:	4613      	mov	r3, r2
 800548c:	005b      	lsls	r3, r3, #1
 800548e:	4413      	add	r3, r2
 8005490:	69fa      	ldr	r2, [r7, #28]
 8005492:	429a      	cmp	r2, r3
 8005494:	d305      	bcc.n	80054a2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800549c:	69fa      	ldr	r2, [r7, #28]
 800549e:	429a      	cmp	r2, r3
 80054a0:	d903      	bls.n	80054aa <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80054a8:	e0e8      	b.n	800567c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80054aa:	69fb      	ldr	r3, [r7, #28]
 80054ac:	2200      	movs	r2, #0
 80054ae:	461c      	mov	r4, r3
 80054b0:	4615      	mov	r5, r2
 80054b2:	f04f 0200 	mov.w	r2, #0
 80054b6:	f04f 0300 	mov.w	r3, #0
 80054ba:	022b      	lsls	r3, r5, #8
 80054bc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80054c0:	0222      	lsls	r2, r4, #8
 80054c2:	68f9      	ldr	r1, [r7, #12]
 80054c4:	6849      	ldr	r1, [r1, #4]
 80054c6:	0849      	lsrs	r1, r1, #1
 80054c8:	2000      	movs	r0, #0
 80054ca:	4688      	mov	r8, r1
 80054cc:	4681      	mov	r9, r0
 80054ce:	eb12 0a08 	adds.w	sl, r2, r8
 80054d2:	eb43 0b09 	adc.w	fp, r3, r9
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	2200      	movs	r2, #0
 80054dc:	603b      	str	r3, [r7, #0]
 80054de:	607a      	str	r2, [r7, #4]
 80054e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054e4:	4650      	mov	r0, sl
 80054e6:	4659      	mov	r1, fp
 80054e8:	f7fb fbae 	bl	8000c48 <__aeabi_uldivmod>
 80054ec:	4602      	mov	r2, r0
 80054ee:	460b      	mov	r3, r1
 80054f0:	4613      	mov	r3, r2
 80054f2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80054f4:	69bb      	ldr	r3, [r7, #24]
 80054f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054fa:	d308      	bcc.n	800550e <UART_SetConfig+0x3de>
 80054fc:	69bb      	ldr	r3, [r7, #24]
 80054fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005502:	d204      	bcs.n	800550e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	69ba      	ldr	r2, [r7, #24]
 800550a:	60da      	str	r2, [r3, #12]
 800550c:	e0b6      	b.n	800567c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005514:	e0b2      	b.n	800567c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	69db      	ldr	r3, [r3, #28]
 800551a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800551e:	d15e      	bne.n	80055de <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005520:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005524:	2b08      	cmp	r3, #8
 8005526:	d828      	bhi.n	800557a <UART_SetConfig+0x44a>
 8005528:	a201      	add	r2, pc, #4	; (adr r2, 8005530 <UART_SetConfig+0x400>)
 800552a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800552e:	bf00      	nop
 8005530:	08005555 	.word	0x08005555
 8005534:	0800555d 	.word	0x0800555d
 8005538:	08005565 	.word	0x08005565
 800553c:	0800557b 	.word	0x0800557b
 8005540:	0800556b 	.word	0x0800556b
 8005544:	0800557b 	.word	0x0800557b
 8005548:	0800557b 	.word	0x0800557b
 800554c:	0800557b 	.word	0x0800557b
 8005550:	08005573 	.word	0x08005573
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005554:	f7fe fc4c 	bl	8003df0 <HAL_RCC_GetPCLK1Freq>
 8005558:	61f8      	str	r0, [r7, #28]
        break;
 800555a:	e014      	b.n	8005586 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800555c:	f7fe fc5e 	bl	8003e1c <HAL_RCC_GetPCLK2Freq>
 8005560:	61f8      	str	r0, [r7, #28]
        break;
 8005562:	e010      	b.n	8005586 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005564:	4b4d      	ldr	r3, [pc, #308]	; (800569c <UART_SetConfig+0x56c>)
 8005566:	61fb      	str	r3, [r7, #28]
        break;
 8005568:	e00d      	b.n	8005586 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800556a:	f7fe fba9 	bl	8003cc0 <HAL_RCC_GetSysClockFreq>
 800556e:	61f8      	str	r0, [r7, #28]
        break;
 8005570:	e009      	b.n	8005586 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005572:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005576:	61fb      	str	r3, [r7, #28]
        break;
 8005578:	e005      	b.n	8005586 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800557a:	2300      	movs	r3, #0
 800557c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005584:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d077      	beq.n	800567c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800558c:	69fb      	ldr	r3, [r7, #28]
 800558e:	005a      	lsls	r2, r3, #1
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	085b      	lsrs	r3, r3, #1
 8005596:	441a      	add	r2, r3
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	fbb2 f3f3 	udiv	r3, r2, r3
 80055a0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055a2:	69bb      	ldr	r3, [r7, #24]
 80055a4:	2b0f      	cmp	r3, #15
 80055a6:	d916      	bls.n	80055d6 <UART_SetConfig+0x4a6>
 80055a8:	69bb      	ldr	r3, [r7, #24]
 80055aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055ae:	d212      	bcs.n	80055d6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80055b0:	69bb      	ldr	r3, [r7, #24]
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	f023 030f 	bic.w	r3, r3, #15
 80055b8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80055ba:	69bb      	ldr	r3, [r7, #24]
 80055bc:	085b      	lsrs	r3, r3, #1
 80055be:	b29b      	uxth	r3, r3
 80055c0:	f003 0307 	and.w	r3, r3, #7
 80055c4:	b29a      	uxth	r2, r3
 80055c6:	8afb      	ldrh	r3, [r7, #22]
 80055c8:	4313      	orrs	r3, r2
 80055ca:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	8afa      	ldrh	r2, [r7, #22]
 80055d2:	60da      	str	r2, [r3, #12]
 80055d4:	e052      	b.n	800567c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80055dc:	e04e      	b.n	800567c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80055de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80055e2:	2b08      	cmp	r3, #8
 80055e4:	d827      	bhi.n	8005636 <UART_SetConfig+0x506>
 80055e6:	a201      	add	r2, pc, #4	; (adr r2, 80055ec <UART_SetConfig+0x4bc>)
 80055e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ec:	08005611 	.word	0x08005611
 80055f0:	08005619 	.word	0x08005619
 80055f4:	08005621 	.word	0x08005621
 80055f8:	08005637 	.word	0x08005637
 80055fc:	08005627 	.word	0x08005627
 8005600:	08005637 	.word	0x08005637
 8005604:	08005637 	.word	0x08005637
 8005608:	08005637 	.word	0x08005637
 800560c:	0800562f 	.word	0x0800562f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005610:	f7fe fbee 	bl	8003df0 <HAL_RCC_GetPCLK1Freq>
 8005614:	61f8      	str	r0, [r7, #28]
        break;
 8005616:	e014      	b.n	8005642 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005618:	f7fe fc00 	bl	8003e1c <HAL_RCC_GetPCLK2Freq>
 800561c:	61f8      	str	r0, [r7, #28]
        break;
 800561e:	e010      	b.n	8005642 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005620:	4b1e      	ldr	r3, [pc, #120]	; (800569c <UART_SetConfig+0x56c>)
 8005622:	61fb      	str	r3, [r7, #28]
        break;
 8005624:	e00d      	b.n	8005642 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005626:	f7fe fb4b 	bl	8003cc0 <HAL_RCC_GetSysClockFreq>
 800562a:	61f8      	str	r0, [r7, #28]
        break;
 800562c:	e009      	b.n	8005642 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800562e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005632:	61fb      	str	r3, [r7, #28]
        break;
 8005634:	e005      	b.n	8005642 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005636:	2300      	movs	r3, #0
 8005638:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005640:	bf00      	nop
    }

    if (pclk != 0U)
 8005642:	69fb      	ldr	r3, [r7, #28]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d019      	beq.n	800567c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	085a      	lsrs	r2, r3, #1
 800564e:	69fb      	ldr	r3, [r7, #28]
 8005650:	441a      	add	r2, r3
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	fbb2 f3f3 	udiv	r3, r2, r3
 800565a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800565c:	69bb      	ldr	r3, [r7, #24]
 800565e:	2b0f      	cmp	r3, #15
 8005660:	d909      	bls.n	8005676 <UART_SetConfig+0x546>
 8005662:	69bb      	ldr	r3, [r7, #24]
 8005664:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005668:	d205      	bcs.n	8005676 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800566a:	69bb      	ldr	r3, [r7, #24]
 800566c:	b29a      	uxth	r2, r3
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	60da      	str	r2, [r3, #12]
 8005674:	e002      	b.n	800567c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2200      	movs	r2, #0
 8005680:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2200      	movs	r2, #0
 8005686:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005688:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800568c:	4618      	mov	r0, r3
 800568e:	3728      	adds	r7, #40	; 0x28
 8005690:	46bd      	mov	sp, r7
 8005692:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005696:	bf00      	nop
 8005698:	40008000 	.word	0x40008000
 800569c:	00f42400 	.word	0x00f42400

080056a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b083      	sub	sp, #12
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ac:	f003 0301 	and.w	r3, r3, #1
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d00a      	beq.n	80056ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	430a      	orrs	r2, r1
 80056c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ce:	f003 0302 	and.w	r3, r3, #2
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d00a      	beq.n	80056ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	430a      	orrs	r2, r1
 80056ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f0:	f003 0304 	and.w	r3, r3, #4
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d00a      	beq.n	800570e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	430a      	orrs	r2, r1
 800570c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005712:	f003 0308 	and.w	r3, r3, #8
 8005716:	2b00      	cmp	r3, #0
 8005718:	d00a      	beq.n	8005730 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	430a      	orrs	r2, r1
 800572e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005734:	f003 0310 	and.w	r3, r3, #16
 8005738:	2b00      	cmp	r3, #0
 800573a:	d00a      	beq.n	8005752 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	430a      	orrs	r2, r1
 8005750:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005756:	f003 0320 	and.w	r3, r3, #32
 800575a:	2b00      	cmp	r3, #0
 800575c:	d00a      	beq.n	8005774 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	430a      	orrs	r2, r1
 8005772:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800577c:	2b00      	cmp	r3, #0
 800577e:	d01a      	beq.n	80057b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	430a      	orrs	r2, r1
 8005794:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800579a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800579e:	d10a      	bne.n	80057b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	430a      	orrs	r2, r1
 80057b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d00a      	beq.n	80057d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	430a      	orrs	r2, r1
 80057d6:	605a      	str	r2, [r3, #4]
  }
}
 80057d8:	bf00      	nop
 80057da:	370c      	adds	r7, #12
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr

080057e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b086      	sub	sp, #24
 80057e8:	af02      	add	r7, sp, #8
 80057ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2200      	movs	r2, #0
 80057f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80057f4:	f7fc fc64 	bl	80020c0 <HAL_GetTick>
 80057f8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f003 0308 	and.w	r3, r3, #8
 8005804:	2b08      	cmp	r3, #8
 8005806:	d10e      	bne.n	8005826 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005808:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800580c:	9300      	str	r3, [sp, #0]
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2200      	movs	r2, #0
 8005812:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f000 f82d 	bl	8005876 <UART_WaitOnFlagUntilTimeout>
 800581c:	4603      	mov	r3, r0
 800581e:	2b00      	cmp	r3, #0
 8005820:	d001      	beq.n	8005826 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005822:	2303      	movs	r3, #3
 8005824:	e023      	b.n	800586e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f003 0304 	and.w	r3, r3, #4
 8005830:	2b04      	cmp	r3, #4
 8005832:	d10e      	bne.n	8005852 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005834:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005838:	9300      	str	r3, [sp, #0]
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2200      	movs	r2, #0
 800583e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f000 f817 	bl	8005876 <UART_WaitOnFlagUntilTimeout>
 8005848:	4603      	mov	r3, r0
 800584a:	2b00      	cmp	r3, #0
 800584c:	d001      	beq.n	8005852 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800584e:	2303      	movs	r3, #3
 8005850:	e00d      	b.n	800586e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2220      	movs	r2, #32
 8005856:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2220      	movs	r2, #32
 800585c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800586c:	2300      	movs	r3, #0
}
 800586e:	4618      	mov	r0, r3
 8005870:	3710      	adds	r7, #16
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}

08005876 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005876:	b580      	push	{r7, lr}
 8005878:	b09c      	sub	sp, #112	; 0x70
 800587a:	af00      	add	r7, sp, #0
 800587c:	60f8      	str	r0, [r7, #12]
 800587e:	60b9      	str	r1, [r7, #8]
 8005880:	603b      	str	r3, [r7, #0]
 8005882:	4613      	mov	r3, r2
 8005884:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005886:	e0a5      	b.n	80059d4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005888:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800588a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800588e:	f000 80a1 	beq.w	80059d4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005892:	f7fc fc15 	bl	80020c0 <HAL_GetTick>
 8005896:	4602      	mov	r2, r0
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	1ad3      	subs	r3, r2, r3
 800589c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800589e:	429a      	cmp	r2, r3
 80058a0:	d302      	bcc.n	80058a8 <UART_WaitOnFlagUntilTimeout+0x32>
 80058a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d13e      	bne.n	8005926 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058b0:	e853 3f00 	ldrex	r3, [r3]
 80058b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80058b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80058bc:	667b      	str	r3, [r7, #100]	; 0x64
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	461a      	mov	r2, r3
 80058c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80058c8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80058cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80058ce:	e841 2300 	strex	r3, r2, [r1]
 80058d2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80058d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d1e6      	bne.n	80058a8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	3308      	adds	r3, #8
 80058e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058e4:	e853 3f00 	ldrex	r3, [r3]
 80058e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80058ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ec:	f023 0301 	bic.w	r3, r3, #1
 80058f0:	663b      	str	r3, [r7, #96]	; 0x60
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	3308      	adds	r3, #8
 80058f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80058fa:	64ba      	str	r2, [r7, #72]	; 0x48
 80058fc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005900:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005902:	e841 2300 	strex	r3, r2, [r1]
 8005906:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005908:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800590a:	2b00      	cmp	r3, #0
 800590c:	d1e5      	bne.n	80058da <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2220      	movs	r2, #32
 8005912:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2220      	movs	r2, #32
 8005918:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2200      	movs	r2, #0
 800591e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005922:	2303      	movs	r3, #3
 8005924:	e067      	b.n	80059f6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f003 0304 	and.w	r3, r3, #4
 8005930:	2b00      	cmp	r3, #0
 8005932:	d04f      	beq.n	80059d4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	69db      	ldr	r3, [r3, #28]
 800593a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800593e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005942:	d147      	bne.n	80059d4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800594c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005956:	e853 3f00 	ldrex	r3, [r3]
 800595a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800595c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800595e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005962:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	461a      	mov	r2, r3
 800596a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800596c:	637b      	str	r3, [r7, #52]	; 0x34
 800596e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005970:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005972:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005974:	e841 2300 	strex	r3, r2, [r1]
 8005978:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800597a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800597c:	2b00      	cmp	r3, #0
 800597e:	d1e6      	bne.n	800594e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	3308      	adds	r3, #8
 8005986:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	e853 3f00 	ldrex	r3, [r3]
 800598e:	613b      	str	r3, [r7, #16]
   return(result);
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	f023 0301 	bic.w	r3, r3, #1
 8005996:	66bb      	str	r3, [r7, #104]	; 0x68
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	3308      	adds	r3, #8
 800599e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80059a0:	623a      	str	r2, [r7, #32]
 80059a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a4:	69f9      	ldr	r1, [r7, #28]
 80059a6:	6a3a      	ldr	r2, [r7, #32]
 80059a8:	e841 2300 	strex	r3, r2, [r1]
 80059ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80059ae:	69bb      	ldr	r3, [r7, #24]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d1e5      	bne.n	8005980 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2220      	movs	r2, #32
 80059b8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2220      	movs	r2, #32
 80059be:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2220      	movs	r2, #32
 80059c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2200      	movs	r2, #0
 80059cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80059d0:	2303      	movs	r3, #3
 80059d2:	e010      	b.n	80059f6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	69da      	ldr	r2, [r3, #28]
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	4013      	ands	r3, r2
 80059de:	68ba      	ldr	r2, [r7, #8]
 80059e0:	429a      	cmp	r2, r3
 80059e2:	bf0c      	ite	eq
 80059e4:	2301      	moveq	r3, #1
 80059e6:	2300      	movne	r3, #0
 80059e8:	b2db      	uxtb	r3, r3
 80059ea:	461a      	mov	r2, r3
 80059ec:	79fb      	ldrb	r3, [r7, #7]
 80059ee:	429a      	cmp	r2, r3
 80059f0:	f43f af4a 	beq.w	8005888 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80059f4:	2300      	movs	r3, #0
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3770      	adds	r7, #112	; 0x70
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}

080059fe <bitmap_init>:
    return bitmap->width * (bitmap->depth / 8) * bitmap->height;
};

/* Initialise bitmap with given buffer. */
void bitmap_init(bitmap_t *bitmap, uint8_t *buffer)
{
 80059fe:	b480      	push	{r7}
 8005a00:	b083      	sub	sp, #12
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	6078      	str	r0, [r7, #4]
 8005a06:	6039      	str	r1, [r7, #0]
    bitmap->pitch = bitmap->width * (bitmap->depth / 8);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	881a      	ldrh	r2, [r3, #0]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	799b      	ldrb	r3, [r3, #6]
 8005a10:	08db      	lsrs	r3, r3, #3
 8005a12:	b2db      	uxtb	r3, r3
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	fb12 f303 	smulbb	r3, r2, r3
 8005a1a:	b29a      	uxth	r2, r3
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	809a      	strh	r2, [r3, #4]
    bitmap->size = bitmap->pitch * bitmap->height;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	889b      	ldrh	r3, [r3, #4]
 8005a24:	461a      	mov	r2, r3
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	885b      	ldrh	r3, [r3, #2]
 8005a2a:	fb02 f303 	mul.w	r3, r2, r3
 8005a2e:	461a      	mov	r2, r3
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	609a      	str	r2, [r3, #8]
    bitmap->buffer = buffer;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	683a      	ldr	r2, [r7, #0]
 8005a38:	60da      	str	r2, [r3, #12]
}
 8005a3a:	bf00      	nop
 8005a3c:	370c      	adds	r7, #12
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr

08005a46 <code>:
static const uint8_t RIGHT = 0b0010;
static const uint8_t BOTTOM = 0b0100;
static const uint8_t TOP = 0b1000;

static uint8_t code(int16_t x0, int16_t y0, window_t window)
{
 8005a46:	b490      	push	{r4, r7}
 8005a48:	b086      	sub	sp, #24
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	4604      	mov	r4, r0
 8005a4e:	4608      	mov	r0, r1
 8005a50:	1d39      	adds	r1, r7, #4
 8005a52:	e881 000c 	stmia.w	r1, {r2, r3}
 8005a56:	4623      	mov	r3, r4
 8005a58:	81fb      	strh	r3, [r7, #14]
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	81bb      	strh	r3, [r7, #12]
    uint8_t code = INSIDE;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	75fb      	strb	r3, [r7, #23]

    if (x0 < window.x0) {
 8005a62:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005a66:	88ba      	ldrh	r2, [r7, #4]
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	da04      	bge.n	8005a76 <code+0x30>
        code |= LEFT;
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	7dfb      	ldrb	r3, [r7, #23]
 8005a70:	4313      	orrs	r3, r2
 8005a72:	75fb      	strb	r3, [r7, #23]
 8005a74:	e008      	b.n	8005a88 <code+0x42>
    } else if (x0 > window.x1) {
 8005a76:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005a7a:	893a      	ldrh	r2, [r7, #8]
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	dd03      	ble.n	8005a88 <code+0x42>
        code |= RIGHT;
 8005a80:	2202      	movs	r2, #2
 8005a82:	7dfb      	ldrb	r3, [r7, #23]
 8005a84:	4313      	orrs	r3, r2
 8005a86:	75fb      	strb	r3, [r7, #23]
    } if (y0 < window.y0) {
 8005a88:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005a8c:	88fa      	ldrh	r2, [r7, #6]
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	da04      	bge.n	8005a9c <code+0x56>
        code |= BOTTOM;
 8005a92:	2204      	movs	r2, #4
 8005a94:	7dfb      	ldrb	r3, [r7, #23]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	75fb      	strb	r3, [r7, #23]
 8005a9a:	e008      	b.n	8005aae <code+0x68>
    } else if (y0 > window.y1) {
 8005a9c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005aa0:	897a      	ldrh	r2, [r7, #10]
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	dd03      	ble.n	8005aae <code+0x68>
        code |= TOP;
 8005aa6:	2208      	movs	r2, #8
 8005aa8:	7dfb      	ldrb	r3, [r7, #23]
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	75fb      	strb	r3, [r7, #23]
    }

    return code;
 8005aae:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3718      	adds	r7, #24
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bc90      	pop	{r4, r7}
 8005ab8:	4770      	bx	lr

08005aba <clip_line>:

bool clip_line(int16_t *x0, int16_t *y0, int16_t *x1, int16_t *y1, window_t window)
{
 8005aba:	b580      	push	{r7, lr}
 8005abc:	b088      	sub	sp, #32
 8005abe:	af00      	add	r7, sp, #0
 8005ac0:	60f8      	str	r0, [r7, #12]
 8005ac2:	60b9      	str	r1, [r7, #8]
 8005ac4:	607a      	str	r2, [r7, #4]
 8005ac6:	603b      	str	r3, [r7, #0]
    uint8_t code0 = code(*x0, *y0, window);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f9b3 0000 	ldrsh.w	r0, [r3]
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	f9b3 1000 	ldrsh.w	r1, [r3]
 8005ad4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005ad8:	cb0c      	ldmia	r3, {r2, r3}
 8005ada:	f7ff ffb4 	bl	8005a46 <code>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	77fb      	strb	r3, [r7, #31]
    uint8_t code1 = code(*x1, *y1, window);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f9b3 0000 	ldrsh.w	r0, [r3]
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	f9b3 1000 	ldrsh.w	r1, [r3]
 8005aee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005af2:	cb0c      	ldmia	r3, {r2, r3}
 8005af4:	f7ff ffa7 	bl	8005a46 <code>
 8005af8:	4603      	mov	r3, r0
 8005afa:	77bb      	strb	r3, [r7, #30]

    bool accept = false;
 8005afc:	2300      	movs	r3, #0
 8005afe:	777b      	strb	r3, [r7, #29]

    while (true) {
        if (!(code0 | code1)) {
 8005b00:	7ffa      	ldrb	r2, [r7, #31]
 8005b02:	7fbb      	ldrb	r3, [r7, #30]
 8005b04:	4313      	orrs	r3, r2
 8005b06:	b2db      	uxtb	r3, r3
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d102      	bne.n	8005b12 <clip_line+0x58>
            /* Both endpoints inside clipping window, trivial accept. */
            accept = true;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	777b      	strb	r3, [r7, #29]
            break;
 8005b10:	e0e9      	b.n	8005ce6 <clip_line+0x22c>
        } else if (code0 & code1) {
 8005b12:	7ffa      	ldrb	r2, [r7, #31]
 8005b14:	7fbb      	ldrb	r3, [r7, #30]
 8005b16:	4013      	ands	r3, r2
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	f040 80e2 	bne.w	8005ce4 <clip_line+0x22a>
            /* Both endpoints outside clipping window, trivial reject. */
            break;
        } else {
            /* Part of line inside clipping window, nontrivial situation. */

            int16_t x = 0;
 8005b20:	2300      	movs	r3, #0
 8005b22:	837b      	strh	r3, [r7, #26]
            int16_t y = 0;
 8005b24:	2300      	movs	r3, #0
 8005b26:	833b      	strh	r3, [r7, #24]
            uint8_t code3 = code0 ? code0 : code1;
 8005b28:	7ffb      	ldrb	r3, [r7, #31]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d001      	beq.n	8005b32 <clip_line+0x78>
 8005b2e:	7ffb      	ldrb	r3, [r7, #31]
 8005b30:	e000      	b.n	8005b34 <clip_line+0x7a>
 8005b32:	7fbb      	ldrb	r3, [r7, #30]
 8005b34:	75fb      	strb	r3, [r7, #23]

            /* Find intersection point. */
            /* slope = (y1 - y0) / (x1 - x0) */
            /* x = x0 + (1 / slope) * (ym - y0), where ym is ymin or ymax */
            /* y = y0 + slope * (xm - x0), where xm is xmin or xmax */
            if (code3 & TOP) {
 8005b36:	2208      	movs	r2, #8
 8005b38:	7dfb      	ldrb	r3, [r7, #23]
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	b2db      	uxtb	r3, r3
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d024      	beq.n	8005b8c <clip_line+0xd2>
                x = *x0 + (*x1 - *x0) * (window.y1 - *y0) / (*y1 - *y0);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005b48:	b29a      	uxth	r2, r3
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005b50:	4619      	mov	r1, r3
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005b58:	1acb      	subs	r3, r1, r3
 8005b5a:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 8005b5c:	4608      	mov	r0, r1
 8005b5e:	68b9      	ldr	r1, [r7, #8]
 8005b60:	f9b1 1000 	ldrsh.w	r1, [r1]
 8005b64:	1a41      	subs	r1, r0, r1
 8005b66:	fb03 f101 	mul.w	r1, r3, r1
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005b70:	4618      	mov	r0, r3
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005b78:	1ac3      	subs	r3, r0, r3
 8005b7a:	fb91 f3f3 	sdiv	r3, r1, r3
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	4413      	add	r3, r2
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	837b      	strh	r3, [r7, #26]
                y = window.y1;
 8005b86:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005b88:	833b      	strh	r3, [r7, #24]
 8005b8a:	e07f      	b.n	8005c8c <clip_line+0x1d2>
            } else if (code3 & BOTTOM) {
 8005b8c:	2204      	movs	r2, #4
 8005b8e:	7dfb      	ldrb	r3, [r7, #23]
 8005b90:	4013      	ands	r3, r2
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d024      	beq.n	8005be2 <clip_line+0x128>
                x = *x0 + (*x1 - *x0) * (window.y0 - *y0) / (*y1 - *y0);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005b9e:	b29a      	uxth	r2, r3
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005ba6:	4619      	mov	r1, r3
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005bae:	1acb      	subs	r3, r1, r3
 8005bb0:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8005bb2:	4608      	mov	r0, r1
 8005bb4:	68b9      	ldr	r1, [r7, #8]
 8005bb6:	f9b1 1000 	ldrsh.w	r1, [r1]
 8005bba:	1a41      	subs	r1, r0, r1
 8005bbc:	fb03 f101 	mul.w	r1, r3, r1
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005bce:	1ac3      	subs	r3, r0, r3
 8005bd0:	fb91 f3f3 	sdiv	r3, r1, r3
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	4413      	add	r3, r2
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	837b      	strh	r3, [r7, #26]
                y = window.y0;
 8005bdc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005bde:	833b      	strh	r3, [r7, #24]
 8005be0:	e054      	b.n	8005c8c <clip_line+0x1d2>
            } else if (code3 & RIGHT) {
 8005be2:	2202      	movs	r2, #2
 8005be4:	7dfb      	ldrb	r3, [r7, #23]
 8005be6:	4013      	ands	r3, r2
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d024      	beq.n	8005c38 <clip_line+0x17e>
                y = *y0 + (*y1 - *y0) * (window.x1 - *x0) / (*x1 - *x0);
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005bf4:	b29a      	uxth	r2, r3
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005bfc:	4619      	mov	r1, r3
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005c04:	1acb      	subs	r3, r1, r3
 8005c06:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8005c08:	4608      	mov	r0, r1
 8005c0a:	68f9      	ldr	r1, [r7, #12]
 8005c0c:	f9b1 1000 	ldrsh.w	r1, [r1]
 8005c10:	1a41      	subs	r1, r0, r1
 8005c12:	fb03 f101 	mul.w	r1, r3, r1
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005c24:	1ac3      	subs	r3, r0, r3
 8005c26:	fb91 f3f3 	sdiv	r3, r1, r3
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	4413      	add	r3, r2
 8005c2e:	b29b      	uxth	r3, r3
 8005c30:	833b      	strh	r3, [r7, #24]
                x = window.x1;
 8005c32:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005c34:	837b      	strh	r3, [r7, #26]
 8005c36:	e029      	b.n	8005c8c <clip_line+0x1d2>
            }  else if (code3 & LEFT) {
 8005c38:	2201      	movs	r2, #1
 8005c3a:	7dfb      	ldrb	r3, [r7, #23]
 8005c3c:	4013      	ands	r3, r2
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d023      	beq.n	8005c8c <clip_line+0x1d2>
                y = *y0 + (*y1 - *y0) * (window.x0 - *x0) / (*x1 - *x0);
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005c4a:	b29a      	uxth	r2, r3
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005c52:	4619      	mov	r1, r3
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005c5a:	1acb      	subs	r3, r1, r3
 8005c5c:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8005c5e:	4608      	mov	r0, r1
 8005c60:	68f9      	ldr	r1, [r7, #12]
 8005c62:	f9b1 1000 	ldrsh.w	r1, [r1]
 8005c66:	1a41      	subs	r1, r0, r1
 8005c68:	fb03 f101 	mul.w	r1, r3, r1
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005c72:	4618      	mov	r0, r3
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005c7a:	1ac3      	subs	r3, r0, r3
 8005c7c:	fb91 f3f3 	sdiv	r3, r1, r3
 8005c80:	b29b      	uxth	r3, r3
 8005c82:	4413      	add	r3, r2
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	833b      	strh	r3, [r7, #24]
                x = window.x0;
 8005c88:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005c8a:	837b      	strh	r3, [r7, #26]
            }

            /* Replace the outside point with the intersection point. */
            if (code3 == code0) {
 8005c8c:	7dfa      	ldrb	r2, [r7, #23]
 8005c8e:	7ffb      	ldrb	r3, [r7, #31]
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d113      	bne.n	8005cbc <clip_line+0x202>
                *x0 = x;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	8b7a      	ldrh	r2, [r7, #26]
 8005c98:	801a      	strh	r2, [r3, #0]
                *y0 = y;
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	8b3a      	ldrh	r2, [r7, #24]
 8005c9e:	801a      	strh	r2, [r3, #0]
                code0 = code(*x0, *y0, window);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f9b3 0000 	ldrsh.w	r0, [r3]
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	f9b3 1000 	ldrsh.w	r1, [r3]
 8005cac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005cb0:	cb0c      	ldmia	r3, {r2, r3}
 8005cb2:	f7ff fec8 	bl	8005a46 <code>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	77fb      	strb	r3, [r7, #31]
 8005cba:	e721      	b.n	8005b00 <clip_line+0x46>
            } else {
                *x1 = x;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	8b7a      	ldrh	r2, [r7, #26]
 8005cc0:	801a      	strh	r2, [r3, #0]
                *y1 = y;
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	8b3a      	ldrh	r2, [r7, #24]
 8005cc6:	801a      	strh	r2, [r3, #0]
                code1 = code(*x1, *y1, window);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f9b3 0000 	ldrsh.w	r0, [r3]
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	f9b3 1000 	ldrsh.w	r1, [r3]
 8005cd4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005cd8:	cb0c      	ldmia	r3, {r2, r3}
 8005cda:	f7ff feb4 	bl	8005a46 <code>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	77bb      	strb	r3, [r7, #30]
        if (!(code0 | code1)) {
 8005ce2:	e70d      	b.n	8005b00 <clip_line+0x46>
            break;
 8005ce4:	bf00      	nop
            }
        }
    }

    return accept;
 8005ce6:	7f7b      	ldrb	r3, [r7, #29]
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3720      	adds	r7, #32
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}

08005cf0 <fontx_meta>:
#include <stddef.h>
#include <string.h>

#include "fontx.h"

uint8_t fontx_meta(fontx_meta_t *meta, const uint8_t *font) {
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b082      	sub	sp, #8
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	6039      	str	r1, [r7, #0]

    memcpy(meta->name, &font[FONTX_NAME], 8);
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	3306      	adds	r3, #6
 8005d00:	2208      	movs	r2, #8
 8005d02:	4619      	mov	r1, r3
 8005d04:	f000 feaa 	bl	8006a5c <memcpy>
    meta->width = font[FONTX_WIDTH];
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	7b9a      	ldrb	r2, [r3, #14]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	725a      	strb	r2, [r3, #9]
    meta->height = font[FONTX_HEIGHT];
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	7bda      	ldrb	r2, [r3, #15]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	729a      	strb	r2, [r3, #10]
    meta->type = font[FONTX_TYPE];
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	7c1a      	ldrb	r2, [r3, #16]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	72da      	strb	r2, [r3, #11]

    return 0;
 8005d20:	2300      	movs	r3, #0
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3708      	adds	r7, #8
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}

08005d2a <fontx_glyph>:


uint8_t fontx_glyph(fontx_glyph_t *glyph, wchar_t code, const uint8_t* font) {
 8005d2a:	b580      	push	{r7, lr}
 8005d2c:	b08e      	sub	sp, #56	; 0x38
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	60f8      	str	r0, [r7, #12]
 8005d32:	60b9      	str	r1, [r7, #8]
 8005d34:	607a      	str	r2, [r7, #4]
    uint32_t nc, bc, sb, eb;
    uint8_t status;
    const uint8_t *block_table;
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 8005d36:	f107 0314 	add.w	r3, r7, #20
 8005d3a:	6879      	ldr	r1, [r7, #4]
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f7ff ffd7 	bl	8005cf0 <fontx_meta>
 8005d42:	4603      	mov	r3, r0
 8005d44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (0 != status) {
 8005d48:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d002      	beq.n	8005d56 <fontx_glyph+0x2c>
        return status;
 8005d50:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005d54:	e077      	b.n	8005e46 <fontx_glyph+0x11c>
    }

    glyph->width = meta.width;
 8005d56:	7f7a      	ldrb	r2, [r7, #29]
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	701a      	strb	r2, [r3, #0]
    glyph->height = meta.height;
 8005d5c:	7fba      	ldrb	r2, [r7, #30]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	705a      	strb	r2, [r3, #1]
    glyph->pitch = (meta.width + 7) / 8;
 8005d62:	7f7b      	ldrb	r3, [r7, #29]
 8005d64:	3307      	adds	r3, #7
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	da00      	bge.n	8005d6c <fontx_glyph+0x42>
 8005d6a:	3307      	adds	r3, #7
 8005d6c:	10db      	asrs	r3, r3, #3
 8005d6e:	b2da      	uxtb	r2, r3
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	70da      	strb	r2, [r3, #3]
    glyph->size = glyph->pitch * meta.height;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	78da      	ldrb	r2, [r3, #3]
 8005d78:	7fbb      	ldrb	r3, [r7, #30]
 8005d7a:	fb12 f303 	smulbb	r3, r2, r3
 8005d7e:	b2da      	uxtb	r2, r3
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	709a      	strb	r2, [r3, #2]

    if (FONTX_TYPE_SBCS == meta.type) {
 8005d84:	7ffb      	ldrb	r3, [r7, #31]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d10f      	bne.n	8005daa <fontx_glyph+0x80>
        if (code < 0x100) {
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	2bff      	cmp	r3, #255	; 0xff
 8005d8e:	d859      	bhi.n	8005e44 <fontx_glyph+0x11a>
            glyph->buffer = &font[FONTX_GLYPH_DATA_START + code * glyph->size];
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	789b      	ldrb	r3, [r3, #2]
 8005d94:	461a      	mov	r2, r3
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	fb02 f303 	mul.w	r3, r2, r3
 8005d9c:	3311      	adds	r3, #17
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	441a      	add	r2, r3
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	605a      	str	r2, [r3, #4]
            return FONTX_OK;
 8005da6:	2300      	movs	r3, #0
 8005da8:	e04d      	b.n	8005e46 <fontx_glyph+0x11c>
        }
    } else {
        block_table = &font[FONTX_BLOCK_TABLE_START];
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	3312      	adds	r3, #18
 8005dae:	62fb      	str	r3, [r7, #44]	; 0x2c
        nc = 0;
 8005db0:	2300      	movs	r3, #0
 8005db2:	637b      	str	r3, [r7, #52]	; 0x34
        bc = font[FONTX_BLOCK_TABLE_SIZE];
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	3311      	adds	r3, #17
 8005db8:	781b      	ldrb	r3, [r3, #0]
 8005dba:	633b      	str	r3, [r7, #48]	; 0x30
        while (bc--) {
 8005dbc:	e03d      	b.n	8005e3a <fontx_glyph+0x110>
            /* Get range of the code block_table. */
            sb = block_table[0] + block_table[1] * 0x100;
 8005dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dc0:	781b      	ldrb	r3, [r3, #0]
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	781b      	ldrb	r3, [r3, #0]
 8005dca:	021b      	lsls	r3, r3, #8
 8005dcc:	4413      	add	r3, r2
 8005dce:	627b      	str	r3, [r7, #36]	; 0x24
            eb = block_table[2] + block_table[3] * 0x100;
 8005dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dd2:	3302      	adds	r3, #2
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dda:	3303      	adds	r3, #3
 8005ddc:	781b      	ldrb	r3, [r3, #0]
 8005dde:	021b      	lsls	r3, r3, #8
 8005de0:	4413      	add	r3, r2
 8005de2:	623b      	str	r3, [r7, #32]

             /* Check if in the code block_table. */
            if (code >= sb && code <= eb) {
 8005de4:	68ba      	ldr	r2, [r7, #8]
 8005de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d31c      	bcc.n	8005e26 <fontx_glyph+0xfc>
 8005dec:	68ba      	ldr	r2, [r7, #8]
 8005dee:	6a3b      	ldr	r3, [r7, #32]
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d818      	bhi.n	8005e26 <fontx_glyph+0xfc>
                /* Number of codes from top of the block_table. */
                nc += code - sb;
 8005df4:	68ba      	ldr	r2, [r7, #8]
 8005df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df8:	1ad3      	subs	r3, r2, r3
 8005dfa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005dfc:	4413      	add	r3, r2
 8005dfe:	637b      	str	r3, [r7, #52]	; 0x34
                glyph->buffer = &font[
                    FONTX_BLOCK_TABLE_START +
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	3311      	adds	r3, #17
 8005e04:	781b      	ldrb	r3, [r3, #0]
 8005e06:	009b      	lsls	r3, r3, #2
 8005e08:	461a      	mov	r2, r3
                    nc * glyph->size
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	789b      	ldrb	r3, [r3, #2]
 8005e0e:	4619      	mov	r1, r3
 8005e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e12:	fb01 f303 	mul.w	r3, r1, r3
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 8005e16:	4413      	add	r3, r2
 8005e18:	3312      	adds	r3, #18
                glyph->buffer = &font[
 8005e1a:	687a      	ldr	r2, [r7, #4]
 8005e1c:	441a      	add	r2, r3
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	605a      	str	r2, [r3, #4]
                ];
                return FONTX_OK;
 8005e22:	2300      	movs	r3, #0
 8005e24:	e00f      	b.n	8005e46 <fontx_glyph+0x11c>
            }
            /* Number of codes in the previous block_tables. */
            nc += eb - sb + 1;
 8005e26:	6a3a      	ldr	r2, [r7, #32]
 8005e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2a:	1ad2      	subs	r2, r2, r3
 8005e2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e2e:	4413      	add	r3, r2
 8005e30:	3301      	adds	r3, #1
 8005e32:	637b      	str	r3, [r7, #52]	; 0x34
            /* Next code block_table. */
            block_table += 4;
 8005e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e36:	3304      	adds	r3, #4
 8005e38:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (bc--) {
 8005e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e3c:	1e5a      	subs	r2, r3, #1
 8005e3e:	633a      	str	r2, [r7, #48]	; 0x30
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d1bc      	bne.n	8005dbe <fontx_glyph+0x94>
        }
    }

    return FONTX_ERR_GLYPH_NOT_FOUND;
 8005e44:	2301      	movs	r3, #1
 8005e46:	4618      	mov	r0, r3
 8005e48:	3738      	adds	r7, #56	; 0x38
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}

08005e4e <min>:
#include "hsl.h"

hsl_t rgb888_to_hsl(rgb_t *rgb);
uint16_t rgb888_to_rgb565(rgb_t *input);

static inline int min(int a, int b) {
 8005e4e:	b480      	push	{r7}
 8005e50:	b083      	sub	sp, #12
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	6078      	str	r0, [r7, #4]
 8005e56:	6039      	str	r1, [r7, #0]
    if (a > b) {
 8005e58:	687a      	ldr	r2, [r7, #4]
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	dd01      	ble.n	8005e64 <min+0x16>
        return b;
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	e000      	b.n	8005e66 <min+0x18>
    };
    return a;
 8005e64:	687b      	ldr	r3, [r7, #4]
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	370c      	adds	r7, #12
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e70:	4770      	bx	lr

08005e72 <max>:

static inline int max(int a, int b) {
 8005e72:	b480      	push	{r7}
 8005e74:	b083      	sub	sp, #12
 8005e76:	af00      	add	r7, sp, #0
 8005e78:	6078      	str	r0, [r7, #4]
 8005e7a:	6039      	str	r1, [r7, #0]
    if (a > b) {
 8005e7c:	687a      	ldr	r2, [r7, #4]
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	429a      	cmp	r2, r3
 8005e82:	dd01      	ble.n	8005e88 <max+0x16>
        return a;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	e000      	b.n	8005e8a <max+0x18>
    }
    return b;
 8005e88:	683b      	ldr	r3, [r7, #0]
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	370c      	adds	r7, #12
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e94:	4770      	bx	lr
	...

08005e98 <hagl_set_clip_window>:
    .y0 = 0,
    .x1 = DISPLAY_WIDTH - 1,
    .y1 = DISPLAY_HEIGHT - 1,
};

void hagl_set_clip_window(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 8005e98:	b490      	push	{r4, r7}
 8005e9a:	b082      	sub	sp, #8
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	4604      	mov	r4, r0
 8005ea0:	4608      	mov	r0, r1
 8005ea2:	4611      	mov	r1, r2
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	4623      	mov	r3, r4
 8005ea8:	80fb      	strh	r3, [r7, #6]
 8005eaa:	4603      	mov	r3, r0
 8005eac:	80bb      	strh	r3, [r7, #4]
 8005eae:	460b      	mov	r3, r1
 8005eb0:	807b      	strh	r3, [r7, #2]
 8005eb2:	4613      	mov	r3, r2
 8005eb4:	803b      	strh	r3, [r7, #0]
    clip_window.x0 = x0;
 8005eb6:	4a08      	ldr	r2, [pc, #32]	; (8005ed8 <hagl_set_clip_window+0x40>)
 8005eb8:	88fb      	ldrh	r3, [r7, #6]
 8005eba:	8013      	strh	r3, [r2, #0]
    clip_window.y0 = y0;
 8005ebc:	4a06      	ldr	r2, [pc, #24]	; (8005ed8 <hagl_set_clip_window+0x40>)
 8005ebe:	88bb      	ldrh	r3, [r7, #4]
 8005ec0:	8053      	strh	r3, [r2, #2]
    clip_window.x1 = x1;
 8005ec2:	4a05      	ldr	r2, [pc, #20]	; (8005ed8 <hagl_set_clip_window+0x40>)
 8005ec4:	887b      	ldrh	r3, [r7, #2]
 8005ec6:	8093      	strh	r3, [r2, #4]
    clip_window.y1 = y1;
 8005ec8:	4a03      	ldr	r2, [pc, #12]	; (8005ed8 <hagl_set_clip_window+0x40>)
 8005eca:	883b      	ldrh	r3, [r7, #0]
 8005ecc:	80d3      	strh	r3, [r2, #6]
}
 8005ece:	bf00      	nop
 8005ed0:	3708      	adds	r7, #8
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bc90      	pop	{r4, r7}
 8005ed6:	4770      	bx	lr
 8005ed8:	2000000c 	.word	0x2000000c

08005edc <hagl_put_pixel>:

void hagl_put_pixel(int16_t x0, int16_t y0, color_t color)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b082      	sub	sp, #8
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	80fb      	strh	r3, [r7, #6]
 8005ee6:	460b      	mov	r3, r1
 8005ee8:	80bb      	strh	r3, [r7, #4]
 8005eea:	4613      	mov	r3, r2
 8005eec:	807b      	strh	r3, [r7, #2]
    /* x0 or y0 is before the edge, nothing to do. */
    if ((x0 < clip_window.x0) || (y0 < clip_window.y0))  {
 8005eee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ef2:	4a12      	ldr	r2, [pc, #72]	; (8005f3c <hagl_put_pixel+0x60>)
 8005ef4:	8812      	ldrh	r2, [r2, #0]
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	db1a      	blt.n	8005f30 <hagl_put_pixel+0x54>
 8005efa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005efe:	4a0f      	ldr	r2, [pc, #60]	; (8005f3c <hagl_put_pixel+0x60>)
 8005f00:	8852      	ldrh	r2, [r2, #2]
 8005f02:	4293      	cmp	r3, r2
 8005f04:	db14      	blt.n	8005f30 <hagl_put_pixel+0x54>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 8005f06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005f0a:	4a0c      	ldr	r2, [pc, #48]	; (8005f3c <hagl_put_pixel+0x60>)
 8005f0c:	8892      	ldrh	r2, [r2, #4]
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	dc10      	bgt.n	8005f34 <hagl_put_pixel+0x58>
 8005f12:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005f16:	4a09      	ldr	r2, [pc, #36]	; (8005f3c <hagl_put_pixel+0x60>)
 8005f18:	88d2      	ldrh	r2, [r2, #6]
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	dc0a      	bgt.n	8005f34 <hagl_put_pixel+0x58>
        return;
    }

    /* If still in bounds set the pixel. */
    hagl_hal_put_pixel(x0, y0, color);
 8005f1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005f22:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005f26:	887a      	ldrh	r2, [r7, #2]
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f7fb fa6b 	bl	8001404 <lcd_draw_point>
 8005f2e:	e002      	b.n	8005f36 <hagl_put_pixel+0x5a>
        return;
 8005f30:	bf00      	nop
 8005f32:	e000      	b.n	8005f36 <hagl_put_pixel+0x5a>
        return;
 8005f34:	bf00      	nop
}
 8005f36:	3708      	adds	r7, #8
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}
 8005f3c:	2000000c 	.word	0x2000000c

08005f40 <hagl_draw_hline>:
#else
    return hagl_color(0, 0, 0);
#endif /* HAGL_HAS_HAL_GET_PIXEL */
}

void hagl_draw_hline(int16_t x0, int16_t y0, uint16_t w, color_t color) {
 8005f40:	b590      	push	{r4, r7, lr}
 8005f42:	b085      	sub	sp, #20
 8005f44:	af02      	add	r7, sp, #8
 8005f46:	4604      	mov	r4, r0
 8005f48:	4608      	mov	r0, r1
 8005f4a:	4611      	mov	r1, r2
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	4623      	mov	r3, r4
 8005f50:	80fb      	strh	r3, [r7, #6]
 8005f52:	4603      	mov	r3, r0
 8005f54:	80bb      	strh	r3, [r7, #4]
 8005f56:	460b      	mov	r3, r1
 8005f58:	807b      	strh	r3, [r7, #2]
 8005f5a:	4613      	mov	r3, r2
 8005f5c:	803b      	strh	r3, [r7, #0]
        width = width - (x0 + width - clip_window.x1);
    }

    hagl_hal_hline(x0, y0, width, color);
#else
    hagl_draw_line(x0, y0, x0 + w, y0, color);
 8005f5e:	88fa      	ldrh	r2, [r7, #6]
 8005f60:	887b      	ldrh	r3, [r7, #2]
 8005f62:	4413      	add	r3, r2
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	b21a      	sxth	r2, r3
 8005f68:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8005f6c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005f70:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005f74:	883b      	ldrh	r3, [r7, #0]
 8005f76:	9300      	str	r3, [sp, #0]
 8005f78:	4623      	mov	r3, r4
 8005f7a:	f000 f805 	bl	8005f88 <hagl_draw_line>
#endif
}
 8005f7e:	bf00      	nop
 8005f80:	370c      	adds	r7, #12
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd90      	pop	{r4, r7, pc}
	...

08005f88 <hagl_draw_line>:

/*
 * Draw a line using Bresenham's algorithm with given color.
 */
void hagl_draw_line(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 8005f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f8a:	b089      	sub	sp, #36	; 0x24
 8005f8c:	af02      	add	r7, sp, #8
 8005f8e:	4604      	mov	r4, r0
 8005f90:	4608      	mov	r0, r1
 8005f92:	4611      	mov	r1, r2
 8005f94:	461a      	mov	r2, r3
 8005f96:	4623      	mov	r3, r4
 8005f98:	80fb      	strh	r3, [r7, #6]
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	80bb      	strh	r3, [r7, #4]
 8005f9e:	460b      	mov	r3, r1
 8005fa0:	807b      	strh	r3, [r7, #2]
 8005fa2:	4613      	mov	r3, r2
 8005fa4:	803b      	strh	r3, [r7, #0]
    /* Clip coordinates to fit clip window. */
    if (false == clip_line(&x0, &y0, &x1, &y1, clip_window)) {
 8005fa6:	463b      	mov	r3, r7
 8005fa8:	1cba      	adds	r2, r7, #2
 8005faa:	1d3d      	adds	r5, r7, #4
 8005fac:	1dbc      	adds	r4, r7, #6
 8005fae:	494a      	ldr	r1, [pc, #296]	; (80060d8 <hagl_draw_line+0x150>)
 8005fb0:	466e      	mov	r6, sp
 8005fb2:	c903      	ldmia	r1, {r0, r1}
 8005fb4:	e886 0003 	stmia.w	r6, {r0, r1}
 8005fb8:	4629      	mov	r1, r5
 8005fba:	4620      	mov	r0, r4
 8005fbc:	f7ff fd7d 	bl	8005aba <clip_line>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	f083 0301 	eor.w	r3, r3, #1
 8005fc6:	b2db      	uxtb	r3, r3
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d17e      	bne.n	80060ca <hagl_draw_line+0x142>
    int16_t dy;
    int16_t sy;
    int16_t err;
    int16_t e2;

    dx = ABS(x1 - x0);
 8005fcc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005fd6:	1ad3      	subs	r3, r2, r3
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	bfb8      	it	lt
 8005fdc:	425b      	neglt	r3, r3
 8005fde:	82bb      	strh	r3, [r7, #20]
    sx = x0 < x1 ? 1 : -1;
 8005fe0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005fe4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	da01      	bge.n	8005ff0 <hagl_draw_line+0x68>
 8005fec:	2301      	movs	r3, #1
 8005fee:	e001      	b.n	8005ff4 <hagl_draw_line+0x6c>
 8005ff0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ff4:	827b      	strh	r3, [r7, #18]
    dy = ABS(y1 - y0);
 8005ff6:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005ffa:	461a      	mov	r2, r3
 8005ffc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006000:	1ad3      	subs	r3, r2, r3
 8006002:	2b00      	cmp	r3, #0
 8006004:	bfb8      	it	lt
 8006006:	425b      	neglt	r3, r3
 8006008:	823b      	strh	r3, [r7, #16]
    sy = y0 < y1 ? 1 : -1;
 800600a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800600e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8006012:	429a      	cmp	r2, r3
 8006014:	da01      	bge.n	800601a <hagl_draw_line+0x92>
 8006016:	2301      	movs	r3, #1
 8006018:	e001      	b.n	800601e <hagl_draw_line+0x96>
 800601a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800601e:	81fb      	strh	r3, [r7, #14]
    err = (dx > dy ? dx : -dy) / 2;
 8006020:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8006024:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006028:	429a      	cmp	r2, r3
 800602a:	dd06      	ble.n	800603a <hagl_draw_line+0xb2>
 800602c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006030:	0fda      	lsrs	r2, r3, #31
 8006032:	4413      	add	r3, r2
 8006034:	105b      	asrs	r3, r3, #1
 8006036:	b21b      	sxth	r3, r3
 8006038:	e006      	b.n	8006048 <hagl_draw_line+0xc0>
 800603a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800603e:	0fda      	lsrs	r2, r3, #31
 8006040:	4413      	add	r3, r2
 8006042:	105b      	asrs	r3, r3, #1
 8006044:	425b      	negs	r3, r3
 8006046:	b21b      	sxth	r3, r3
 8006048:	82fb      	strh	r3, [r7, #22]

    while (1) {
        hagl_put_pixel(x0, y0, color);
 800604a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800604e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006052:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8006054:	4618      	mov	r0, r3
 8006056:	f7ff ff41 	bl	8005edc <hagl_put_pixel>

        if (x0 == x1 && y0 == y1) {
 800605a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800605e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006062:	429a      	cmp	r2, r3
 8006064:	d105      	bne.n	8006072 <hagl_draw_line+0xea>
 8006066:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800606a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800606e:	429a      	cmp	r2, r3
 8006070:	d02d      	beq.n	80060ce <hagl_draw_line+0x146>
            break;
        };

        e2 = err + err;
 8006072:	8afb      	ldrh	r3, [r7, #22]
 8006074:	005b      	lsls	r3, r3, #1
 8006076:	b29b      	uxth	r3, r3
 8006078:	81bb      	strh	r3, [r7, #12]

        if (e2 > -dx) {
 800607a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800607e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006082:	425b      	negs	r3, r3
 8006084:	429a      	cmp	r2, r3
 8006086:	dd0c      	ble.n	80060a2 <hagl_draw_line+0x11a>
            err -= dy;
 8006088:	8afa      	ldrh	r2, [r7, #22]
 800608a:	8a3b      	ldrh	r3, [r7, #16]
 800608c:	1ad3      	subs	r3, r2, r3
 800608e:	b29b      	uxth	r3, r3
 8006090:	82fb      	strh	r3, [r7, #22]
            x0 += sx;
 8006092:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006096:	b29a      	uxth	r2, r3
 8006098:	8a7b      	ldrh	r3, [r7, #18]
 800609a:	4413      	add	r3, r2
 800609c:	b29b      	uxth	r3, r3
 800609e:	b21b      	sxth	r3, r3
 80060a0:	80fb      	strh	r3, [r7, #6]
        }

        if (e2 < dy) {
 80060a2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80060a6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80060aa:	429a      	cmp	r2, r3
 80060ac:	dacd      	bge.n	800604a <hagl_draw_line+0xc2>
            err += dx;
 80060ae:	8afa      	ldrh	r2, [r7, #22]
 80060b0:	8abb      	ldrh	r3, [r7, #20]
 80060b2:	4413      	add	r3, r2
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	82fb      	strh	r3, [r7, #22]
            y0 += sy;
 80060b8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80060bc:	b29a      	uxth	r2, r3
 80060be:	89fb      	ldrh	r3, [r7, #14]
 80060c0:	4413      	add	r3, r2
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	b21b      	sxth	r3, r3
 80060c6:	80bb      	strh	r3, [r7, #4]
        hagl_put_pixel(x0, y0, color);
 80060c8:	e7bf      	b.n	800604a <hagl_draw_line+0xc2>
        return;
 80060ca:	bf00      	nop
 80060cc:	e000      	b.n	80060d0 <hagl_draw_line+0x148>
            break;
 80060ce:	bf00      	nop
        }
    }
}
 80060d0:	371c      	adds	r7, #28
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060d6:	bf00      	nop
 80060d8:	2000000c 	.word	0x2000000c

080060dc <hagl_fill_rectangle>:

/*
 * Draw a filled rectangle with given color.
 */
void hagl_fill_rectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 80060dc:	b590      	push	{r4, r7, lr}
 80060de:	b085      	sub	sp, #20
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	4604      	mov	r4, r0
 80060e4:	4608      	mov	r0, r1
 80060e6:	4611      	mov	r1, r2
 80060e8:	461a      	mov	r2, r3
 80060ea:	4623      	mov	r3, r4
 80060ec:	80fb      	strh	r3, [r7, #6]
 80060ee:	4603      	mov	r3, r0
 80060f0:	80bb      	strh	r3, [r7, #4]
 80060f2:	460b      	mov	r3, r1
 80060f4:	807b      	strh	r3, [r7, #2]
 80060f6:	4613      	mov	r3, r2
 80060f8:	803b      	strh	r3, [r7, #0]
    /* Make sure x0 is smaller than x1. */
    if (x0 > x1) {
 80060fa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80060fe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006102:	429a      	cmp	r2, r3
 8006104:	dd0e      	ble.n	8006124 <hagl_fill_rectangle+0x48>
        x0 = x0 + x1;
 8006106:	88fa      	ldrh	r2, [r7, #6]
 8006108:	887b      	ldrh	r3, [r7, #2]
 800610a:	4413      	add	r3, r2
 800610c:	b29b      	uxth	r3, r3
 800610e:	80fb      	strh	r3, [r7, #6]
        x1 = x0 - x1;
 8006110:	88fa      	ldrh	r2, [r7, #6]
 8006112:	887b      	ldrh	r3, [r7, #2]
 8006114:	1ad3      	subs	r3, r2, r3
 8006116:	b29b      	uxth	r3, r3
 8006118:	807b      	strh	r3, [r7, #2]
        x0 = x0 - x1;
 800611a:	88fa      	ldrh	r2, [r7, #6]
 800611c:	887b      	ldrh	r3, [r7, #2]
 800611e:	1ad3      	subs	r3, r2, r3
 8006120:	b29b      	uxth	r3, r3
 8006122:	80fb      	strh	r3, [r7, #6]
    }

    /* Make sure y0 is smaller than y1. */
    if (y0 > y1) {
 8006124:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8006128:	f9b7 3000 	ldrsh.w	r3, [r7]
 800612c:	429a      	cmp	r2, r3
 800612e:	dd0e      	ble.n	800614e <hagl_fill_rectangle+0x72>
        y0 = y0 + y1;
 8006130:	88ba      	ldrh	r2, [r7, #4]
 8006132:	883b      	ldrh	r3, [r7, #0]
 8006134:	4413      	add	r3, r2
 8006136:	b29b      	uxth	r3, r3
 8006138:	80bb      	strh	r3, [r7, #4]
        y1 = y0 - y1;
 800613a:	88ba      	ldrh	r2, [r7, #4]
 800613c:	883b      	ldrh	r3, [r7, #0]
 800613e:	1ad3      	subs	r3, r2, r3
 8006140:	b29b      	uxth	r3, r3
 8006142:	803b      	strh	r3, [r7, #0]
        y0 = y0 - y1;
 8006144:	88ba      	ldrh	r2, [r7, #4]
 8006146:	883b      	ldrh	r3, [r7, #0]
 8006148:	1ad3      	subs	r3, r2, r3
 800614a:	b29b      	uxth	r3, r3
 800614c:	80bb      	strh	r3, [r7, #4]
    }

    /* x1 or y1 is before the edge, nothing to do. */
    if ((x1 < clip_window.x0) || (y1 < clip_window.y0))  {
 800614e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006152:	4a33      	ldr	r2, [pc, #204]	; (8006220 <hagl_fill_rectangle+0x144>)
 8006154:	8812      	ldrh	r2, [r2, #0]
 8006156:	4293      	cmp	r3, r2
 8006158:	db5b      	blt.n	8006212 <hagl_fill_rectangle+0x136>
 800615a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800615e:	4a30      	ldr	r2, [pc, #192]	; (8006220 <hagl_fill_rectangle+0x144>)
 8006160:	8852      	ldrh	r2, [r2, #2]
 8006162:	4293      	cmp	r3, r2
 8006164:	db55      	blt.n	8006212 <hagl_fill_rectangle+0x136>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 8006166:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800616a:	4a2d      	ldr	r2, [pc, #180]	; (8006220 <hagl_fill_rectangle+0x144>)
 800616c:	8892      	ldrh	r2, [r2, #4]
 800616e:	4293      	cmp	r3, r2
 8006170:	dc51      	bgt.n	8006216 <hagl_fill_rectangle+0x13a>
 8006172:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006176:	4a2a      	ldr	r2, [pc, #168]	; (8006220 <hagl_fill_rectangle+0x144>)
 8006178:	88d2      	ldrh	r2, [r2, #6]
 800617a:	4293      	cmp	r3, r2
 800617c:	dc4b      	bgt.n	8006216 <hagl_fill_rectangle+0x13a>
        return;
    }

    x0 = max(x0, clip_window.x0);
 800617e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006182:	4a27      	ldr	r2, [pc, #156]	; (8006220 <hagl_fill_rectangle+0x144>)
 8006184:	8812      	ldrh	r2, [r2, #0]
 8006186:	4611      	mov	r1, r2
 8006188:	4618      	mov	r0, r3
 800618a:	f7ff fe72 	bl	8005e72 <max>
 800618e:	4603      	mov	r3, r0
 8006190:	80fb      	strh	r3, [r7, #6]
    y0 = max(y0, clip_window.y0);
 8006192:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006196:	4a22      	ldr	r2, [pc, #136]	; (8006220 <hagl_fill_rectangle+0x144>)
 8006198:	8852      	ldrh	r2, [r2, #2]
 800619a:	4611      	mov	r1, r2
 800619c:	4618      	mov	r0, r3
 800619e:	f7ff fe68 	bl	8005e72 <max>
 80061a2:	4603      	mov	r3, r0
 80061a4:	80bb      	strh	r3, [r7, #4]
    x1 = min(x1, clip_window.x1);
 80061a6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80061aa:	4a1d      	ldr	r2, [pc, #116]	; (8006220 <hagl_fill_rectangle+0x144>)
 80061ac:	8892      	ldrh	r2, [r2, #4]
 80061ae:	4611      	mov	r1, r2
 80061b0:	4618      	mov	r0, r3
 80061b2:	f7ff fe4c 	bl	8005e4e <min>
 80061b6:	4603      	mov	r3, r0
 80061b8:	807b      	strh	r3, [r7, #2]
    y1 = min(y1, clip_window.y1);
 80061ba:	f9b7 3000 	ldrsh.w	r3, [r7]
 80061be:	4a18      	ldr	r2, [pc, #96]	; (8006220 <hagl_fill_rectangle+0x144>)
 80061c0:	88d2      	ldrh	r2, [r2, #6]
 80061c2:	4611      	mov	r1, r2
 80061c4:	4618      	mov	r0, r3
 80061c6:	f7ff fe42 	bl	8005e4e <min>
 80061ca:	4603      	mov	r3, r0
 80061cc:	803b      	strh	r3, [r7, #0]

    uint16_t width = x1 - x0 + 1;
 80061ce:	887a      	ldrh	r2, [r7, #2]
 80061d0:	88fb      	ldrh	r3, [r7, #6]
 80061d2:	1ad3      	subs	r3, r2, r3
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	3301      	adds	r3, #1
 80061d8:	81bb      	strh	r3, [r7, #12]
    uint16_t height = y1 - y0 + 1;
 80061da:	883a      	ldrh	r2, [r7, #0]
 80061dc:	88bb      	ldrh	r3, [r7, #4]
 80061de:	1ad3      	subs	r3, r2, r3
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	3301      	adds	r3, #1
 80061e4:	817b      	strh	r3, [r7, #10]

    for (uint16_t i = 0; i < height; i++) {
 80061e6:	2300      	movs	r3, #0
 80061e8:	81fb      	strh	r3, [r7, #14]
 80061ea:	e00d      	b.n	8006208 <hagl_fill_rectangle+0x12c>
#ifdef HAGL_HAS_HAL_HLINE
        /* Already clipped so can call HAL directly. */
        hagl_hal_hline(x0, y0 + i, width, color);
#else
        hagl_draw_hline(x0, y0 + i, width, color);
 80061ec:	88ba      	ldrh	r2, [r7, #4]
 80061ee:	89fb      	ldrh	r3, [r7, #14]
 80061f0:	4413      	add	r3, r2
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	b219      	sxth	r1, r3
 80061f6:	8c3b      	ldrh	r3, [r7, #32]
 80061f8:	89ba      	ldrh	r2, [r7, #12]
 80061fa:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80061fe:	f7ff fe9f 	bl	8005f40 <hagl_draw_hline>
    for (uint16_t i = 0; i < height; i++) {
 8006202:	89fb      	ldrh	r3, [r7, #14]
 8006204:	3301      	adds	r3, #1
 8006206:	81fb      	strh	r3, [r7, #14]
 8006208:	89fa      	ldrh	r2, [r7, #14]
 800620a:	897b      	ldrh	r3, [r7, #10]
 800620c:	429a      	cmp	r2, r3
 800620e:	d3ed      	bcc.n	80061ec <hagl_fill_rectangle+0x110>
 8006210:	e002      	b.n	8006218 <hagl_fill_rectangle+0x13c>
        return;
 8006212:	bf00      	nop
 8006214:	e000      	b.n	8006218 <hagl_fill_rectangle+0x13c>
        return;
 8006216:	bf00      	nop
#endif
    }
}
 8006218:	3714      	adds	r7, #20
 800621a:	46bd      	mov	sp, r7
 800621c:	bd90      	pop	{r4, r7, pc}
 800621e:	bf00      	nop
 8006220:	2000000c 	.word	0x2000000c

08006224 <hagl_put_char>:

    return 0;
}

uint8_t hagl_put_char(wchar_t code, int16_t x0, int16_t y0, color_t color, const uint8_t *font)
{
 8006224:	b590      	push	{r4, r7, lr}
 8006226:	f5ad 5d81 	sub.w	sp, sp, #4128	; 0x1020
 800622a:	b085      	sub	sp, #20
 800622c:	af00      	add	r7, sp, #0
 800622e:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8006232:	f844 0c24 	str.w	r0, [r4, #-36]
 8006236:	460c      	mov	r4, r1
 8006238:	4610      	mov	r0, r2
 800623a:	4619      	mov	r1, r3
 800623c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006240:	4622      	mov	r2, r4
 8006242:	f823 2c26 	strh.w	r2, [r3, #-38]
 8006246:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800624a:	4602      	mov	r2, r0
 800624c:	f823 2c28 	strh.w	r2, [r3, #-40]
 8006250:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006254:	460a      	mov	r2, r1
 8006256:	f823 2c2a 	strh.w	r2, [r3, #-42]
    uint8_t set, status;
    color_t buffer[HAGL_CHAR_BUFFER_SIZE];
    bitmap_t bitmap;
    fontx_glyph_t glyph;

    status = fontx_glyph(&glyph, code, font);
 800625a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800625e:	4619      	mov	r1, r3
 8006260:	f107 0310 	add.w	r3, r7, #16
 8006264:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006268:	6812      	ldr	r2, [r2, #0]
 800626a:	f851 1c24 	ldr.w	r1, [r1, #-36]
 800626e:	4618      	mov	r0, r3
 8006270:	f7ff fd5b 	bl	8005d2a <fontx_glyph>
 8006274:	4603      	mov	r3, r0
 8006276:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800627a:	f102 0209 	add.w	r2, r2, #9
 800627e:	7013      	strb	r3, [r2, #0]

    if (0 != status) {
 8006280:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8006284:	f103 0309 	add.w	r3, r3, #9
 8006288:	781b      	ldrb	r3, [r3, #0]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d001      	beq.n	8006292 <hagl_put_char+0x6e>
        return 0;
 800628e:	2300      	movs	r3, #0
 8006290:	e0c9      	b.n	8006426 <hagl_put_char+0x202>
    }

    bitmap.width = glyph.width,
 8006292:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006296:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800629a:	b29a      	uxth	r2, r3
 800629c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80062a0:	f823 2c18 	strh.w	r2, [r3, #-24]
    bitmap.height = glyph.height,
 80062a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80062a8:	f813 3c1f 	ldrb.w	r3, [r3, #-31]
 80062ac:	b29a      	uxth	r2, r3
 80062ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80062b2:	f823 2c16 	strh.w	r2, [r3, #-22]
    bitmap.depth = DISPLAY_DEPTH,
 80062b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80062ba:	2210      	movs	r2, #16
 80062bc:	f803 2c12 	strb.w	r2, [r3, #-18]

    bitmap_init(&bitmap, (uint8_t *)buffer);
 80062c0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80062c4:	3a08      	subs	r2, #8
 80062c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80062ca:	3b18      	subs	r3, #24
 80062cc:	4611      	mov	r1, r2
 80062ce:	4618      	mov	r0, r3
 80062d0:	f7ff fb95 	bl	80059fe <bitmap_init>

    color_t *ptr = (color_t *) bitmap.buffer;
 80062d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80062d8:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 80062dc:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80062e0:	f102 020c 	add.w	r2, r2, #12
 80062e4:	6013      	str	r3, [r2, #0]

    for (uint8_t y = 0; y < glyph.height; y++) {
 80062e6:	2300      	movs	r3, #0
 80062e8:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80062ec:	f102 020b 	add.w	r2, r2, #11
 80062f0:	7013      	strb	r3, [r2, #0]
 80062f2:	e079      	b.n	80063e8 <hagl_put_char+0x1c4>
        for (uint8_t x = 0; x < glyph.width; x++) {
 80062f4:	2300      	movs	r3, #0
 80062f6:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80062fa:	f102 020a 	add.w	r2, r2, #10
 80062fe:	7013      	strb	r3, [r2, #0]
 8006300:	e04f      	b.n	80063a2 <hagl_put_char+0x17e>
            set = *(glyph.buffer + x / 8) & (0x80 >> (x % 8));
 8006302:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006306:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 800630a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800630e:	f102 020a 	add.w	r2, r2, #10
 8006312:	7812      	ldrb	r2, [r2, #0]
 8006314:	08d2      	lsrs	r2, r2, #3
 8006316:	b2d2      	uxtb	r2, r2
 8006318:	4413      	add	r3, r2
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	b25a      	sxtb	r2, r3
 800631e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8006322:	f103 030a 	add.w	r3, r3, #10
 8006326:	781b      	ldrb	r3, [r3, #0]
 8006328:	f003 0307 	and.w	r3, r3, #7
 800632c:	2180      	movs	r1, #128	; 0x80
 800632e:	fa41 f303 	asr.w	r3, r1, r3
 8006332:	b25b      	sxtb	r3, r3
 8006334:	4013      	ands	r3, r2
 8006336:	b25b      	sxtb	r3, r3
 8006338:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800633c:	f102 0208 	add.w	r2, r2, #8
 8006340:	7013      	strb	r3, [r2, #0]
            if (set) {
 8006342:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8006346:	f103 0308 	add.w	r3, r3, #8
 800634a:	781b      	ldrb	r3, [r3, #0]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d010      	beq.n	8006372 <hagl_put_char+0x14e>
                *(ptr++) = color;
 8006350:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8006354:	f103 030c 	add.w	r3, r3, #12
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	1c9a      	adds	r2, r3, #2
 800635c:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 8006360:	f101 010c 	add.w	r1, r1, #12
 8006364:	600a      	str	r2, [r1, #0]
 8006366:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800636a:	f832 2c2a 	ldrh.w	r2, [r2, #-42]
 800636e:	801a      	strh	r2, [r3, #0]
 8006370:	e00c      	b.n	800638c <hagl_put_char+0x168>
            } else {
                *(ptr++) = 0x0000;
 8006372:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8006376:	f103 030c 	add.w	r3, r3, #12
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	1c9a      	adds	r2, r3, #2
 800637e:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 8006382:	f101 010c 	add.w	r1, r1, #12
 8006386:	600a      	str	r2, [r1, #0]
 8006388:	2200      	movs	r2, #0
 800638a:	801a      	strh	r2, [r3, #0]
        for (uint8_t x = 0; x < glyph.width; x++) {
 800638c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8006390:	f103 030a 	add.w	r3, r3, #10
 8006394:	781b      	ldrb	r3, [r3, #0]
 8006396:	3301      	adds	r3, #1
 8006398:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800639c:	f102 020a 	add.w	r2, r2, #10
 80063a0:	7013      	strb	r3, [r2, #0]
 80063a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80063a6:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80063aa:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80063ae:	f102 020a 	add.w	r2, r2, #10
 80063b2:	7812      	ldrb	r2, [r2, #0]
 80063b4:	429a      	cmp	r2, r3
 80063b6:	d3a4      	bcc.n	8006302 <hagl_put_char+0xde>
            }
        }
        glyph.buffer += glyph.pitch;
 80063b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80063bc:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 80063c0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80063c4:	f812 2c1d 	ldrb.w	r2, [r2, #-29]
 80063c8:	4413      	add	r3, r2
 80063ca:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80063ce:	f842 3c1c 	str.w	r3, [r2, #-28]
    for (uint8_t y = 0; y < glyph.height; y++) {
 80063d2:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80063d6:	f103 030b 	add.w	r3, r3, #11
 80063da:	781b      	ldrb	r3, [r3, #0]
 80063dc:	3301      	adds	r3, #1
 80063de:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80063e2:	f102 020b 	add.w	r2, r2, #11
 80063e6:	7013      	strb	r3, [r2, #0]
 80063e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80063ec:	f813 3c1f 	ldrb.w	r3, [r3, #-31]
 80063f0:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80063f4:	f102 020b 	add.w	r2, r2, #11
 80063f8:	7812      	ldrb	r2, [r2, #0]
 80063fa:	429a      	cmp	r2, r3
 80063fc:	f4ff af7a 	bcc.w	80062f4 <hagl_put_char+0xd0>
    }

    hagl_blit(x0, y0, &bitmap);
 8006400:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006404:	3b18      	subs	r3, #24
 8006406:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800640a:	f932 1c28 	ldrsh.w	r1, [r2, #-40]
 800640e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006412:	f932 0c26 	ldrsh.w	r0, [r2, #-38]
 8006416:	461a      	mov	r2, r3
 8006418:	f000 f85a 	bl	80064d0 <hagl_blit>

    return bitmap.width;
 800641c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006420:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8006424:	b2db      	uxtb	r3, r3
}
 8006426:	4618      	mov	r0, r3
 8006428:	f507 5781 	add.w	r7, r7, #4128	; 0x1020
 800642c:	3714      	adds	r7, #20
 800642e:	46bd      	mov	sp, r7
 8006430:	bd90      	pop	{r4, r7, pc}

08006432 <hagl_put_text>:
 * Write a string of text by calling hagl_put_char() repeadetly. CR and LF
 * continue from the next line.
 */

uint16_t hagl_put_text(const wchar_t *str, int16_t x0, int16_t y0, color_t color, const unsigned char *font)
{
 8006432:	b580      	push	{r7, lr}
 8006434:	b08c      	sub	sp, #48	; 0x30
 8006436:	af02      	add	r7, sp, #8
 8006438:	60f8      	str	r0, [r7, #12]
 800643a:	4608      	mov	r0, r1
 800643c:	4611      	mov	r1, r2
 800643e:	461a      	mov	r2, r3
 8006440:	4603      	mov	r3, r0
 8006442:	817b      	strh	r3, [r7, #10]
 8006444:	460b      	mov	r3, r1
 8006446:	813b      	strh	r3, [r7, #8]
 8006448:	4613      	mov	r3, r2
 800644a:	80fb      	strh	r3, [r7, #6]
    wchar_t temp;
    uint8_t status;
    uint16_t original = x0;
 800644c:	897b      	ldrh	r3, [r7, #10]
 800644e:	84fb      	strh	r3, [r7, #38]	; 0x26
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 8006450:	f107 0314 	add.w	r3, r7, #20
 8006454:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006456:	4618      	mov	r0, r3
 8006458:	f7ff fc4a 	bl	8005cf0 <fontx_meta>
 800645c:	4603      	mov	r3, r0
 800645e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    if (0 != status) {
 8006462:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8006466:	2b00      	cmp	r3, #0
 8006468:	d001      	beq.n	800646e <hagl_put_text+0x3c>
        return 0;
 800646a:	2300      	movs	r3, #0
 800646c:	e02c      	b.n	80064c8 <hagl_put_text+0x96>
    }

    do {
        temp = *str++;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	1d1a      	adds	r2, r3, #4
 8006472:	60fa      	str	r2, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	623b      	str	r3, [r7, #32]
        if (13 == temp || 10 == temp) {
 8006478:	6a3b      	ldr	r3, [r7, #32]
 800647a:	2b0d      	cmp	r3, #13
 800647c:	d002      	beq.n	8006484 <hagl_put_text+0x52>
 800647e:	6a3b      	ldr	r3, [r7, #32]
 8006480:	2b0a      	cmp	r3, #10
 8006482:	d108      	bne.n	8006496 <hagl_put_text+0x64>
            x0 = 0;
 8006484:	2300      	movs	r3, #0
 8006486:	817b      	strh	r3, [r7, #10]
            y0 += meta.height;
 8006488:	7fbb      	ldrb	r3, [r7, #30]
 800648a:	b29a      	uxth	r2, r3
 800648c:	893b      	ldrh	r3, [r7, #8]
 800648e:	4413      	add	r3, r2
 8006490:	b29b      	uxth	r3, r3
 8006492:	813b      	strh	r3, [r7, #8]
 8006494:	e010      	b.n	80064b8 <hagl_put_text+0x86>
        } else {
            x0 += hagl_put_char(temp, x0, y0, color, font);
 8006496:	88f8      	ldrh	r0, [r7, #6]
 8006498:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800649c:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80064a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a2:	9300      	str	r3, [sp, #0]
 80064a4:	4603      	mov	r3, r0
 80064a6:	6a38      	ldr	r0, [r7, #32]
 80064a8:	f7ff febc 	bl	8006224 <hagl_put_char>
 80064ac:	4603      	mov	r3, r0
 80064ae:	b29a      	uxth	r2, r3
 80064b0:	897b      	ldrh	r3, [r7, #10]
 80064b2:	4413      	add	r3, r2
 80064b4:	b29b      	uxth	r3, r3
 80064b6:	817b      	strh	r3, [r7, #10]
        }
    } while (*str != 0);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d1d6      	bne.n	800646e <hagl_put_text+0x3c>

    return x0 - original;
 80064c0:	897a      	ldrh	r2, [r7, #10]
 80064c2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80064c4:	1ad3      	subs	r3, r2, r3
 80064c6:	b29b      	uxth	r3, r3
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3728      	adds	r7, #40	; 0x28
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}

080064d0 <hagl_blit>:
 * configurable source and destination see the file blit.c.
 *
 * TODO: Handle transparency.
 */

void hagl_blit(int16_t x0, int16_t y0, bitmap_t *source) {
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b086      	sub	sp, #24
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	4603      	mov	r3, r0
 80064d8:	603a      	str	r2, [r7, #0]
 80064da:	80fb      	strh	r3, [r7, #6]
 80064dc:	460b      	mov	r3, r1
 80064de:	80bb      	strh	r3, [r7, #4]
        /* Inside of bounds, can use HAL provided blit. */
        hagl_hal_blit(x0, y0, source);
    }
#else
    color_t color;
    color_t *ptr = (color_t *) source->buffer;
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	68db      	ldr	r3, [r3, #12]
 80064e4:	617b      	str	r3, [r7, #20]

    for (uint16_t y = 0; y < source->height; y++) {
 80064e6:	2300      	movs	r3, #0
 80064e8:	827b      	strh	r3, [r7, #18]
 80064ea:	e020      	b.n	800652e <hagl_blit+0x5e>
        for (uint16_t x = 0; x < source->width; x++) {
 80064ec:	2300      	movs	r3, #0
 80064ee:	823b      	strh	r3, [r7, #16]
 80064f0:	e015      	b.n	800651e <hagl_blit+0x4e>
            color = *(ptr++);
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	1c9a      	adds	r2, r3, #2
 80064f6:	617a      	str	r2, [r7, #20]
 80064f8:	881b      	ldrh	r3, [r3, #0]
 80064fa:	81fb      	strh	r3, [r7, #14]
            hagl_put_pixel(x0 + x, y0 + y, color);
 80064fc:	88fa      	ldrh	r2, [r7, #6]
 80064fe:	8a3b      	ldrh	r3, [r7, #16]
 8006500:	4413      	add	r3, r2
 8006502:	b29b      	uxth	r3, r3
 8006504:	b218      	sxth	r0, r3
 8006506:	88ba      	ldrh	r2, [r7, #4]
 8006508:	8a7b      	ldrh	r3, [r7, #18]
 800650a:	4413      	add	r3, r2
 800650c:	b29b      	uxth	r3, r3
 800650e:	b21b      	sxth	r3, r3
 8006510:	89fa      	ldrh	r2, [r7, #14]
 8006512:	4619      	mov	r1, r3
 8006514:	f7ff fce2 	bl	8005edc <hagl_put_pixel>
        for (uint16_t x = 0; x < source->width; x++) {
 8006518:	8a3b      	ldrh	r3, [r7, #16]
 800651a:	3301      	adds	r3, #1
 800651c:	823b      	strh	r3, [r7, #16]
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	881b      	ldrh	r3, [r3, #0]
 8006522:	8a3a      	ldrh	r2, [r7, #16]
 8006524:	429a      	cmp	r2, r3
 8006526:	d3e4      	bcc.n	80064f2 <hagl_blit+0x22>
    for (uint16_t y = 0; y < source->height; y++) {
 8006528:	8a7b      	ldrh	r3, [r7, #18]
 800652a:	3301      	adds	r3, #1
 800652c:	827b      	strh	r3, [r7, #18]
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	885b      	ldrh	r3, [r3, #2]
 8006532:	8a7a      	ldrh	r2, [r7, #18]
 8006534:	429a      	cmp	r2, r3
 8006536:	d3d9      	bcc.n	80064ec <hagl_blit+0x1c>
        }
    }
#endif
};
 8006538:	bf00      	nop
 800653a:	bf00      	nop
 800653c:	3718      	adds	r7, #24
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}
	...

08006544 <hagl_clear_screen>:
        }
    }
#endif
};

void hagl_clear_screen() {
 8006544:	b580      	push	{r7, lr}
 8006546:	b084      	sub	sp, #16
 8006548:	af02      	add	r7, sp, #8
#ifdef HAGL_HAS_HAL_CLEAR_SCREEN
    hagl_hal_clear_screen();
#else
    uint16_t x0 = clip_window.x0;
 800654a:	4b12      	ldr	r3, [pc, #72]	; (8006594 <hagl_clear_screen+0x50>)
 800654c:	881b      	ldrh	r3, [r3, #0]
 800654e:	80fb      	strh	r3, [r7, #6]
    uint16_t y0 = clip_window.y0;
 8006550:	4b10      	ldr	r3, [pc, #64]	; (8006594 <hagl_clear_screen+0x50>)
 8006552:	885b      	ldrh	r3, [r3, #2]
 8006554:	80bb      	strh	r3, [r7, #4]
    uint16_t x1 = clip_window.x1;
 8006556:	4b0f      	ldr	r3, [pc, #60]	; (8006594 <hagl_clear_screen+0x50>)
 8006558:	889b      	ldrh	r3, [r3, #4]
 800655a:	807b      	strh	r3, [r7, #2]
    uint16_t y1 = clip_window.y1;
 800655c:	4b0d      	ldr	r3, [pc, #52]	; (8006594 <hagl_clear_screen+0x50>)
 800655e:	88db      	ldrh	r3, [r3, #6]
 8006560:	803b      	strh	r3, [r7, #0]

    hagl_set_clip_window(0, 0, DISPLAY_WIDTH - 1, DISPLAY_HEIGHT -1);
 8006562:	237f      	movs	r3, #127	; 0x7f
 8006564:	229f      	movs	r2, #159	; 0x9f
 8006566:	2100      	movs	r1, #0
 8006568:	2000      	movs	r0, #0
 800656a:	f7ff fc95 	bl	8005e98 <hagl_set_clip_window>
    hagl_fill_rectangle(0, 0, DISPLAY_WIDTH - 1, DISPLAY_HEIGHT -1, 0x00);
 800656e:	2300      	movs	r3, #0
 8006570:	9300      	str	r3, [sp, #0]
 8006572:	237f      	movs	r3, #127	; 0x7f
 8006574:	229f      	movs	r2, #159	; 0x9f
 8006576:	2100      	movs	r1, #0
 8006578:	2000      	movs	r0, #0
 800657a:	f7ff fdaf 	bl	80060dc <hagl_fill_rectangle>
    hagl_set_clip_window(x0, y0, x1, y1);
 800657e:	883b      	ldrh	r3, [r7, #0]
 8006580:	887a      	ldrh	r2, [r7, #2]
 8006582:	88b9      	ldrh	r1, [r7, #4]
 8006584:	88f8      	ldrh	r0, [r7, #6]
 8006586:	f7ff fc87 	bl	8005e98 <hagl_set_clip_window>
#endif
}
 800658a:	bf00      	nop
 800658c:	3708      	adds	r7, #8
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}
 8006592:	bf00      	nop
 8006594:	2000000c 	.word	0x2000000c

08006598 <hagl_init>:
#else
    return rgb565(r, g, b);
#endif
}

bitmap_t *hagl_init() {
 8006598:	b580      	push	{r7, lr}
 800659a:	af00      	add	r7, sp, #0
#ifdef HAGL_HAS_HAL_INIT
    bitmap_t *bb = hagl_hal_init();
    hagl_clear_screen();
    return bb;
#else
    hagl_clear_screen();
 800659c:	f7ff ffd2 	bl	8006544 <hagl_clear_screen>
    return NULL;
 80065a0:	2300      	movs	r3, #0
#endif
};
 80065a2:	4618      	mov	r0, r3
 80065a4:	bd80      	pop	{r7, pc}
	...

080065a8 <__errno>:
 80065a8:	4b01      	ldr	r3, [pc, #4]	; (80065b0 <__errno+0x8>)
 80065aa:	6818      	ldr	r0, [r3, #0]
 80065ac:	4770      	bx	lr
 80065ae:	bf00      	nop
 80065b0:	20000014 	.word	0x20000014

080065b4 <__sflush_r>:
 80065b4:	898a      	ldrh	r2, [r1, #12]
 80065b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065ba:	4605      	mov	r5, r0
 80065bc:	0710      	lsls	r0, r2, #28
 80065be:	460c      	mov	r4, r1
 80065c0:	d458      	bmi.n	8006674 <__sflush_r+0xc0>
 80065c2:	684b      	ldr	r3, [r1, #4]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	dc05      	bgt.n	80065d4 <__sflush_r+0x20>
 80065c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	dc02      	bgt.n	80065d4 <__sflush_r+0x20>
 80065ce:	2000      	movs	r0, #0
 80065d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80065d6:	2e00      	cmp	r6, #0
 80065d8:	d0f9      	beq.n	80065ce <__sflush_r+0x1a>
 80065da:	2300      	movs	r3, #0
 80065dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80065e0:	682f      	ldr	r7, [r5, #0]
 80065e2:	602b      	str	r3, [r5, #0]
 80065e4:	d032      	beq.n	800664c <__sflush_r+0x98>
 80065e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80065e8:	89a3      	ldrh	r3, [r4, #12]
 80065ea:	075a      	lsls	r2, r3, #29
 80065ec:	d505      	bpl.n	80065fa <__sflush_r+0x46>
 80065ee:	6863      	ldr	r3, [r4, #4]
 80065f0:	1ac0      	subs	r0, r0, r3
 80065f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80065f4:	b10b      	cbz	r3, 80065fa <__sflush_r+0x46>
 80065f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80065f8:	1ac0      	subs	r0, r0, r3
 80065fa:	2300      	movs	r3, #0
 80065fc:	4602      	mov	r2, r0
 80065fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006600:	6a21      	ldr	r1, [r4, #32]
 8006602:	4628      	mov	r0, r5
 8006604:	47b0      	blx	r6
 8006606:	1c43      	adds	r3, r0, #1
 8006608:	89a3      	ldrh	r3, [r4, #12]
 800660a:	d106      	bne.n	800661a <__sflush_r+0x66>
 800660c:	6829      	ldr	r1, [r5, #0]
 800660e:	291d      	cmp	r1, #29
 8006610:	d82c      	bhi.n	800666c <__sflush_r+0xb8>
 8006612:	4a2a      	ldr	r2, [pc, #168]	; (80066bc <__sflush_r+0x108>)
 8006614:	40ca      	lsrs	r2, r1
 8006616:	07d6      	lsls	r6, r2, #31
 8006618:	d528      	bpl.n	800666c <__sflush_r+0xb8>
 800661a:	2200      	movs	r2, #0
 800661c:	6062      	str	r2, [r4, #4]
 800661e:	04d9      	lsls	r1, r3, #19
 8006620:	6922      	ldr	r2, [r4, #16]
 8006622:	6022      	str	r2, [r4, #0]
 8006624:	d504      	bpl.n	8006630 <__sflush_r+0x7c>
 8006626:	1c42      	adds	r2, r0, #1
 8006628:	d101      	bne.n	800662e <__sflush_r+0x7a>
 800662a:	682b      	ldr	r3, [r5, #0]
 800662c:	b903      	cbnz	r3, 8006630 <__sflush_r+0x7c>
 800662e:	6560      	str	r0, [r4, #84]	; 0x54
 8006630:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006632:	602f      	str	r7, [r5, #0]
 8006634:	2900      	cmp	r1, #0
 8006636:	d0ca      	beq.n	80065ce <__sflush_r+0x1a>
 8006638:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800663c:	4299      	cmp	r1, r3
 800663e:	d002      	beq.n	8006646 <__sflush_r+0x92>
 8006640:	4628      	mov	r0, r5
 8006642:	f000 fa21 	bl	8006a88 <_free_r>
 8006646:	2000      	movs	r0, #0
 8006648:	6360      	str	r0, [r4, #52]	; 0x34
 800664a:	e7c1      	b.n	80065d0 <__sflush_r+0x1c>
 800664c:	6a21      	ldr	r1, [r4, #32]
 800664e:	2301      	movs	r3, #1
 8006650:	4628      	mov	r0, r5
 8006652:	47b0      	blx	r6
 8006654:	1c41      	adds	r1, r0, #1
 8006656:	d1c7      	bne.n	80065e8 <__sflush_r+0x34>
 8006658:	682b      	ldr	r3, [r5, #0]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d0c4      	beq.n	80065e8 <__sflush_r+0x34>
 800665e:	2b1d      	cmp	r3, #29
 8006660:	d001      	beq.n	8006666 <__sflush_r+0xb2>
 8006662:	2b16      	cmp	r3, #22
 8006664:	d101      	bne.n	800666a <__sflush_r+0xb6>
 8006666:	602f      	str	r7, [r5, #0]
 8006668:	e7b1      	b.n	80065ce <__sflush_r+0x1a>
 800666a:	89a3      	ldrh	r3, [r4, #12]
 800666c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006670:	81a3      	strh	r3, [r4, #12]
 8006672:	e7ad      	b.n	80065d0 <__sflush_r+0x1c>
 8006674:	690f      	ldr	r7, [r1, #16]
 8006676:	2f00      	cmp	r7, #0
 8006678:	d0a9      	beq.n	80065ce <__sflush_r+0x1a>
 800667a:	0793      	lsls	r3, r2, #30
 800667c:	680e      	ldr	r6, [r1, #0]
 800667e:	bf08      	it	eq
 8006680:	694b      	ldreq	r3, [r1, #20]
 8006682:	600f      	str	r7, [r1, #0]
 8006684:	bf18      	it	ne
 8006686:	2300      	movne	r3, #0
 8006688:	eba6 0807 	sub.w	r8, r6, r7
 800668c:	608b      	str	r3, [r1, #8]
 800668e:	f1b8 0f00 	cmp.w	r8, #0
 8006692:	dd9c      	ble.n	80065ce <__sflush_r+0x1a>
 8006694:	6a21      	ldr	r1, [r4, #32]
 8006696:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006698:	4643      	mov	r3, r8
 800669a:	463a      	mov	r2, r7
 800669c:	4628      	mov	r0, r5
 800669e:	47b0      	blx	r6
 80066a0:	2800      	cmp	r0, #0
 80066a2:	dc06      	bgt.n	80066b2 <__sflush_r+0xfe>
 80066a4:	89a3      	ldrh	r3, [r4, #12]
 80066a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066aa:	81a3      	strh	r3, [r4, #12]
 80066ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80066b0:	e78e      	b.n	80065d0 <__sflush_r+0x1c>
 80066b2:	4407      	add	r7, r0
 80066b4:	eba8 0800 	sub.w	r8, r8, r0
 80066b8:	e7e9      	b.n	800668e <__sflush_r+0xda>
 80066ba:	bf00      	nop
 80066bc:	20400001 	.word	0x20400001

080066c0 <_fflush_r>:
 80066c0:	b538      	push	{r3, r4, r5, lr}
 80066c2:	690b      	ldr	r3, [r1, #16]
 80066c4:	4605      	mov	r5, r0
 80066c6:	460c      	mov	r4, r1
 80066c8:	b913      	cbnz	r3, 80066d0 <_fflush_r+0x10>
 80066ca:	2500      	movs	r5, #0
 80066cc:	4628      	mov	r0, r5
 80066ce:	bd38      	pop	{r3, r4, r5, pc}
 80066d0:	b118      	cbz	r0, 80066da <_fflush_r+0x1a>
 80066d2:	6983      	ldr	r3, [r0, #24]
 80066d4:	b90b      	cbnz	r3, 80066da <_fflush_r+0x1a>
 80066d6:	f000 f887 	bl	80067e8 <__sinit>
 80066da:	4b14      	ldr	r3, [pc, #80]	; (800672c <_fflush_r+0x6c>)
 80066dc:	429c      	cmp	r4, r3
 80066de:	d11b      	bne.n	8006718 <_fflush_r+0x58>
 80066e0:	686c      	ldr	r4, [r5, #4]
 80066e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d0ef      	beq.n	80066ca <_fflush_r+0xa>
 80066ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80066ec:	07d0      	lsls	r0, r2, #31
 80066ee:	d404      	bmi.n	80066fa <_fflush_r+0x3a>
 80066f0:	0599      	lsls	r1, r3, #22
 80066f2:	d402      	bmi.n	80066fa <_fflush_r+0x3a>
 80066f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80066f6:	f000 f93a 	bl	800696e <__retarget_lock_acquire_recursive>
 80066fa:	4628      	mov	r0, r5
 80066fc:	4621      	mov	r1, r4
 80066fe:	f7ff ff59 	bl	80065b4 <__sflush_r>
 8006702:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006704:	07da      	lsls	r2, r3, #31
 8006706:	4605      	mov	r5, r0
 8006708:	d4e0      	bmi.n	80066cc <_fflush_r+0xc>
 800670a:	89a3      	ldrh	r3, [r4, #12]
 800670c:	059b      	lsls	r3, r3, #22
 800670e:	d4dd      	bmi.n	80066cc <_fflush_r+0xc>
 8006710:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006712:	f000 f92d 	bl	8006970 <__retarget_lock_release_recursive>
 8006716:	e7d9      	b.n	80066cc <_fflush_r+0xc>
 8006718:	4b05      	ldr	r3, [pc, #20]	; (8006730 <_fflush_r+0x70>)
 800671a:	429c      	cmp	r4, r3
 800671c:	d101      	bne.n	8006722 <_fflush_r+0x62>
 800671e:	68ac      	ldr	r4, [r5, #8]
 8006720:	e7df      	b.n	80066e2 <_fflush_r+0x22>
 8006722:	4b04      	ldr	r3, [pc, #16]	; (8006734 <_fflush_r+0x74>)
 8006724:	429c      	cmp	r4, r3
 8006726:	bf08      	it	eq
 8006728:	68ec      	ldreq	r4, [r5, #12]
 800672a:	e7da      	b.n	80066e2 <_fflush_r+0x22>
 800672c:	0800f1e0 	.word	0x0800f1e0
 8006730:	0800f200 	.word	0x0800f200
 8006734:	0800f1c0 	.word	0x0800f1c0

08006738 <std>:
 8006738:	2300      	movs	r3, #0
 800673a:	b510      	push	{r4, lr}
 800673c:	4604      	mov	r4, r0
 800673e:	e9c0 3300 	strd	r3, r3, [r0]
 8006742:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006746:	6083      	str	r3, [r0, #8]
 8006748:	8181      	strh	r1, [r0, #12]
 800674a:	6643      	str	r3, [r0, #100]	; 0x64
 800674c:	81c2      	strh	r2, [r0, #14]
 800674e:	6183      	str	r3, [r0, #24]
 8006750:	4619      	mov	r1, r3
 8006752:	2208      	movs	r2, #8
 8006754:	305c      	adds	r0, #92	; 0x5c
 8006756:	f000 f98f 	bl	8006a78 <memset>
 800675a:	4b05      	ldr	r3, [pc, #20]	; (8006770 <std+0x38>)
 800675c:	6263      	str	r3, [r4, #36]	; 0x24
 800675e:	4b05      	ldr	r3, [pc, #20]	; (8006774 <std+0x3c>)
 8006760:	62a3      	str	r3, [r4, #40]	; 0x28
 8006762:	4b05      	ldr	r3, [pc, #20]	; (8006778 <std+0x40>)
 8006764:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006766:	4b05      	ldr	r3, [pc, #20]	; (800677c <std+0x44>)
 8006768:	6224      	str	r4, [r4, #32]
 800676a:	6323      	str	r3, [r4, #48]	; 0x30
 800676c:	bd10      	pop	{r4, pc}
 800676e:	bf00      	nop
 8006770:	08007659 	.word	0x08007659
 8006774:	0800767b 	.word	0x0800767b
 8006778:	080076b3 	.word	0x080076b3
 800677c:	080076d7 	.word	0x080076d7

08006780 <_cleanup_r>:
 8006780:	4901      	ldr	r1, [pc, #4]	; (8006788 <_cleanup_r+0x8>)
 8006782:	f000 b8af 	b.w	80068e4 <_fwalk_reent>
 8006786:	bf00      	nop
 8006788:	080066c1 	.word	0x080066c1

0800678c <__sfmoreglue>:
 800678c:	b570      	push	{r4, r5, r6, lr}
 800678e:	2268      	movs	r2, #104	; 0x68
 8006790:	1e4d      	subs	r5, r1, #1
 8006792:	4355      	muls	r5, r2
 8006794:	460e      	mov	r6, r1
 8006796:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800679a:	f000 f9e1 	bl	8006b60 <_malloc_r>
 800679e:	4604      	mov	r4, r0
 80067a0:	b140      	cbz	r0, 80067b4 <__sfmoreglue+0x28>
 80067a2:	2100      	movs	r1, #0
 80067a4:	e9c0 1600 	strd	r1, r6, [r0]
 80067a8:	300c      	adds	r0, #12
 80067aa:	60a0      	str	r0, [r4, #8]
 80067ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80067b0:	f000 f962 	bl	8006a78 <memset>
 80067b4:	4620      	mov	r0, r4
 80067b6:	bd70      	pop	{r4, r5, r6, pc}

080067b8 <__sfp_lock_acquire>:
 80067b8:	4801      	ldr	r0, [pc, #4]	; (80067c0 <__sfp_lock_acquire+0x8>)
 80067ba:	f000 b8d8 	b.w	800696e <__retarget_lock_acquire_recursive>
 80067be:	bf00      	nop
 80067c0:	20000355 	.word	0x20000355

080067c4 <__sfp_lock_release>:
 80067c4:	4801      	ldr	r0, [pc, #4]	; (80067cc <__sfp_lock_release+0x8>)
 80067c6:	f000 b8d3 	b.w	8006970 <__retarget_lock_release_recursive>
 80067ca:	bf00      	nop
 80067cc:	20000355 	.word	0x20000355

080067d0 <__sinit_lock_acquire>:
 80067d0:	4801      	ldr	r0, [pc, #4]	; (80067d8 <__sinit_lock_acquire+0x8>)
 80067d2:	f000 b8cc 	b.w	800696e <__retarget_lock_acquire_recursive>
 80067d6:	bf00      	nop
 80067d8:	20000356 	.word	0x20000356

080067dc <__sinit_lock_release>:
 80067dc:	4801      	ldr	r0, [pc, #4]	; (80067e4 <__sinit_lock_release+0x8>)
 80067de:	f000 b8c7 	b.w	8006970 <__retarget_lock_release_recursive>
 80067e2:	bf00      	nop
 80067e4:	20000356 	.word	0x20000356

080067e8 <__sinit>:
 80067e8:	b510      	push	{r4, lr}
 80067ea:	4604      	mov	r4, r0
 80067ec:	f7ff fff0 	bl	80067d0 <__sinit_lock_acquire>
 80067f0:	69a3      	ldr	r3, [r4, #24]
 80067f2:	b11b      	cbz	r3, 80067fc <__sinit+0x14>
 80067f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067f8:	f7ff bff0 	b.w	80067dc <__sinit_lock_release>
 80067fc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006800:	6523      	str	r3, [r4, #80]	; 0x50
 8006802:	4b13      	ldr	r3, [pc, #76]	; (8006850 <__sinit+0x68>)
 8006804:	4a13      	ldr	r2, [pc, #76]	; (8006854 <__sinit+0x6c>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	62a2      	str	r2, [r4, #40]	; 0x28
 800680a:	42a3      	cmp	r3, r4
 800680c:	bf04      	itt	eq
 800680e:	2301      	moveq	r3, #1
 8006810:	61a3      	streq	r3, [r4, #24]
 8006812:	4620      	mov	r0, r4
 8006814:	f000 f820 	bl	8006858 <__sfp>
 8006818:	6060      	str	r0, [r4, #4]
 800681a:	4620      	mov	r0, r4
 800681c:	f000 f81c 	bl	8006858 <__sfp>
 8006820:	60a0      	str	r0, [r4, #8]
 8006822:	4620      	mov	r0, r4
 8006824:	f000 f818 	bl	8006858 <__sfp>
 8006828:	2200      	movs	r2, #0
 800682a:	60e0      	str	r0, [r4, #12]
 800682c:	2104      	movs	r1, #4
 800682e:	6860      	ldr	r0, [r4, #4]
 8006830:	f7ff ff82 	bl	8006738 <std>
 8006834:	68a0      	ldr	r0, [r4, #8]
 8006836:	2201      	movs	r2, #1
 8006838:	2109      	movs	r1, #9
 800683a:	f7ff ff7d 	bl	8006738 <std>
 800683e:	68e0      	ldr	r0, [r4, #12]
 8006840:	2202      	movs	r2, #2
 8006842:	2112      	movs	r1, #18
 8006844:	f7ff ff78 	bl	8006738 <std>
 8006848:	2301      	movs	r3, #1
 800684a:	61a3      	str	r3, [r4, #24]
 800684c:	e7d2      	b.n	80067f4 <__sinit+0xc>
 800684e:	bf00      	nop
 8006850:	0800f220 	.word	0x0800f220
 8006854:	08006781 	.word	0x08006781

08006858 <__sfp>:
 8006858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800685a:	4607      	mov	r7, r0
 800685c:	f7ff ffac 	bl	80067b8 <__sfp_lock_acquire>
 8006860:	4b1e      	ldr	r3, [pc, #120]	; (80068dc <__sfp+0x84>)
 8006862:	681e      	ldr	r6, [r3, #0]
 8006864:	69b3      	ldr	r3, [r6, #24]
 8006866:	b913      	cbnz	r3, 800686e <__sfp+0x16>
 8006868:	4630      	mov	r0, r6
 800686a:	f7ff ffbd 	bl	80067e8 <__sinit>
 800686e:	3648      	adds	r6, #72	; 0x48
 8006870:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006874:	3b01      	subs	r3, #1
 8006876:	d503      	bpl.n	8006880 <__sfp+0x28>
 8006878:	6833      	ldr	r3, [r6, #0]
 800687a:	b30b      	cbz	r3, 80068c0 <__sfp+0x68>
 800687c:	6836      	ldr	r6, [r6, #0]
 800687e:	e7f7      	b.n	8006870 <__sfp+0x18>
 8006880:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006884:	b9d5      	cbnz	r5, 80068bc <__sfp+0x64>
 8006886:	4b16      	ldr	r3, [pc, #88]	; (80068e0 <__sfp+0x88>)
 8006888:	60e3      	str	r3, [r4, #12]
 800688a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800688e:	6665      	str	r5, [r4, #100]	; 0x64
 8006890:	f000 f86c 	bl	800696c <__retarget_lock_init_recursive>
 8006894:	f7ff ff96 	bl	80067c4 <__sfp_lock_release>
 8006898:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800689c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80068a0:	6025      	str	r5, [r4, #0]
 80068a2:	61a5      	str	r5, [r4, #24]
 80068a4:	2208      	movs	r2, #8
 80068a6:	4629      	mov	r1, r5
 80068a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80068ac:	f000 f8e4 	bl	8006a78 <memset>
 80068b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80068b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80068b8:	4620      	mov	r0, r4
 80068ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068bc:	3468      	adds	r4, #104	; 0x68
 80068be:	e7d9      	b.n	8006874 <__sfp+0x1c>
 80068c0:	2104      	movs	r1, #4
 80068c2:	4638      	mov	r0, r7
 80068c4:	f7ff ff62 	bl	800678c <__sfmoreglue>
 80068c8:	4604      	mov	r4, r0
 80068ca:	6030      	str	r0, [r6, #0]
 80068cc:	2800      	cmp	r0, #0
 80068ce:	d1d5      	bne.n	800687c <__sfp+0x24>
 80068d0:	f7ff ff78 	bl	80067c4 <__sfp_lock_release>
 80068d4:	230c      	movs	r3, #12
 80068d6:	603b      	str	r3, [r7, #0]
 80068d8:	e7ee      	b.n	80068b8 <__sfp+0x60>
 80068da:	bf00      	nop
 80068dc:	0800f220 	.word	0x0800f220
 80068e0:	ffff0001 	.word	0xffff0001

080068e4 <_fwalk_reent>:
 80068e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068e8:	4606      	mov	r6, r0
 80068ea:	4688      	mov	r8, r1
 80068ec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80068f0:	2700      	movs	r7, #0
 80068f2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80068f6:	f1b9 0901 	subs.w	r9, r9, #1
 80068fa:	d505      	bpl.n	8006908 <_fwalk_reent+0x24>
 80068fc:	6824      	ldr	r4, [r4, #0]
 80068fe:	2c00      	cmp	r4, #0
 8006900:	d1f7      	bne.n	80068f2 <_fwalk_reent+0xe>
 8006902:	4638      	mov	r0, r7
 8006904:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006908:	89ab      	ldrh	r3, [r5, #12]
 800690a:	2b01      	cmp	r3, #1
 800690c:	d907      	bls.n	800691e <_fwalk_reent+0x3a>
 800690e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006912:	3301      	adds	r3, #1
 8006914:	d003      	beq.n	800691e <_fwalk_reent+0x3a>
 8006916:	4629      	mov	r1, r5
 8006918:	4630      	mov	r0, r6
 800691a:	47c0      	blx	r8
 800691c:	4307      	orrs	r7, r0
 800691e:	3568      	adds	r5, #104	; 0x68
 8006920:	e7e9      	b.n	80068f6 <_fwalk_reent+0x12>
	...

08006924 <__libc_init_array>:
 8006924:	b570      	push	{r4, r5, r6, lr}
 8006926:	4d0d      	ldr	r5, [pc, #52]	; (800695c <__libc_init_array+0x38>)
 8006928:	4c0d      	ldr	r4, [pc, #52]	; (8006960 <__libc_init_array+0x3c>)
 800692a:	1b64      	subs	r4, r4, r5
 800692c:	10a4      	asrs	r4, r4, #2
 800692e:	2600      	movs	r6, #0
 8006930:	42a6      	cmp	r6, r4
 8006932:	d109      	bne.n	8006948 <__libc_init_array+0x24>
 8006934:	4d0b      	ldr	r5, [pc, #44]	; (8006964 <__libc_init_array+0x40>)
 8006936:	4c0c      	ldr	r4, [pc, #48]	; (8006968 <__libc_init_array+0x44>)
 8006938:	f004 fc28 	bl	800b18c <_init>
 800693c:	1b64      	subs	r4, r4, r5
 800693e:	10a4      	asrs	r4, r4, #2
 8006940:	2600      	movs	r6, #0
 8006942:	42a6      	cmp	r6, r4
 8006944:	d105      	bne.n	8006952 <__libc_init_array+0x2e>
 8006946:	bd70      	pop	{r4, r5, r6, pc}
 8006948:	f855 3b04 	ldr.w	r3, [r5], #4
 800694c:	4798      	blx	r3
 800694e:	3601      	adds	r6, #1
 8006950:	e7ee      	b.n	8006930 <__libc_init_array+0xc>
 8006952:	f855 3b04 	ldr.w	r3, [r5], #4
 8006956:	4798      	blx	r3
 8006958:	3601      	adds	r6, #1
 800695a:	e7f2      	b.n	8006942 <__libc_init_array+0x1e>
 800695c:	0800f7b8 	.word	0x0800f7b8
 8006960:	0800f7b8 	.word	0x0800f7b8
 8006964:	0800f7b8 	.word	0x0800f7b8
 8006968:	0800f7bc 	.word	0x0800f7bc

0800696c <__retarget_lock_init_recursive>:
 800696c:	4770      	bx	lr

0800696e <__retarget_lock_acquire_recursive>:
 800696e:	4770      	bx	lr

08006970 <__retarget_lock_release_recursive>:
 8006970:	4770      	bx	lr

08006972 <__swhatbuf_r>:
 8006972:	b570      	push	{r4, r5, r6, lr}
 8006974:	460e      	mov	r6, r1
 8006976:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800697a:	2900      	cmp	r1, #0
 800697c:	b096      	sub	sp, #88	; 0x58
 800697e:	4614      	mov	r4, r2
 8006980:	461d      	mov	r5, r3
 8006982:	da08      	bge.n	8006996 <__swhatbuf_r+0x24>
 8006984:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006988:	2200      	movs	r2, #0
 800698a:	602a      	str	r2, [r5, #0]
 800698c:	061a      	lsls	r2, r3, #24
 800698e:	d410      	bmi.n	80069b2 <__swhatbuf_r+0x40>
 8006990:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006994:	e00e      	b.n	80069b4 <__swhatbuf_r+0x42>
 8006996:	466a      	mov	r2, sp
 8006998:	f001 fe34 	bl	8008604 <_fstat_r>
 800699c:	2800      	cmp	r0, #0
 800699e:	dbf1      	blt.n	8006984 <__swhatbuf_r+0x12>
 80069a0:	9a01      	ldr	r2, [sp, #4]
 80069a2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80069a6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80069aa:	425a      	negs	r2, r3
 80069ac:	415a      	adcs	r2, r3
 80069ae:	602a      	str	r2, [r5, #0]
 80069b0:	e7ee      	b.n	8006990 <__swhatbuf_r+0x1e>
 80069b2:	2340      	movs	r3, #64	; 0x40
 80069b4:	2000      	movs	r0, #0
 80069b6:	6023      	str	r3, [r4, #0]
 80069b8:	b016      	add	sp, #88	; 0x58
 80069ba:	bd70      	pop	{r4, r5, r6, pc}

080069bc <__smakebuf_r>:
 80069bc:	898b      	ldrh	r3, [r1, #12]
 80069be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80069c0:	079d      	lsls	r5, r3, #30
 80069c2:	4606      	mov	r6, r0
 80069c4:	460c      	mov	r4, r1
 80069c6:	d507      	bpl.n	80069d8 <__smakebuf_r+0x1c>
 80069c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80069cc:	6023      	str	r3, [r4, #0]
 80069ce:	6123      	str	r3, [r4, #16]
 80069d0:	2301      	movs	r3, #1
 80069d2:	6163      	str	r3, [r4, #20]
 80069d4:	b002      	add	sp, #8
 80069d6:	bd70      	pop	{r4, r5, r6, pc}
 80069d8:	ab01      	add	r3, sp, #4
 80069da:	466a      	mov	r2, sp
 80069dc:	f7ff ffc9 	bl	8006972 <__swhatbuf_r>
 80069e0:	9900      	ldr	r1, [sp, #0]
 80069e2:	4605      	mov	r5, r0
 80069e4:	4630      	mov	r0, r6
 80069e6:	f000 f8bb 	bl	8006b60 <_malloc_r>
 80069ea:	b948      	cbnz	r0, 8006a00 <__smakebuf_r+0x44>
 80069ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069f0:	059a      	lsls	r2, r3, #22
 80069f2:	d4ef      	bmi.n	80069d4 <__smakebuf_r+0x18>
 80069f4:	f023 0303 	bic.w	r3, r3, #3
 80069f8:	f043 0302 	orr.w	r3, r3, #2
 80069fc:	81a3      	strh	r3, [r4, #12]
 80069fe:	e7e3      	b.n	80069c8 <__smakebuf_r+0xc>
 8006a00:	4b0d      	ldr	r3, [pc, #52]	; (8006a38 <__smakebuf_r+0x7c>)
 8006a02:	62b3      	str	r3, [r6, #40]	; 0x28
 8006a04:	89a3      	ldrh	r3, [r4, #12]
 8006a06:	6020      	str	r0, [r4, #0]
 8006a08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a0c:	81a3      	strh	r3, [r4, #12]
 8006a0e:	9b00      	ldr	r3, [sp, #0]
 8006a10:	6163      	str	r3, [r4, #20]
 8006a12:	9b01      	ldr	r3, [sp, #4]
 8006a14:	6120      	str	r0, [r4, #16]
 8006a16:	b15b      	cbz	r3, 8006a30 <__smakebuf_r+0x74>
 8006a18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a1c:	4630      	mov	r0, r6
 8006a1e:	f001 fe03 	bl	8008628 <_isatty_r>
 8006a22:	b128      	cbz	r0, 8006a30 <__smakebuf_r+0x74>
 8006a24:	89a3      	ldrh	r3, [r4, #12]
 8006a26:	f023 0303 	bic.w	r3, r3, #3
 8006a2a:	f043 0301 	orr.w	r3, r3, #1
 8006a2e:	81a3      	strh	r3, [r4, #12]
 8006a30:	89a0      	ldrh	r0, [r4, #12]
 8006a32:	4305      	orrs	r5, r0
 8006a34:	81a5      	strh	r5, [r4, #12]
 8006a36:	e7cd      	b.n	80069d4 <__smakebuf_r+0x18>
 8006a38:	08006781 	.word	0x08006781

08006a3c <malloc>:
 8006a3c:	4b02      	ldr	r3, [pc, #8]	; (8006a48 <malloc+0xc>)
 8006a3e:	4601      	mov	r1, r0
 8006a40:	6818      	ldr	r0, [r3, #0]
 8006a42:	f000 b88d 	b.w	8006b60 <_malloc_r>
 8006a46:	bf00      	nop
 8006a48:	20000014 	.word	0x20000014

08006a4c <free>:
 8006a4c:	4b02      	ldr	r3, [pc, #8]	; (8006a58 <free+0xc>)
 8006a4e:	4601      	mov	r1, r0
 8006a50:	6818      	ldr	r0, [r3, #0]
 8006a52:	f000 b819 	b.w	8006a88 <_free_r>
 8006a56:	bf00      	nop
 8006a58:	20000014 	.word	0x20000014

08006a5c <memcpy>:
 8006a5c:	440a      	add	r2, r1
 8006a5e:	4291      	cmp	r1, r2
 8006a60:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006a64:	d100      	bne.n	8006a68 <memcpy+0xc>
 8006a66:	4770      	bx	lr
 8006a68:	b510      	push	{r4, lr}
 8006a6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a72:	4291      	cmp	r1, r2
 8006a74:	d1f9      	bne.n	8006a6a <memcpy+0xe>
 8006a76:	bd10      	pop	{r4, pc}

08006a78 <memset>:
 8006a78:	4402      	add	r2, r0
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d100      	bne.n	8006a82 <memset+0xa>
 8006a80:	4770      	bx	lr
 8006a82:	f803 1b01 	strb.w	r1, [r3], #1
 8006a86:	e7f9      	b.n	8006a7c <memset+0x4>

08006a88 <_free_r>:
 8006a88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006a8a:	2900      	cmp	r1, #0
 8006a8c:	d044      	beq.n	8006b18 <_free_r+0x90>
 8006a8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a92:	9001      	str	r0, [sp, #4]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	f1a1 0404 	sub.w	r4, r1, #4
 8006a9a:	bfb8      	it	lt
 8006a9c:	18e4      	addlt	r4, r4, r3
 8006a9e:	f001 fde9 	bl	8008674 <__malloc_lock>
 8006aa2:	4a1e      	ldr	r2, [pc, #120]	; (8006b1c <_free_r+0x94>)
 8006aa4:	9801      	ldr	r0, [sp, #4]
 8006aa6:	6813      	ldr	r3, [r2, #0]
 8006aa8:	b933      	cbnz	r3, 8006ab8 <_free_r+0x30>
 8006aaa:	6063      	str	r3, [r4, #4]
 8006aac:	6014      	str	r4, [r2, #0]
 8006aae:	b003      	add	sp, #12
 8006ab0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006ab4:	f001 bde4 	b.w	8008680 <__malloc_unlock>
 8006ab8:	42a3      	cmp	r3, r4
 8006aba:	d908      	bls.n	8006ace <_free_r+0x46>
 8006abc:	6825      	ldr	r5, [r4, #0]
 8006abe:	1961      	adds	r1, r4, r5
 8006ac0:	428b      	cmp	r3, r1
 8006ac2:	bf01      	itttt	eq
 8006ac4:	6819      	ldreq	r1, [r3, #0]
 8006ac6:	685b      	ldreq	r3, [r3, #4]
 8006ac8:	1949      	addeq	r1, r1, r5
 8006aca:	6021      	streq	r1, [r4, #0]
 8006acc:	e7ed      	b.n	8006aaa <_free_r+0x22>
 8006ace:	461a      	mov	r2, r3
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	b10b      	cbz	r3, 8006ad8 <_free_r+0x50>
 8006ad4:	42a3      	cmp	r3, r4
 8006ad6:	d9fa      	bls.n	8006ace <_free_r+0x46>
 8006ad8:	6811      	ldr	r1, [r2, #0]
 8006ada:	1855      	adds	r5, r2, r1
 8006adc:	42a5      	cmp	r5, r4
 8006ade:	d10b      	bne.n	8006af8 <_free_r+0x70>
 8006ae0:	6824      	ldr	r4, [r4, #0]
 8006ae2:	4421      	add	r1, r4
 8006ae4:	1854      	adds	r4, r2, r1
 8006ae6:	42a3      	cmp	r3, r4
 8006ae8:	6011      	str	r1, [r2, #0]
 8006aea:	d1e0      	bne.n	8006aae <_free_r+0x26>
 8006aec:	681c      	ldr	r4, [r3, #0]
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	6053      	str	r3, [r2, #4]
 8006af2:	4421      	add	r1, r4
 8006af4:	6011      	str	r1, [r2, #0]
 8006af6:	e7da      	b.n	8006aae <_free_r+0x26>
 8006af8:	d902      	bls.n	8006b00 <_free_r+0x78>
 8006afa:	230c      	movs	r3, #12
 8006afc:	6003      	str	r3, [r0, #0]
 8006afe:	e7d6      	b.n	8006aae <_free_r+0x26>
 8006b00:	6825      	ldr	r5, [r4, #0]
 8006b02:	1961      	adds	r1, r4, r5
 8006b04:	428b      	cmp	r3, r1
 8006b06:	bf04      	itt	eq
 8006b08:	6819      	ldreq	r1, [r3, #0]
 8006b0a:	685b      	ldreq	r3, [r3, #4]
 8006b0c:	6063      	str	r3, [r4, #4]
 8006b0e:	bf04      	itt	eq
 8006b10:	1949      	addeq	r1, r1, r5
 8006b12:	6021      	streq	r1, [r4, #0]
 8006b14:	6054      	str	r4, [r2, #4]
 8006b16:	e7ca      	b.n	8006aae <_free_r+0x26>
 8006b18:	b003      	add	sp, #12
 8006b1a:	bd30      	pop	{r4, r5, pc}
 8006b1c:	20000358 	.word	0x20000358

08006b20 <sbrk_aligned>:
 8006b20:	b570      	push	{r4, r5, r6, lr}
 8006b22:	4e0e      	ldr	r6, [pc, #56]	; (8006b5c <sbrk_aligned+0x3c>)
 8006b24:	460c      	mov	r4, r1
 8006b26:	6831      	ldr	r1, [r6, #0]
 8006b28:	4605      	mov	r5, r0
 8006b2a:	b911      	cbnz	r1, 8006b32 <sbrk_aligned+0x12>
 8006b2c:	f000 fd84 	bl	8007638 <_sbrk_r>
 8006b30:	6030      	str	r0, [r6, #0]
 8006b32:	4621      	mov	r1, r4
 8006b34:	4628      	mov	r0, r5
 8006b36:	f000 fd7f 	bl	8007638 <_sbrk_r>
 8006b3a:	1c43      	adds	r3, r0, #1
 8006b3c:	d00a      	beq.n	8006b54 <sbrk_aligned+0x34>
 8006b3e:	1cc4      	adds	r4, r0, #3
 8006b40:	f024 0403 	bic.w	r4, r4, #3
 8006b44:	42a0      	cmp	r0, r4
 8006b46:	d007      	beq.n	8006b58 <sbrk_aligned+0x38>
 8006b48:	1a21      	subs	r1, r4, r0
 8006b4a:	4628      	mov	r0, r5
 8006b4c:	f000 fd74 	bl	8007638 <_sbrk_r>
 8006b50:	3001      	adds	r0, #1
 8006b52:	d101      	bne.n	8006b58 <sbrk_aligned+0x38>
 8006b54:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006b58:	4620      	mov	r0, r4
 8006b5a:	bd70      	pop	{r4, r5, r6, pc}
 8006b5c:	2000035c 	.word	0x2000035c

08006b60 <_malloc_r>:
 8006b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b64:	1ccd      	adds	r5, r1, #3
 8006b66:	f025 0503 	bic.w	r5, r5, #3
 8006b6a:	3508      	adds	r5, #8
 8006b6c:	2d0c      	cmp	r5, #12
 8006b6e:	bf38      	it	cc
 8006b70:	250c      	movcc	r5, #12
 8006b72:	2d00      	cmp	r5, #0
 8006b74:	4607      	mov	r7, r0
 8006b76:	db01      	blt.n	8006b7c <_malloc_r+0x1c>
 8006b78:	42a9      	cmp	r1, r5
 8006b7a:	d905      	bls.n	8006b88 <_malloc_r+0x28>
 8006b7c:	230c      	movs	r3, #12
 8006b7e:	603b      	str	r3, [r7, #0]
 8006b80:	2600      	movs	r6, #0
 8006b82:	4630      	mov	r0, r6
 8006b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b88:	4e2e      	ldr	r6, [pc, #184]	; (8006c44 <_malloc_r+0xe4>)
 8006b8a:	f001 fd73 	bl	8008674 <__malloc_lock>
 8006b8e:	6833      	ldr	r3, [r6, #0]
 8006b90:	461c      	mov	r4, r3
 8006b92:	bb34      	cbnz	r4, 8006be2 <_malloc_r+0x82>
 8006b94:	4629      	mov	r1, r5
 8006b96:	4638      	mov	r0, r7
 8006b98:	f7ff ffc2 	bl	8006b20 <sbrk_aligned>
 8006b9c:	1c43      	adds	r3, r0, #1
 8006b9e:	4604      	mov	r4, r0
 8006ba0:	d14d      	bne.n	8006c3e <_malloc_r+0xde>
 8006ba2:	6834      	ldr	r4, [r6, #0]
 8006ba4:	4626      	mov	r6, r4
 8006ba6:	2e00      	cmp	r6, #0
 8006ba8:	d140      	bne.n	8006c2c <_malloc_r+0xcc>
 8006baa:	6823      	ldr	r3, [r4, #0]
 8006bac:	4631      	mov	r1, r6
 8006bae:	4638      	mov	r0, r7
 8006bb0:	eb04 0803 	add.w	r8, r4, r3
 8006bb4:	f000 fd40 	bl	8007638 <_sbrk_r>
 8006bb8:	4580      	cmp	r8, r0
 8006bba:	d13a      	bne.n	8006c32 <_malloc_r+0xd2>
 8006bbc:	6821      	ldr	r1, [r4, #0]
 8006bbe:	3503      	adds	r5, #3
 8006bc0:	1a6d      	subs	r5, r5, r1
 8006bc2:	f025 0503 	bic.w	r5, r5, #3
 8006bc6:	3508      	adds	r5, #8
 8006bc8:	2d0c      	cmp	r5, #12
 8006bca:	bf38      	it	cc
 8006bcc:	250c      	movcc	r5, #12
 8006bce:	4629      	mov	r1, r5
 8006bd0:	4638      	mov	r0, r7
 8006bd2:	f7ff ffa5 	bl	8006b20 <sbrk_aligned>
 8006bd6:	3001      	adds	r0, #1
 8006bd8:	d02b      	beq.n	8006c32 <_malloc_r+0xd2>
 8006bda:	6823      	ldr	r3, [r4, #0]
 8006bdc:	442b      	add	r3, r5
 8006bde:	6023      	str	r3, [r4, #0]
 8006be0:	e00e      	b.n	8006c00 <_malloc_r+0xa0>
 8006be2:	6822      	ldr	r2, [r4, #0]
 8006be4:	1b52      	subs	r2, r2, r5
 8006be6:	d41e      	bmi.n	8006c26 <_malloc_r+0xc6>
 8006be8:	2a0b      	cmp	r2, #11
 8006bea:	d916      	bls.n	8006c1a <_malloc_r+0xba>
 8006bec:	1961      	adds	r1, r4, r5
 8006bee:	42a3      	cmp	r3, r4
 8006bf0:	6025      	str	r5, [r4, #0]
 8006bf2:	bf18      	it	ne
 8006bf4:	6059      	strne	r1, [r3, #4]
 8006bf6:	6863      	ldr	r3, [r4, #4]
 8006bf8:	bf08      	it	eq
 8006bfa:	6031      	streq	r1, [r6, #0]
 8006bfc:	5162      	str	r2, [r4, r5]
 8006bfe:	604b      	str	r3, [r1, #4]
 8006c00:	4638      	mov	r0, r7
 8006c02:	f104 060b 	add.w	r6, r4, #11
 8006c06:	f001 fd3b 	bl	8008680 <__malloc_unlock>
 8006c0a:	f026 0607 	bic.w	r6, r6, #7
 8006c0e:	1d23      	adds	r3, r4, #4
 8006c10:	1af2      	subs	r2, r6, r3
 8006c12:	d0b6      	beq.n	8006b82 <_malloc_r+0x22>
 8006c14:	1b9b      	subs	r3, r3, r6
 8006c16:	50a3      	str	r3, [r4, r2]
 8006c18:	e7b3      	b.n	8006b82 <_malloc_r+0x22>
 8006c1a:	6862      	ldr	r2, [r4, #4]
 8006c1c:	42a3      	cmp	r3, r4
 8006c1e:	bf0c      	ite	eq
 8006c20:	6032      	streq	r2, [r6, #0]
 8006c22:	605a      	strne	r2, [r3, #4]
 8006c24:	e7ec      	b.n	8006c00 <_malloc_r+0xa0>
 8006c26:	4623      	mov	r3, r4
 8006c28:	6864      	ldr	r4, [r4, #4]
 8006c2a:	e7b2      	b.n	8006b92 <_malloc_r+0x32>
 8006c2c:	4634      	mov	r4, r6
 8006c2e:	6876      	ldr	r6, [r6, #4]
 8006c30:	e7b9      	b.n	8006ba6 <_malloc_r+0x46>
 8006c32:	230c      	movs	r3, #12
 8006c34:	603b      	str	r3, [r7, #0]
 8006c36:	4638      	mov	r0, r7
 8006c38:	f001 fd22 	bl	8008680 <__malloc_unlock>
 8006c3c:	e7a1      	b.n	8006b82 <_malloc_r+0x22>
 8006c3e:	6025      	str	r5, [r4, #0]
 8006c40:	e7de      	b.n	8006c00 <_malloc_r+0xa0>
 8006c42:	bf00      	nop
 8006c44:	20000358 	.word	0x20000358

08006c48 <__cvt>:
 8006c48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c4c:	ec55 4b10 	vmov	r4, r5, d0
 8006c50:	2d00      	cmp	r5, #0
 8006c52:	460e      	mov	r6, r1
 8006c54:	4619      	mov	r1, r3
 8006c56:	462b      	mov	r3, r5
 8006c58:	bfbb      	ittet	lt
 8006c5a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006c5e:	461d      	movlt	r5, r3
 8006c60:	2300      	movge	r3, #0
 8006c62:	232d      	movlt	r3, #45	; 0x2d
 8006c64:	700b      	strb	r3, [r1, #0]
 8006c66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006c68:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006c6c:	4691      	mov	r9, r2
 8006c6e:	f023 0820 	bic.w	r8, r3, #32
 8006c72:	bfbc      	itt	lt
 8006c74:	4622      	movlt	r2, r4
 8006c76:	4614      	movlt	r4, r2
 8006c78:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006c7c:	d005      	beq.n	8006c8a <__cvt+0x42>
 8006c7e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006c82:	d100      	bne.n	8006c86 <__cvt+0x3e>
 8006c84:	3601      	adds	r6, #1
 8006c86:	2102      	movs	r1, #2
 8006c88:	e000      	b.n	8006c8c <__cvt+0x44>
 8006c8a:	2103      	movs	r1, #3
 8006c8c:	ab03      	add	r3, sp, #12
 8006c8e:	9301      	str	r3, [sp, #4]
 8006c90:	ab02      	add	r3, sp, #8
 8006c92:	9300      	str	r3, [sp, #0]
 8006c94:	ec45 4b10 	vmov	d0, r4, r5
 8006c98:	4653      	mov	r3, sl
 8006c9a:	4632      	mov	r2, r6
 8006c9c:	f000 fec4 	bl	8007a28 <_dtoa_r>
 8006ca0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006ca4:	4607      	mov	r7, r0
 8006ca6:	d102      	bne.n	8006cae <__cvt+0x66>
 8006ca8:	f019 0f01 	tst.w	r9, #1
 8006cac:	d022      	beq.n	8006cf4 <__cvt+0xac>
 8006cae:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006cb2:	eb07 0906 	add.w	r9, r7, r6
 8006cb6:	d110      	bne.n	8006cda <__cvt+0x92>
 8006cb8:	783b      	ldrb	r3, [r7, #0]
 8006cba:	2b30      	cmp	r3, #48	; 0x30
 8006cbc:	d10a      	bne.n	8006cd4 <__cvt+0x8c>
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	4620      	mov	r0, r4
 8006cc4:	4629      	mov	r1, r5
 8006cc6:	f7f9 feff 	bl	8000ac8 <__aeabi_dcmpeq>
 8006cca:	b918      	cbnz	r0, 8006cd4 <__cvt+0x8c>
 8006ccc:	f1c6 0601 	rsb	r6, r6, #1
 8006cd0:	f8ca 6000 	str.w	r6, [sl]
 8006cd4:	f8da 3000 	ldr.w	r3, [sl]
 8006cd8:	4499      	add	r9, r3
 8006cda:	2200      	movs	r2, #0
 8006cdc:	2300      	movs	r3, #0
 8006cde:	4620      	mov	r0, r4
 8006ce0:	4629      	mov	r1, r5
 8006ce2:	f7f9 fef1 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ce6:	b108      	cbz	r0, 8006cec <__cvt+0xa4>
 8006ce8:	f8cd 900c 	str.w	r9, [sp, #12]
 8006cec:	2230      	movs	r2, #48	; 0x30
 8006cee:	9b03      	ldr	r3, [sp, #12]
 8006cf0:	454b      	cmp	r3, r9
 8006cf2:	d307      	bcc.n	8006d04 <__cvt+0xbc>
 8006cf4:	9b03      	ldr	r3, [sp, #12]
 8006cf6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006cf8:	1bdb      	subs	r3, r3, r7
 8006cfa:	4638      	mov	r0, r7
 8006cfc:	6013      	str	r3, [r2, #0]
 8006cfe:	b004      	add	sp, #16
 8006d00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d04:	1c59      	adds	r1, r3, #1
 8006d06:	9103      	str	r1, [sp, #12]
 8006d08:	701a      	strb	r2, [r3, #0]
 8006d0a:	e7f0      	b.n	8006cee <__cvt+0xa6>

08006d0c <__exponent>:
 8006d0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d0e:	4603      	mov	r3, r0
 8006d10:	2900      	cmp	r1, #0
 8006d12:	bfb8      	it	lt
 8006d14:	4249      	neglt	r1, r1
 8006d16:	f803 2b02 	strb.w	r2, [r3], #2
 8006d1a:	bfb4      	ite	lt
 8006d1c:	222d      	movlt	r2, #45	; 0x2d
 8006d1e:	222b      	movge	r2, #43	; 0x2b
 8006d20:	2909      	cmp	r1, #9
 8006d22:	7042      	strb	r2, [r0, #1]
 8006d24:	dd2a      	ble.n	8006d7c <__exponent+0x70>
 8006d26:	f10d 0407 	add.w	r4, sp, #7
 8006d2a:	46a4      	mov	ip, r4
 8006d2c:	270a      	movs	r7, #10
 8006d2e:	46a6      	mov	lr, r4
 8006d30:	460a      	mov	r2, r1
 8006d32:	fb91 f6f7 	sdiv	r6, r1, r7
 8006d36:	fb07 1516 	mls	r5, r7, r6, r1
 8006d3a:	3530      	adds	r5, #48	; 0x30
 8006d3c:	2a63      	cmp	r2, #99	; 0x63
 8006d3e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8006d42:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006d46:	4631      	mov	r1, r6
 8006d48:	dcf1      	bgt.n	8006d2e <__exponent+0x22>
 8006d4a:	3130      	adds	r1, #48	; 0x30
 8006d4c:	f1ae 0502 	sub.w	r5, lr, #2
 8006d50:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006d54:	1c44      	adds	r4, r0, #1
 8006d56:	4629      	mov	r1, r5
 8006d58:	4561      	cmp	r1, ip
 8006d5a:	d30a      	bcc.n	8006d72 <__exponent+0x66>
 8006d5c:	f10d 0209 	add.w	r2, sp, #9
 8006d60:	eba2 020e 	sub.w	r2, r2, lr
 8006d64:	4565      	cmp	r5, ip
 8006d66:	bf88      	it	hi
 8006d68:	2200      	movhi	r2, #0
 8006d6a:	4413      	add	r3, r2
 8006d6c:	1a18      	subs	r0, r3, r0
 8006d6e:	b003      	add	sp, #12
 8006d70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006d76:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006d7a:	e7ed      	b.n	8006d58 <__exponent+0x4c>
 8006d7c:	2330      	movs	r3, #48	; 0x30
 8006d7e:	3130      	adds	r1, #48	; 0x30
 8006d80:	7083      	strb	r3, [r0, #2]
 8006d82:	70c1      	strb	r1, [r0, #3]
 8006d84:	1d03      	adds	r3, r0, #4
 8006d86:	e7f1      	b.n	8006d6c <__exponent+0x60>

08006d88 <_printf_float>:
 8006d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d8c:	ed2d 8b02 	vpush	{d8}
 8006d90:	b08d      	sub	sp, #52	; 0x34
 8006d92:	460c      	mov	r4, r1
 8006d94:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006d98:	4616      	mov	r6, r2
 8006d9a:	461f      	mov	r7, r3
 8006d9c:	4605      	mov	r5, r0
 8006d9e:	f001 fc53 	bl	8008648 <_localeconv_r>
 8006da2:	f8d0 a000 	ldr.w	sl, [r0]
 8006da6:	4650      	mov	r0, sl
 8006da8:	f7f9 fa12 	bl	80001d0 <strlen>
 8006dac:	2300      	movs	r3, #0
 8006dae:	930a      	str	r3, [sp, #40]	; 0x28
 8006db0:	6823      	ldr	r3, [r4, #0]
 8006db2:	9305      	str	r3, [sp, #20]
 8006db4:	f8d8 3000 	ldr.w	r3, [r8]
 8006db8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006dbc:	3307      	adds	r3, #7
 8006dbe:	f023 0307 	bic.w	r3, r3, #7
 8006dc2:	f103 0208 	add.w	r2, r3, #8
 8006dc6:	f8c8 2000 	str.w	r2, [r8]
 8006dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dce:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006dd2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006dd6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006dda:	9307      	str	r3, [sp, #28]
 8006ddc:	f8cd 8018 	str.w	r8, [sp, #24]
 8006de0:	ee08 0a10 	vmov	s16, r0
 8006de4:	4b9f      	ldr	r3, [pc, #636]	; (8007064 <_printf_float+0x2dc>)
 8006de6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006dea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006dee:	f7f9 fe9d 	bl	8000b2c <__aeabi_dcmpun>
 8006df2:	bb88      	cbnz	r0, 8006e58 <_printf_float+0xd0>
 8006df4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006df8:	4b9a      	ldr	r3, [pc, #616]	; (8007064 <_printf_float+0x2dc>)
 8006dfa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006dfe:	f7f9 fe77 	bl	8000af0 <__aeabi_dcmple>
 8006e02:	bb48      	cbnz	r0, 8006e58 <_printf_float+0xd0>
 8006e04:	2200      	movs	r2, #0
 8006e06:	2300      	movs	r3, #0
 8006e08:	4640      	mov	r0, r8
 8006e0a:	4649      	mov	r1, r9
 8006e0c:	f7f9 fe66 	bl	8000adc <__aeabi_dcmplt>
 8006e10:	b110      	cbz	r0, 8006e18 <_printf_float+0x90>
 8006e12:	232d      	movs	r3, #45	; 0x2d
 8006e14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e18:	4b93      	ldr	r3, [pc, #588]	; (8007068 <_printf_float+0x2e0>)
 8006e1a:	4894      	ldr	r0, [pc, #592]	; (800706c <_printf_float+0x2e4>)
 8006e1c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006e20:	bf94      	ite	ls
 8006e22:	4698      	movls	r8, r3
 8006e24:	4680      	movhi	r8, r0
 8006e26:	2303      	movs	r3, #3
 8006e28:	6123      	str	r3, [r4, #16]
 8006e2a:	9b05      	ldr	r3, [sp, #20]
 8006e2c:	f023 0204 	bic.w	r2, r3, #4
 8006e30:	6022      	str	r2, [r4, #0]
 8006e32:	f04f 0900 	mov.w	r9, #0
 8006e36:	9700      	str	r7, [sp, #0]
 8006e38:	4633      	mov	r3, r6
 8006e3a:	aa0b      	add	r2, sp, #44	; 0x2c
 8006e3c:	4621      	mov	r1, r4
 8006e3e:	4628      	mov	r0, r5
 8006e40:	f000 f9d8 	bl	80071f4 <_printf_common>
 8006e44:	3001      	adds	r0, #1
 8006e46:	f040 8090 	bne.w	8006f6a <_printf_float+0x1e2>
 8006e4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e4e:	b00d      	add	sp, #52	; 0x34
 8006e50:	ecbd 8b02 	vpop	{d8}
 8006e54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e58:	4642      	mov	r2, r8
 8006e5a:	464b      	mov	r3, r9
 8006e5c:	4640      	mov	r0, r8
 8006e5e:	4649      	mov	r1, r9
 8006e60:	f7f9 fe64 	bl	8000b2c <__aeabi_dcmpun>
 8006e64:	b140      	cbz	r0, 8006e78 <_printf_float+0xf0>
 8006e66:	464b      	mov	r3, r9
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	bfbc      	itt	lt
 8006e6c:	232d      	movlt	r3, #45	; 0x2d
 8006e6e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006e72:	487f      	ldr	r0, [pc, #508]	; (8007070 <_printf_float+0x2e8>)
 8006e74:	4b7f      	ldr	r3, [pc, #508]	; (8007074 <_printf_float+0x2ec>)
 8006e76:	e7d1      	b.n	8006e1c <_printf_float+0x94>
 8006e78:	6863      	ldr	r3, [r4, #4]
 8006e7a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006e7e:	9206      	str	r2, [sp, #24]
 8006e80:	1c5a      	adds	r2, r3, #1
 8006e82:	d13f      	bne.n	8006f04 <_printf_float+0x17c>
 8006e84:	2306      	movs	r3, #6
 8006e86:	6063      	str	r3, [r4, #4]
 8006e88:	9b05      	ldr	r3, [sp, #20]
 8006e8a:	6861      	ldr	r1, [r4, #4]
 8006e8c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006e90:	2300      	movs	r3, #0
 8006e92:	9303      	str	r3, [sp, #12]
 8006e94:	ab0a      	add	r3, sp, #40	; 0x28
 8006e96:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006e9a:	ab09      	add	r3, sp, #36	; 0x24
 8006e9c:	ec49 8b10 	vmov	d0, r8, r9
 8006ea0:	9300      	str	r3, [sp, #0]
 8006ea2:	6022      	str	r2, [r4, #0]
 8006ea4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006ea8:	4628      	mov	r0, r5
 8006eaa:	f7ff fecd 	bl	8006c48 <__cvt>
 8006eae:	9b06      	ldr	r3, [sp, #24]
 8006eb0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006eb2:	2b47      	cmp	r3, #71	; 0x47
 8006eb4:	4680      	mov	r8, r0
 8006eb6:	d108      	bne.n	8006eca <_printf_float+0x142>
 8006eb8:	1cc8      	adds	r0, r1, #3
 8006eba:	db02      	blt.n	8006ec2 <_printf_float+0x13a>
 8006ebc:	6863      	ldr	r3, [r4, #4]
 8006ebe:	4299      	cmp	r1, r3
 8006ec0:	dd41      	ble.n	8006f46 <_printf_float+0x1be>
 8006ec2:	f1ab 0b02 	sub.w	fp, fp, #2
 8006ec6:	fa5f fb8b 	uxtb.w	fp, fp
 8006eca:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006ece:	d820      	bhi.n	8006f12 <_printf_float+0x18a>
 8006ed0:	3901      	subs	r1, #1
 8006ed2:	465a      	mov	r2, fp
 8006ed4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006ed8:	9109      	str	r1, [sp, #36]	; 0x24
 8006eda:	f7ff ff17 	bl	8006d0c <__exponent>
 8006ede:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ee0:	1813      	adds	r3, r2, r0
 8006ee2:	2a01      	cmp	r2, #1
 8006ee4:	4681      	mov	r9, r0
 8006ee6:	6123      	str	r3, [r4, #16]
 8006ee8:	dc02      	bgt.n	8006ef0 <_printf_float+0x168>
 8006eea:	6822      	ldr	r2, [r4, #0]
 8006eec:	07d2      	lsls	r2, r2, #31
 8006eee:	d501      	bpl.n	8006ef4 <_printf_float+0x16c>
 8006ef0:	3301      	adds	r3, #1
 8006ef2:	6123      	str	r3, [r4, #16]
 8006ef4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d09c      	beq.n	8006e36 <_printf_float+0xae>
 8006efc:	232d      	movs	r3, #45	; 0x2d
 8006efe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f02:	e798      	b.n	8006e36 <_printf_float+0xae>
 8006f04:	9a06      	ldr	r2, [sp, #24]
 8006f06:	2a47      	cmp	r2, #71	; 0x47
 8006f08:	d1be      	bne.n	8006e88 <_printf_float+0x100>
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d1bc      	bne.n	8006e88 <_printf_float+0x100>
 8006f0e:	2301      	movs	r3, #1
 8006f10:	e7b9      	b.n	8006e86 <_printf_float+0xfe>
 8006f12:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006f16:	d118      	bne.n	8006f4a <_printf_float+0x1c2>
 8006f18:	2900      	cmp	r1, #0
 8006f1a:	6863      	ldr	r3, [r4, #4]
 8006f1c:	dd0b      	ble.n	8006f36 <_printf_float+0x1ae>
 8006f1e:	6121      	str	r1, [r4, #16]
 8006f20:	b913      	cbnz	r3, 8006f28 <_printf_float+0x1a0>
 8006f22:	6822      	ldr	r2, [r4, #0]
 8006f24:	07d0      	lsls	r0, r2, #31
 8006f26:	d502      	bpl.n	8006f2e <_printf_float+0x1a6>
 8006f28:	3301      	adds	r3, #1
 8006f2a:	440b      	add	r3, r1
 8006f2c:	6123      	str	r3, [r4, #16]
 8006f2e:	65a1      	str	r1, [r4, #88]	; 0x58
 8006f30:	f04f 0900 	mov.w	r9, #0
 8006f34:	e7de      	b.n	8006ef4 <_printf_float+0x16c>
 8006f36:	b913      	cbnz	r3, 8006f3e <_printf_float+0x1b6>
 8006f38:	6822      	ldr	r2, [r4, #0]
 8006f3a:	07d2      	lsls	r2, r2, #31
 8006f3c:	d501      	bpl.n	8006f42 <_printf_float+0x1ba>
 8006f3e:	3302      	adds	r3, #2
 8006f40:	e7f4      	b.n	8006f2c <_printf_float+0x1a4>
 8006f42:	2301      	movs	r3, #1
 8006f44:	e7f2      	b.n	8006f2c <_printf_float+0x1a4>
 8006f46:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006f4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f4c:	4299      	cmp	r1, r3
 8006f4e:	db05      	blt.n	8006f5c <_printf_float+0x1d4>
 8006f50:	6823      	ldr	r3, [r4, #0]
 8006f52:	6121      	str	r1, [r4, #16]
 8006f54:	07d8      	lsls	r0, r3, #31
 8006f56:	d5ea      	bpl.n	8006f2e <_printf_float+0x1a6>
 8006f58:	1c4b      	adds	r3, r1, #1
 8006f5a:	e7e7      	b.n	8006f2c <_printf_float+0x1a4>
 8006f5c:	2900      	cmp	r1, #0
 8006f5e:	bfd4      	ite	le
 8006f60:	f1c1 0202 	rsble	r2, r1, #2
 8006f64:	2201      	movgt	r2, #1
 8006f66:	4413      	add	r3, r2
 8006f68:	e7e0      	b.n	8006f2c <_printf_float+0x1a4>
 8006f6a:	6823      	ldr	r3, [r4, #0]
 8006f6c:	055a      	lsls	r2, r3, #21
 8006f6e:	d407      	bmi.n	8006f80 <_printf_float+0x1f8>
 8006f70:	6923      	ldr	r3, [r4, #16]
 8006f72:	4642      	mov	r2, r8
 8006f74:	4631      	mov	r1, r6
 8006f76:	4628      	mov	r0, r5
 8006f78:	47b8      	blx	r7
 8006f7a:	3001      	adds	r0, #1
 8006f7c:	d12c      	bne.n	8006fd8 <_printf_float+0x250>
 8006f7e:	e764      	b.n	8006e4a <_printf_float+0xc2>
 8006f80:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006f84:	f240 80e0 	bls.w	8007148 <_printf_float+0x3c0>
 8006f88:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	2300      	movs	r3, #0
 8006f90:	f7f9 fd9a 	bl	8000ac8 <__aeabi_dcmpeq>
 8006f94:	2800      	cmp	r0, #0
 8006f96:	d034      	beq.n	8007002 <_printf_float+0x27a>
 8006f98:	4a37      	ldr	r2, [pc, #220]	; (8007078 <_printf_float+0x2f0>)
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	4631      	mov	r1, r6
 8006f9e:	4628      	mov	r0, r5
 8006fa0:	47b8      	blx	r7
 8006fa2:	3001      	adds	r0, #1
 8006fa4:	f43f af51 	beq.w	8006e4a <_printf_float+0xc2>
 8006fa8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006fac:	429a      	cmp	r2, r3
 8006fae:	db02      	blt.n	8006fb6 <_printf_float+0x22e>
 8006fb0:	6823      	ldr	r3, [r4, #0]
 8006fb2:	07d8      	lsls	r0, r3, #31
 8006fb4:	d510      	bpl.n	8006fd8 <_printf_float+0x250>
 8006fb6:	ee18 3a10 	vmov	r3, s16
 8006fba:	4652      	mov	r2, sl
 8006fbc:	4631      	mov	r1, r6
 8006fbe:	4628      	mov	r0, r5
 8006fc0:	47b8      	blx	r7
 8006fc2:	3001      	adds	r0, #1
 8006fc4:	f43f af41 	beq.w	8006e4a <_printf_float+0xc2>
 8006fc8:	f04f 0800 	mov.w	r8, #0
 8006fcc:	f104 091a 	add.w	r9, r4, #26
 8006fd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fd2:	3b01      	subs	r3, #1
 8006fd4:	4543      	cmp	r3, r8
 8006fd6:	dc09      	bgt.n	8006fec <_printf_float+0x264>
 8006fd8:	6823      	ldr	r3, [r4, #0]
 8006fda:	079b      	lsls	r3, r3, #30
 8006fdc:	f100 8105 	bmi.w	80071ea <_printf_float+0x462>
 8006fe0:	68e0      	ldr	r0, [r4, #12]
 8006fe2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006fe4:	4298      	cmp	r0, r3
 8006fe6:	bfb8      	it	lt
 8006fe8:	4618      	movlt	r0, r3
 8006fea:	e730      	b.n	8006e4e <_printf_float+0xc6>
 8006fec:	2301      	movs	r3, #1
 8006fee:	464a      	mov	r2, r9
 8006ff0:	4631      	mov	r1, r6
 8006ff2:	4628      	mov	r0, r5
 8006ff4:	47b8      	blx	r7
 8006ff6:	3001      	adds	r0, #1
 8006ff8:	f43f af27 	beq.w	8006e4a <_printf_float+0xc2>
 8006ffc:	f108 0801 	add.w	r8, r8, #1
 8007000:	e7e6      	b.n	8006fd0 <_printf_float+0x248>
 8007002:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007004:	2b00      	cmp	r3, #0
 8007006:	dc39      	bgt.n	800707c <_printf_float+0x2f4>
 8007008:	4a1b      	ldr	r2, [pc, #108]	; (8007078 <_printf_float+0x2f0>)
 800700a:	2301      	movs	r3, #1
 800700c:	4631      	mov	r1, r6
 800700e:	4628      	mov	r0, r5
 8007010:	47b8      	blx	r7
 8007012:	3001      	adds	r0, #1
 8007014:	f43f af19 	beq.w	8006e4a <_printf_float+0xc2>
 8007018:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800701c:	4313      	orrs	r3, r2
 800701e:	d102      	bne.n	8007026 <_printf_float+0x29e>
 8007020:	6823      	ldr	r3, [r4, #0]
 8007022:	07d9      	lsls	r1, r3, #31
 8007024:	d5d8      	bpl.n	8006fd8 <_printf_float+0x250>
 8007026:	ee18 3a10 	vmov	r3, s16
 800702a:	4652      	mov	r2, sl
 800702c:	4631      	mov	r1, r6
 800702e:	4628      	mov	r0, r5
 8007030:	47b8      	blx	r7
 8007032:	3001      	adds	r0, #1
 8007034:	f43f af09 	beq.w	8006e4a <_printf_float+0xc2>
 8007038:	f04f 0900 	mov.w	r9, #0
 800703c:	f104 0a1a 	add.w	sl, r4, #26
 8007040:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007042:	425b      	negs	r3, r3
 8007044:	454b      	cmp	r3, r9
 8007046:	dc01      	bgt.n	800704c <_printf_float+0x2c4>
 8007048:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800704a:	e792      	b.n	8006f72 <_printf_float+0x1ea>
 800704c:	2301      	movs	r3, #1
 800704e:	4652      	mov	r2, sl
 8007050:	4631      	mov	r1, r6
 8007052:	4628      	mov	r0, r5
 8007054:	47b8      	blx	r7
 8007056:	3001      	adds	r0, #1
 8007058:	f43f aef7 	beq.w	8006e4a <_printf_float+0xc2>
 800705c:	f109 0901 	add.w	r9, r9, #1
 8007060:	e7ee      	b.n	8007040 <_printf_float+0x2b8>
 8007062:	bf00      	nop
 8007064:	7fefffff 	.word	0x7fefffff
 8007068:	0800f224 	.word	0x0800f224
 800706c:	0800f228 	.word	0x0800f228
 8007070:	0800f230 	.word	0x0800f230
 8007074:	0800f22c 	.word	0x0800f22c
 8007078:	0800f234 	.word	0x0800f234
 800707c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800707e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007080:	429a      	cmp	r2, r3
 8007082:	bfa8      	it	ge
 8007084:	461a      	movge	r2, r3
 8007086:	2a00      	cmp	r2, #0
 8007088:	4691      	mov	r9, r2
 800708a:	dc37      	bgt.n	80070fc <_printf_float+0x374>
 800708c:	f04f 0b00 	mov.w	fp, #0
 8007090:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007094:	f104 021a 	add.w	r2, r4, #26
 8007098:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800709a:	9305      	str	r3, [sp, #20]
 800709c:	eba3 0309 	sub.w	r3, r3, r9
 80070a0:	455b      	cmp	r3, fp
 80070a2:	dc33      	bgt.n	800710c <_printf_float+0x384>
 80070a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80070a8:	429a      	cmp	r2, r3
 80070aa:	db3b      	blt.n	8007124 <_printf_float+0x39c>
 80070ac:	6823      	ldr	r3, [r4, #0]
 80070ae:	07da      	lsls	r2, r3, #31
 80070b0:	d438      	bmi.n	8007124 <_printf_float+0x39c>
 80070b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070b4:	9a05      	ldr	r2, [sp, #20]
 80070b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80070b8:	1a9a      	subs	r2, r3, r2
 80070ba:	eba3 0901 	sub.w	r9, r3, r1
 80070be:	4591      	cmp	r9, r2
 80070c0:	bfa8      	it	ge
 80070c2:	4691      	movge	r9, r2
 80070c4:	f1b9 0f00 	cmp.w	r9, #0
 80070c8:	dc35      	bgt.n	8007136 <_printf_float+0x3ae>
 80070ca:	f04f 0800 	mov.w	r8, #0
 80070ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80070d2:	f104 0a1a 	add.w	sl, r4, #26
 80070d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80070da:	1a9b      	subs	r3, r3, r2
 80070dc:	eba3 0309 	sub.w	r3, r3, r9
 80070e0:	4543      	cmp	r3, r8
 80070e2:	f77f af79 	ble.w	8006fd8 <_printf_float+0x250>
 80070e6:	2301      	movs	r3, #1
 80070e8:	4652      	mov	r2, sl
 80070ea:	4631      	mov	r1, r6
 80070ec:	4628      	mov	r0, r5
 80070ee:	47b8      	blx	r7
 80070f0:	3001      	adds	r0, #1
 80070f2:	f43f aeaa 	beq.w	8006e4a <_printf_float+0xc2>
 80070f6:	f108 0801 	add.w	r8, r8, #1
 80070fa:	e7ec      	b.n	80070d6 <_printf_float+0x34e>
 80070fc:	4613      	mov	r3, r2
 80070fe:	4631      	mov	r1, r6
 8007100:	4642      	mov	r2, r8
 8007102:	4628      	mov	r0, r5
 8007104:	47b8      	blx	r7
 8007106:	3001      	adds	r0, #1
 8007108:	d1c0      	bne.n	800708c <_printf_float+0x304>
 800710a:	e69e      	b.n	8006e4a <_printf_float+0xc2>
 800710c:	2301      	movs	r3, #1
 800710e:	4631      	mov	r1, r6
 8007110:	4628      	mov	r0, r5
 8007112:	9205      	str	r2, [sp, #20]
 8007114:	47b8      	blx	r7
 8007116:	3001      	adds	r0, #1
 8007118:	f43f ae97 	beq.w	8006e4a <_printf_float+0xc2>
 800711c:	9a05      	ldr	r2, [sp, #20]
 800711e:	f10b 0b01 	add.w	fp, fp, #1
 8007122:	e7b9      	b.n	8007098 <_printf_float+0x310>
 8007124:	ee18 3a10 	vmov	r3, s16
 8007128:	4652      	mov	r2, sl
 800712a:	4631      	mov	r1, r6
 800712c:	4628      	mov	r0, r5
 800712e:	47b8      	blx	r7
 8007130:	3001      	adds	r0, #1
 8007132:	d1be      	bne.n	80070b2 <_printf_float+0x32a>
 8007134:	e689      	b.n	8006e4a <_printf_float+0xc2>
 8007136:	9a05      	ldr	r2, [sp, #20]
 8007138:	464b      	mov	r3, r9
 800713a:	4442      	add	r2, r8
 800713c:	4631      	mov	r1, r6
 800713e:	4628      	mov	r0, r5
 8007140:	47b8      	blx	r7
 8007142:	3001      	adds	r0, #1
 8007144:	d1c1      	bne.n	80070ca <_printf_float+0x342>
 8007146:	e680      	b.n	8006e4a <_printf_float+0xc2>
 8007148:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800714a:	2a01      	cmp	r2, #1
 800714c:	dc01      	bgt.n	8007152 <_printf_float+0x3ca>
 800714e:	07db      	lsls	r3, r3, #31
 8007150:	d538      	bpl.n	80071c4 <_printf_float+0x43c>
 8007152:	2301      	movs	r3, #1
 8007154:	4642      	mov	r2, r8
 8007156:	4631      	mov	r1, r6
 8007158:	4628      	mov	r0, r5
 800715a:	47b8      	blx	r7
 800715c:	3001      	adds	r0, #1
 800715e:	f43f ae74 	beq.w	8006e4a <_printf_float+0xc2>
 8007162:	ee18 3a10 	vmov	r3, s16
 8007166:	4652      	mov	r2, sl
 8007168:	4631      	mov	r1, r6
 800716a:	4628      	mov	r0, r5
 800716c:	47b8      	blx	r7
 800716e:	3001      	adds	r0, #1
 8007170:	f43f ae6b 	beq.w	8006e4a <_printf_float+0xc2>
 8007174:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007178:	2200      	movs	r2, #0
 800717a:	2300      	movs	r3, #0
 800717c:	f7f9 fca4 	bl	8000ac8 <__aeabi_dcmpeq>
 8007180:	b9d8      	cbnz	r0, 80071ba <_printf_float+0x432>
 8007182:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007184:	f108 0201 	add.w	r2, r8, #1
 8007188:	3b01      	subs	r3, #1
 800718a:	4631      	mov	r1, r6
 800718c:	4628      	mov	r0, r5
 800718e:	47b8      	blx	r7
 8007190:	3001      	adds	r0, #1
 8007192:	d10e      	bne.n	80071b2 <_printf_float+0x42a>
 8007194:	e659      	b.n	8006e4a <_printf_float+0xc2>
 8007196:	2301      	movs	r3, #1
 8007198:	4652      	mov	r2, sl
 800719a:	4631      	mov	r1, r6
 800719c:	4628      	mov	r0, r5
 800719e:	47b8      	blx	r7
 80071a0:	3001      	adds	r0, #1
 80071a2:	f43f ae52 	beq.w	8006e4a <_printf_float+0xc2>
 80071a6:	f108 0801 	add.w	r8, r8, #1
 80071aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071ac:	3b01      	subs	r3, #1
 80071ae:	4543      	cmp	r3, r8
 80071b0:	dcf1      	bgt.n	8007196 <_printf_float+0x40e>
 80071b2:	464b      	mov	r3, r9
 80071b4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80071b8:	e6dc      	b.n	8006f74 <_printf_float+0x1ec>
 80071ba:	f04f 0800 	mov.w	r8, #0
 80071be:	f104 0a1a 	add.w	sl, r4, #26
 80071c2:	e7f2      	b.n	80071aa <_printf_float+0x422>
 80071c4:	2301      	movs	r3, #1
 80071c6:	4642      	mov	r2, r8
 80071c8:	e7df      	b.n	800718a <_printf_float+0x402>
 80071ca:	2301      	movs	r3, #1
 80071cc:	464a      	mov	r2, r9
 80071ce:	4631      	mov	r1, r6
 80071d0:	4628      	mov	r0, r5
 80071d2:	47b8      	blx	r7
 80071d4:	3001      	adds	r0, #1
 80071d6:	f43f ae38 	beq.w	8006e4a <_printf_float+0xc2>
 80071da:	f108 0801 	add.w	r8, r8, #1
 80071de:	68e3      	ldr	r3, [r4, #12]
 80071e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80071e2:	1a5b      	subs	r3, r3, r1
 80071e4:	4543      	cmp	r3, r8
 80071e6:	dcf0      	bgt.n	80071ca <_printf_float+0x442>
 80071e8:	e6fa      	b.n	8006fe0 <_printf_float+0x258>
 80071ea:	f04f 0800 	mov.w	r8, #0
 80071ee:	f104 0919 	add.w	r9, r4, #25
 80071f2:	e7f4      	b.n	80071de <_printf_float+0x456>

080071f4 <_printf_common>:
 80071f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071f8:	4616      	mov	r6, r2
 80071fa:	4699      	mov	r9, r3
 80071fc:	688a      	ldr	r2, [r1, #8]
 80071fe:	690b      	ldr	r3, [r1, #16]
 8007200:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007204:	4293      	cmp	r3, r2
 8007206:	bfb8      	it	lt
 8007208:	4613      	movlt	r3, r2
 800720a:	6033      	str	r3, [r6, #0]
 800720c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007210:	4607      	mov	r7, r0
 8007212:	460c      	mov	r4, r1
 8007214:	b10a      	cbz	r2, 800721a <_printf_common+0x26>
 8007216:	3301      	adds	r3, #1
 8007218:	6033      	str	r3, [r6, #0]
 800721a:	6823      	ldr	r3, [r4, #0]
 800721c:	0699      	lsls	r1, r3, #26
 800721e:	bf42      	ittt	mi
 8007220:	6833      	ldrmi	r3, [r6, #0]
 8007222:	3302      	addmi	r3, #2
 8007224:	6033      	strmi	r3, [r6, #0]
 8007226:	6825      	ldr	r5, [r4, #0]
 8007228:	f015 0506 	ands.w	r5, r5, #6
 800722c:	d106      	bne.n	800723c <_printf_common+0x48>
 800722e:	f104 0a19 	add.w	sl, r4, #25
 8007232:	68e3      	ldr	r3, [r4, #12]
 8007234:	6832      	ldr	r2, [r6, #0]
 8007236:	1a9b      	subs	r3, r3, r2
 8007238:	42ab      	cmp	r3, r5
 800723a:	dc26      	bgt.n	800728a <_printf_common+0x96>
 800723c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007240:	1e13      	subs	r3, r2, #0
 8007242:	6822      	ldr	r2, [r4, #0]
 8007244:	bf18      	it	ne
 8007246:	2301      	movne	r3, #1
 8007248:	0692      	lsls	r2, r2, #26
 800724a:	d42b      	bmi.n	80072a4 <_printf_common+0xb0>
 800724c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007250:	4649      	mov	r1, r9
 8007252:	4638      	mov	r0, r7
 8007254:	47c0      	blx	r8
 8007256:	3001      	adds	r0, #1
 8007258:	d01e      	beq.n	8007298 <_printf_common+0xa4>
 800725a:	6823      	ldr	r3, [r4, #0]
 800725c:	68e5      	ldr	r5, [r4, #12]
 800725e:	6832      	ldr	r2, [r6, #0]
 8007260:	f003 0306 	and.w	r3, r3, #6
 8007264:	2b04      	cmp	r3, #4
 8007266:	bf08      	it	eq
 8007268:	1aad      	subeq	r5, r5, r2
 800726a:	68a3      	ldr	r3, [r4, #8]
 800726c:	6922      	ldr	r2, [r4, #16]
 800726e:	bf0c      	ite	eq
 8007270:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007274:	2500      	movne	r5, #0
 8007276:	4293      	cmp	r3, r2
 8007278:	bfc4      	itt	gt
 800727a:	1a9b      	subgt	r3, r3, r2
 800727c:	18ed      	addgt	r5, r5, r3
 800727e:	2600      	movs	r6, #0
 8007280:	341a      	adds	r4, #26
 8007282:	42b5      	cmp	r5, r6
 8007284:	d11a      	bne.n	80072bc <_printf_common+0xc8>
 8007286:	2000      	movs	r0, #0
 8007288:	e008      	b.n	800729c <_printf_common+0xa8>
 800728a:	2301      	movs	r3, #1
 800728c:	4652      	mov	r2, sl
 800728e:	4649      	mov	r1, r9
 8007290:	4638      	mov	r0, r7
 8007292:	47c0      	blx	r8
 8007294:	3001      	adds	r0, #1
 8007296:	d103      	bne.n	80072a0 <_printf_common+0xac>
 8007298:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800729c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072a0:	3501      	adds	r5, #1
 80072a2:	e7c6      	b.n	8007232 <_printf_common+0x3e>
 80072a4:	18e1      	adds	r1, r4, r3
 80072a6:	1c5a      	adds	r2, r3, #1
 80072a8:	2030      	movs	r0, #48	; 0x30
 80072aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80072ae:	4422      	add	r2, r4
 80072b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80072b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80072b8:	3302      	adds	r3, #2
 80072ba:	e7c7      	b.n	800724c <_printf_common+0x58>
 80072bc:	2301      	movs	r3, #1
 80072be:	4622      	mov	r2, r4
 80072c0:	4649      	mov	r1, r9
 80072c2:	4638      	mov	r0, r7
 80072c4:	47c0      	blx	r8
 80072c6:	3001      	adds	r0, #1
 80072c8:	d0e6      	beq.n	8007298 <_printf_common+0xa4>
 80072ca:	3601      	adds	r6, #1
 80072cc:	e7d9      	b.n	8007282 <_printf_common+0x8e>
	...

080072d0 <_printf_i>:
 80072d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80072d4:	7e0f      	ldrb	r7, [r1, #24]
 80072d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80072d8:	2f78      	cmp	r7, #120	; 0x78
 80072da:	4691      	mov	r9, r2
 80072dc:	4680      	mov	r8, r0
 80072de:	460c      	mov	r4, r1
 80072e0:	469a      	mov	sl, r3
 80072e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80072e6:	d807      	bhi.n	80072f8 <_printf_i+0x28>
 80072e8:	2f62      	cmp	r7, #98	; 0x62
 80072ea:	d80a      	bhi.n	8007302 <_printf_i+0x32>
 80072ec:	2f00      	cmp	r7, #0
 80072ee:	f000 80d8 	beq.w	80074a2 <_printf_i+0x1d2>
 80072f2:	2f58      	cmp	r7, #88	; 0x58
 80072f4:	f000 80a3 	beq.w	800743e <_printf_i+0x16e>
 80072f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80072fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007300:	e03a      	b.n	8007378 <_printf_i+0xa8>
 8007302:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007306:	2b15      	cmp	r3, #21
 8007308:	d8f6      	bhi.n	80072f8 <_printf_i+0x28>
 800730a:	a101      	add	r1, pc, #4	; (adr r1, 8007310 <_printf_i+0x40>)
 800730c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007310:	08007369 	.word	0x08007369
 8007314:	0800737d 	.word	0x0800737d
 8007318:	080072f9 	.word	0x080072f9
 800731c:	080072f9 	.word	0x080072f9
 8007320:	080072f9 	.word	0x080072f9
 8007324:	080072f9 	.word	0x080072f9
 8007328:	0800737d 	.word	0x0800737d
 800732c:	080072f9 	.word	0x080072f9
 8007330:	080072f9 	.word	0x080072f9
 8007334:	080072f9 	.word	0x080072f9
 8007338:	080072f9 	.word	0x080072f9
 800733c:	08007489 	.word	0x08007489
 8007340:	080073ad 	.word	0x080073ad
 8007344:	0800746b 	.word	0x0800746b
 8007348:	080072f9 	.word	0x080072f9
 800734c:	080072f9 	.word	0x080072f9
 8007350:	080074ab 	.word	0x080074ab
 8007354:	080072f9 	.word	0x080072f9
 8007358:	080073ad 	.word	0x080073ad
 800735c:	080072f9 	.word	0x080072f9
 8007360:	080072f9 	.word	0x080072f9
 8007364:	08007473 	.word	0x08007473
 8007368:	682b      	ldr	r3, [r5, #0]
 800736a:	1d1a      	adds	r2, r3, #4
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	602a      	str	r2, [r5, #0]
 8007370:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007374:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007378:	2301      	movs	r3, #1
 800737a:	e0a3      	b.n	80074c4 <_printf_i+0x1f4>
 800737c:	6820      	ldr	r0, [r4, #0]
 800737e:	6829      	ldr	r1, [r5, #0]
 8007380:	0606      	lsls	r6, r0, #24
 8007382:	f101 0304 	add.w	r3, r1, #4
 8007386:	d50a      	bpl.n	800739e <_printf_i+0xce>
 8007388:	680e      	ldr	r6, [r1, #0]
 800738a:	602b      	str	r3, [r5, #0]
 800738c:	2e00      	cmp	r6, #0
 800738e:	da03      	bge.n	8007398 <_printf_i+0xc8>
 8007390:	232d      	movs	r3, #45	; 0x2d
 8007392:	4276      	negs	r6, r6
 8007394:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007398:	485e      	ldr	r0, [pc, #376]	; (8007514 <_printf_i+0x244>)
 800739a:	230a      	movs	r3, #10
 800739c:	e019      	b.n	80073d2 <_printf_i+0x102>
 800739e:	680e      	ldr	r6, [r1, #0]
 80073a0:	602b      	str	r3, [r5, #0]
 80073a2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80073a6:	bf18      	it	ne
 80073a8:	b236      	sxthne	r6, r6
 80073aa:	e7ef      	b.n	800738c <_printf_i+0xbc>
 80073ac:	682b      	ldr	r3, [r5, #0]
 80073ae:	6820      	ldr	r0, [r4, #0]
 80073b0:	1d19      	adds	r1, r3, #4
 80073b2:	6029      	str	r1, [r5, #0]
 80073b4:	0601      	lsls	r1, r0, #24
 80073b6:	d501      	bpl.n	80073bc <_printf_i+0xec>
 80073b8:	681e      	ldr	r6, [r3, #0]
 80073ba:	e002      	b.n	80073c2 <_printf_i+0xf2>
 80073bc:	0646      	lsls	r6, r0, #25
 80073be:	d5fb      	bpl.n	80073b8 <_printf_i+0xe8>
 80073c0:	881e      	ldrh	r6, [r3, #0]
 80073c2:	4854      	ldr	r0, [pc, #336]	; (8007514 <_printf_i+0x244>)
 80073c4:	2f6f      	cmp	r7, #111	; 0x6f
 80073c6:	bf0c      	ite	eq
 80073c8:	2308      	moveq	r3, #8
 80073ca:	230a      	movne	r3, #10
 80073cc:	2100      	movs	r1, #0
 80073ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80073d2:	6865      	ldr	r5, [r4, #4]
 80073d4:	60a5      	str	r5, [r4, #8]
 80073d6:	2d00      	cmp	r5, #0
 80073d8:	bfa2      	ittt	ge
 80073da:	6821      	ldrge	r1, [r4, #0]
 80073dc:	f021 0104 	bicge.w	r1, r1, #4
 80073e0:	6021      	strge	r1, [r4, #0]
 80073e2:	b90e      	cbnz	r6, 80073e8 <_printf_i+0x118>
 80073e4:	2d00      	cmp	r5, #0
 80073e6:	d04d      	beq.n	8007484 <_printf_i+0x1b4>
 80073e8:	4615      	mov	r5, r2
 80073ea:	fbb6 f1f3 	udiv	r1, r6, r3
 80073ee:	fb03 6711 	mls	r7, r3, r1, r6
 80073f2:	5dc7      	ldrb	r7, [r0, r7]
 80073f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80073f8:	4637      	mov	r7, r6
 80073fa:	42bb      	cmp	r3, r7
 80073fc:	460e      	mov	r6, r1
 80073fe:	d9f4      	bls.n	80073ea <_printf_i+0x11a>
 8007400:	2b08      	cmp	r3, #8
 8007402:	d10b      	bne.n	800741c <_printf_i+0x14c>
 8007404:	6823      	ldr	r3, [r4, #0]
 8007406:	07de      	lsls	r6, r3, #31
 8007408:	d508      	bpl.n	800741c <_printf_i+0x14c>
 800740a:	6923      	ldr	r3, [r4, #16]
 800740c:	6861      	ldr	r1, [r4, #4]
 800740e:	4299      	cmp	r1, r3
 8007410:	bfde      	ittt	le
 8007412:	2330      	movle	r3, #48	; 0x30
 8007414:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007418:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800741c:	1b52      	subs	r2, r2, r5
 800741e:	6122      	str	r2, [r4, #16]
 8007420:	f8cd a000 	str.w	sl, [sp]
 8007424:	464b      	mov	r3, r9
 8007426:	aa03      	add	r2, sp, #12
 8007428:	4621      	mov	r1, r4
 800742a:	4640      	mov	r0, r8
 800742c:	f7ff fee2 	bl	80071f4 <_printf_common>
 8007430:	3001      	adds	r0, #1
 8007432:	d14c      	bne.n	80074ce <_printf_i+0x1fe>
 8007434:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007438:	b004      	add	sp, #16
 800743a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800743e:	4835      	ldr	r0, [pc, #212]	; (8007514 <_printf_i+0x244>)
 8007440:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007444:	6829      	ldr	r1, [r5, #0]
 8007446:	6823      	ldr	r3, [r4, #0]
 8007448:	f851 6b04 	ldr.w	r6, [r1], #4
 800744c:	6029      	str	r1, [r5, #0]
 800744e:	061d      	lsls	r5, r3, #24
 8007450:	d514      	bpl.n	800747c <_printf_i+0x1ac>
 8007452:	07df      	lsls	r7, r3, #31
 8007454:	bf44      	itt	mi
 8007456:	f043 0320 	orrmi.w	r3, r3, #32
 800745a:	6023      	strmi	r3, [r4, #0]
 800745c:	b91e      	cbnz	r6, 8007466 <_printf_i+0x196>
 800745e:	6823      	ldr	r3, [r4, #0]
 8007460:	f023 0320 	bic.w	r3, r3, #32
 8007464:	6023      	str	r3, [r4, #0]
 8007466:	2310      	movs	r3, #16
 8007468:	e7b0      	b.n	80073cc <_printf_i+0xfc>
 800746a:	6823      	ldr	r3, [r4, #0]
 800746c:	f043 0320 	orr.w	r3, r3, #32
 8007470:	6023      	str	r3, [r4, #0]
 8007472:	2378      	movs	r3, #120	; 0x78
 8007474:	4828      	ldr	r0, [pc, #160]	; (8007518 <_printf_i+0x248>)
 8007476:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800747a:	e7e3      	b.n	8007444 <_printf_i+0x174>
 800747c:	0659      	lsls	r1, r3, #25
 800747e:	bf48      	it	mi
 8007480:	b2b6      	uxthmi	r6, r6
 8007482:	e7e6      	b.n	8007452 <_printf_i+0x182>
 8007484:	4615      	mov	r5, r2
 8007486:	e7bb      	b.n	8007400 <_printf_i+0x130>
 8007488:	682b      	ldr	r3, [r5, #0]
 800748a:	6826      	ldr	r6, [r4, #0]
 800748c:	6961      	ldr	r1, [r4, #20]
 800748e:	1d18      	adds	r0, r3, #4
 8007490:	6028      	str	r0, [r5, #0]
 8007492:	0635      	lsls	r5, r6, #24
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	d501      	bpl.n	800749c <_printf_i+0x1cc>
 8007498:	6019      	str	r1, [r3, #0]
 800749a:	e002      	b.n	80074a2 <_printf_i+0x1d2>
 800749c:	0670      	lsls	r0, r6, #25
 800749e:	d5fb      	bpl.n	8007498 <_printf_i+0x1c8>
 80074a0:	8019      	strh	r1, [r3, #0]
 80074a2:	2300      	movs	r3, #0
 80074a4:	6123      	str	r3, [r4, #16]
 80074a6:	4615      	mov	r5, r2
 80074a8:	e7ba      	b.n	8007420 <_printf_i+0x150>
 80074aa:	682b      	ldr	r3, [r5, #0]
 80074ac:	1d1a      	adds	r2, r3, #4
 80074ae:	602a      	str	r2, [r5, #0]
 80074b0:	681d      	ldr	r5, [r3, #0]
 80074b2:	6862      	ldr	r2, [r4, #4]
 80074b4:	2100      	movs	r1, #0
 80074b6:	4628      	mov	r0, r5
 80074b8:	f7f8 fe92 	bl	80001e0 <memchr>
 80074bc:	b108      	cbz	r0, 80074c2 <_printf_i+0x1f2>
 80074be:	1b40      	subs	r0, r0, r5
 80074c0:	6060      	str	r0, [r4, #4]
 80074c2:	6863      	ldr	r3, [r4, #4]
 80074c4:	6123      	str	r3, [r4, #16]
 80074c6:	2300      	movs	r3, #0
 80074c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074cc:	e7a8      	b.n	8007420 <_printf_i+0x150>
 80074ce:	6923      	ldr	r3, [r4, #16]
 80074d0:	462a      	mov	r2, r5
 80074d2:	4649      	mov	r1, r9
 80074d4:	4640      	mov	r0, r8
 80074d6:	47d0      	blx	sl
 80074d8:	3001      	adds	r0, #1
 80074da:	d0ab      	beq.n	8007434 <_printf_i+0x164>
 80074dc:	6823      	ldr	r3, [r4, #0]
 80074de:	079b      	lsls	r3, r3, #30
 80074e0:	d413      	bmi.n	800750a <_printf_i+0x23a>
 80074e2:	68e0      	ldr	r0, [r4, #12]
 80074e4:	9b03      	ldr	r3, [sp, #12]
 80074e6:	4298      	cmp	r0, r3
 80074e8:	bfb8      	it	lt
 80074ea:	4618      	movlt	r0, r3
 80074ec:	e7a4      	b.n	8007438 <_printf_i+0x168>
 80074ee:	2301      	movs	r3, #1
 80074f0:	4632      	mov	r2, r6
 80074f2:	4649      	mov	r1, r9
 80074f4:	4640      	mov	r0, r8
 80074f6:	47d0      	blx	sl
 80074f8:	3001      	adds	r0, #1
 80074fa:	d09b      	beq.n	8007434 <_printf_i+0x164>
 80074fc:	3501      	adds	r5, #1
 80074fe:	68e3      	ldr	r3, [r4, #12]
 8007500:	9903      	ldr	r1, [sp, #12]
 8007502:	1a5b      	subs	r3, r3, r1
 8007504:	42ab      	cmp	r3, r5
 8007506:	dcf2      	bgt.n	80074ee <_printf_i+0x21e>
 8007508:	e7eb      	b.n	80074e2 <_printf_i+0x212>
 800750a:	2500      	movs	r5, #0
 800750c:	f104 0619 	add.w	r6, r4, #25
 8007510:	e7f5      	b.n	80074fe <_printf_i+0x22e>
 8007512:	bf00      	nop
 8007514:	0800f236 	.word	0x0800f236
 8007518:	0800f247 	.word	0x0800f247

0800751c <iprintf>:
 800751c:	b40f      	push	{r0, r1, r2, r3}
 800751e:	4b0a      	ldr	r3, [pc, #40]	; (8007548 <iprintf+0x2c>)
 8007520:	b513      	push	{r0, r1, r4, lr}
 8007522:	681c      	ldr	r4, [r3, #0]
 8007524:	b124      	cbz	r4, 8007530 <iprintf+0x14>
 8007526:	69a3      	ldr	r3, [r4, #24]
 8007528:	b913      	cbnz	r3, 8007530 <iprintf+0x14>
 800752a:	4620      	mov	r0, r4
 800752c:	f7ff f95c 	bl	80067e8 <__sinit>
 8007530:	ab05      	add	r3, sp, #20
 8007532:	9a04      	ldr	r2, [sp, #16]
 8007534:	68a1      	ldr	r1, [r4, #8]
 8007536:	9301      	str	r3, [sp, #4]
 8007538:	4620      	mov	r0, r4
 800753a:	f001 fc6b 	bl	8008e14 <_vfiprintf_r>
 800753e:	b002      	add	sp, #8
 8007540:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007544:	b004      	add	sp, #16
 8007546:	4770      	bx	lr
 8007548:	20000014 	.word	0x20000014

0800754c <_puts_r>:
 800754c:	b570      	push	{r4, r5, r6, lr}
 800754e:	460e      	mov	r6, r1
 8007550:	4605      	mov	r5, r0
 8007552:	b118      	cbz	r0, 800755c <_puts_r+0x10>
 8007554:	6983      	ldr	r3, [r0, #24]
 8007556:	b90b      	cbnz	r3, 800755c <_puts_r+0x10>
 8007558:	f7ff f946 	bl	80067e8 <__sinit>
 800755c:	69ab      	ldr	r3, [r5, #24]
 800755e:	68ac      	ldr	r4, [r5, #8]
 8007560:	b913      	cbnz	r3, 8007568 <_puts_r+0x1c>
 8007562:	4628      	mov	r0, r5
 8007564:	f7ff f940 	bl	80067e8 <__sinit>
 8007568:	4b2c      	ldr	r3, [pc, #176]	; (800761c <_puts_r+0xd0>)
 800756a:	429c      	cmp	r4, r3
 800756c:	d120      	bne.n	80075b0 <_puts_r+0x64>
 800756e:	686c      	ldr	r4, [r5, #4]
 8007570:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007572:	07db      	lsls	r3, r3, #31
 8007574:	d405      	bmi.n	8007582 <_puts_r+0x36>
 8007576:	89a3      	ldrh	r3, [r4, #12]
 8007578:	0598      	lsls	r0, r3, #22
 800757a:	d402      	bmi.n	8007582 <_puts_r+0x36>
 800757c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800757e:	f7ff f9f6 	bl	800696e <__retarget_lock_acquire_recursive>
 8007582:	89a3      	ldrh	r3, [r4, #12]
 8007584:	0719      	lsls	r1, r3, #28
 8007586:	d51d      	bpl.n	80075c4 <_puts_r+0x78>
 8007588:	6923      	ldr	r3, [r4, #16]
 800758a:	b1db      	cbz	r3, 80075c4 <_puts_r+0x78>
 800758c:	3e01      	subs	r6, #1
 800758e:	68a3      	ldr	r3, [r4, #8]
 8007590:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007594:	3b01      	subs	r3, #1
 8007596:	60a3      	str	r3, [r4, #8]
 8007598:	bb39      	cbnz	r1, 80075ea <_puts_r+0x9e>
 800759a:	2b00      	cmp	r3, #0
 800759c:	da38      	bge.n	8007610 <_puts_r+0xc4>
 800759e:	4622      	mov	r2, r4
 80075a0:	210a      	movs	r1, #10
 80075a2:	4628      	mov	r0, r5
 80075a4:	f000 f8d0 	bl	8007748 <__swbuf_r>
 80075a8:	3001      	adds	r0, #1
 80075aa:	d011      	beq.n	80075d0 <_puts_r+0x84>
 80075ac:	250a      	movs	r5, #10
 80075ae:	e011      	b.n	80075d4 <_puts_r+0x88>
 80075b0:	4b1b      	ldr	r3, [pc, #108]	; (8007620 <_puts_r+0xd4>)
 80075b2:	429c      	cmp	r4, r3
 80075b4:	d101      	bne.n	80075ba <_puts_r+0x6e>
 80075b6:	68ac      	ldr	r4, [r5, #8]
 80075b8:	e7da      	b.n	8007570 <_puts_r+0x24>
 80075ba:	4b1a      	ldr	r3, [pc, #104]	; (8007624 <_puts_r+0xd8>)
 80075bc:	429c      	cmp	r4, r3
 80075be:	bf08      	it	eq
 80075c0:	68ec      	ldreq	r4, [r5, #12]
 80075c2:	e7d5      	b.n	8007570 <_puts_r+0x24>
 80075c4:	4621      	mov	r1, r4
 80075c6:	4628      	mov	r0, r5
 80075c8:	f000 f922 	bl	8007810 <__swsetup_r>
 80075cc:	2800      	cmp	r0, #0
 80075ce:	d0dd      	beq.n	800758c <_puts_r+0x40>
 80075d0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80075d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80075d6:	07da      	lsls	r2, r3, #31
 80075d8:	d405      	bmi.n	80075e6 <_puts_r+0x9a>
 80075da:	89a3      	ldrh	r3, [r4, #12]
 80075dc:	059b      	lsls	r3, r3, #22
 80075de:	d402      	bmi.n	80075e6 <_puts_r+0x9a>
 80075e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80075e2:	f7ff f9c5 	bl	8006970 <__retarget_lock_release_recursive>
 80075e6:	4628      	mov	r0, r5
 80075e8:	bd70      	pop	{r4, r5, r6, pc}
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	da04      	bge.n	80075f8 <_puts_r+0xac>
 80075ee:	69a2      	ldr	r2, [r4, #24]
 80075f0:	429a      	cmp	r2, r3
 80075f2:	dc06      	bgt.n	8007602 <_puts_r+0xb6>
 80075f4:	290a      	cmp	r1, #10
 80075f6:	d004      	beq.n	8007602 <_puts_r+0xb6>
 80075f8:	6823      	ldr	r3, [r4, #0]
 80075fa:	1c5a      	adds	r2, r3, #1
 80075fc:	6022      	str	r2, [r4, #0]
 80075fe:	7019      	strb	r1, [r3, #0]
 8007600:	e7c5      	b.n	800758e <_puts_r+0x42>
 8007602:	4622      	mov	r2, r4
 8007604:	4628      	mov	r0, r5
 8007606:	f000 f89f 	bl	8007748 <__swbuf_r>
 800760a:	3001      	adds	r0, #1
 800760c:	d1bf      	bne.n	800758e <_puts_r+0x42>
 800760e:	e7df      	b.n	80075d0 <_puts_r+0x84>
 8007610:	6823      	ldr	r3, [r4, #0]
 8007612:	250a      	movs	r5, #10
 8007614:	1c5a      	adds	r2, r3, #1
 8007616:	6022      	str	r2, [r4, #0]
 8007618:	701d      	strb	r5, [r3, #0]
 800761a:	e7db      	b.n	80075d4 <_puts_r+0x88>
 800761c:	0800f1e0 	.word	0x0800f1e0
 8007620:	0800f200 	.word	0x0800f200
 8007624:	0800f1c0 	.word	0x0800f1c0

08007628 <puts>:
 8007628:	4b02      	ldr	r3, [pc, #8]	; (8007634 <puts+0xc>)
 800762a:	4601      	mov	r1, r0
 800762c:	6818      	ldr	r0, [r3, #0]
 800762e:	f7ff bf8d 	b.w	800754c <_puts_r>
 8007632:	bf00      	nop
 8007634:	20000014 	.word	0x20000014

08007638 <_sbrk_r>:
 8007638:	b538      	push	{r3, r4, r5, lr}
 800763a:	4d06      	ldr	r5, [pc, #24]	; (8007654 <_sbrk_r+0x1c>)
 800763c:	2300      	movs	r3, #0
 800763e:	4604      	mov	r4, r0
 8007640:	4608      	mov	r0, r1
 8007642:	602b      	str	r3, [r5, #0]
 8007644:	f7fa fbba 	bl	8001dbc <_sbrk>
 8007648:	1c43      	adds	r3, r0, #1
 800764a:	d102      	bne.n	8007652 <_sbrk_r+0x1a>
 800764c:	682b      	ldr	r3, [r5, #0]
 800764e:	b103      	cbz	r3, 8007652 <_sbrk_r+0x1a>
 8007650:	6023      	str	r3, [r4, #0]
 8007652:	bd38      	pop	{r3, r4, r5, pc}
 8007654:	20000360 	.word	0x20000360

08007658 <__sread>:
 8007658:	b510      	push	{r4, lr}
 800765a:	460c      	mov	r4, r1
 800765c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007660:	f001 fd08 	bl	8009074 <_read_r>
 8007664:	2800      	cmp	r0, #0
 8007666:	bfab      	itete	ge
 8007668:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800766a:	89a3      	ldrhlt	r3, [r4, #12]
 800766c:	181b      	addge	r3, r3, r0
 800766e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007672:	bfac      	ite	ge
 8007674:	6563      	strge	r3, [r4, #84]	; 0x54
 8007676:	81a3      	strhlt	r3, [r4, #12]
 8007678:	bd10      	pop	{r4, pc}

0800767a <__swrite>:
 800767a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800767e:	461f      	mov	r7, r3
 8007680:	898b      	ldrh	r3, [r1, #12]
 8007682:	05db      	lsls	r3, r3, #23
 8007684:	4605      	mov	r5, r0
 8007686:	460c      	mov	r4, r1
 8007688:	4616      	mov	r6, r2
 800768a:	d505      	bpl.n	8007698 <__swrite+0x1e>
 800768c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007690:	2302      	movs	r3, #2
 8007692:	2200      	movs	r2, #0
 8007694:	f000 ffdc 	bl	8008650 <_lseek_r>
 8007698:	89a3      	ldrh	r3, [r4, #12]
 800769a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800769e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80076a2:	81a3      	strh	r3, [r4, #12]
 80076a4:	4632      	mov	r2, r6
 80076a6:	463b      	mov	r3, r7
 80076a8:	4628      	mov	r0, r5
 80076aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80076ae:	f000 b89d 	b.w	80077ec <_write_r>

080076b2 <__sseek>:
 80076b2:	b510      	push	{r4, lr}
 80076b4:	460c      	mov	r4, r1
 80076b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076ba:	f000 ffc9 	bl	8008650 <_lseek_r>
 80076be:	1c43      	adds	r3, r0, #1
 80076c0:	89a3      	ldrh	r3, [r4, #12]
 80076c2:	bf15      	itete	ne
 80076c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80076c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80076ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80076ce:	81a3      	strheq	r3, [r4, #12]
 80076d0:	bf18      	it	ne
 80076d2:	81a3      	strhne	r3, [r4, #12]
 80076d4:	bd10      	pop	{r4, pc}

080076d6 <__sclose>:
 80076d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076da:	f000 b907 	b.w	80078ec <_close_r>
	...

080076e0 <swprintf>:
 80076e0:	b40c      	push	{r2, r3}
 80076e2:	b530      	push	{r4, r5, lr}
 80076e4:	4b17      	ldr	r3, [pc, #92]	; (8007744 <swprintf+0x64>)
 80076e6:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 80076ea:	681d      	ldr	r5, [r3, #0]
 80076ec:	b09d      	sub	sp, #116	; 0x74
 80076ee:	460c      	mov	r4, r1
 80076f0:	d308      	bcc.n	8007704 <swprintf+0x24>
 80076f2:	238b      	movs	r3, #139	; 0x8b
 80076f4:	602b      	str	r3, [r5, #0]
 80076f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80076fa:	b01d      	add	sp, #116	; 0x74
 80076fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007700:	b002      	add	sp, #8
 8007702:	4770      	bx	lr
 8007704:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007708:	f8ad 3014 	strh.w	r3, [sp, #20]
 800770c:	9002      	str	r0, [sp, #8]
 800770e:	9006      	str	r0, [sp, #24]
 8007710:	b1b1      	cbz	r1, 8007740 <swprintf+0x60>
 8007712:	1e4b      	subs	r3, r1, #1
 8007714:	009b      	lsls	r3, r3, #2
 8007716:	9304      	str	r3, [sp, #16]
 8007718:	9307      	str	r3, [sp, #28]
 800771a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800771e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007722:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007724:	ab21      	add	r3, sp, #132	; 0x84
 8007726:	a902      	add	r1, sp, #8
 8007728:	4628      	mov	r0, r5
 800772a:	9301      	str	r3, [sp, #4]
 800772c:	f001 fd24 	bl	8009178 <_svfwprintf_r>
 8007730:	2c00      	cmp	r4, #0
 8007732:	d0de      	beq.n	80076f2 <swprintf+0x12>
 8007734:	9b02      	ldr	r3, [sp, #8]
 8007736:	2200      	movs	r2, #0
 8007738:	42a0      	cmp	r0, r4
 800773a:	601a      	str	r2, [r3, #0]
 800773c:	d3dd      	bcc.n	80076fa <swprintf+0x1a>
 800773e:	e7d8      	b.n	80076f2 <swprintf+0x12>
 8007740:	460b      	mov	r3, r1
 8007742:	e7e8      	b.n	8007716 <swprintf+0x36>
 8007744:	20000014 	.word	0x20000014

08007748 <__swbuf_r>:
 8007748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800774a:	460e      	mov	r6, r1
 800774c:	4614      	mov	r4, r2
 800774e:	4605      	mov	r5, r0
 8007750:	b118      	cbz	r0, 800775a <__swbuf_r+0x12>
 8007752:	6983      	ldr	r3, [r0, #24]
 8007754:	b90b      	cbnz	r3, 800775a <__swbuf_r+0x12>
 8007756:	f7ff f847 	bl	80067e8 <__sinit>
 800775a:	4b21      	ldr	r3, [pc, #132]	; (80077e0 <__swbuf_r+0x98>)
 800775c:	429c      	cmp	r4, r3
 800775e:	d12b      	bne.n	80077b8 <__swbuf_r+0x70>
 8007760:	686c      	ldr	r4, [r5, #4]
 8007762:	69a3      	ldr	r3, [r4, #24]
 8007764:	60a3      	str	r3, [r4, #8]
 8007766:	89a3      	ldrh	r3, [r4, #12]
 8007768:	071a      	lsls	r2, r3, #28
 800776a:	d52f      	bpl.n	80077cc <__swbuf_r+0x84>
 800776c:	6923      	ldr	r3, [r4, #16]
 800776e:	b36b      	cbz	r3, 80077cc <__swbuf_r+0x84>
 8007770:	6923      	ldr	r3, [r4, #16]
 8007772:	6820      	ldr	r0, [r4, #0]
 8007774:	1ac0      	subs	r0, r0, r3
 8007776:	6963      	ldr	r3, [r4, #20]
 8007778:	b2f6      	uxtb	r6, r6
 800777a:	4283      	cmp	r3, r0
 800777c:	4637      	mov	r7, r6
 800777e:	dc04      	bgt.n	800778a <__swbuf_r+0x42>
 8007780:	4621      	mov	r1, r4
 8007782:	4628      	mov	r0, r5
 8007784:	f7fe ff9c 	bl	80066c0 <_fflush_r>
 8007788:	bb30      	cbnz	r0, 80077d8 <__swbuf_r+0x90>
 800778a:	68a3      	ldr	r3, [r4, #8]
 800778c:	3b01      	subs	r3, #1
 800778e:	60a3      	str	r3, [r4, #8]
 8007790:	6823      	ldr	r3, [r4, #0]
 8007792:	1c5a      	adds	r2, r3, #1
 8007794:	6022      	str	r2, [r4, #0]
 8007796:	701e      	strb	r6, [r3, #0]
 8007798:	6963      	ldr	r3, [r4, #20]
 800779a:	3001      	adds	r0, #1
 800779c:	4283      	cmp	r3, r0
 800779e:	d004      	beq.n	80077aa <__swbuf_r+0x62>
 80077a0:	89a3      	ldrh	r3, [r4, #12]
 80077a2:	07db      	lsls	r3, r3, #31
 80077a4:	d506      	bpl.n	80077b4 <__swbuf_r+0x6c>
 80077a6:	2e0a      	cmp	r6, #10
 80077a8:	d104      	bne.n	80077b4 <__swbuf_r+0x6c>
 80077aa:	4621      	mov	r1, r4
 80077ac:	4628      	mov	r0, r5
 80077ae:	f7fe ff87 	bl	80066c0 <_fflush_r>
 80077b2:	b988      	cbnz	r0, 80077d8 <__swbuf_r+0x90>
 80077b4:	4638      	mov	r0, r7
 80077b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077b8:	4b0a      	ldr	r3, [pc, #40]	; (80077e4 <__swbuf_r+0x9c>)
 80077ba:	429c      	cmp	r4, r3
 80077bc:	d101      	bne.n	80077c2 <__swbuf_r+0x7a>
 80077be:	68ac      	ldr	r4, [r5, #8]
 80077c0:	e7cf      	b.n	8007762 <__swbuf_r+0x1a>
 80077c2:	4b09      	ldr	r3, [pc, #36]	; (80077e8 <__swbuf_r+0xa0>)
 80077c4:	429c      	cmp	r4, r3
 80077c6:	bf08      	it	eq
 80077c8:	68ec      	ldreq	r4, [r5, #12]
 80077ca:	e7ca      	b.n	8007762 <__swbuf_r+0x1a>
 80077cc:	4621      	mov	r1, r4
 80077ce:	4628      	mov	r0, r5
 80077d0:	f000 f81e 	bl	8007810 <__swsetup_r>
 80077d4:	2800      	cmp	r0, #0
 80077d6:	d0cb      	beq.n	8007770 <__swbuf_r+0x28>
 80077d8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80077dc:	e7ea      	b.n	80077b4 <__swbuf_r+0x6c>
 80077de:	bf00      	nop
 80077e0:	0800f1e0 	.word	0x0800f1e0
 80077e4:	0800f200 	.word	0x0800f200
 80077e8:	0800f1c0 	.word	0x0800f1c0

080077ec <_write_r>:
 80077ec:	b538      	push	{r3, r4, r5, lr}
 80077ee:	4d07      	ldr	r5, [pc, #28]	; (800780c <_write_r+0x20>)
 80077f0:	4604      	mov	r4, r0
 80077f2:	4608      	mov	r0, r1
 80077f4:	4611      	mov	r1, r2
 80077f6:	2200      	movs	r2, #0
 80077f8:	602a      	str	r2, [r5, #0]
 80077fa:	461a      	mov	r2, r3
 80077fc:	f7fa fa8d 	bl	8001d1a <_write>
 8007800:	1c43      	adds	r3, r0, #1
 8007802:	d102      	bne.n	800780a <_write_r+0x1e>
 8007804:	682b      	ldr	r3, [r5, #0]
 8007806:	b103      	cbz	r3, 800780a <_write_r+0x1e>
 8007808:	6023      	str	r3, [r4, #0]
 800780a:	bd38      	pop	{r3, r4, r5, pc}
 800780c:	20000360 	.word	0x20000360

08007810 <__swsetup_r>:
 8007810:	4b32      	ldr	r3, [pc, #200]	; (80078dc <__swsetup_r+0xcc>)
 8007812:	b570      	push	{r4, r5, r6, lr}
 8007814:	681d      	ldr	r5, [r3, #0]
 8007816:	4606      	mov	r6, r0
 8007818:	460c      	mov	r4, r1
 800781a:	b125      	cbz	r5, 8007826 <__swsetup_r+0x16>
 800781c:	69ab      	ldr	r3, [r5, #24]
 800781e:	b913      	cbnz	r3, 8007826 <__swsetup_r+0x16>
 8007820:	4628      	mov	r0, r5
 8007822:	f7fe ffe1 	bl	80067e8 <__sinit>
 8007826:	4b2e      	ldr	r3, [pc, #184]	; (80078e0 <__swsetup_r+0xd0>)
 8007828:	429c      	cmp	r4, r3
 800782a:	d10f      	bne.n	800784c <__swsetup_r+0x3c>
 800782c:	686c      	ldr	r4, [r5, #4]
 800782e:	89a3      	ldrh	r3, [r4, #12]
 8007830:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007834:	0719      	lsls	r1, r3, #28
 8007836:	d42c      	bmi.n	8007892 <__swsetup_r+0x82>
 8007838:	06dd      	lsls	r5, r3, #27
 800783a:	d411      	bmi.n	8007860 <__swsetup_r+0x50>
 800783c:	2309      	movs	r3, #9
 800783e:	6033      	str	r3, [r6, #0]
 8007840:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007844:	81a3      	strh	r3, [r4, #12]
 8007846:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800784a:	e03e      	b.n	80078ca <__swsetup_r+0xba>
 800784c:	4b25      	ldr	r3, [pc, #148]	; (80078e4 <__swsetup_r+0xd4>)
 800784e:	429c      	cmp	r4, r3
 8007850:	d101      	bne.n	8007856 <__swsetup_r+0x46>
 8007852:	68ac      	ldr	r4, [r5, #8]
 8007854:	e7eb      	b.n	800782e <__swsetup_r+0x1e>
 8007856:	4b24      	ldr	r3, [pc, #144]	; (80078e8 <__swsetup_r+0xd8>)
 8007858:	429c      	cmp	r4, r3
 800785a:	bf08      	it	eq
 800785c:	68ec      	ldreq	r4, [r5, #12]
 800785e:	e7e6      	b.n	800782e <__swsetup_r+0x1e>
 8007860:	0758      	lsls	r0, r3, #29
 8007862:	d512      	bpl.n	800788a <__swsetup_r+0x7a>
 8007864:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007866:	b141      	cbz	r1, 800787a <__swsetup_r+0x6a>
 8007868:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800786c:	4299      	cmp	r1, r3
 800786e:	d002      	beq.n	8007876 <__swsetup_r+0x66>
 8007870:	4630      	mov	r0, r6
 8007872:	f7ff f909 	bl	8006a88 <_free_r>
 8007876:	2300      	movs	r3, #0
 8007878:	6363      	str	r3, [r4, #52]	; 0x34
 800787a:	89a3      	ldrh	r3, [r4, #12]
 800787c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007880:	81a3      	strh	r3, [r4, #12]
 8007882:	2300      	movs	r3, #0
 8007884:	6063      	str	r3, [r4, #4]
 8007886:	6923      	ldr	r3, [r4, #16]
 8007888:	6023      	str	r3, [r4, #0]
 800788a:	89a3      	ldrh	r3, [r4, #12]
 800788c:	f043 0308 	orr.w	r3, r3, #8
 8007890:	81a3      	strh	r3, [r4, #12]
 8007892:	6923      	ldr	r3, [r4, #16]
 8007894:	b94b      	cbnz	r3, 80078aa <__swsetup_r+0x9a>
 8007896:	89a3      	ldrh	r3, [r4, #12]
 8007898:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800789c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078a0:	d003      	beq.n	80078aa <__swsetup_r+0x9a>
 80078a2:	4621      	mov	r1, r4
 80078a4:	4630      	mov	r0, r6
 80078a6:	f7ff f889 	bl	80069bc <__smakebuf_r>
 80078aa:	89a0      	ldrh	r0, [r4, #12]
 80078ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80078b0:	f010 0301 	ands.w	r3, r0, #1
 80078b4:	d00a      	beq.n	80078cc <__swsetup_r+0xbc>
 80078b6:	2300      	movs	r3, #0
 80078b8:	60a3      	str	r3, [r4, #8]
 80078ba:	6963      	ldr	r3, [r4, #20]
 80078bc:	425b      	negs	r3, r3
 80078be:	61a3      	str	r3, [r4, #24]
 80078c0:	6923      	ldr	r3, [r4, #16]
 80078c2:	b943      	cbnz	r3, 80078d6 <__swsetup_r+0xc6>
 80078c4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80078c8:	d1ba      	bne.n	8007840 <__swsetup_r+0x30>
 80078ca:	bd70      	pop	{r4, r5, r6, pc}
 80078cc:	0781      	lsls	r1, r0, #30
 80078ce:	bf58      	it	pl
 80078d0:	6963      	ldrpl	r3, [r4, #20]
 80078d2:	60a3      	str	r3, [r4, #8]
 80078d4:	e7f4      	b.n	80078c0 <__swsetup_r+0xb0>
 80078d6:	2000      	movs	r0, #0
 80078d8:	e7f7      	b.n	80078ca <__swsetup_r+0xba>
 80078da:	bf00      	nop
 80078dc:	20000014 	.word	0x20000014
 80078e0:	0800f1e0 	.word	0x0800f1e0
 80078e4:	0800f200 	.word	0x0800f200
 80078e8:	0800f1c0 	.word	0x0800f1c0

080078ec <_close_r>:
 80078ec:	b538      	push	{r3, r4, r5, lr}
 80078ee:	4d06      	ldr	r5, [pc, #24]	; (8007908 <_close_r+0x1c>)
 80078f0:	2300      	movs	r3, #0
 80078f2:	4604      	mov	r4, r0
 80078f4:	4608      	mov	r0, r1
 80078f6:	602b      	str	r3, [r5, #0]
 80078f8:	f7fa fa2b 	bl	8001d52 <_close>
 80078fc:	1c43      	adds	r3, r0, #1
 80078fe:	d102      	bne.n	8007906 <_close_r+0x1a>
 8007900:	682b      	ldr	r3, [r5, #0]
 8007902:	b103      	cbz	r3, 8007906 <_close_r+0x1a>
 8007904:	6023      	str	r3, [r4, #0]
 8007906:	bd38      	pop	{r3, r4, r5, pc}
 8007908:	20000360 	.word	0x20000360

0800790c <quorem>:
 800790c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007910:	6903      	ldr	r3, [r0, #16]
 8007912:	690c      	ldr	r4, [r1, #16]
 8007914:	42a3      	cmp	r3, r4
 8007916:	4607      	mov	r7, r0
 8007918:	f2c0 8081 	blt.w	8007a1e <quorem+0x112>
 800791c:	3c01      	subs	r4, #1
 800791e:	f101 0814 	add.w	r8, r1, #20
 8007922:	f100 0514 	add.w	r5, r0, #20
 8007926:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800792a:	9301      	str	r3, [sp, #4]
 800792c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007930:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007934:	3301      	adds	r3, #1
 8007936:	429a      	cmp	r2, r3
 8007938:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800793c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007940:	fbb2 f6f3 	udiv	r6, r2, r3
 8007944:	d331      	bcc.n	80079aa <quorem+0x9e>
 8007946:	f04f 0e00 	mov.w	lr, #0
 800794a:	4640      	mov	r0, r8
 800794c:	46ac      	mov	ip, r5
 800794e:	46f2      	mov	sl, lr
 8007950:	f850 2b04 	ldr.w	r2, [r0], #4
 8007954:	b293      	uxth	r3, r2
 8007956:	fb06 e303 	mla	r3, r6, r3, lr
 800795a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800795e:	b29b      	uxth	r3, r3
 8007960:	ebaa 0303 	sub.w	r3, sl, r3
 8007964:	f8dc a000 	ldr.w	sl, [ip]
 8007968:	0c12      	lsrs	r2, r2, #16
 800796a:	fa13 f38a 	uxtah	r3, r3, sl
 800796e:	fb06 e202 	mla	r2, r6, r2, lr
 8007972:	9300      	str	r3, [sp, #0]
 8007974:	9b00      	ldr	r3, [sp, #0]
 8007976:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800797a:	b292      	uxth	r2, r2
 800797c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007980:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007984:	f8bd 3000 	ldrh.w	r3, [sp]
 8007988:	4581      	cmp	r9, r0
 800798a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800798e:	f84c 3b04 	str.w	r3, [ip], #4
 8007992:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007996:	d2db      	bcs.n	8007950 <quorem+0x44>
 8007998:	f855 300b 	ldr.w	r3, [r5, fp]
 800799c:	b92b      	cbnz	r3, 80079aa <quorem+0x9e>
 800799e:	9b01      	ldr	r3, [sp, #4]
 80079a0:	3b04      	subs	r3, #4
 80079a2:	429d      	cmp	r5, r3
 80079a4:	461a      	mov	r2, r3
 80079a6:	d32e      	bcc.n	8007a06 <quorem+0xfa>
 80079a8:	613c      	str	r4, [r7, #16]
 80079aa:	4638      	mov	r0, r7
 80079ac:	f001 f8f0 	bl	8008b90 <__mcmp>
 80079b0:	2800      	cmp	r0, #0
 80079b2:	db24      	blt.n	80079fe <quorem+0xf2>
 80079b4:	3601      	adds	r6, #1
 80079b6:	4628      	mov	r0, r5
 80079b8:	f04f 0c00 	mov.w	ip, #0
 80079bc:	f858 2b04 	ldr.w	r2, [r8], #4
 80079c0:	f8d0 e000 	ldr.w	lr, [r0]
 80079c4:	b293      	uxth	r3, r2
 80079c6:	ebac 0303 	sub.w	r3, ip, r3
 80079ca:	0c12      	lsrs	r2, r2, #16
 80079cc:	fa13 f38e 	uxtah	r3, r3, lr
 80079d0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80079d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80079d8:	b29b      	uxth	r3, r3
 80079da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80079de:	45c1      	cmp	r9, r8
 80079e0:	f840 3b04 	str.w	r3, [r0], #4
 80079e4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80079e8:	d2e8      	bcs.n	80079bc <quorem+0xb0>
 80079ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80079ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80079f2:	b922      	cbnz	r2, 80079fe <quorem+0xf2>
 80079f4:	3b04      	subs	r3, #4
 80079f6:	429d      	cmp	r5, r3
 80079f8:	461a      	mov	r2, r3
 80079fa:	d30a      	bcc.n	8007a12 <quorem+0x106>
 80079fc:	613c      	str	r4, [r7, #16]
 80079fe:	4630      	mov	r0, r6
 8007a00:	b003      	add	sp, #12
 8007a02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a06:	6812      	ldr	r2, [r2, #0]
 8007a08:	3b04      	subs	r3, #4
 8007a0a:	2a00      	cmp	r2, #0
 8007a0c:	d1cc      	bne.n	80079a8 <quorem+0x9c>
 8007a0e:	3c01      	subs	r4, #1
 8007a10:	e7c7      	b.n	80079a2 <quorem+0x96>
 8007a12:	6812      	ldr	r2, [r2, #0]
 8007a14:	3b04      	subs	r3, #4
 8007a16:	2a00      	cmp	r2, #0
 8007a18:	d1f0      	bne.n	80079fc <quorem+0xf0>
 8007a1a:	3c01      	subs	r4, #1
 8007a1c:	e7eb      	b.n	80079f6 <quorem+0xea>
 8007a1e:	2000      	movs	r0, #0
 8007a20:	e7ee      	b.n	8007a00 <quorem+0xf4>
 8007a22:	0000      	movs	r0, r0
 8007a24:	0000      	movs	r0, r0
	...

08007a28 <_dtoa_r>:
 8007a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a2c:	ed2d 8b04 	vpush	{d8-d9}
 8007a30:	ec57 6b10 	vmov	r6, r7, d0
 8007a34:	b093      	sub	sp, #76	; 0x4c
 8007a36:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007a38:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007a3c:	9106      	str	r1, [sp, #24]
 8007a3e:	ee10 aa10 	vmov	sl, s0
 8007a42:	4604      	mov	r4, r0
 8007a44:	9209      	str	r2, [sp, #36]	; 0x24
 8007a46:	930c      	str	r3, [sp, #48]	; 0x30
 8007a48:	46bb      	mov	fp, r7
 8007a4a:	b975      	cbnz	r5, 8007a6a <_dtoa_r+0x42>
 8007a4c:	2010      	movs	r0, #16
 8007a4e:	f7fe fff5 	bl	8006a3c <malloc>
 8007a52:	4602      	mov	r2, r0
 8007a54:	6260      	str	r0, [r4, #36]	; 0x24
 8007a56:	b920      	cbnz	r0, 8007a62 <_dtoa_r+0x3a>
 8007a58:	4ba7      	ldr	r3, [pc, #668]	; (8007cf8 <_dtoa_r+0x2d0>)
 8007a5a:	21ea      	movs	r1, #234	; 0xea
 8007a5c:	48a7      	ldr	r0, [pc, #668]	; (8007cfc <_dtoa_r+0x2d4>)
 8007a5e:	f002 f91d 	bl	8009c9c <__assert_func>
 8007a62:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007a66:	6005      	str	r5, [r0, #0]
 8007a68:	60c5      	str	r5, [r0, #12]
 8007a6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a6c:	6819      	ldr	r1, [r3, #0]
 8007a6e:	b151      	cbz	r1, 8007a86 <_dtoa_r+0x5e>
 8007a70:	685a      	ldr	r2, [r3, #4]
 8007a72:	604a      	str	r2, [r1, #4]
 8007a74:	2301      	movs	r3, #1
 8007a76:	4093      	lsls	r3, r2
 8007a78:	608b      	str	r3, [r1, #8]
 8007a7a:	4620      	mov	r0, r4
 8007a7c:	f000 fe46 	bl	800870c <_Bfree>
 8007a80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a82:	2200      	movs	r2, #0
 8007a84:	601a      	str	r2, [r3, #0]
 8007a86:	1e3b      	subs	r3, r7, #0
 8007a88:	bfaa      	itet	ge
 8007a8a:	2300      	movge	r3, #0
 8007a8c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007a90:	f8c8 3000 	strge.w	r3, [r8]
 8007a94:	4b9a      	ldr	r3, [pc, #616]	; (8007d00 <_dtoa_r+0x2d8>)
 8007a96:	bfbc      	itt	lt
 8007a98:	2201      	movlt	r2, #1
 8007a9a:	f8c8 2000 	strlt.w	r2, [r8]
 8007a9e:	ea33 030b 	bics.w	r3, r3, fp
 8007aa2:	d11b      	bne.n	8007adc <_dtoa_r+0xb4>
 8007aa4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007aa6:	f242 730f 	movw	r3, #9999	; 0x270f
 8007aaa:	6013      	str	r3, [r2, #0]
 8007aac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007ab0:	4333      	orrs	r3, r6
 8007ab2:	f000 8592 	beq.w	80085da <_dtoa_r+0xbb2>
 8007ab6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ab8:	b963      	cbnz	r3, 8007ad4 <_dtoa_r+0xac>
 8007aba:	4b92      	ldr	r3, [pc, #584]	; (8007d04 <_dtoa_r+0x2dc>)
 8007abc:	e022      	b.n	8007b04 <_dtoa_r+0xdc>
 8007abe:	4b92      	ldr	r3, [pc, #584]	; (8007d08 <_dtoa_r+0x2e0>)
 8007ac0:	9301      	str	r3, [sp, #4]
 8007ac2:	3308      	adds	r3, #8
 8007ac4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007ac6:	6013      	str	r3, [r2, #0]
 8007ac8:	9801      	ldr	r0, [sp, #4]
 8007aca:	b013      	add	sp, #76	; 0x4c
 8007acc:	ecbd 8b04 	vpop	{d8-d9}
 8007ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ad4:	4b8b      	ldr	r3, [pc, #556]	; (8007d04 <_dtoa_r+0x2dc>)
 8007ad6:	9301      	str	r3, [sp, #4]
 8007ad8:	3303      	adds	r3, #3
 8007ada:	e7f3      	b.n	8007ac4 <_dtoa_r+0x9c>
 8007adc:	2200      	movs	r2, #0
 8007ade:	2300      	movs	r3, #0
 8007ae0:	4650      	mov	r0, sl
 8007ae2:	4659      	mov	r1, fp
 8007ae4:	f7f8 fff0 	bl	8000ac8 <__aeabi_dcmpeq>
 8007ae8:	ec4b ab19 	vmov	d9, sl, fp
 8007aec:	4680      	mov	r8, r0
 8007aee:	b158      	cbz	r0, 8007b08 <_dtoa_r+0xe0>
 8007af0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007af2:	2301      	movs	r3, #1
 8007af4:	6013      	str	r3, [r2, #0]
 8007af6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	f000 856b 	beq.w	80085d4 <_dtoa_r+0xbac>
 8007afe:	4883      	ldr	r0, [pc, #524]	; (8007d0c <_dtoa_r+0x2e4>)
 8007b00:	6018      	str	r0, [r3, #0]
 8007b02:	1e43      	subs	r3, r0, #1
 8007b04:	9301      	str	r3, [sp, #4]
 8007b06:	e7df      	b.n	8007ac8 <_dtoa_r+0xa0>
 8007b08:	ec4b ab10 	vmov	d0, sl, fp
 8007b0c:	aa10      	add	r2, sp, #64	; 0x40
 8007b0e:	a911      	add	r1, sp, #68	; 0x44
 8007b10:	4620      	mov	r0, r4
 8007b12:	f001 f8e3 	bl	8008cdc <__d2b>
 8007b16:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007b1a:	ee08 0a10 	vmov	s16, r0
 8007b1e:	2d00      	cmp	r5, #0
 8007b20:	f000 8084 	beq.w	8007c2c <_dtoa_r+0x204>
 8007b24:	ee19 3a90 	vmov	r3, s19
 8007b28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b2c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007b30:	4656      	mov	r6, sl
 8007b32:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007b36:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007b3a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007b3e:	4b74      	ldr	r3, [pc, #464]	; (8007d10 <_dtoa_r+0x2e8>)
 8007b40:	2200      	movs	r2, #0
 8007b42:	4630      	mov	r0, r6
 8007b44:	4639      	mov	r1, r7
 8007b46:	f7f8 fb9f 	bl	8000288 <__aeabi_dsub>
 8007b4a:	a365      	add	r3, pc, #404	; (adr r3, 8007ce0 <_dtoa_r+0x2b8>)
 8007b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b50:	f7f8 fd52 	bl	80005f8 <__aeabi_dmul>
 8007b54:	a364      	add	r3, pc, #400	; (adr r3, 8007ce8 <_dtoa_r+0x2c0>)
 8007b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b5a:	f7f8 fb97 	bl	800028c <__adddf3>
 8007b5e:	4606      	mov	r6, r0
 8007b60:	4628      	mov	r0, r5
 8007b62:	460f      	mov	r7, r1
 8007b64:	f7f8 fcde 	bl	8000524 <__aeabi_i2d>
 8007b68:	a361      	add	r3, pc, #388	; (adr r3, 8007cf0 <_dtoa_r+0x2c8>)
 8007b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b6e:	f7f8 fd43 	bl	80005f8 <__aeabi_dmul>
 8007b72:	4602      	mov	r2, r0
 8007b74:	460b      	mov	r3, r1
 8007b76:	4630      	mov	r0, r6
 8007b78:	4639      	mov	r1, r7
 8007b7a:	f7f8 fb87 	bl	800028c <__adddf3>
 8007b7e:	4606      	mov	r6, r0
 8007b80:	460f      	mov	r7, r1
 8007b82:	f7f8 ffe9 	bl	8000b58 <__aeabi_d2iz>
 8007b86:	2200      	movs	r2, #0
 8007b88:	9000      	str	r0, [sp, #0]
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	4630      	mov	r0, r6
 8007b8e:	4639      	mov	r1, r7
 8007b90:	f7f8 ffa4 	bl	8000adc <__aeabi_dcmplt>
 8007b94:	b150      	cbz	r0, 8007bac <_dtoa_r+0x184>
 8007b96:	9800      	ldr	r0, [sp, #0]
 8007b98:	f7f8 fcc4 	bl	8000524 <__aeabi_i2d>
 8007b9c:	4632      	mov	r2, r6
 8007b9e:	463b      	mov	r3, r7
 8007ba0:	f7f8 ff92 	bl	8000ac8 <__aeabi_dcmpeq>
 8007ba4:	b910      	cbnz	r0, 8007bac <_dtoa_r+0x184>
 8007ba6:	9b00      	ldr	r3, [sp, #0]
 8007ba8:	3b01      	subs	r3, #1
 8007baa:	9300      	str	r3, [sp, #0]
 8007bac:	9b00      	ldr	r3, [sp, #0]
 8007bae:	2b16      	cmp	r3, #22
 8007bb0:	d85a      	bhi.n	8007c68 <_dtoa_r+0x240>
 8007bb2:	9a00      	ldr	r2, [sp, #0]
 8007bb4:	4b57      	ldr	r3, [pc, #348]	; (8007d14 <_dtoa_r+0x2ec>)
 8007bb6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bbe:	ec51 0b19 	vmov	r0, r1, d9
 8007bc2:	f7f8 ff8b 	bl	8000adc <__aeabi_dcmplt>
 8007bc6:	2800      	cmp	r0, #0
 8007bc8:	d050      	beq.n	8007c6c <_dtoa_r+0x244>
 8007bca:	9b00      	ldr	r3, [sp, #0]
 8007bcc:	3b01      	subs	r3, #1
 8007bce:	9300      	str	r3, [sp, #0]
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	930b      	str	r3, [sp, #44]	; 0x2c
 8007bd4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007bd6:	1b5d      	subs	r5, r3, r5
 8007bd8:	1e6b      	subs	r3, r5, #1
 8007bda:	9305      	str	r3, [sp, #20]
 8007bdc:	bf45      	ittet	mi
 8007bde:	f1c5 0301 	rsbmi	r3, r5, #1
 8007be2:	9304      	strmi	r3, [sp, #16]
 8007be4:	2300      	movpl	r3, #0
 8007be6:	2300      	movmi	r3, #0
 8007be8:	bf4c      	ite	mi
 8007bea:	9305      	strmi	r3, [sp, #20]
 8007bec:	9304      	strpl	r3, [sp, #16]
 8007bee:	9b00      	ldr	r3, [sp, #0]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	db3d      	blt.n	8007c70 <_dtoa_r+0x248>
 8007bf4:	9b05      	ldr	r3, [sp, #20]
 8007bf6:	9a00      	ldr	r2, [sp, #0]
 8007bf8:	920a      	str	r2, [sp, #40]	; 0x28
 8007bfa:	4413      	add	r3, r2
 8007bfc:	9305      	str	r3, [sp, #20]
 8007bfe:	2300      	movs	r3, #0
 8007c00:	9307      	str	r3, [sp, #28]
 8007c02:	9b06      	ldr	r3, [sp, #24]
 8007c04:	2b09      	cmp	r3, #9
 8007c06:	f200 8089 	bhi.w	8007d1c <_dtoa_r+0x2f4>
 8007c0a:	2b05      	cmp	r3, #5
 8007c0c:	bfc4      	itt	gt
 8007c0e:	3b04      	subgt	r3, #4
 8007c10:	9306      	strgt	r3, [sp, #24]
 8007c12:	9b06      	ldr	r3, [sp, #24]
 8007c14:	f1a3 0302 	sub.w	r3, r3, #2
 8007c18:	bfcc      	ite	gt
 8007c1a:	2500      	movgt	r5, #0
 8007c1c:	2501      	movle	r5, #1
 8007c1e:	2b03      	cmp	r3, #3
 8007c20:	f200 8087 	bhi.w	8007d32 <_dtoa_r+0x30a>
 8007c24:	e8df f003 	tbb	[pc, r3]
 8007c28:	59383a2d 	.word	0x59383a2d
 8007c2c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007c30:	441d      	add	r5, r3
 8007c32:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007c36:	2b20      	cmp	r3, #32
 8007c38:	bfc1      	itttt	gt
 8007c3a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007c3e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007c42:	fa0b f303 	lslgt.w	r3, fp, r3
 8007c46:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007c4a:	bfda      	itte	le
 8007c4c:	f1c3 0320 	rsble	r3, r3, #32
 8007c50:	fa06 f003 	lslle.w	r0, r6, r3
 8007c54:	4318      	orrgt	r0, r3
 8007c56:	f7f8 fc55 	bl	8000504 <__aeabi_ui2d>
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	4606      	mov	r6, r0
 8007c5e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007c62:	3d01      	subs	r5, #1
 8007c64:	930e      	str	r3, [sp, #56]	; 0x38
 8007c66:	e76a      	b.n	8007b3e <_dtoa_r+0x116>
 8007c68:	2301      	movs	r3, #1
 8007c6a:	e7b2      	b.n	8007bd2 <_dtoa_r+0x1aa>
 8007c6c:	900b      	str	r0, [sp, #44]	; 0x2c
 8007c6e:	e7b1      	b.n	8007bd4 <_dtoa_r+0x1ac>
 8007c70:	9b04      	ldr	r3, [sp, #16]
 8007c72:	9a00      	ldr	r2, [sp, #0]
 8007c74:	1a9b      	subs	r3, r3, r2
 8007c76:	9304      	str	r3, [sp, #16]
 8007c78:	4253      	negs	r3, r2
 8007c7a:	9307      	str	r3, [sp, #28]
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	930a      	str	r3, [sp, #40]	; 0x28
 8007c80:	e7bf      	b.n	8007c02 <_dtoa_r+0x1da>
 8007c82:	2300      	movs	r3, #0
 8007c84:	9308      	str	r3, [sp, #32]
 8007c86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	dc55      	bgt.n	8007d38 <_dtoa_r+0x310>
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007c92:	461a      	mov	r2, r3
 8007c94:	9209      	str	r2, [sp, #36]	; 0x24
 8007c96:	e00c      	b.n	8007cb2 <_dtoa_r+0x28a>
 8007c98:	2301      	movs	r3, #1
 8007c9a:	e7f3      	b.n	8007c84 <_dtoa_r+0x25c>
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ca0:	9308      	str	r3, [sp, #32]
 8007ca2:	9b00      	ldr	r3, [sp, #0]
 8007ca4:	4413      	add	r3, r2
 8007ca6:	9302      	str	r3, [sp, #8]
 8007ca8:	3301      	adds	r3, #1
 8007caa:	2b01      	cmp	r3, #1
 8007cac:	9303      	str	r3, [sp, #12]
 8007cae:	bfb8      	it	lt
 8007cb0:	2301      	movlt	r3, #1
 8007cb2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	6042      	str	r2, [r0, #4]
 8007cb8:	2204      	movs	r2, #4
 8007cba:	f102 0614 	add.w	r6, r2, #20
 8007cbe:	429e      	cmp	r6, r3
 8007cc0:	6841      	ldr	r1, [r0, #4]
 8007cc2:	d93d      	bls.n	8007d40 <_dtoa_r+0x318>
 8007cc4:	4620      	mov	r0, r4
 8007cc6:	f000 fce1 	bl	800868c <_Balloc>
 8007cca:	9001      	str	r0, [sp, #4]
 8007ccc:	2800      	cmp	r0, #0
 8007cce:	d13b      	bne.n	8007d48 <_dtoa_r+0x320>
 8007cd0:	4b11      	ldr	r3, [pc, #68]	; (8007d18 <_dtoa_r+0x2f0>)
 8007cd2:	4602      	mov	r2, r0
 8007cd4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007cd8:	e6c0      	b.n	8007a5c <_dtoa_r+0x34>
 8007cda:	2301      	movs	r3, #1
 8007cdc:	e7df      	b.n	8007c9e <_dtoa_r+0x276>
 8007cde:	bf00      	nop
 8007ce0:	636f4361 	.word	0x636f4361
 8007ce4:	3fd287a7 	.word	0x3fd287a7
 8007ce8:	8b60c8b3 	.word	0x8b60c8b3
 8007cec:	3fc68a28 	.word	0x3fc68a28
 8007cf0:	509f79fb 	.word	0x509f79fb
 8007cf4:	3fd34413 	.word	0x3fd34413
 8007cf8:	0800f265 	.word	0x0800f265
 8007cfc:	0800f27c 	.word	0x0800f27c
 8007d00:	7ff00000 	.word	0x7ff00000
 8007d04:	0800f261 	.word	0x0800f261
 8007d08:	0800f258 	.word	0x0800f258
 8007d0c:	0800f235 	.word	0x0800f235
 8007d10:	3ff80000 	.word	0x3ff80000
 8007d14:	0800f370 	.word	0x0800f370
 8007d18:	0800f2d7 	.word	0x0800f2d7
 8007d1c:	2501      	movs	r5, #1
 8007d1e:	2300      	movs	r3, #0
 8007d20:	9306      	str	r3, [sp, #24]
 8007d22:	9508      	str	r5, [sp, #32]
 8007d24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d28:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	2312      	movs	r3, #18
 8007d30:	e7b0      	b.n	8007c94 <_dtoa_r+0x26c>
 8007d32:	2301      	movs	r3, #1
 8007d34:	9308      	str	r3, [sp, #32]
 8007d36:	e7f5      	b.n	8007d24 <_dtoa_r+0x2fc>
 8007d38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d3a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007d3e:	e7b8      	b.n	8007cb2 <_dtoa_r+0x28a>
 8007d40:	3101      	adds	r1, #1
 8007d42:	6041      	str	r1, [r0, #4]
 8007d44:	0052      	lsls	r2, r2, #1
 8007d46:	e7b8      	b.n	8007cba <_dtoa_r+0x292>
 8007d48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d4a:	9a01      	ldr	r2, [sp, #4]
 8007d4c:	601a      	str	r2, [r3, #0]
 8007d4e:	9b03      	ldr	r3, [sp, #12]
 8007d50:	2b0e      	cmp	r3, #14
 8007d52:	f200 809d 	bhi.w	8007e90 <_dtoa_r+0x468>
 8007d56:	2d00      	cmp	r5, #0
 8007d58:	f000 809a 	beq.w	8007e90 <_dtoa_r+0x468>
 8007d5c:	9b00      	ldr	r3, [sp, #0]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	dd32      	ble.n	8007dc8 <_dtoa_r+0x3a0>
 8007d62:	4ab7      	ldr	r2, [pc, #732]	; (8008040 <_dtoa_r+0x618>)
 8007d64:	f003 030f 	and.w	r3, r3, #15
 8007d68:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007d6c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007d70:	9b00      	ldr	r3, [sp, #0]
 8007d72:	05d8      	lsls	r0, r3, #23
 8007d74:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007d78:	d516      	bpl.n	8007da8 <_dtoa_r+0x380>
 8007d7a:	4bb2      	ldr	r3, [pc, #712]	; (8008044 <_dtoa_r+0x61c>)
 8007d7c:	ec51 0b19 	vmov	r0, r1, d9
 8007d80:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007d84:	f7f8 fd62 	bl	800084c <__aeabi_ddiv>
 8007d88:	f007 070f 	and.w	r7, r7, #15
 8007d8c:	4682      	mov	sl, r0
 8007d8e:	468b      	mov	fp, r1
 8007d90:	2503      	movs	r5, #3
 8007d92:	4eac      	ldr	r6, [pc, #688]	; (8008044 <_dtoa_r+0x61c>)
 8007d94:	b957      	cbnz	r7, 8007dac <_dtoa_r+0x384>
 8007d96:	4642      	mov	r2, r8
 8007d98:	464b      	mov	r3, r9
 8007d9a:	4650      	mov	r0, sl
 8007d9c:	4659      	mov	r1, fp
 8007d9e:	f7f8 fd55 	bl	800084c <__aeabi_ddiv>
 8007da2:	4682      	mov	sl, r0
 8007da4:	468b      	mov	fp, r1
 8007da6:	e028      	b.n	8007dfa <_dtoa_r+0x3d2>
 8007da8:	2502      	movs	r5, #2
 8007daa:	e7f2      	b.n	8007d92 <_dtoa_r+0x36a>
 8007dac:	07f9      	lsls	r1, r7, #31
 8007dae:	d508      	bpl.n	8007dc2 <_dtoa_r+0x39a>
 8007db0:	4640      	mov	r0, r8
 8007db2:	4649      	mov	r1, r9
 8007db4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007db8:	f7f8 fc1e 	bl	80005f8 <__aeabi_dmul>
 8007dbc:	3501      	adds	r5, #1
 8007dbe:	4680      	mov	r8, r0
 8007dc0:	4689      	mov	r9, r1
 8007dc2:	107f      	asrs	r7, r7, #1
 8007dc4:	3608      	adds	r6, #8
 8007dc6:	e7e5      	b.n	8007d94 <_dtoa_r+0x36c>
 8007dc8:	f000 809b 	beq.w	8007f02 <_dtoa_r+0x4da>
 8007dcc:	9b00      	ldr	r3, [sp, #0]
 8007dce:	4f9d      	ldr	r7, [pc, #628]	; (8008044 <_dtoa_r+0x61c>)
 8007dd0:	425e      	negs	r6, r3
 8007dd2:	4b9b      	ldr	r3, [pc, #620]	; (8008040 <_dtoa_r+0x618>)
 8007dd4:	f006 020f 	and.w	r2, r6, #15
 8007dd8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007de0:	ec51 0b19 	vmov	r0, r1, d9
 8007de4:	f7f8 fc08 	bl	80005f8 <__aeabi_dmul>
 8007de8:	1136      	asrs	r6, r6, #4
 8007dea:	4682      	mov	sl, r0
 8007dec:	468b      	mov	fp, r1
 8007dee:	2300      	movs	r3, #0
 8007df0:	2502      	movs	r5, #2
 8007df2:	2e00      	cmp	r6, #0
 8007df4:	d17a      	bne.n	8007eec <_dtoa_r+0x4c4>
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d1d3      	bne.n	8007da2 <_dtoa_r+0x37a>
 8007dfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	f000 8082 	beq.w	8007f06 <_dtoa_r+0x4de>
 8007e02:	4b91      	ldr	r3, [pc, #580]	; (8008048 <_dtoa_r+0x620>)
 8007e04:	2200      	movs	r2, #0
 8007e06:	4650      	mov	r0, sl
 8007e08:	4659      	mov	r1, fp
 8007e0a:	f7f8 fe67 	bl	8000adc <__aeabi_dcmplt>
 8007e0e:	2800      	cmp	r0, #0
 8007e10:	d079      	beq.n	8007f06 <_dtoa_r+0x4de>
 8007e12:	9b03      	ldr	r3, [sp, #12]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d076      	beq.n	8007f06 <_dtoa_r+0x4de>
 8007e18:	9b02      	ldr	r3, [sp, #8]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	dd36      	ble.n	8007e8c <_dtoa_r+0x464>
 8007e1e:	9b00      	ldr	r3, [sp, #0]
 8007e20:	4650      	mov	r0, sl
 8007e22:	4659      	mov	r1, fp
 8007e24:	1e5f      	subs	r7, r3, #1
 8007e26:	2200      	movs	r2, #0
 8007e28:	4b88      	ldr	r3, [pc, #544]	; (800804c <_dtoa_r+0x624>)
 8007e2a:	f7f8 fbe5 	bl	80005f8 <__aeabi_dmul>
 8007e2e:	9e02      	ldr	r6, [sp, #8]
 8007e30:	4682      	mov	sl, r0
 8007e32:	468b      	mov	fp, r1
 8007e34:	3501      	adds	r5, #1
 8007e36:	4628      	mov	r0, r5
 8007e38:	f7f8 fb74 	bl	8000524 <__aeabi_i2d>
 8007e3c:	4652      	mov	r2, sl
 8007e3e:	465b      	mov	r3, fp
 8007e40:	f7f8 fbda 	bl	80005f8 <__aeabi_dmul>
 8007e44:	4b82      	ldr	r3, [pc, #520]	; (8008050 <_dtoa_r+0x628>)
 8007e46:	2200      	movs	r2, #0
 8007e48:	f7f8 fa20 	bl	800028c <__adddf3>
 8007e4c:	46d0      	mov	r8, sl
 8007e4e:	46d9      	mov	r9, fp
 8007e50:	4682      	mov	sl, r0
 8007e52:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007e56:	2e00      	cmp	r6, #0
 8007e58:	d158      	bne.n	8007f0c <_dtoa_r+0x4e4>
 8007e5a:	4b7e      	ldr	r3, [pc, #504]	; (8008054 <_dtoa_r+0x62c>)
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	4640      	mov	r0, r8
 8007e60:	4649      	mov	r1, r9
 8007e62:	f7f8 fa11 	bl	8000288 <__aeabi_dsub>
 8007e66:	4652      	mov	r2, sl
 8007e68:	465b      	mov	r3, fp
 8007e6a:	4680      	mov	r8, r0
 8007e6c:	4689      	mov	r9, r1
 8007e6e:	f7f8 fe53 	bl	8000b18 <__aeabi_dcmpgt>
 8007e72:	2800      	cmp	r0, #0
 8007e74:	f040 8295 	bne.w	80083a2 <_dtoa_r+0x97a>
 8007e78:	4652      	mov	r2, sl
 8007e7a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007e7e:	4640      	mov	r0, r8
 8007e80:	4649      	mov	r1, r9
 8007e82:	f7f8 fe2b 	bl	8000adc <__aeabi_dcmplt>
 8007e86:	2800      	cmp	r0, #0
 8007e88:	f040 8289 	bne.w	800839e <_dtoa_r+0x976>
 8007e8c:	ec5b ab19 	vmov	sl, fp, d9
 8007e90:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	f2c0 8148 	blt.w	8008128 <_dtoa_r+0x700>
 8007e98:	9a00      	ldr	r2, [sp, #0]
 8007e9a:	2a0e      	cmp	r2, #14
 8007e9c:	f300 8144 	bgt.w	8008128 <_dtoa_r+0x700>
 8007ea0:	4b67      	ldr	r3, [pc, #412]	; (8008040 <_dtoa_r+0x618>)
 8007ea2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ea6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007eaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	f280 80d5 	bge.w	800805c <_dtoa_r+0x634>
 8007eb2:	9b03      	ldr	r3, [sp, #12]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	f300 80d1 	bgt.w	800805c <_dtoa_r+0x634>
 8007eba:	f040 826f 	bne.w	800839c <_dtoa_r+0x974>
 8007ebe:	4b65      	ldr	r3, [pc, #404]	; (8008054 <_dtoa_r+0x62c>)
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	4640      	mov	r0, r8
 8007ec4:	4649      	mov	r1, r9
 8007ec6:	f7f8 fb97 	bl	80005f8 <__aeabi_dmul>
 8007eca:	4652      	mov	r2, sl
 8007ecc:	465b      	mov	r3, fp
 8007ece:	f7f8 fe19 	bl	8000b04 <__aeabi_dcmpge>
 8007ed2:	9e03      	ldr	r6, [sp, #12]
 8007ed4:	4637      	mov	r7, r6
 8007ed6:	2800      	cmp	r0, #0
 8007ed8:	f040 8245 	bne.w	8008366 <_dtoa_r+0x93e>
 8007edc:	9d01      	ldr	r5, [sp, #4]
 8007ede:	2331      	movs	r3, #49	; 0x31
 8007ee0:	f805 3b01 	strb.w	r3, [r5], #1
 8007ee4:	9b00      	ldr	r3, [sp, #0]
 8007ee6:	3301      	adds	r3, #1
 8007ee8:	9300      	str	r3, [sp, #0]
 8007eea:	e240      	b.n	800836e <_dtoa_r+0x946>
 8007eec:	07f2      	lsls	r2, r6, #31
 8007eee:	d505      	bpl.n	8007efc <_dtoa_r+0x4d4>
 8007ef0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ef4:	f7f8 fb80 	bl	80005f8 <__aeabi_dmul>
 8007ef8:	3501      	adds	r5, #1
 8007efa:	2301      	movs	r3, #1
 8007efc:	1076      	asrs	r6, r6, #1
 8007efe:	3708      	adds	r7, #8
 8007f00:	e777      	b.n	8007df2 <_dtoa_r+0x3ca>
 8007f02:	2502      	movs	r5, #2
 8007f04:	e779      	b.n	8007dfa <_dtoa_r+0x3d2>
 8007f06:	9f00      	ldr	r7, [sp, #0]
 8007f08:	9e03      	ldr	r6, [sp, #12]
 8007f0a:	e794      	b.n	8007e36 <_dtoa_r+0x40e>
 8007f0c:	9901      	ldr	r1, [sp, #4]
 8007f0e:	4b4c      	ldr	r3, [pc, #304]	; (8008040 <_dtoa_r+0x618>)
 8007f10:	4431      	add	r1, r6
 8007f12:	910d      	str	r1, [sp, #52]	; 0x34
 8007f14:	9908      	ldr	r1, [sp, #32]
 8007f16:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007f1a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007f1e:	2900      	cmp	r1, #0
 8007f20:	d043      	beq.n	8007faa <_dtoa_r+0x582>
 8007f22:	494d      	ldr	r1, [pc, #308]	; (8008058 <_dtoa_r+0x630>)
 8007f24:	2000      	movs	r0, #0
 8007f26:	f7f8 fc91 	bl	800084c <__aeabi_ddiv>
 8007f2a:	4652      	mov	r2, sl
 8007f2c:	465b      	mov	r3, fp
 8007f2e:	f7f8 f9ab 	bl	8000288 <__aeabi_dsub>
 8007f32:	9d01      	ldr	r5, [sp, #4]
 8007f34:	4682      	mov	sl, r0
 8007f36:	468b      	mov	fp, r1
 8007f38:	4649      	mov	r1, r9
 8007f3a:	4640      	mov	r0, r8
 8007f3c:	f7f8 fe0c 	bl	8000b58 <__aeabi_d2iz>
 8007f40:	4606      	mov	r6, r0
 8007f42:	f7f8 faef 	bl	8000524 <__aeabi_i2d>
 8007f46:	4602      	mov	r2, r0
 8007f48:	460b      	mov	r3, r1
 8007f4a:	4640      	mov	r0, r8
 8007f4c:	4649      	mov	r1, r9
 8007f4e:	f7f8 f99b 	bl	8000288 <__aeabi_dsub>
 8007f52:	3630      	adds	r6, #48	; 0x30
 8007f54:	f805 6b01 	strb.w	r6, [r5], #1
 8007f58:	4652      	mov	r2, sl
 8007f5a:	465b      	mov	r3, fp
 8007f5c:	4680      	mov	r8, r0
 8007f5e:	4689      	mov	r9, r1
 8007f60:	f7f8 fdbc 	bl	8000adc <__aeabi_dcmplt>
 8007f64:	2800      	cmp	r0, #0
 8007f66:	d163      	bne.n	8008030 <_dtoa_r+0x608>
 8007f68:	4642      	mov	r2, r8
 8007f6a:	464b      	mov	r3, r9
 8007f6c:	4936      	ldr	r1, [pc, #216]	; (8008048 <_dtoa_r+0x620>)
 8007f6e:	2000      	movs	r0, #0
 8007f70:	f7f8 f98a 	bl	8000288 <__aeabi_dsub>
 8007f74:	4652      	mov	r2, sl
 8007f76:	465b      	mov	r3, fp
 8007f78:	f7f8 fdb0 	bl	8000adc <__aeabi_dcmplt>
 8007f7c:	2800      	cmp	r0, #0
 8007f7e:	f040 80b5 	bne.w	80080ec <_dtoa_r+0x6c4>
 8007f82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f84:	429d      	cmp	r5, r3
 8007f86:	d081      	beq.n	8007e8c <_dtoa_r+0x464>
 8007f88:	4b30      	ldr	r3, [pc, #192]	; (800804c <_dtoa_r+0x624>)
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	4650      	mov	r0, sl
 8007f8e:	4659      	mov	r1, fp
 8007f90:	f7f8 fb32 	bl	80005f8 <__aeabi_dmul>
 8007f94:	4b2d      	ldr	r3, [pc, #180]	; (800804c <_dtoa_r+0x624>)
 8007f96:	4682      	mov	sl, r0
 8007f98:	468b      	mov	fp, r1
 8007f9a:	4640      	mov	r0, r8
 8007f9c:	4649      	mov	r1, r9
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	f7f8 fb2a 	bl	80005f8 <__aeabi_dmul>
 8007fa4:	4680      	mov	r8, r0
 8007fa6:	4689      	mov	r9, r1
 8007fa8:	e7c6      	b.n	8007f38 <_dtoa_r+0x510>
 8007faa:	4650      	mov	r0, sl
 8007fac:	4659      	mov	r1, fp
 8007fae:	f7f8 fb23 	bl	80005f8 <__aeabi_dmul>
 8007fb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007fb4:	9d01      	ldr	r5, [sp, #4]
 8007fb6:	930f      	str	r3, [sp, #60]	; 0x3c
 8007fb8:	4682      	mov	sl, r0
 8007fba:	468b      	mov	fp, r1
 8007fbc:	4649      	mov	r1, r9
 8007fbe:	4640      	mov	r0, r8
 8007fc0:	f7f8 fdca 	bl	8000b58 <__aeabi_d2iz>
 8007fc4:	4606      	mov	r6, r0
 8007fc6:	f7f8 faad 	bl	8000524 <__aeabi_i2d>
 8007fca:	3630      	adds	r6, #48	; 0x30
 8007fcc:	4602      	mov	r2, r0
 8007fce:	460b      	mov	r3, r1
 8007fd0:	4640      	mov	r0, r8
 8007fd2:	4649      	mov	r1, r9
 8007fd4:	f7f8 f958 	bl	8000288 <__aeabi_dsub>
 8007fd8:	f805 6b01 	strb.w	r6, [r5], #1
 8007fdc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007fde:	429d      	cmp	r5, r3
 8007fe0:	4680      	mov	r8, r0
 8007fe2:	4689      	mov	r9, r1
 8007fe4:	f04f 0200 	mov.w	r2, #0
 8007fe8:	d124      	bne.n	8008034 <_dtoa_r+0x60c>
 8007fea:	4b1b      	ldr	r3, [pc, #108]	; (8008058 <_dtoa_r+0x630>)
 8007fec:	4650      	mov	r0, sl
 8007fee:	4659      	mov	r1, fp
 8007ff0:	f7f8 f94c 	bl	800028c <__adddf3>
 8007ff4:	4602      	mov	r2, r0
 8007ff6:	460b      	mov	r3, r1
 8007ff8:	4640      	mov	r0, r8
 8007ffa:	4649      	mov	r1, r9
 8007ffc:	f7f8 fd8c 	bl	8000b18 <__aeabi_dcmpgt>
 8008000:	2800      	cmp	r0, #0
 8008002:	d173      	bne.n	80080ec <_dtoa_r+0x6c4>
 8008004:	4652      	mov	r2, sl
 8008006:	465b      	mov	r3, fp
 8008008:	4913      	ldr	r1, [pc, #76]	; (8008058 <_dtoa_r+0x630>)
 800800a:	2000      	movs	r0, #0
 800800c:	f7f8 f93c 	bl	8000288 <__aeabi_dsub>
 8008010:	4602      	mov	r2, r0
 8008012:	460b      	mov	r3, r1
 8008014:	4640      	mov	r0, r8
 8008016:	4649      	mov	r1, r9
 8008018:	f7f8 fd60 	bl	8000adc <__aeabi_dcmplt>
 800801c:	2800      	cmp	r0, #0
 800801e:	f43f af35 	beq.w	8007e8c <_dtoa_r+0x464>
 8008022:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008024:	1e6b      	subs	r3, r5, #1
 8008026:	930f      	str	r3, [sp, #60]	; 0x3c
 8008028:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800802c:	2b30      	cmp	r3, #48	; 0x30
 800802e:	d0f8      	beq.n	8008022 <_dtoa_r+0x5fa>
 8008030:	9700      	str	r7, [sp, #0]
 8008032:	e049      	b.n	80080c8 <_dtoa_r+0x6a0>
 8008034:	4b05      	ldr	r3, [pc, #20]	; (800804c <_dtoa_r+0x624>)
 8008036:	f7f8 fadf 	bl	80005f8 <__aeabi_dmul>
 800803a:	4680      	mov	r8, r0
 800803c:	4689      	mov	r9, r1
 800803e:	e7bd      	b.n	8007fbc <_dtoa_r+0x594>
 8008040:	0800f370 	.word	0x0800f370
 8008044:	0800f348 	.word	0x0800f348
 8008048:	3ff00000 	.word	0x3ff00000
 800804c:	40240000 	.word	0x40240000
 8008050:	401c0000 	.word	0x401c0000
 8008054:	40140000 	.word	0x40140000
 8008058:	3fe00000 	.word	0x3fe00000
 800805c:	9d01      	ldr	r5, [sp, #4]
 800805e:	4656      	mov	r6, sl
 8008060:	465f      	mov	r7, fp
 8008062:	4642      	mov	r2, r8
 8008064:	464b      	mov	r3, r9
 8008066:	4630      	mov	r0, r6
 8008068:	4639      	mov	r1, r7
 800806a:	f7f8 fbef 	bl	800084c <__aeabi_ddiv>
 800806e:	f7f8 fd73 	bl	8000b58 <__aeabi_d2iz>
 8008072:	4682      	mov	sl, r0
 8008074:	f7f8 fa56 	bl	8000524 <__aeabi_i2d>
 8008078:	4642      	mov	r2, r8
 800807a:	464b      	mov	r3, r9
 800807c:	f7f8 fabc 	bl	80005f8 <__aeabi_dmul>
 8008080:	4602      	mov	r2, r0
 8008082:	460b      	mov	r3, r1
 8008084:	4630      	mov	r0, r6
 8008086:	4639      	mov	r1, r7
 8008088:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800808c:	f7f8 f8fc 	bl	8000288 <__aeabi_dsub>
 8008090:	f805 6b01 	strb.w	r6, [r5], #1
 8008094:	9e01      	ldr	r6, [sp, #4]
 8008096:	9f03      	ldr	r7, [sp, #12]
 8008098:	1bae      	subs	r6, r5, r6
 800809a:	42b7      	cmp	r7, r6
 800809c:	4602      	mov	r2, r0
 800809e:	460b      	mov	r3, r1
 80080a0:	d135      	bne.n	800810e <_dtoa_r+0x6e6>
 80080a2:	f7f8 f8f3 	bl	800028c <__adddf3>
 80080a6:	4642      	mov	r2, r8
 80080a8:	464b      	mov	r3, r9
 80080aa:	4606      	mov	r6, r0
 80080ac:	460f      	mov	r7, r1
 80080ae:	f7f8 fd33 	bl	8000b18 <__aeabi_dcmpgt>
 80080b2:	b9d0      	cbnz	r0, 80080ea <_dtoa_r+0x6c2>
 80080b4:	4642      	mov	r2, r8
 80080b6:	464b      	mov	r3, r9
 80080b8:	4630      	mov	r0, r6
 80080ba:	4639      	mov	r1, r7
 80080bc:	f7f8 fd04 	bl	8000ac8 <__aeabi_dcmpeq>
 80080c0:	b110      	cbz	r0, 80080c8 <_dtoa_r+0x6a0>
 80080c2:	f01a 0f01 	tst.w	sl, #1
 80080c6:	d110      	bne.n	80080ea <_dtoa_r+0x6c2>
 80080c8:	4620      	mov	r0, r4
 80080ca:	ee18 1a10 	vmov	r1, s16
 80080ce:	f000 fb1d 	bl	800870c <_Bfree>
 80080d2:	2300      	movs	r3, #0
 80080d4:	9800      	ldr	r0, [sp, #0]
 80080d6:	702b      	strb	r3, [r5, #0]
 80080d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80080da:	3001      	adds	r0, #1
 80080dc:	6018      	str	r0, [r3, #0]
 80080de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	f43f acf1 	beq.w	8007ac8 <_dtoa_r+0xa0>
 80080e6:	601d      	str	r5, [r3, #0]
 80080e8:	e4ee      	b.n	8007ac8 <_dtoa_r+0xa0>
 80080ea:	9f00      	ldr	r7, [sp, #0]
 80080ec:	462b      	mov	r3, r5
 80080ee:	461d      	mov	r5, r3
 80080f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80080f4:	2a39      	cmp	r2, #57	; 0x39
 80080f6:	d106      	bne.n	8008106 <_dtoa_r+0x6de>
 80080f8:	9a01      	ldr	r2, [sp, #4]
 80080fa:	429a      	cmp	r2, r3
 80080fc:	d1f7      	bne.n	80080ee <_dtoa_r+0x6c6>
 80080fe:	9901      	ldr	r1, [sp, #4]
 8008100:	2230      	movs	r2, #48	; 0x30
 8008102:	3701      	adds	r7, #1
 8008104:	700a      	strb	r2, [r1, #0]
 8008106:	781a      	ldrb	r2, [r3, #0]
 8008108:	3201      	adds	r2, #1
 800810a:	701a      	strb	r2, [r3, #0]
 800810c:	e790      	b.n	8008030 <_dtoa_r+0x608>
 800810e:	4ba6      	ldr	r3, [pc, #664]	; (80083a8 <_dtoa_r+0x980>)
 8008110:	2200      	movs	r2, #0
 8008112:	f7f8 fa71 	bl	80005f8 <__aeabi_dmul>
 8008116:	2200      	movs	r2, #0
 8008118:	2300      	movs	r3, #0
 800811a:	4606      	mov	r6, r0
 800811c:	460f      	mov	r7, r1
 800811e:	f7f8 fcd3 	bl	8000ac8 <__aeabi_dcmpeq>
 8008122:	2800      	cmp	r0, #0
 8008124:	d09d      	beq.n	8008062 <_dtoa_r+0x63a>
 8008126:	e7cf      	b.n	80080c8 <_dtoa_r+0x6a0>
 8008128:	9a08      	ldr	r2, [sp, #32]
 800812a:	2a00      	cmp	r2, #0
 800812c:	f000 80d7 	beq.w	80082de <_dtoa_r+0x8b6>
 8008130:	9a06      	ldr	r2, [sp, #24]
 8008132:	2a01      	cmp	r2, #1
 8008134:	f300 80ba 	bgt.w	80082ac <_dtoa_r+0x884>
 8008138:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800813a:	2a00      	cmp	r2, #0
 800813c:	f000 80b2 	beq.w	80082a4 <_dtoa_r+0x87c>
 8008140:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008144:	9e07      	ldr	r6, [sp, #28]
 8008146:	9d04      	ldr	r5, [sp, #16]
 8008148:	9a04      	ldr	r2, [sp, #16]
 800814a:	441a      	add	r2, r3
 800814c:	9204      	str	r2, [sp, #16]
 800814e:	9a05      	ldr	r2, [sp, #20]
 8008150:	2101      	movs	r1, #1
 8008152:	441a      	add	r2, r3
 8008154:	4620      	mov	r0, r4
 8008156:	9205      	str	r2, [sp, #20]
 8008158:	f000 fb90 	bl	800887c <__i2b>
 800815c:	4607      	mov	r7, r0
 800815e:	2d00      	cmp	r5, #0
 8008160:	dd0c      	ble.n	800817c <_dtoa_r+0x754>
 8008162:	9b05      	ldr	r3, [sp, #20]
 8008164:	2b00      	cmp	r3, #0
 8008166:	dd09      	ble.n	800817c <_dtoa_r+0x754>
 8008168:	42ab      	cmp	r3, r5
 800816a:	9a04      	ldr	r2, [sp, #16]
 800816c:	bfa8      	it	ge
 800816e:	462b      	movge	r3, r5
 8008170:	1ad2      	subs	r2, r2, r3
 8008172:	9204      	str	r2, [sp, #16]
 8008174:	9a05      	ldr	r2, [sp, #20]
 8008176:	1aed      	subs	r5, r5, r3
 8008178:	1ad3      	subs	r3, r2, r3
 800817a:	9305      	str	r3, [sp, #20]
 800817c:	9b07      	ldr	r3, [sp, #28]
 800817e:	b31b      	cbz	r3, 80081c8 <_dtoa_r+0x7a0>
 8008180:	9b08      	ldr	r3, [sp, #32]
 8008182:	2b00      	cmp	r3, #0
 8008184:	f000 80af 	beq.w	80082e6 <_dtoa_r+0x8be>
 8008188:	2e00      	cmp	r6, #0
 800818a:	dd13      	ble.n	80081b4 <_dtoa_r+0x78c>
 800818c:	4639      	mov	r1, r7
 800818e:	4632      	mov	r2, r6
 8008190:	4620      	mov	r0, r4
 8008192:	f000 fc33 	bl	80089fc <__pow5mult>
 8008196:	ee18 2a10 	vmov	r2, s16
 800819a:	4601      	mov	r1, r0
 800819c:	4607      	mov	r7, r0
 800819e:	4620      	mov	r0, r4
 80081a0:	f000 fb82 	bl	80088a8 <__multiply>
 80081a4:	ee18 1a10 	vmov	r1, s16
 80081a8:	4680      	mov	r8, r0
 80081aa:	4620      	mov	r0, r4
 80081ac:	f000 faae 	bl	800870c <_Bfree>
 80081b0:	ee08 8a10 	vmov	s16, r8
 80081b4:	9b07      	ldr	r3, [sp, #28]
 80081b6:	1b9a      	subs	r2, r3, r6
 80081b8:	d006      	beq.n	80081c8 <_dtoa_r+0x7a0>
 80081ba:	ee18 1a10 	vmov	r1, s16
 80081be:	4620      	mov	r0, r4
 80081c0:	f000 fc1c 	bl	80089fc <__pow5mult>
 80081c4:	ee08 0a10 	vmov	s16, r0
 80081c8:	2101      	movs	r1, #1
 80081ca:	4620      	mov	r0, r4
 80081cc:	f000 fb56 	bl	800887c <__i2b>
 80081d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	4606      	mov	r6, r0
 80081d6:	f340 8088 	ble.w	80082ea <_dtoa_r+0x8c2>
 80081da:	461a      	mov	r2, r3
 80081dc:	4601      	mov	r1, r0
 80081de:	4620      	mov	r0, r4
 80081e0:	f000 fc0c 	bl	80089fc <__pow5mult>
 80081e4:	9b06      	ldr	r3, [sp, #24]
 80081e6:	2b01      	cmp	r3, #1
 80081e8:	4606      	mov	r6, r0
 80081ea:	f340 8081 	ble.w	80082f0 <_dtoa_r+0x8c8>
 80081ee:	f04f 0800 	mov.w	r8, #0
 80081f2:	6933      	ldr	r3, [r6, #16]
 80081f4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80081f8:	6918      	ldr	r0, [r3, #16]
 80081fa:	f000 faef 	bl	80087dc <__hi0bits>
 80081fe:	f1c0 0020 	rsb	r0, r0, #32
 8008202:	9b05      	ldr	r3, [sp, #20]
 8008204:	4418      	add	r0, r3
 8008206:	f010 001f 	ands.w	r0, r0, #31
 800820a:	f000 8092 	beq.w	8008332 <_dtoa_r+0x90a>
 800820e:	f1c0 0320 	rsb	r3, r0, #32
 8008212:	2b04      	cmp	r3, #4
 8008214:	f340 808a 	ble.w	800832c <_dtoa_r+0x904>
 8008218:	f1c0 001c 	rsb	r0, r0, #28
 800821c:	9b04      	ldr	r3, [sp, #16]
 800821e:	4403      	add	r3, r0
 8008220:	9304      	str	r3, [sp, #16]
 8008222:	9b05      	ldr	r3, [sp, #20]
 8008224:	4403      	add	r3, r0
 8008226:	4405      	add	r5, r0
 8008228:	9305      	str	r3, [sp, #20]
 800822a:	9b04      	ldr	r3, [sp, #16]
 800822c:	2b00      	cmp	r3, #0
 800822e:	dd07      	ble.n	8008240 <_dtoa_r+0x818>
 8008230:	ee18 1a10 	vmov	r1, s16
 8008234:	461a      	mov	r2, r3
 8008236:	4620      	mov	r0, r4
 8008238:	f000 fc3a 	bl	8008ab0 <__lshift>
 800823c:	ee08 0a10 	vmov	s16, r0
 8008240:	9b05      	ldr	r3, [sp, #20]
 8008242:	2b00      	cmp	r3, #0
 8008244:	dd05      	ble.n	8008252 <_dtoa_r+0x82a>
 8008246:	4631      	mov	r1, r6
 8008248:	461a      	mov	r2, r3
 800824a:	4620      	mov	r0, r4
 800824c:	f000 fc30 	bl	8008ab0 <__lshift>
 8008250:	4606      	mov	r6, r0
 8008252:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008254:	2b00      	cmp	r3, #0
 8008256:	d06e      	beq.n	8008336 <_dtoa_r+0x90e>
 8008258:	ee18 0a10 	vmov	r0, s16
 800825c:	4631      	mov	r1, r6
 800825e:	f000 fc97 	bl	8008b90 <__mcmp>
 8008262:	2800      	cmp	r0, #0
 8008264:	da67      	bge.n	8008336 <_dtoa_r+0x90e>
 8008266:	9b00      	ldr	r3, [sp, #0]
 8008268:	3b01      	subs	r3, #1
 800826a:	ee18 1a10 	vmov	r1, s16
 800826e:	9300      	str	r3, [sp, #0]
 8008270:	220a      	movs	r2, #10
 8008272:	2300      	movs	r3, #0
 8008274:	4620      	mov	r0, r4
 8008276:	f000 fa6b 	bl	8008750 <__multadd>
 800827a:	9b08      	ldr	r3, [sp, #32]
 800827c:	ee08 0a10 	vmov	s16, r0
 8008280:	2b00      	cmp	r3, #0
 8008282:	f000 81b1 	beq.w	80085e8 <_dtoa_r+0xbc0>
 8008286:	2300      	movs	r3, #0
 8008288:	4639      	mov	r1, r7
 800828a:	220a      	movs	r2, #10
 800828c:	4620      	mov	r0, r4
 800828e:	f000 fa5f 	bl	8008750 <__multadd>
 8008292:	9b02      	ldr	r3, [sp, #8]
 8008294:	2b00      	cmp	r3, #0
 8008296:	4607      	mov	r7, r0
 8008298:	f300 808e 	bgt.w	80083b8 <_dtoa_r+0x990>
 800829c:	9b06      	ldr	r3, [sp, #24]
 800829e:	2b02      	cmp	r3, #2
 80082a0:	dc51      	bgt.n	8008346 <_dtoa_r+0x91e>
 80082a2:	e089      	b.n	80083b8 <_dtoa_r+0x990>
 80082a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80082a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80082aa:	e74b      	b.n	8008144 <_dtoa_r+0x71c>
 80082ac:	9b03      	ldr	r3, [sp, #12]
 80082ae:	1e5e      	subs	r6, r3, #1
 80082b0:	9b07      	ldr	r3, [sp, #28]
 80082b2:	42b3      	cmp	r3, r6
 80082b4:	bfbf      	itttt	lt
 80082b6:	9b07      	ldrlt	r3, [sp, #28]
 80082b8:	9607      	strlt	r6, [sp, #28]
 80082ba:	1af2      	sublt	r2, r6, r3
 80082bc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80082be:	bfb6      	itet	lt
 80082c0:	189b      	addlt	r3, r3, r2
 80082c2:	1b9e      	subge	r6, r3, r6
 80082c4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80082c6:	9b03      	ldr	r3, [sp, #12]
 80082c8:	bfb8      	it	lt
 80082ca:	2600      	movlt	r6, #0
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	bfb7      	itett	lt
 80082d0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80082d4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80082d8:	1a9d      	sublt	r5, r3, r2
 80082da:	2300      	movlt	r3, #0
 80082dc:	e734      	b.n	8008148 <_dtoa_r+0x720>
 80082de:	9e07      	ldr	r6, [sp, #28]
 80082e0:	9d04      	ldr	r5, [sp, #16]
 80082e2:	9f08      	ldr	r7, [sp, #32]
 80082e4:	e73b      	b.n	800815e <_dtoa_r+0x736>
 80082e6:	9a07      	ldr	r2, [sp, #28]
 80082e8:	e767      	b.n	80081ba <_dtoa_r+0x792>
 80082ea:	9b06      	ldr	r3, [sp, #24]
 80082ec:	2b01      	cmp	r3, #1
 80082ee:	dc18      	bgt.n	8008322 <_dtoa_r+0x8fa>
 80082f0:	f1ba 0f00 	cmp.w	sl, #0
 80082f4:	d115      	bne.n	8008322 <_dtoa_r+0x8fa>
 80082f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80082fa:	b993      	cbnz	r3, 8008322 <_dtoa_r+0x8fa>
 80082fc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008300:	0d1b      	lsrs	r3, r3, #20
 8008302:	051b      	lsls	r3, r3, #20
 8008304:	b183      	cbz	r3, 8008328 <_dtoa_r+0x900>
 8008306:	9b04      	ldr	r3, [sp, #16]
 8008308:	3301      	adds	r3, #1
 800830a:	9304      	str	r3, [sp, #16]
 800830c:	9b05      	ldr	r3, [sp, #20]
 800830e:	3301      	adds	r3, #1
 8008310:	9305      	str	r3, [sp, #20]
 8008312:	f04f 0801 	mov.w	r8, #1
 8008316:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008318:	2b00      	cmp	r3, #0
 800831a:	f47f af6a 	bne.w	80081f2 <_dtoa_r+0x7ca>
 800831e:	2001      	movs	r0, #1
 8008320:	e76f      	b.n	8008202 <_dtoa_r+0x7da>
 8008322:	f04f 0800 	mov.w	r8, #0
 8008326:	e7f6      	b.n	8008316 <_dtoa_r+0x8ee>
 8008328:	4698      	mov	r8, r3
 800832a:	e7f4      	b.n	8008316 <_dtoa_r+0x8ee>
 800832c:	f43f af7d 	beq.w	800822a <_dtoa_r+0x802>
 8008330:	4618      	mov	r0, r3
 8008332:	301c      	adds	r0, #28
 8008334:	e772      	b.n	800821c <_dtoa_r+0x7f4>
 8008336:	9b03      	ldr	r3, [sp, #12]
 8008338:	2b00      	cmp	r3, #0
 800833a:	dc37      	bgt.n	80083ac <_dtoa_r+0x984>
 800833c:	9b06      	ldr	r3, [sp, #24]
 800833e:	2b02      	cmp	r3, #2
 8008340:	dd34      	ble.n	80083ac <_dtoa_r+0x984>
 8008342:	9b03      	ldr	r3, [sp, #12]
 8008344:	9302      	str	r3, [sp, #8]
 8008346:	9b02      	ldr	r3, [sp, #8]
 8008348:	b96b      	cbnz	r3, 8008366 <_dtoa_r+0x93e>
 800834a:	4631      	mov	r1, r6
 800834c:	2205      	movs	r2, #5
 800834e:	4620      	mov	r0, r4
 8008350:	f000 f9fe 	bl	8008750 <__multadd>
 8008354:	4601      	mov	r1, r0
 8008356:	4606      	mov	r6, r0
 8008358:	ee18 0a10 	vmov	r0, s16
 800835c:	f000 fc18 	bl	8008b90 <__mcmp>
 8008360:	2800      	cmp	r0, #0
 8008362:	f73f adbb 	bgt.w	8007edc <_dtoa_r+0x4b4>
 8008366:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008368:	9d01      	ldr	r5, [sp, #4]
 800836a:	43db      	mvns	r3, r3
 800836c:	9300      	str	r3, [sp, #0]
 800836e:	f04f 0800 	mov.w	r8, #0
 8008372:	4631      	mov	r1, r6
 8008374:	4620      	mov	r0, r4
 8008376:	f000 f9c9 	bl	800870c <_Bfree>
 800837a:	2f00      	cmp	r7, #0
 800837c:	f43f aea4 	beq.w	80080c8 <_dtoa_r+0x6a0>
 8008380:	f1b8 0f00 	cmp.w	r8, #0
 8008384:	d005      	beq.n	8008392 <_dtoa_r+0x96a>
 8008386:	45b8      	cmp	r8, r7
 8008388:	d003      	beq.n	8008392 <_dtoa_r+0x96a>
 800838a:	4641      	mov	r1, r8
 800838c:	4620      	mov	r0, r4
 800838e:	f000 f9bd 	bl	800870c <_Bfree>
 8008392:	4639      	mov	r1, r7
 8008394:	4620      	mov	r0, r4
 8008396:	f000 f9b9 	bl	800870c <_Bfree>
 800839a:	e695      	b.n	80080c8 <_dtoa_r+0x6a0>
 800839c:	2600      	movs	r6, #0
 800839e:	4637      	mov	r7, r6
 80083a0:	e7e1      	b.n	8008366 <_dtoa_r+0x93e>
 80083a2:	9700      	str	r7, [sp, #0]
 80083a4:	4637      	mov	r7, r6
 80083a6:	e599      	b.n	8007edc <_dtoa_r+0x4b4>
 80083a8:	40240000 	.word	0x40240000
 80083ac:	9b08      	ldr	r3, [sp, #32]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	f000 80ca 	beq.w	8008548 <_dtoa_r+0xb20>
 80083b4:	9b03      	ldr	r3, [sp, #12]
 80083b6:	9302      	str	r3, [sp, #8]
 80083b8:	2d00      	cmp	r5, #0
 80083ba:	dd05      	ble.n	80083c8 <_dtoa_r+0x9a0>
 80083bc:	4639      	mov	r1, r7
 80083be:	462a      	mov	r2, r5
 80083c0:	4620      	mov	r0, r4
 80083c2:	f000 fb75 	bl	8008ab0 <__lshift>
 80083c6:	4607      	mov	r7, r0
 80083c8:	f1b8 0f00 	cmp.w	r8, #0
 80083cc:	d05b      	beq.n	8008486 <_dtoa_r+0xa5e>
 80083ce:	6879      	ldr	r1, [r7, #4]
 80083d0:	4620      	mov	r0, r4
 80083d2:	f000 f95b 	bl	800868c <_Balloc>
 80083d6:	4605      	mov	r5, r0
 80083d8:	b928      	cbnz	r0, 80083e6 <_dtoa_r+0x9be>
 80083da:	4b87      	ldr	r3, [pc, #540]	; (80085f8 <_dtoa_r+0xbd0>)
 80083dc:	4602      	mov	r2, r0
 80083de:	f240 21ea 	movw	r1, #746	; 0x2ea
 80083e2:	f7ff bb3b 	b.w	8007a5c <_dtoa_r+0x34>
 80083e6:	693a      	ldr	r2, [r7, #16]
 80083e8:	3202      	adds	r2, #2
 80083ea:	0092      	lsls	r2, r2, #2
 80083ec:	f107 010c 	add.w	r1, r7, #12
 80083f0:	300c      	adds	r0, #12
 80083f2:	f7fe fb33 	bl	8006a5c <memcpy>
 80083f6:	2201      	movs	r2, #1
 80083f8:	4629      	mov	r1, r5
 80083fa:	4620      	mov	r0, r4
 80083fc:	f000 fb58 	bl	8008ab0 <__lshift>
 8008400:	9b01      	ldr	r3, [sp, #4]
 8008402:	f103 0901 	add.w	r9, r3, #1
 8008406:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800840a:	4413      	add	r3, r2
 800840c:	9305      	str	r3, [sp, #20]
 800840e:	f00a 0301 	and.w	r3, sl, #1
 8008412:	46b8      	mov	r8, r7
 8008414:	9304      	str	r3, [sp, #16]
 8008416:	4607      	mov	r7, r0
 8008418:	4631      	mov	r1, r6
 800841a:	ee18 0a10 	vmov	r0, s16
 800841e:	f7ff fa75 	bl	800790c <quorem>
 8008422:	4641      	mov	r1, r8
 8008424:	9002      	str	r0, [sp, #8]
 8008426:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800842a:	ee18 0a10 	vmov	r0, s16
 800842e:	f000 fbaf 	bl	8008b90 <__mcmp>
 8008432:	463a      	mov	r2, r7
 8008434:	9003      	str	r0, [sp, #12]
 8008436:	4631      	mov	r1, r6
 8008438:	4620      	mov	r0, r4
 800843a:	f000 fbc5 	bl	8008bc8 <__mdiff>
 800843e:	68c2      	ldr	r2, [r0, #12]
 8008440:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8008444:	4605      	mov	r5, r0
 8008446:	bb02      	cbnz	r2, 800848a <_dtoa_r+0xa62>
 8008448:	4601      	mov	r1, r0
 800844a:	ee18 0a10 	vmov	r0, s16
 800844e:	f000 fb9f 	bl	8008b90 <__mcmp>
 8008452:	4602      	mov	r2, r0
 8008454:	4629      	mov	r1, r5
 8008456:	4620      	mov	r0, r4
 8008458:	9207      	str	r2, [sp, #28]
 800845a:	f000 f957 	bl	800870c <_Bfree>
 800845e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008462:	ea43 0102 	orr.w	r1, r3, r2
 8008466:	9b04      	ldr	r3, [sp, #16]
 8008468:	430b      	orrs	r3, r1
 800846a:	464d      	mov	r5, r9
 800846c:	d10f      	bne.n	800848e <_dtoa_r+0xa66>
 800846e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008472:	d02a      	beq.n	80084ca <_dtoa_r+0xaa2>
 8008474:	9b03      	ldr	r3, [sp, #12]
 8008476:	2b00      	cmp	r3, #0
 8008478:	dd02      	ble.n	8008480 <_dtoa_r+0xa58>
 800847a:	9b02      	ldr	r3, [sp, #8]
 800847c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008480:	f88b a000 	strb.w	sl, [fp]
 8008484:	e775      	b.n	8008372 <_dtoa_r+0x94a>
 8008486:	4638      	mov	r0, r7
 8008488:	e7ba      	b.n	8008400 <_dtoa_r+0x9d8>
 800848a:	2201      	movs	r2, #1
 800848c:	e7e2      	b.n	8008454 <_dtoa_r+0xa2c>
 800848e:	9b03      	ldr	r3, [sp, #12]
 8008490:	2b00      	cmp	r3, #0
 8008492:	db04      	blt.n	800849e <_dtoa_r+0xa76>
 8008494:	9906      	ldr	r1, [sp, #24]
 8008496:	430b      	orrs	r3, r1
 8008498:	9904      	ldr	r1, [sp, #16]
 800849a:	430b      	orrs	r3, r1
 800849c:	d122      	bne.n	80084e4 <_dtoa_r+0xabc>
 800849e:	2a00      	cmp	r2, #0
 80084a0:	ddee      	ble.n	8008480 <_dtoa_r+0xa58>
 80084a2:	ee18 1a10 	vmov	r1, s16
 80084a6:	2201      	movs	r2, #1
 80084a8:	4620      	mov	r0, r4
 80084aa:	f000 fb01 	bl	8008ab0 <__lshift>
 80084ae:	4631      	mov	r1, r6
 80084b0:	ee08 0a10 	vmov	s16, r0
 80084b4:	f000 fb6c 	bl	8008b90 <__mcmp>
 80084b8:	2800      	cmp	r0, #0
 80084ba:	dc03      	bgt.n	80084c4 <_dtoa_r+0xa9c>
 80084bc:	d1e0      	bne.n	8008480 <_dtoa_r+0xa58>
 80084be:	f01a 0f01 	tst.w	sl, #1
 80084c2:	d0dd      	beq.n	8008480 <_dtoa_r+0xa58>
 80084c4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80084c8:	d1d7      	bne.n	800847a <_dtoa_r+0xa52>
 80084ca:	2339      	movs	r3, #57	; 0x39
 80084cc:	f88b 3000 	strb.w	r3, [fp]
 80084d0:	462b      	mov	r3, r5
 80084d2:	461d      	mov	r5, r3
 80084d4:	3b01      	subs	r3, #1
 80084d6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80084da:	2a39      	cmp	r2, #57	; 0x39
 80084dc:	d071      	beq.n	80085c2 <_dtoa_r+0xb9a>
 80084de:	3201      	adds	r2, #1
 80084e0:	701a      	strb	r2, [r3, #0]
 80084e2:	e746      	b.n	8008372 <_dtoa_r+0x94a>
 80084e4:	2a00      	cmp	r2, #0
 80084e6:	dd07      	ble.n	80084f8 <_dtoa_r+0xad0>
 80084e8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80084ec:	d0ed      	beq.n	80084ca <_dtoa_r+0xaa2>
 80084ee:	f10a 0301 	add.w	r3, sl, #1
 80084f2:	f88b 3000 	strb.w	r3, [fp]
 80084f6:	e73c      	b.n	8008372 <_dtoa_r+0x94a>
 80084f8:	9b05      	ldr	r3, [sp, #20]
 80084fa:	f809 ac01 	strb.w	sl, [r9, #-1]
 80084fe:	4599      	cmp	r9, r3
 8008500:	d047      	beq.n	8008592 <_dtoa_r+0xb6a>
 8008502:	ee18 1a10 	vmov	r1, s16
 8008506:	2300      	movs	r3, #0
 8008508:	220a      	movs	r2, #10
 800850a:	4620      	mov	r0, r4
 800850c:	f000 f920 	bl	8008750 <__multadd>
 8008510:	45b8      	cmp	r8, r7
 8008512:	ee08 0a10 	vmov	s16, r0
 8008516:	f04f 0300 	mov.w	r3, #0
 800851a:	f04f 020a 	mov.w	r2, #10
 800851e:	4641      	mov	r1, r8
 8008520:	4620      	mov	r0, r4
 8008522:	d106      	bne.n	8008532 <_dtoa_r+0xb0a>
 8008524:	f000 f914 	bl	8008750 <__multadd>
 8008528:	4680      	mov	r8, r0
 800852a:	4607      	mov	r7, r0
 800852c:	f109 0901 	add.w	r9, r9, #1
 8008530:	e772      	b.n	8008418 <_dtoa_r+0x9f0>
 8008532:	f000 f90d 	bl	8008750 <__multadd>
 8008536:	4639      	mov	r1, r7
 8008538:	4680      	mov	r8, r0
 800853a:	2300      	movs	r3, #0
 800853c:	220a      	movs	r2, #10
 800853e:	4620      	mov	r0, r4
 8008540:	f000 f906 	bl	8008750 <__multadd>
 8008544:	4607      	mov	r7, r0
 8008546:	e7f1      	b.n	800852c <_dtoa_r+0xb04>
 8008548:	9b03      	ldr	r3, [sp, #12]
 800854a:	9302      	str	r3, [sp, #8]
 800854c:	9d01      	ldr	r5, [sp, #4]
 800854e:	ee18 0a10 	vmov	r0, s16
 8008552:	4631      	mov	r1, r6
 8008554:	f7ff f9da 	bl	800790c <quorem>
 8008558:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800855c:	9b01      	ldr	r3, [sp, #4]
 800855e:	f805 ab01 	strb.w	sl, [r5], #1
 8008562:	1aea      	subs	r2, r5, r3
 8008564:	9b02      	ldr	r3, [sp, #8]
 8008566:	4293      	cmp	r3, r2
 8008568:	dd09      	ble.n	800857e <_dtoa_r+0xb56>
 800856a:	ee18 1a10 	vmov	r1, s16
 800856e:	2300      	movs	r3, #0
 8008570:	220a      	movs	r2, #10
 8008572:	4620      	mov	r0, r4
 8008574:	f000 f8ec 	bl	8008750 <__multadd>
 8008578:	ee08 0a10 	vmov	s16, r0
 800857c:	e7e7      	b.n	800854e <_dtoa_r+0xb26>
 800857e:	9b02      	ldr	r3, [sp, #8]
 8008580:	2b00      	cmp	r3, #0
 8008582:	bfc8      	it	gt
 8008584:	461d      	movgt	r5, r3
 8008586:	9b01      	ldr	r3, [sp, #4]
 8008588:	bfd8      	it	le
 800858a:	2501      	movle	r5, #1
 800858c:	441d      	add	r5, r3
 800858e:	f04f 0800 	mov.w	r8, #0
 8008592:	ee18 1a10 	vmov	r1, s16
 8008596:	2201      	movs	r2, #1
 8008598:	4620      	mov	r0, r4
 800859a:	f000 fa89 	bl	8008ab0 <__lshift>
 800859e:	4631      	mov	r1, r6
 80085a0:	ee08 0a10 	vmov	s16, r0
 80085a4:	f000 faf4 	bl	8008b90 <__mcmp>
 80085a8:	2800      	cmp	r0, #0
 80085aa:	dc91      	bgt.n	80084d0 <_dtoa_r+0xaa8>
 80085ac:	d102      	bne.n	80085b4 <_dtoa_r+0xb8c>
 80085ae:	f01a 0f01 	tst.w	sl, #1
 80085b2:	d18d      	bne.n	80084d0 <_dtoa_r+0xaa8>
 80085b4:	462b      	mov	r3, r5
 80085b6:	461d      	mov	r5, r3
 80085b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80085bc:	2a30      	cmp	r2, #48	; 0x30
 80085be:	d0fa      	beq.n	80085b6 <_dtoa_r+0xb8e>
 80085c0:	e6d7      	b.n	8008372 <_dtoa_r+0x94a>
 80085c2:	9a01      	ldr	r2, [sp, #4]
 80085c4:	429a      	cmp	r2, r3
 80085c6:	d184      	bne.n	80084d2 <_dtoa_r+0xaaa>
 80085c8:	9b00      	ldr	r3, [sp, #0]
 80085ca:	3301      	adds	r3, #1
 80085cc:	9300      	str	r3, [sp, #0]
 80085ce:	2331      	movs	r3, #49	; 0x31
 80085d0:	7013      	strb	r3, [r2, #0]
 80085d2:	e6ce      	b.n	8008372 <_dtoa_r+0x94a>
 80085d4:	4b09      	ldr	r3, [pc, #36]	; (80085fc <_dtoa_r+0xbd4>)
 80085d6:	f7ff ba95 	b.w	8007b04 <_dtoa_r+0xdc>
 80085da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80085dc:	2b00      	cmp	r3, #0
 80085de:	f47f aa6e 	bne.w	8007abe <_dtoa_r+0x96>
 80085e2:	4b07      	ldr	r3, [pc, #28]	; (8008600 <_dtoa_r+0xbd8>)
 80085e4:	f7ff ba8e 	b.w	8007b04 <_dtoa_r+0xdc>
 80085e8:	9b02      	ldr	r3, [sp, #8]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	dcae      	bgt.n	800854c <_dtoa_r+0xb24>
 80085ee:	9b06      	ldr	r3, [sp, #24]
 80085f0:	2b02      	cmp	r3, #2
 80085f2:	f73f aea8 	bgt.w	8008346 <_dtoa_r+0x91e>
 80085f6:	e7a9      	b.n	800854c <_dtoa_r+0xb24>
 80085f8:	0800f2d7 	.word	0x0800f2d7
 80085fc:	0800f234 	.word	0x0800f234
 8008600:	0800f258 	.word	0x0800f258

08008604 <_fstat_r>:
 8008604:	b538      	push	{r3, r4, r5, lr}
 8008606:	4d07      	ldr	r5, [pc, #28]	; (8008624 <_fstat_r+0x20>)
 8008608:	2300      	movs	r3, #0
 800860a:	4604      	mov	r4, r0
 800860c:	4608      	mov	r0, r1
 800860e:	4611      	mov	r1, r2
 8008610:	602b      	str	r3, [r5, #0]
 8008612:	f7f9 fbaa 	bl	8001d6a <_fstat>
 8008616:	1c43      	adds	r3, r0, #1
 8008618:	d102      	bne.n	8008620 <_fstat_r+0x1c>
 800861a:	682b      	ldr	r3, [r5, #0]
 800861c:	b103      	cbz	r3, 8008620 <_fstat_r+0x1c>
 800861e:	6023      	str	r3, [r4, #0]
 8008620:	bd38      	pop	{r3, r4, r5, pc}
 8008622:	bf00      	nop
 8008624:	20000360 	.word	0x20000360

08008628 <_isatty_r>:
 8008628:	b538      	push	{r3, r4, r5, lr}
 800862a:	4d06      	ldr	r5, [pc, #24]	; (8008644 <_isatty_r+0x1c>)
 800862c:	2300      	movs	r3, #0
 800862e:	4604      	mov	r4, r0
 8008630:	4608      	mov	r0, r1
 8008632:	602b      	str	r3, [r5, #0]
 8008634:	f7f9 fba9 	bl	8001d8a <_isatty>
 8008638:	1c43      	adds	r3, r0, #1
 800863a:	d102      	bne.n	8008642 <_isatty_r+0x1a>
 800863c:	682b      	ldr	r3, [r5, #0]
 800863e:	b103      	cbz	r3, 8008642 <_isatty_r+0x1a>
 8008640:	6023      	str	r3, [r4, #0]
 8008642:	bd38      	pop	{r3, r4, r5, pc}
 8008644:	20000360 	.word	0x20000360

08008648 <_localeconv_r>:
 8008648:	4800      	ldr	r0, [pc, #0]	; (800864c <_localeconv_r+0x4>)
 800864a:	4770      	bx	lr
 800864c:	20000168 	.word	0x20000168

08008650 <_lseek_r>:
 8008650:	b538      	push	{r3, r4, r5, lr}
 8008652:	4d07      	ldr	r5, [pc, #28]	; (8008670 <_lseek_r+0x20>)
 8008654:	4604      	mov	r4, r0
 8008656:	4608      	mov	r0, r1
 8008658:	4611      	mov	r1, r2
 800865a:	2200      	movs	r2, #0
 800865c:	602a      	str	r2, [r5, #0]
 800865e:	461a      	mov	r2, r3
 8008660:	f7f9 fb9e 	bl	8001da0 <_lseek>
 8008664:	1c43      	adds	r3, r0, #1
 8008666:	d102      	bne.n	800866e <_lseek_r+0x1e>
 8008668:	682b      	ldr	r3, [r5, #0]
 800866a:	b103      	cbz	r3, 800866e <_lseek_r+0x1e>
 800866c:	6023      	str	r3, [r4, #0]
 800866e:	bd38      	pop	{r3, r4, r5, pc}
 8008670:	20000360 	.word	0x20000360

08008674 <__malloc_lock>:
 8008674:	4801      	ldr	r0, [pc, #4]	; (800867c <__malloc_lock+0x8>)
 8008676:	f7fe b97a 	b.w	800696e <__retarget_lock_acquire_recursive>
 800867a:	bf00      	nop
 800867c:	20000354 	.word	0x20000354

08008680 <__malloc_unlock>:
 8008680:	4801      	ldr	r0, [pc, #4]	; (8008688 <__malloc_unlock+0x8>)
 8008682:	f7fe b975 	b.w	8006970 <__retarget_lock_release_recursive>
 8008686:	bf00      	nop
 8008688:	20000354 	.word	0x20000354

0800868c <_Balloc>:
 800868c:	b570      	push	{r4, r5, r6, lr}
 800868e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008690:	4604      	mov	r4, r0
 8008692:	460d      	mov	r5, r1
 8008694:	b976      	cbnz	r6, 80086b4 <_Balloc+0x28>
 8008696:	2010      	movs	r0, #16
 8008698:	f7fe f9d0 	bl	8006a3c <malloc>
 800869c:	4602      	mov	r2, r0
 800869e:	6260      	str	r0, [r4, #36]	; 0x24
 80086a0:	b920      	cbnz	r0, 80086ac <_Balloc+0x20>
 80086a2:	4b18      	ldr	r3, [pc, #96]	; (8008704 <_Balloc+0x78>)
 80086a4:	4818      	ldr	r0, [pc, #96]	; (8008708 <_Balloc+0x7c>)
 80086a6:	2166      	movs	r1, #102	; 0x66
 80086a8:	f001 faf8 	bl	8009c9c <__assert_func>
 80086ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80086b0:	6006      	str	r6, [r0, #0]
 80086b2:	60c6      	str	r6, [r0, #12]
 80086b4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80086b6:	68f3      	ldr	r3, [r6, #12]
 80086b8:	b183      	cbz	r3, 80086dc <_Balloc+0x50>
 80086ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80086bc:	68db      	ldr	r3, [r3, #12]
 80086be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80086c2:	b9b8      	cbnz	r0, 80086f4 <_Balloc+0x68>
 80086c4:	2101      	movs	r1, #1
 80086c6:	fa01 f605 	lsl.w	r6, r1, r5
 80086ca:	1d72      	adds	r2, r6, #5
 80086cc:	0092      	lsls	r2, r2, #2
 80086ce:	4620      	mov	r0, r4
 80086d0:	f000 fb60 	bl	8008d94 <_calloc_r>
 80086d4:	b160      	cbz	r0, 80086f0 <_Balloc+0x64>
 80086d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80086da:	e00e      	b.n	80086fa <_Balloc+0x6e>
 80086dc:	2221      	movs	r2, #33	; 0x21
 80086de:	2104      	movs	r1, #4
 80086e0:	4620      	mov	r0, r4
 80086e2:	f000 fb57 	bl	8008d94 <_calloc_r>
 80086e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80086e8:	60f0      	str	r0, [r6, #12]
 80086ea:	68db      	ldr	r3, [r3, #12]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d1e4      	bne.n	80086ba <_Balloc+0x2e>
 80086f0:	2000      	movs	r0, #0
 80086f2:	bd70      	pop	{r4, r5, r6, pc}
 80086f4:	6802      	ldr	r2, [r0, #0]
 80086f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80086fa:	2300      	movs	r3, #0
 80086fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008700:	e7f7      	b.n	80086f2 <_Balloc+0x66>
 8008702:	bf00      	nop
 8008704:	0800f265 	.word	0x0800f265
 8008708:	0800f2e8 	.word	0x0800f2e8

0800870c <_Bfree>:
 800870c:	b570      	push	{r4, r5, r6, lr}
 800870e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008710:	4605      	mov	r5, r0
 8008712:	460c      	mov	r4, r1
 8008714:	b976      	cbnz	r6, 8008734 <_Bfree+0x28>
 8008716:	2010      	movs	r0, #16
 8008718:	f7fe f990 	bl	8006a3c <malloc>
 800871c:	4602      	mov	r2, r0
 800871e:	6268      	str	r0, [r5, #36]	; 0x24
 8008720:	b920      	cbnz	r0, 800872c <_Bfree+0x20>
 8008722:	4b09      	ldr	r3, [pc, #36]	; (8008748 <_Bfree+0x3c>)
 8008724:	4809      	ldr	r0, [pc, #36]	; (800874c <_Bfree+0x40>)
 8008726:	218a      	movs	r1, #138	; 0x8a
 8008728:	f001 fab8 	bl	8009c9c <__assert_func>
 800872c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008730:	6006      	str	r6, [r0, #0]
 8008732:	60c6      	str	r6, [r0, #12]
 8008734:	b13c      	cbz	r4, 8008746 <_Bfree+0x3a>
 8008736:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008738:	6862      	ldr	r2, [r4, #4]
 800873a:	68db      	ldr	r3, [r3, #12]
 800873c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008740:	6021      	str	r1, [r4, #0]
 8008742:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008746:	bd70      	pop	{r4, r5, r6, pc}
 8008748:	0800f265 	.word	0x0800f265
 800874c:	0800f2e8 	.word	0x0800f2e8

08008750 <__multadd>:
 8008750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008754:	690d      	ldr	r5, [r1, #16]
 8008756:	4607      	mov	r7, r0
 8008758:	460c      	mov	r4, r1
 800875a:	461e      	mov	r6, r3
 800875c:	f101 0c14 	add.w	ip, r1, #20
 8008760:	2000      	movs	r0, #0
 8008762:	f8dc 3000 	ldr.w	r3, [ip]
 8008766:	b299      	uxth	r1, r3
 8008768:	fb02 6101 	mla	r1, r2, r1, r6
 800876c:	0c1e      	lsrs	r6, r3, #16
 800876e:	0c0b      	lsrs	r3, r1, #16
 8008770:	fb02 3306 	mla	r3, r2, r6, r3
 8008774:	b289      	uxth	r1, r1
 8008776:	3001      	adds	r0, #1
 8008778:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800877c:	4285      	cmp	r5, r0
 800877e:	f84c 1b04 	str.w	r1, [ip], #4
 8008782:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008786:	dcec      	bgt.n	8008762 <__multadd+0x12>
 8008788:	b30e      	cbz	r6, 80087ce <__multadd+0x7e>
 800878a:	68a3      	ldr	r3, [r4, #8]
 800878c:	42ab      	cmp	r3, r5
 800878e:	dc19      	bgt.n	80087c4 <__multadd+0x74>
 8008790:	6861      	ldr	r1, [r4, #4]
 8008792:	4638      	mov	r0, r7
 8008794:	3101      	adds	r1, #1
 8008796:	f7ff ff79 	bl	800868c <_Balloc>
 800879a:	4680      	mov	r8, r0
 800879c:	b928      	cbnz	r0, 80087aa <__multadd+0x5a>
 800879e:	4602      	mov	r2, r0
 80087a0:	4b0c      	ldr	r3, [pc, #48]	; (80087d4 <__multadd+0x84>)
 80087a2:	480d      	ldr	r0, [pc, #52]	; (80087d8 <__multadd+0x88>)
 80087a4:	21b5      	movs	r1, #181	; 0xb5
 80087a6:	f001 fa79 	bl	8009c9c <__assert_func>
 80087aa:	6922      	ldr	r2, [r4, #16]
 80087ac:	3202      	adds	r2, #2
 80087ae:	f104 010c 	add.w	r1, r4, #12
 80087b2:	0092      	lsls	r2, r2, #2
 80087b4:	300c      	adds	r0, #12
 80087b6:	f7fe f951 	bl	8006a5c <memcpy>
 80087ba:	4621      	mov	r1, r4
 80087bc:	4638      	mov	r0, r7
 80087be:	f7ff ffa5 	bl	800870c <_Bfree>
 80087c2:	4644      	mov	r4, r8
 80087c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80087c8:	3501      	adds	r5, #1
 80087ca:	615e      	str	r6, [r3, #20]
 80087cc:	6125      	str	r5, [r4, #16]
 80087ce:	4620      	mov	r0, r4
 80087d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087d4:	0800f2d7 	.word	0x0800f2d7
 80087d8:	0800f2e8 	.word	0x0800f2e8

080087dc <__hi0bits>:
 80087dc:	0c03      	lsrs	r3, r0, #16
 80087de:	041b      	lsls	r3, r3, #16
 80087e0:	b9d3      	cbnz	r3, 8008818 <__hi0bits+0x3c>
 80087e2:	0400      	lsls	r0, r0, #16
 80087e4:	2310      	movs	r3, #16
 80087e6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80087ea:	bf04      	itt	eq
 80087ec:	0200      	lsleq	r0, r0, #8
 80087ee:	3308      	addeq	r3, #8
 80087f0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80087f4:	bf04      	itt	eq
 80087f6:	0100      	lsleq	r0, r0, #4
 80087f8:	3304      	addeq	r3, #4
 80087fa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80087fe:	bf04      	itt	eq
 8008800:	0080      	lsleq	r0, r0, #2
 8008802:	3302      	addeq	r3, #2
 8008804:	2800      	cmp	r0, #0
 8008806:	db05      	blt.n	8008814 <__hi0bits+0x38>
 8008808:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800880c:	f103 0301 	add.w	r3, r3, #1
 8008810:	bf08      	it	eq
 8008812:	2320      	moveq	r3, #32
 8008814:	4618      	mov	r0, r3
 8008816:	4770      	bx	lr
 8008818:	2300      	movs	r3, #0
 800881a:	e7e4      	b.n	80087e6 <__hi0bits+0xa>

0800881c <__lo0bits>:
 800881c:	6803      	ldr	r3, [r0, #0]
 800881e:	f013 0207 	ands.w	r2, r3, #7
 8008822:	4601      	mov	r1, r0
 8008824:	d00b      	beq.n	800883e <__lo0bits+0x22>
 8008826:	07da      	lsls	r2, r3, #31
 8008828:	d423      	bmi.n	8008872 <__lo0bits+0x56>
 800882a:	0798      	lsls	r0, r3, #30
 800882c:	bf49      	itett	mi
 800882e:	085b      	lsrmi	r3, r3, #1
 8008830:	089b      	lsrpl	r3, r3, #2
 8008832:	2001      	movmi	r0, #1
 8008834:	600b      	strmi	r3, [r1, #0]
 8008836:	bf5c      	itt	pl
 8008838:	600b      	strpl	r3, [r1, #0]
 800883a:	2002      	movpl	r0, #2
 800883c:	4770      	bx	lr
 800883e:	b298      	uxth	r0, r3
 8008840:	b9a8      	cbnz	r0, 800886e <__lo0bits+0x52>
 8008842:	0c1b      	lsrs	r3, r3, #16
 8008844:	2010      	movs	r0, #16
 8008846:	b2da      	uxtb	r2, r3
 8008848:	b90a      	cbnz	r2, 800884e <__lo0bits+0x32>
 800884a:	3008      	adds	r0, #8
 800884c:	0a1b      	lsrs	r3, r3, #8
 800884e:	071a      	lsls	r2, r3, #28
 8008850:	bf04      	itt	eq
 8008852:	091b      	lsreq	r3, r3, #4
 8008854:	3004      	addeq	r0, #4
 8008856:	079a      	lsls	r2, r3, #30
 8008858:	bf04      	itt	eq
 800885a:	089b      	lsreq	r3, r3, #2
 800885c:	3002      	addeq	r0, #2
 800885e:	07da      	lsls	r2, r3, #31
 8008860:	d403      	bmi.n	800886a <__lo0bits+0x4e>
 8008862:	085b      	lsrs	r3, r3, #1
 8008864:	f100 0001 	add.w	r0, r0, #1
 8008868:	d005      	beq.n	8008876 <__lo0bits+0x5a>
 800886a:	600b      	str	r3, [r1, #0]
 800886c:	4770      	bx	lr
 800886e:	4610      	mov	r0, r2
 8008870:	e7e9      	b.n	8008846 <__lo0bits+0x2a>
 8008872:	2000      	movs	r0, #0
 8008874:	4770      	bx	lr
 8008876:	2020      	movs	r0, #32
 8008878:	4770      	bx	lr
	...

0800887c <__i2b>:
 800887c:	b510      	push	{r4, lr}
 800887e:	460c      	mov	r4, r1
 8008880:	2101      	movs	r1, #1
 8008882:	f7ff ff03 	bl	800868c <_Balloc>
 8008886:	4602      	mov	r2, r0
 8008888:	b928      	cbnz	r0, 8008896 <__i2b+0x1a>
 800888a:	4b05      	ldr	r3, [pc, #20]	; (80088a0 <__i2b+0x24>)
 800888c:	4805      	ldr	r0, [pc, #20]	; (80088a4 <__i2b+0x28>)
 800888e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008892:	f001 fa03 	bl	8009c9c <__assert_func>
 8008896:	2301      	movs	r3, #1
 8008898:	6144      	str	r4, [r0, #20]
 800889a:	6103      	str	r3, [r0, #16]
 800889c:	bd10      	pop	{r4, pc}
 800889e:	bf00      	nop
 80088a0:	0800f2d7 	.word	0x0800f2d7
 80088a4:	0800f2e8 	.word	0x0800f2e8

080088a8 <__multiply>:
 80088a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088ac:	4691      	mov	r9, r2
 80088ae:	690a      	ldr	r2, [r1, #16]
 80088b0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80088b4:	429a      	cmp	r2, r3
 80088b6:	bfb8      	it	lt
 80088b8:	460b      	movlt	r3, r1
 80088ba:	460c      	mov	r4, r1
 80088bc:	bfbc      	itt	lt
 80088be:	464c      	movlt	r4, r9
 80088c0:	4699      	movlt	r9, r3
 80088c2:	6927      	ldr	r7, [r4, #16]
 80088c4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80088c8:	68a3      	ldr	r3, [r4, #8]
 80088ca:	6861      	ldr	r1, [r4, #4]
 80088cc:	eb07 060a 	add.w	r6, r7, sl
 80088d0:	42b3      	cmp	r3, r6
 80088d2:	b085      	sub	sp, #20
 80088d4:	bfb8      	it	lt
 80088d6:	3101      	addlt	r1, #1
 80088d8:	f7ff fed8 	bl	800868c <_Balloc>
 80088dc:	b930      	cbnz	r0, 80088ec <__multiply+0x44>
 80088de:	4602      	mov	r2, r0
 80088e0:	4b44      	ldr	r3, [pc, #272]	; (80089f4 <__multiply+0x14c>)
 80088e2:	4845      	ldr	r0, [pc, #276]	; (80089f8 <__multiply+0x150>)
 80088e4:	f240 115d 	movw	r1, #349	; 0x15d
 80088e8:	f001 f9d8 	bl	8009c9c <__assert_func>
 80088ec:	f100 0514 	add.w	r5, r0, #20
 80088f0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80088f4:	462b      	mov	r3, r5
 80088f6:	2200      	movs	r2, #0
 80088f8:	4543      	cmp	r3, r8
 80088fa:	d321      	bcc.n	8008940 <__multiply+0x98>
 80088fc:	f104 0314 	add.w	r3, r4, #20
 8008900:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008904:	f109 0314 	add.w	r3, r9, #20
 8008908:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800890c:	9202      	str	r2, [sp, #8]
 800890e:	1b3a      	subs	r2, r7, r4
 8008910:	3a15      	subs	r2, #21
 8008912:	f022 0203 	bic.w	r2, r2, #3
 8008916:	3204      	adds	r2, #4
 8008918:	f104 0115 	add.w	r1, r4, #21
 800891c:	428f      	cmp	r7, r1
 800891e:	bf38      	it	cc
 8008920:	2204      	movcc	r2, #4
 8008922:	9201      	str	r2, [sp, #4]
 8008924:	9a02      	ldr	r2, [sp, #8]
 8008926:	9303      	str	r3, [sp, #12]
 8008928:	429a      	cmp	r2, r3
 800892a:	d80c      	bhi.n	8008946 <__multiply+0x9e>
 800892c:	2e00      	cmp	r6, #0
 800892e:	dd03      	ble.n	8008938 <__multiply+0x90>
 8008930:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008934:	2b00      	cmp	r3, #0
 8008936:	d05a      	beq.n	80089ee <__multiply+0x146>
 8008938:	6106      	str	r6, [r0, #16]
 800893a:	b005      	add	sp, #20
 800893c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008940:	f843 2b04 	str.w	r2, [r3], #4
 8008944:	e7d8      	b.n	80088f8 <__multiply+0x50>
 8008946:	f8b3 a000 	ldrh.w	sl, [r3]
 800894a:	f1ba 0f00 	cmp.w	sl, #0
 800894e:	d024      	beq.n	800899a <__multiply+0xf2>
 8008950:	f104 0e14 	add.w	lr, r4, #20
 8008954:	46a9      	mov	r9, r5
 8008956:	f04f 0c00 	mov.w	ip, #0
 800895a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800895e:	f8d9 1000 	ldr.w	r1, [r9]
 8008962:	fa1f fb82 	uxth.w	fp, r2
 8008966:	b289      	uxth	r1, r1
 8008968:	fb0a 110b 	mla	r1, sl, fp, r1
 800896c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008970:	f8d9 2000 	ldr.w	r2, [r9]
 8008974:	4461      	add	r1, ip
 8008976:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800897a:	fb0a c20b 	mla	r2, sl, fp, ip
 800897e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008982:	b289      	uxth	r1, r1
 8008984:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008988:	4577      	cmp	r7, lr
 800898a:	f849 1b04 	str.w	r1, [r9], #4
 800898e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008992:	d8e2      	bhi.n	800895a <__multiply+0xb2>
 8008994:	9a01      	ldr	r2, [sp, #4]
 8008996:	f845 c002 	str.w	ip, [r5, r2]
 800899a:	9a03      	ldr	r2, [sp, #12]
 800899c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80089a0:	3304      	adds	r3, #4
 80089a2:	f1b9 0f00 	cmp.w	r9, #0
 80089a6:	d020      	beq.n	80089ea <__multiply+0x142>
 80089a8:	6829      	ldr	r1, [r5, #0]
 80089aa:	f104 0c14 	add.w	ip, r4, #20
 80089ae:	46ae      	mov	lr, r5
 80089b0:	f04f 0a00 	mov.w	sl, #0
 80089b4:	f8bc b000 	ldrh.w	fp, [ip]
 80089b8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80089bc:	fb09 220b 	mla	r2, r9, fp, r2
 80089c0:	4492      	add	sl, r2
 80089c2:	b289      	uxth	r1, r1
 80089c4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80089c8:	f84e 1b04 	str.w	r1, [lr], #4
 80089cc:	f85c 2b04 	ldr.w	r2, [ip], #4
 80089d0:	f8be 1000 	ldrh.w	r1, [lr]
 80089d4:	0c12      	lsrs	r2, r2, #16
 80089d6:	fb09 1102 	mla	r1, r9, r2, r1
 80089da:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80089de:	4567      	cmp	r7, ip
 80089e0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80089e4:	d8e6      	bhi.n	80089b4 <__multiply+0x10c>
 80089e6:	9a01      	ldr	r2, [sp, #4]
 80089e8:	50a9      	str	r1, [r5, r2]
 80089ea:	3504      	adds	r5, #4
 80089ec:	e79a      	b.n	8008924 <__multiply+0x7c>
 80089ee:	3e01      	subs	r6, #1
 80089f0:	e79c      	b.n	800892c <__multiply+0x84>
 80089f2:	bf00      	nop
 80089f4:	0800f2d7 	.word	0x0800f2d7
 80089f8:	0800f2e8 	.word	0x0800f2e8

080089fc <__pow5mult>:
 80089fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a00:	4615      	mov	r5, r2
 8008a02:	f012 0203 	ands.w	r2, r2, #3
 8008a06:	4606      	mov	r6, r0
 8008a08:	460f      	mov	r7, r1
 8008a0a:	d007      	beq.n	8008a1c <__pow5mult+0x20>
 8008a0c:	4c25      	ldr	r4, [pc, #148]	; (8008aa4 <__pow5mult+0xa8>)
 8008a0e:	3a01      	subs	r2, #1
 8008a10:	2300      	movs	r3, #0
 8008a12:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008a16:	f7ff fe9b 	bl	8008750 <__multadd>
 8008a1a:	4607      	mov	r7, r0
 8008a1c:	10ad      	asrs	r5, r5, #2
 8008a1e:	d03d      	beq.n	8008a9c <__pow5mult+0xa0>
 8008a20:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008a22:	b97c      	cbnz	r4, 8008a44 <__pow5mult+0x48>
 8008a24:	2010      	movs	r0, #16
 8008a26:	f7fe f809 	bl	8006a3c <malloc>
 8008a2a:	4602      	mov	r2, r0
 8008a2c:	6270      	str	r0, [r6, #36]	; 0x24
 8008a2e:	b928      	cbnz	r0, 8008a3c <__pow5mult+0x40>
 8008a30:	4b1d      	ldr	r3, [pc, #116]	; (8008aa8 <__pow5mult+0xac>)
 8008a32:	481e      	ldr	r0, [pc, #120]	; (8008aac <__pow5mult+0xb0>)
 8008a34:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008a38:	f001 f930 	bl	8009c9c <__assert_func>
 8008a3c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008a40:	6004      	str	r4, [r0, #0]
 8008a42:	60c4      	str	r4, [r0, #12]
 8008a44:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008a48:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008a4c:	b94c      	cbnz	r4, 8008a62 <__pow5mult+0x66>
 8008a4e:	f240 2171 	movw	r1, #625	; 0x271
 8008a52:	4630      	mov	r0, r6
 8008a54:	f7ff ff12 	bl	800887c <__i2b>
 8008a58:	2300      	movs	r3, #0
 8008a5a:	f8c8 0008 	str.w	r0, [r8, #8]
 8008a5e:	4604      	mov	r4, r0
 8008a60:	6003      	str	r3, [r0, #0]
 8008a62:	f04f 0900 	mov.w	r9, #0
 8008a66:	07eb      	lsls	r3, r5, #31
 8008a68:	d50a      	bpl.n	8008a80 <__pow5mult+0x84>
 8008a6a:	4639      	mov	r1, r7
 8008a6c:	4622      	mov	r2, r4
 8008a6e:	4630      	mov	r0, r6
 8008a70:	f7ff ff1a 	bl	80088a8 <__multiply>
 8008a74:	4639      	mov	r1, r7
 8008a76:	4680      	mov	r8, r0
 8008a78:	4630      	mov	r0, r6
 8008a7a:	f7ff fe47 	bl	800870c <_Bfree>
 8008a7e:	4647      	mov	r7, r8
 8008a80:	106d      	asrs	r5, r5, #1
 8008a82:	d00b      	beq.n	8008a9c <__pow5mult+0xa0>
 8008a84:	6820      	ldr	r0, [r4, #0]
 8008a86:	b938      	cbnz	r0, 8008a98 <__pow5mult+0x9c>
 8008a88:	4622      	mov	r2, r4
 8008a8a:	4621      	mov	r1, r4
 8008a8c:	4630      	mov	r0, r6
 8008a8e:	f7ff ff0b 	bl	80088a8 <__multiply>
 8008a92:	6020      	str	r0, [r4, #0]
 8008a94:	f8c0 9000 	str.w	r9, [r0]
 8008a98:	4604      	mov	r4, r0
 8008a9a:	e7e4      	b.n	8008a66 <__pow5mult+0x6a>
 8008a9c:	4638      	mov	r0, r7
 8008a9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008aa2:	bf00      	nop
 8008aa4:	0800f438 	.word	0x0800f438
 8008aa8:	0800f265 	.word	0x0800f265
 8008aac:	0800f2e8 	.word	0x0800f2e8

08008ab0 <__lshift>:
 8008ab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ab4:	460c      	mov	r4, r1
 8008ab6:	6849      	ldr	r1, [r1, #4]
 8008ab8:	6923      	ldr	r3, [r4, #16]
 8008aba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008abe:	68a3      	ldr	r3, [r4, #8]
 8008ac0:	4607      	mov	r7, r0
 8008ac2:	4691      	mov	r9, r2
 8008ac4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008ac8:	f108 0601 	add.w	r6, r8, #1
 8008acc:	42b3      	cmp	r3, r6
 8008ace:	db0b      	blt.n	8008ae8 <__lshift+0x38>
 8008ad0:	4638      	mov	r0, r7
 8008ad2:	f7ff fddb 	bl	800868c <_Balloc>
 8008ad6:	4605      	mov	r5, r0
 8008ad8:	b948      	cbnz	r0, 8008aee <__lshift+0x3e>
 8008ada:	4602      	mov	r2, r0
 8008adc:	4b2a      	ldr	r3, [pc, #168]	; (8008b88 <__lshift+0xd8>)
 8008ade:	482b      	ldr	r0, [pc, #172]	; (8008b8c <__lshift+0xdc>)
 8008ae0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008ae4:	f001 f8da 	bl	8009c9c <__assert_func>
 8008ae8:	3101      	adds	r1, #1
 8008aea:	005b      	lsls	r3, r3, #1
 8008aec:	e7ee      	b.n	8008acc <__lshift+0x1c>
 8008aee:	2300      	movs	r3, #0
 8008af0:	f100 0114 	add.w	r1, r0, #20
 8008af4:	f100 0210 	add.w	r2, r0, #16
 8008af8:	4618      	mov	r0, r3
 8008afa:	4553      	cmp	r3, sl
 8008afc:	db37      	blt.n	8008b6e <__lshift+0xbe>
 8008afe:	6920      	ldr	r0, [r4, #16]
 8008b00:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008b04:	f104 0314 	add.w	r3, r4, #20
 8008b08:	f019 091f 	ands.w	r9, r9, #31
 8008b0c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008b10:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008b14:	d02f      	beq.n	8008b76 <__lshift+0xc6>
 8008b16:	f1c9 0e20 	rsb	lr, r9, #32
 8008b1a:	468a      	mov	sl, r1
 8008b1c:	f04f 0c00 	mov.w	ip, #0
 8008b20:	681a      	ldr	r2, [r3, #0]
 8008b22:	fa02 f209 	lsl.w	r2, r2, r9
 8008b26:	ea42 020c 	orr.w	r2, r2, ip
 8008b2a:	f84a 2b04 	str.w	r2, [sl], #4
 8008b2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b32:	4298      	cmp	r0, r3
 8008b34:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008b38:	d8f2      	bhi.n	8008b20 <__lshift+0x70>
 8008b3a:	1b03      	subs	r3, r0, r4
 8008b3c:	3b15      	subs	r3, #21
 8008b3e:	f023 0303 	bic.w	r3, r3, #3
 8008b42:	3304      	adds	r3, #4
 8008b44:	f104 0215 	add.w	r2, r4, #21
 8008b48:	4290      	cmp	r0, r2
 8008b4a:	bf38      	it	cc
 8008b4c:	2304      	movcc	r3, #4
 8008b4e:	f841 c003 	str.w	ip, [r1, r3]
 8008b52:	f1bc 0f00 	cmp.w	ip, #0
 8008b56:	d001      	beq.n	8008b5c <__lshift+0xac>
 8008b58:	f108 0602 	add.w	r6, r8, #2
 8008b5c:	3e01      	subs	r6, #1
 8008b5e:	4638      	mov	r0, r7
 8008b60:	612e      	str	r6, [r5, #16]
 8008b62:	4621      	mov	r1, r4
 8008b64:	f7ff fdd2 	bl	800870c <_Bfree>
 8008b68:	4628      	mov	r0, r5
 8008b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b6e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008b72:	3301      	adds	r3, #1
 8008b74:	e7c1      	b.n	8008afa <__lshift+0x4a>
 8008b76:	3904      	subs	r1, #4
 8008b78:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b7c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008b80:	4298      	cmp	r0, r3
 8008b82:	d8f9      	bhi.n	8008b78 <__lshift+0xc8>
 8008b84:	e7ea      	b.n	8008b5c <__lshift+0xac>
 8008b86:	bf00      	nop
 8008b88:	0800f2d7 	.word	0x0800f2d7
 8008b8c:	0800f2e8 	.word	0x0800f2e8

08008b90 <__mcmp>:
 8008b90:	b530      	push	{r4, r5, lr}
 8008b92:	6902      	ldr	r2, [r0, #16]
 8008b94:	690c      	ldr	r4, [r1, #16]
 8008b96:	1b12      	subs	r2, r2, r4
 8008b98:	d10e      	bne.n	8008bb8 <__mcmp+0x28>
 8008b9a:	f100 0314 	add.w	r3, r0, #20
 8008b9e:	3114      	adds	r1, #20
 8008ba0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008ba4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008ba8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008bac:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008bb0:	42a5      	cmp	r5, r4
 8008bb2:	d003      	beq.n	8008bbc <__mcmp+0x2c>
 8008bb4:	d305      	bcc.n	8008bc2 <__mcmp+0x32>
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	4610      	mov	r0, r2
 8008bba:	bd30      	pop	{r4, r5, pc}
 8008bbc:	4283      	cmp	r3, r0
 8008bbe:	d3f3      	bcc.n	8008ba8 <__mcmp+0x18>
 8008bc0:	e7fa      	b.n	8008bb8 <__mcmp+0x28>
 8008bc2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008bc6:	e7f7      	b.n	8008bb8 <__mcmp+0x28>

08008bc8 <__mdiff>:
 8008bc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bcc:	460c      	mov	r4, r1
 8008bce:	4606      	mov	r6, r0
 8008bd0:	4611      	mov	r1, r2
 8008bd2:	4620      	mov	r0, r4
 8008bd4:	4690      	mov	r8, r2
 8008bd6:	f7ff ffdb 	bl	8008b90 <__mcmp>
 8008bda:	1e05      	subs	r5, r0, #0
 8008bdc:	d110      	bne.n	8008c00 <__mdiff+0x38>
 8008bde:	4629      	mov	r1, r5
 8008be0:	4630      	mov	r0, r6
 8008be2:	f7ff fd53 	bl	800868c <_Balloc>
 8008be6:	b930      	cbnz	r0, 8008bf6 <__mdiff+0x2e>
 8008be8:	4b3a      	ldr	r3, [pc, #232]	; (8008cd4 <__mdiff+0x10c>)
 8008bea:	4602      	mov	r2, r0
 8008bec:	f240 2132 	movw	r1, #562	; 0x232
 8008bf0:	4839      	ldr	r0, [pc, #228]	; (8008cd8 <__mdiff+0x110>)
 8008bf2:	f001 f853 	bl	8009c9c <__assert_func>
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008bfc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c00:	bfa4      	itt	ge
 8008c02:	4643      	movge	r3, r8
 8008c04:	46a0      	movge	r8, r4
 8008c06:	4630      	mov	r0, r6
 8008c08:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008c0c:	bfa6      	itte	ge
 8008c0e:	461c      	movge	r4, r3
 8008c10:	2500      	movge	r5, #0
 8008c12:	2501      	movlt	r5, #1
 8008c14:	f7ff fd3a 	bl	800868c <_Balloc>
 8008c18:	b920      	cbnz	r0, 8008c24 <__mdiff+0x5c>
 8008c1a:	4b2e      	ldr	r3, [pc, #184]	; (8008cd4 <__mdiff+0x10c>)
 8008c1c:	4602      	mov	r2, r0
 8008c1e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008c22:	e7e5      	b.n	8008bf0 <__mdiff+0x28>
 8008c24:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008c28:	6926      	ldr	r6, [r4, #16]
 8008c2a:	60c5      	str	r5, [r0, #12]
 8008c2c:	f104 0914 	add.w	r9, r4, #20
 8008c30:	f108 0514 	add.w	r5, r8, #20
 8008c34:	f100 0e14 	add.w	lr, r0, #20
 8008c38:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008c3c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008c40:	f108 0210 	add.w	r2, r8, #16
 8008c44:	46f2      	mov	sl, lr
 8008c46:	2100      	movs	r1, #0
 8008c48:	f859 3b04 	ldr.w	r3, [r9], #4
 8008c4c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008c50:	fa1f f883 	uxth.w	r8, r3
 8008c54:	fa11 f18b 	uxtah	r1, r1, fp
 8008c58:	0c1b      	lsrs	r3, r3, #16
 8008c5a:	eba1 0808 	sub.w	r8, r1, r8
 8008c5e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008c62:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008c66:	fa1f f888 	uxth.w	r8, r8
 8008c6a:	1419      	asrs	r1, r3, #16
 8008c6c:	454e      	cmp	r6, r9
 8008c6e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008c72:	f84a 3b04 	str.w	r3, [sl], #4
 8008c76:	d8e7      	bhi.n	8008c48 <__mdiff+0x80>
 8008c78:	1b33      	subs	r3, r6, r4
 8008c7a:	3b15      	subs	r3, #21
 8008c7c:	f023 0303 	bic.w	r3, r3, #3
 8008c80:	3304      	adds	r3, #4
 8008c82:	3415      	adds	r4, #21
 8008c84:	42a6      	cmp	r6, r4
 8008c86:	bf38      	it	cc
 8008c88:	2304      	movcc	r3, #4
 8008c8a:	441d      	add	r5, r3
 8008c8c:	4473      	add	r3, lr
 8008c8e:	469e      	mov	lr, r3
 8008c90:	462e      	mov	r6, r5
 8008c92:	4566      	cmp	r6, ip
 8008c94:	d30e      	bcc.n	8008cb4 <__mdiff+0xec>
 8008c96:	f10c 0203 	add.w	r2, ip, #3
 8008c9a:	1b52      	subs	r2, r2, r5
 8008c9c:	f022 0203 	bic.w	r2, r2, #3
 8008ca0:	3d03      	subs	r5, #3
 8008ca2:	45ac      	cmp	ip, r5
 8008ca4:	bf38      	it	cc
 8008ca6:	2200      	movcc	r2, #0
 8008ca8:	441a      	add	r2, r3
 8008caa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008cae:	b17b      	cbz	r3, 8008cd0 <__mdiff+0x108>
 8008cb0:	6107      	str	r7, [r0, #16]
 8008cb2:	e7a3      	b.n	8008bfc <__mdiff+0x34>
 8008cb4:	f856 8b04 	ldr.w	r8, [r6], #4
 8008cb8:	fa11 f288 	uxtah	r2, r1, r8
 8008cbc:	1414      	asrs	r4, r2, #16
 8008cbe:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008cc2:	b292      	uxth	r2, r2
 8008cc4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008cc8:	f84e 2b04 	str.w	r2, [lr], #4
 8008ccc:	1421      	asrs	r1, r4, #16
 8008cce:	e7e0      	b.n	8008c92 <__mdiff+0xca>
 8008cd0:	3f01      	subs	r7, #1
 8008cd2:	e7ea      	b.n	8008caa <__mdiff+0xe2>
 8008cd4:	0800f2d7 	.word	0x0800f2d7
 8008cd8:	0800f2e8 	.word	0x0800f2e8

08008cdc <__d2b>:
 8008cdc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008ce0:	4689      	mov	r9, r1
 8008ce2:	2101      	movs	r1, #1
 8008ce4:	ec57 6b10 	vmov	r6, r7, d0
 8008ce8:	4690      	mov	r8, r2
 8008cea:	f7ff fccf 	bl	800868c <_Balloc>
 8008cee:	4604      	mov	r4, r0
 8008cf0:	b930      	cbnz	r0, 8008d00 <__d2b+0x24>
 8008cf2:	4602      	mov	r2, r0
 8008cf4:	4b25      	ldr	r3, [pc, #148]	; (8008d8c <__d2b+0xb0>)
 8008cf6:	4826      	ldr	r0, [pc, #152]	; (8008d90 <__d2b+0xb4>)
 8008cf8:	f240 310a 	movw	r1, #778	; 0x30a
 8008cfc:	f000 ffce 	bl	8009c9c <__assert_func>
 8008d00:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008d04:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008d08:	bb35      	cbnz	r5, 8008d58 <__d2b+0x7c>
 8008d0a:	2e00      	cmp	r6, #0
 8008d0c:	9301      	str	r3, [sp, #4]
 8008d0e:	d028      	beq.n	8008d62 <__d2b+0x86>
 8008d10:	4668      	mov	r0, sp
 8008d12:	9600      	str	r6, [sp, #0]
 8008d14:	f7ff fd82 	bl	800881c <__lo0bits>
 8008d18:	9900      	ldr	r1, [sp, #0]
 8008d1a:	b300      	cbz	r0, 8008d5e <__d2b+0x82>
 8008d1c:	9a01      	ldr	r2, [sp, #4]
 8008d1e:	f1c0 0320 	rsb	r3, r0, #32
 8008d22:	fa02 f303 	lsl.w	r3, r2, r3
 8008d26:	430b      	orrs	r3, r1
 8008d28:	40c2      	lsrs	r2, r0
 8008d2a:	6163      	str	r3, [r4, #20]
 8008d2c:	9201      	str	r2, [sp, #4]
 8008d2e:	9b01      	ldr	r3, [sp, #4]
 8008d30:	61a3      	str	r3, [r4, #24]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	bf14      	ite	ne
 8008d36:	2202      	movne	r2, #2
 8008d38:	2201      	moveq	r2, #1
 8008d3a:	6122      	str	r2, [r4, #16]
 8008d3c:	b1d5      	cbz	r5, 8008d74 <__d2b+0x98>
 8008d3e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008d42:	4405      	add	r5, r0
 8008d44:	f8c9 5000 	str.w	r5, [r9]
 8008d48:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008d4c:	f8c8 0000 	str.w	r0, [r8]
 8008d50:	4620      	mov	r0, r4
 8008d52:	b003      	add	sp, #12
 8008d54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008d58:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008d5c:	e7d5      	b.n	8008d0a <__d2b+0x2e>
 8008d5e:	6161      	str	r1, [r4, #20]
 8008d60:	e7e5      	b.n	8008d2e <__d2b+0x52>
 8008d62:	a801      	add	r0, sp, #4
 8008d64:	f7ff fd5a 	bl	800881c <__lo0bits>
 8008d68:	9b01      	ldr	r3, [sp, #4]
 8008d6a:	6163      	str	r3, [r4, #20]
 8008d6c:	2201      	movs	r2, #1
 8008d6e:	6122      	str	r2, [r4, #16]
 8008d70:	3020      	adds	r0, #32
 8008d72:	e7e3      	b.n	8008d3c <__d2b+0x60>
 8008d74:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008d78:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008d7c:	f8c9 0000 	str.w	r0, [r9]
 8008d80:	6918      	ldr	r0, [r3, #16]
 8008d82:	f7ff fd2b 	bl	80087dc <__hi0bits>
 8008d86:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008d8a:	e7df      	b.n	8008d4c <__d2b+0x70>
 8008d8c:	0800f2d7 	.word	0x0800f2d7
 8008d90:	0800f2e8 	.word	0x0800f2e8

08008d94 <_calloc_r>:
 8008d94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008d96:	fba1 2402 	umull	r2, r4, r1, r2
 8008d9a:	b94c      	cbnz	r4, 8008db0 <_calloc_r+0x1c>
 8008d9c:	4611      	mov	r1, r2
 8008d9e:	9201      	str	r2, [sp, #4]
 8008da0:	f7fd fede 	bl	8006b60 <_malloc_r>
 8008da4:	9a01      	ldr	r2, [sp, #4]
 8008da6:	4605      	mov	r5, r0
 8008da8:	b930      	cbnz	r0, 8008db8 <_calloc_r+0x24>
 8008daa:	4628      	mov	r0, r5
 8008dac:	b003      	add	sp, #12
 8008dae:	bd30      	pop	{r4, r5, pc}
 8008db0:	220c      	movs	r2, #12
 8008db2:	6002      	str	r2, [r0, #0]
 8008db4:	2500      	movs	r5, #0
 8008db6:	e7f8      	b.n	8008daa <_calloc_r+0x16>
 8008db8:	4621      	mov	r1, r4
 8008dba:	f7fd fe5d 	bl	8006a78 <memset>
 8008dbe:	e7f4      	b.n	8008daa <_calloc_r+0x16>

08008dc0 <__sfputc_r>:
 8008dc0:	6893      	ldr	r3, [r2, #8]
 8008dc2:	3b01      	subs	r3, #1
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	b410      	push	{r4}
 8008dc8:	6093      	str	r3, [r2, #8]
 8008dca:	da08      	bge.n	8008dde <__sfputc_r+0x1e>
 8008dcc:	6994      	ldr	r4, [r2, #24]
 8008dce:	42a3      	cmp	r3, r4
 8008dd0:	db01      	blt.n	8008dd6 <__sfputc_r+0x16>
 8008dd2:	290a      	cmp	r1, #10
 8008dd4:	d103      	bne.n	8008dde <__sfputc_r+0x1e>
 8008dd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008dda:	f7fe bcb5 	b.w	8007748 <__swbuf_r>
 8008dde:	6813      	ldr	r3, [r2, #0]
 8008de0:	1c58      	adds	r0, r3, #1
 8008de2:	6010      	str	r0, [r2, #0]
 8008de4:	7019      	strb	r1, [r3, #0]
 8008de6:	4608      	mov	r0, r1
 8008de8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008dec:	4770      	bx	lr

08008dee <__sfputs_r>:
 8008dee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008df0:	4606      	mov	r6, r0
 8008df2:	460f      	mov	r7, r1
 8008df4:	4614      	mov	r4, r2
 8008df6:	18d5      	adds	r5, r2, r3
 8008df8:	42ac      	cmp	r4, r5
 8008dfa:	d101      	bne.n	8008e00 <__sfputs_r+0x12>
 8008dfc:	2000      	movs	r0, #0
 8008dfe:	e007      	b.n	8008e10 <__sfputs_r+0x22>
 8008e00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e04:	463a      	mov	r2, r7
 8008e06:	4630      	mov	r0, r6
 8008e08:	f7ff ffda 	bl	8008dc0 <__sfputc_r>
 8008e0c:	1c43      	adds	r3, r0, #1
 8008e0e:	d1f3      	bne.n	8008df8 <__sfputs_r+0xa>
 8008e10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008e14 <_vfiprintf_r>:
 8008e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e18:	460d      	mov	r5, r1
 8008e1a:	b09d      	sub	sp, #116	; 0x74
 8008e1c:	4614      	mov	r4, r2
 8008e1e:	4698      	mov	r8, r3
 8008e20:	4606      	mov	r6, r0
 8008e22:	b118      	cbz	r0, 8008e2c <_vfiprintf_r+0x18>
 8008e24:	6983      	ldr	r3, [r0, #24]
 8008e26:	b90b      	cbnz	r3, 8008e2c <_vfiprintf_r+0x18>
 8008e28:	f7fd fcde 	bl	80067e8 <__sinit>
 8008e2c:	4b89      	ldr	r3, [pc, #548]	; (8009054 <_vfiprintf_r+0x240>)
 8008e2e:	429d      	cmp	r5, r3
 8008e30:	d11b      	bne.n	8008e6a <_vfiprintf_r+0x56>
 8008e32:	6875      	ldr	r5, [r6, #4]
 8008e34:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e36:	07d9      	lsls	r1, r3, #31
 8008e38:	d405      	bmi.n	8008e46 <_vfiprintf_r+0x32>
 8008e3a:	89ab      	ldrh	r3, [r5, #12]
 8008e3c:	059a      	lsls	r2, r3, #22
 8008e3e:	d402      	bmi.n	8008e46 <_vfiprintf_r+0x32>
 8008e40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e42:	f7fd fd94 	bl	800696e <__retarget_lock_acquire_recursive>
 8008e46:	89ab      	ldrh	r3, [r5, #12]
 8008e48:	071b      	lsls	r3, r3, #28
 8008e4a:	d501      	bpl.n	8008e50 <_vfiprintf_r+0x3c>
 8008e4c:	692b      	ldr	r3, [r5, #16]
 8008e4e:	b9eb      	cbnz	r3, 8008e8c <_vfiprintf_r+0x78>
 8008e50:	4629      	mov	r1, r5
 8008e52:	4630      	mov	r0, r6
 8008e54:	f7fe fcdc 	bl	8007810 <__swsetup_r>
 8008e58:	b1c0      	cbz	r0, 8008e8c <_vfiprintf_r+0x78>
 8008e5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e5c:	07dc      	lsls	r4, r3, #31
 8008e5e:	d50e      	bpl.n	8008e7e <_vfiprintf_r+0x6a>
 8008e60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008e64:	b01d      	add	sp, #116	; 0x74
 8008e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e6a:	4b7b      	ldr	r3, [pc, #492]	; (8009058 <_vfiprintf_r+0x244>)
 8008e6c:	429d      	cmp	r5, r3
 8008e6e:	d101      	bne.n	8008e74 <_vfiprintf_r+0x60>
 8008e70:	68b5      	ldr	r5, [r6, #8]
 8008e72:	e7df      	b.n	8008e34 <_vfiprintf_r+0x20>
 8008e74:	4b79      	ldr	r3, [pc, #484]	; (800905c <_vfiprintf_r+0x248>)
 8008e76:	429d      	cmp	r5, r3
 8008e78:	bf08      	it	eq
 8008e7a:	68f5      	ldreq	r5, [r6, #12]
 8008e7c:	e7da      	b.n	8008e34 <_vfiprintf_r+0x20>
 8008e7e:	89ab      	ldrh	r3, [r5, #12]
 8008e80:	0598      	lsls	r0, r3, #22
 8008e82:	d4ed      	bmi.n	8008e60 <_vfiprintf_r+0x4c>
 8008e84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e86:	f7fd fd73 	bl	8006970 <__retarget_lock_release_recursive>
 8008e8a:	e7e9      	b.n	8008e60 <_vfiprintf_r+0x4c>
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	9309      	str	r3, [sp, #36]	; 0x24
 8008e90:	2320      	movs	r3, #32
 8008e92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008e96:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e9a:	2330      	movs	r3, #48	; 0x30
 8008e9c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009060 <_vfiprintf_r+0x24c>
 8008ea0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008ea4:	f04f 0901 	mov.w	r9, #1
 8008ea8:	4623      	mov	r3, r4
 8008eaa:	469a      	mov	sl, r3
 8008eac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008eb0:	b10a      	cbz	r2, 8008eb6 <_vfiprintf_r+0xa2>
 8008eb2:	2a25      	cmp	r2, #37	; 0x25
 8008eb4:	d1f9      	bne.n	8008eaa <_vfiprintf_r+0x96>
 8008eb6:	ebba 0b04 	subs.w	fp, sl, r4
 8008eba:	d00b      	beq.n	8008ed4 <_vfiprintf_r+0xc0>
 8008ebc:	465b      	mov	r3, fp
 8008ebe:	4622      	mov	r2, r4
 8008ec0:	4629      	mov	r1, r5
 8008ec2:	4630      	mov	r0, r6
 8008ec4:	f7ff ff93 	bl	8008dee <__sfputs_r>
 8008ec8:	3001      	adds	r0, #1
 8008eca:	f000 80aa 	beq.w	8009022 <_vfiprintf_r+0x20e>
 8008ece:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ed0:	445a      	add	r2, fp
 8008ed2:	9209      	str	r2, [sp, #36]	; 0x24
 8008ed4:	f89a 3000 	ldrb.w	r3, [sl]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	f000 80a2 	beq.w	8009022 <_vfiprintf_r+0x20e>
 8008ede:	2300      	movs	r3, #0
 8008ee0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008ee4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ee8:	f10a 0a01 	add.w	sl, sl, #1
 8008eec:	9304      	str	r3, [sp, #16]
 8008eee:	9307      	str	r3, [sp, #28]
 8008ef0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008ef4:	931a      	str	r3, [sp, #104]	; 0x68
 8008ef6:	4654      	mov	r4, sl
 8008ef8:	2205      	movs	r2, #5
 8008efa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008efe:	4858      	ldr	r0, [pc, #352]	; (8009060 <_vfiprintf_r+0x24c>)
 8008f00:	f7f7 f96e 	bl	80001e0 <memchr>
 8008f04:	9a04      	ldr	r2, [sp, #16]
 8008f06:	b9d8      	cbnz	r0, 8008f40 <_vfiprintf_r+0x12c>
 8008f08:	06d1      	lsls	r1, r2, #27
 8008f0a:	bf44      	itt	mi
 8008f0c:	2320      	movmi	r3, #32
 8008f0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f12:	0713      	lsls	r3, r2, #28
 8008f14:	bf44      	itt	mi
 8008f16:	232b      	movmi	r3, #43	; 0x2b
 8008f18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f1c:	f89a 3000 	ldrb.w	r3, [sl]
 8008f20:	2b2a      	cmp	r3, #42	; 0x2a
 8008f22:	d015      	beq.n	8008f50 <_vfiprintf_r+0x13c>
 8008f24:	9a07      	ldr	r2, [sp, #28]
 8008f26:	4654      	mov	r4, sl
 8008f28:	2000      	movs	r0, #0
 8008f2a:	f04f 0c0a 	mov.w	ip, #10
 8008f2e:	4621      	mov	r1, r4
 8008f30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f34:	3b30      	subs	r3, #48	; 0x30
 8008f36:	2b09      	cmp	r3, #9
 8008f38:	d94e      	bls.n	8008fd8 <_vfiprintf_r+0x1c4>
 8008f3a:	b1b0      	cbz	r0, 8008f6a <_vfiprintf_r+0x156>
 8008f3c:	9207      	str	r2, [sp, #28]
 8008f3e:	e014      	b.n	8008f6a <_vfiprintf_r+0x156>
 8008f40:	eba0 0308 	sub.w	r3, r0, r8
 8008f44:	fa09 f303 	lsl.w	r3, r9, r3
 8008f48:	4313      	orrs	r3, r2
 8008f4a:	9304      	str	r3, [sp, #16]
 8008f4c:	46a2      	mov	sl, r4
 8008f4e:	e7d2      	b.n	8008ef6 <_vfiprintf_r+0xe2>
 8008f50:	9b03      	ldr	r3, [sp, #12]
 8008f52:	1d19      	adds	r1, r3, #4
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	9103      	str	r1, [sp, #12]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	bfbb      	ittet	lt
 8008f5c:	425b      	neglt	r3, r3
 8008f5e:	f042 0202 	orrlt.w	r2, r2, #2
 8008f62:	9307      	strge	r3, [sp, #28]
 8008f64:	9307      	strlt	r3, [sp, #28]
 8008f66:	bfb8      	it	lt
 8008f68:	9204      	strlt	r2, [sp, #16]
 8008f6a:	7823      	ldrb	r3, [r4, #0]
 8008f6c:	2b2e      	cmp	r3, #46	; 0x2e
 8008f6e:	d10c      	bne.n	8008f8a <_vfiprintf_r+0x176>
 8008f70:	7863      	ldrb	r3, [r4, #1]
 8008f72:	2b2a      	cmp	r3, #42	; 0x2a
 8008f74:	d135      	bne.n	8008fe2 <_vfiprintf_r+0x1ce>
 8008f76:	9b03      	ldr	r3, [sp, #12]
 8008f78:	1d1a      	adds	r2, r3, #4
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	9203      	str	r2, [sp, #12]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	bfb8      	it	lt
 8008f82:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008f86:	3402      	adds	r4, #2
 8008f88:	9305      	str	r3, [sp, #20]
 8008f8a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009070 <_vfiprintf_r+0x25c>
 8008f8e:	7821      	ldrb	r1, [r4, #0]
 8008f90:	2203      	movs	r2, #3
 8008f92:	4650      	mov	r0, sl
 8008f94:	f7f7 f924 	bl	80001e0 <memchr>
 8008f98:	b140      	cbz	r0, 8008fac <_vfiprintf_r+0x198>
 8008f9a:	2340      	movs	r3, #64	; 0x40
 8008f9c:	eba0 000a 	sub.w	r0, r0, sl
 8008fa0:	fa03 f000 	lsl.w	r0, r3, r0
 8008fa4:	9b04      	ldr	r3, [sp, #16]
 8008fa6:	4303      	orrs	r3, r0
 8008fa8:	3401      	adds	r4, #1
 8008faa:	9304      	str	r3, [sp, #16]
 8008fac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fb0:	482c      	ldr	r0, [pc, #176]	; (8009064 <_vfiprintf_r+0x250>)
 8008fb2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008fb6:	2206      	movs	r2, #6
 8008fb8:	f7f7 f912 	bl	80001e0 <memchr>
 8008fbc:	2800      	cmp	r0, #0
 8008fbe:	d03f      	beq.n	8009040 <_vfiprintf_r+0x22c>
 8008fc0:	4b29      	ldr	r3, [pc, #164]	; (8009068 <_vfiprintf_r+0x254>)
 8008fc2:	bb1b      	cbnz	r3, 800900c <_vfiprintf_r+0x1f8>
 8008fc4:	9b03      	ldr	r3, [sp, #12]
 8008fc6:	3307      	adds	r3, #7
 8008fc8:	f023 0307 	bic.w	r3, r3, #7
 8008fcc:	3308      	adds	r3, #8
 8008fce:	9303      	str	r3, [sp, #12]
 8008fd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fd2:	443b      	add	r3, r7
 8008fd4:	9309      	str	r3, [sp, #36]	; 0x24
 8008fd6:	e767      	b.n	8008ea8 <_vfiprintf_r+0x94>
 8008fd8:	fb0c 3202 	mla	r2, ip, r2, r3
 8008fdc:	460c      	mov	r4, r1
 8008fde:	2001      	movs	r0, #1
 8008fe0:	e7a5      	b.n	8008f2e <_vfiprintf_r+0x11a>
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	3401      	adds	r4, #1
 8008fe6:	9305      	str	r3, [sp, #20]
 8008fe8:	4619      	mov	r1, r3
 8008fea:	f04f 0c0a 	mov.w	ip, #10
 8008fee:	4620      	mov	r0, r4
 8008ff0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ff4:	3a30      	subs	r2, #48	; 0x30
 8008ff6:	2a09      	cmp	r2, #9
 8008ff8:	d903      	bls.n	8009002 <_vfiprintf_r+0x1ee>
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d0c5      	beq.n	8008f8a <_vfiprintf_r+0x176>
 8008ffe:	9105      	str	r1, [sp, #20]
 8009000:	e7c3      	b.n	8008f8a <_vfiprintf_r+0x176>
 8009002:	fb0c 2101 	mla	r1, ip, r1, r2
 8009006:	4604      	mov	r4, r0
 8009008:	2301      	movs	r3, #1
 800900a:	e7f0      	b.n	8008fee <_vfiprintf_r+0x1da>
 800900c:	ab03      	add	r3, sp, #12
 800900e:	9300      	str	r3, [sp, #0]
 8009010:	462a      	mov	r2, r5
 8009012:	4b16      	ldr	r3, [pc, #88]	; (800906c <_vfiprintf_r+0x258>)
 8009014:	a904      	add	r1, sp, #16
 8009016:	4630      	mov	r0, r6
 8009018:	f7fd feb6 	bl	8006d88 <_printf_float>
 800901c:	4607      	mov	r7, r0
 800901e:	1c78      	adds	r0, r7, #1
 8009020:	d1d6      	bne.n	8008fd0 <_vfiprintf_r+0x1bc>
 8009022:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009024:	07d9      	lsls	r1, r3, #31
 8009026:	d405      	bmi.n	8009034 <_vfiprintf_r+0x220>
 8009028:	89ab      	ldrh	r3, [r5, #12]
 800902a:	059a      	lsls	r2, r3, #22
 800902c:	d402      	bmi.n	8009034 <_vfiprintf_r+0x220>
 800902e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009030:	f7fd fc9e 	bl	8006970 <__retarget_lock_release_recursive>
 8009034:	89ab      	ldrh	r3, [r5, #12]
 8009036:	065b      	lsls	r3, r3, #25
 8009038:	f53f af12 	bmi.w	8008e60 <_vfiprintf_r+0x4c>
 800903c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800903e:	e711      	b.n	8008e64 <_vfiprintf_r+0x50>
 8009040:	ab03      	add	r3, sp, #12
 8009042:	9300      	str	r3, [sp, #0]
 8009044:	462a      	mov	r2, r5
 8009046:	4b09      	ldr	r3, [pc, #36]	; (800906c <_vfiprintf_r+0x258>)
 8009048:	a904      	add	r1, sp, #16
 800904a:	4630      	mov	r0, r6
 800904c:	f7fe f940 	bl	80072d0 <_printf_i>
 8009050:	e7e4      	b.n	800901c <_vfiprintf_r+0x208>
 8009052:	bf00      	nop
 8009054:	0800f1e0 	.word	0x0800f1e0
 8009058:	0800f200 	.word	0x0800f200
 800905c:	0800f1c0 	.word	0x0800f1c0
 8009060:	0800f444 	.word	0x0800f444
 8009064:	0800f44e 	.word	0x0800f44e
 8009068:	08006d89 	.word	0x08006d89
 800906c:	08008def 	.word	0x08008def
 8009070:	0800f44a 	.word	0x0800f44a

08009074 <_read_r>:
 8009074:	b538      	push	{r3, r4, r5, lr}
 8009076:	4d07      	ldr	r5, [pc, #28]	; (8009094 <_read_r+0x20>)
 8009078:	4604      	mov	r4, r0
 800907a:	4608      	mov	r0, r1
 800907c:	4611      	mov	r1, r2
 800907e:	2200      	movs	r2, #0
 8009080:	602a      	str	r2, [r5, #0]
 8009082:	461a      	mov	r2, r3
 8009084:	f7f8 fe2c 	bl	8001ce0 <_read>
 8009088:	1c43      	adds	r3, r0, #1
 800908a:	d102      	bne.n	8009092 <_read_r+0x1e>
 800908c:	682b      	ldr	r3, [r5, #0]
 800908e:	b103      	cbz	r3, 8009092 <_read_r+0x1e>
 8009090:	6023      	str	r3, [r4, #0]
 8009092:	bd38      	pop	{r3, r4, r5, pc}
 8009094:	20000360 	.word	0x20000360

08009098 <wcvt>:
 8009098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800909c:	b085      	sub	sp, #20
 800909e:	2b00      	cmp	r3, #0
 80090a0:	461d      	mov	r5, r3
 80090a2:	4614      	mov	r4, r2
 80090a4:	bfbc      	itt	lt
 80090a6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80090aa:	4614      	movlt	r4, r2
 80090ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80090ae:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80090b0:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 80090b4:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
 80090b8:	bfb6      	itet	lt
 80090ba:	461d      	movlt	r5, r3
 80090bc:	2300      	movge	r3, #0
 80090be:	232d      	movlt	r3, #45	; 0x2d
 80090c0:	6013      	str	r3, [r2, #0]
 80090c2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80090c4:	f023 0820 	bic.w	r8, r3, #32
 80090c8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80090cc:	d005      	beq.n	80090da <wcvt+0x42>
 80090ce:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80090d2:	d100      	bne.n	80090d6 <wcvt+0x3e>
 80090d4:	3601      	adds	r6, #1
 80090d6:	2102      	movs	r1, #2
 80090d8:	e000      	b.n	80090dc <wcvt+0x44>
 80090da:	2103      	movs	r1, #3
 80090dc:	ab03      	add	r3, sp, #12
 80090de:	9301      	str	r3, [sp, #4]
 80090e0:	ab02      	add	r3, sp, #8
 80090e2:	9300      	str	r3, [sp, #0]
 80090e4:	ec45 4b10 	vmov	d0, r4, r5
 80090e8:	4653      	mov	r3, sl
 80090ea:	4632      	mov	r2, r6
 80090ec:	f7fe fc9c 	bl	8007a28 <_dtoa_r>
 80090f0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80090f4:	4607      	mov	r7, r0
 80090f6:	d112      	bne.n	800911e <wcvt+0x86>
 80090f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80090fa:	07db      	lsls	r3, r3, #31
 80090fc:	d40f      	bmi.n	800911e <wcvt+0x86>
 80090fe:	9b03      	ldr	r3, [sp, #12]
 8009100:	1bdb      	subs	r3, r3, r7
 8009102:	f8cb 3000 	str.w	r3, [fp]
 8009106:	2300      	movs	r3, #0
 8009108:	f8db 2000 	ldr.w	r2, [fp]
 800910c:	429a      	cmp	r2, r3
 800910e:	dd02      	ble.n	8009116 <wcvt+0x7e>
 8009110:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009112:	4293      	cmp	r3, r2
 8009114:	db2a      	blt.n	800916c <wcvt+0xd4>
 8009116:	9814      	ldr	r0, [sp, #80]	; 0x50
 8009118:	b005      	add	sp, #20
 800911a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800911e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009122:	eb07 0906 	add.w	r9, r7, r6
 8009126:	d110      	bne.n	800914a <wcvt+0xb2>
 8009128:	783b      	ldrb	r3, [r7, #0]
 800912a:	2b30      	cmp	r3, #48	; 0x30
 800912c:	d10a      	bne.n	8009144 <wcvt+0xac>
 800912e:	2200      	movs	r2, #0
 8009130:	2300      	movs	r3, #0
 8009132:	4620      	mov	r0, r4
 8009134:	4629      	mov	r1, r5
 8009136:	f7f7 fcc7 	bl	8000ac8 <__aeabi_dcmpeq>
 800913a:	b918      	cbnz	r0, 8009144 <wcvt+0xac>
 800913c:	f1c6 0601 	rsb	r6, r6, #1
 8009140:	f8ca 6000 	str.w	r6, [sl]
 8009144:	f8da 3000 	ldr.w	r3, [sl]
 8009148:	4499      	add	r9, r3
 800914a:	2200      	movs	r2, #0
 800914c:	2300      	movs	r3, #0
 800914e:	4620      	mov	r0, r4
 8009150:	4629      	mov	r1, r5
 8009152:	f7f7 fcb9 	bl	8000ac8 <__aeabi_dcmpeq>
 8009156:	b108      	cbz	r0, 800915c <wcvt+0xc4>
 8009158:	f8cd 900c 	str.w	r9, [sp, #12]
 800915c:	2230      	movs	r2, #48	; 0x30
 800915e:	9b03      	ldr	r3, [sp, #12]
 8009160:	454b      	cmp	r3, r9
 8009162:	d2cc      	bcs.n	80090fe <wcvt+0x66>
 8009164:	1c59      	adds	r1, r3, #1
 8009166:	9103      	str	r1, [sp, #12]
 8009168:	701a      	strb	r2, [r3, #0]
 800916a:	e7f8      	b.n	800915e <wcvt+0xc6>
 800916c:	9914      	ldr	r1, [sp, #80]	; 0x50
 800916e:	5cfa      	ldrb	r2, [r7, r3]
 8009170:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009174:	3301      	adds	r3, #1
 8009176:	e7c7      	b.n	8009108 <wcvt+0x70>

08009178 <_svfwprintf_r>:
 8009178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800917c:	ed2d 8b04 	vpush	{d8-d9}
 8009180:	b0d3      	sub	sp, #332	; 0x14c
 8009182:	461d      	mov	r5, r3
 8009184:	2300      	movs	r3, #0
 8009186:	4689      	mov	r9, r1
 8009188:	9319      	str	r3, [sp, #100]	; 0x64
 800918a:	4683      	mov	fp, r0
 800918c:	920b      	str	r2, [sp, #44]	; 0x2c
 800918e:	f7ff fa5b 	bl	8008648 <_localeconv_r>
 8009192:	6803      	ldr	r3, [r0, #0]
 8009194:	781b      	ldrb	r3, [r3, #0]
 8009196:	9316      	str	r3, [sp, #88]	; 0x58
 8009198:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800919c:	061e      	lsls	r6, r3, #24
 800919e:	d51a      	bpl.n	80091d6 <_svfwprintf_r+0x5e>
 80091a0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80091a4:	b9bb      	cbnz	r3, 80091d6 <_svfwprintf_r+0x5e>
 80091a6:	2140      	movs	r1, #64	; 0x40
 80091a8:	4658      	mov	r0, fp
 80091aa:	f7fd fcd9 	bl	8006b60 <_malloc_r>
 80091ae:	f8c9 0000 	str.w	r0, [r9]
 80091b2:	f8c9 0010 	str.w	r0, [r9, #16]
 80091b6:	b958      	cbnz	r0, 80091d0 <_svfwprintf_r+0x58>
 80091b8:	230c      	movs	r3, #12
 80091ba:	f8cb 3000 	str.w	r3, [fp]
 80091be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80091c2:	930d      	str	r3, [sp, #52]	; 0x34
 80091c4:	980d      	ldr	r0, [sp, #52]	; 0x34
 80091c6:	b053      	add	sp, #332	; 0x14c
 80091c8:	ecbd 8b04 	vpop	{d8-d9}
 80091cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091d0:	2340      	movs	r3, #64	; 0x40
 80091d2:	f8c9 3014 	str.w	r3, [r9, #20]
 80091d6:	ed9f 7b8e 	vldr	d7, [pc, #568]	; 8009410 <_svfwprintf_r+0x298>
 80091da:	2300      	movs	r3, #0
 80091dc:	930f      	str	r3, [sp, #60]	; 0x3c
 80091de:	9311      	str	r3, [sp, #68]	; 0x44
 80091e0:	930d      	str	r3, [sp, #52]	; 0x34
 80091e2:	eeb0 8a47 	vmov.f32	s16, s14
 80091e6:	eef0 8a67 	vmov.f32	s17, s15
 80091ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091ec:	461c      	mov	r4, r3
 80091ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80091f2:	b10a      	cbz	r2, 80091f8 <_svfwprintf_r+0x80>
 80091f4:	2a25      	cmp	r2, #37	; 0x25
 80091f6:	d1f9      	bne.n	80091ec <_svfwprintf_r+0x74>
 80091f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091fa:	42a3      	cmp	r3, r4
 80091fc:	d00d      	beq.n	800921a <_svfwprintf_r+0xa2>
 80091fe:	1ae6      	subs	r6, r4, r3
 8009200:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009202:	4633      	mov	r3, r6
 8009204:	4649      	mov	r1, r9
 8009206:	4658      	mov	r0, fp
 8009208:	f000 fe1d 	bl	8009e46 <__ssputs_r>
 800920c:	3001      	adds	r0, #1
 800920e:	f000 80e9 	beq.w	80093e4 <_svfwprintf_r+0x26c>
 8009212:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009214:	eb03 03a6 	add.w	r3, r3, r6, asr #2
 8009218:	930d      	str	r3, [sp, #52]	; 0x34
 800921a:	6823      	ldr	r3, [r4, #0]
 800921c:	2b00      	cmp	r3, #0
 800921e:	f000 80e1 	beq.w	80093e4 <_svfwprintf_r+0x26c>
 8009222:	2100      	movs	r1, #0
 8009224:	1d22      	adds	r2, r4, #4
 8009226:	9115      	str	r1, [sp, #84]	; 0x54
 8009228:	460e      	mov	r6, r1
 800922a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800922e:	910c      	str	r1, [sp, #48]	; 0x30
 8009230:	460f      	mov	r7, r1
 8009232:	200a      	movs	r0, #10
 8009234:	4613      	mov	r3, r2
 8009236:	f853 2b04 	ldr.w	r2, [r3], #4
 800923a:	9209      	str	r2, [sp, #36]	; 0x24
 800923c:	930b      	str	r3, [sp, #44]	; 0x2c
 800923e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009240:	2b39      	cmp	r3, #57	; 0x39
 8009242:	d84c      	bhi.n	80092de <_svfwprintf_r+0x166>
 8009244:	2b1f      	cmp	r3, #31
 8009246:	d94f      	bls.n	80092e8 <_svfwprintf_r+0x170>
 8009248:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800924a:	3b20      	subs	r3, #32
 800924c:	2b19      	cmp	r3, #25
 800924e:	d84a      	bhi.n	80092e6 <_svfwprintf_r+0x16e>
 8009250:	e8df f003 	tbb	[pc, r3]
 8009254:	7049496b 	.word	0x7049496b
 8009258:	49494949 	.word	0x49494949
 800925c:	6c734949 	.word	0x6c734949
 8009260:	497d7a49 	.word	0x497d7a49
 8009264:	9b9b9b98 	.word	0x9b9b9b98
 8009268:	9b9b9b9b 	.word	0x9b9b9b9b
 800926c:	9b9b      	.short	0x9b9b
 800926e:	2b33      	cmp	r3, #51	; 0x33
 8009270:	d839      	bhi.n	80092e6 <_svfwprintf_r+0x16e>
 8009272:	e8df f013 	tbh	[pc, r3, lsl #1]
 8009276:	00e5      	.short	0x00e5
 8009278:	00e50038 	.word	0x00e50038
 800927c:	00380038 	.word	0x00380038
 8009280:	00380038 	.word	0x00380038
 8009284:	0038009c 	.word	0x0038009c
 8009288:	00380038 	.word	0x00380038
 800928c:	00380038 	.word	0x00380038
 8009290:	00380038 	.word	0x00380038
 8009294:	00380038 	.word	0x00380038
 8009298:	00380038 	.word	0x00380038
 800929c:	0038031e 	.word	0x0038031e
 80092a0:	00380038 	.word	0x00380038
 80092a4:	00380038 	.word	0x00380038
 80092a8:	00380038 	.word	0x00380038
 80092ac:	00380038 	.word	0x00380038
 80092b0:	00a50038 	.word	0x00a50038
 80092b4:	00e500d3 	.word	0x00e500d3
 80092b8:	00e500e5 	.word	0x00e500e5
 80092bc:	00d3009f 	.word	0x00d3009f
 80092c0:	00380038 	.word	0x00380038
 80092c4:	003800a2 	.word	0x003800a2
 80092c8:	02950284 	.word	0x02950284
 80092cc:	00a202b3 	.word	0x00a202b3
 80092d0:	02c20038 	.word	0x02c20038
 80092d4:	03120038 	.word	0x03120038
 80092d8:	00380038 	.word	0x00380038
 80092dc:	0042      	.short	0x0042
 80092de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092e0:	3b45      	subs	r3, #69	; 0x45
 80092e2:	2b33      	cmp	r3, #51	; 0x33
 80092e4:	d9c3      	bls.n	800926e <_svfwprintf_r+0xf6>
 80092e6:	b111      	cbz	r1, 80092ee <_svfwprintf_r+0x176>
 80092e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d07a      	beq.n	80093e4 <_svfwprintf_r+0x26c>
 80092ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092f0:	932a      	str	r3, [sp, #168]	; 0xa8
 80092f2:	2000      	movs	r0, #0
 80092f4:	9015      	str	r0, [sp, #84]	; 0x54
 80092f6:	950a      	str	r5, [sp, #40]	; 0x28
 80092f8:	e081      	b.n	80093fe <_svfwprintf_r+0x286>
 80092fa:	b101      	cbz	r1, 80092fe <_svfwprintf_r+0x186>
 80092fc:	9615      	str	r6, [sp, #84]	; 0x54
 80092fe:	4b46      	ldr	r3, [pc, #280]	; (8009418 <_svfwprintf_r+0x2a0>)
 8009300:	930f      	str	r3, [sp, #60]	; 0x3c
 8009302:	462a      	mov	r2, r5
 8009304:	06f8      	lsls	r0, r7, #27
 8009306:	f852 3b04 	ldr.w	r3, [r2], #4
 800930a:	920a      	str	r2, [sp, #40]	; 0x28
 800930c:	d402      	bmi.n	8009314 <_svfwprintf_r+0x19c>
 800930e:	0679      	lsls	r1, r7, #25
 8009310:	bf48      	it	mi
 8009312:	b29b      	uxthmi	r3, r3
 8009314:	07fa      	lsls	r2, r7, #31
 8009316:	d506      	bpl.n	8009326 <_svfwprintf_r+0x1ae>
 8009318:	b12b      	cbz	r3, 8009326 <_svfwprintf_r+0x1ae>
 800931a:	2230      	movs	r2, #48	; 0x30
 800931c:	921a      	str	r2, [sp, #104]	; 0x68
 800931e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009320:	921b      	str	r2, [sp, #108]	; 0x6c
 8009322:	f047 0702 	orr.w	r7, r7, #2
 8009326:	2202      	movs	r2, #2
 8009328:	e242      	b.n	80097b0 <_svfwprintf_r+0x638>
 800932a:	b90e      	cbnz	r6, 8009330 <_svfwprintf_r+0x1b8>
 800932c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800932e:	2101      	movs	r1, #1
 8009330:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009332:	e77f      	b.n	8009234 <_svfwprintf_r+0xbc>
 8009334:	f047 0701 	orr.w	r7, r7, #1
 8009338:	e7fa      	b.n	8009330 <_svfwprintf_r+0x1b8>
 800933a:	f855 3b04 	ldr.w	r3, [r5], #4
 800933e:	930c      	str	r3, [sp, #48]	; 0x30
 8009340:	2b00      	cmp	r3, #0
 8009342:	daf5      	bge.n	8009330 <_svfwprintf_r+0x1b8>
 8009344:	425b      	negs	r3, r3
 8009346:	930c      	str	r3, [sp, #48]	; 0x30
 8009348:	f047 0704 	orr.w	r7, r7, #4
 800934c:	e7f0      	b.n	8009330 <_svfwprintf_r+0x1b8>
 800934e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009350:	f852 3b04 	ldr.w	r3, [r2], #4
 8009354:	9309      	str	r3, [sp, #36]	; 0x24
 8009356:	2b2a      	cmp	r3, #42	; 0x2a
 8009358:	d112      	bne.n	8009380 <_svfwprintf_r+0x208>
 800935a:	f855 4b04 	ldr.w	r4, [r5], #4
 800935e:	920b      	str	r2, [sp, #44]	; 0x2c
 8009360:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
 8009364:	e7e4      	b.n	8009330 <_svfwprintf_r+0x1b8>
 8009366:	fb00 3404 	mla	r4, r0, r4, r3
 800936a:	f852 3b04 	ldr.w	r3, [r2], #4
 800936e:	9309      	str	r3, [sp, #36]	; 0x24
 8009370:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009372:	3b30      	subs	r3, #48	; 0x30
 8009374:	2b09      	cmp	r3, #9
 8009376:	d9f6      	bls.n	8009366 <_svfwprintf_r+0x1ee>
 8009378:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
 800937c:	920b      	str	r2, [sp, #44]	; 0x2c
 800937e:	e75e      	b.n	800923e <_svfwprintf_r+0xc6>
 8009380:	2400      	movs	r4, #0
 8009382:	e7f5      	b.n	8009370 <_svfwprintf_r+0x1f8>
 8009384:	f047 0780 	orr.w	r7, r7, #128	; 0x80
 8009388:	e7d2      	b.n	8009330 <_svfwprintf_r+0x1b8>
 800938a:	2300      	movs	r3, #0
 800938c:	930c      	str	r3, [sp, #48]	; 0x30
 800938e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009390:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009392:	fb00 3302 	mla	r3, r0, r2, r3
 8009396:	3b30      	subs	r3, #48	; 0x30
 8009398:	930c      	str	r3, [sp, #48]	; 0x30
 800939a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800939c:	f853 2b04 	ldr.w	r2, [r3], #4
 80093a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80093a2:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80093a6:	2b09      	cmp	r3, #9
 80093a8:	9209      	str	r2, [sp, #36]	; 0x24
 80093aa:	d9f0      	bls.n	800938e <_svfwprintf_r+0x216>
 80093ac:	e747      	b.n	800923e <_svfwprintf_r+0xc6>
 80093ae:	f047 0708 	orr.w	r7, r7, #8
 80093b2:	e7bd      	b.n	8009330 <_svfwprintf_r+0x1b8>
 80093b4:	f047 0740 	orr.w	r7, r7, #64	; 0x40
 80093b8:	e7ba      	b.n	8009330 <_svfwprintf_r+0x1b8>
 80093ba:	f047 0710 	orr.w	r7, r7, #16
 80093be:	e7b7      	b.n	8009330 <_svfwprintf_r+0x1b8>
 80093c0:	b101      	cbz	r1, 80093c4 <_svfwprintf_r+0x24c>
 80093c2:	9615      	str	r6, [sp, #84]	; 0x54
 80093c4:	462b      	mov	r3, r5
 80093c6:	06fd      	lsls	r5, r7, #27
 80093c8:	f853 0b04 	ldr.w	r0, [r3], #4
 80093cc:	930a      	str	r3, [sp, #40]	; 0x28
 80093ce:	d412      	bmi.n	80093f6 <_svfwprintf_r+0x27e>
 80093d0:	f000 fc82 	bl	8009cd8 <btowc>
 80093d4:	1c44      	adds	r4, r0, #1
 80093d6:	d10e      	bne.n	80093f6 <_svfwprintf_r+0x27e>
 80093d8:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80093dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093e0:	f8a9 300c 	strh.w	r3, [r9, #12]
 80093e4:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80093e8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80093ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80093ee:	bf18      	it	ne
 80093f0:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 80093f4:	e6e5      	b.n	80091c2 <_svfwprintf_r+0x4a>
 80093f6:	902a      	str	r0, [sp, #168]	; 0xa8
 80093f8:	2000      	movs	r0, #0
 80093fa:	902b      	str	r0, [sp, #172]	; 0xac
 80093fc:	9015      	str	r0, [sp, #84]	; 0x54
 80093fe:	4680      	mov	r8, r0
 8009400:	2401      	movs	r4, #1
 8009402:	4606      	mov	r6, r0
 8009404:	4605      	mov	r5, r0
 8009406:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 800940a:	e104      	b.n	8009616 <_svfwprintf_r+0x49e>
 800940c:	f3af 8000 	nop.w
	...
 8009418:	0800f4dc 	.word	0x0800f4dc
 800941c:	b101      	cbz	r1, 8009420 <_svfwprintf_r+0x2a8>
 800941e:	9615      	str	r6, [sp, #84]	; 0x54
 8009420:	462a      	mov	r2, r5
 8009422:	06f9      	lsls	r1, r7, #27
 8009424:	f852 3b04 	ldr.w	r3, [r2], #4
 8009428:	920a      	str	r2, [sp, #40]	; 0x28
 800942a:	d402      	bmi.n	8009432 <_svfwprintf_r+0x2ba>
 800942c:	067a      	lsls	r2, r7, #25
 800942e:	bf48      	it	mi
 8009430:	b21b      	sxthmi	r3, r3
 8009432:	2b00      	cmp	r3, #0
 8009434:	da02      	bge.n	800943c <_svfwprintf_r+0x2c4>
 8009436:	222d      	movs	r2, #45	; 0x2d
 8009438:	425b      	negs	r3, r3
 800943a:	9215      	str	r2, [sp, #84]	; 0x54
 800943c:	2201      	movs	r2, #1
 800943e:	e1b9      	b.n	80097b4 <_svfwprintf_r+0x63c>
 8009440:	b101      	cbz	r1, 8009444 <_svfwprintf_r+0x2cc>
 8009442:	9615      	str	r6, [sp, #84]	; 0x54
 8009444:	3507      	adds	r5, #7
 8009446:	f025 0307 	bic.w	r3, r5, #7
 800944a:	ecb3 7b02 	vldmia	r3!, {d7}
 800944e:	930a      	str	r3, [sp, #40]	; 0x28
 8009450:	eeb0 8a47 	vmov.f32	s16, s14
 8009454:	eef0 8a67 	vmov.f32	s17, s15
 8009458:	ee18 3a90 	vmov	r3, s17
 800945c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009460:	ee09 3a90 	vmov	s19, r3
 8009464:	eeb0 9a47 	vmov.f32	s18, s14
 8009468:	4ba6      	ldr	r3, [pc, #664]	; (8009704 <_svfwprintf_r+0x58c>)
 800946a:	ec51 0b19 	vmov	r0, r1, d9
 800946e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009472:	f7f7 fb5b 	bl	8000b2c <__aeabi_dcmpun>
 8009476:	b9f0      	cbnz	r0, 80094b6 <_svfwprintf_r+0x33e>
 8009478:	4ba2      	ldr	r3, [pc, #648]	; (8009704 <_svfwprintf_r+0x58c>)
 800947a:	ec51 0b19 	vmov	r0, r1, d9
 800947e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009482:	f7f7 fb35 	bl	8000af0 <__aeabi_dcmple>
 8009486:	b9b0      	cbnz	r0, 80094b6 <_svfwprintf_r+0x33e>
 8009488:	ec51 0b18 	vmov	r0, r1, d8
 800948c:	2200      	movs	r2, #0
 800948e:	2300      	movs	r3, #0
 8009490:	f7f7 fb24 	bl	8000adc <__aeabi_dcmplt>
 8009494:	b108      	cbz	r0, 800949a <_svfwprintf_r+0x322>
 8009496:	232d      	movs	r3, #45	; 0x2d
 8009498:	9315      	str	r3, [sp, #84]	; 0x54
 800949a:	4b9b      	ldr	r3, [pc, #620]	; (8009708 <_svfwprintf_r+0x590>)
 800949c:	489b      	ldr	r0, [pc, #620]	; (800970c <_svfwprintf_r+0x594>)
 800949e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80094a0:	f027 0780 	bic.w	r7, r7, #128	; 0x80
 80094a4:	2a47      	cmp	r2, #71	; 0x47
 80094a6:	bf94      	ite	ls
 80094a8:	469a      	movls	sl, r3
 80094aa:	4682      	movhi	sl, r0
 80094ac:	f04f 0800 	mov.w	r8, #0
 80094b0:	2403      	movs	r4, #3
 80094b2:	4646      	mov	r6, r8
 80094b4:	e3d4      	b.n	8009c60 <_svfwprintf_r+0xae8>
 80094b6:	ec53 2b18 	vmov	r2, r3, d8
 80094ba:	ec51 0b18 	vmov	r0, r1, d8
 80094be:	f7f7 fb35 	bl	8000b2c <__aeabi_dcmpun>
 80094c2:	b140      	cbz	r0, 80094d6 <_svfwprintf_r+0x35e>
 80094c4:	ee18 3a90 	vmov	r3, s17
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	bfbc      	itt	lt
 80094cc:	232d      	movlt	r3, #45	; 0x2d
 80094ce:	9315      	strlt	r3, [sp, #84]	; 0x54
 80094d0:	488f      	ldr	r0, [pc, #572]	; (8009710 <_svfwprintf_r+0x598>)
 80094d2:	4b90      	ldr	r3, [pc, #576]	; (8009714 <_svfwprintf_r+0x59c>)
 80094d4:	e7e3      	b.n	800949e <_svfwprintf_r+0x326>
 80094d6:	1c63      	adds	r3, r4, #1
 80094d8:	f000 810f 	beq.w	80096fa <_svfwprintf_r+0x582>
 80094dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094de:	f023 0320 	bic.w	r3, r3, #32
 80094e2:	2b47      	cmp	r3, #71	; 0x47
 80094e4:	d102      	bne.n	80094ec <_svfwprintf_r+0x374>
 80094e6:	2c00      	cmp	r4, #0
 80094e8:	bf08      	it	eq
 80094ea:	2401      	moveq	r4, #1
 80094ec:	f447 7380 	orr.w	r3, r7, #256	; 0x100
 80094f0:	930e      	str	r3, [sp, #56]	; 0x38
 80094f2:	2328      	movs	r3, #40	; 0x28
 80094f4:	9307      	str	r3, [sp, #28]
 80094f6:	ab19      	add	r3, sp, #100	; 0x64
 80094f8:	9305      	str	r3, [sp, #20]
 80094fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094fc:	9304      	str	r3, [sp, #16]
 80094fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009500:	f10d 08a8 	add.w	r8, sp, #168	; 0xa8
 8009504:	ae18      	add	r6, sp, #96	; 0x60
 8009506:	ad17      	add	r5, sp, #92	; 0x5c
 8009508:	e9cd 4300 	strd	r4, r3, [sp]
 800950c:	f8cd 8018 	str.w	r8, [sp, #24]
 8009510:	ec53 2b18 	vmov	r2, r3, d8
 8009514:	9603      	str	r6, [sp, #12]
 8009516:	9502      	str	r5, [sp, #8]
 8009518:	4658      	mov	r0, fp
 800951a:	f7ff fdbd 	bl	8009098 <wcvt>
 800951e:	4540      	cmp	r0, r8
 8009520:	4682      	mov	sl, r0
 8009522:	f040 80ec 	bne.w	80096fe <_svfwprintf_r+0x586>
 8009526:	9919      	ldr	r1, [sp, #100]	; 0x64
 8009528:	2928      	cmp	r1, #40	; 0x28
 800952a:	f340 80e8 	ble.w	80096fe <_svfwprintf_r+0x586>
 800952e:	0089      	lsls	r1, r1, #2
 8009530:	4658      	mov	r0, fp
 8009532:	f7fd fb15 	bl	8006b60 <_malloc_r>
 8009536:	4680      	mov	r8, r0
 8009538:	2800      	cmp	r0, #0
 800953a:	f43f af4d 	beq.w	80093d8 <_svfwprintf_r+0x260>
 800953e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009540:	9502      	str	r5, [sp, #8]
 8009542:	e9cd 0306 	strd	r0, r3, [sp, #24]
 8009546:	ab19      	add	r3, sp, #100	; 0x64
 8009548:	9305      	str	r3, [sp, #20]
 800954a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800954c:	e9cd 6303 	strd	r6, r3, [sp, #12]
 8009550:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009552:	4658      	mov	r0, fp
 8009554:	e9cd 4300 	strd	r4, r3, [sp]
 8009558:	ec53 2b18 	vmov	r2, r3, d8
 800955c:	f7ff fd9c 	bl	8009098 <wcvt>
 8009560:	4682      	mov	sl, r0
 8009562:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009564:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8009566:	f023 0320 	bic.w	r3, r3, #32
 800956a:	2b47      	cmp	r3, #71	; 0x47
 800956c:	f040 80d6 	bne.w	800971c <_svfwprintf_r+0x5a4>
 8009570:	1cee      	adds	r6, r5, #3
 8009572:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009574:	db02      	blt.n	800957c <_svfwprintf_r+0x404>
 8009576:	42ac      	cmp	r4, r5
 8009578:	f280 80ec 	bge.w	8009754 <_svfwprintf_r+0x5dc>
 800957c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800957e:	3b02      	subs	r3, #2
 8009580:	9309      	str	r3, [sp, #36]	; 0x24
 8009582:	1e6b      	subs	r3, r5, #1
 8009584:	2b00      	cmp	r3, #0
 8009586:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009588:	9318      	str	r3, [sp, #96]	; 0x60
 800958a:	bfb8      	it	lt
 800958c:	f1c5 0301 	rsblt	r3, r5, #1
 8009590:	921c      	str	r2, [sp, #112]	; 0x70
 8009592:	bfb4      	ite	lt
 8009594:	222d      	movlt	r2, #45	; 0x2d
 8009596:	222b      	movge	r2, #43	; 0x2b
 8009598:	2b09      	cmp	r3, #9
 800959a:	921d      	str	r2, [sp, #116]	; 0x74
 800959c:	f340 80d1 	ble.w	8009742 <_svfwprintf_r+0x5ca>
 80095a0:	a82a      	add	r0, sp, #168	; 0xa8
 80095a2:	250a      	movs	r5, #10
 80095a4:	4602      	mov	r2, r0
 80095a6:	fb93 f4f5 	sdiv	r4, r3, r5
 80095aa:	fb05 3114 	mls	r1, r5, r4, r3
 80095ae:	3130      	adds	r1, #48	; 0x30
 80095b0:	f842 1c04 	str.w	r1, [r2, #-4]
 80095b4:	4619      	mov	r1, r3
 80095b6:	2963      	cmp	r1, #99	; 0x63
 80095b8:	f1a0 0004 	sub.w	r0, r0, #4
 80095bc:	4623      	mov	r3, r4
 80095be:	dcf1      	bgt.n	80095a4 <_svfwprintf_r+0x42c>
 80095c0:	3330      	adds	r3, #48	; 0x30
 80095c2:	f840 3c04 	str.w	r3, [r0, #-4]
 80095c6:	f1a2 0108 	sub.w	r1, r2, #8
 80095ca:	a81e      	add	r0, sp, #120	; 0x78
 80095cc:	ab2a      	add	r3, sp, #168	; 0xa8
 80095ce:	4299      	cmp	r1, r3
 80095d0:	f0c0 80b2 	bcc.w	8009738 <_svfwprintf_r+0x5c0>
 80095d4:	f10d 04b3 	add.w	r4, sp, #179	; 0xb3
 80095d8:	1aa4      	subs	r4, r4, r2
 80095da:	f024 0403 	bic.w	r4, r4, #3
 80095de:	3a0b      	subs	r2, #11
 80095e0:	4293      	cmp	r3, r2
 80095e2:	bf38      	it	cc
 80095e4:	2400      	movcc	r4, #0
 80095e6:	ab1e      	add	r3, sp, #120	; 0x78
 80095e8:	441c      	add	r4, r3
 80095ea:	a81c      	add	r0, sp, #112	; 0x70
 80095ec:	1a24      	subs	r4, r4, r0
 80095ee:	10a3      	asrs	r3, r4, #2
 80095f0:	9311      	str	r3, [sp, #68]	; 0x44
 80095f2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80095f4:	2b01      	cmp	r3, #1
 80095f6:	eb03 04a4 	add.w	r4, r3, r4, asr #2
 80095fa:	dc02      	bgt.n	8009602 <_svfwprintf_r+0x48a>
 80095fc:	f017 0501 	ands.w	r5, r7, #1
 8009600:	d001      	beq.n	8009606 <_svfwprintf_r+0x48e>
 8009602:	3401      	adds	r4, #1
 8009604:	2500      	movs	r5, #0
 8009606:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8009608:	2e00      	cmp	r6, #0
 800960a:	f000 817e 	beq.w	800990a <_svfwprintf_r+0x792>
 800960e:	232d      	movs	r3, #45	; 0x2d
 8009610:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8009612:	9315      	str	r3, [sp, #84]	; 0x54
 8009614:	2600      	movs	r6, #0
 8009616:	42a6      	cmp	r6, r4
 8009618:	4633      	mov	r3, r6
 800961a:	bfb8      	it	lt
 800961c:	4623      	movlt	r3, r4
 800961e:	930e      	str	r3, [sp, #56]	; 0x38
 8009620:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009622:	b113      	cbz	r3, 800962a <_svfwprintf_r+0x4b2>
 8009624:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009626:	3301      	adds	r3, #1
 8009628:	930e      	str	r3, [sp, #56]	; 0x38
 800962a:	f017 0302 	ands.w	r3, r7, #2
 800962e:	9312      	str	r3, [sp, #72]	; 0x48
 8009630:	bf1e      	ittt	ne
 8009632:	9b0e      	ldrne	r3, [sp, #56]	; 0x38
 8009634:	3302      	addne	r3, #2
 8009636:	930e      	strne	r3, [sp, #56]	; 0x38
 8009638:	f017 0384 	ands.w	r3, r7, #132	; 0x84
 800963c:	9313      	str	r3, [sp, #76]	; 0x4c
 800963e:	f000 8166 	beq.w	800990e <_svfwprintf_r+0x796>
 8009642:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009644:	b143      	cbz	r3, 8009658 <_svfwprintf_r+0x4e0>
 8009646:	2304      	movs	r3, #4
 8009648:	aa15      	add	r2, sp, #84	; 0x54
 800964a:	4649      	mov	r1, r9
 800964c:	4658      	mov	r0, fp
 800964e:	f000 fbfa 	bl	8009e46 <__ssputs_r>
 8009652:	3001      	adds	r0, #1
 8009654:	f000 816e 	beq.w	8009934 <_svfwprintf_r+0x7bc>
 8009658:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800965a:	b143      	cbz	r3, 800966e <_svfwprintf_r+0x4f6>
 800965c:	2308      	movs	r3, #8
 800965e:	aa1a      	add	r2, sp, #104	; 0x68
 8009660:	4649      	mov	r1, r9
 8009662:	4658      	mov	r0, fp
 8009664:	f000 fbef 	bl	8009e46 <__ssputs_r>
 8009668:	3001      	adds	r0, #1
 800966a:	f000 8163 	beq.w	8009934 <_svfwprintf_r+0x7bc>
 800966e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009670:	2b80      	cmp	r3, #128	; 0x80
 8009672:	d113      	bne.n	800969c <_svfwprintf_r+0x524>
 8009674:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009676:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009678:	1a9b      	subs	r3, r3, r2
 800967a:	2b00      	cmp	r3, #0
 800967c:	9310      	str	r3, [sp, #64]	; 0x40
 800967e:	dd0d      	ble.n	800969c <_svfwprintf_r+0x524>
 8009680:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009682:	4a25      	ldr	r2, [pc, #148]	; (8009718 <_svfwprintf_r+0x5a0>)
 8009684:	2b10      	cmp	r3, #16
 8009686:	f300 816a 	bgt.w	800995e <_svfwprintf_r+0x7e6>
 800968a:	4a23      	ldr	r2, [pc, #140]	; (8009718 <_svfwprintf_r+0x5a0>)
 800968c:	009b      	lsls	r3, r3, #2
 800968e:	4649      	mov	r1, r9
 8009690:	4658      	mov	r0, fp
 8009692:	f000 fbd8 	bl	8009e46 <__ssputs_r>
 8009696:	3001      	adds	r0, #1
 8009698:	f000 814c 	beq.w	8009934 <_svfwprintf_r+0x7bc>
 800969c:	1b36      	subs	r6, r6, r4
 800969e:	2e00      	cmp	r6, #0
 80096a0:	dd0c      	ble.n	80096bc <_svfwprintf_r+0x544>
 80096a2:	2e10      	cmp	r6, #16
 80096a4:	4a1c      	ldr	r2, [pc, #112]	; (8009718 <_svfwprintf_r+0x5a0>)
 80096a6:	f300 8165 	bgt.w	8009974 <_svfwprintf_r+0x7fc>
 80096aa:	4a1b      	ldr	r2, [pc, #108]	; (8009718 <_svfwprintf_r+0x5a0>)
 80096ac:	00b3      	lsls	r3, r6, #2
 80096ae:	4649      	mov	r1, r9
 80096b0:	4658      	mov	r0, fp
 80096b2:	f000 fbc8 	bl	8009e46 <__ssputs_r>
 80096b6:	3001      	adds	r0, #1
 80096b8:	f000 813c 	beq.w	8009934 <_svfwprintf_r+0x7bc>
 80096bc:	05f9      	lsls	r1, r7, #23
 80096be:	f100 8162 	bmi.w	8009986 <_svfwprintf_r+0x80e>
 80096c2:	00a3      	lsls	r3, r4, #2
 80096c4:	4652      	mov	r2, sl
 80096c6:	4649      	mov	r1, r9
 80096c8:	4658      	mov	r0, fp
 80096ca:	f000 fbbc 	bl	8009e46 <__ssputs_r>
 80096ce:	3001      	adds	r0, #1
 80096d0:	f000 8130 	beq.w	8009934 <_svfwprintf_r+0x7bc>
 80096d4:	077a      	lsls	r2, r7, #29
 80096d6:	f100 8281 	bmi.w	8009bdc <_svfwprintf_r+0xa64>
 80096da:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80096de:	990e      	ldr	r1, [sp, #56]	; 0x38
 80096e0:	428a      	cmp	r2, r1
 80096e2:	bfac      	ite	ge
 80096e4:	189b      	addge	r3, r3, r2
 80096e6:	185b      	addlt	r3, r3, r1
 80096e8:	930d      	str	r3, [sp, #52]	; 0x34
 80096ea:	f1b8 0f00 	cmp.w	r8, #0
 80096ee:	d055      	beq.n	800979c <_svfwprintf_r+0x624>
 80096f0:	4641      	mov	r1, r8
 80096f2:	4658      	mov	r0, fp
 80096f4:	f7fd f9c8 	bl	8006a88 <_free_r>
 80096f8:	e050      	b.n	800979c <_svfwprintf_r+0x624>
 80096fa:	2406      	movs	r4, #6
 80096fc:	e6f6      	b.n	80094ec <_svfwprintf_r+0x374>
 80096fe:	f04f 0800 	mov.w	r8, #0
 8009702:	e72e      	b.n	8009562 <_svfwprintf_r+0x3ea>
 8009704:	7fefffff 	.word	0x7fefffff
 8009708:	0800f458 	.word	0x0800f458
 800970c:	0800f468 	.word	0x0800f468
 8009710:	0800f488 	.word	0x0800f488
 8009714:	0800f478 	.word	0x0800f478
 8009718:	0800f568 	.word	0x0800f568
 800971c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800971e:	2b66      	cmp	r3, #102	; 0x66
 8009720:	f47f af2f 	bne.w	8009582 <_svfwprintf_r+0x40a>
 8009724:	f007 0301 	and.w	r3, r7, #1
 8009728:	2d00      	cmp	r5, #0
 800972a:	ea43 0304 	orr.w	r3, r3, r4
 800972e:	dd0e      	ble.n	800974e <_svfwprintf_r+0x5d6>
 8009730:	b1fb      	cbz	r3, 8009772 <_svfwprintf_r+0x5fa>
 8009732:	3401      	adds	r4, #1
 8009734:	442c      	add	r4, r5
 8009736:	e766      	b.n	8009606 <_svfwprintf_r+0x48e>
 8009738:	f851 4b04 	ldr.w	r4, [r1], #4
 800973c:	f840 4b04 	str.w	r4, [r0], #4
 8009740:	e745      	b.n	80095ce <_svfwprintf_r+0x456>
 8009742:	2230      	movs	r2, #48	; 0x30
 8009744:	4413      	add	r3, r2
 8009746:	921e      	str	r2, [sp, #120]	; 0x78
 8009748:	931f      	str	r3, [sp, #124]	; 0x7c
 800974a:	ac20      	add	r4, sp, #128	; 0x80
 800974c:	e74d      	b.n	80095ea <_svfwprintf_r+0x472>
 800974e:	b193      	cbz	r3, 8009776 <_svfwprintf_r+0x5fe>
 8009750:	3402      	adds	r4, #2
 8009752:	e758      	b.n	8009606 <_svfwprintf_r+0x48e>
 8009754:	42ab      	cmp	r3, r5
 8009756:	dc05      	bgt.n	8009764 <_svfwprintf_r+0x5ec>
 8009758:	07fc      	lsls	r4, r7, #31
 800975a:	d50e      	bpl.n	800977a <_svfwprintf_r+0x602>
 800975c:	1c6c      	adds	r4, r5, #1
 800975e:	2367      	movs	r3, #103	; 0x67
 8009760:	9309      	str	r3, [sp, #36]	; 0x24
 8009762:	e750      	b.n	8009606 <_svfwprintf_r+0x48e>
 8009764:	2d00      	cmp	r5, #0
 8009766:	bfd4      	ite	le
 8009768:	f1c5 0402 	rsble	r4, r5, #2
 800976c:	2401      	movgt	r4, #1
 800976e:	441c      	add	r4, r3
 8009770:	e7f5      	b.n	800975e <_svfwprintf_r+0x5e6>
 8009772:	462c      	mov	r4, r5
 8009774:	e747      	b.n	8009606 <_svfwprintf_r+0x48e>
 8009776:	2401      	movs	r4, #1
 8009778:	e745      	b.n	8009606 <_svfwprintf_r+0x48e>
 800977a:	462c      	mov	r4, r5
 800977c:	e7ef      	b.n	800975e <_svfwprintf_r+0x5e6>
 800977e:	b101      	cbz	r1, 8009782 <_svfwprintf_r+0x60a>
 8009780:	9615      	str	r6, [sp, #84]	; 0x54
 8009782:	1d2b      	adds	r3, r5, #4
 8009784:	06f8      	lsls	r0, r7, #27
 8009786:	930a      	str	r3, [sp, #40]	; 0x28
 8009788:	d503      	bpl.n	8009792 <_svfwprintf_r+0x61a>
 800978a:	682b      	ldr	r3, [r5, #0]
 800978c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800978e:	601a      	str	r2, [r3, #0]
 8009790:	e004      	b.n	800979c <_svfwprintf_r+0x624>
 8009792:	0679      	lsls	r1, r7, #25
 8009794:	d5f9      	bpl.n	800978a <_svfwprintf_r+0x612>
 8009796:	682b      	ldr	r3, [r5, #0]
 8009798:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800979a:	801a      	strh	r2, [r3, #0]
 800979c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800979e:	e524      	b.n	80091ea <_svfwprintf_r+0x72>
 80097a0:	462a      	mov	r2, r5
 80097a2:	f017 0110 	ands.w	r1, r7, #16
 80097a6:	f852 3b04 	ldr.w	r3, [r2], #4
 80097aa:	920a      	str	r2, [sp, #40]	; 0x28
 80097ac:	d011      	beq.n	80097d2 <_svfwprintf_r+0x65a>
 80097ae:	2200      	movs	r2, #0
 80097b0:	2100      	movs	r1, #0
 80097b2:	9115      	str	r1, [sp, #84]	; 0x54
 80097b4:	1c66      	adds	r6, r4, #1
 80097b6:	f000 822e 	beq.w	8009c16 <_svfwprintf_r+0xa9e>
 80097ba:	f027 0180 	bic.w	r1, r7, #128	; 0x80
 80097be:	2b00      	cmp	r3, #0
 80097c0:	f040 822d 	bne.w	8009c1e <_svfwprintf_r+0xaa6>
 80097c4:	2c00      	cmp	r4, #0
 80097c6:	f000 8098 	beq.w	80098fa <_svfwprintf_r+0x782>
 80097ca:	2a01      	cmp	r2, #1
 80097cc:	f040 822a 	bne.w	8009c24 <_svfwprintf_r+0xaac>
 80097d0:	e075      	b.n	80098be <_svfwprintf_r+0x746>
 80097d2:	f017 0240 	ands.w	r2, r7, #64	; 0x40
 80097d6:	d0eb      	beq.n	80097b0 <_svfwprintf_r+0x638>
 80097d8:	b29b      	uxth	r3, r3
 80097da:	e7e8      	b.n	80097ae <_svfwprintf_r+0x636>
 80097dc:	462a      	mov	r2, r5
 80097de:	2178      	movs	r1, #120	; 0x78
 80097e0:	f852 3b04 	ldr.w	r3, [r2], #4
 80097e4:	920a      	str	r2, [sp, #40]	; 0x28
 80097e6:	2230      	movs	r2, #48	; 0x30
 80097e8:	e9cd 211a 	strd	r2, r1, [sp, #104]	; 0x68
 80097ec:	4a9e      	ldr	r2, [pc, #632]	; (8009a68 <_svfwprintf_r+0x8f0>)
 80097ee:	920f      	str	r2, [sp, #60]	; 0x3c
 80097f0:	f047 0702 	orr.w	r7, r7, #2
 80097f4:	2202      	movs	r2, #2
 80097f6:	9109      	str	r1, [sp, #36]	; 0x24
 80097f8:	e7da      	b.n	80097b0 <_svfwprintf_r+0x638>
 80097fa:	462b      	mov	r3, r5
 80097fc:	2600      	movs	r6, #0
 80097fe:	f853 ab04 	ldr.w	sl, [r3], #4
 8009802:	930a      	str	r3, [sp, #40]	; 0x28
 8009804:	f017 0510 	ands.w	r5, r7, #16
 8009808:	9615      	str	r6, [sp, #84]	; 0x54
 800980a:	d12d      	bne.n	8009868 <_svfwprintf_r+0x6f0>
 800980c:	1c62      	adds	r2, r4, #1
 800980e:	d014      	beq.n	800983a <_svfwprintf_r+0x6c2>
 8009810:	4622      	mov	r2, r4
 8009812:	4629      	mov	r1, r5
 8009814:	4650      	mov	r0, sl
 8009816:	4626      	mov	r6, r4
 8009818:	f7f6 fce2 	bl	80001e0 <memchr>
 800981c:	b108      	cbz	r0, 8009822 <_svfwprintf_r+0x6aa>
 800981e:	eba0 060a 	sub.w	r6, r0, sl
 8009822:	2e27      	cmp	r6, #39	; 0x27
 8009824:	d90e      	bls.n	8009844 <_svfwprintf_r+0x6cc>
 8009826:	1c71      	adds	r1, r6, #1
 8009828:	0089      	lsls	r1, r1, #2
 800982a:	4658      	mov	r0, fp
 800982c:	f7fd f998 	bl	8006b60 <_malloc_r>
 8009830:	2800      	cmp	r0, #0
 8009832:	f43f add1 	beq.w	80093d8 <_svfwprintf_r+0x260>
 8009836:	4680      	mov	r8, r0
 8009838:	e007      	b.n	800984a <_svfwprintf_r+0x6d2>
 800983a:	4650      	mov	r0, sl
 800983c:	f7f6 fcc8 	bl	80001d0 <strlen>
 8009840:	4606      	mov	r6, r0
 8009842:	e7ee      	b.n	8009822 <_svfwprintf_r+0x6aa>
 8009844:	f04f 0800 	mov.w	r8, #0
 8009848:	a82a      	add	r0, sp, #168	; 0xa8
 800984a:	4634      	mov	r4, r6
 800984c:	2300      	movs	r3, #0
 800984e:	42b3      	cmp	r3, r6
 8009850:	d104      	bne.n	800985c <_svfwprintf_r+0x6e4>
 8009852:	2600      	movs	r6, #0
 8009854:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 8009858:	4682      	mov	sl, r0
 800985a:	e6dc      	b.n	8009616 <_svfwprintf_r+0x49e>
 800985c:	f81a 2003 	ldrb.w	r2, [sl, r3]
 8009860:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8009864:	3301      	adds	r3, #1
 8009866:	e7f2      	b.n	800984e <_svfwprintf_r+0x6d6>
 8009868:	1c63      	adds	r3, r4, #1
 800986a:	d011      	beq.n	8009890 <_svfwprintf_r+0x718>
 800986c:	4622      	mov	r2, r4
 800986e:	4631      	mov	r1, r6
 8009870:	4650      	mov	r0, sl
 8009872:	f000 fa04 	bl	8009c7e <wmemchr>
 8009876:	4680      	mov	r8, r0
 8009878:	2800      	cmp	r0, #0
 800987a:	f43f ae1a 	beq.w	80094b2 <_svfwprintf_r+0x33a>
 800987e:	eba0 080a 	sub.w	r8, r0, sl
 8009882:	ea4f 08a8 	mov.w	r8, r8, asr #2
 8009886:	4544      	cmp	r4, r8
 8009888:	bfa8      	it	ge
 800988a:	4644      	movge	r4, r8
 800988c:	46b0      	mov	r8, r6
 800988e:	e610      	b.n	80094b2 <_svfwprintf_r+0x33a>
 8009890:	4650      	mov	r0, sl
 8009892:	f000 f9eb 	bl	8009c6c <wcslen>
 8009896:	4604      	mov	r4, r0
 8009898:	e7f8      	b.n	800988c <_svfwprintf_r+0x714>
 800989a:	462a      	mov	r2, r5
 800989c:	06fe      	lsls	r6, r7, #27
 800989e:	f852 3b04 	ldr.w	r3, [r2], #4
 80098a2:	920a      	str	r2, [sp, #40]	; 0x28
 80098a4:	d501      	bpl.n	80098aa <_svfwprintf_r+0x732>
 80098a6:	2201      	movs	r2, #1
 80098a8:	e782      	b.n	80097b0 <_svfwprintf_r+0x638>
 80098aa:	067d      	lsls	r5, r7, #25
 80098ac:	bf48      	it	mi
 80098ae:	b29b      	uxthmi	r3, r3
 80098b0:	e7f9      	b.n	80098a6 <_svfwprintf_r+0x72e>
 80098b2:	b101      	cbz	r1, 80098b6 <_svfwprintf_r+0x73e>
 80098b4:	9615      	str	r6, [sp, #84]	; 0x54
 80098b6:	4b6d      	ldr	r3, [pc, #436]	; (8009a6c <_svfwprintf_r+0x8f4>)
 80098b8:	e522      	b.n	8009300 <_svfwprintf_r+0x188>
 80098ba:	2b09      	cmp	r3, #9
 80098bc:	d804      	bhi.n	80098c8 <_svfwprintf_r+0x750>
 80098be:	3330      	adds	r3, #48	; 0x30
 80098c0:	9351      	str	r3, [sp, #324]	; 0x144
 80098c2:	f50d 7aa2 	add.w	sl, sp, #324	; 0x144
 80098c6:	e1c3      	b.n	8009c50 <_svfwprintf_r+0xad8>
 80098c8:	f50d 7aa4 	add.w	sl, sp, #328	; 0x148
 80098cc:	250a      	movs	r5, #10
 80098ce:	fbb3 f0f5 	udiv	r0, r3, r5
 80098d2:	fb05 3210 	mls	r2, r5, r0, r3
 80098d6:	3230      	adds	r2, #48	; 0x30
 80098d8:	f84a 2d04 	str.w	r2, [sl, #-4]!
 80098dc:	461a      	mov	r2, r3
 80098de:	2a09      	cmp	r2, #9
 80098e0:	4603      	mov	r3, r0
 80098e2:	d8f4      	bhi.n	80098ce <_svfwprintf_r+0x756>
 80098e4:	e1b4      	b.n	8009c50 <_svfwprintf_r+0xad8>
 80098e6:	f003 020f 	and.w	r2, r3, #15
 80098ea:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80098ec:	091b      	lsrs	r3, r3, #4
 80098ee:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 80098f2:	f84a 2d04 	str.w	r2, [sl, #-4]!
 80098f6:	d1f6      	bne.n	80098e6 <_svfwprintf_r+0x76e>
 80098f8:	e1aa      	b.n	8009c50 <_svfwprintf_r+0xad8>
 80098fa:	b91a      	cbnz	r2, 8009904 <_svfwprintf_r+0x78c>
 80098fc:	07f8      	lsls	r0, r7, #31
 80098fe:	d501      	bpl.n	8009904 <_svfwprintf_r+0x78c>
 8009900:	2330      	movs	r3, #48	; 0x30
 8009902:	e7dd      	b.n	80098c0 <_svfwprintf_r+0x748>
 8009904:	f50d 7aa4 	add.w	sl, sp, #328	; 0x148
 8009908:	e1a2      	b.n	8009c50 <_svfwprintf_r+0xad8>
 800990a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800990c:	e683      	b.n	8009616 <_svfwprintf_r+0x49e>
 800990e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009910:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009912:	1a9b      	subs	r3, r3, r2
 8009914:	2b00      	cmp	r3, #0
 8009916:	9310      	str	r3, [sp, #64]	; 0x40
 8009918:	f77f ae93 	ble.w	8009642 <_svfwprintf_r+0x4ca>
 800991c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800991e:	2b10      	cmp	r3, #16
 8009920:	dc11      	bgt.n	8009946 <_svfwprintf_r+0x7ce>
 8009922:	4a53      	ldr	r2, [pc, #332]	; (8009a70 <_svfwprintf_r+0x8f8>)
 8009924:	009b      	lsls	r3, r3, #2
 8009926:	4649      	mov	r1, r9
 8009928:	4658      	mov	r0, fp
 800992a:	f000 fa8c 	bl	8009e46 <__ssputs_r>
 800992e:	3001      	adds	r0, #1
 8009930:	f47f ae87 	bne.w	8009642 <_svfwprintf_r+0x4ca>
 8009934:	f1b8 0f00 	cmp.w	r8, #0
 8009938:	f43f ad54 	beq.w	80093e4 <_svfwprintf_r+0x26c>
 800993c:	4641      	mov	r1, r8
 800993e:	4658      	mov	r0, fp
 8009940:	f7fd f8a2 	bl	8006a88 <_free_r>
 8009944:	e54e      	b.n	80093e4 <_svfwprintf_r+0x26c>
 8009946:	4a4a      	ldr	r2, [pc, #296]	; (8009a70 <_svfwprintf_r+0x8f8>)
 8009948:	2340      	movs	r3, #64	; 0x40
 800994a:	4649      	mov	r1, r9
 800994c:	4658      	mov	r0, fp
 800994e:	f000 fa7a 	bl	8009e46 <__ssputs_r>
 8009952:	3001      	adds	r0, #1
 8009954:	d0ee      	beq.n	8009934 <_svfwprintf_r+0x7bc>
 8009956:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009958:	3b10      	subs	r3, #16
 800995a:	9310      	str	r3, [sp, #64]	; 0x40
 800995c:	e7de      	b.n	800991c <_svfwprintf_r+0x7a4>
 800995e:	2340      	movs	r3, #64	; 0x40
 8009960:	4649      	mov	r1, r9
 8009962:	4658      	mov	r0, fp
 8009964:	f000 fa6f 	bl	8009e46 <__ssputs_r>
 8009968:	3001      	adds	r0, #1
 800996a:	d0e3      	beq.n	8009934 <_svfwprintf_r+0x7bc>
 800996c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800996e:	3b10      	subs	r3, #16
 8009970:	9310      	str	r3, [sp, #64]	; 0x40
 8009972:	e685      	b.n	8009680 <_svfwprintf_r+0x508>
 8009974:	2340      	movs	r3, #64	; 0x40
 8009976:	4649      	mov	r1, r9
 8009978:	4658      	mov	r0, fp
 800997a:	f000 fa64 	bl	8009e46 <__ssputs_r>
 800997e:	3001      	adds	r0, #1
 8009980:	d0d8      	beq.n	8009934 <_svfwprintf_r+0x7bc>
 8009982:	3e10      	subs	r6, #16
 8009984:	e68d      	b.n	80096a2 <_svfwprintf_r+0x52a>
 8009986:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009988:	2b65      	cmp	r3, #101	; 0x65
 800998a:	f240 80e5 	bls.w	8009b58 <_svfwprintf_r+0x9e0>
 800998e:	ec51 0b18 	vmov	r0, r1, d8
 8009992:	2200      	movs	r2, #0
 8009994:	2300      	movs	r3, #0
 8009996:	f7f7 f897 	bl	8000ac8 <__aeabi_dcmpeq>
 800999a:	b358      	cbz	r0, 80099f4 <_svfwprintf_r+0x87c>
 800999c:	4a35      	ldr	r2, [pc, #212]	; (8009a74 <_svfwprintf_r+0x8fc>)
 800999e:	2304      	movs	r3, #4
 80099a0:	4649      	mov	r1, r9
 80099a2:	4658      	mov	r0, fp
 80099a4:	f000 fa4f 	bl	8009e46 <__ssputs_r>
 80099a8:	3001      	adds	r0, #1
 80099aa:	d0c3      	beq.n	8009934 <_svfwprintf_r+0x7bc>
 80099ac:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 80099b0:	429a      	cmp	r2, r3
 80099b2:	db02      	blt.n	80099ba <_svfwprintf_r+0x842>
 80099b4:	07fb      	lsls	r3, r7, #31
 80099b6:	f57f ae8d 	bpl.w	80096d4 <_svfwprintf_r+0x55c>
 80099ba:	2304      	movs	r3, #4
 80099bc:	aa16      	add	r2, sp, #88	; 0x58
 80099be:	4649      	mov	r1, r9
 80099c0:	4658      	mov	r0, fp
 80099c2:	f000 fa40 	bl	8009e46 <__ssputs_r>
 80099c6:	3001      	adds	r0, #1
 80099c8:	d0b4      	beq.n	8009934 <_svfwprintf_r+0x7bc>
 80099ca:	9c19      	ldr	r4, [sp, #100]	; 0x64
 80099cc:	3c01      	subs	r4, #1
 80099ce:	2c00      	cmp	r4, #0
 80099d0:	f77f ae80 	ble.w	80096d4 <_svfwprintf_r+0x55c>
 80099d4:	4d28      	ldr	r5, [pc, #160]	; (8009a78 <_svfwprintf_r+0x900>)
 80099d6:	2c10      	cmp	r4, #16
 80099d8:	dc02      	bgt.n	80099e0 <_svfwprintf_r+0x868>
 80099da:	00a3      	lsls	r3, r4, #2
 80099dc:	4a26      	ldr	r2, [pc, #152]	; (8009a78 <_svfwprintf_r+0x900>)
 80099de:	e672      	b.n	80096c6 <_svfwprintf_r+0x54e>
 80099e0:	2340      	movs	r3, #64	; 0x40
 80099e2:	462a      	mov	r2, r5
 80099e4:	4649      	mov	r1, r9
 80099e6:	4658      	mov	r0, fp
 80099e8:	f000 fa2d 	bl	8009e46 <__ssputs_r>
 80099ec:	3001      	adds	r0, #1
 80099ee:	d0a1      	beq.n	8009934 <_svfwprintf_r+0x7bc>
 80099f0:	3c10      	subs	r4, #16
 80099f2:	e7f0      	b.n	80099d6 <_svfwprintf_r+0x85e>
 80099f4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	dc40      	bgt.n	8009a7c <_svfwprintf_r+0x904>
 80099fa:	4a1e      	ldr	r2, [pc, #120]	; (8009a74 <_svfwprintf_r+0x8fc>)
 80099fc:	2304      	movs	r3, #4
 80099fe:	4649      	mov	r1, r9
 8009a00:	4658      	mov	r0, fp
 8009a02:	f000 fa20 	bl	8009e46 <__ssputs_r>
 8009a06:	3001      	adds	r0, #1
 8009a08:	d094      	beq.n	8009934 <_svfwprintf_r+0x7bc>
 8009a0a:	e9dd 3218 	ldrd	r3, r2, [sp, #96]	; 0x60
 8009a0e:	4313      	orrs	r3, r2
 8009a10:	f007 0201 	and.w	r2, r7, #1
 8009a14:	4313      	orrs	r3, r2
 8009a16:	f43f ae5d 	beq.w	80096d4 <_svfwprintf_r+0x55c>
 8009a1a:	2304      	movs	r3, #4
 8009a1c:	aa16      	add	r2, sp, #88	; 0x58
 8009a1e:	4649      	mov	r1, r9
 8009a20:	4658      	mov	r0, fp
 8009a22:	f000 fa10 	bl	8009e46 <__ssputs_r>
 8009a26:	3001      	adds	r0, #1
 8009a28:	d084      	beq.n	8009934 <_svfwprintf_r+0x7bc>
 8009a2a:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8009a2c:	2c00      	cmp	r4, #0
 8009a2e:	da0c      	bge.n	8009a4a <_svfwprintf_r+0x8d2>
 8009a30:	4d11      	ldr	r5, [pc, #68]	; (8009a78 <_svfwprintf_r+0x900>)
 8009a32:	4264      	negs	r4, r4
 8009a34:	2c10      	cmp	r4, #16
 8009a36:	dc0b      	bgt.n	8009a50 <_svfwprintf_r+0x8d8>
 8009a38:	4a0f      	ldr	r2, [pc, #60]	; (8009a78 <_svfwprintf_r+0x900>)
 8009a3a:	00a3      	lsls	r3, r4, #2
 8009a3c:	4649      	mov	r1, r9
 8009a3e:	4658      	mov	r0, fp
 8009a40:	f000 fa01 	bl	8009e46 <__ssputs_r>
 8009a44:	3001      	adds	r0, #1
 8009a46:	f43f af75 	beq.w	8009934 <_svfwprintf_r+0x7bc>
 8009a4a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009a4c:	009b      	lsls	r3, r3, #2
 8009a4e:	e639      	b.n	80096c4 <_svfwprintf_r+0x54c>
 8009a50:	2340      	movs	r3, #64	; 0x40
 8009a52:	462a      	mov	r2, r5
 8009a54:	4649      	mov	r1, r9
 8009a56:	4658      	mov	r0, fp
 8009a58:	f000 f9f5 	bl	8009e46 <__ssputs_r>
 8009a5c:	3001      	adds	r0, #1
 8009a5e:	f43f af69 	beq.w	8009934 <_svfwprintf_r+0x7bc>
 8009a62:	3c10      	subs	r4, #16
 8009a64:	e7e6      	b.n	8009a34 <_svfwprintf_r+0x8bc>
 8009a66:	bf00      	nop
 8009a68:	0800f4dc 	.word	0x0800f4dc
 8009a6c:	0800f498 	.word	0x0800f498
 8009a70:	0800f528 	.word	0x0800f528
 8009a74:	0800f520 	.word	0x0800f520
 8009a78:	0800f568 	.word	0x0800f568
 8009a7c:	9c19      	ldr	r4, [sp, #100]	; 0x64
 8009a7e:	f344 041d 	sbfx	r4, r4, #0, #30
 8009a82:	42ac      	cmp	r4, r5
 8009a84:	bfa8      	it	ge
 8009a86:	462c      	movge	r4, r5
 8009a88:	2c00      	cmp	r4, #0
 8009a8a:	dc20      	bgt.n	8009ace <_svfwprintf_r+0x956>
 8009a8c:	2c00      	cmp	r4, #0
 8009a8e:	bfac      	ite	ge
 8009a90:	1b2e      	subge	r6, r5, r4
 8009a92:	462e      	movlt	r6, r5
 8009a94:	2e00      	cmp	r6, #0
 8009a96:	dd0b      	ble.n	8009ab0 <_svfwprintf_r+0x938>
 8009a98:	4c72      	ldr	r4, [pc, #456]	; (8009c64 <_svfwprintf_r+0xaec>)
 8009a9a:	2e10      	cmp	r6, #16
 8009a9c:	dc20      	bgt.n	8009ae0 <_svfwprintf_r+0x968>
 8009a9e:	4a71      	ldr	r2, [pc, #452]	; (8009c64 <_svfwprintf_r+0xaec>)
 8009aa0:	00b3      	lsls	r3, r6, #2
 8009aa2:	4649      	mov	r1, r9
 8009aa4:	4658      	mov	r0, fp
 8009aa6:	f000 f9ce 	bl	8009e46 <__ssputs_r>
 8009aaa:	3001      	adds	r0, #1
 8009aac:	f43f af42 	beq.w	8009934 <_svfwprintf_r+0x7bc>
 8009ab0:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8009ab4:	429a      	cmp	r2, r3
 8009ab6:	ea4f 0585 	mov.w	r5, r5, lsl #2
 8009aba:	da1c      	bge.n	8009af6 <_svfwprintf_r+0x97e>
 8009abc:	2304      	movs	r3, #4
 8009abe:	aa16      	add	r2, sp, #88	; 0x58
 8009ac0:	4649      	mov	r1, r9
 8009ac2:	4658      	mov	r0, fp
 8009ac4:	f000 f9bf 	bl	8009e46 <__ssputs_r>
 8009ac8:	3001      	adds	r0, #1
 8009aca:	d116      	bne.n	8009afa <_svfwprintf_r+0x982>
 8009acc:	e732      	b.n	8009934 <_svfwprintf_r+0x7bc>
 8009ace:	00a3      	lsls	r3, r4, #2
 8009ad0:	4652      	mov	r2, sl
 8009ad2:	4649      	mov	r1, r9
 8009ad4:	4658      	mov	r0, fp
 8009ad6:	f000 f9b6 	bl	8009e46 <__ssputs_r>
 8009ada:	3001      	adds	r0, #1
 8009adc:	d1d6      	bne.n	8009a8c <_svfwprintf_r+0x914>
 8009ade:	e729      	b.n	8009934 <_svfwprintf_r+0x7bc>
 8009ae0:	2340      	movs	r3, #64	; 0x40
 8009ae2:	4622      	mov	r2, r4
 8009ae4:	4649      	mov	r1, r9
 8009ae6:	4658      	mov	r0, fp
 8009ae8:	f000 f9ad 	bl	8009e46 <__ssputs_r>
 8009aec:	3001      	adds	r0, #1
 8009aee:	f43f af21 	beq.w	8009934 <_svfwprintf_r+0x7bc>
 8009af2:	3e10      	subs	r6, #16
 8009af4:	e7d1      	b.n	8009a9a <_svfwprintf_r+0x922>
 8009af6:	07fe      	lsls	r6, r7, #31
 8009af8:	d4e0      	bmi.n	8009abc <_svfwprintf_r+0x944>
 8009afa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009afc:	ebc5 0483 	rsb	r4, r5, r3, lsl #2
 8009b00:	10a2      	asrs	r2, r4, #2
 8009b02:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8009b04:	1b1c      	subs	r4, r3, r4
 8009b06:	4294      	cmp	r4, r2
 8009b08:	bfa8      	it	ge
 8009b0a:	4614      	movge	r4, r2
 8009b0c:	2c00      	cmp	r4, #0
 8009b0e:	dd09      	ble.n	8009b24 <_svfwprintf_r+0x9ac>
 8009b10:	00a3      	lsls	r3, r4, #2
 8009b12:	eb0a 0205 	add.w	r2, sl, r5
 8009b16:	4649      	mov	r1, r9
 8009b18:	4658      	mov	r0, fp
 8009b1a:	f000 f994 	bl	8009e46 <__ssputs_r>
 8009b1e:	3001      	adds	r0, #1
 8009b20:	f43f af08 	beq.w	8009934 <_svfwprintf_r+0x7bc>
 8009b24:	e9dd 3518 	ldrd	r3, r5, [sp, #96]	; 0x60
 8009b28:	2c00      	cmp	r4, #0
 8009b2a:	eba5 0503 	sub.w	r5, r5, r3
 8009b2e:	bfa8      	it	ge
 8009b30:	1b2d      	subge	r5, r5, r4
 8009b32:	2d00      	cmp	r5, #0
 8009b34:	f77f adce 	ble.w	80096d4 <_svfwprintf_r+0x55c>
 8009b38:	4c4a      	ldr	r4, [pc, #296]	; (8009c64 <_svfwprintf_r+0xaec>)
 8009b3a:	2d10      	cmp	r5, #16
 8009b3c:	dc01      	bgt.n	8009b42 <_svfwprintf_r+0x9ca>
 8009b3e:	00ab      	lsls	r3, r5, #2
 8009b40:	e74c      	b.n	80099dc <_svfwprintf_r+0x864>
 8009b42:	2340      	movs	r3, #64	; 0x40
 8009b44:	4622      	mov	r2, r4
 8009b46:	4649      	mov	r1, r9
 8009b48:	4658      	mov	r0, fp
 8009b4a:	f000 f97c 	bl	8009e46 <__ssputs_r>
 8009b4e:	3001      	adds	r0, #1
 8009b50:	f43f aef0 	beq.w	8009934 <_svfwprintf_r+0x7bc>
 8009b54:	3d10      	subs	r5, #16
 8009b56:	e7f0      	b.n	8009b3a <_svfwprintf_r+0x9c2>
 8009b58:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009b5a:	2b01      	cmp	r3, #1
 8009b5c:	4652      	mov	r2, sl
 8009b5e:	f04f 0304 	mov.w	r3, #4
 8009b62:	4649      	mov	r1, r9
 8009b64:	4658      	mov	r0, fp
 8009b66:	dc01      	bgt.n	8009b6c <_svfwprintf_r+0x9f4>
 8009b68:	07fc      	lsls	r4, r7, #31
 8009b6a:	d51b      	bpl.n	8009ba4 <_svfwprintf_r+0xa2c>
 8009b6c:	f000 f96b 	bl	8009e46 <__ssputs_r>
 8009b70:	3001      	adds	r0, #1
 8009b72:	f43f aedf 	beq.w	8009934 <_svfwprintf_r+0x7bc>
 8009b76:	2304      	movs	r3, #4
 8009b78:	aa16      	add	r2, sp, #88	; 0x58
 8009b7a:	4649      	mov	r1, r9
 8009b7c:	4658      	mov	r0, fp
 8009b7e:	f000 f962 	bl	8009e46 <__ssputs_r>
 8009b82:	3001      	adds	r0, #1
 8009b84:	f43f aed6 	beq.w	8009934 <_svfwprintf_r+0x7bc>
 8009b88:	9c19      	ldr	r4, [sp, #100]	; 0x64
 8009b8a:	ec51 0b18 	vmov	r0, r1, d8
 8009b8e:	2200      	movs	r2, #0
 8009b90:	2300      	movs	r3, #0
 8009b92:	3c01      	subs	r4, #1
 8009b94:	f7f6 ff98 	bl	8000ac8 <__aeabi_dcmpeq>
 8009b98:	b968      	cbnz	r0, 8009bb6 <_svfwprintf_r+0xa3e>
 8009b9a:	00a3      	lsls	r3, r4, #2
 8009b9c:	f10a 0204 	add.w	r2, sl, #4
 8009ba0:	4649      	mov	r1, r9
 8009ba2:	4658      	mov	r0, fp
 8009ba4:	f000 f94f 	bl	8009e46 <__ssputs_r>
 8009ba8:	3001      	adds	r0, #1
 8009baa:	f43f aec3 	beq.w	8009934 <_svfwprintf_r+0x7bc>
 8009bae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009bb0:	aa1c      	add	r2, sp, #112	; 0x70
 8009bb2:	009b      	lsls	r3, r3, #2
 8009bb4:	e587      	b.n	80096c6 <_svfwprintf_r+0x54e>
 8009bb6:	2c00      	cmp	r4, #0
 8009bb8:	ddf9      	ble.n	8009bae <_svfwprintf_r+0xa36>
 8009bba:	4d2a      	ldr	r5, [pc, #168]	; (8009c64 <_svfwprintf_r+0xaec>)
 8009bbc:	2c10      	cmp	r4, #16
 8009bbe:	dc02      	bgt.n	8009bc6 <_svfwprintf_r+0xa4e>
 8009bc0:	4a28      	ldr	r2, [pc, #160]	; (8009c64 <_svfwprintf_r+0xaec>)
 8009bc2:	00a3      	lsls	r3, r4, #2
 8009bc4:	e7ec      	b.n	8009ba0 <_svfwprintf_r+0xa28>
 8009bc6:	2340      	movs	r3, #64	; 0x40
 8009bc8:	462a      	mov	r2, r5
 8009bca:	4649      	mov	r1, r9
 8009bcc:	4658      	mov	r0, fp
 8009bce:	f000 f93a 	bl	8009e46 <__ssputs_r>
 8009bd2:	3001      	adds	r0, #1
 8009bd4:	f43f aeae 	beq.w	8009934 <_svfwprintf_r+0x7bc>
 8009bd8:	3c10      	subs	r4, #16
 8009bda:	e7ef      	b.n	8009bbc <_svfwprintf_r+0xa44>
 8009bdc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009bde:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009be0:	1a9c      	subs	r4, r3, r2
 8009be2:	2c00      	cmp	r4, #0
 8009be4:	f77f ad79 	ble.w	80096da <_svfwprintf_r+0x562>
 8009be8:	2c10      	cmp	r4, #16
 8009bea:	dc09      	bgt.n	8009c00 <_svfwprintf_r+0xa88>
 8009bec:	4a1e      	ldr	r2, [pc, #120]	; (8009c68 <_svfwprintf_r+0xaf0>)
 8009bee:	00a3      	lsls	r3, r4, #2
 8009bf0:	4649      	mov	r1, r9
 8009bf2:	4658      	mov	r0, fp
 8009bf4:	f000 f927 	bl	8009e46 <__ssputs_r>
 8009bf8:	3001      	adds	r0, #1
 8009bfa:	f47f ad6e 	bne.w	80096da <_svfwprintf_r+0x562>
 8009bfe:	e699      	b.n	8009934 <_svfwprintf_r+0x7bc>
 8009c00:	4a19      	ldr	r2, [pc, #100]	; (8009c68 <_svfwprintf_r+0xaf0>)
 8009c02:	2340      	movs	r3, #64	; 0x40
 8009c04:	4649      	mov	r1, r9
 8009c06:	4658      	mov	r0, fp
 8009c08:	f000 f91d 	bl	8009e46 <__ssputs_r>
 8009c0c:	3001      	adds	r0, #1
 8009c0e:	f43f ae91 	beq.w	8009934 <_svfwprintf_r+0x7bc>
 8009c12:	3c10      	subs	r4, #16
 8009c14:	e7e8      	b.n	8009be8 <_svfwprintf_r+0xa70>
 8009c16:	4639      	mov	r1, r7
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	f43f add6 	beq.w	80097ca <_svfwprintf_r+0x652>
 8009c1e:	2a01      	cmp	r2, #1
 8009c20:	f43f ae4b 	beq.w	80098ba <_svfwprintf_r+0x742>
 8009c24:	2a02      	cmp	r2, #2
 8009c26:	f50d 7aa4 	add.w	sl, sp, #328	; 0x148
 8009c2a:	f43f ae5c 	beq.w	80098e6 <_svfwprintf_r+0x76e>
 8009c2e:	f003 0207 	and.w	r2, r3, #7
 8009c32:	3230      	adds	r2, #48	; 0x30
 8009c34:	08db      	lsrs	r3, r3, #3
 8009c36:	4650      	mov	r0, sl
 8009c38:	f84a 2d04 	str.w	r2, [sl, #-4]!
 8009c3c:	d1f7      	bne.n	8009c2e <_svfwprintf_r+0xab6>
 8009c3e:	07cd      	lsls	r5, r1, #31
 8009c40:	d506      	bpl.n	8009c50 <_svfwprintf_r+0xad8>
 8009c42:	2a30      	cmp	r2, #48	; 0x30
 8009c44:	d004      	beq.n	8009c50 <_svfwprintf_r+0xad8>
 8009c46:	2330      	movs	r3, #48	; 0x30
 8009c48:	f84a 3c04 	str.w	r3, [sl, #-4]
 8009c4c:	f1a0 0a08 	sub.w	sl, r0, #8
 8009c50:	ab52      	add	r3, sp, #328	; 0x148
 8009c52:	4626      	mov	r6, r4
 8009c54:	eba3 040a 	sub.w	r4, r3, sl
 8009c58:	10a4      	asrs	r4, r4, #2
 8009c5a:	460f      	mov	r7, r1
 8009c5c:	f04f 0800 	mov.w	r8, #0
 8009c60:	4645      	mov	r5, r8
 8009c62:	e4d8      	b.n	8009616 <_svfwprintf_r+0x49e>
 8009c64:	0800f568 	.word	0x0800f568
 8009c68:	0800f528 	.word	0x0800f528

08009c6c <wcslen>:
 8009c6c:	4602      	mov	r2, r0
 8009c6e:	4613      	mov	r3, r2
 8009c70:	3204      	adds	r2, #4
 8009c72:	6819      	ldr	r1, [r3, #0]
 8009c74:	2900      	cmp	r1, #0
 8009c76:	d1fa      	bne.n	8009c6e <wcslen+0x2>
 8009c78:	1a18      	subs	r0, r3, r0
 8009c7a:	1080      	asrs	r0, r0, #2
 8009c7c:	4770      	bx	lr

08009c7e <wmemchr>:
 8009c7e:	b530      	push	{r4, r5, lr}
 8009c80:	2400      	movs	r4, #0
 8009c82:	4294      	cmp	r4, r2
 8009c84:	4603      	mov	r3, r0
 8009c86:	d102      	bne.n	8009c8e <wmemchr+0x10>
 8009c88:	2300      	movs	r3, #0
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	bd30      	pop	{r4, r5, pc}
 8009c8e:	681d      	ldr	r5, [r3, #0]
 8009c90:	428d      	cmp	r5, r1
 8009c92:	f100 0004 	add.w	r0, r0, #4
 8009c96:	d0f8      	beq.n	8009c8a <wmemchr+0xc>
 8009c98:	3401      	adds	r4, #1
 8009c9a:	e7f2      	b.n	8009c82 <wmemchr+0x4>

08009c9c <__assert_func>:
 8009c9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009c9e:	4614      	mov	r4, r2
 8009ca0:	461a      	mov	r2, r3
 8009ca2:	4b09      	ldr	r3, [pc, #36]	; (8009cc8 <__assert_func+0x2c>)
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	4605      	mov	r5, r0
 8009ca8:	68d8      	ldr	r0, [r3, #12]
 8009caa:	b14c      	cbz	r4, 8009cc0 <__assert_func+0x24>
 8009cac:	4b07      	ldr	r3, [pc, #28]	; (8009ccc <__assert_func+0x30>)
 8009cae:	9100      	str	r1, [sp, #0]
 8009cb0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009cb4:	4906      	ldr	r1, [pc, #24]	; (8009cd0 <__assert_func+0x34>)
 8009cb6:	462b      	mov	r3, r5
 8009cb8:	f000 f858 	bl	8009d6c <fiprintf>
 8009cbc:	f000 f92b 	bl	8009f16 <abort>
 8009cc0:	4b04      	ldr	r3, [pc, #16]	; (8009cd4 <__assert_func+0x38>)
 8009cc2:	461c      	mov	r4, r3
 8009cc4:	e7f3      	b.n	8009cae <__assert_func+0x12>
 8009cc6:	bf00      	nop
 8009cc8:	20000014 	.word	0x20000014
 8009ccc:	0800f5a8 	.word	0x0800f5a8
 8009cd0:	0800f5b5 	.word	0x0800f5b5
 8009cd4:	0800f5e3 	.word	0x0800f5e3

08009cd8 <btowc>:
 8009cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009cda:	1c43      	adds	r3, r0, #1
 8009cdc:	b087      	sub	sp, #28
 8009cde:	d103      	bne.n	8009ce8 <btowc+0x10>
 8009ce0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009ce4:	b007      	add	sp, #28
 8009ce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ce8:	4d1c      	ldr	r5, [pc, #112]	; (8009d5c <btowc+0x84>)
 8009cea:	f88d 000b 	strb.w	r0, [sp, #11]
 8009cee:	ae04      	add	r6, sp, #16
 8009cf0:	2208      	movs	r2, #8
 8009cf2:	2100      	movs	r1, #0
 8009cf4:	4630      	mov	r0, r6
 8009cf6:	f7fc febf 	bl	8006a78 <memset>
 8009cfa:	682f      	ldr	r7, [r5, #0]
 8009cfc:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8009cfe:	b9fc      	cbnz	r4, 8009d40 <btowc+0x68>
 8009d00:	2050      	movs	r0, #80	; 0x50
 8009d02:	f7fc fe9b 	bl	8006a3c <malloc>
 8009d06:	4602      	mov	r2, r0
 8009d08:	65b8      	str	r0, [r7, #88]	; 0x58
 8009d0a:	b920      	cbnz	r0, 8009d16 <btowc+0x3e>
 8009d0c:	4b14      	ldr	r3, [pc, #80]	; (8009d60 <btowc+0x88>)
 8009d0e:	4815      	ldr	r0, [pc, #84]	; (8009d64 <btowc+0x8c>)
 8009d10:	2118      	movs	r1, #24
 8009d12:	f7ff ffc3 	bl	8009c9c <__assert_func>
 8009d16:	682b      	ldr	r3, [r5, #0]
 8009d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d1a:	e9c3 4400 	strd	r4, r4, [r3]
 8009d1e:	e9c3 4402 	strd	r4, r4, [r3, #8]
 8009d22:	e9c3 4404 	strd	r4, r4, [r3, #16]
 8009d26:	e9c3 440a 	strd	r4, r4, [r3, #40]	; 0x28
 8009d2a:	e9c3 440c 	strd	r4, r4, [r3, #48]	; 0x30
 8009d2e:	e9c3 440e 	strd	r4, r4, [r3, #56]	; 0x38
 8009d32:	e9c3 4410 	strd	r4, r4, [r3, #64]	; 0x40
 8009d36:	e9c3 4412 	strd	r4, r4, [r3, #72]	; 0x48
 8009d3a:	619c      	str	r4, [r3, #24]
 8009d3c:	771c      	strb	r4, [r3, #28]
 8009d3e:	625c      	str	r4, [r3, #36]	; 0x24
 8009d40:	4b09      	ldr	r3, [pc, #36]	; (8009d68 <btowc+0x90>)
 8009d42:	9600      	str	r6, [sp, #0]
 8009d44:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
 8009d48:	6828      	ldr	r0, [r5, #0]
 8009d4a:	2301      	movs	r3, #1
 8009d4c:	f10d 020b 	add.w	r2, sp, #11
 8009d50:	a903      	add	r1, sp, #12
 8009d52:	47a0      	blx	r4
 8009d54:	2801      	cmp	r0, #1
 8009d56:	d8c3      	bhi.n	8009ce0 <btowc+0x8>
 8009d58:	9803      	ldr	r0, [sp, #12]
 8009d5a:	e7c3      	b.n	8009ce4 <btowc+0xc>
 8009d5c:	20000014 	.word	0x20000014
 8009d60:	0800f265 	.word	0x0800f265
 8009d64:	0800f5e4 	.word	0x0800f5e4
 8009d68:	20000078 	.word	0x20000078

08009d6c <fiprintf>:
 8009d6c:	b40e      	push	{r1, r2, r3}
 8009d6e:	b503      	push	{r0, r1, lr}
 8009d70:	4601      	mov	r1, r0
 8009d72:	ab03      	add	r3, sp, #12
 8009d74:	4805      	ldr	r0, [pc, #20]	; (8009d8c <fiprintf+0x20>)
 8009d76:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d7a:	6800      	ldr	r0, [r0, #0]
 8009d7c:	9301      	str	r3, [sp, #4]
 8009d7e:	f7ff f849 	bl	8008e14 <_vfiprintf_r>
 8009d82:	b002      	add	sp, #8
 8009d84:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d88:	b003      	add	sp, #12
 8009d8a:	4770      	bx	lr
 8009d8c:	20000014 	.word	0x20000014

08009d90 <__ascii_mbtowc>:
 8009d90:	b082      	sub	sp, #8
 8009d92:	b901      	cbnz	r1, 8009d96 <__ascii_mbtowc+0x6>
 8009d94:	a901      	add	r1, sp, #4
 8009d96:	b142      	cbz	r2, 8009daa <__ascii_mbtowc+0x1a>
 8009d98:	b14b      	cbz	r3, 8009dae <__ascii_mbtowc+0x1e>
 8009d9a:	7813      	ldrb	r3, [r2, #0]
 8009d9c:	600b      	str	r3, [r1, #0]
 8009d9e:	7812      	ldrb	r2, [r2, #0]
 8009da0:	1e10      	subs	r0, r2, #0
 8009da2:	bf18      	it	ne
 8009da4:	2001      	movne	r0, #1
 8009da6:	b002      	add	sp, #8
 8009da8:	4770      	bx	lr
 8009daa:	4610      	mov	r0, r2
 8009dac:	e7fb      	b.n	8009da6 <__ascii_mbtowc+0x16>
 8009dae:	f06f 0001 	mvn.w	r0, #1
 8009db2:	e7f8      	b.n	8009da6 <__ascii_mbtowc+0x16>

08009db4 <memmove>:
 8009db4:	4288      	cmp	r0, r1
 8009db6:	b510      	push	{r4, lr}
 8009db8:	eb01 0402 	add.w	r4, r1, r2
 8009dbc:	d902      	bls.n	8009dc4 <memmove+0x10>
 8009dbe:	4284      	cmp	r4, r0
 8009dc0:	4623      	mov	r3, r4
 8009dc2:	d807      	bhi.n	8009dd4 <memmove+0x20>
 8009dc4:	1e43      	subs	r3, r0, #1
 8009dc6:	42a1      	cmp	r1, r4
 8009dc8:	d008      	beq.n	8009ddc <memmove+0x28>
 8009dca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009dce:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009dd2:	e7f8      	b.n	8009dc6 <memmove+0x12>
 8009dd4:	4402      	add	r2, r0
 8009dd6:	4601      	mov	r1, r0
 8009dd8:	428a      	cmp	r2, r1
 8009dda:	d100      	bne.n	8009dde <memmove+0x2a>
 8009ddc:	bd10      	pop	{r4, pc}
 8009dde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009de2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009de6:	e7f7      	b.n	8009dd8 <memmove+0x24>

08009de8 <_realloc_r>:
 8009de8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dec:	4680      	mov	r8, r0
 8009dee:	4614      	mov	r4, r2
 8009df0:	460e      	mov	r6, r1
 8009df2:	b921      	cbnz	r1, 8009dfe <_realloc_r+0x16>
 8009df4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009df8:	4611      	mov	r1, r2
 8009dfa:	f7fc beb1 	b.w	8006b60 <_malloc_r>
 8009dfe:	b92a      	cbnz	r2, 8009e0c <_realloc_r+0x24>
 8009e00:	f7fc fe42 	bl	8006a88 <_free_r>
 8009e04:	4625      	mov	r5, r4
 8009e06:	4628      	mov	r0, r5
 8009e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e0c:	f000 f88a 	bl	8009f24 <_malloc_usable_size_r>
 8009e10:	4284      	cmp	r4, r0
 8009e12:	4607      	mov	r7, r0
 8009e14:	d802      	bhi.n	8009e1c <_realloc_r+0x34>
 8009e16:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009e1a:	d812      	bhi.n	8009e42 <_realloc_r+0x5a>
 8009e1c:	4621      	mov	r1, r4
 8009e1e:	4640      	mov	r0, r8
 8009e20:	f7fc fe9e 	bl	8006b60 <_malloc_r>
 8009e24:	4605      	mov	r5, r0
 8009e26:	2800      	cmp	r0, #0
 8009e28:	d0ed      	beq.n	8009e06 <_realloc_r+0x1e>
 8009e2a:	42bc      	cmp	r4, r7
 8009e2c:	4622      	mov	r2, r4
 8009e2e:	4631      	mov	r1, r6
 8009e30:	bf28      	it	cs
 8009e32:	463a      	movcs	r2, r7
 8009e34:	f7fc fe12 	bl	8006a5c <memcpy>
 8009e38:	4631      	mov	r1, r6
 8009e3a:	4640      	mov	r0, r8
 8009e3c:	f7fc fe24 	bl	8006a88 <_free_r>
 8009e40:	e7e1      	b.n	8009e06 <_realloc_r+0x1e>
 8009e42:	4635      	mov	r5, r6
 8009e44:	e7df      	b.n	8009e06 <_realloc_r+0x1e>

08009e46 <__ssputs_r>:
 8009e46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e4a:	688e      	ldr	r6, [r1, #8]
 8009e4c:	429e      	cmp	r6, r3
 8009e4e:	4682      	mov	sl, r0
 8009e50:	460c      	mov	r4, r1
 8009e52:	4690      	mov	r8, r2
 8009e54:	461f      	mov	r7, r3
 8009e56:	d838      	bhi.n	8009eca <__ssputs_r+0x84>
 8009e58:	898a      	ldrh	r2, [r1, #12]
 8009e5a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009e5e:	d032      	beq.n	8009ec6 <__ssputs_r+0x80>
 8009e60:	6825      	ldr	r5, [r4, #0]
 8009e62:	6909      	ldr	r1, [r1, #16]
 8009e64:	eba5 0901 	sub.w	r9, r5, r1
 8009e68:	6965      	ldr	r5, [r4, #20]
 8009e6a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009e6e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009e72:	3301      	adds	r3, #1
 8009e74:	444b      	add	r3, r9
 8009e76:	106d      	asrs	r5, r5, #1
 8009e78:	429d      	cmp	r5, r3
 8009e7a:	bf38      	it	cc
 8009e7c:	461d      	movcc	r5, r3
 8009e7e:	0553      	lsls	r3, r2, #21
 8009e80:	d531      	bpl.n	8009ee6 <__ssputs_r+0xa0>
 8009e82:	4629      	mov	r1, r5
 8009e84:	f7fc fe6c 	bl	8006b60 <_malloc_r>
 8009e88:	4606      	mov	r6, r0
 8009e8a:	b950      	cbnz	r0, 8009ea2 <__ssputs_r+0x5c>
 8009e8c:	230c      	movs	r3, #12
 8009e8e:	f8ca 3000 	str.w	r3, [sl]
 8009e92:	89a3      	ldrh	r3, [r4, #12]
 8009e94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e98:	81a3      	strh	r3, [r4, #12]
 8009e9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ea2:	6921      	ldr	r1, [r4, #16]
 8009ea4:	464a      	mov	r2, r9
 8009ea6:	f7fc fdd9 	bl	8006a5c <memcpy>
 8009eaa:	89a3      	ldrh	r3, [r4, #12]
 8009eac:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009eb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009eb4:	81a3      	strh	r3, [r4, #12]
 8009eb6:	6126      	str	r6, [r4, #16]
 8009eb8:	6165      	str	r5, [r4, #20]
 8009eba:	444e      	add	r6, r9
 8009ebc:	eba5 0509 	sub.w	r5, r5, r9
 8009ec0:	6026      	str	r6, [r4, #0]
 8009ec2:	60a5      	str	r5, [r4, #8]
 8009ec4:	463e      	mov	r6, r7
 8009ec6:	42be      	cmp	r6, r7
 8009ec8:	d900      	bls.n	8009ecc <__ssputs_r+0x86>
 8009eca:	463e      	mov	r6, r7
 8009ecc:	6820      	ldr	r0, [r4, #0]
 8009ece:	4632      	mov	r2, r6
 8009ed0:	4641      	mov	r1, r8
 8009ed2:	f7ff ff6f 	bl	8009db4 <memmove>
 8009ed6:	68a3      	ldr	r3, [r4, #8]
 8009ed8:	1b9b      	subs	r3, r3, r6
 8009eda:	60a3      	str	r3, [r4, #8]
 8009edc:	6823      	ldr	r3, [r4, #0]
 8009ede:	4433      	add	r3, r6
 8009ee0:	6023      	str	r3, [r4, #0]
 8009ee2:	2000      	movs	r0, #0
 8009ee4:	e7db      	b.n	8009e9e <__ssputs_r+0x58>
 8009ee6:	462a      	mov	r2, r5
 8009ee8:	f7ff ff7e 	bl	8009de8 <_realloc_r>
 8009eec:	4606      	mov	r6, r0
 8009eee:	2800      	cmp	r0, #0
 8009ef0:	d1e1      	bne.n	8009eb6 <__ssputs_r+0x70>
 8009ef2:	6921      	ldr	r1, [r4, #16]
 8009ef4:	4650      	mov	r0, sl
 8009ef6:	f7fc fdc7 	bl	8006a88 <_free_r>
 8009efa:	e7c7      	b.n	8009e8c <__ssputs_r+0x46>

08009efc <__ascii_wctomb>:
 8009efc:	b149      	cbz	r1, 8009f12 <__ascii_wctomb+0x16>
 8009efe:	2aff      	cmp	r2, #255	; 0xff
 8009f00:	bf85      	ittet	hi
 8009f02:	238a      	movhi	r3, #138	; 0x8a
 8009f04:	6003      	strhi	r3, [r0, #0]
 8009f06:	700a      	strbls	r2, [r1, #0]
 8009f08:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8009f0c:	bf98      	it	ls
 8009f0e:	2001      	movls	r0, #1
 8009f10:	4770      	bx	lr
 8009f12:	4608      	mov	r0, r1
 8009f14:	4770      	bx	lr

08009f16 <abort>:
 8009f16:	b508      	push	{r3, lr}
 8009f18:	2006      	movs	r0, #6
 8009f1a:	f000 f833 	bl	8009f84 <raise>
 8009f1e:	2001      	movs	r0, #1
 8009f20:	f7f7 fed4 	bl	8001ccc <_exit>

08009f24 <_malloc_usable_size_r>:
 8009f24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f28:	1f18      	subs	r0, r3, #4
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	bfbc      	itt	lt
 8009f2e:	580b      	ldrlt	r3, [r1, r0]
 8009f30:	18c0      	addlt	r0, r0, r3
 8009f32:	4770      	bx	lr

08009f34 <_raise_r>:
 8009f34:	291f      	cmp	r1, #31
 8009f36:	b538      	push	{r3, r4, r5, lr}
 8009f38:	4604      	mov	r4, r0
 8009f3a:	460d      	mov	r5, r1
 8009f3c:	d904      	bls.n	8009f48 <_raise_r+0x14>
 8009f3e:	2316      	movs	r3, #22
 8009f40:	6003      	str	r3, [r0, #0]
 8009f42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009f46:	bd38      	pop	{r3, r4, r5, pc}
 8009f48:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009f4a:	b112      	cbz	r2, 8009f52 <_raise_r+0x1e>
 8009f4c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009f50:	b94b      	cbnz	r3, 8009f66 <_raise_r+0x32>
 8009f52:	4620      	mov	r0, r4
 8009f54:	f000 f830 	bl	8009fb8 <_getpid_r>
 8009f58:	462a      	mov	r2, r5
 8009f5a:	4601      	mov	r1, r0
 8009f5c:	4620      	mov	r0, r4
 8009f5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f62:	f000 b817 	b.w	8009f94 <_kill_r>
 8009f66:	2b01      	cmp	r3, #1
 8009f68:	d00a      	beq.n	8009f80 <_raise_r+0x4c>
 8009f6a:	1c59      	adds	r1, r3, #1
 8009f6c:	d103      	bne.n	8009f76 <_raise_r+0x42>
 8009f6e:	2316      	movs	r3, #22
 8009f70:	6003      	str	r3, [r0, #0]
 8009f72:	2001      	movs	r0, #1
 8009f74:	e7e7      	b.n	8009f46 <_raise_r+0x12>
 8009f76:	2400      	movs	r4, #0
 8009f78:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009f7c:	4628      	mov	r0, r5
 8009f7e:	4798      	blx	r3
 8009f80:	2000      	movs	r0, #0
 8009f82:	e7e0      	b.n	8009f46 <_raise_r+0x12>

08009f84 <raise>:
 8009f84:	4b02      	ldr	r3, [pc, #8]	; (8009f90 <raise+0xc>)
 8009f86:	4601      	mov	r1, r0
 8009f88:	6818      	ldr	r0, [r3, #0]
 8009f8a:	f7ff bfd3 	b.w	8009f34 <_raise_r>
 8009f8e:	bf00      	nop
 8009f90:	20000014 	.word	0x20000014

08009f94 <_kill_r>:
 8009f94:	b538      	push	{r3, r4, r5, lr}
 8009f96:	4d07      	ldr	r5, [pc, #28]	; (8009fb4 <_kill_r+0x20>)
 8009f98:	2300      	movs	r3, #0
 8009f9a:	4604      	mov	r4, r0
 8009f9c:	4608      	mov	r0, r1
 8009f9e:	4611      	mov	r1, r2
 8009fa0:	602b      	str	r3, [r5, #0]
 8009fa2:	f7f7 fe83 	bl	8001cac <_kill>
 8009fa6:	1c43      	adds	r3, r0, #1
 8009fa8:	d102      	bne.n	8009fb0 <_kill_r+0x1c>
 8009faa:	682b      	ldr	r3, [r5, #0]
 8009fac:	b103      	cbz	r3, 8009fb0 <_kill_r+0x1c>
 8009fae:	6023      	str	r3, [r4, #0]
 8009fb0:	bd38      	pop	{r3, r4, r5, pc}
 8009fb2:	bf00      	nop
 8009fb4:	20000360 	.word	0x20000360

08009fb8 <_getpid_r>:
 8009fb8:	f7f7 be70 	b.w	8001c9c <_getpid>
 8009fbc:	0000      	movs	r0, r0
	...

08009fc0 <exp>:
 8009fc0:	b538      	push	{r3, r4, r5, lr}
 8009fc2:	ed2d 8b02 	vpush	{d8}
 8009fc6:	ec55 4b10 	vmov	r4, r5, d0
 8009fca:	f000 f8b1 	bl	800a130 <__ieee754_exp>
 8009fce:	eeb0 8a40 	vmov.f32	s16, s0
 8009fd2:	eef0 8a60 	vmov.f32	s17, s1
 8009fd6:	ec45 4b10 	vmov	d0, r4, r5
 8009fda:	f001 f846 	bl	800b06a <finite>
 8009fde:	b168      	cbz	r0, 8009ffc <exp+0x3c>
 8009fe0:	a317      	add	r3, pc, #92	; (adr r3, 800a040 <exp+0x80>)
 8009fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fe6:	4620      	mov	r0, r4
 8009fe8:	4629      	mov	r1, r5
 8009fea:	f7f6 fd95 	bl	8000b18 <__aeabi_dcmpgt>
 8009fee:	b160      	cbz	r0, 800a00a <exp+0x4a>
 8009ff0:	f7fc fada 	bl	80065a8 <__errno>
 8009ff4:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 800a030 <exp+0x70>
 8009ff8:	2322      	movs	r3, #34	; 0x22
 8009ffa:	6003      	str	r3, [r0, #0]
 8009ffc:	eeb0 0a48 	vmov.f32	s0, s16
 800a000:	eef0 0a68 	vmov.f32	s1, s17
 800a004:	ecbd 8b02 	vpop	{d8}
 800a008:	bd38      	pop	{r3, r4, r5, pc}
 800a00a:	a30f      	add	r3, pc, #60	; (adr r3, 800a048 <exp+0x88>)
 800a00c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a010:	4620      	mov	r0, r4
 800a012:	4629      	mov	r1, r5
 800a014:	f7f6 fd62 	bl	8000adc <__aeabi_dcmplt>
 800a018:	2800      	cmp	r0, #0
 800a01a:	d0ef      	beq.n	8009ffc <exp+0x3c>
 800a01c:	f7fc fac4 	bl	80065a8 <__errno>
 800a020:	2322      	movs	r3, #34	; 0x22
 800a022:	ed9f 8b05 	vldr	d8, [pc, #20]	; 800a038 <exp+0x78>
 800a026:	6003      	str	r3, [r0, #0]
 800a028:	e7e8      	b.n	8009ffc <exp+0x3c>
 800a02a:	bf00      	nop
 800a02c:	f3af 8000 	nop.w
 800a030:	00000000 	.word	0x00000000
 800a034:	7ff00000 	.word	0x7ff00000
	...
 800a040:	fefa39ef 	.word	0xfefa39ef
 800a044:	40862e42 	.word	0x40862e42
 800a048:	d52d3051 	.word	0xd52d3051
 800a04c:	c0874910 	.word	0xc0874910

0800a050 <pow>:
 800a050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a052:	ed2d 8b02 	vpush	{d8}
 800a056:	eeb0 8a40 	vmov.f32	s16, s0
 800a05a:	eef0 8a60 	vmov.f32	s17, s1
 800a05e:	ec55 4b11 	vmov	r4, r5, d1
 800a062:	f000 f9e9 	bl	800a438 <__ieee754_pow>
 800a066:	4622      	mov	r2, r4
 800a068:	462b      	mov	r3, r5
 800a06a:	4620      	mov	r0, r4
 800a06c:	4629      	mov	r1, r5
 800a06e:	ec57 6b10 	vmov	r6, r7, d0
 800a072:	f7f6 fd5b 	bl	8000b2c <__aeabi_dcmpun>
 800a076:	2800      	cmp	r0, #0
 800a078:	d13b      	bne.n	800a0f2 <pow+0xa2>
 800a07a:	ec51 0b18 	vmov	r0, r1, d8
 800a07e:	2200      	movs	r2, #0
 800a080:	2300      	movs	r3, #0
 800a082:	f7f6 fd21 	bl	8000ac8 <__aeabi_dcmpeq>
 800a086:	b1b8      	cbz	r0, 800a0b8 <pow+0x68>
 800a088:	2200      	movs	r2, #0
 800a08a:	2300      	movs	r3, #0
 800a08c:	4620      	mov	r0, r4
 800a08e:	4629      	mov	r1, r5
 800a090:	f7f6 fd1a 	bl	8000ac8 <__aeabi_dcmpeq>
 800a094:	2800      	cmp	r0, #0
 800a096:	d146      	bne.n	800a126 <pow+0xd6>
 800a098:	ec45 4b10 	vmov	d0, r4, r5
 800a09c:	f000 ffe5 	bl	800b06a <finite>
 800a0a0:	b338      	cbz	r0, 800a0f2 <pow+0xa2>
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	4620      	mov	r0, r4
 800a0a8:	4629      	mov	r1, r5
 800a0aa:	f7f6 fd17 	bl	8000adc <__aeabi_dcmplt>
 800a0ae:	b300      	cbz	r0, 800a0f2 <pow+0xa2>
 800a0b0:	f7fc fa7a 	bl	80065a8 <__errno>
 800a0b4:	2322      	movs	r3, #34	; 0x22
 800a0b6:	e01b      	b.n	800a0f0 <pow+0xa0>
 800a0b8:	ec47 6b10 	vmov	d0, r6, r7
 800a0bc:	f000 ffd5 	bl	800b06a <finite>
 800a0c0:	b9e0      	cbnz	r0, 800a0fc <pow+0xac>
 800a0c2:	eeb0 0a48 	vmov.f32	s0, s16
 800a0c6:	eef0 0a68 	vmov.f32	s1, s17
 800a0ca:	f000 ffce 	bl	800b06a <finite>
 800a0ce:	b1a8      	cbz	r0, 800a0fc <pow+0xac>
 800a0d0:	ec45 4b10 	vmov	d0, r4, r5
 800a0d4:	f000 ffc9 	bl	800b06a <finite>
 800a0d8:	b180      	cbz	r0, 800a0fc <pow+0xac>
 800a0da:	4632      	mov	r2, r6
 800a0dc:	463b      	mov	r3, r7
 800a0de:	4630      	mov	r0, r6
 800a0e0:	4639      	mov	r1, r7
 800a0e2:	f7f6 fd23 	bl	8000b2c <__aeabi_dcmpun>
 800a0e6:	2800      	cmp	r0, #0
 800a0e8:	d0e2      	beq.n	800a0b0 <pow+0x60>
 800a0ea:	f7fc fa5d 	bl	80065a8 <__errno>
 800a0ee:	2321      	movs	r3, #33	; 0x21
 800a0f0:	6003      	str	r3, [r0, #0]
 800a0f2:	ecbd 8b02 	vpop	{d8}
 800a0f6:	ec47 6b10 	vmov	d0, r6, r7
 800a0fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	2300      	movs	r3, #0
 800a100:	4630      	mov	r0, r6
 800a102:	4639      	mov	r1, r7
 800a104:	f7f6 fce0 	bl	8000ac8 <__aeabi_dcmpeq>
 800a108:	2800      	cmp	r0, #0
 800a10a:	d0f2      	beq.n	800a0f2 <pow+0xa2>
 800a10c:	eeb0 0a48 	vmov.f32	s0, s16
 800a110:	eef0 0a68 	vmov.f32	s1, s17
 800a114:	f000 ffa9 	bl	800b06a <finite>
 800a118:	2800      	cmp	r0, #0
 800a11a:	d0ea      	beq.n	800a0f2 <pow+0xa2>
 800a11c:	ec45 4b10 	vmov	d0, r4, r5
 800a120:	f000 ffa3 	bl	800b06a <finite>
 800a124:	e7c3      	b.n	800a0ae <pow+0x5e>
 800a126:	4f01      	ldr	r7, [pc, #4]	; (800a12c <pow+0xdc>)
 800a128:	2600      	movs	r6, #0
 800a12a:	e7e2      	b.n	800a0f2 <pow+0xa2>
 800a12c:	3ff00000 	.word	0x3ff00000

0800a130 <__ieee754_exp>:
 800a130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a134:	ec55 4b10 	vmov	r4, r5, d0
 800a138:	49b5      	ldr	r1, [pc, #724]	; (800a410 <__ieee754_exp+0x2e0>)
 800a13a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a13e:	428b      	cmp	r3, r1
 800a140:	ed2d 8b04 	vpush	{d8-d9}
 800a144:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 800a148:	d93d      	bls.n	800a1c6 <__ieee754_exp+0x96>
 800a14a:	49b2      	ldr	r1, [pc, #712]	; (800a414 <__ieee754_exp+0x2e4>)
 800a14c:	428b      	cmp	r3, r1
 800a14e:	d918      	bls.n	800a182 <__ieee754_exp+0x52>
 800a150:	ee10 3a10 	vmov	r3, s0
 800a154:	f3c5 0213 	ubfx	r2, r5, #0, #20
 800a158:	4313      	orrs	r3, r2
 800a15a:	d009      	beq.n	800a170 <__ieee754_exp+0x40>
 800a15c:	ee10 2a10 	vmov	r2, s0
 800a160:	462b      	mov	r3, r5
 800a162:	4620      	mov	r0, r4
 800a164:	4629      	mov	r1, r5
 800a166:	f7f6 f891 	bl	800028c <__adddf3>
 800a16a:	4604      	mov	r4, r0
 800a16c:	460d      	mov	r5, r1
 800a16e:	e002      	b.n	800a176 <__ieee754_exp+0x46>
 800a170:	b10e      	cbz	r6, 800a176 <__ieee754_exp+0x46>
 800a172:	2400      	movs	r4, #0
 800a174:	2500      	movs	r5, #0
 800a176:	ecbd 8b04 	vpop	{d8-d9}
 800a17a:	ec45 4b10 	vmov	d0, r4, r5
 800a17e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a182:	a38d      	add	r3, pc, #564	; (adr r3, 800a3b8 <__ieee754_exp+0x288>)
 800a184:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a188:	ee10 0a10 	vmov	r0, s0
 800a18c:	4629      	mov	r1, r5
 800a18e:	f7f6 fcc3 	bl	8000b18 <__aeabi_dcmpgt>
 800a192:	4607      	mov	r7, r0
 800a194:	b130      	cbz	r0, 800a1a4 <__ieee754_exp+0x74>
 800a196:	ecbd 8b04 	vpop	{d8-d9}
 800a19a:	2000      	movs	r0, #0
 800a19c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1a0:	f000 bf51 	b.w	800b046 <__math_oflow>
 800a1a4:	a386      	add	r3, pc, #536	; (adr r3, 800a3c0 <__ieee754_exp+0x290>)
 800a1a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1aa:	4620      	mov	r0, r4
 800a1ac:	4629      	mov	r1, r5
 800a1ae:	f7f6 fc95 	bl	8000adc <__aeabi_dcmplt>
 800a1b2:	2800      	cmp	r0, #0
 800a1b4:	f000 808b 	beq.w	800a2ce <__ieee754_exp+0x19e>
 800a1b8:	ecbd 8b04 	vpop	{d8-d9}
 800a1bc:	4638      	mov	r0, r7
 800a1be:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1c2:	f000 bf37 	b.w	800b034 <__math_uflow>
 800a1c6:	4a94      	ldr	r2, [pc, #592]	; (800a418 <__ieee754_exp+0x2e8>)
 800a1c8:	4293      	cmp	r3, r2
 800a1ca:	f240 80ac 	bls.w	800a326 <__ieee754_exp+0x1f6>
 800a1ce:	4a93      	ldr	r2, [pc, #588]	; (800a41c <__ieee754_exp+0x2ec>)
 800a1d0:	4293      	cmp	r3, r2
 800a1d2:	d87c      	bhi.n	800a2ce <__ieee754_exp+0x19e>
 800a1d4:	4b92      	ldr	r3, [pc, #584]	; (800a420 <__ieee754_exp+0x2f0>)
 800a1d6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a1da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1de:	ee10 0a10 	vmov	r0, s0
 800a1e2:	4629      	mov	r1, r5
 800a1e4:	f7f6 f850 	bl	8000288 <__aeabi_dsub>
 800a1e8:	4b8e      	ldr	r3, [pc, #568]	; (800a424 <__ieee754_exp+0x2f4>)
 800a1ea:	00f7      	lsls	r7, r6, #3
 800a1ec:	443b      	add	r3, r7
 800a1ee:	ed93 7b00 	vldr	d7, [r3]
 800a1f2:	f1c6 0a01 	rsb	sl, r6, #1
 800a1f6:	4680      	mov	r8, r0
 800a1f8:	4689      	mov	r9, r1
 800a1fa:	ebaa 0a06 	sub.w	sl, sl, r6
 800a1fe:	eeb0 8a47 	vmov.f32	s16, s14
 800a202:	eef0 8a67 	vmov.f32	s17, s15
 800a206:	ec53 2b18 	vmov	r2, r3, d8
 800a20a:	4640      	mov	r0, r8
 800a20c:	4649      	mov	r1, r9
 800a20e:	f7f6 f83b 	bl	8000288 <__aeabi_dsub>
 800a212:	4604      	mov	r4, r0
 800a214:	460d      	mov	r5, r1
 800a216:	4622      	mov	r2, r4
 800a218:	462b      	mov	r3, r5
 800a21a:	4620      	mov	r0, r4
 800a21c:	4629      	mov	r1, r5
 800a21e:	f7f6 f9eb 	bl	80005f8 <__aeabi_dmul>
 800a222:	a369      	add	r3, pc, #420	; (adr r3, 800a3c8 <__ieee754_exp+0x298>)
 800a224:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a228:	4606      	mov	r6, r0
 800a22a:	460f      	mov	r7, r1
 800a22c:	f7f6 f9e4 	bl	80005f8 <__aeabi_dmul>
 800a230:	a367      	add	r3, pc, #412	; (adr r3, 800a3d0 <__ieee754_exp+0x2a0>)
 800a232:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a236:	f7f6 f827 	bl	8000288 <__aeabi_dsub>
 800a23a:	4632      	mov	r2, r6
 800a23c:	463b      	mov	r3, r7
 800a23e:	f7f6 f9db 	bl	80005f8 <__aeabi_dmul>
 800a242:	a365      	add	r3, pc, #404	; (adr r3, 800a3d8 <__ieee754_exp+0x2a8>)
 800a244:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a248:	f7f6 f820 	bl	800028c <__adddf3>
 800a24c:	4632      	mov	r2, r6
 800a24e:	463b      	mov	r3, r7
 800a250:	f7f6 f9d2 	bl	80005f8 <__aeabi_dmul>
 800a254:	a362      	add	r3, pc, #392	; (adr r3, 800a3e0 <__ieee754_exp+0x2b0>)
 800a256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a25a:	f7f6 f815 	bl	8000288 <__aeabi_dsub>
 800a25e:	4632      	mov	r2, r6
 800a260:	463b      	mov	r3, r7
 800a262:	f7f6 f9c9 	bl	80005f8 <__aeabi_dmul>
 800a266:	a360      	add	r3, pc, #384	; (adr r3, 800a3e8 <__ieee754_exp+0x2b8>)
 800a268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a26c:	f7f6 f80e 	bl	800028c <__adddf3>
 800a270:	4632      	mov	r2, r6
 800a272:	463b      	mov	r3, r7
 800a274:	f7f6 f9c0 	bl	80005f8 <__aeabi_dmul>
 800a278:	4602      	mov	r2, r0
 800a27a:	460b      	mov	r3, r1
 800a27c:	4620      	mov	r0, r4
 800a27e:	4629      	mov	r1, r5
 800a280:	f7f6 f802 	bl	8000288 <__aeabi_dsub>
 800a284:	4602      	mov	r2, r0
 800a286:	460b      	mov	r3, r1
 800a288:	4606      	mov	r6, r0
 800a28a:	460f      	mov	r7, r1
 800a28c:	4620      	mov	r0, r4
 800a28e:	4629      	mov	r1, r5
 800a290:	f7f6 f9b2 	bl	80005f8 <__aeabi_dmul>
 800a294:	ec41 0b19 	vmov	d9, r0, r1
 800a298:	f1ba 0f00 	cmp.w	sl, #0
 800a29c:	d15d      	bne.n	800a35a <__ieee754_exp+0x22a>
 800a29e:	2200      	movs	r2, #0
 800a2a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a2a4:	4630      	mov	r0, r6
 800a2a6:	4639      	mov	r1, r7
 800a2a8:	f7f5 ffee 	bl	8000288 <__aeabi_dsub>
 800a2ac:	4602      	mov	r2, r0
 800a2ae:	460b      	mov	r3, r1
 800a2b0:	ec51 0b19 	vmov	r0, r1, d9
 800a2b4:	f7f6 faca 	bl	800084c <__aeabi_ddiv>
 800a2b8:	4622      	mov	r2, r4
 800a2ba:	462b      	mov	r3, r5
 800a2bc:	f7f5 ffe4 	bl	8000288 <__aeabi_dsub>
 800a2c0:	4602      	mov	r2, r0
 800a2c2:	460b      	mov	r3, r1
 800a2c4:	2000      	movs	r0, #0
 800a2c6:	4958      	ldr	r1, [pc, #352]	; (800a428 <__ieee754_exp+0x2f8>)
 800a2c8:	f7f5 ffde 	bl	8000288 <__aeabi_dsub>
 800a2cc:	e74d      	b.n	800a16a <__ieee754_exp+0x3a>
 800a2ce:	4857      	ldr	r0, [pc, #348]	; (800a42c <__ieee754_exp+0x2fc>)
 800a2d0:	a347      	add	r3, pc, #284	; (adr r3, 800a3f0 <__ieee754_exp+0x2c0>)
 800a2d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2d6:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800a2da:	4629      	mov	r1, r5
 800a2dc:	4620      	mov	r0, r4
 800a2de:	f7f6 f98b 	bl	80005f8 <__aeabi_dmul>
 800a2e2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a2e6:	f7f5 ffd1 	bl	800028c <__adddf3>
 800a2ea:	f7f6 fc35 	bl	8000b58 <__aeabi_d2iz>
 800a2ee:	4682      	mov	sl, r0
 800a2f0:	f7f6 f918 	bl	8000524 <__aeabi_i2d>
 800a2f4:	a340      	add	r3, pc, #256	; (adr r3, 800a3f8 <__ieee754_exp+0x2c8>)
 800a2f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2fa:	4606      	mov	r6, r0
 800a2fc:	460f      	mov	r7, r1
 800a2fe:	f7f6 f97b 	bl	80005f8 <__aeabi_dmul>
 800a302:	4602      	mov	r2, r0
 800a304:	460b      	mov	r3, r1
 800a306:	4620      	mov	r0, r4
 800a308:	4629      	mov	r1, r5
 800a30a:	f7f5 ffbd 	bl	8000288 <__aeabi_dsub>
 800a30e:	a33c      	add	r3, pc, #240	; (adr r3, 800a400 <__ieee754_exp+0x2d0>)
 800a310:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a314:	4680      	mov	r8, r0
 800a316:	4689      	mov	r9, r1
 800a318:	4630      	mov	r0, r6
 800a31a:	4639      	mov	r1, r7
 800a31c:	f7f6 f96c 	bl	80005f8 <__aeabi_dmul>
 800a320:	ec41 0b18 	vmov	d8, r0, r1
 800a324:	e76f      	b.n	800a206 <__ieee754_exp+0xd6>
 800a326:	4a42      	ldr	r2, [pc, #264]	; (800a430 <__ieee754_exp+0x300>)
 800a328:	4293      	cmp	r3, r2
 800a32a:	d811      	bhi.n	800a350 <__ieee754_exp+0x220>
 800a32c:	a336      	add	r3, pc, #216	; (adr r3, 800a408 <__ieee754_exp+0x2d8>)
 800a32e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a332:	ee10 0a10 	vmov	r0, s0
 800a336:	4629      	mov	r1, r5
 800a338:	f7f5 ffa8 	bl	800028c <__adddf3>
 800a33c:	4b3a      	ldr	r3, [pc, #232]	; (800a428 <__ieee754_exp+0x2f8>)
 800a33e:	2200      	movs	r2, #0
 800a340:	f7f6 fbea 	bl	8000b18 <__aeabi_dcmpgt>
 800a344:	b138      	cbz	r0, 800a356 <__ieee754_exp+0x226>
 800a346:	4b38      	ldr	r3, [pc, #224]	; (800a428 <__ieee754_exp+0x2f8>)
 800a348:	2200      	movs	r2, #0
 800a34a:	4620      	mov	r0, r4
 800a34c:	4629      	mov	r1, r5
 800a34e:	e70a      	b.n	800a166 <__ieee754_exp+0x36>
 800a350:	f04f 0a00 	mov.w	sl, #0
 800a354:	e75f      	b.n	800a216 <__ieee754_exp+0xe6>
 800a356:	4682      	mov	sl, r0
 800a358:	e75d      	b.n	800a216 <__ieee754_exp+0xe6>
 800a35a:	4632      	mov	r2, r6
 800a35c:	463b      	mov	r3, r7
 800a35e:	2000      	movs	r0, #0
 800a360:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800a364:	f7f5 ff90 	bl	8000288 <__aeabi_dsub>
 800a368:	4602      	mov	r2, r0
 800a36a:	460b      	mov	r3, r1
 800a36c:	ec51 0b19 	vmov	r0, r1, d9
 800a370:	f7f6 fa6c 	bl	800084c <__aeabi_ddiv>
 800a374:	4602      	mov	r2, r0
 800a376:	460b      	mov	r3, r1
 800a378:	ec51 0b18 	vmov	r0, r1, d8
 800a37c:	f7f5 ff84 	bl	8000288 <__aeabi_dsub>
 800a380:	4642      	mov	r2, r8
 800a382:	464b      	mov	r3, r9
 800a384:	f7f5 ff80 	bl	8000288 <__aeabi_dsub>
 800a388:	4602      	mov	r2, r0
 800a38a:	460b      	mov	r3, r1
 800a38c:	2000      	movs	r0, #0
 800a38e:	4926      	ldr	r1, [pc, #152]	; (800a428 <__ieee754_exp+0x2f8>)
 800a390:	f7f5 ff7a 	bl	8000288 <__aeabi_dsub>
 800a394:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 800a398:	4592      	cmp	sl, r2
 800a39a:	db02      	blt.n	800a3a2 <__ieee754_exp+0x272>
 800a39c:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800a3a0:	e6e3      	b.n	800a16a <__ieee754_exp+0x3a>
 800a3a2:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 800a3a6:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 800a3b0:	f7f6 f922 	bl	80005f8 <__aeabi_dmul>
 800a3b4:	e6d9      	b.n	800a16a <__ieee754_exp+0x3a>
 800a3b6:	bf00      	nop
 800a3b8:	fefa39ef 	.word	0xfefa39ef
 800a3bc:	40862e42 	.word	0x40862e42
 800a3c0:	d52d3051 	.word	0xd52d3051
 800a3c4:	c0874910 	.word	0xc0874910
 800a3c8:	72bea4d0 	.word	0x72bea4d0
 800a3cc:	3e663769 	.word	0x3e663769
 800a3d0:	c5d26bf1 	.word	0xc5d26bf1
 800a3d4:	3ebbbd41 	.word	0x3ebbbd41
 800a3d8:	af25de2c 	.word	0xaf25de2c
 800a3dc:	3f11566a 	.word	0x3f11566a
 800a3e0:	16bebd93 	.word	0x16bebd93
 800a3e4:	3f66c16c 	.word	0x3f66c16c
 800a3e8:	5555553e 	.word	0x5555553e
 800a3ec:	3fc55555 	.word	0x3fc55555
 800a3f0:	652b82fe 	.word	0x652b82fe
 800a3f4:	3ff71547 	.word	0x3ff71547
 800a3f8:	fee00000 	.word	0xfee00000
 800a3fc:	3fe62e42 	.word	0x3fe62e42
 800a400:	35793c76 	.word	0x35793c76
 800a404:	3dea39ef 	.word	0x3dea39ef
 800a408:	8800759c 	.word	0x8800759c
 800a40c:	7e37e43c 	.word	0x7e37e43c
 800a410:	40862e41 	.word	0x40862e41
 800a414:	7fefffff 	.word	0x7fefffff
 800a418:	3fd62e42 	.word	0x3fd62e42
 800a41c:	3ff0a2b1 	.word	0x3ff0a2b1
 800a420:	0800f760 	.word	0x0800f760
 800a424:	0800f770 	.word	0x0800f770
 800a428:	3ff00000 	.word	0x3ff00000
 800a42c:	0800f750 	.word	0x0800f750
 800a430:	3defffff 	.word	0x3defffff
 800a434:	00000000 	.word	0x00000000

0800a438 <__ieee754_pow>:
 800a438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a43c:	ed2d 8b06 	vpush	{d8-d10}
 800a440:	b089      	sub	sp, #36	; 0x24
 800a442:	ed8d 1b00 	vstr	d1, [sp]
 800a446:	e9dd 2900 	ldrd	r2, r9, [sp]
 800a44a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800a44e:	ea58 0102 	orrs.w	r1, r8, r2
 800a452:	ec57 6b10 	vmov	r6, r7, d0
 800a456:	d115      	bne.n	800a484 <__ieee754_pow+0x4c>
 800a458:	19b3      	adds	r3, r6, r6
 800a45a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800a45e:	4152      	adcs	r2, r2
 800a460:	4299      	cmp	r1, r3
 800a462:	4b89      	ldr	r3, [pc, #548]	; (800a688 <__ieee754_pow+0x250>)
 800a464:	4193      	sbcs	r3, r2
 800a466:	f080 84d2 	bcs.w	800ae0e <__ieee754_pow+0x9d6>
 800a46a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a46e:	4630      	mov	r0, r6
 800a470:	4639      	mov	r1, r7
 800a472:	f7f5 ff0b 	bl	800028c <__adddf3>
 800a476:	ec41 0b10 	vmov	d0, r0, r1
 800a47a:	b009      	add	sp, #36	; 0x24
 800a47c:	ecbd 8b06 	vpop	{d8-d10}
 800a480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a484:	4b81      	ldr	r3, [pc, #516]	; (800a68c <__ieee754_pow+0x254>)
 800a486:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800a48a:	429c      	cmp	r4, r3
 800a48c:	ee10 aa10 	vmov	sl, s0
 800a490:	463d      	mov	r5, r7
 800a492:	dc06      	bgt.n	800a4a2 <__ieee754_pow+0x6a>
 800a494:	d101      	bne.n	800a49a <__ieee754_pow+0x62>
 800a496:	2e00      	cmp	r6, #0
 800a498:	d1e7      	bne.n	800a46a <__ieee754_pow+0x32>
 800a49a:	4598      	cmp	r8, r3
 800a49c:	dc01      	bgt.n	800a4a2 <__ieee754_pow+0x6a>
 800a49e:	d10f      	bne.n	800a4c0 <__ieee754_pow+0x88>
 800a4a0:	b172      	cbz	r2, 800a4c0 <__ieee754_pow+0x88>
 800a4a2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800a4a6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800a4aa:	ea55 050a 	orrs.w	r5, r5, sl
 800a4ae:	d1dc      	bne.n	800a46a <__ieee754_pow+0x32>
 800a4b0:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a4b4:	18db      	adds	r3, r3, r3
 800a4b6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800a4ba:	4152      	adcs	r2, r2
 800a4bc:	429d      	cmp	r5, r3
 800a4be:	e7d0      	b.n	800a462 <__ieee754_pow+0x2a>
 800a4c0:	2d00      	cmp	r5, #0
 800a4c2:	da3b      	bge.n	800a53c <__ieee754_pow+0x104>
 800a4c4:	4b72      	ldr	r3, [pc, #456]	; (800a690 <__ieee754_pow+0x258>)
 800a4c6:	4598      	cmp	r8, r3
 800a4c8:	dc51      	bgt.n	800a56e <__ieee754_pow+0x136>
 800a4ca:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800a4ce:	4598      	cmp	r8, r3
 800a4d0:	f340 84ac 	ble.w	800ae2c <__ieee754_pow+0x9f4>
 800a4d4:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a4d8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a4dc:	2b14      	cmp	r3, #20
 800a4de:	dd0f      	ble.n	800a500 <__ieee754_pow+0xc8>
 800a4e0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800a4e4:	fa22 f103 	lsr.w	r1, r2, r3
 800a4e8:	fa01 f303 	lsl.w	r3, r1, r3
 800a4ec:	4293      	cmp	r3, r2
 800a4ee:	f040 849d 	bne.w	800ae2c <__ieee754_pow+0x9f4>
 800a4f2:	f001 0101 	and.w	r1, r1, #1
 800a4f6:	f1c1 0302 	rsb	r3, r1, #2
 800a4fa:	9304      	str	r3, [sp, #16]
 800a4fc:	b182      	cbz	r2, 800a520 <__ieee754_pow+0xe8>
 800a4fe:	e05f      	b.n	800a5c0 <__ieee754_pow+0x188>
 800a500:	2a00      	cmp	r2, #0
 800a502:	d15b      	bne.n	800a5bc <__ieee754_pow+0x184>
 800a504:	f1c3 0314 	rsb	r3, r3, #20
 800a508:	fa48 f103 	asr.w	r1, r8, r3
 800a50c:	fa01 f303 	lsl.w	r3, r1, r3
 800a510:	4543      	cmp	r3, r8
 800a512:	f040 8488 	bne.w	800ae26 <__ieee754_pow+0x9ee>
 800a516:	f001 0101 	and.w	r1, r1, #1
 800a51a:	f1c1 0302 	rsb	r3, r1, #2
 800a51e:	9304      	str	r3, [sp, #16]
 800a520:	4b5c      	ldr	r3, [pc, #368]	; (800a694 <__ieee754_pow+0x25c>)
 800a522:	4598      	cmp	r8, r3
 800a524:	d132      	bne.n	800a58c <__ieee754_pow+0x154>
 800a526:	f1b9 0f00 	cmp.w	r9, #0
 800a52a:	f280 8478 	bge.w	800ae1e <__ieee754_pow+0x9e6>
 800a52e:	4959      	ldr	r1, [pc, #356]	; (800a694 <__ieee754_pow+0x25c>)
 800a530:	4632      	mov	r2, r6
 800a532:	463b      	mov	r3, r7
 800a534:	2000      	movs	r0, #0
 800a536:	f7f6 f989 	bl	800084c <__aeabi_ddiv>
 800a53a:	e79c      	b.n	800a476 <__ieee754_pow+0x3e>
 800a53c:	2300      	movs	r3, #0
 800a53e:	9304      	str	r3, [sp, #16]
 800a540:	2a00      	cmp	r2, #0
 800a542:	d13d      	bne.n	800a5c0 <__ieee754_pow+0x188>
 800a544:	4b51      	ldr	r3, [pc, #324]	; (800a68c <__ieee754_pow+0x254>)
 800a546:	4598      	cmp	r8, r3
 800a548:	d1ea      	bne.n	800a520 <__ieee754_pow+0xe8>
 800a54a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800a54e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800a552:	ea53 030a 	orrs.w	r3, r3, sl
 800a556:	f000 845a 	beq.w	800ae0e <__ieee754_pow+0x9d6>
 800a55a:	4b4f      	ldr	r3, [pc, #316]	; (800a698 <__ieee754_pow+0x260>)
 800a55c:	429c      	cmp	r4, r3
 800a55e:	dd08      	ble.n	800a572 <__ieee754_pow+0x13a>
 800a560:	f1b9 0f00 	cmp.w	r9, #0
 800a564:	f2c0 8457 	blt.w	800ae16 <__ieee754_pow+0x9de>
 800a568:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a56c:	e783      	b.n	800a476 <__ieee754_pow+0x3e>
 800a56e:	2302      	movs	r3, #2
 800a570:	e7e5      	b.n	800a53e <__ieee754_pow+0x106>
 800a572:	f1b9 0f00 	cmp.w	r9, #0
 800a576:	f04f 0000 	mov.w	r0, #0
 800a57a:	f04f 0100 	mov.w	r1, #0
 800a57e:	f6bf af7a 	bge.w	800a476 <__ieee754_pow+0x3e>
 800a582:	e9dd 0300 	ldrd	r0, r3, [sp]
 800a586:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a58a:	e774      	b.n	800a476 <__ieee754_pow+0x3e>
 800a58c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800a590:	d106      	bne.n	800a5a0 <__ieee754_pow+0x168>
 800a592:	4632      	mov	r2, r6
 800a594:	463b      	mov	r3, r7
 800a596:	4630      	mov	r0, r6
 800a598:	4639      	mov	r1, r7
 800a59a:	f7f6 f82d 	bl	80005f8 <__aeabi_dmul>
 800a59e:	e76a      	b.n	800a476 <__ieee754_pow+0x3e>
 800a5a0:	4b3e      	ldr	r3, [pc, #248]	; (800a69c <__ieee754_pow+0x264>)
 800a5a2:	4599      	cmp	r9, r3
 800a5a4:	d10c      	bne.n	800a5c0 <__ieee754_pow+0x188>
 800a5a6:	2d00      	cmp	r5, #0
 800a5a8:	db0a      	blt.n	800a5c0 <__ieee754_pow+0x188>
 800a5aa:	ec47 6b10 	vmov	d0, r6, r7
 800a5ae:	b009      	add	sp, #36	; 0x24
 800a5b0:	ecbd 8b06 	vpop	{d8-d10}
 800a5b4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5b8:	f000 bc6c 	b.w	800ae94 <__ieee754_sqrt>
 800a5bc:	2300      	movs	r3, #0
 800a5be:	9304      	str	r3, [sp, #16]
 800a5c0:	ec47 6b10 	vmov	d0, r6, r7
 800a5c4:	f000 fd48 	bl	800b058 <fabs>
 800a5c8:	ec51 0b10 	vmov	r0, r1, d0
 800a5cc:	f1ba 0f00 	cmp.w	sl, #0
 800a5d0:	d129      	bne.n	800a626 <__ieee754_pow+0x1ee>
 800a5d2:	b124      	cbz	r4, 800a5de <__ieee754_pow+0x1a6>
 800a5d4:	4b2f      	ldr	r3, [pc, #188]	; (800a694 <__ieee754_pow+0x25c>)
 800a5d6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800a5da:	429a      	cmp	r2, r3
 800a5dc:	d123      	bne.n	800a626 <__ieee754_pow+0x1ee>
 800a5de:	f1b9 0f00 	cmp.w	r9, #0
 800a5e2:	da05      	bge.n	800a5f0 <__ieee754_pow+0x1b8>
 800a5e4:	4602      	mov	r2, r0
 800a5e6:	460b      	mov	r3, r1
 800a5e8:	2000      	movs	r0, #0
 800a5ea:	492a      	ldr	r1, [pc, #168]	; (800a694 <__ieee754_pow+0x25c>)
 800a5ec:	f7f6 f92e 	bl	800084c <__aeabi_ddiv>
 800a5f0:	2d00      	cmp	r5, #0
 800a5f2:	f6bf af40 	bge.w	800a476 <__ieee754_pow+0x3e>
 800a5f6:	9b04      	ldr	r3, [sp, #16]
 800a5f8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a5fc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a600:	4323      	orrs	r3, r4
 800a602:	d108      	bne.n	800a616 <__ieee754_pow+0x1de>
 800a604:	4602      	mov	r2, r0
 800a606:	460b      	mov	r3, r1
 800a608:	4610      	mov	r0, r2
 800a60a:	4619      	mov	r1, r3
 800a60c:	f7f5 fe3c 	bl	8000288 <__aeabi_dsub>
 800a610:	4602      	mov	r2, r0
 800a612:	460b      	mov	r3, r1
 800a614:	e78f      	b.n	800a536 <__ieee754_pow+0xfe>
 800a616:	9b04      	ldr	r3, [sp, #16]
 800a618:	2b01      	cmp	r3, #1
 800a61a:	f47f af2c 	bne.w	800a476 <__ieee754_pow+0x3e>
 800a61e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a622:	4619      	mov	r1, r3
 800a624:	e727      	b.n	800a476 <__ieee754_pow+0x3e>
 800a626:	0feb      	lsrs	r3, r5, #31
 800a628:	3b01      	subs	r3, #1
 800a62a:	9306      	str	r3, [sp, #24]
 800a62c:	9a06      	ldr	r2, [sp, #24]
 800a62e:	9b04      	ldr	r3, [sp, #16]
 800a630:	4313      	orrs	r3, r2
 800a632:	d102      	bne.n	800a63a <__ieee754_pow+0x202>
 800a634:	4632      	mov	r2, r6
 800a636:	463b      	mov	r3, r7
 800a638:	e7e6      	b.n	800a608 <__ieee754_pow+0x1d0>
 800a63a:	4b19      	ldr	r3, [pc, #100]	; (800a6a0 <__ieee754_pow+0x268>)
 800a63c:	4598      	cmp	r8, r3
 800a63e:	f340 80fb 	ble.w	800a838 <__ieee754_pow+0x400>
 800a642:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800a646:	4598      	cmp	r8, r3
 800a648:	4b13      	ldr	r3, [pc, #76]	; (800a698 <__ieee754_pow+0x260>)
 800a64a:	dd0c      	ble.n	800a666 <__ieee754_pow+0x22e>
 800a64c:	429c      	cmp	r4, r3
 800a64e:	dc0f      	bgt.n	800a670 <__ieee754_pow+0x238>
 800a650:	f1b9 0f00 	cmp.w	r9, #0
 800a654:	da0f      	bge.n	800a676 <__ieee754_pow+0x23e>
 800a656:	2000      	movs	r0, #0
 800a658:	b009      	add	sp, #36	; 0x24
 800a65a:	ecbd 8b06 	vpop	{d8-d10}
 800a65e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a662:	f000 bcf0 	b.w	800b046 <__math_oflow>
 800a666:	429c      	cmp	r4, r3
 800a668:	dbf2      	blt.n	800a650 <__ieee754_pow+0x218>
 800a66a:	4b0a      	ldr	r3, [pc, #40]	; (800a694 <__ieee754_pow+0x25c>)
 800a66c:	429c      	cmp	r4, r3
 800a66e:	dd19      	ble.n	800a6a4 <__ieee754_pow+0x26c>
 800a670:	f1b9 0f00 	cmp.w	r9, #0
 800a674:	dcef      	bgt.n	800a656 <__ieee754_pow+0x21e>
 800a676:	2000      	movs	r0, #0
 800a678:	b009      	add	sp, #36	; 0x24
 800a67a:	ecbd 8b06 	vpop	{d8-d10}
 800a67e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a682:	f000 bcd7 	b.w	800b034 <__math_uflow>
 800a686:	bf00      	nop
 800a688:	fff00000 	.word	0xfff00000
 800a68c:	7ff00000 	.word	0x7ff00000
 800a690:	433fffff 	.word	0x433fffff
 800a694:	3ff00000 	.word	0x3ff00000
 800a698:	3fefffff 	.word	0x3fefffff
 800a69c:	3fe00000 	.word	0x3fe00000
 800a6a0:	41e00000 	.word	0x41e00000
 800a6a4:	4b60      	ldr	r3, [pc, #384]	; (800a828 <__ieee754_pow+0x3f0>)
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	f7f5 fdee 	bl	8000288 <__aeabi_dsub>
 800a6ac:	a354      	add	r3, pc, #336	; (adr r3, 800a800 <__ieee754_pow+0x3c8>)
 800a6ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6b2:	4604      	mov	r4, r0
 800a6b4:	460d      	mov	r5, r1
 800a6b6:	f7f5 ff9f 	bl	80005f8 <__aeabi_dmul>
 800a6ba:	a353      	add	r3, pc, #332	; (adr r3, 800a808 <__ieee754_pow+0x3d0>)
 800a6bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6c0:	4606      	mov	r6, r0
 800a6c2:	460f      	mov	r7, r1
 800a6c4:	4620      	mov	r0, r4
 800a6c6:	4629      	mov	r1, r5
 800a6c8:	f7f5 ff96 	bl	80005f8 <__aeabi_dmul>
 800a6cc:	4b57      	ldr	r3, [pc, #348]	; (800a82c <__ieee754_pow+0x3f4>)
 800a6ce:	4682      	mov	sl, r0
 800a6d0:	468b      	mov	fp, r1
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	4620      	mov	r0, r4
 800a6d6:	4629      	mov	r1, r5
 800a6d8:	f7f5 ff8e 	bl	80005f8 <__aeabi_dmul>
 800a6dc:	4602      	mov	r2, r0
 800a6de:	460b      	mov	r3, r1
 800a6e0:	a14b      	add	r1, pc, #300	; (adr r1, 800a810 <__ieee754_pow+0x3d8>)
 800a6e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a6e6:	f7f5 fdcf 	bl	8000288 <__aeabi_dsub>
 800a6ea:	4622      	mov	r2, r4
 800a6ec:	462b      	mov	r3, r5
 800a6ee:	f7f5 ff83 	bl	80005f8 <__aeabi_dmul>
 800a6f2:	4602      	mov	r2, r0
 800a6f4:	460b      	mov	r3, r1
 800a6f6:	2000      	movs	r0, #0
 800a6f8:	494d      	ldr	r1, [pc, #308]	; (800a830 <__ieee754_pow+0x3f8>)
 800a6fa:	f7f5 fdc5 	bl	8000288 <__aeabi_dsub>
 800a6fe:	4622      	mov	r2, r4
 800a700:	4680      	mov	r8, r0
 800a702:	4689      	mov	r9, r1
 800a704:	462b      	mov	r3, r5
 800a706:	4620      	mov	r0, r4
 800a708:	4629      	mov	r1, r5
 800a70a:	f7f5 ff75 	bl	80005f8 <__aeabi_dmul>
 800a70e:	4602      	mov	r2, r0
 800a710:	460b      	mov	r3, r1
 800a712:	4640      	mov	r0, r8
 800a714:	4649      	mov	r1, r9
 800a716:	f7f5 ff6f 	bl	80005f8 <__aeabi_dmul>
 800a71a:	a33f      	add	r3, pc, #252	; (adr r3, 800a818 <__ieee754_pow+0x3e0>)
 800a71c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a720:	f7f5 ff6a 	bl	80005f8 <__aeabi_dmul>
 800a724:	4602      	mov	r2, r0
 800a726:	460b      	mov	r3, r1
 800a728:	4650      	mov	r0, sl
 800a72a:	4659      	mov	r1, fp
 800a72c:	f7f5 fdac 	bl	8000288 <__aeabi_dsub>
 800a730:	4602      	mov	r2, r0
 800a732:	460b      	mov	r3, r1
 800a734:	4680      	mov	r8, r0
 800a736:	4689      	mov	r9, r1
 800a738:	4630      	mov	r0, r6
 800a73a:	4639      	mov	r1, r7
 800a73c:	f7f5 fda6 	bl	800028c <__adddf3>
 800a740:	2000      	movs	r0, #0
 800a742:	4632      	mov	r2, r6
 800a744:	463b      	mov	r3, r7
 800a746:	4604      	mov	r4, r0
 800a748:	460d      	mov	r5, r1
 800a74a:	f7f5 fd9d 	bl	8000288 <__aeabi_dsub>
 800a74e:	4602      	mov	r2, r0
 800a750:	460b      	mov	r3, r1
 800a752:	4640      	mov	r0, r8
 800a754:	4649      	mov	r1, r9
 800a756:	f7f5 fd97 	bl	8000288 <__aeabi_dsub>
 800a75a:	9b04      	ldr	r3, [sp, #16]
 800a75c:	9a06      	ldr	r2, [sp, #24]
 800a75e:	3b01      	subs	r3, #1
 800a760:	4313      	orrs	r3, r2
 800a762:	4682      	mov	sl, r0
 800a764:	468b      	mov	fp, r1
 800a766:	f040 81e7 	bne.w	800ab38 <__ieee754_pow+0x700>
 800a76a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800a820 <__ieee754_pow+0x3e8>
 800a76e:	eeb0 8a47 	vmov.f32	s16, s14
 800a772:	eef0 8a67 	vmov.f32	s17, s15
 800a776:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a77a:	2600      	movs	r6, #0
 800a77c:	4632      	mov	r2, r6
 800a77e:	463b      	mov	r3, r7
 800a780:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a784:	f7f5 fd80 	bl	8000288 <__aeabi_dsub>
 800a788:	4622      	mov	r2, r4
 800a78a:	462b      	mov	r3, r5
 800a78c:	f7f5 ff34 	bl	80005f8 <__aeabi_dmul>
 800a790:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a794:	4680      	mov	r8, r0
 800a796:	4689      	mov	r9, r1
 800a798:	4650      	mov	r0, sl
 800a79a:	4659      	mov	r1, fp
 800a79c:	f7f5 ff2c 	bl	80005f8 <__aeabi_dmul>
 800a7a0:	4602      	mov	r2, r0
 800a7a2:	460b      	mov	r3, r1
 800a7a4:	4640      	mov	r0, r8
 800a7a6:	4649      	mov	r1, r9
 800a7a8:	f7f5 fd70 	bl	800028c <__adddf3>
 800a7ac:	4632      	mov	r2, r6
 800a7ae:	463b      	mov	r3, r7
 800a7b0:	4680      	mov	r8, r0
 800a7b2:	4689      	mov	r9, r1
 800a7b4:	4620      	mov	r0, r4
 800a7b6:	4629      	mov	r1, r5
 800a7b8:	f7f5 ff1e 	bl	80005f8 <__aeabi_dmul>
 800a7bc:	460b      	mov	r3, r1
 800a7be:	4604      	mov	r4, r0
 800a7c0:	460d      	mov	r5, r1
 800a7c2:	4602      	mov	r2, r0
 800a7c4:	4649      	mov	r1, r9
 800a7c6:	4640      	mov	r0, r8
 800a7c8:	f7f5 fd60 	bl	800028c <__adddf3>
 800a7cc:	4b19      	ldr	r3, [pc, #100]	; (800a834 <__ieee754_pow+0x3fc>)
 800a7ce:	4299      	cmp	r1, r3
 800a7d0:	ec45 4b19 	vmov	d9, r4, r5
 800a7d4:	4606      	mov	r6, r0
 800a7d6:	460f      	mov	r7, r1
 800a7d8:	468b      	mov	fp, r1
 800a7da:	f340 82f1 	ble.w	800adc0 <__ieee754_pow+0x988>
 800a7de:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800a7e2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800a7e6:	4303      	orrs	r3, r0
 800a7e8:	f000 81e4 	beq.w	800abb4 <__ieee754_pow+0x77c>
 800a7ec:	ec51 0b18 	vmov	r0, r1, d8
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	f7f6 f972 	bl	8000adc <__aeabi_dcmplt>
 800a7f8:	3800      	subs	r0, #0
 800a7fa:	bf18      	it	ne
 800a7fc:	2001      	movne	r0, #1
 800a7fe:	e72b      	b.n	800a658 <__ieee754_pow+0x220>
 800a800:	60000000 	.word	0x60000000
 800a804:	3ff71547 	.word	0x3ff71547
 800a808:	f85ddf44 	.word	0xf85ddf44
 800a80c:	3e54ae0b 	.word	0x3e54ae0b
 800a810:	55555555 	.word	0x55555555
 800a814:	3fd55555 	.word	0x3fd55555
 800a818:	652b82fe 	.word	0x652b82fe
 800a81c:	3ff71547 	.word	0x3ff71547
 800a820:	00000000 	.word	0x00000000
 800a824:	bff00000 	.word	0xbff00000
 800a828:	3ff00000 	.word	0x3ff00000
 800a82c:	3fd00000 	.word	0x3fd00000
 800a830:	3fe00000 	.word	0x3fe00000
 800a834:	408fffff 	.word	0x408fffff
 800a838:	4bd5      	ldr	r3, [pc, #852]	; (800ab90 <__ieee754_pow+0x758>)
 800a83a:	402b      	ands	r3, r5
 800a83c:	2200      	movs	r2, #0
 800a83e:	b92b      	cbnz	r3, 800a84c <__ieee754_pow+0x414>
 800a840:	4bd4      	ldr	r3, [pc, #848]	; (800ab94 <__ieee754_pow+0x75c>)
 800a842:	f7f5 fed9 	bl	80005f8 <__aeabi_dmul>
 800a846:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800a84a:	460c      	mov	r4, r1
 800a84c:	1523      	asrs	r3, r4, #20
 800a84e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a852:	4413      	add	r3, r2
 800a854:	9305      	str	r3, [sp, #20]
 800a856:	4bd0      	ldr	r3, [pc, #832]	; (800ab98 <__ieee754_pow+0x760>)
 800a858:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a85c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800a860:	429c      	cmp	r4, r3
 800a862:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a866:	dd08      	ble.n	800a87a <__ieee754_pow+0x442>
 800a868:	4bcc      	ldr	r3, [pc, #816]	; (800ab9c <__ieee754_pow+0x764>)
 800a86a:	429c      	cmp	r4, r3
 800a86c:	f340 8162 	ble.w	800ab34 <__ieee754_pow+0x6fc>
 800a870:	9b05      	ldr	r3, [sp, #20]
 800a872:	3301      	adds	r3, #1
 800a874:	9305      	str	r3, [sp, #20]
 800a876:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800a87a:	2400      	movs	r4, #0
 800a87c:	00e3      	lsls	r3, r4, #3
 800a87e:	9307      	str	r3, [sp, #28]
 800a880:	4bc7      	ldr	r3, [pc, #796]	; (800aba0 <__ieee754_pow+0x768>)
 800a882:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a886:	ed93 7b00 	vldr	d7, [r3]
 800a88a:	4629      	mov	r1, r5
 800a88c:	ec53 2b17 	vmov	r2, r3, d7
 800a890:	eeb0 9a47 	vmov.f32	s18, s14
 800a894:	eef0 9a67 	vmov.f32	s19, s15
 800a898:	4682      	mov	sl, r0
 800a89a:	f7f5 fcf5 	bl	8000288 <__aeabi_dsub>
 800a89e:	4652      	mov	r2, sl
 800a8a0:	4606      	mov	r6, r0
 800a8a2:	460f      	mov	r7, r1
 800a8a4:	462b      	mov	r3, r5
 800a8a6:	ec51 0b19 	vmov	r0, r1, d9
 800a8aa:	f7f5 fcef 	bl	800028c <__adddf3>
 800a8ae:	4602      	mov	r2, r0
 800a8b0:	460b      	mov	r3, r1
 800a8b2:	2000      	movs	r0, #0
 800a8b4:	49bb      	ldr	r1, [pc, #748]	; (800aba4 <__ieee754_pow+0x76c>)
 800a8b6:	f7f5 ffc9 	bl	800084c <__aeabi_ddiv>
 800a8ba:	ec41 0b1a 	vmov	d10, r0, r1
 800a8be:	4602      	mov	r2, r0
 800a8c0:	460b      	mov	r3, r1
 800a8c2:	4630      	mov	r0, r6
 800a8c4:	4639      	mov	r1, r7
 800a8c6:	f7f5 fe97 	bl	80005f8 <__aeabi_dmul>
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a8d0:	9302      	str	r3, [sp, #8]
 800a8d2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a8d6:	46ab      	mov	fp, r5
 800a8d8:	106d      	asrs	r5, r5, #1
 800a8da:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800a8de:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800a8e2:	ec41 0b18 	vmov	d8, r0, r1
 800a8e6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	4640      	mov	r0, r8
 800a8ee:	4649      	mov	r1, r9
 800a8f0:	4614      	mov	r4, r2
 800a8f2:	461d      	mov	r5, r3
 800a8f4:	f7f5 fe80 	bl	80005f8 <__aeabi_dmul>
 800a8f8:	4602      	mov	r2, r0
 800a8fa:	460b      	mov	r3, r1
 800a8fc:	4630      	mov	r0, r6
 800a8fe:	4639      	mov	r1, r7
 800a900:	f7f5 fcc2 	bl	8000288 <__aeabi_dsub>
 800a904:	ec53 2b19 	vmov	r2, r3, d9
 800a908:	4606      	mov	r6, r0
 800a90a:	460f      	mov	r7, r1
 800a90c:	4620      	mov	r0, r4
 800a90e:	4629      	mov	r1, r5
 800a910:	f7f5 fcba 	bl	8000288 <__aeabi_dsub>
 800a914:	4602      	mov	r2, r0
 800a916:	460b      	mov	r3, r1
 800a918:	4650      	mov	r0, sl
 800a91a:	4659      	mov	r1, fp
 800a91c:	f7f5 fcb4 	bl	8000288 <__aeabi_dsub>
 800a920:	4642      	mov	r2, r8
 800a922:	464b      	mov	r3, r9
 800a924:	f7f5 fe68 	bl	80005f8 <__aeabi_dmul>
 800a928:	4602      	mov	r2, r0
 800a92a:	460b      	mov	r3, r1
 800a92c:	4630      	mov	r0, r6
 800a92e:	4639      	mov	r1, r7
 800a930:	f7f5 fcaa 	bl	8000288 <__aeabi_dsub>
 800a934:	ec53 2b1a 	vmov	r2, r3, d10
 800a938:	f7f5 fe5e 	bl	80005f8 <__aeabi_dmul>
 800a93c:	ec53 2b18 	vmov	r2, r3, d8
 800a940:	ec41 0b19 	vmov	d9, r0, r1
 800a944:	ec51 0b18 	vmov	r0, r1, d8
 800a948:	f7f5 fe56 	bl	80005f8 <__aeabi_dmul>
 800a94c:	a37c      	add	r3, pc, #496	; (adr r3, 800ab40 <__ieee754_pow+0x708>)
 800a94e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a952:	4604      	mov	r4, r0
 800a954:	460d      	mov	r5, r1
 800a956:	f7f5 fe4f 	bl	80005f8 <__aeabi_dmul>
 800a95a:	a37b      	add	r3, pc, #492	; (adr r3, 800ab48 <__ieee754_pow+0x710>)
 800a95c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a960:	f7f5 fc94 	bl	800028c <__adddf3>
 800a964:	4622      	mov	r2, r4
 800a966:	462b      	mov	r3, r5
 800a968:	f7f5 fe46 	bl	80005f8 <__aeabi_dmul>
 800a96c:	a378      	add	r3, pc, #480	; (adr r3, 800ab50 <__ieee754_pow+0x718>)
 800a96e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a972:	f7f5 fc8b 	bl	800028c <__adddf3>
 800a976:	4622      	mov	r2, r4
 800a978:	462b      	mov	r3, r5
 800a97a:	f7f5 fe3d 	bl	80005f8 <__aeabi_dmul>
 800a97e:	a376      	add	r3, pc, #472	; (adr r3, 800ab58 <__ieee754_pow+0x720>)
 800a980:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a984:	f7f5 fc82 	bl	800028c <__adddf3>
 800a988:	4622      	mov	r2, r4
 800a98a:	462b      	mov	r3, r5
 800a98c:	f7f5 fe34 	bl	80005f8 <__aeabi_dmul>
 800a990:	a373      	add	r3, pc, #460	; (adr r3, 800ab60 <__ieee754_pow+0x728>)
 800a992:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a996:	f7f5 fc79 	bl	800028c <__adddf3>
 800a99a:	4622      	mov	r2, r4
 800a99c:	462b      	mov	r3, r5
 800a99e:	f7f5 fe2b 	bl	80005f8 <__aeabi_dmul>
 800a9a2:	a371      	add	r3, pc, #452	; (adr r3, 800ab68 <__ieee754_pow+0x730>)
 800a9a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9a8:	f7f5 fc70 	bl	800028c <__adddf3>
 800a9ac:	4622      	mov	r2, r4
 800a9ae:	4606      	mov	r6, r0
 800a9b0:	460f      	mov	r7, r1
 800a9b2:	462b      	mov	r3, r5
 800a9b4:	4620      	mov	r0, r4
 800a9b6:	4629      	mov	r1, r5
 800a9b8:	f7f5 fe1e 	bl	80005f8 <__aeabi_dmul>
 800a9bc:	4602      	mov	r2, r0
 800a9be:	460b      	mov	r3, r1
 800a9c0:	4630      	mov	r0, r6
 800a9c2:	4639      	mov	r1, r7
 800a9c4:	f7f5 fe18 	bl	80005f8 <__aeabi_dmul>
 800a9c8:	4642      	mov	r2, r8
 800a9ca:	4604      	mov	r4, r0
 800a9cc:	460d      	mov	r5, r1
 800a9ce:	464b      	mov	r3, r9
 800a9d0:	ec51 0b18 	vmov	r0, r1, d8
 800a9d4:	f7f5 fc5a 	bl	800028c <__adddf3>
 800a9d8:	ec53 2b19 	vmov	r2, r3, d9
 800a9dc:	f7f5 fe0c 	bl	80005f8 <__aeabi_dmul>
 800a9e0:	4622      	mov	r2, r4
 800a9e2:	462b      	mov	r3, r5
 800a9e4:	f7f5 fc52 	bl	800028c <__adddf3>
 800a9e8:	4642      	mov	r2, r8
 800a9ea:	4682      	mov	sl, r0
 800a9ec:	468b      	mov	fp, r1
 800a9ee:	464b      	mov	r3, r9
 800a9f0:	4640      	mov	r0, r8
 800a9f2:	4649      	mov	r1, r9
 800a9f4:	f7f5 fe00 	bl	80005f8 <__aeabi_dmul>
 800a9f8:	4b6b      	ldr	r3, [pc, #428]	; (800aba8 <__ieee754_pow+0x770>)
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	4606      	mov	r6, r0
 800a9fe:	460f      	mov	r7, r1
 800aa00:	f7f5 fc44 	bl	800028c <__adddf3>
 800aa04:	4652      	mov	r2, sl
 800aa06:	465b      	mov	r3, fp
 800aa08:	f7f5 fc40 	bl	800028c <__adddf3>
 800aa0c:	2000      	movs	r0, #0
 800aa0e:	4604      	mov	r4, r0
 800aa10:	460d      	mov	r5, r1
 800aa12:	4602      	mov	r2, r0
 800aa14:	460b      	mov	r3, r1
 800aa16:	4640      	mov	r0, r8
 800aa18:	4649      	mov	r1, r9
 800aa1a:	f7f5 fded 	bl	80005f8 <__aeabi_dmul>
 800aa1e:	4b62      	ldr	r3, [pc, #392]	; (800aba8 <__ieee754_pow+0x770>)
 800aa20:	4680      	mov	r8, r0
 800aa22:	4689      	mov	r9, r1
 800aa24:	2200      	movs	r2, #0
 800aa26:	4620      	mov	r0, r4
 800aa28:	4629      	mov	r1, r5
 800aa2a:	f7f5 fc2d 	bl	8000288 <__aeabi_dsub>
 800aa2e:	4632      	mov	r2, r6
 800aa30:	463b      	mov	r3, r7
 800aa32:	f7f5 fc29 	bl	8000288 <__aeabi_dsub>
 800aa36:	4602      	mov	r2, r0
 800aa38:	460b      	mov	r3, r1
 800aa3a:	4650      	mov	r0, sl
 800aa3c:	4659      	mov	r1, fp
 800aa3e:	f7f5 fc23 	bl	8000288 <__aeabi_dsub>
 800aa42:	ec53 2b18 	vmov	r2, r3, d8
 800aa46:	f7f5 fdd7 	bl	80005f8 <__aeabi_dmul>
 800aa4a:	4622      	mov	r2, r4
 800aa4c:	4606      	mov	r6, r0
 800aa4e:	460f      	mov	r7, r1
 800aa50:	462b      	mov	r3, r5
 800aa52:	ec51 0b19 	vmov	r0, r1, d9
 800aa56:	f7f5 fdcf 	bl	80005f8 <__aeabi_dmul>
 800aa5a:	4602      	mov	r2, r0
 800aa5c:	460b      	mov	r3, r1
 800aa5e:	4630      	mov	r0, r6
 800aa60:	4639      	mov	r1, r7
 800aa62:	f7f5 fc13 	bl	800028c <__adddf3>
 800aa66:	4606      	mov	r6, r0
 800aa68:	460f      	mov	r7, r1
 800aa6a:	4602      	mov	r2, r0
 800aa6c:	460b      	mov	r3, r1
 800aa6e:	4640      	mov	r0, r8
 800aa70:	4649      	mov	r1, r9
 800aa72:	f7f5 fc0b 	bl	800028c <__adddf3>
 800aa76:	a33e      	add	r3, pc, #248	; (adr r3, 800ab70 <__ieee754_pow+0x738>)
 800aa78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa7c:	2000      	movs	r0, #0
 800aa7e:	4604      	mov	r4, r0
 800aa80:	460d      	mov	r5, r1
 800aa82:	f7f5 fdb9 	bl	80005f8 <__aeabi_dmul>
 800aa86:	4642      	mov	r2, r8
 800aa88:	ec41 0b18 	vmov	d8, r0, r1
 800aa8c:	464b      	mov	r3, r9
 800aa8e:	4620      	mov	r0, r4
 800aa90:	4629      	mov	r1, r5
 800aa92:	f7f5 fbf9 	bl	8000288 <__aeabi_dsub>
 800aa96:	4602      	mov	r2, r0
 800aa98:	460b      	mov	r3, r1
 800aa9a:	4630      	mov	r0, r6
 800aa9c:	4639      	mov	r1, r7
 800aa9e:	f7f5 fbf3 	bl	8000288 <__aeabi_dsub>
 800aaa2:	a335      	add	r3, pc, #212	; (adr r3, 800ab78 <__ieee754_pow+0x740>)
 800aaa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaa8:	f7f5 fda6 	bl	80005f8 <__aeabi_dmul>
 800aaac:	a334      	add	r3, pc, #208	; (adr r3, 800ab80 <__ieee754_pow+0x748>)
 800aaae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aab2:	4606      	mov	r6, r0
 800aab4:	460f      	mov	r7, r1
 800aab6:	4620      	mov	r0, r4
 800aab8:	4629      	mov	r1, r5
 800aaba:	f7f5 fd9d 	bl	80005f8 <__aeabi_dmul>
 800aabe:	4602      	mov	r2, r0
 800aac0:	460b      	mov	r3, r1
 800aac2:	4630      	mov	r0, r6
 800aac4:	4639      	mov	r1, r7
 800aac6:	f7f5 fbe1 	bl	800028c <__adddf3>
 800aaca:	9a07      	ldr	r2, [sp, #28]
 800aacc:	4b37      	ldr	r3, [pc, #220]	; (800abac <__ieee754_pow+0x774>)
 800aace:	4413      	add	r3, r2
 800aad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aad4:	f7f5 fbda 	bl	800028c <__adddf3>
 800aad8:	4682      	mov	sl, r0
 800aada:	9805      	ldr	r0, [sp, #20]
 800aadc:	468b      	mov	fp, r1
 800aade:	f7f5 fd21 	bl	8000524 <__aeabi_i2d>
 800aae2:	9a07      	ldr	r2, [sp, #28]
 800aae4:	4b32      	ldr	r3, [pc, #200]	; (800abb0 <__ieee754_pow+0x778>)
 800aae6:	4413      	add	r3, r2
 800aae8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800aaec:	4606      	mov	r6, r0
 800aaee:	460f      	mov	r7, r1
 800aaf0:	4652      	mov	r2, sl
 800aaf2:	465b      	mov	r3, fp
 800aaf4:	ec51 0b18 	vmov	r0, r1, d8
 800aaf8:	f7f5 fbc8 	bl	800028c <__adddf3>
 800aafc:	4642      	mov	r2, r8
 800aafe:	464b      	mov	r3, r9
 800ab00:	f7f5 fbc4 	bl	800028c <__adddf3>
 800ab04:	4632      	mov	r2, r6
 800ab06:	463b      	mov	r3, r7
 800ab08:	f7f5 fbc0 	bl	800028c <__adddf3>
 800ab0c:	2000      	movs	r0, #0
 800ab0e:	4632      	mov	r2, r6
 800ab10:	463b      	mov	r3, r7
 800ab12:	4604      	mov	r4, r0
 800ab14:	460d      	mov	r5, r1
 800ab16:	f7f5 fbb7 	bl	8000288 <__aeabi_dsub>
 800ab1a:	4642      	mov	r2, r8
 800ab1c:	464b      	mov	r3, r9
 800ab1e:	f7f5 fbb3 	bl	8000288 <__aeabi_dsub>
 800ab22:	ec53 2b18 	vmov	r2, r3, d8
 800ab26:	f7f5 fbaf 	bl	8000288 <__aeabi_dsub>
 800ab2a:	4602      	mov	r2, r0
 800ab2c:	460b      	mov	r3, r1
 800ab2e:	4650      	mov	r0, sl
 800ab30:	4659      	mov	r1, fp
 800ab32:	e610      	b.n	800a756 <__ieee754_pow+0x31e>
 800ab34:	2401      	movs	r4, #1
 800ab36:	e6a1      	b.n	800a87c <__ieee754_pow+0x444>
 800ab38:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800ab88 <__ieee754_pow+0x750>
 800ab3c:	e617      	b.n	800a76e <__ieee754_pow+0x336>
 800ab3e:	bf00      	nop
 800ab40:	4a454eef 	.word	0x4a454eef
 800ab44:	3fca7e28 	.word	0x3fca7e28
 800ab48:	93c9db65 	.word	0x93c9db65
 800ab4c:	3fcd864a 	.word	0x3fcd864a
 800ab50:	a91d4101 	.word	0xa91d4101
 800ab54:	3fd17460 	.word	0x3fd17460
 800ab58:	518f264d 	.word	0x518f264d
 800ab5c:	3fd55555 	.word	0x3fd55555
 800ab60:	db6fabff 	.word	0xdb6fabff
 800ab64:	3fdb6db6 	.word	0x3fdb6db6
 800ab68:	33333303 	.word	0x33333303
 800ab6c:	3fe33333 	.word	0x3fe33333
 800ab70:	e0000000 	.word	0xe0000000
 800ab74:	3feec709 	.word	0x3feec709
 800ab78:	dc3a03fd 	.word	0xdc3a03fd
 800ab7c:	3feec709 	.word	0x3feec709
 800ab80:	145b01f5 	.word	0x145b01f5
 800ab84:	be3e2fe0 	.word	0xbe3e2fe0
 800ab88:	00000000 	.word	0x00000000
 800ab8c:	3ff00000 	.word	0x3ff00000
 800ab90:	7ff00000 	.word	0x7ff00000
 800ab94:	43400000 	.word	0x43400000
 800ab98:	0003988e 	.word	0x0003988e
 800ab9c:	000bb679 	.word	0x000bb679
 800aba0:	0800f780 	.word	0x0800f780
 800aba4:	3ff00000 	.word	0x3ff00000
 800aba8:	40080000 	.word	0x40080000
 800abac:	0800f7a0 	.word	0x0800f7a0
 800abb0:	0800f790 	.word	0x0800f790
 800abb4:	a3b5      	add	r3, pc, #724	; (adr r3, 800ae8c <__ieee754_pow+0xa54>)
 800abb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abba:	4640      	mov	r0, r8
 800abbc:	4649      	mov	r1, r9
 800abbe:	f7f5 fb65 	bl	800028c <__adddf3>
 800abc2:	4622      	mov	r2, r4
 800abc4:	ec41 0b1a 	vmov	d10, r0, r1
 800abc8:	462b      	mov	r3, r5
 800abca:	4630      	mov	r0, r6
 800abcc:	4639      	mov	r1, r7
 800abce:	f7f5 fb5b 	bl	8000288 <__aeabi_dsub>
 800abd2:	4602      	mov	r2, r0
 800abd4:	460b      	mov	r3, r1
 800abd6:	ec51 0b1a 	vmov	r0, r1, d10
 800abda:	f7f5 ff9d 	bl	8000b18 <__aeabi_dcmpgt>
 800abde:	2800      	cmp	r0, #0
 800abe0:	f47f ae04 	bne.w	800a7ec <__ieee754_pow+0x3b4>
 800abe4:	4aa4      	ldr	r2, [pc, #656]	; (800ae78 <__ieee754_pow+0xa40>)
 800abe6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800abea:	4293      	cmp	r3, r2
 800abec:	f340 8108 	ble.w	800ae00 <__ieee754_pow+0x9c8>
 800abf0:	151b      	asrs	r3, r3, #20
 800abf2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800abf6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800abfa:	fa4a f303 	asr.w	r3, sl, r3
 800abfe:	445b      	add	r3, fp
 800ac00:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800ac04:	4e9d      	ldr	r6, [pc, #628]	; (800ae7c <__ieee754_pow+0xa44>)
 800ac06:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800ac0a:	4116      	asrs	r6, r2
 800ac0c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800ac10:	2000      	movs	r0, #0
 800ac12:	ea23 0106 	bic.w	r1, r3, r6
 800ac16:	f1c2 0214 	rsb	r2, r2, #20
 800ac1a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800ac1e:	fa4a fa02 	asr.w	sl, sl, r2
 800ac22:	f1bb 0f00 	cmp.w	fp, #0
 800ac26:	4602      	mov	r2, r0
 800ac28:	460b      	mov	r3, r1
 800ac2a:	4620      	mov	r0, r4
 800ac2c:	4629      	mov	r1, r5
 800ac2e:	bfb8      	it	lt
 800ac30:	f1ca 0a00 	rsblt	sl, sl, #0
 800ac34:	f7f5 fb28 	bl	8000288 <__aeabi_dsub>
 800ac38:	ec41 0b19 	vmov	d9, r0, r1
 800ac3c:	4642      	mov	r2, r8
 800ac3e:	464b      	mov	r3, r9
 800ac40:	ec51 0b19 	vmov	r0, r1, d9
 800ac44:	f7f5 fb22 	bl	800028c <__adddf3>
 800ac48:	a37b      	add	r3, pc, #492	; (adr r3, 800ae38 <__ieee754_pow+0xa00>)
 800ac4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac4e:	2000      	movs	r0, #0
 800ac50:	4604      	mov	r4, r0
 800ac52:	460d      	mov	r5, r1
 800ac54:	f7f5 fcd0 	bl	80005f8 <__aeabi_dmul>
 800ac58:	ec53 2b19 	vmov	r2, r3, d9
 800ac5c:	4606      	mov	r6, r0
 800ac5e:	460f      	mov	r7, r1
 800ac60:	4620      	mov	r0, r4
 800ac62:	4629      	mov	r1, r5
 800ac64:	f7f5 fb10 	bl	8000288 <__aeabi_dsub>
 800ac68:	4602      	mov	r2, r0
 800ac6a:	460b      	mov	r3, r1
 800ac6c:	4640      	mov	r0, r8
 800ac6e:	4649      	mov	r1, r9
 800ac70:	f7f5 fb0a 	bl	8000288 <__aeabi_dsub>
 800ac74:	a372      	add	r3, pc, #456	; (adr r3, 800ae40 <__ieee754_pow+0xa08>)
 800ac76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac7a:	f7f5 fcbd 	bl	80005f8 <__aeabi_dmul>
 800ac7e:	a372      	add	r3, pc, #456	; (adr r3, 800ae48 <__ieee754_pow+0xa10>)
 800ac80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac84:	4680      	mov	r8, r0
 800ac86:	4689      	mov	r9, r1
 800ac88:	4620      	mov	r0, r4
 800ac8a:	4629      	mov	r1, r5
 800ac8c:	f7f5 fcb4 	bl	80005f8 <__aeabi_dmul>
 800ac90:	4602      	mov	r2, r0
 800ac92:	460b      	mov	r3, r1
 800ac94:	4640      	mov	r0, r8
 800ac96:	4649      	mov	r1, r9
 800ac98:	f7f5 faf8 	bl	800028c <__adddf3>
 800ac9c:	4604      	mov	r4, r0
 800ac9e:	460d      	mov	r5, r1
 800aca0:	4602      	mov	r2, r0
 800aca2:	460b      	mov	r3, r1
 800aca4:	4630      	mov	r0, r6
 800aca6:	4639      	mov	r1, r7
 800aca8:	f7f5 faf0 	bl	800028c <__adddf3>
 800acac:	4632      	mov	r2, r6
 800acae:	463b      	mov	r3, r7
 800acb0:	4680      	mov	r8, r0
 800acb2:	4689      	mov	r9, r1
 800acb4:	f7f5 fae8 	bl	8000288 <__aeabi_dsub>
 800acb8:	4602      	mov	r2, r0
 800acba:	460b      	mov	r3, r1
 800acbc:	4620      	mov	r0, r4
 800acbe:	4629      	mov	r1, r5
 800acc0:	f7f5 fae2 	bl	8000288 <__aeabi_dsub>
 800acc4:	4642      	mov	r2, r8
 800acc6:	4606      	mov	r6, r0
 800acc8:	460f      	mov	r7, r1
 800acca:	464b      	mov	r3, r9
 800accc:	4640      	mov	r0, r8
 800acce:	4649      	mov	r1, r9
 800acd0:	f7f5 fc92 	bl	80005f8 <__aeabi_dmul>
 800acd4:	a35e      	add	r3, pc, #376	; (adr r3, 800ae50 <__ieee754_pow+0xa18>)
 800acd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acda:	4604      	mov	r4, r0
 800acdc:	460d      	mov	r5, r1
 800acde:	f7f5 fc8b 	bl	80005f8 <__aeabi_dmul>
 800ace2:	a35d      	add	r3, pc, #372	; (adr r3, 800ae58 <__ieee754_pow+0xa20>)
 800ace4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ace8:	f7f5 face 	bl	8000288 <__aeabi_dsub>
 800acec:	4622      	mov	r2, r4
 800acee:	462b      	mov	r3, r5
 800acf0:	f7f5 fc82 	bl	80005f8 <__aeabi_dmul>
 800acf4:	a35a      	add	r3, pc, #360	; (adr r3, 800ae60 <__ieee754_pow+0xa28>)
 800acf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acfa:	f7f5 fac7 	bl	800028c <__adddf3>
 800acfe:	4622      	mov	r2, r4
 800ad00:	462b      	mov	r3, r5
 800ad02:	f7f5 fc79 	bl	80005f8 <__aeabi_dmul>
 800ad06:	a358      	add	r3, pc, #352	; (adr r3, 800ae68 <__ieee754_pow+0xa30>)
 800ad08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad0c:	f7f5 fabc 	bl	8000288 <__aeabi_dsub>
 800ad10:	4622      	mov	r2, r4
 800ad12:	462b      	mov	r3, r5
 800ad14:	f7f5 fc70 	bl	80005f8 <__aeabi_dmul>
 800ad18:	a355      	add	r3, pc, #340	; (adr r3, 800ae70 <__ieee754_pow+0xa38>)
 800ad1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad1e:	f7f5 fab5 	bl	800028c <__adddf3>
 800ad22:	4622      	mov	r2, r4
 800ad24:	462b      	mov	r3, r5
 800ad26:	f7f5 fc67 	bl	80005f8 <__aeabi_dmul>
 800ad2a:	4602      	mov	r2, r0
 800ad2c:	460b      	mov	r3, r1
 800ad2e:	4640      	mov	r0, r8
 800ad30:	4649      	mov	r1, r9
 800ad32:	f7f5 faa9 	bl	8000288 <__aeabi_dsub>
 800ad36:	4604      	mov	r4, r0
 800ad38:	460d      	mov	r5, r1
 800ad3a:	4602      	mov	r2, r0
 800ad3c:	460b      	mov	r3, r1
 800ad3e:	4640      	mov	r0, r8
 800ad40:	4649      	mov	r1, r9
 800ad42:	f7f5 fc59 	bl	80005f8 <__aeabi_dmul>
 800ad46:	2200      	movs	r2, #0
 800ad48:	ec41 0b19 	vmov	d9, r0, r1
 800ad4c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ad50:	4620      	mov	r0, r4
 800ad52:	4629      	mov	r1, r5
 800ad54:	f7f5 fa98 	bl	8000288 <__aeabi_dsub>
 800ad58:	4602      	mov	r2, r0
 800ad5a:	460b      	mov	r3, r1
 800ad5c:	ec51 0b19 	vmov	r0, r1, d9
 800ad60:	f7f5 fd74 	bl	800084c <__aeabi_ddiv>
 800ad64:	4632      	mov	r2, r6
 800ad66:	4604      	mov	r4, r0
 800ad68:	460d      	mov	r5, r1
 800ad6a:	463b      	mov	r3, r7
 800ad6c:	4640      	mov	r0, r8
 800ad6e:	4649      	mov	r1, r9
 800ad70:	f7f5 fc42 	bl	80005f8 <__aeabi_dmul>
 800ad74:	4632      	mov	r2, r6
 800ad76:	463b      	mov	r3, r7
 800ad78:	f7f5 fa88 	bl	800028c <__adddf3>
 800ad7c:	4602      	mov	r2, r0
 800ad7e:	460b      	mov	r3, r1
 800ad80:	4620      	mov	r0, r4
 800ad82:	4629      	mov	r1, r5
 800ad84:	f7f5 fa80 	bl	8000288 <__aeabi_dsub>
 800ad88:	4642      	mov	r2, r8
 800ad8a:	464b      	mov	r3, r9
 800ad8c:	f7f5 fa7c 	bl	8000288 <__aeabi_dsub>
 800ad90:	460b      	mov	r3, r1
 800ad92:	4602      	mov	r2, r0
 800ad94:	493a      	ldr	r1, [pc, #232]	; (800ae80 <__ieee754_pow+0xa48>)
 800ad96:	2000      	movs	r0, #0
 800ad98:	f7f5 fa76 	bl	8000288 <__aeabi_dsub>
 800ad9c:	ec41 0b10 	vmov	d0, r0, r1
 800ada0:	ee10 3a90 	vmov	r3, s1
 800ada4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800ada8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800adac:	da2b      	bge.n	800ae06 <__ieee754_pow+0x9ce>
 800adae:	4650      	mov	r0, sl
 800adb0:	f000 f966 	bl	800b080 <scalbn>
 800adb4:	ec51 0b10 	vmov	r0, r1, d0
 800adb8:	ec53 2b18 	vmov	r2, r3, d8
 800adbc:	f7ff bbed 	b.w	800a59a <__ieee754_pow+0x162>
 800adc0:	4b30      	ldr	r3, [pc, #192]	; (800ae84 <__ieee754_pow+0xa4c>)
 800adc2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800adc6:	429e      	cmp	r6, r3
 800adc8:	f77f af0c 	ble.w	800abe4 <__ieee754_pow+0x7ac>
 800adcc:	4b2e      	ldr	r3, [pc, #184]	; (800ae88 <__ieee754_pow+0xa50>)
 800adce:	440b      	add	r3, r1
 800add0:	4303      	orrs	r3, r0
 800add2:	d009      	beq.n	800ade8 <__ieee754_pow+0x9b0>
 800add4:	ec51 0b18 	vmov	r0, r1, d8
 800add8:	2200      	movs	r2, #0
 800adda:	2300      	movs	r3, #0
 800addc:	f7f5 fe7e 	bl	8000adc <__aeabi_dcmplt>
 800ade0:	3800      	subs	r0, #0
 800ade2:	bf18      	it	ne
 800ade4:	2001      	movne	r0, #1
 800ade6:	e447      	b.n	800a678 <__ieee754_pow+0x240>
 800ade8:	4622      	mov	r2, r4
 800adea:	462b      	mov	r3, r5
 800adec:	f7f5 fa4c 	bl	8000288 <__aeabi_dsub>
 800adf0:	4642      	mov	r2, r8
 800adf2:	464b      	mov	r3, r9
 800adf4:	f7f5 fe86 	bl	8000b04 <__aeabi_dcmpge>
 800adf8:	2800      	cmp	r0, #0
 800adfa:	f43f aef3 	beq.w	800abe4 <__ieee754_pow+0x7ac>
 800adfe:	e7e9      	b.n	800add4 <__ieee754_pow+0x99c>
 800ae00:	f04f 0a00 	mov.w	sl, #0
 800ae04:	e71a      	b.n	800ac3c <__ieee754_pow+0x804>
 800ae06:	ec51 0b10 	vmov	r0, r1, d0
 800ae0a:	4619      	mov	r1, r3
 800ae0c:	e7d4      	b.n	800adb8 <__ieee754_pow+0x980>
 800ae0e:	491c      	ldr	r1, [pc, #112]	; (800ae80 <__ieee754_pow+0xa48>)
 800ae10:	2000      	movs	r0, #0
 800ae12:	f7ff bb30 	b.w	800a476 <__ieee754_pow+0x3e>
 800ae16:	2000      	movs	r0, #0
 800ae18:	2100      	movs	r1, #0
 800ae1a:	f7ff bb2c 	b.w	800a476 <__ieee754_pow+0x3e>
 800ae1e:	4630      	mov	r0, r6
 800ae20:	4639      	mov	r1, r7
 800ae22:	f7ff bb28 	b.w	800a476 <__ieee754_pow+0x3e>
 800ae26:	9204      	str	r2, [sp, #16]
 800ae28:	f7ff bb7a 	b.w	800a520 <__ieee754_pow+0xe8>
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	f7ff bb64 	b.w	800a4fa <__ieee754_pow+0xc2>
 800ae32:	bf00      	nop
 800ae34:	f3af 8000 	nop.w
 800ae38:	00000000 	.word	0x00000000
 800ae3c:	3fe62e43 	.word	0x3fe62e43
 800ae40:	fefa39ef 	.word	0xfefa39ef
 800ae44:	3fe62e42 	.word	0x3fe62e42
 800ae48:	0ca86c39 	.word	0x0ca86c39
 800ae4c:	be205c61 	.word	0xbe205c61
 800ae50:	72bea4d0 	.word	0x72bea4d0
 800ae54:	3e663769 	.word	0x3e663769
 800ae58:	c5d26bf1 	.word	0xc5d26bf1
 800ae5c:	3ebbbd41 	.word	0x3ebbbd41
 800ae60:	af25de2c 	.word	0xaf25de2c
 800ae64:	3f11566a 	.word	0x3f11566a
 800ae68:	16bebd93 	.word	0x16bebd93
 800ae6c:	3f66c16c 	.word	0x3f66c16c
 800ae70:	5555553e 	.word	0x5555553e
 800ae74:	3fc55555 	.word	0x3fc55555
 800ae78:	3fe00000 	.word	0x3fe00000
 800ae7c:	000fffff 	.word	0x000fffff
 800ae80:	3ff00000 	.word	0x3ff00000
 800ae84:	4090cbff 	.word	0x4090cbff
 800ae88:	3f6f3400 	.word	0x3f6f3400
 800ae8c:	652b82fe 	.word	0x652b82fe
 800ae90:	3c971547 	.word	0x3c971547

0800ae94 <__ieee754_sqrt>:
 800ae94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae98:	ec55 4b10 	vmov	r4, r5, d0
 800ae9c:	4e55      	ldr	r6, [pc, #340]	; (800aff4 <__ieee754_sqrt+0x160>)
 800ae9e:	43ae      	bics	r6, r5
 800aea0:	ee10 0a10 	vmov	r0, s0
 800aea4:	ee10 3a10 	vmov	r3, s0
 800aea8:	462a      	mov	r2, r5
 800aeaa:	4629      	mov	r1, r5
 800aeac:	d110      	bne.n	800aed0 <__ieee754_sqrt+0x3c>
 800aeae:	ee10 2a10 	vmov	r2, s0
 800aeb2:	462b      	mov	r3, r5
 800aeb4:	f7f5 fba0 	bl	80005f8 <__aeabi_dmul>
 800aeb8:	4602      	mov	r2, r0
 800aeba:	460b      	mov	r3, r1
 800aebc:	4620      	mov	r0, r4
 800aebe:	4629      	mov	r1, r5
 800aec0:	f7f5 f9e4 	bl	800028c <__adddf3>
 800aec4:	4604      	mov	r4, r0
 800aec6:	460d      	mov	r5, r1
 800aec8:	ec45 4b10 	vmov	d0, r4, r5
 800aecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aed0:	2d00      	cmp	r5, #0
 800aed2:	dc10      	bgt.n	800aef6 <__ieee754_sqrt+0x62>
 800aed4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800aed8:	4330      	orrs	r0, r6
 800aeda:	d0f5      	beq.n	800aec8 <__ieee754_sqrt+0x34>
 800aedc:	b15d      	cbz	r5, 800aef6 <__ieee754_sqrt+0x62>
 800aede:	ee10 2a10 	vmov	r2, s0
 800aee2:	462b      	mov	r3, r5
 800aee4:	ee10 0a10 	vmov	r0, s0
 800aee8:	f7f5 f9ce 	bl	8000288 <__aeabi_dsub>
 800aeec:	4602      	mov	r2, r0
 800aeee:	460b      	mov	r3, r1
 800aef0:	f7f5 fcac 	bl	800084c <__aeabi_ddiv>
 800aef4:	e7e6      	b.n	800aec4 <__ieee754_sqrt+0x30>
 800aef6:	1512      	asrs	r2, r2, #20
 800aef8:	d074      	beq.n	800afe4 <__ieee754_sqrt+0x150>
 800aefa:	07d4      	lsls	r4, r2, #31
 800aefc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800af00:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800af04:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800af08:	bf5e      	ittt	pl
 800af0a:	0fda      	lsrpl	r2, r3, #31
 800af0c:	005b      	lslpl	r3, r3, #1
 800af0e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800af12:	2400      	movs	r4, #0
 800af14:	0fda      	lsrs	r2, r3, #31
 800af16:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800af1a:	107f      	asrs	r7, r7, #1
 800af1c:	005b      	lsls	r3, r3, #1
 800af1e:	2516      	movs	r5, #22
 800af20:	4620      	mov	r0, r4
 800af22:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800af26:	1886      	adds	r6, r0, r2
 800af28:	428e      	cmp	r6, r1
 800af2a:	bfde      	ittt	le
 800af2c:	1b89      	suble	r1, r1, r6
 800af2e:	18b0      	addle	r0, r6, r2
 800af30:	18a4      	addle	r4, r4, r2
 800af32:	0049      	lsls	r1, r1, #1
 800af34:	3d01      	subs	r5, #1
 800af36:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800af3a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800af3e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800af42:	d1f0      	bne.n	800af26 <__ieee754_sqrt+0x92>
 800af44:	462a      	mov	r2, r5
 800af46:	f04f 0e20 	mov.w	lr, #32
 800af4a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800af4e:	4281      	cmp	r1, r0
 800af50:	eb06 0c05 	add.w	ip, r6, r5
 800af54:	dc02      	bgt.n	800af5c <__ieee754_sqrt+0xc8>
 800af56:	d113      	bne.n	800af80 <__ieee754_sqrt+0xec>
 800af58:	459c      	cmp	ip, r3
 800af5a:	d811      	bhi.n	800af80 <__ieee754_sqrt+0xec>
 800af5c:	f1bc 0f00 	cmp.w	ip, #0
 800af60:	eb0c 0506 	add.w	r5, ip, r6
 800af64:	da43      	bge.n	800afee <__ieee754_sqrt+0x15a>
 800af66:	2d00      	cmp	r5, #0
 800af68:	db41      	blt.n	800afee <__ieee754_sqrt+0x15a>
 800af6a:	f100 0801 	add.w	r8, r0, #1
 800af6e:	1a09      	subs	r1, r1, r0
 800af70:	459c      	cmp	ip, r3
 800af72:	bf88      	it	hi
 800af74:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 800af78:	eba3 030c 	sub.w	r3, r3, ip
 800af7c:	4432      	add	r2, r6
 800af7e:	4640      	mov	r0, r8
 800af80:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800af84:	f1be 0e01 	subs.w	lr, lr, #1
 800af88:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800af8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800af90:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800af94:	d1db      	bne.n	800af4e <__ieee754_sqrt+0xba>
 800af96:	430b      	orrs	r3, r1
 800af98:	d006      	beq.n	800afa8 <__ieee754_sqrt+0x114>
 800af9a:	1c50      	adds	r0, r2, #1
 800af9c:	bf13      	iteet	ne
 800af9e:	3201      	addne	r2, #1
 800afa0:	3401      	addeq	r4, #1
 800afa2:	4672      	moveq	r2, lr
 800afa4:	f022 0201 	bicne.w	r2, r2, #1
 800afa8:	1063      	asrs	r3, r4, #1
 800afaa:	0852      	lsrs	r2, r2, #1
 800afac:	07e1      	lsls	r1, r4, #31
 800afae:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800afb2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800afb6:	bf48      	it	mi
 800afb8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800afbc:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800afc0:	4614      	mov	r4, r2
 800afc2:	e781      	b.n	800aec8 <__ieee754_sqrt+0x34>
 800afc4:	0ad9      	lsrs	r1, r3, #11
 800afc6:	3815      	subs	r0, #21
 800afc8:	055b      	lsls	r3, r3, #21
 800afca:	2900      	cmp	r1, #0
 800afcc:	d0fa      	beq.n	800afc4 <__ieee754_sqrt+0x130>
 800afce:	02cd      	lsls	r5, r1, #11
 800afd0:	d50a      	bpl.n	800afe8 <__ieee754_sqrt+0x154>
 800afd2:	f1c2 0420 	rsb	r4, r2, #32
 800afd6:	fa23 f404 	lsr.w	r4, r3, r4
 800afda:	1e55      	subs	r5, r2, #1
 800afdc:	4093      	lsls	r3, r2
 800afde:	4321      	orrs	r1, r4
 800afe0:	1b42      	subs	r2, r0, r5
 800afe2:	e78a      	b.n	800aefa <__ieee754_sqrt+0x66>
 800afe4:	4610      	mov	r0, r2
 800afe6:	e7f0      	b.n	800afca <__ieee754_sqrt+0x136>
 800afe8:	0049      	lsls	r1, r1, #1
 800afea:	3201      	adds	r2, #1
 800afec:	e7ef      	b.n	800afce <__ieee754_sqrt+0x13a>
 800afee:	4680      	mov	r8, r0
 800aff0:	e7bd      	b.n	800af6e <__ieee754_sqrt+0xda>
 800aff2:	bf00      	nop
 800aff4:	7ff00000 	.word	0x7ff00000

0800aff8 <with_errno>:
 800aff8:	b570      	push	{r4, r5, r6, lr}
 800affa:	4604      	mov	r4, r0
 800affc:	460d      	mov	r5, r1
 800affe:	4616      	mov	r6, r2
 800b000:	f7fb fad2 	bl	80065a8 <__errno>
 800b004:	4629      	mov	r1, r5
 800b006:	6006      	str	r6, [r0, #0]
 800b008:	4620      	mov	r0, r4
 800b00a:	bd70      	pop	{r4, r5, r6, pc}

0800b00c <xflow>:
 800b00c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b00e:	4614      	mov	r4, r2
 800b010:	461d      	mov	r5, r3
 800b012:	b108      	cbz	r0, 800b018 <xflow+0xc>
 800b014:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b018:	e9cd 2300 	strd	r2, r3, [sp]
 800b01c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b020:	4620      	mov	r0, r4
 800b022:	4629      	mov	r1, r5
 800b024:	f7f5 fae8 	bl	80005f8 <__aeabi_dmul>
 800b028:	2222      	movs	r2, #34	; 0x22
 800b02a:	b003      	add	sp, #12
 800b02c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b030:	f7ff bfe2 	b.w	800aff8 <with_errno>

0800b034 <__math_uflow>:
 800b034:	b508      	push	{r3, lr}
 800b036:	2200      	movs	r2, #0
 800b038:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b03c:	f7ff ffe6 	bl	800b00c <xflow>
 800b040:	ec41 0b10 	vmov	d0, r0, r1
 800b044:	bd08      	pop	{r3, pc}

0800b046 <__math_oflow>:
 800b046:	b508      	push	{r3, lr}
 800b048:	2200      	movs	r2, #0
 800b04a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800b04e:	f7ff ffdd 	bl	800b00c <xflow>
 800b052:	ec41 0b10 	vmov	d0, r0, r1
 800b056:	bd08      	pop	{r3, pc}

0800b058 <fabs>:
 800b058:	ec51 0b10 	vmov	r0, r1, d0
 800b05c:	ee10 2a10 	vmov	r2, s0
 800b060:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b064:	ec43 2b10 	vmov	d0, r2, r3
 800b068:	4770      	bx	lr

0800b06a <finite>:
 800b06a:	b082      	sub	sp, #8
 800b06c:	ed8d 0b00 	vstr	d0, [sp]
 800b070:	9801      	ldr	r0, [sp, #4]
 800b072:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800b076:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800b07a:	0fc0      	lsrs	r0, r0, #31
 800b07c:	b002      	add	sp, #8
 800b07e:	4770      	bx	lr

0800b080 <scalbn>:
 800b080:	b570      	push	{r4, r5, r6, lr}
 800b082:	ec55 4b10 	vmov	r4, r5, d0
 800b086:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800b08a:	4606      	mov	r6, r0
 800b08c:	462b      	mov	r3, r5
 800b08e:	b99a      	cbnz	r2, 800b0b8 <scalbn+0x38>
 800b090:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b094:	4323      	orrs	r3, r4
 800b096:	d036      	beq.n	800b106 <scalbn+0x86>
 800b098:	4b39      	ldr	r3, [pc, #228]	; (800b180 <scalbn+0x100>)
 800b09a:	4629      	mov	r1, r5
 800b09c:	ee10 0a10 	vmov	r0, s0
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	f7f5 faa9 	bl	80005f8 <__aeabi_dmul>
 800b0a6:	4b37      	ldr	r3, [pc, #220]	; (800b184 <scalbn+0x104>)
 800b0a8:	429e      	cmp	r6, r3
 800b0aa:	4604      	mov	r4, r0
 800b0ac:	460d      	mov	r5, r1
 800b0ae:	da10      	bge.n	800b0d2 <scalbn+0x52>
 800b0b0:	a32b      	add	r3, pc, #172	; (adr r3, 800b160 <scalbn+0xe0>)
 800b0b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0b6:	e03a      	b.n	800b12e <scalbn+0xae>
 800b0b8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800b0bc:	428a      	cmp	r2, r1
 800b0be:	d10c      	bne.n	800b0da <scalbn+0x5a>
 800b0c0:	ee10 2a10 	vmov	r2, s0
 800b0c4:	4620      	mov	r0, r4
 800b0c6:	4629      	mov	r1, r5
 800b0c8:	f7f5 f8e0 	bl	800028c <__adddf3>
 800b0cc:	4604      	mov	r4, r0
 800b0ce:	460d      	mov	r5, r1
 800b0d0:	e019      	b.n	800b106 <scalbn+0x86>
 800b0d2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b0d6:	460b      	mov	r3, r1
 800b0d8:	3a36      	subs	r2, #54	; 0x36
 800b0da:	4432      	add	r2, r6
 800b0dc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800b0e0:	428a      	cmp	r2, r1
 800b0e2:	dd08      	ble.n	800b0f6 <scalbn+0x76>
 800b0e4:	2d00      	cmp	r5, #0
 800b0e6:	a120      	add	r1, pc, #128	; (adr r1, 800b168 <scalbn+0xe8>)
 800b0e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b0ec:	da1c      	bge.n	800b128 <scalbn+0xa8>
 800b0ee:	a120      	add	r1, pc, #128	; (adr r1, 800b170 <scalbn+0xf0>)
 800b0f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b0f4:	e018      	b.n	800b128 <scalbn+0xa8>
 800b0f6:	2a00      	cmp	r2, #0
 800b0f8:	dd08      	ble.n	800b10c <scalbn+0x8c>
 800b0fa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b0fe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b102:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b106:	ec45 4b10 	vmov	d0, r4, r5
 800b10a:	bd70      	pop	{r4, r5, r6, pc}
 800b10c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800b110:	da19      	bge.n	800b146 <scalbn+0xc6>
 800b112:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b116:	429e      	cmp	r6, r3
 800b118:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800b11c:	dd0a      	ble.n	800b134 <scalbn+0xb4>
 800b11e:	a112      	add	r1, pc, #72	; (adr r1, 800b168 <scalbn+0xe8>)
 800b120:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d1e2      	bne.n	800b0ee <scalbn+0x6e>
 800b128:	a30f      	add	r3, pc, #60	; (adr r3, 800b168 <scalbn+0xe8>)
 800b12a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b12e:	f7f5 fa63 	bl	80005f8 <__aeabi_dmul>
 800b132:	e7cb      	b.n	800b0cc <scalbn+0x4c>
 800b134:	a10a      	add	r1, pc, #40	; (adr r1, 800b160 <scalbn+0xe0>)
 800b136:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d0b8      	beq.n	800b0b0 <scalbn+0x30>
 800b13e:	a10e      	add	r1, pc, #56	; (adr r1, 800b178 <scalbn+0xf8>)
 800b140:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b144:	e7b4      	b.n	800b0b0 <scalbn+0x30>
 800b146:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b14a:	3236      	adds	r2, #54	; 0x36
 800b14c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b150:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800b154:	4620      	mov	r0, r4
 800b156:	4b0c      	ldr	r3, [pc, #48]	; (800b188 <scalbn+0x108>)
 800b158:	2200      	movs	r2, #0
 800b15a:	e7e8      	b.n	800b12e <scalbn+0xae>
 800b15c:	f3af 8000 	nop.w
 800b160:	c2f8f359 	.word	0xc2f8f359
 800b164:	01a56e1f 	.word	0x01a56e1f
 800b168:	8800759c 	.word	0x8800759c
 800b16c:	7e37e43c 	.word	0x7e37e43c
 800b170:	8800759c 	.word	0x8800759c
 800b174:	fe37e43c 	.word	0xfe37e43c
 800b178:	c2f8f359 	.word	0xc2f8f359
 800b17c:	81a56e1f 	.word	0x81a56e1f
 800b180:	43500000 	.word	0x43500000
 800b184:	ffff3cb0 	.word	0xffff3cb0
 800b188:	3c900000 	.word	0x3c900000

0800b18c <_init>:
 800b18c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b18e:	bf00      	nop
 800b190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b192:	bc08      	pop	{r3}
 800b194:	469e      	mov	lr, r3
 800b196:	4770      	bx	lr

0800b198 <_fini>:
 800b198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b19a:	bf00      	nop
 800b19c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b19e:	bc08      	pop	{r3}
 800b1a0:	469e      	mov	lr, r3
 800b1a2:	4770      	bx	lr
