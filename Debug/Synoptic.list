
Synoptic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e5c4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000047a8  0800e758  0800e758  0001e758  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012f00  08012f00  000301e4  2**0
                  CONTENTS
  4 .ARM          00000008  08012f00  08012f00  00022f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012f08  08012f08  000301e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012f08  08012f08  00022f08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012f0c  08012f0c  00022f0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08012f10  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e4  200001e4  080130f4  000301e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004c8  080130f4  000304c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c26e  00000000  00000000  00030214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040a6  00000000  00000000  0004c482  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001598  00000000  00000000  00050528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013a0  00000000  00000000  00051ac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ad99  00000000  00000000  00052e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ddfb  00000000  00000000  0007dbf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f78f0  00000000  00000000  0009b9f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001932e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000071bc  00000000  00000000  00193334  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e73c 	.word	0x0800e73c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	0800e73c 	.word	0x0800e73c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c7c:	f000 b974 	b.w	8000f68 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9d08      	ldr	r5, [sp, #32]
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	468e      	mov	lr, r1
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d14d      	bne.n	8000d42 <__udivmoddi4+0xaa>
 8000ca6:	428a      	cmp	r2, r1
 8000ca8:	4694      	mov	ip, r2
 8000caa:	d969      	bls.n	8000d80 <__udivmoddi4+0xe8>
 8000cac:	fab2 f282 	clz	r2, r2
 8000cb0:	b152      	cbz	r2, 8000cc8 <__udivmoddi4+0x30>
 8000cb2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cb6:	f1c2 0120 	rsb	r1, r2, #32
 8000cba:	fa20 f101 	lsr.w	r1, r0, r1
 8000cbe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cc2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cc6:	4094      	lsls	r4, r2
 8000cc8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ccc:	0c21      	lsrs	r1, r4, #16
 8000cce:	fbbe f6f8 	udiv	r6, lr, r8
 8000cd2:	fa1f f78c 	uxth.w	r7, ip
 8000cd6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cda:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cde:	fb06 f107 	mul.w	r1, r6, r7
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	d90a      	bls.n	8000cfc <__udivmoddi4+0x64>
 8000ce6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cea:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cee:	f080 811f 	bcs.w	8000f30 <__udivmoddi4+0x298>
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	f240 811c 	bls.w	8000f30 <__udivmoddi4+0x298>
 8000cf8:	3e02      	subs	r6, #2
 8000cfa:	4463      	add	r3, ip
 8000cfc:	1a5b      	subs	r3, r3, r1
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d04:	fb08 3310 	mls	r3, r8, r0, r3
 8000d08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d0c:	fb00 f707 	mul.w	r7, r0, r7
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	d90a      	bls.n	8000d2a <__udivmoddi4+0x92>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d1c:	f080 810a 	bcs.w	8000f34 <__udivmoddi4+0x29c>
 8000d20:	42a7      	cmp	r7, r4
 8000d22:	f240 8107 	bls.w	8000f34 <__udivmoddi4+0x29c>
 8000d26:	4464      	add	r4, ip
 8000d28:	3802      	subs	r0, #2
 8000d2a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d2e:	1be4      	subs	r4, r4, r7
 8000d30:	2600      	movs	r6, #0
 8000d32:	b11d      	cbz	r5, 8000d3c <__udivmoddi4+0xa4>
 8000d34:	40d4      	lsrs	r4, r2
 8000d36:	2300      	movs	r3, #0
 8000d38:	e9c5 4300 	strd	r4, r3, [r5]
 8000d3c:	4631      	mov	r1, r6
 8000d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d909      	bls.n	8000d5a <__udivmoddi4+0xc2>
 8000d46:	2d00      	cmp	r5, #0
 8000d48:	f000 80ef 	beq.w	8000f2a <__udivmoddi4+0x292>
 8000d4c:	2600      	movs	r6, #0
 8000d4e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d52:	4630      	mov	r0, r6
 8000d54:	4631      	mov	r1, r6
 8000d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5a:	fab3 f683 	clz	r6, r3
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	d14a      	bne.n	8000df8 <__udivmoddi4+0x160>
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d302      	bcc.n	8000d6c <__udivmoddi4+0xd4>
 8000d66:	4282      	cmp	r2, r0
 8000d68:	f200 80f9 	bhi.w	8000f5e <__udivmoddi4+0x2c6>
 8000d6c:	1a84      	subs	r4, r0, r2
 8000d6e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d72:	2001      	movs	r0, #1
 8000d74:	469e      	mov	lr, r3
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	d0e0      	beq.n	8000d3c <__udivmoddi4+0xa4>
 8000d7a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d7e:	e7dd      	b.n	8000d3c <__udivmoddi4+0xa4>
 8000d80:	b902      	cbnz	r2, 8000d84 <__udivmoddi4+0xec>
 8000d82:	deff      	udf	#255	; 0xff
 8000d84:	fab2 f282 	clz	r2, r2
 8000d88:	2a00      	cmp	r2, #0
 8000d8a:	f040 8092 	bne.w	8000eb2 <__udivmoddi4+0x21a>
 8000d8e:	eba1 010c 	sub.w	r1, r1, ip
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f fe8c 	uxth.w	lr, ip
 8000d9a:	2601      	movs	r6, #1
 8000d9c:	0c20      	lsrs	r0, r4, #16
 8000d9e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000da2:	fb07 1113 	mls	r1, r7, r3, r1
 8000da6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000daa:	fb0e f003 	mul.w	r0, lr, r3
 8000dae:	4288      	cmp	r0, r1
 8000db0:	d908      	bls.n	8000dc4 <__udivmoddi4+0x12c>
 8000db2:	eb1c 0101 	adds.w	r1, ip, r1
 8000db6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x12a>
 8000dbc:	4288      	cmp	r0, r1
 8000dbe:	f200 80cb 	bhi.w	8000f58 <__udivmoddi4+0x2c0>
 8000dc2:	4643      	mov	r3, r8
 8000dc4:	1a09      	subs	r1, r1, r0
 8000dc6:	b2a4      	uxth	r4, r4
 8000dc8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dcc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dd4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dd8:	45a6      	cmp	lr, r4
 8000dda:	d908      	bls.n	8000dee <__udivmoddi4+0x156>
 8000ddc:	eb1c 0404 	adds.w	r4, ip, r4
 8000de0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000de4:	d202      	bcs.n	8000dec <__udivmoddi4+0x154>
 8000de6:	45a6      	cmp	lr, r4
 8000de8:	f200 80bb 	bhi.w	8000f62 <__udivmoddi4+0x2ca>
 8000dec:	4608      	mov	r0, r1
 8000dee:	eba4 040e 	sub.w	r4, r4, lr
 8000df2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000df6:	e79c      	b.n	8000d32 <__udivmoddi4+0x9a>
 8000df8:	f1c6 0720 	rsb	r7, r6, #32
 8000dfc:	40b3      	lsls	r3, r6
 8000dfe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e02:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e06:	fa20 f407 	lsr.w	r4, r0, r7
 8000e0a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e0e:	431c      	orrs	r4, r3
 8000e10:	40f9      	lsrs	r1, r7
 8000e12:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e16:	fa00 f306 	lsl.w	r3, r0, r6
 8000e1a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e1e:	0c20      	lsrs	r0, r4, #16
 8000e20:	fa1f fe8c 	uxth.w	lr, ip
 8000e24:	fb09 1118 	mls	r1, r9, r8, r1
 8000e28:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e2c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e30:	4288      	cmp	r0, r1
 8000e32:	fa02 f206 	lsl.w	r2, r2, r6
 8000e36:	d90b      	bls.n	8000e50 <__udivmoddi4+0x1b8>
 8000e38:	eb1c 0101 	adds.w	r1, ip, r1
 8000e3c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e40:	f080 8088 	bcs.w	8000f54 <__udivmoddi4+0x2bc>
 8000e44:	4288      	cmp	r0, r1
 8000e46:	f240 8085 	bls.w	8000f54 <__udivmoddi4+0x2bc>
 8000e4a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e4e:	4461      	add	r1, ip
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e58:	fb09 1110 	mls	r1, r9, r0, r1
 8000e5c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e60:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e64:	458e      	cmp	lr, r1
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x1e2>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e70:	d26c      	bcs.n	8000f4c <__udivmoddi4+0x2b4>
 8000e72:	458e      	cmp	lr, r1
 8000e74:	d96a      	bls.n	8000f4c <__udivmoddi4+0x2b4>
 8000e76:	3802      	subs	r0, #2
 8000e78:	4461      	add	r1, ip
 8000e7a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e7e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e82:	eba1 010e 	sub.w	r1, r1, lr
 8000e86:	42a1      	cmp	r1, r4
 8000e88:	46c8      	mov	r8, r9
 8000e8a:	46a6      	mov	lr, r4
 8000e8c:	d356      	bcc.n	8000f3c <__udivmoddi4+0x2a4>
 8000e8e:	d053      	beq.n	8000f38 <__udivmoddi4+0x2a0>
 8000e90:	b15d      	cbz	r5, 8000eaa <__udivmoddi4+0x212>
 8000e92:	ebb3 0208 	subs.w	r2, r3, r8
 8000e96:	eb61 010e 	sbc.w	r1, r1, lr
 8000e9a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e9e:	fa22 f306 	lsr.w	r3, r2, r6
 8000ea2:	40f1      	lsrs	r1, r6
 8000ea4:	431f      	orrs	r7, r3
 8000ea6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eaa:	2600      	movs	r6, #0
 8000eac:	4631      	mov	r1, r6
 8000eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb2:	f1c2 0320 	rsb	r3, r2, #32
 8000eb6:	40d8      	lsrs	r0, r3
 8000eb8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ebc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ec0:	4091      	lsls	r1, r2
 8000ec2:	4301      	orrs	r1, r0
 8000ec4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ec8:	fa1f fe8c 	uxth.w	lr, ip
 8000ecc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ed0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ed4:	0c0b      	lsrs	r3, r1, #16
 8000ed6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eda:	fb00 f60e 	mul.w	r6, r0, lr
 8000ede:	429e      	cmp	r6, r3
 8000ee0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ee4:	d908      	bls.n	8000ef8 <__udivmoddi4+0x260>
 8000ee6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eea:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000eee:	d22f      	bcs.n	8000f50 <__udivmoddi4+0x2b8>
 8000ef0:	429e      	cmp	r6, r3
 8000ef2:	d92d      	bls.n	8000f50 <__udivmoddi4+0x2b8>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	4463      	add	r3, ip
 8000ef8:	1b9b      	subs	r3, r3, r6
 8000efa:	b289      	uxth	r1, r1
 8000efc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f00:	fb07 3316 	mls	r3, r7, r6, r3
 8000f04:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f08:	fb06 f30e 	mul.w	r3, r6, lr
 8000f0c:	428b      	cmp	r3, r1
 8000f0e:	d908      	bls.n	8000f22 <__udivmoddi4+0x28a>
 8000f10:	eb1c 0101 	adds.w	r1, ip, r1
 8000f14:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f18:	d216      	bcs.n	8000f48 <__udivmoddi4+0x2b0>
 8000f1a:	428b      	cmp	r3, r1
 8000f1c:	d914      	bls.n	8000f48 <__udivmoddi4+0x2b0>
 8000f1e:	3e02      	subs	r6, #2
 8000f20:	4461      	add	r1, ip
 8000f22:	1ac9      	subs	r1, r1, r3
 8000f24:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f28:	e738      	b.n	8000d9c <__udivmoddi4+0x104>
 8000f2a:	462e      	mov	r6, r5
 8000f2c:	4628      	mov	r0, r5
 8000f2e:	e705      	b.n	8000d3c <__udivmoddi4+0xa4>
 8000f30:	4606      	mov	r6, r0
 8000f32:	e6e3      	b.n	8000cfc <__udivmoddi4+0x64>
 8000f34:	4618      	mov	r0, r3
 8000f36:	e6f8      	b.n	8000d2a <__udivmoddi4+0x92>
 8000f38:	454b      	cmp	r3, r9
 8000f3a:	d2a9      	bcs.n	8000e90 <__udivmoddi4+0x1f8>
 8000f3c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f40:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f44:	3801      	subs	r0, #1
 8000f46:	e7a3      	b.n	8000e90 <__udivmoddi4+0x1f8>
 8000f48:	4646      	mov	r6, r8
 8000f4a:	e7ea      	b.n	8000f22 <__udivmoddi4+0x28a>
 8000f4c:	4620      	mov	r0, r4
 8000f4e:	e794      	b.n	8000e7a <__udivmoddi4+0x1e2>
 8000f50:	4640      	mov	r0, r8
 8000f52:	e7d1      	b.n	8000ef8 <__udivmoddi4+0x260>
 8000f54:	46d0      	mov	r8, sl
 8000f56:	e77b      	b.n	8000e50 <__udivmoddi4+0x1b8>
 8000f58:	3b02      	subs	r3, #2
 8000f5a:	4461      	add	r1, ip
 8000f5c:	e732      	b.n	8000dc4 <__udivmoddi4+0x12c>
 8000f5e:	4630      	mov	r0, r6
 8000f60:	e709      	b.n	8000d76 <__udivmoddi4+0xde>
 8000f62:	4464      	add	r4, ip
 8000f64:	3802      	subs	r0, #2
 8000f66:	e742      	b.n	8000dee <__udivmoddi4+0x156>

08000f68 <__aeabi_idiv0>:
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop

08000f6c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f72:	4b0c      	ldr	r3, [pc, #48]	; (8000fa4 <MX_DMA_Init+0x38>)
 8000f74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f76:	4a0b      	ldr	r2, [pc, #44]	; (8000fa4 <MX_DMA_Init+0x38>)
 8000f78:	f043 0301 	orr.w	r3, r3, #1
 8000f7c:	6493      	str	r3, [r2, #72]	; 0x48
 8000f7e:	4b09      	ldr	r3, [pc, #36]	; (8000fa4 <MX_DMA_Init+0x38>)
 8000f80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f82:	f003 0301 	and.w	r3, r3, #1
 8000f86:	607b      	str	r3, [r7, #4]
 8000f88:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	200f      	movs	r0, #15
 8000f90:	f001 fe47 	bl	8002c22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000f94:	200f      	movs	r0, #15
 8000f96:	f001 fe60 	bl	8002c5a <HAL_NVIC_EnableIRQ>

}
 8000f9a:	bf00      	nop
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	40021000 	.word	0x40021000

08000fa8 <MX_GPIO_Init>:
        * EXTI
     PA2   ------> USART2_TX
     PA3   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b08a      	sub	sp, #40	; 0x28
 8000fac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fae:	f107 0314 	add.w	r3, r7, #20
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	601a      	str	r2, [r3, #0]
 8000fb6:	605a      	str	r2, [r3, #4]
 8000fb8:	609a      	str	r2, [r3, #8]
 8000fba:	60da      	str	r2, [r3, #12]
 8000fbc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fbe:	4b41      	ldr	r3, [pc, #260]	; (80010c4 <MX_GPIO_Init+0x11c>)
 8000fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc2:	4a40      	ldr	r2, [pc, #256]	; (80010c4 <MX_GPIO_Init+0x11c>)
 8000fc4:	f043 0304 	orr.w	r3, r3, #4
 8000fc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fca:	4b3e      	ldr	r3, [pc, #248]	; (80010c4 <MX_GPIO_Init+0x11c>)
 8000fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fce:	f003 0304 	and.w	r3, r3, #4
 8000fd2:	613b      	str	r3, [r7, #16]
 8000fd4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fd6:	4b3b      	ldr	r3, [pc, #236]	; (80010c4 <MX_GPIO_Init+0x11c>)
 8000fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fda:	4a3a      	ldr	r2, [pc, #232]	; (80010c4 <MX_GPIO_Init+0x11c>)
 8000fdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fe0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fe2:	4b38      	ldr	r3, [pc, #224]	; (80010c4 <MX_GPIO_Init+0x11c>)
 8000fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fee:	4b35      	ldr	r3, [pc, #212]	; (80010c4 <MX_GPIO_Init+0x11c>)
 8000ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff2:	4a34      	ldr	r2, [pc, #208]	; (80010c4 <MX_GPIO_Init+0x11c>)
 8000ff4:	f043 0301 	orr.w	r3, r3, #1
 8000ff8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ffa:	4b32      	ldr	r3, [pc, #200]	; (80010c4 <MX_GPIO_Init+0x11c>)
 8000ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ffe:	f003 0301 	and.w	r3, r3, #1
 8001002:	60bb      	str	r3, [r7, #8]
 8001004:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001006:	4b2f      	ldr	r3, [pc, #188]	; (80010c4 <MX_GPIO_Init+0x11c>)
 8001008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100a:	4a2e      	ldr	r2, [pc, #184]	; (80010c4 <MX_GPIO_Init+0x11c>)
 800100c:	f043 0302 	orr.w	r3, r3, #2
 8001010:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001012:	4b2c      	ldr	r3, [pc, #176]	; (80010c4 <MX_GPIO_Init+0x11c>)
 8001014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001016:	f003 0302 	and.w	r3, r3, #2
 800101a:	607b      	str	r3, [r7, #4]
 800101c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800101e:	2200      	movs	r2, #0
 8001020:	2120      	movs	r1, #32
 8001022:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001026:	f002 fa53 	bl	80034d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RST_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 800102a:	2200      	movs	r2, #0
 800102c:	f640 0104 	movw	r1, #2052	; 0x804
 8001030:	4825      	ldr	r0, [pc, #148]	; (80010c8 <MX_GPIO_Init+0x120>)
 8001032:	f002 fa4d 	bl	80034d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001036:	2201      	movs	r2, #1
 8001038:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800103c:	4822      	ldr	r0, [pc, #136]	; (80010c8 <MX_GPIO_Init+0x120>)
 800103e:	f002 fa47 	bl	80034d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001042:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001046:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001048:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800104c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104e:	2300      	movs	r3, #0
 8001050:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001052:	f107 0314 	add.w	r3, r7, #20
 8001056:	4619      	mov	r1, r3
 8001058:	481c      	ldr	r0, [pc, #112]	; (80010cc <MX_GPIO_Init+0x124>)
 800105a:	f002 f88f 	bl	800317c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800105e:	230c      	movs	r3, #12
 8001060:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001062:	2302      	movs	r3, #2
 8001064:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800106a:	2303      	movs	r3, #3
 800106c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800106e:	2307      	movs	r3, #7
 8001070:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001072:	f107 0314 	add.w	r3, r7, #20
 8001076:	4619      	mov	r1, r3
 8001078:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800107c:	f002 f87e 	bl	800317c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001080:	2320      	movs	r3, #32
 8001082:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001084:	2301      	movs	r3, #1
 8001086:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001088:	2300      	movs	r3, #0
 800108a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108c:	2300      	movs	r3, #0
 800108e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001090:	f107 0314 	add.w	r3, r7, #20
 8001094:	4619      	mov	r1, r3
 8001096:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800109a:	f002 f86f 	bl	800317c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_DC_Pin|LCD_CS_Pin;
 800109e:	f641 0304 	movw	r3, #6148	; 0x1804
 80010a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a4:	2301      	movs	r3, #1
 80010a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a8:	2300      	movs	r3, #0
 80010aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ac:	2300      	movs	r3, #0
 80010ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b0:	f107 0314 	add.w	r3, r7, #20
 80010b4:	4619      	mov	r1, r3
 80010b6:	4804      	ldr	r0, [pc, #16]	; (80010c8 <MX_GPIO_Init+0x120>)
 80010b8:	f002 f860 	bl	800317c <HAL_GPIO_Init>

}
 80010bc:	bf00      	nop
 80010be:	3728      	adds	r7, #40	; 0x28
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	40021000 	.word	0x40021000
 80010c8:	48000400 	.word	0x48000400
 80010cc:	48000800 	.word	0x48000800

080010d0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010d4:	4b1b      	ldr	r3, [pc, #108]	; (8001144 <MX_I2C1_Init+0x74>)
 80010d6:	4a1c      	ldr	r2, [pc, #112]	; (8001148 <MX_I2C1_Init+0x78>)
 80010d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80010da:	4b1a      	ldr	r3, [pc, #104]	; (8001144 <MX_I2C1_Init+0x74>)
 80010dc:	4a1b      	ldr	r2, [pc, #108]	; (800114c <MX_I2C1_Init+0x7c>)
 80010de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80010e0:	4b18      	ldr	r3, [pc, #96]	; (8001144 <MX_I2C1_Init+0x74>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010e6:	4b17      	ldr	r3, [pc, #92]	; (8001144 <MX_I2C1_Init+0x74>)
 80010e8:	2201      	movs	r2, #1
 80010ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010ec:	4b15      	ldr	r3, [pc, #84]	; (8001144 <MX_I2C1_Init+0x74>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80010f2:	4b14      	ldr	r3, [pc, #80]	; (8001144 <MX_I2C1_Init+0x74>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010f8:	4b12      	ldr	r3, [pc, #72]	; (8001144 <MX_I2C1_Init+0x74>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010fe:	4b11      	ldr	r3, [pc, #68]	; (8001144 <MX_I2C1_Init+0x74>)
 8001100:	2200      	movs	r2, #0
 8001102:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001104:	4b0f      	ldr	r3, [pc, #60]	; (8001144 <MX_I2C1_Init+0x74>)
 8001106:	2200      	movs	r2, #0
 8001108:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800110a:	480e      	ldr	r0, [pc, #56]	; (8001144 <MX_I2C1_Init+0x74>)
 800110c:	f002 f9f8 	bl	8003500 <HAL_I2C_Init>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001116:	f001 f853 	bl	80021c0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800111a:	2100      	movs	r1, #0
 800111c:	4809      	ldr	r0, [pc, #36]	; (8001144 <MX_I2C1_Init+0x74>)
 800111e:	f003 fabf 	bl	80046a0 <HAL_I2CEx_ConfigAnalogFilter>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001128:	f001 f84a 	bl	80021c0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800112c:	2100      	movs	r1, #0
 800112e:	4805      	ldr	r0, [pc, #20]	; (8001144 <MX_I2C1_Init+0x74>)
 8001130:	f003 fb01 	bl	8004736 <HAL_I2CEx_ConfigDigitalFilter>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800113a:	f001 f841 	bl	80021c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800113e:	bf00      	nop
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	20000200 	.word	0x20000200
 8001148:	40005400 	.word	0x40005400
 800114c:	10909cec 	.word	0x10909cec

08001150 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b0ac      	sub	sp, #176	; 0xb0
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001158:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	60da      	str	r2, [r3, #12]
 8001166:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001168:	f107 0314 	add.w	r3, r7, #20
 800116c:	2288      	movs	r2, #136	; 0x88
 800116e:	2100      	movs	r1, #0
 8001170:	4618      	mov	r0, r3
 8001172:	f008 fa31 	bl	80095d8 <memset>
  if(i2cHandle->Instance==I2C1)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a21      	ldr	r2, [pc, #132]	; (8001200 <HAL_I2C_MspInit+0xb0>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d13a      	bne.n	80011f6 <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001180:	2340      	movs	r3, #64	; 0x40
 8001182:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001184:	2300      	movs	r3, #0
 8001186:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001188:	f107 0314 	add.w	r3, r7, #20
 800118c:	4618      	mov	r0, r3
 800118e:	f004 f9e1 	bl	8005554 <HAL_RCCEx_PeriphCLKConfig>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001198:	f001 f812 	bl	80021c0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800119c:	4b19      	ldr	r3, [pc, #100]	; (8001204 <HAL_I2C_MspInit+0xb4>)
 800119e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a0:	4a18      	ldr	r2, [pc, #96]	; (8001204 <HAL_I2C_MspInit+0xb4>)
 80011a2:	f043 0302 	orr.w	r3, r3, #2
 80011a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011a8:	4b16      	ldr	r3, [pc, #88]	; (8001204 <HAL_I2C_MspInit+0xb4>)
 80011aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ac:	f003 0302 	and.w	r3, r3, #2
 80011b0:	613b      	str	r3, [r7, #16]
 80011b2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011b4:	23c0      	movs	r3, #192	; 0xc0
 80011b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011ba:	2312      	movs	r3, #18
 80011bc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c6:	2303      	movs	r3, #3
 80011c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011cc:	2304      	movs	r3, #4
 80011ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011d6:	4619      	mov	r1, r3
 80011d8:	480b      	ldr	r0, [pc, #44]	; (8001208 <HAL_I2C_MspInit+0xb8>)
 80011da:	f001 ffcf 	bl	800317c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011de:	4b09      	ldr	r3, [pc, #36]	; (8001204 <HAL_I2C_MspInit+0xb4>)
 80011e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011e2:	4a08      	ldr	r2, [pc, #32]	; (8001204 <HAL_I2C_MspInit+0xb4>)
 80011e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011e8:	6593      	str	r3, [r2, #88]	; 0x58
 80011ea:	4b06      	ldr	r3, [pc, #24]	; (8001204 <HAL_I2C_MspInit+0xb4>)
 80011ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80011f6:	bf00      	nop
 80011f8:	37b0      	adds	r7, #176	; 0xb0
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40005400 	.word	0x40005400
 8001204:	40021000 	.word	0x40021000
 8001208:	48000400 	.word	0x48000400

0800120c <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8001210:	4b0b      	ldr	r3, [pc, #44]	; (8001240 <MX_IWDG_Init+0x34>)
 8001212:	4a0c      	ldr	r2, [pc, #48]	; (8001244 <MX_IWDG_Init+0x38>)
 8001214:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 8001216:	4b0a      	ldr	r3, [pc, #40]	; (8001240 <MX_IWDG_Init+0x34>)
 8001218:	2204      	movs	r2, #4
 800121a:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 800121c:	4b08      	ldr	r3, [pc, #32]	; (8001240 <MX_IWDG_Init+0x34>)
 800121e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001222:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 8001224:	4b06      	ldr	r3, [pc, #24]	; (8001240 <MX_IWDG_Init+0x34>)
 8001226:	f640 72ff 	movw	r2, #4095	; 0xfff
 800122a:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800122c:	4804      	ldr	r0, [pc, #16]	; (8001240 <MX_IWDG_Init+0x34>)
 800122e:	f003 face 	bl	80047ce <HAL_IWDG_Init>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8001238:	f000 ffc2 	bl	80021c0 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 800123c:	bf00      	nop
 800123e:	bd80      	pop	{r7, pc}
 8001240:	20000254 	.word	0x20000254
 8001244:	40003000 	.word	0x40003000

08001248 <lcd_cmd>:
		CMD(0xf6), 0x00,
		CMD(ST7735S_COLMOD), 0x05,
		CMD(ST7735S_MADCTL), 0xa0
};

static void lcd_cmd(uint8_t cmd){
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8001252:	2200      	movs	r2, #0
 8001254:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001258:	480c      	ldr	r0, [pc, #48]	; (800128c <lcd_cmd+0x44>)
 800125a:	f002 f939 	bl	80034d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 800125e:	2200      	movs	r2, #0
 8001260:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001264:	4809      	ldr	r0, [pc, #36]	; (800128c <lcd_cmd+0x44>)
 8001266:	f002 f933 	bl	80034d0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &cmd, 1, HAL_MAX_DELAY);
 800126a:	1df9      	adds	r1, r7, #7
 800126c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001270:	2201      	movs	r2, #1
 8001272:	4807      	ldr	r0, [pc, #28]	; (8001290 <lcd_cmd+0x48>)
 8001274:	f005 fb7d 	bl	8006972 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001278:	2201      	movs	r2, #1
 800127a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800127e:	4803      	ldr	r0, [pc, #12]	; (800128c <lcd_cmd+0x44>)
 8001280:	f002 f926 	bl	80034d0 <HAL_GPIO_WritePin>
}
 8001284:	bf00      	nop
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	48000400 	.word	0x48000400
 8001290:	20000380 	.word	0x20000380

08001294 <lcd_data>:

static void lcd_data(uint8_t data){
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	4603      	mov	r3, r0
 800129c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 800129e:	2201      	movs	r2, #1
 80012a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012a4:	480c      	ldr	r0, [pc, #48]	; (80012d8 <lcd_data+0x44>)
 80012a6:	f002 f913 	bl	80034d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80012aa:	2200      	movs	r2, #0
 80012ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012b0:	4809      	ldr	r0, [pc, #36]	; (80012d8 <lcd_data+0x44>)
 80012b2:	f002 f90d 	bl	80034d0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &data, 1, HAL_MAX_DELAY);
 80012b6:	1df9      	adds	r1, r7, #7
 80012b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012bc:	2201      	movs	r2, #1
 80012be:	4807      	ldr	r0, [pc, #28]	; (80012dc <lcd_data+0x48>)
 80012c0:	f005 fb57 	bl	8006972 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 80012c4:	2201      	movs	r2, #1
 80012c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012ca:	4803      	ldr	r0, [pc, #12]	; (80012d8 <lcd_data+0x44>)
 80012cc:	f002 f900 	bl	80034d0 <HAL_GPIO_WritePin>
}
 80012d0:	bf00      	nop
 80012d2:	3708      	adds	r7, #8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	48000400 	.word	0x48000400
 80012dc:	20000380 	.word	0x20000380

080012e0 <lcd_send>:

static void lcd_send(uint16_t value){
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	80fb      	strh	r3, [r7, #6]
	if(value & 0x100){
 80012ea:	88fb      	ldrh	r3, [r7, #6]
 80012ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d005      	beq.n	8001300 <lcd_send+0x20>
		lcd_cmd(value);
 80012f4:	88fb      	ldrh	r3, [r7, #6]
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff ffa5 	bl	8001248 <lcd_cmd>
	} else{
		lcd_data(value);
	}
}
 80012fe:	e004      	b.n	800130a <lcd_send+0x2a>
		lcd_data(value);
 8001300:	88fb      	ldrh	r3, [r7, #6]
 8001302:	b2db      	uxtb	r3, r3
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff ffc5 	bl	8001294 <lcd_data>
}
 800130a:	bf00      	nop
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <lcd_data16>:

static void lcd_data16(uint16_t value){
 8001312:	b580      	push	{r7, lr}
 8001314:	b082      	sub	sp, #8
 8001316:	af00      	add	r7, sp, #0
 8001318:	4603      	mov	r3, r0
 800131a:	80fb      	strh	r3, [r7, #6]
	lcd_data(value >> 8);
 800131c:	88fb      	ldrh	r3, [r7, #6]
 800131e:	0a1b      	lsrs	r3, r3, #8
 8001320:	b29b      	uxth	r3, r3
 8001322:	b2db      	uxtb	r3, r3
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff ffb5 	bl	8001294 <lcd_data>
	lcd_data(value);
 800132a:	88fb      	ldrh	r3, [r7, #6]
 800132c:	b2db      	uxtb	r3, r3
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff ffb0 	bl	8001294 <lcd_data>
}
 8001334:	bf00      	nop
 8001336:	3708      	adds	r7, #8
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}

0800133c <lcd_set_window>:

static void lcd_set_window(int x, int y, int width, int height){
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	607a      	str	r2, [r7, #4]
 8001348:	603b      	str	r3, [r7, #0]
	lcd_cmd(ST7735S_CASET);
 800134a:	202a      	movs	r0, #42	; 0x2a
 800134c:	f7ff ff7c 	bl	8001248 <lcd_cmd>
	lcd_data16(LCD_OFFSET_X + x);
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	b29b      	uxth	r3, r3
 8001354:	3301      	adds	r3, #1
 8001356:	b29b      	uxth	r3, r3
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff ffda 	bl	8001312 <lcd_data16>
	lcd_data16(LCD_OFFSET_X + x + width - 1);
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	b29a      	uxth	r2, r3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	b29b      	uxth	r3, r3
 8001366:	4413      	add	r3, r2
 8001368:	b29b      	uxth	r3, r3
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff ffd1 	bl	8001312 <lcd_data16>

	lcd_cmd(ST7735S_RASET);
 8001370:	202b      	movs	r0, #43	; 0x2b
 8001372:	f7ff ff69 	bl	8001248 <lcd_cmd>
	lcd_data16(LCD_OFFSET_Y + y);
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	b29b      	uxth	r3, r3
 800137a:	3302      	adds	r3, #2
 800137c:	b29b      	uxth	r3, r3
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff ffc7 	bl	8001312 <lcd_data16>
	lcd_data16(LCD_OFFSET_Y + y + height -1);
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	b29a      	uxth	r2, r3
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	b29b      	uxth	r3, r3
 800138c:	4413      	add	r3, r2
 800138e:	b29b      	uxth	r3, r3
 8001390:	3301      	adds	r3, #1
 8001392:	b29b      	uxth	r3, r3
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff ffbc 	bl	8001312 <lcd_data16>

}
 800139a:	bf00      	nop
 800139c:	3710      	adds	r7, #16
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <lcd_fill_box>:

void lcd_fill_box(int x, int y, int width, int height, uint16_t color){
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b086      	sub	sp, #24
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	60f8      	str	r0, [r7, #12]
 80013aa:	60b9      	str	r1, [r7, #8]
 80013ac:	607a      	str	r2, [r7, #4]
 80013ae:	603b      	str	r3, [r7, #0]
	lcd_set_window(x, y, width, height);
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	68b9      	ldr	r1, [r7, #8]
 80013b6:	68f8      	ldr	r0, [r7, #12]
 80013b8:	f7ff ffc0 	bl	800133c <lcd_set_window>

	lcd_cmd(ST7735S_RAMWR);
 80013bc:	202c      	movs	r0, #44	; 0x2c
 80013be:	f7ff ff43 	bl	8001248 <lcd_cmd>
	for(int i=0; i< width * height; i++)
 80013c2:	2300      	movs	r3, #0
 80013c4:	617b      	str	r3, [r7, #20]
 80013c6:	e006      	b.n	80013d6 <lcd_fill_box+0x34>
		lcd_data16(color);
 80013c8:	8c3b      	ldrh	r3, [r7, #32]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff ffa1 	bl	8001312 <lcd_data16>
	for(int i=0; i< width * height; i++)
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	3301      	adds	r3, #1
 80013d4:	617b      	str	r3, [r7, #20]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	683a      	ldr	r2, [r7, #0]
 80013da:	fb02 f303 	mul.w	r3, r2, r3
 80013de:	697a      	ldr	r2, [r7, #20]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	dbf1      	blt.n	80013c8 <lcd_fill_box+0x26>
}
 80013e4:	bf00      	nop
 80013e6:	bf00      	nop
 80013e8:	3718      	adds	r7, #24
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
	...

080013f0 <lcd_init>:
	lcd_cmd(ST7735S_SLPOUT);
	HAL_Delay(120);
}


void lcd_init(void){
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
	int i;
	HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 80013f6:	2200      	movs	r2, #0
 80013f8:	2104      	movs	r1, #4
 80013fa:	4817      	ldr	r0, [pc, #92]	; (8001458 <lcd_init+0x68>)
 80013fc:	f002 f868 	bl	80034d0 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001400:	2064      	movs	r0, #100	; 0x64
 8001402:	f001 fb0f 	bl	8002a24 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 8001406:	2201      	movs	r2, #1
 8001408:	2104      	movs	r1, #4
 800140a:	4813      	ldr	r0, [pc, #76]	; (8001458 <lcd_init+0x68>)
 800140c:	f002 f860 	bl	80034d0 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001410:	2064      	movs	r0, #100	; 0x64
 8001412:	f001 fb07 	bl	8002a24 <HAL_Delay>

	for(i=0; i< sizeof init_table / sizeof (uint16_t); i++){
 8001416:	2300      	movs	r3, #0
 8001418:	607b      	str	r3, [r7, #4]
 800141a:	e009      	b.n	8001430 <lcd_init+0x40>
		lcd_send(init_table[i]);
 800141c:	4a0f      	ldr	r2, [pc, #60]	; (800145c <lcd_init+0x6c>)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff ff5b 	bl	80012e0 <lcd_send>
	for(i=0; i< sizeof init_table / sizeof (uint16_t); i++){
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	3301      	adds	r3, #1
 800142e:	607b      	str	r3, [r7, #4]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2b4b      	cmp	r3, #75	; 0x4b
 8001434:	d9f2      	bls.n	800141c <lcd_init+0x2c>
	}

	HAL_Delay(200);
 8001436:	20c8      	movs	r0, #200	; 0xc8
 8001438:	f001 faf4 	bl	8002a24 <HAL_Delay>
	lcd_cmd(ST7735S_SLPOUT);
 800143c:	2011      	movs	r0, #17
 800143e:	f7ff ff03 	bl	8001248 <lcd_cmd>
	HAL_Delay(120);
 8001442:	2078      	movs	r0, #120	; 0x78
 8001444:	f001 faee 	bl	8002a24 <HAL_Delay>
	lcd_cmd(ST7735S_DISPON);
 8001448:	2029      	movs	r0, #41	; 0x29
 800144a:	f7ff fefd 	bl	8001248 <lcd_cmd>
}
 800144e:	bf00      	nop
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	48000400 	.word	0x48000400
 800145c:	0800eae0 	.word	0x0800eae0

08001460 <lcd_draw_point>:
void lcd_invoff(){
	lcd_cmd(ST7735S_INVOFF);
}


void lcd_draw_point(int x, int y, uint16_t color){
 8001460:	b580      	push	{r7, lr}
 8001462:	b086      	sub	sp, #24
 8001464:	af02      	add	r7, sp, #8
 8001466:	60f8      	str	r0, [r7, #12]
 8001468:	60b9      	str	r1, [r7, #8]
 800146a:	4613      	mov	r3, r2
 800146c:	80fb      	strh	r3, [r7, #6]
	lcd_fill_box(x, y, 1, 1, color);
 800146e:	88fb      	ldrh	r3, [r7, #6]
 8001470:	9300      	str	r3, [sp, #0]
 8001472:	2301      	movs	r3, #1
 8001474:	2201      	movs	r2, #1
 8001476:	68b9      	ldr	r1, [r7, #8]
 8001478:	68f8      	ldr	r0, [r7, #12]
 800147a:	f7ff ff92 	bl	80013a2 <lcd_fill_box>
}
 800147e:	bf00      	nop
 8001480:	3710      	adds	r7, #16
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
	...

08001488 <lcd_draw_image_fast>:
			array_counter++;
			lcd_colorize_pixel(ix, iy, mcolor);
		}
}

void lcd_draw_image_fast(int x, int y, int width, int height, uint8_t *data){
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	60f8      	str	r0, [r7, #12]
 8001490:	60b9      	str	r1, [r7, #8]
 8001492:	607a      	str	r2, [r7, #4]
 8001494:	603b      	str	r3, [r7, #0]

	lcd_cmd(ST7735S_CASET);
 8001496:	202a      	movs	r0, #42	; 0x2a
 8001498:	f7ff fed6 	bl	8001248 <lcd_cmd>
	lcd_data16(x);
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	b29b      	uxth	r3, r3
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff ff36 	bl	8001312 <lcd_data16>
	lcd_data16(x+width-1);
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	b29a      	uxth	r2, r3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	b29b      	uxth	r3, r3
 80014ae:	4413      	add	r3, r2
 80014b0:	b29b      	uxth	r3, r3
 80014b2:	3b01      	subs	r3, #1
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7ff ff2b 	bl	8001312 <lcd_data16>

	lcd_cmd(ST7735S_RASET);
 80014bc:	202b      	movs	r0, #43	; 0x2b
 80014be:	f7ff fec3 	bl	8001248 <lcd_cmd>
	lcd_data16(y);
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	b29b      	uxth	r3, r3
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff ff23 	bl	8001312 <lcd_data16>
	lcd_data16(y+height-1);
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	b29a      	uxth	r2, r3
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	b29b      	uxth	r3, r3
 80014d4:	4413      	add	r3, r2
 80014d6:	b29b      	uxth	r3, r3
 80014d8:	3b01      	subs	r3, #1
 80014da:	b29b      	uxth	r3, r3
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff ff18 	bl	8001312 <lcd_data16>

	lcd_cmd(ST7735S_RAMWR);
 80014e2:	202c      	movs	r0, #44	; 0x2c
 80014e4:	f7ff feb0 	bl	8001248 <lcd_cmd>
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 80014e8:	2201      	movs	r2, #1
 80014ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014ee:	4811      	ldr	r0, [pc, #68]	; (8001534 <lcd_draw_image_fast+0xac>)
 80014f0:	f001 ffee 	bl	80034d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80014f4:	2200      	movs	r2, #0
 80014f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014fa:	480e      	ldr	r0, [pc, #56]	; (8001534 <lcd_draw_image_fast+0xac>)
 80014fc:	f001 ffe8 	bl	80034d0 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi2, data, width*height*2, HAL_MAX_DELAY);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	b29a      	uxth	r2, r3
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	b29b      	uxth	r3, r3
 8001508:	fb12 f303 	smulbb	r3, r2, r3
 800150c:	b29b      	uxth	r3, r3
 800150e:	005b      	lsls	r3, r3, #1
 8001510:	b29a      	uxth	r2, r3
 8001512:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001516:	69b9      	ldr	r1, [r7, #24]
 8001518:	4807      	ldr	r0, [pc, #28]	; (8001538 <lcd_draw_image_fast+0xb0>)
 800151a:	f005 fa2a 	bl	8006972 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 800151e:	2201      	movs	r2, #1
 8001520:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001524:	4803      	ldr	r0, [pc, #12]	; (8001534 <lcd_draw_image_fast+0xac>)
 8001526:	f001 ffd3 	bl	80034d0 <HAL_GPIO_WritePin>
}
 800152a:	bf00      	nop
 800152c:	3710      	adds	r7, #16
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	48000400 	.word	0x48000400
 8001538:	20000380 	.word	0x20000380

0800153c <lps_write_to_reg>:
 * \param	reg adres rejestru
 * \param	data byte danych do zapisania
 * \return	status transmisji
 *
 */
static HAL_StatusTypeDef lps_write_to_reg(uint8_t reg, uint8_t data){
 800153c:	b580      	push	{r7, lr}
 800153e:	b086      	sub	sp, #24
 8001540:	af02      	add	r7, sp, #8
 8001542:	4603      	mov	r3, r0
 8001544:	460a      	mov	r2, r1
 8001546:	71fb      	strb	r3, [r7, #7]
 8001548:	4613      	mov	r3, r2
 800154a:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef status;
	uint8_t buffer[2] = {reg, data};
 800154c:	79fb      	ldrb	r3, [r7, #7]
 800154e:	733b      	strb	r3, [r7, #12]
 8001550:	79bb      	ldrb	r3, [r7, #6]
 8001552:	737b      	strb	r3, [r7, #13]

    status = HAL_I2C_Master_Transmit(&hi2c1, LPS25HB_ADDR, buffer, sizeof buffer, HAL_MAX_DELAY);
 8001554:	f107 020c 	add.w	r2, r7, #12
 8001558:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800155c:	9300      	str	r3, [sp, #0]
 800155e:	2302      	movs	r3, #2
 8001560:	21ba      	movs	r1, #186	; 0xba
 8001562:	4805      	ldr	r0, [pc, #20]	; (8001578 <lps_write_to_reg+0x3c>)
 8001564:	f002 f85c 	bl	8003620 <HAL_I2C_Master_Transmit>
 8001568:	4603      	mov	r3, r0
 800156a:	73fb      	strb	r3, [r7, #15]
	return status;
 800156c:	7bfb      	ldrb	r3, [r7, #15]
}
 800156e:	4618      	mov	r0, r3
 8001570:	3710      	adds	r7, #16
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	20000200 	.word	0x20000200

0800157c <lps_read_from_reg>:
 * \param	data odczyt zostanie zapisany pod wskazywanym adresem
 *
 * \return status transmisji (nie rozróżnia czy status dotyczy transmisji o dostep do rejestru, czy statusu odczytu z rejestru)
 *
 */
static HAL_StatusTypeDef lps_read_from_reg(uint8_t reg, uint8_t* data_ptr){
 800157c:	b580      	push	{r7, lr}
 800157e:	b086      	sub	sp, #24
 8001580:	af02      	add	r7, sp, #8
 8001582:	4603      	mov	r3, r0
 8001584:	6039      	str	r1, [r7, #0]
 8001586:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef status;
	if((status = HAL_I2C_Master_Transmit(&hi2c1, LPS25HB_ADDR, &reg, sizeof reg, HAL_MAX_DELAY))!=HAL_OK)
 8001588:	1dfa      	adds	r2, r7, #7
 800158a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800158e:	9300      	str	r3, [sp, #0]
 8001590:	2301      	movs	r3, #1
 8001592:	21ba      	movs	r1, #186	; 0xba
 8001594:	480c      	ldr	r0, [pc, #48]	; (80015c8 <lps_read_from_reg+0x4c>)
 8001596:	f002 f843 	bl	8003620 <HAL_I2C_Master_Transmit>
 800159a:	4603      	mov	r3, r0
 800159c:	73fb      	strb	r3, [r7, #15]
 800159e:	7bfb      	ldrb	r3, [r7, #15]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <lps_read_from_reg+0x2c>
		return status;
 80015a4:	7bfb      	ldrb	r3, [r7, #15]
 80015a6:	e00b      	b.n	80015c0 <lps_read_from_reg+0x44>
	status = HAL_I2C_Master_Receive(&hi2c1, LPS25HB_ADDR, data_ptr, sizeof data_ptr, HAL_MAX_DELAY);
 80015a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015ac:	9300      	str	r3, [sp, #0]
 80015ae:	2304      	movs	r3, #4
 80015b0:	683a      	ldr	r2, [r7, #0]
 80015b2:	21ba      	movs	r1, #186	; 0xba
 80015b4:	4804      	ldr	r0, [pc, #16]	; (80015c8 <lps_read_from_reg+0x4c>)
 80015b6:	f002 f927 	bl	8003808 <HAL_I2C_Master_Receive>
 80015ba:	4603      	mov	r3, r0
 80015bc:	73fb      	strb	r3, [r7, #15]
	return status;
 80015be:	7bfb      	ldrb	r3, [r7, #15]
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3710      	adds	r7, #16
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	20000200 	.word	0x20000200

080015cc <lps_init>:


void lps_init(){
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
	// wlacz urzadzenie i ustaw czestotliwosc pomiaru na 25Hz
	lps_write_to_reg(CTRL_REG1, SET_CTRL_REG1_PD|SET_CTRL_REG1_ODR2);
 80015d0:	21c0      	movs	r1, #192	; 0xc0
 80015d2:	2020      	movs	r0, #32
 80015d4:	f7ff ffb2 	bl	800153c <lps_write_to_reg>

	// przy problemach z odczytem danych dodac oczekiwanie 100 ms

	// aktywacja i ustawienie fifo dla pomiarow
	lps_write_to_reg(CTRL_REG2,SET_CTRL_REG2_FIFO);
 80015d8:	2140      	movs	r1, #64	; 0x40
 80015da:	2021      	movs	r0, #33	; 0x21
 80015dc:	f7ff ffae 	bl	800153c <lps_write_to_reg>
	lps_write_to_reg(FIFO_CTRL, SET_FIFO_CTRL_MEAN_MODE|SET_FIFO_CTRL_WTM_32_SMPL);
 80015e0:	21cf      	movs	r1, #207	; 0xcf
 80015e2:	202e      	movs	r0, #46	; 0x2e
 80015e4:	f7ff ffaa 	bl	800153c <lps_write_to_reg>

}
 80015e8:	bf00      	nop
 80015ea:	bd80      	pop	{r7, pc}

080015ec <lps_read_temperature>:

float lps_read_temperature(float temp_conv){
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	ed87 0a01 	vstr	s0, [r7, #4]
	uint8_t *ptr_lsb, *ptr_msb;
	ptr_lsb = malloc(sizeof(uint8_t));
 80015f6:	2001      	movs	r0, #1
 80015f8:	f007 ffd0 	bl	800959c <malloc>
 80015fc:	4603      	mov	r3, r0
 80015fe:	617b      	str	r3, [r7, #20]
	ptr_msb = malloc(sizeof(uint8_t));
 8001600:	2001      	movs	r0, #1
 8001602:	f007 ffcb 	bl	800959c <malloc>
 8001606:	4603      	mov	r3, r0
 8001608:	613b      	str	r3, [r7, #16]
	lps_read_from_reg(TEMP_OUT_L, ptr_lsb);
 800160a:	6979      	ldr	r1, [r7, #20]
 800160c:	202b      	movs	r0, #43	; 0x2b
 800160e:	f7ff ffb5 	bl	800157c <lps_read_from_reg>
	lps_read_from_reg(TEMP_OUT_H, ptr_msb);
 8001612:	6939      	ldr	r1, [r7, #16]
 8001614:	202c      	movs	r0, #44	; 0x2c
 8001616:	f7ff ffb1 	bl	800157c <lps_read_from_reg>
    int16_t val = *ptr_lsb + (*ptr_msb <<8);
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	b29a      	uxth	r2, r3
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	b29b      	uxth	r3, r3
 8001626:	021b      	lsls	r3, r3, #8
 8001628:	b29b      	uxth	r3, r3
 800162a:	4413      	add	r3, r2
 800162c:	b29b      	uxth	r3, r3
 800162e:	81fb      	strh	r3, [r7, #14]

    free(ptr_lsb);
 8001630:	6978      	ldr	r0, [r7, #20]
 8001632:	f007 ffbb 	bl	80095ac <free>
    free(ptr_msb);
 8001636:	6938      	ldr	r0, [r7, #16]
 8001638:	f007 ffb8 	bl	80095ac <free>

	return 42.5f + val / 480.0f + temp_conv;
 800163c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001640:	ee07 3a90 	vmov	s15, r3
 8001644:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001648:	eddf 6a08 	vldr	s13, [pc, #32]	; 800166c <lps_read_temperature+0x80>
 800164c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001650:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001670 <lps_read_temperature+0x84>
 8001654:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001658:	edd7 7a01 	vldr	s15, [r7, #4]
 800165c:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001660:	eeb0 0a67 	vmov.f32	s0, s15
 8001664:	3718      	adds	r7, #24
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	43f00000 	.word	0x43f00000
 8001670:	422a0000 	.word	0x422a0000

08001674 <lps_pressure_correction>:

void lps_pressure_correction(uint16_t offset){
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	4603      	mov	r3, r0
 800167c:	80fb      	strh	r3, [r7, #6]
	lps_write_to_reg(RPDS_L, offset);
 800167e:	88fb      	ldrh	r3, [r7, #6]
 8001680:	b2db      	uxtb	r3, r3
 8001682:	4619      	mov	r1, r3
 8001684:	2039      	movs	r0, #57	; 0x39
 8001686:	f7ff ff59 	bl	800153c <lps_write_to_reg>
	lps_write_to_reg(RPDS_H, offset >> 8);
 800168a:	88fb      	ldrh	r3, [r7, #6]
 800168c:	0a1b      	lsrs	r3, r3, #8
 800168e:	b29b      	uxth	r3, r3
 8001690:	b2db      	uxtb	r3, r3
 8001692:	4619      	mov	r1, r3
 8001694:	203a      	movs	r0, #58	; 0x3a
 8001696:	f7ff ff51 	bl	800153c <lps_write_to_reg>
}
 800169a:	bf00      	nop
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <lps_read_absolute_pressure>:


float lps_read_absolute_pressure(){
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b082      	sub	sp, #8
 80016a6:	af00      	add	r7, sp, #0
	uint8_t *pressure = malloc(sizeof(uint8_t)*3);
 80016a8:	2003      	movs	r0, #3
 80016aa:	f007 ff77 	bl	800959c <malloc>
 80016ae:	4603      	mov	r3, r0
 80016b0:	607b      	str	r3, [r7, #4]
	lps_read_from_reg(PRESS_OUT_XL, pressure);
 80016b2:	6879      	ldr	r1, [r7, #4]
 80016b4:	2028      	movs	r0, #40	; 0x28
 80016b6:	f7ff ff61 	bl	800157c <lps_read_from_reg>
	lps_read_from_reg(PRESS_OUT_L, pressure+1);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	3301      	adds	r3, #1
 80016be:	4619      	mov	r1, r3
 80016c0:	2029      	movs	r0, #41	; 0x29
 80016c2:	f7ff ff5b 	bl	800157c <lps_read_from_reg>
	lps_read_from_reg(PRESS_OUT_H, pressure+2);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	3302      	adds	r3, #2
 80016ca:	4619      	mov	r1, r3
 80016cc:	202a      	movs	r0, #42	; 0x2a
 80016ce:	f7ff ff55 	bl	800157c <lps_read_from_reg>

	int32_t val = (*pressure + (*(pressure+1)<<8) + (*(pressure+2)<<16))/4096;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	461a      	mov	r2, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	3301      	adds	r3, #1
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	021b      	lsls	r3, r3, #8
 80016e0:	441a      	add	r2, r3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	3302      	adds	r3, #2
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	041b      	lsls	r3, r3, #16
 80016ea:	4413      	add	r3, r2
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	da01      	bge.n	80016f4 <lps_read_absolute_pressure+0x52>
 80016f0:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80016f4:	131b      	asrs	r3, r3, #12
 80016f6:	603b      	str	r3, [r7, #0]
	free(pressure);
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f007 ff57 	bl	80095ac <free>
	return val;
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	ee07 3a90 	vmov	s15, r3
 8001704:	eef8 7ae7 	vcvt.f32.s32	s15, s15

}
 8001708:	eeb0 0a67 	vmov.f32	s0, s15
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	0000      	movs	r0, r0
 8001714:	0000      	movs	r0, r0
	...

08001718 <lps_read_relative_pressure>:

float lps_read_relative_pressure(){
 8001718:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800171c:	b084      	sub	sp, #16
 800171e:	af00      	add	r7, sp, #0
	const float h = 93; // jesli inna wysokosc to zmienic;
 8001720:	4b25      	ldr	r3, [pc, #148]	; (80017b8 <lps_read_relative_pressure+0xa0>)
 8001722:	60fb      	str	r3, [r7, #12]
	float temp_K = lps_read_temperature(U_KELVIN);
 8001724:	ed9f 0a25 	vldr	s0, [pc, #148]	; 80017bc <lps_read_relative_pressure+0xa4>
 8001728:	f7ff ff60 	bl	80015ec <lps_read_temperature>
 800172c:	ed87 0a02 	vstr	s0, [r7, #8]
	float abs_press = lps_read_absolute_pressure();
 8001730:	f7ff ffb7 	bl	80016a2 <lps_read_absolute_pressure>
 8001734:	ed87 0a01 	vstr	s0, [r7, #4]

	return abs_press * exp(0.034162608734308*h / temp_K);
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f7fe ff15 	bl	8000568 <__aeabi_f2d>
 800173e:	4604      	mov	r4, r0
 8001740:	460d      	mov	r5, r1
 8001742:	68f8      	ldr	r0, [r7, #12]
 8001744:	f7fe ff10 	bl	8000568 <__aeabi_f2d>
 8001748:	a319      	add	r3, pc, #100	; (adr r3, 80017b0 <lps_read_relative_pressure+0x98>)
 800174a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800174e:	f7fe ff63 	bl	8000618 <__aeabi_dmul>
 8001752:	4602      	mov	r2, r0
 8001754:	460b      	mov	r3, r1
 8001756:	4690      	mov	r8, r2
 8001758:	4699      	mov	r9, r3
 800175a:	68b8      	ldr	r0, [r7, #8]
 800175c:	f7fe ff04 	bl	8000568 <__aeabi_f2d>
 8001760:	4602      	mov	r2, r0
 8001762:	460b      	mov	r3, r1
 8001764:	4640      	mov	r0, r8
 8001766:	4649      	mov	r1, r9
 8001768:	f7ff f880 	bl	800086c <__aeabi_ddiv>
 800176c:	4602      	mov	r2, r0
 800176e:	460b      	mov	r3, r1
 8001770:	ec43 2b17 	vmov	d7, r2, r3
 8001774:	eeb0 0a47 	vmov.f32	s0, s14
 8001778:	eef0 0a67 	vmov.f32	s1, s15
 800177c:	f00b fef8 	bl	800d570 <exp>
 8001780:	ec53 2b10 	vmov	r2, r3, d0
 8001784:	4620      	mov	r0, r4
 8001786:	4629      	mov	r1, r5
 8001788:	f7fe ff46 	bl	8000618 <__aeabi_dmul>
 800178c:	4602      	mov	r2, r0
 800178e:	460b      	mov	r3, r1
 8001790:	4610      	mov	r0, r2
 8001792:	4619      	mov	r1, r3
 8001794:	f7ff fa18 	bl	8000bc8 <__aeabi_d2f>
 8001798:	4603      	mov	r3, r0
 800179a:	ee07 3a90 	vmov	s15, r3
}
 800179e:	eeb0 0a67 	vmov.f32	s0, s15
 80017a2:	3710      	adds	r7, #16
 80017a4:	46bd      	mov	sp, r7
 80017a6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80017aa:	bf00      	nop
 80017ac:	f3af 8000 	nop.w
 80017b0:	ee851132 	.word	0xee851132
 80017b4:	3fa17dc2 	.word	0x3fa17dc2
 80017b8:	42ba0000 	.word	0x42ba0000
 80017bc:	43889333 	.word	0x43889333

080017c0 <lps_get_altitude_hyps_f>:

float lps_get_altitude_hyps_f(){
 80017c0:	b5b0      	push	{r4, r5, r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0

	float p0 = lps_read_relative_pressure(); // sea-level pressure
 80017c6:	f7ff ffa7 	bl	8001718 <lps_read_relative_pressure>
 80017ca:	ed87 0a03 	vstr	s0, [r7, #12]
    float p = lps_read_absolute_pressure(); // pressure at location
 80017ce:	f7ff ff68 	bl	80016a2 <lps_read_absolute_pressure>
 80017d2:	ed87 0a02 	vstr	s0, [r7, #8]
    float temp_K = lps_read_temperature(U_KELVIN);
 80017d6:	ed9f 0a26 	vldr	s0, [pc, #152]	; 8001870 <lps_get_altitude_hyps_f+0xb0>
 80017da:	f7ff ff07 	bl	80015ec <lps_read_temperature>
 80017de:	ed87 0a01 	vstr	s0, [r7, #4]

    float h = (( pow(p0/p, 1/5.257) - 1)*( temp_K ))/0.0065;
 80017e2:	ed97 7a03 	vldr	s14, [r7, #12]
 80017e6:	edd7 7a02 	vldr	s15, [r7, #8]
 80017ea:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80017ee:	ee16 0a90 	vmov	r0, s13
 80017f2:	f7fe feb9 	bl	8000568 <__aeabi_f2d>
 80017f6:	4602      	mov	r2, r0
 80017f8:	460b      	mov	r3, r1
 80017fa:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8001860 <lps_get_altitude_hyps_f+0xa0>
 80017fe:	ec43 2b10 	vmov	d0, r2, r3
 8001802:	f00b fefd 	bl	800d600 <pow>
 8001806:	ec51 0b10 	vmov	r0, r1, d0
 800180a:	f04f 0200 	mov.w	r2, #0
 800180e:	4b19      	ldr	r3, [pc, #100]	; (8001874 <lps_get_altitude_hyps_f+0xb4>)
 8001810:	f7fe fd4a 	bl	80002a8 <__aeabi_dsub>
 8001814:	4602      	mov	r2, r0
 8001816:	460b      	mov	r3, r1
 8001818:	4614      	mov	r4, r2
 800181a:	461d      	mov	r5, r3
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f7fe fea3 	bl	8000568 <__aeabi_f2d>
 8001822:	4602      	mov	r2, r0
 8001824:	460b      	mov	r3, r1
 8001826:	4620      	mov	r0, r4
 8001828:	4629      	mov	r1, r5
 800182a:	f7fe fef5 	bl	8000618 <__aeabi_dmul>
 800182e:	4602      	mov	r2, r0
 8001830:	460b      	mov	r3, r1
 8001832:	4610      	mov	r0, r2
 8001834:	4619      	mov	r1, r3
 8001836:	a30c      	add	r3, pc, #48	; (adr r3, 8001868 <lps_get_altitude_hyps_f+0xa8>)
 8001838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800183c:	f7ff f816 	bl	800086c <__aeabi_ddiv>
 8001840:	4602      	mov	r2, r0
 8001842:	460b      	mov	r3, r1
 8001844:	4610      	mov	r0, r2
 8001846:	4619      	mov	r1, r3
 8001848:	f7ff f9be 	bl	8000bc8 <__aeabi_d2f>
 800184c:	4603      	mov	r3, r0
 800184e:	603b      	str	r3, [r7, #0]

   	return h;
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	ee07 3a90 	vmov	s15, r3

}
 8001856:	eeb0 0a67 	vmov.f32	s0, s15
 800185a:	3710      	adds	r7, #16
 800185c:	46bd      	mov	sp, r7
 800185e:	bdb0      	pop	{r4, r5, r7, pc}
 8001860:	7dee2d4a 	.word	0x7dee2d4a
 8001864:	3fc85936 	.word	0x3fc85936
 8001868:	76c8b439 	.word	0x76c8b439
 800186c:	3f7a9fbe 	.word	0x3f7a9fbe
 8001870:	43889333 	.word	0x43889333
 8001874:	3ff00000 	.word	0x3ff00000

08001878 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001878:	b5b0      	push	{r4, r5, r7, lr}
 800187a:	b094      	sub	sp, #80	; 0x50
 800187c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  typedef enum prog_mode {live_mode, history_mode} prog_mode_t;
  prog_mode_t which_program = 1;
 800187e:	2301      	movs	r3, #1
 8001880:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001884:	f001 f852 	bl	800292c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001888:	f000 f8a6 	bl	80019d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800188c:	f7ff fb8c 	bl	8000fa8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001890:	f7ff fc1e 	bl	80010d0 <MX_I2C1_Init>
  MX_SPI2_Init();
 8001894:	f000 fd64 	bl	8002360 <MX_SPI2_Init>
  MX_DMA_Init();
 8001898:	f7ff fb68 	bl	8000f6c <MX_DMA_Init>
  MX_IWDG_Init();
 800189c:	f7ff fcb6 	bl	800120c <MX_IWDG_Init>
  MX_USART1_UART_Init();
 80018a0:	f000 ff42 	bl	8002728 <MX_USART1_UART_Init>
  MX_RTC_Init();
 80018a4:	f000 fc92 	bl	80021cc <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  checkFlags();
 80018a8:	f000 faba 	bl	8001e20 <checkFlags>
  lps_init();
 80018ac:	f7ff fe8e 	bl	80015cc <lps_init>
  lps_pressure_correction(48);
 80018b0:	2030      	movs	r0, #48	; 0x30
 80018b2:	f7ff fedf 	bl	8001674 <lps_pressure_correction>
  printf("\r\n\n *** URUCHOMIENIE URZADZENIA *** \r\n\n");
 80018b6:	483d      	ldr	r0, [pc, #244]	; (80019ac <main+0x134>)
 80018b8:	f008 fc7c 	bl	800a1b4 <puts>
  printf("UART pracuje poprawnie\r\n");
 80018bc:	483c      	ldr	r0, [pc, #240]	; (80019b0 <main+0x138>)
 80018be:	f008 fc79 	bl	800a1b4 <puts>
  printf("Testowy odczyt temperatury= %.2f\r\n", lps_read_temperature(U_CELSIUS));
 80018c2:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 80019b4 <main+0x13c>
 80018c6:	f7ff fe91 	bl	80015ec <lps_read_temperature>
 80018ca:	ee10 3a10 	vmov	r3, s0
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7fe fe4a 	bl	8000568 <__aeabi_f2d>
 80018d4:	4602      	mov	r2, r0
 80018d6:	460b      	mov	r3, r1
 80018d8:	4837      	ldr	r0, [pc, #220]	; (80019b8 <main+0x140>)
 80018da:	f008 fbcf 	bl	800a07c <iprintf>
  printf("Testowy odczyt cisnienia= %.2f\r\n", lps_read_relative_pressure());
 80018de:	f7ff ff1b 	bl	8001718 <lps_read_relative_pressure>
 80018e2:	ee10 3a10 	vmov	r3, s0
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7fe fe3e 	bl	8000568 <__aeabi_f2d>
 80018ec:	4602      	mov	r2, r0
 80018ee:	460b      	mov	r3, r1
 80018f0:	4832      	ldr	r0, [pc, #200]	; (80019bc <main+0x144>)
 80018f2:	f008 fbc3 	bl	800a07c <iprintf>
  printf("Testowy odczyt wysokosci= %.2f\r\n", lps_get_altitude_hyps_f());
 80018f6:	f7ff ff63 	bl	80017c0 <lps_get_altitude_hyps_f>
 80018fa:	ee10 3a10 	vmov	r3, s0
 80018fe:	4618      	mov	r0, r3
 8001900:	f7fe fe32 	bl	8000568 <__aeabi_f2d>
 8001904:	4602      	mov	r2, r0
 8001906:	460b      	mov	r3, r1
 8001908:	482d      	ldr	r0, [pc, #180]	; (80019c0 <main+0x148>)
 800190a:	f008 fbb7 	bl	800a07c <iprintf>
  lcd_init();
 800190e:	f7ff fd6f 	bl	80013f0 <lcd_init>
  hagl_init();
 8001912:	f007 fbdf 	bl	80090d4 <hagl_init>

  HAL_UART_Receive_DMA(&huart1, rx_buf, 1);
 8001916:	2201      	movs	r2, #1
 8001918:	492a      	ldr	r1, [pc, #168]	; (80019c4 <main+0x14c>)
 800191a:	482b      	ldr	r0, [pc, #172]	; (80019c8 <main+0x150>)
 800191c:	f005 fbde 	bl	80070dc <HAL_UART_Receive_DMA>

  lcd_fill_box(0, 0, LCD_WIDTH, LCD_HEIGHT, BLACK);
 8001920:	2300      	movs	r3, #0
 8001922:	9300      	str	r3, [sp, #0]
 8001924:	2380      	movs	r3, #128	; 0x80
 8001926:	22a0      	movs	r2, #160	; 0xa0
 8001928:	2100      	movs	r1, #0
 800192a:	2000      	movs	r0, #0
 800192c:	f7ff fd39 	bl	80013a2 <lcd_fill_box>

  uint8_t tmp_mes[HISTORY_NUMS*HISTORY_ROW_SIZE] =
 8001930:	4b26      	ldr	r3, [pc, #152]	; (80019cc <main+0x154>)
 8001932:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8001936:	461d      	mov	r5, r3
 8001938:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800193a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800193c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800193e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001940:	682b      	ldr	r3, [r5, #0]
 8001942:	461a      	mov	r2, r3
 8001944:	8022      	strh	r2, [r4, #0]
 8001946:	3402      	adds	r4, #2
 8001948:	0c1b      	lsrs	r3, r3, #16
 800194a:	7023      	strb	r3, [r4, #0]
						129,130,131, 132, 133, 134, 135
  	  	  	  	  	   };

  uint8_t tmp_mes2[HISTORY_NUMS*HISTORY_ROW_SIZE];

setDate(9, 7, 22);
 800194c:	2216      	movs	r2, #22
 800194e:	2107      	movs	r1, #7
 8001950:	2009      	movs	r0, #9
 8001952:	f000 fb97 	bl	8002084 <setDate>
setTime(14, 20);
 8001956:	2114      	movs	r1, #20
 8001958:	200e      	movs	r0, #14
 800195a:	f000 fbb1 	bl	80020c0 <setTime>

  printf("STOP\r\n");
 800195e:	481c      	ldr	r0, [pc, #112]	; (80019d0 <main+0x158>)
 8001960:	f008 fc28 	bl	800a1b4 <puts>
  save_history_to_eeprom(tmp_mes);
 8001964:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001968:	4618      	mov	r0, r3
 800196a:	f000 f9c3 	bl	8001cf4 <save_history_to_eeprom>
  load_history_from_eeprom(tmp_mes2);
 800196e:	463b      	mov	r3, r7
 8001970:	4618      	mov	r0, r3
 8001972:	f000 f997 	bl	8001ca4 <load_history_from_eeprom>
  printHistory(tmp_mes2);
 8001976:	463b      	mov	r3, r7
 8001978:	4618      	mov	r0, r3
 800197a:	f000 fa23 	bl	8001dc4 <printHistory>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	fflush_sc_buff();
 800197e:	f000 fa6f 	bl	8001e60 <fflush_sc_buff>

	switch(which_program){
 8001982:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001986:	2b00      	cmp	r3, #0
 8001988:	d002      	beq.n	8001990 <main+0x118>
 800198a:	2b01      	cmp	r3, #1
 800198c:	d003      	beq.n	8001996 <main+0x11e>
 800198e:	e005      	b.n	800199c <main+0x124>

		case live_mode:
			live_mode_prog();
 8001990:	f000 f876 	bl	8001a80 <live_mode_prog>
			break;
 8001994:	e002      	b.n	800199c <main+0x124>
		case history_mode:
			history_mode_prog();
 8001996:	f000 f8fb 	bl	8001b90 <history_mode_prog>
			break;
 800199a:	bf00      	nop

	}


	HAL_Delay(500);
 800199c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80019a0:	f001 f840 	bl	8002a24 <HAL_Delay>

	HAL_IWDG_Refresh(&hiwdg);
 80019a4:	480b      	ldr	r0, [pc, #44]	; (80019d4 <main+0x15c>)
 80019a6:	f002 ff61 	bl	800486c <HAL_IWDG_Refresh>
	fflush_sc_buff();
 80019aa:	e7e8      	b.n	800197e <main+0x106>
 80019ac:	0800e758 	.word	0x0800e758
 80019b0:	0800e780 	.word	0x0800e780
 80019b4:	00000000 	.word	0x00000000
 80019b8:	0800e798 	.word	0x0800e798
 80019bc:	0800e7bc 	.word	0x0800e7bc
 80019c0:	0800e7e0 	.word	0x0800e7e0
 80019c4:	20000264 	.word	0x20000264
 80019c8:	200003e8 	.word	0x200003e8
 80019cc:	0800e80c 	.word	0x0800e80c
 80019d0:	0800e804 	.word	0x0800e804
 80019d4:	20000254 	.word	0x20000254

080019d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b096      	sub	sp, #88	; 0x58
 80019dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019de:	f107 0314 	add.w	r3, r7, #20
 80019e2:	2244      	movs	r2, #68	; 0x44
 80019e4:	2100      	movs	r1, #0
 80019e6:	4618      	mov	r0, r3
 80019e8:	f007 fdf6 	bl	80095d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019ec:	463b      	mov	r3, r7
 80019ee:	2200      	movs	r2, #0
 80019f0:	601a      	str	r2, [r3, #0]
 80019f2:	605a      	str	r2, [r3, #4]
 80019f4:	609a      	str	r2, [r3, #8]
 80019f6:	60da      	str	r2, [r3, #12]
 80019f8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80019fa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80019fe:	f002 ff53 	bl	80048a8 <HAL_PWREx_ControlVoltageScaling>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001a08:	f000 fbda 	bl	80021c0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001a0c:	230a      	movs	r3, #10
 8001a0e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a14:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a16:	2310      	movs	r3, #16
 8001a18:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a1e:	2302      	movs	r3, #2
 8001a20:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a22:	2302      	movs	r3, #2
 8001a24:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001a26:	2301      	movs	r3, #1
 8001a28:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001a2a:	230a      	movs	r3, #10
 8001a2c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001a2e:	2307      	movs	r3, #7
 8001a30:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001a32:	2302      	movs	r3, #2
 8001a34:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001a36:	2302      	movs	r3, #2
 8001a38:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a3a:	f107 0314 	add.w	r3, r7, #20
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f002 ff88 	bl	8004954 <HAL_RCC_OscConfig>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <SystemClock_Config+0x76>
  {
    Error_Handler();
 8001a4a:	f000 fbb9 	bl	80021c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a4e:	230f      	movs	r3, #15
 8001a50:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a52:	2303      	movs	r3, #3
 8001a54:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a56:	2300      	movs	r3, #0
 8001a58:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001a62:	463b      	mov	r3, r7
 8001a64:	2104      	movs	r1, #4
 8001a66:	4618      	mov	r0, r3
 8001a68:	f003 fb50 	bl	800510c <HAL_RCC_ClockConfig>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001a72:	f000 fba5 	bl	80021c0 <Error_Handler>
  }
}
 8001a76:	bf00      	nop
 8001a78:	3758      	adds	r7, #88	; 0x58
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
	...

08001a80 <live_mode_prog>:

/* USER CODE BEGIN 4 */
void live_mode_prog(){
 8001a80:	b580      	push	{r7, lr}
 8001a82:	f5ad 6d97 	sub.w	sp, sp, #1208	; 0x4b8
 8001a86:	af02      	add	r7, sp, #8

	// Konwersja tekstow do Wide Chara
	wchar_t text[MAXTXTLEN], text2[MAXTXTLEN], text3[MAXTXTLEN];
	swprintf(text, MAXTXTLEN, L"Temperatura: %.2f C", lps_read_temperature(U_CELSIUS));
 8001a88:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8001b6c <live_mode_prog+0xec>
 8001a8c:	f7ff fdae 	bl	80015ec <lps_read_temperature>
 8001a90:	ee10 3a10 	vmov	r3, s0
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7fe fd67 	bl	8000568 <__aeabi_f2d>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	f507 7048 	add.w	r0, r7, #800	; 0x320
 8001aa2:	e9cd 2300 	strd	r2, r3, [sp]
 8001aa6:	4a32      	ldr	r2, [pc, #200]	; (8001b70 <live_mode_prog+0xf0>)
 8001aa8:	2164      	movs	r1, #100	; 0x64
 8001aaa:	f008 fc1f 	bl	800a2ec <swprintf>
	swprintf(text2, MAXTXTLEN, L"Cisnienie: %.2f Hpa", lps_read_relative_pressure());
 8001aae:	f7ff fe33 	bl	8001718 <lps_read_relative_pressure>
 8001ab2:	ee10 3a10 	vmov	r3, s0
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7fe fd56 	bl	8000568 <__aeabi_f2d>
 8001abc:	4602      	mov	r2, r0
 8001abe:	460b      	mov	r3, r1
 8001ac0:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 8001ac4:	e9cd 2300 	strd	r2, r3, [sp]
 8001ac8:	4a2a      	ldr	r2, [pc, #168]	; (8001b74 <live_mode_prog+0xf4>)
 8001aca:	2164      	movs	r1, #100	; 0x64
 8001acc:	f008 fc0e 	bl	800a2ec <swprintf>
	swprintf(text3, MAXTXTLEN, L"Wysokosc: %.0f m.n.p.m.", lps_get_altitude_hyps_f());
 8001ad0:	f7ff fe76 	bl	80017c0 <lps_get_altitude_hyps_f>
 8001ad4:	ee10 3a10 	vmov	r3, s0
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7fe fd45 	bl	8000568 <__aeabi_f2d>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	4638      	mov	r0, r7
 8001ae4:	e9cd 2300 	strd	r2, r3, [sp]
 8001ae8:	4a23      	ldr	r2, [pc, #140]	; (8001b78 <live_mode_prog+0xf8>)
 8001aea:	2164      	movs	r1, #100	; 0x64
 8001aec:	f008 fbfe 	bl	800a2ec <swprintf>

	hagl_put_text(text, 30, 17, RED, font6x9);
 8001af0:	f507 7048 	add.w	r0, r7, #800	; 0x320
 8001af4:	4b21      	ldr	r3, [pc, #132]	; (8001b7c <live_mode_prog+0xfc>)
 8001af6:	9300      	str	r3, [sp, #0]
 8001af8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001afc:	2211      	movs	r2, #17
 8001afe:	211e      	movs	r1, #30
 8001b00:	f007 fa35 	bl	8008f6e <hagl_put_text>
	hagl_put_text(text2, 30, 41, RED, font6x9);
 8001b04:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 8001b08:	4b1c      	ldr	r3, [pc, #112]	; (8001b7c <live_mode_prog+0xfc>)
 8001b0a:	9300      	str	r3, [sp, #0]
 8001b0c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001b10:	2229      	movs	r2, #41	; 0x29
 8001b12:	211e      	movs	r1, #30
 8001b14:	f007 fa2b 	bl	8008f6e <hagl_put_text>
	hagl_put_text(text3, 30, 70, RED, font6x9);
 8001b18:	4638      	mov	r0, r7
 8001b1a:	4b18      	ldr	r3, [pc, #96]	; (8001b7c <live_mode_prog+0xfc>)
 8001b1c:	9300      	str	r3, [sp, #0]
 8001b1e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001b22:	2246      	movs	r2, #70	; 0x46
 8001b24:	211e      	movs	r1, #30
 8001b26:	f007 fa22 	bl	8008f6e <hagl_put_text>

	// nie mam ikon?
	lcd_draw_image_fast(2,5,24,24,temp_icon);
 8001b2a:	4b15      	ldr	r3, [pc, #84]	; (8001b80 <live_mode_prog+0x100>)
 8001b2c:	9300      	str	r3, [sp, #0]
 8001b2e:	2318      	movs	r3, #24
 8001b30:	2218      	movs	r2, #24
 8001b32:	2105      	movs	r1, #5
 8001b34:	2002      	movs	r0, #2
 8001b36:	f7ff fca7 	bl	8001488 <lcd_draw_image_fast>
	lcd_draw_image_fast(2,34,24,24,press_icon);
 8001b3a:	4b12      	ldr	r3, [pc, #72]	; (8001b84 <live_mode_prog+0x104>)
 8001b3c:	9300      	str	r3, [sp, #0]
 8001b3e:	2318      	movs	r3, #24
 8001b40:	2218      	movs	r2, #24
 8001b42:	2122      	movs	r1, #34	; 0x22
 8001b44:	2002      	movs	r0, #2
 8001b46:	f7ff fc9f 	bl	8001488 <lcd_draw_image_fast>
	lcd_draw_image_fast(2,63,24,24,alt_icon);
 8001b4a:	4b0f      	ldr	r3, [pc, #60]	; (8001b88 <live_mode_prog+0x108>)
 8001b4c:	9300      	str	r3, [sp, #0]
 8001b4e:	2318      	movs	r3, #24
 8001b50:	2218      	movs	r2, #24
 8001b52:	213f      	movs	r1, #63	; 0x3f
 8001b54:	2002      	movs	r0, #2
 8001b56:	f7ff fc97 	bl	8001488 <lcd_draw_image_fast>



	printf("Live mode prog\r\n");
 8001b5a:	480c      	ldr	r0, [pc, #48]	; (8001b8c <live_mode_prog+0x10c>)
 8001b5c:	f008 fb2a 	bl	800a1b4 <puts>
}
 8001b60:	bf00      	nop
 8001b62:	f507 6796 	add.w	r7, r7, #1200	; 0x4b0
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	00000000 	.word	0x00000000
 8001b70:	0800e830 	.word	0x0800e830
 8001b74:	0800e880 	.word	0x0800e880
 8001b78:	0800e8d0 	.word	0x0800e8d0
 8001b7c:	0800eb78 	.word	0x0800eb78
 8001b80:	08011b30 	.word	0x08011b30
 8001b84:	08011fb0 	.word	0x08011fb0
 8001b88:	08012430 	.word	0x08012430
 8001b8c:	0800e930 	.word	0x0800e930

08001b90 <history_mode_prog>:
void history_mode_prog(){
 8001b90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b92:	b0f1      	sub	sp, #452	; 0x1c4
 8001b94:	af08      	add	r7, sp, #32

	static bool historyLoaded;
	static uint8_t msrm_history[HISTORY_NUMS*HISTORY_ROW_SIZE];

	if(!historyLoaded){
 8001b96:	4b3f      	ldr	r3, [pc, #252]	; (8001c94 <history_mode_prog+0x104>)
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	f083 0301 	eor.w	r3, r3, #1
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d009      	beq.n	8001bb8 <history_mode_prog+0x28>
		load_history_from_eeprom(msrm_history);
 8001ba4:	483c      	ldr	r0, [pc, #240]	; (8001c98 <history_mode_prog+0x108>)
 8001ba6:	f000 f87d 	bl	8001ca4 <load_history_from_eeprom>

		printHistory(msrm_history);
 8001baa:	483b      	ldr	r0, [pc, #236]	; (8001c98 <history_mode_prog+0x108>)
 8001bac:	f000 f90a 	bl	8001dc4 <printHistory>
		historyLoaded = true;
 8001bb0:	4b38      	ldr	r3, [pc, #224]	; (8001c94 <history_mode_prog+0x104>)
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	701a      	strb	r2, [r3, #0]



	}
    //printf("History mode prog\r\n");
}
 8001bb6:	e068      	b.n	8001c8a <history_mode_prog+0xfa>
	} else if(historyLoaded){
 8001bb8:	4b36      	ldr	r3, [pc, #216]	; (8001c94 <history_mode_prog+0x104>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d064      	beq.n	8001c8a <history_mode_prog+0xfa>
		for(int i=0; i<HISTORY_NUMS; i++){
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001bc6:	e05c      	b.n	8001c82 <history_mode_prog+0xf2>
			int c = HISTORY_ROW_SIZE * i;
 8001bc8:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001bcc:	4613      	mov	r3, r2
 8001bce:	00db      	lsls	r3, r3, #3
 8001bd0:	1a9b      	subs	r3, r3, r2
 8001bd2:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
			swprintf(text, MAXTXTLEN, L"%d/%d/%d: %d,%d C", msrm_history[c],msrm_history[c+1], msrm_history[c+2], msrm_history[c+3],
 8001bd6:	4a30      	ldr	r2, [pc, #192]	; (8001c98 <history_mode_prog+0x108>)
 8001bd8:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8001bdc:	4413      	add	r3, r2
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	469c      	mov	ip, r3
 8001be2:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8001be6:	3301      	adds	r3, #1
 8001be8:	4a2b      	ldr	r2, [pc, #172]	; (8001c98 <history_mode_prog+0x108>)
 8001bea:	5cd3      	ldrb	r3, [r2, r3]
 8001bec:	4619      	mov	r1, r3
 8001bee:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8001bf2:	3302      	adds	r3, #2
 8001bf4:	4a28      	ldr	r2, [pc, #160]	; (8001c98 <history_mode_prog+0x108>)
 8001bf6:	5cd3      	ldrb	r3, [r2, r3]
 8001bf8:	461c      	mov	r4, r3
 8001bfa:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8001bfe:	3303      	adds	r3, #3
 8001c00:	4a25      	ldr	r2, [pc, #148]	; (8001c98 <history_mode_prog+0x108>)
 8001c02:	5cd3      	ldrb	r3, [r2, r3]
 8001c04:	461d      	mov	r5, r3
																			 msrm_history[c+4], msrm_history[c+5], msrm_history[c+5],
 8001c06:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8001c0a:	3304      	adds	r3, #4
 8001c0c:	4a22      	ldr	r2, [pc, #136]	; (8001c98 <history_mode_prog+0x108>)
 8001c0e:	5cd3      	ldrb	r3, [r2, r3]
			swprintf(text, MAXTXTLEN, L"%d/%d/%d: %d,%d C", msrm_history[c],msrm_history[c+1], msrm_history[c+2], msrm_history[c+3],
 8001c10:	461e      	mov	r6, r3
																			 msrm_history[c+4], msrm_history[c+5], msrm_history[c+5],
 8001c12:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8001c16:	3305      	adds	r3, #5
 8001c18:	4a1f      	ldr	r2, [pc, #124]	; (8001c98 <history_mode_prog+0x108>)
 8001c1a:	5cd3      	ldrb	r3, [r2, r3]
			swprintf(text, MAXTXTLEN, L"%d/%d/%d: %d,%d C", msrm_history[c],msrm_history[c+1], msrm_history[c+2], msrm_history[c+3],
 8001c1c:	607b      	str	r3, [r7, #4]
																			 msrm_history[c+4], msrm_history[c+5], msrm_history[c+5],
 8001c1e:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8001c22:	3305      	adds	r3, #5
 8001c24:	4a1c      	ldr	r2, [pc, #112]	; (8001c98 <history_mode_prog+0x108>)
 8001c26:	5cd3      	ldrb	r3, [r2, r3]
			swprintf(text, MAXTXTLEN, L"%d/%d/%d: %d,%d C", msrm_history[c],msrm_history[c+1], msrm_history[c+2], msrm_history[c+3],
 8001c28:	603b      	str	r3, [r7, #0]
																			 msrm_history[c+6]);
 8001c2a:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8001c2e:	3306      	adds	r3, #6
 8001c30:	4a19      	ldr	r2, [pc, #100]	; (8001c98 <history_mode_prog+0x108>)
 8001c32:	5cd3      	ldrb	r3, [r2, r3]
			swprintf(text, MAXTXTLEN, L"%d/%d/%d: %d,%d C", msrm_history[c],msrm_history[c+1], msrm_history[c+2], msrm_history[c+3],
 8001c34:	f107 0008 	add.w	r0, r7, #8
 8001c38:	9306      	str	r3, [sp, #24]
 8001c3a:	683a      	ldr	r2, [r7, #0]
 8001c3c:	9205      	str	r2, [sp, #20]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	9304      	str	r3, [sp, #16]
 8001c42:	9603      	str	r6, [sp, #12]
 8001c44:	9502      	str	r5, [sp, #8]
 8001c46:	9401      	str	r4, [sp, #4]
 8001c48:	9100      	str	r1, [sp, #0]
 8001c4a:	4663      	mov	r3, ip
 8001c4c:	4a13      	ldr	r2, [pc, #76]	; (8001c9c <history_mode_prog+0x10c>)
 8001c4e:	2164      	movs	r1, #100	; 0x64
 8001c50:	f008 fb4c 	bl	800a2ec <swprintf>
			hagl_put_text(text, 5, i*20, RED, font6x9);
 8001c54:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8001c58:	b29b      	uxth	r3, r3
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	0092      	lsls	r2, r2, #2
 8001c5e:	4413      	add	r3, r2
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	b21a      	sxth	r2, r3
 8001c66:	f107 0008 	add.w	r0, r7, #8
 8001c6a:	4b0d      	ldr	r3, [pc, #52]	; (8001ca0 <history_mode_prog+0x110>)
 8001c6c:	9300      	str	r3, [sp, #0]
 8001c6e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001c72:	2105      	movs	r1, #5
 8001c74:	f007 f97b 	bl	8008f6e <hagl_put_text>
		for(int i=0; i<HISTORY_NUMS; i++){
 8001c78:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001c82:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8001c86:	2b04      	cmp	r3, #4
 8001c88:	dd9e      	ble.n	8001bc8 <history_mode_prog+0x38>
}
 8001c8a:	bf00      	nop
 8001c8c:	f507 77d2 	add.w	r7, r7, #420	; 0x1a4
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c94:	20000334 	.word	0x20000334
 8001c98:	20000338 	.word	0x20000338
 8001c9c:	0800e940 	.word	0x0800e940
 8001ca0:	0800eb78 	.word	0x0800eb78

08001ca4 <load_history_from_eeprom>:

void load_history_from_eeprom(uint8_t msrm_history[HISTORY_NUMS*EEPROM_PAGE_SIZE]){
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b086      	sub	sp, #24
 8001ca8:	af04      	add	r7, sp, #16
 8001caa:	6078      	str	r0, [r7, #4]
	if(HAL_I2C_Mem_Read(&hi2c1, 0xa0, MEM_MSRM_START, I2C_MEMADD_SIZE_8BIT, msrm_history, HISTORY_NUMS*HISTORY_ROW_SIZE, HAL_MAX_DELAY) != HAL_OK)
 8001cac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001cb0:	9302      	str	r3, [sp, #8]
 8001cb2:	2323      	movs	r3, #35	; 0x23
 8001cb4:	9301      	str	r3, [sp, #4]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	9300      	str	r3, [sp, #0]
 8001cba:	2301      	movs	r3, #1
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	21a0      	movs	r1, #160	; 0xa0
 8001cc0:	480b      	ldr	r0, [pc, #44]	; (8001cf0 <load_history_from_eeprom+0x4c>)
 8001cc2:	f001 ffab 	bl	8003c1c <HAL_I2C_Mem_Read>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <load_history_from_eeprom+0x2c>
							 Error_Handler();
 8001ccc:	f000 fa78 	bl	80021c0 <Error_Handler>
	while(HAL_I2C_IsDeviceReady(&hi2c1, 0xa0, 1, HAL_MAX_DELAY) != HAL_OK);
 8001cd0:	bf00      	nop
 8001cd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	21a0      	movs	r1, #160	; 0xa0
 8001cda:	4805      	ldr	r0, [pc, #20]	; (8001cf0 <load_history_from_eeprom+0x4c>)
 8001cdc:	f002 f8b8 	bl	8003e50 <HAL_I2C_IsDeviceReady>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d1f5      	bne.n	8001cd2 <load_history_from_eeprom+0x2e>
}
 8001ce6:	bf00      	nop
 8001ce8:	bf00      	nop
 8001cea:	3708      	adds	r7, #8
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	20000200 	.word	0x20000200

08001cf4 <save_history_to_eeprom>:
 *
 * Funkcja wysyla cala historie dzielac ja na pelne strony (8 byte'owe). Strona mniejsza niz 8 byte'ow wysylana jest na koncu.
 *
 * \param msrm tablica z pomiarami
 */
void save_history_to_eeprom(uint8_t msrm[HISTORY_NUMS*HISTORY_ROW_SIZE]){
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b08a      	sub	sp, #40	; 0x28
 8001cf8:	af04      	add	r7, sp, #16
 8001cfa:	6078      	str	r0, [r7, #4]

	// calculate number of full pages and size of the last page
	int full_pages = HISTORY_ROW_SIZE*HISTORY_NUMS/EEPROM_PAGE_SIZE;
 8001cfc:	2304      	movs	r3, #4
 8001cfe:	613b      	str	r3, [r7, #16]
	int last_page = HISTORY_ROW_SIZE*HISTORY_NUMS - full_pages*EEPROM_PAGE_SIZE;
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	00db      	lsls	r3, r3, #3
 8001d04:	f1c3 0323 	rsb	r3, r3, #35	; 0x23
 8001d08:	60fb      	str	r3, [r7, #12]

	// send full pages
	for(int i=0; i<full_pages; i++){
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	617b      	str	r3, [r7, #20]
 8001d0e:	e026      	b.n	8001d5e <save_history_to_eeprom+0x6a>

		if(HAL_I2C_Mem_Write(&hi2c1, 0xa0, MEM_MSRM_START+i*EEPROM_PAGE_SIZE, I2C_MEMADD_SIZE_8BIT, msrm+i*EEPROM_PAGE_SIZE, EEPROM_PAGE_SIZE, HAL_MAX_DELAY) != HAL_OK)
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	00db      	lsls	r3, r3, #3
 8001d16:	b29a      	uxth	r2, r3
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	00db      	lsls	r3, r3, #3
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	440b      	add	r3, r1
 8001d22:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d26:	9102      	str	r1, [sp, #8]
 8001d28:	2108      	movs	r1, #8
 8001d2a:	9101      	str	r1, [sp, #4]
 8001d2c:	9300      	str	r3, [sp, #0]
 8001d2e:	2301      	movs	r3, #1
 8001d30:	21a0      	movs	r1, #160	; 0xa0
 8001d32:	4823      	ldr	r0, [pc, #140]	; (8001dc0 <save_history_to_eeprom+0xcc>)
 8001d34:	f001 fe5e 	bl	80039f4 <HAL_I2C_Mem_Write>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <save_history_to_eeprom+0x4e>
			Error_Handler();
 8001d3e:	f000 fa3f 	bl	80021c0 <Error_Handler>
		while(HAL_I2C_IsDeviceReady(&hi2c1, 0xa0, 1, HAL_MAX_DELAY) != HAL_OK);
 8001d42:	bf00      	nop
 8001d44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d48:	2201      	movs	r2, #1
 8001d4a:	21a0      	movs	r1, #160	; 0xa0
 8001d4c:	481c      	ldr	r0, [pc, #112]	; (8001dc0 <save_history_to_eeprom+0xcc>)
 8001d4e:	f002 f87f 	bl	8003e50 <HAL_I2C_IsDeviceReady>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d1f5      	bne.n	8001d44 <save_history_to_eeprom+0x50>
	for(int i=0; i<full_pages; i++){
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	617b      	str	r3, [r7, #20]
 8001d5e:	697a      	ldr	r2, [r7, #20]
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	429a      	cmp	r2, r3
 8001d64:	dbd4      	blt.n	8001d10 <save_history_to_eeprom+0x1c>

	}

	// send remaining page (not full)
	if(last_page >0){
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	dd25      	ble.n	8001db8 <save_history_to_eeprom+0xc4>
		if(HAL_I2C_Mem_Write(&hi2c1, 0xa0, MEM_MSRM_START+full_pages*EEPROM_PAGE_SIZE, I2C_MEMADD_SIZE_8BIT, msrm+full_pages*EEPROM_PAGE_SIZE, last_page, HAL_MAX_DELAY) != HAL_OK)
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	00db      	lsls	r3, r3, #3
 8001d72:	b299      	uxth	r1, r3
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	00db      	lsls	r3, r3, #3
 8001d78:	461a      	mov	r2, r3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	68fa      	ldr	r2, [r7, #12]
 8001d80:	b292      	uxth	r2, r2
 8001d82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d86:	9002      	str	r0, [sp, #8]
 8001d88:	9201      	str	r2, [sp, #4]
 8001d8a:	9300      	str	r3, [sp, #0]
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	460a      	mov	r2, r1
 8001d90:	21a0      	movs	r1, #160	; 0xa0
 8001d92:	480b      	ldr	r0, [pc, #44]	; (8001dc0 <save_history_to_eeprom+0xcc>)
 8001d94:	f001 fe2e 	bl	80039f4 <HAL_I2C_Mem_Write>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <save_history_to_eeprom+0xae>
			Error_Handler();
 8001d9e:	f000 fa0f 	bl	80021c0 <Error_Handler>
		while(HAL_I2C_IsDeviceReady(&hi2c1, 0xa0, 1, HAL_MAX_DELAY) != HAL_OK);
 8001da2:	bf00      	nop
 8001da4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001da8:	2201      	movs	r2, #1
 8001daa:	21a0      	movs	r1, #160	; 0xa0
 8001dac:	4804      	ldr	r0, [pc, #16]	; (8001dc0 <save_history_to_eeprom+0xcc>)
 8001dae:	f002 f84f 	bl	8003e50 <HAL_I2C_IsDeviceReady>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d1f5      	bne.n	8001da4 <save_history_to_eeprom+0xb0>
	}

}
 8001db8:	bf00      	nop
 8001dba:	3718      	adds	r7, #24
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	20000200 	.word	0x20000200

08001dc4 <printHistory>:


void printHistory(uint8_t msrm_history[HISTORY_NUMS*EEPROM_PAGE_SIZE]){
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b084      	sub	sp, #16
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
	for(int i=0; i<HISTORY_NUMS; i++){
 8001dcc:	2300      	movs	r3, #0
 8001dce:	60fb      	str	r3, [r7, #12]
 8001dd0:	e019      	b.n	8001e06 <printHistory+0x42>
		for(int j=0; j<HISTORY_ROW_SIZE; j++){
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	60bb      	str	r3, [r7, #8]
 8001dd6:	e00d      	b.n	8001df4 <printHistory+0x30>
			printf("%d ", msrm_history[i+j]);
 8001dd8:	68fa      	ldr	r2, [r7, #12]
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	4413      	add	r3, r2
 8001dde:	461a      	mov	r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	4413      	add	r3, r2
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	4619      	mov	r1, r3
 8001de8:	480b      	ldr	r0, [pc, #44]	; (8001e18 <printHistory+0x54>)
 8001dea:	f008 f947 	bl	800a07c <iprintf>
		for(int j=0; j<HISTORY_ROW_SIZE; j++){
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	3301      	adds	r3, #1
 8001df2:	60bb      	str	r3, [r7, #8]
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	2b06      	cmp	r3, #6
 8001df8:	ddee      	ble.n	8001dd8 <printHistory+0x14>
		}
		printf("\r\n");
 8001dfa:	4808      	ldr	r0, [pc, #32]	; (8001e1c <printHistory+0x58>)
 8001dfc:	f008 f9da 	bl	800a1b4 <puts>
	for(int i=0; i<HISTORY_NUMS; i++){
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	3301      	adds	r3, #1
 8001e04:	60fb      	str	r3, [r7, #12]
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2b04      	cmp	r3, #4
 8001e0a:	dde2      	ble.n	8001dd2 <printHistory+0xe>
	}
}
 8001e0c:	bf00      	nop
 8001e0e:	bf00      	nop
 8001e10:	3710      	adds	r7, #16
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	0800e988 	.word	0x0800e988
 8001e1c:	0800e98c 	.word	0x0800e98c

08001e20 <checkFlags>:

void checkFlags(){
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
	if(__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST)){
 8001e24:	4b0b      	ldr	r3, [pc, #44]	; (8001e54 <checkFlags+0x34>)
 8001e26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e2a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d00b      	beq.n	8001e4a <checkFlags+0x2a>
			printf("System zostal zresetowany przez Watchdoga\r\n");
 8001e32:	4809      	ldr	r0, [pc, #36]	; (8001e58 <checkFlags+0x38>)
 8001e34:	f008 f9be 	bl	800a1b4 <puts>
			__HAL_RCC_CLEAR_RESET_FLAGS();
 8001e38:	4b06      	ldr	r3, [pc, #24]	; (8001e54 <checkFlags+0x34>)
 8001e3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e3e:	4a05      	ldr	r2, [pc, #20]	; (8001e54 <checkFlags+0x34>)
 8001e40:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e44:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
		} else{
			printf("System zostal uruchomiony poprawnie\r\n");
		}
}
 8001e48:	e002      	b.n	8001e50 <checkFlags+0x30>
			printf("System zostal uruchomiony poprawnie\r\n");
 8001e4a:	4804      	ldr	r0, [pc, #16]	; (8001e5c <checkFlags+0x3c>)
 8001e4c:	f008 f9b2 	bl	800a1b4 <puts>
}
 8001e50:	bf00      	nop
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	40021000 	.word	0x40021000
 8001e58:	0800e990 	.word	0x0800e990
 8001e5c:	0800e9bc 	.word	0x0800e9bc

08001e60 <fflush_sc_buff>:

/*
 * ____ W funkcji trzeba poprawic korzystanie z globalnej zmiennej ____ line ____
 */
void fflush_sc_buff(){
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0



	if(sf_buf_pos>0){
 8001e66:	4b24      	ldr	r3, [pc, #144]	; (8001ef8 <fflush_sc_buff+0x98>)
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d03f      	beq.n	8001eee <fflush_sc_buff+0x8e>
		sf_buf[sf_buf_pos] = '\0';
 8001e6e:	4b22      	ldr	r3, [pc, #136]	; (8001ef8 <fflush_sc_buff+0x98>)
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	461a      	mov	r2, r3
 8001e74:	4b21      	ldr	r3, [pc, #132]	; (8001efc <fflush_sc_buff+0x9c>)
 8001e76:	2100      	movs	r1, #0
 8001e78:	5499      	strb	r1, [r3, r2]
		int i=0;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	607b      	str	r3, [r7, #4]
		while(sf_buf[i]!='\0'){
 8001e7e:	e02d      	b.n	8001edc <fflush_sc_buff+0x7c>
			if(sf_buf[i]!='\r'){
 8001e80:	4a1e      	ldr	r2, [pc, #120]	; (8001efc <fflush_sc_buff+0x9c>)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4413      	add	r3, r2
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	2b0d      	cmp	r3, #13
 8001e8a:	d007      	beq.n	8001e9c <fflush_sc_buff+0x3c>
				strncat(line, (char *)&sf_buf[i], 1);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	4a1b      	ldr	r2, [pc, #108]	; (8001efc <fflush_sc_buff+0x9c>)
 8001e90:	4413      	add	r3, r2
 8001e92:	2201      	movs	r2, #1
 8001e94:	4619      	mov	r1, r3
 8001e96:	481a      	ldr	r0, [pc, #104]	; (8001f00 <fflush_sc_buff+0xa0>)
 8001e98:	f008 fa15 	bl	800a2c6 <strncat>
			}

			if(sf_buf[i]=='\r') {
 8001e9c:	4a17      	ldr	r2, [pc, #92]	; (8001efc <fflush_sc_buff+0x9c>)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	2b0d      	cmp	r3, #13
 8001ea6:	d109      	bne.n	8001ebc <fflush_sc_buff+0x5c>
				printf("\n");
 8001ea8:	200a      	movs	r0, #10
 8001eaa:	f008 f8ff 	bl	800a0ac <putchar>
				//strncat(line, (char*)'\r', 1);
				prsCmd(line);
 8001eae:	4814      	ldr	r0, [pc, #80]	; (8001f00 <fflush_sc_buff+0xa0>)
 8001eb0:	f000 f846 	bl	8001f40 <prsCmd>
				clrTxtBuff(line, MAXTXTLEN);
 8001eb4:	2164      	movs	r1, #100	; 0x64
 8001eb6:	4812      	ldr	r0, [pc, #72]	; (8001f00 <fflush_sc_buff+0xa0>)
 8001eb8:	f000 f826 	bl	8001f08 <clrTxtBuff>
			}

			printf("%c", sf_buf[i]);
 8001ebc:	4a0f      	ldr	r2, [pc, #60]	; (8001efc <fflush_sc_buff+0x9c>)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4413      	add	r3, r2
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f008 f8f1 	bl	800a0ac <putchar>
			i++;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	3301      	adds	r3, #1
 8001ece:	607b      	str	r3, [r7, #4]
			fflush(stdout);
 8001ed0:	4b0c      	ldr	r3, [pc, #48]	; (8001f04 <fflush_sc_buff+0xa4>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f007 f9cc 	bl	8009274 <fflush>
		while(sf_buf[i]!='\0'){
 8001edc:	4a07      	ldr	r2, [pc, #28]	; (8001efc <fflush_sc_buff+0x9c>)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d1cb      	bne.n	8001e80 <fflush_sc_buff+0x20>
		}
		sf_buf_pos = 0;
 8001ee8:	4b03      	ldr	r3, [pc, #12]	; (8001ef8 <fflush_sc_buff+0x98>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	701a      	strb	r2, [r3, #0]
	}
}
 8001eee:	bf00      	nop
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	200002cc 	.word	0x200002cc
 8001efc:	20000268 	.word	0x20000268
 8001f00:	200002d0 	.word	0x200002d0
 8001f04:	20000014 	.word	0x20000014

08001f08 <clrTxtBuff>:

void clrTxtBuff(char* str, int size){
 8001f08:	b480      	push	{r7}
 8001f0a:	b085      	sub	sp, #20
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
	for(int i=0; i<size; i++){
 8001f12:	2300      	movs	r3, #0
 8001f14:	60fb      	str	r3, [r7, #12]
 8001f16:	e007      	b.n	8001f28 <clrTxtBuff+0x20>
		str[i] = '\0';
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	2200      	movs	r2, #0
 8001f20:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<size; i++){
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	3301      	adds	r3, #1
 8001f26:	60fb      	str	r3, [r7, #12]
 8001f28:	68fa      	ldr	r2, [r7, #12]
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	dbf3      	blt.n	8001f18 <clrTxtBuff+0x10>
	}
}
 8001f30:	bf00      	nop
 8001f32:	bf00      	nop
 8001f34:	3714      	adds	r7, #20
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
	...

08001f40 <prsCmd>:

void prsCmd(char* cmd){
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b08e      	sub	sp, #56	; 0x38
 8001f44:	af02      	add	r7, sp, #8
 8001f46:	6078      	str	r0, [r7, #4]
	char inst[10];
	int offset=0;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	623b      	str	r3, [r7, #32]

	sscanf(cmd, "%s %n", inst, &offset);
 8001f4c:	f107 0320 	add.w	r3, r7, #32
 8001f50:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001f54:	4932      	ldr	r1, [pc, #200]	; (8002020 <prsCmd+0xe0>)
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f008 f944 	bl	800a1e4 <siscanf>

	if( strcmp(inst, "setdate" ) == 0){
 8001f5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f60:	4930      	ldr	r1, [pc, #192]	; (8002024 <prsCmd+0xe4>)
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7fe f934 	bl	80001d0 <strcmp>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d115      	bne.n	8001f9a <prsCmd+0x5a>
		int d,m,y;
		sscanf(cmd+offset, "%d/%d/%d", &d, &m, &y);
 8001f6e:	6a3b      	ldr	r3, [r7, #32]
 8001f70:	461a      	mov	r2, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	1898      	adds	r0, r3, r2
 8001f76:	f107 0118 	add.w	r1, r7, #24
 8001f7a:	f107 021c 	add.w	r2, r7, #28
 8001f7e:	f107 0314 	add.w	r3, r7, #20
 8001f82:	9300      	str	r3, [sp, #0]
 8001f84:	460b      	mov	r3, r1
 8001f86:	4928      	ldr	r1, [pc, #160]	; (8002028 <prsCmd+0xe8>)
 8001f88:	f008 f92c 	bl	800a1e4 <siscanf>
		setDate(d,m,y);
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	69b9      	ldr	r1, [r7, #24]
 8001f90:	697a      	ldr	r2, [r7, #20]
 8001f92:	4618      	mov	r0, r3
 8001f94:	f000 f876 	bl	8002084 <setDate>

	else if( strcmp(inst, "man" ) == 0){
				printMan();
		}

}
 8001f98:	e03d      	b.n	8002016 <prsCmd+0xd6>
	else if( strcmp(inst, "settime" ) == 0){
 8001f9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f9e:	4923      	ldr	r1, [pc, #140]	; (800202c <prsCmd+0xec>)
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7fe f915 	bl	80001d0 <strcmp>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d111      	bne.n	8001fd0 <prsCmd+0x90>
		sscanf(cmd+offset, "%d:%d", &h, &m);
 8001fac:	6a3b      	ldr	r3, [r7, #32]
 8001fae:	461a      	mov	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	1898      	adds	r0, r3, r2
 8001fb4:	f107 030c 	add.w	r3, r7, #12
 8001fb8:	f107 0210 	add.w	r2, r7, #16
 8001fbc:	491c      	ldr	r1, [pc, #112]	; (8002030 <prsCmd+0xf0>)
 8001fbe:	f008 f911 	bl	800a1e4 <siscanf>
		setTime(h, m);
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	68fa      	ldr	r2, [r7, #12]
 8001fc6:	4611      	mov	r1, r2
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f000 f879 	bl	80020c0 <setTime>
}
 8001fce:	e022      	b.n	8002016 <prsCmd+0xd6>
	else if( strcmp(inst, "printtime" ) == 0){
 8001fd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fd4:	4917      	ldr	r1, [pc, #92]	; (8002034 <prsCmd+0xf4>)
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7fe f8fa 	bl	80001d0 <strcmp>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d102      	bne.n	8001fe8 <prsCmd+0xa8>
			printTime();
 8001fe2:	f000 f8ad 	bl	8002140 <printTime>
}
 8001fe6:	e016      	b.n	8002016 <prsCmd+0xd6>
	else if( strcmp(inst, "printdate" ) == 0){
 8001fe8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fec:	4912      	ldr	r1, [pc, #72]	; (8002038 <prsCmd+0xf8>)
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7fe f8ee 	bl	80001d0 <strcmp>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d102      	bne.n	8002000 <prsCmd+0xc0>
				printDate();
 8001ffa:	f000 f881 	bl	8002100 <printDate>
}
 8001ffe:	e00a      	b.n	8002016 <prsCmd+0xd6>
	else if( strcmp(inst, "man" ) == 0){
 8002000:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002004:	490d      	ldr	r1, [pc, #52]	; (800203c <prsCmd+0xfc>)
 8002006:	4618      	mov	r0, r3
 8002008:	f7fe f8e2 	bl	80001d0 <strcmp>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d101      	bne.n	8002016 <prsCmd+0xd6>
				printMan();
 8002012:	f000 f815 	bl	8002040 <printMan>
}
 8002016:	bf00      	nop
 8002018:	3730      	adds	r7, #48	; 0x30
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	0800e9e4 	.word	0x0800e9e4
 8002024:	0800e9ec 	.word	0x0800e9ec
 8002028:	0800e9f4 	.word	0x0800e9f4
 800202c:	0800ea00 	.word	0x0800ea00
 8002030:	0800ea08 	.word	0x0800ea08
 8002034:	0800ea10 	.word	0x0800ea10
 8002038:	0800ea1c 	.word	0x0800ea1c
 800203c:	0800ea28 	.word	0x0800ea28

08002040 <printMan>:


void printMan(){
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
	printf("\r\n ***** CONSOLE MANUAL ****** \r\n\n");
 8002044:	4809      	ldr	r0, [pc, #36]	; (800206c <printMan+0x2c>)
 8002046:	f008 f8b5 	bl	800a1b4 <puts>
	printf("setdate dd/mm/yy\r\n");
 800204a:	4809      	ldr	r0, [pc, #36]	; (8002070 <printMan+0x30>)
 800204c:	f008 f8b2 	bl	800a1b4 <puts>
	printf("settime hh:mm\r\n");
 8002050:	4808      	ldr	r0, [pc, #32]	; (8002074 <printMan+0x34>)
 8002052:	f008 f8af 	bl	800a1b4 <puts>
	printf("printtime\r\n");
 8002056:	4808      	ldr	r0, [pc, #32]	; (8002078 <printMan+0x38>)
 8002058:	f008 f8ac 	bl	800a1b4 <puts>
	printf("printdate\r\n");
 800205c:	4807      	ldr	r0, [pc, #28]	; (800207c <printMan+0x3c>)
 800205e:	f008 f8a9 	bl	800a1b4 <puts>
	printf("\r\n ***************************\r\n\n");
 8002062:	4807      	ldr	r0, [pc, #28]	; (8002080 <printMan+0x40>)
 8002064:	f008 f8a6 	bl	800a1b4 <puts>
}
 8002068:	bf00      	nop
 800206a:	bd80      	pop	{r7, pc}
 800206c:	0800ea2c 	.word	0x0800ea2c
 8002070:	0800ea50 	.word	0x0800ea50
 8002074:	0800ea64 	.word	0x0800ea64
 8002078:	0800ea74 	.word	0x0800ea74
 800207c:	0800ea80 	.word	0x0800ea80
 8002080:	0800ea8c 	.word	0x0800ea8c

08002084 <setDate>:

void setDate(int dd, int mm, int yy){
 8002084:	b580      	push	{r7, lr}
 8002086:	b086      	sub	sp, #24
 8002088:	af00      	add	r7, sp, #0
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	60b9      	str	r1, [r7, #8]
 800208e:	607a      	str	r2, [r7, #4]

	RTC_DateTypeDef tmp = {0};
 8002090:	2300      	movs	r3, #0
 8002092:	617b      	str	r3, [r7, #20]

	tmp.Date = (uint8_t) dd;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	b2db      	uxtb	r3, r3
 8002098:	75bb      	strb	r3, [r7, #22]
	tmp.Month = (uint8_t) mm;
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	b2db      	uxtb	r3, r3
 800209e:	757b      	strb	r3, [r7, #21]
	tmp.Year = (uint8_t)yy;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	75fb      	strb	r3, [r7, #23]

	HAL_RTC_SetDate(&hrtc, &tmp, RTC_FORMAT_BIN);
 80020a6:	f107 0314 	add.w	r3, r7, #20
 80020aa:	2200      	movs	r2, #0
 80020ac:	4619      	mov	r1, r3
 80020ae:	4803      	ldr	r0, [pc, #12]	; (80020bc <setDate+0x38>)
 80020b0:	f004 f880 	bl	80061b4 <HAL_RTC_SetDate>
}
 80020b4:	bf00      	nop
 80020b6:	3718      	adds	r7, #24
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	2000035c 	.word	0x2000035c

080020c0 <setTime>:

void setTime(int hh, int mm){
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b088      	sub	sp, #32
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
	RTC_TimeTypeDef tmp = {0};
 80020ca:	f107 030c 	add.w	r3, r7, #12
 80020ce:	2200      	movs	r2, #0
 80020d0:	601a      	str	r2, [r3, #0]
 80020d2:	605a      	str	r2, [r3, #4]
 80020d4:	609a      	str	r2, [r3, #8]
 80020d6:	60da      	str	r2, [r3, #12]
 80020d8:	611a      	str	r2, [r3, #16]

	tmp.Hours = hh;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	733b      	strb	r3, [r7, #12]
	tmp.Minutes = mm;
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	737b      	strb	r3, [r7, #13]

	HAL_RTC_SetTime(&hrtc, &tmp, RTC_FORMAT_BIN);
 80020e6:	f107 030c 	add.w	r3, r7, #12
 80020ea:	2200      	movs	r2, #0
 80020ec:	4619      	mov	r1, r3
 80020ee:	4803      	ldr	r0, [pc, #12]	; (80020fc <setTime+0x3c>)
 80020f0:	f003 ff67 	bl	8005fc2 <HAL_RTC_SetTime>

}
 80020f4:	bf00      	nop
 80020f6:	3720      	adds	r7, #32
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	2000035c 	.word	0x2000035c

08002100 <printDate>:



void printDate(){
 8002100:	b580      	push	{r7, lr}
 8002102:	b086      	sub	sp, #24
 8002104:	af00      	add	r7, sp, #0
	RTC_TimeTypeDef mTime;
	RTC_DateTypeDef mDate;

	HAL_RTC_GetTime(&hrtc, &mTime, RTC_FORMAT_BIN);
 8002106:	1d3b      	adds	r3, r7, #4
 8002108:	2200      	movs	r2, #0
 800210a:	4619      	mov	r1, r3
 800210c:	480a      	ldr	r0, [pc, #40]	; (8002138 <printDate+0x38>)
 800210e:	f003 fff5 	bl	80060fc <HAL_RTC_GetTime>
  	HAL_RTC_GetDate(&hrtc, &mDate, RTC_FORMAT_BIN);
 8002112:	463b      	mov	r3, r7
 8002114:	2200      	movs	r2, #0
 8002116:	4619      	mov	r1, r3
 8002118:	4807      	ldr	r0, [pc, #28]	; (8002138 <printDate+0x38>)
 800211a:	f004 f8d2 	bl	80062c2 <HAL_RTC_GetDate>

  	printf("Date: %d/%d/%d\r\n", mDate.Date, mDate.Month, mDate.Year);
 800211e:	78bb      	ldrb	r3, [r7, #2]
 8002120:	4619      	mov	r1, r3
 8002122:	787b      	ldrb	r3, [r7, #1]
 8002124:	461a      	mov	r2, r3
 8002126:	78fb      	ldrb	r3, [r7, #3]
 8002128:	4804      	ldr	r0, [pc, #16]	; (800213c <printDate+0x3c>)
 800212a:	f007 ffa7 	bl	800a07c <iprintf>

}
 800212e:	bf00      	nop
 8002130:	3718      	adds	r7, #24
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	2000035c 	.word	0x2000035c
 800213c:	0800eab0 	.word	0x0800eab0

08002140 <printTime>:

void printTime(){
 8002140:	b580      	push	{r7, lr}
 8002142:	b086      	sub	sp, #24
 8002144:	af00      	add	r7, sp, #0
	RTC_TimeTypeDef mTime;
	RTC_DateTypeDef mDate;

	HAL_RTC_GetTime(&hrtc, &mTime, RTC_FORMAT_BIN);
 8002146:	1d3b      	adds	r3, r7, #4
 8002148:	2200      	movs	r2, #0
 800214a:	4619      	mov	r1, r3
 800214c:	4809      	ldr	r0, [pc, #36]	; (8002174 <printTime+0x34>)
 800214e:	f003 ffd5 	bl	80060fc <HAL_RTC_GetTime>
  	HAL_RTC_GetDate(&hrtc, &mDate, RTC_FORMAT_BIN);
 8002152:	463b      	mov	r3, r7
 8002154:	2200      	movs	r2, #0
 8002156:	4619      	mov	r1, r3
 8002158:	4806      	ldr	r0, [pc, #24]	; (8002174 <printTime+0x34>)
 800215a:	f004 f8b2 	bl	80062c2 <HAL_RTC_GetDate>

  	printf("Time: %d:%d\r\n", mTime.Hours, mTime.Minutes);
 800215e:	793b      	ldrb	r3, [r7, #4]
 8002160:	4619      	mov	r1, r3
 8002162:	797b      	ldrb	r3, [r7, #5]
 8002164:	461a      	mov	r2, r3
 8002166:	4804      	ldr	r0, [pc, #16]	; (8002178 <printTime+0x38>)
 8002168:	f007 ff88 	bl	800a07c <iprintf>
}
 800216c:	bf00      	nop
 800216e:	3718      	adds	r7, #24
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	2000035c 	.word	0x2000035c
 8002178:	0800eac4 	.word	0x0800eac4

0800217c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
		sf_buf[sf_buf_pos] = rx_buf[0];
 8002184:	4b0a      	ldr	r3, [pc, #40]	; (80021b0 <HAL_UART_RxCpltCallback+0x34>)
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	461a      	mov	r2, r3
 800218a:	4b0a      	ldr	r3, [pc, #40]	; (80021b4 <HAL_UART_RxCpltCallback+0x38>)
 800218c:	7819      	ldrb	r1, [r3, #0]
 800218e:	4b0a      	ldr	r3, [pc, #40]	; (80021b8 <HAL_UART_RxCpltCallback+0x3c>)
 8002190:	5499      	strb	r1, [r3, r2]
		++sf_buf_pos;
 8002192:	4b07      	ldr	r3, [pc, #28]	; (80021b0 <HAL_UART_RxCpltCallback+0x34>)
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	3301      	adds	r3, #1
 8002198:	b2da      	uxtb	r2, r3
 800219a:	4b05      	ldr	r3, [pc, #20]	; (80021b0 <HAL_UART_RxCpltCallback+0x34>)
 800219c:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_DMA(&huart1, rx_buf, 1);
 800219e:	2201      	movs	r2, #1
 80021a0:	4904      	ldr	r1, [pc, #16]	; (80021b4 <HAL_UART_RxCpltCallback+0x38>)
 80021a2:	4806      	ldr	r0, [pc, #24]	; (80021bc <HAL_UART_RxCpltCallback+0x40>)
 80021a4:	f004 ff9a 	bl	80070dc <HAL_UART_Receive_DMA>
}
 80021a8:	bf00      	nop
 80021aa:	3708      	adds	r7, #8
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	200002cc 	.word	0x200002cc
 80021b4:	20000264 	.word	0x20000264
 80021b8:	20000268 	.word	0x20000268
 80021bc:	200003e8 	.word	0x200003e8

080021c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021c4:	b672      	cpsid	i
}
 80021c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021c8:	e7fe      	b.n	80021c8 <Error_Handler+0x8>
	...

080021cc <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b092      	sub	sp, #72	; 0x48
 80021d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80021d2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80021d6:	2200      	movs	r2, #0
 80021d8:	601a      	str	r2, [r3, #0]
 80021da:	605a      	str	r2, [r3, #4]
 80021dc:	609a      	str	r2, [r3, #8]
 80021de:	60da      	str	r2, [r3, #12]
 80021e0:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80021e2:	2300      	movs	r3, #0
 80021e4:	633b      	str	r3, [r7, #48]	; 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 80021e6:	1d3b      	adds	r3, r7, #4
 80021e8:	222c      	movs	r2, #44	; 0x2c
 80021ea:	2100      	movs	r1, #0
 80021ec:	4618      	mov	r0, r3
 80021ee:	f007 f9f3 	bl	80095d8 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80021f2:	4b3c      	ldr	r3, [pc, #240]	; (80022e4 <MX_RTC_Init+0x118>)
 80021f4:	4a3c      	ldr	r2, [pc, #240]	; (80022e8 <MX_RTC_Init+0x11c>)
 80021f6:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80021f8:	4b3a      	ldr	r3, [pc, #232]	; (80022e4 <MX_RTC_Init+0x118>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80021fe:	4b39      	ldr	r3, [pc, #228]	; (80022e4 <MX_RTC_Init+0x118>)
 8002200:	227f      	movs	r2, #127	; 0x7f
 8002202:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002204:	4b37      	ldr	r3, [pc, #220]	; (80022e4 <MX_RTC_Init+0x118>)
 8002206:	22ff      	movs	r2, #255	; 0xff
 8002208:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800220a:	4b36      	ldr	r3, [pc, #216]	; (80022e4 <MX_RTC_Init+0x118>)
 800220c:	2200      	movs	r2, #0
 800220e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002210:	4b34      	ldr	r3, [pc, #208]	; (80022e4 <MX_RTC_Init+0x118>)
 8002212:	2200      	movs	r2, #0
 8002214:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002216:	4b33      	ldr	r3, [pc, #204]	; (80022e4 <MX_RTC_Init+0x118>)
 8002218:	2200      	movs	r2, #0
 800221a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800221c:	4b31      	ldr	r3, [pc, #196]	; (80022e4 <MX_RTC_Init+0x118>)
 800221e:	2200      	movs	r2, #0
 8002220:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002222:	4830      	ldr	r0, [pc, #192]	; (80022e4 <MX_RTC_Init+0x118>)
 8002224:	f003 fe52 	bl	8005ecc <HAL_RTC_Init>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 800222e:	f7ff ffc7 	bl	80021c0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8002232:	2300      	movs	r3, #0
 8002234:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  sTime.Minutes = 0;
 8002238:	2300      	movs	r3, #0
 800223a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  sTime.Seconds = 0;
 800223e:	2300      	movs	r3, #0
 8002240:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002244:	2300      	movs	r3, #0
 8002246:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002248:	2300      	movs	r3, #0
 800224a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800224c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002250:	2200      	movs	r2, #0
 8002252:	4619      	mov	r1, r3
 8002254:	4823      	ldr	r0, [pc, #140]	; (80022e4 <MX_RTC_Init+0x118>)
 8002256:	f003 feb4 	bl	8005fc2 <HAL_RTC_SetTime>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d001      	beq.n	8002264 <MX_RTC_Init+0x98>
  {
    Error_Handler();
 8002260:	f7ff ffae 	bl	80021c0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002264:	2301      	movs	r3, #1
 8002266:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 800226a:	2301      	movs	r3, #1
 800226c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sDate.Date = 1;
 8002270:	2301      	movs	r3, #1
 8002272:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sDate.Year = 0;
 8002276:	2300      	movs	r3, #0
 8002278:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800227c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002280:	2200      	movs	r2, #0
 8002282:	4619      	mov	r1, r3
 8002284:	4817      	ldr	r0, [pc, #92]	; (80022e4 <MX_RTC_Init+0x118>)
 8002286:	f003 ff95 	bl	80061b4 <HAL_RTC_SetDate>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d001      	beq.n	8002294 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 8002290:	f7ff ff96 	bl	80021c0 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 8002294:	2300      	movs	r3, #0
 8002296:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0;
 8002298:	2300      	movs	r3, #0
 800229a:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0;
 800229c:	2300      	movs	r3, #0
 800229e:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0;
 80022a0:	2300      	movs	r3, #0
 80022a2:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80022a4:	2300      	movs	r3, #0
 80022a6:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80022a8:	2300      	movs	r3, #0
 80022aa:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80022ac:	2300      	movs	r3, #0
 80022ae:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80022b0:	2300      	movs	r3, #0
 80022b2:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80022b4:	2300      	movs	r3, #0
 80022b6:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmDateWeekDay = 1;
 80022b8:	2301      	movs	r3, #1
 80022ba:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 80022be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 80022c4:	1d3b      	adds	r3, r7, #4
 80022c6:	2200      	movs	r2, #0
 80022c8:	4619      	mov	r1, r3
 80022ca:	4806      	ldr	r0, [pc, #24]	; (80022e4 <MX_RTC_Init+0x118>)
 80022cc:	f004 f846 	bl	800635c <HAL_RTC_SetAlarm_IT>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <MX_RTC_Init+0x10e>
  {
    Error_Handler();
 80022d6:	f7ff ff73 	bl	80021c0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80022da:	bf00      	nop
 80022dc:	3748      	adds	r7, #72	; 0x48
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	2000035c 	.word	0x2000035c
 80022e8:	40002800 	.word	0x40002800

080022ec <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b0a4      	sub	sp, #144	; 0x90
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022f4:	f107 0308 	add.w	r3, r7, #8
 80022f8:	2288      	movs	r2, #136	; 0x88
 80022fa:	2100      	movs	r1, #0
 80022fc:	4618      	mov	r0, r3
 80022fe:	f007 f96b 	bl	80095d8 <memset>
  if(rtcHandle->Instance==RTC)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a14      	ldr	r2, [pc, #80]	; (8002358 <HAL_RTC_MspInit+0x6c>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d120      	bne.n	800234e <HAL_RTC_MspInit+0x62>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800230c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002310:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002312:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002316:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800231a:	f107 0308 	add.w	r3, r7, #8
 800231e:	4618      	mov	r0, r3
 8002320:	f003 f918 	bl	8005554 <HAL_RCCEx_PeriphCLKConfig>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800232a:	f7ff ff49 	bl	80021c0 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800232e:	4b0b      	ldr	r3, [pc, #44]	; (800235c <HAL_RTC_MspInit+0x70>)
 8002330:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002334:	4a09      	ldr	r2, [pc, #36]	; (800235c <HAL_RTC_MspInit+0x70>)
 8002336:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800233a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 800233e:	2200      	movs	r2, #0
 8002340:	2100      	movs	r1, #0
 8002342:	2029      	movs	r0, #41	; 0x29
 8002344:	f000 fc6d 	bl	8002c22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8002348:	2029      	movs	r0, #41	; 0x29
 800234a:	f000 fc86 	bl	8002c5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800234e:	bf00      	nop
 8002350:	3790      	adds	r7, #144	; 0x90
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	40002800 	.word	0x40002800
 800235c:	40021000 	.word	0x40021000

08002360 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002364:	4b1b      	ldr	r3, [pc, #108]	; (80023d4 <MX_SPI2_Init+0x74>)
 8002366:	4a1c      	ldr	r2, [pc, #112]	; (80023d8 <MX_SPI2_Init+0x78>)
 8002368:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800236a:	4b1a      	ldr	r3, [pc, #104]	; (80023d4 <MX_SPI2_Init+0x74>)
 800236c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002370:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002372:	4b18      	ldr	r3, [pc, #96]	; (80023d4 <MX_SPI2_Init+0x74>)
 8002374:	2200      	movs	r2, #0
 8002376:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002378:	4b16      	ldr	r3, [pc, #88]	; (80023d4 <MX_SPI2_Init+0x74>)
 800237a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800237e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002380:	4b14      	ldr	r3, [pc, #80]	; (80023d4 <MX_SPI2_Init+0x74>)
 8002382:	2200      	movs	r2, #0
 8002384:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002386:	4b13      	ldr	r3, [pc, #76]	; (80023d4 <MX_SPI2_Init+0x74>)
 8002388:	2200      	movs	r2, #0
 800238a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800238c:	4b11      	ldr	r3, [pc, #68]	; (80023d4 <MX_SPI2_Init+0x74>)
 800238e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002392:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002394:	4b0f      	ldr	r3, [pc, #60]	; (80023d4 <MX_SPI2_Init+0x74>)
 8002396:	2210      	movs	r2, #16
 8002398:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800239a:	4b0e      	ldr	r3, [pc, #56]	; (80023d4 <MX_SPI2_Init+0x74>)
 800239c:	2200      	movs	r2, #0
 800239e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80023a0:	4b0c      	ldr	r3, [pc, #48]	; (80023d4 <MX_SPI2_Init+0x74>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023a6:	4b0b      	ldr	r3, [pc, #44]	; (80023d4 <MX_SPI2_Init+0x74>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80023ac:	4b09      	ldr	r3, [pc, #36]	; (80023d4 <MX_SPI2_Init+0x74>)
 80023ae:	2207      	movs	r2, #7
 80023b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80023b2:	4b08      	ldr	r3, [pc, #32]	; (80023d4 <MX_SPI2_Init+0x74>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80023b8:	4b06      	ldr	r3, [pc, #24]	; (80023d4 <MX_SPI2_Init+0x74>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80023be:	4805      	ldr	r0, [pc, #20]	; (80023d4 <MX_SPI2_Init+0x74>)
 80023c0:	f004 fa34 	bl	800682c <HAL_SPI_Init>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80023ca:	f7ff fef9 	bl	80021c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80023ce:	bf00      	nop
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	20000380 	.word	0x20000380
 80023d8:	40003800 	.word	0x40003800

080023dc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b08a      	sub	sp, #40	; 0x28
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e4:	f107 0314 	add.w	r3, r7, #20
 80023e8:	2200      	movs	r2, #0
 80023ea:	601a      	str	r2, [r3, #0]
 80023ec:	605a      	str	r2, [r3, #4]
 80023ee:	609a      	str	r2, [r3, #8]
 80023f0:	60da      	str	r2, [r3, #12]
 80023f2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a25      	ldr	r2, [pc, #148]	; (8002490 <HAL_SPI_MspInit+0xb4>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d144      	bne.n	8002488 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80023fe:	4b25      	ldr	r3, [pc, #148]	; (8002494 <HAL_SPI_MspInit+0xb8>)
 8002400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002402:	4a24      	ldr	r2, [pc, #144]	; (8002494 <HAL_SPI_MspInit+0xb8>)
 8002404:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002408:	6593      	str	r3, [r2, #88]	; 0x58
 800240a:	4b22      	ldr	r3, [pc, #136]	; (8002494 <HAL_SPI_MspInit+0xb8>)
 800240c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800240e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002412:	613b      	str	r3, [r7, #16]
 8002414:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002416:	4b1f      	ldr	r3, [pc, #124]	; (8002494 <HAL_SPI_MspInit+0xb8>)
 8002418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800241a:	4a1e      	ldr	r2, [pc, #120]	; (8002494 <HAL_SPI_MspInit+0xb8>)
 800241c:	f043 0304 	orr.w	r3, r3, #4
 8002420:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002422:	4b1c      	ldr	r3, [pc, #112]	; (8002494 <HAL_SPI_MspInit+0xb8>)
 8002424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002426:	f003 0304 	and.w	r3, r3, #4
 800242a:	60fb      	str	r3, [r7, #12]
 800242c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800242e:	4b19      	ldr	r3, [pc, #100]	; (8002494 <HAL_SPI_MspInit+0xb8>)
 8002430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002432:	4a18      	ldr	r2, [pc, #96]	; (8002494 <HAL_SPI_MspInit+0xb8>)
 8002434:	f043 0302 	orr.w	r3, r3, #2
 8002438:	64d3      	str	r3, [r2, #76]	; 0x4c
 800243a:	4b16      	ldr	r3, [pc, #88]	; (8002494 <HAL_SPI_MspInit+0xb8>)
 800243c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800243e:	f003 0302 	and.w	r3, r3, #2
 8002442:	60bb      	str	r3, [r7, #8]
 8002444:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002446:	2308      	movs	r3, #8
 8002448:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800244a:	2302      	movs	r3, #2
 800244c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244e:	2300      	movs	r3, #0
 8002450:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002452:	2303      	movs	r3, #3
 8002454:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002456:	2305      	movs	r3, #5
 8002458:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800245a:	f107 0314 	add.w	r3, r7, #20
 800245e:	4619      	mov	r1, r3
 8002460:	480d      	ldr	r0, [pc, #52]	; (8002498 <HAL_SPI_MspInit+0xbc>)
 8002462:	f000 fe8b 	bl	800317c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002466:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800246a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800246c:	2302      	movs	r3, #2
 800246e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002470:	2300      	movs	r3, #0
 8002472:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002474:	2303      	movs	r3, #3
 8002476:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002478:	2305      	movs	r3, #5
 800247a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800247c:	f107 0314 	add.w	r3, r7, #20
 8002480:	4619      	mov	r1, r3
 8002482:	4806      	ldr	r0, [pc, #24]	; (800249c <HAL_SPI_MspInit+0xc0>)
 8002484:	f000 fe7a 	bl	800317c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002488:	bf00      	nop
 800248a:	3728      	adds	r7, #40	; 0x28
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	40003800 	.word	0x40003800
 8002494:	40021000 	.word	0x40021000
 8002498:	48000800 	.word	0x48000800
 800249c:	48000400 	.word	0x48000400

080024a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024a6:	4b0f      	ldr	r3, [pc, #60]	; (80024e4 <HAL_MspInit+0x44>)
 80024a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024aa:	4a0e      	ldr	r2, [pc, #56]	; (80024e4 <HAL_MspInit+0x44>)
 80024ac:	f043 0301 	orr.w	r3, r3, #1
 80024b0:	6613      	str	r3, [r2, #96]	; 0x60
 80024b2:	4b0c      	ldr	r3, [pc, #48]	; (80024e4 <HAL_MspInit+0x44>)
 80024b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024b6:	f003 0301 	and.w	r3, r3, #1
 80024ba:	607b      	str	r3, [r7, #4]
 80024bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024be:	4b09      	ldr	r3, [pc, #36]	; (80024e4 <HAL_MspInit+0x44>)
 80024c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c2:	4a08      	ldr	r2, [pc, #32]	; (80024e4 <HAL_MspInit+0x44>)
 80024c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024c8:	6593      	str	r3, [r2, #88]	; 0x58
 80024ca:	4b06      	ldr	r3, [pc, #24]	; (80024e4 <HAL_MspInit+0x44>)
 80024cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024d2:	603b      	str	r3, [r7, #0]
 80024d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024d6:	bf00      	nop
 80024d8:	370c      	adds	r7, #12
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	40021000 	.word	0x40021000

080024e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024ec:	e7fe      	b.n	80024ec <NMI_Handler+0x4>

080024ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024ee:	b480      	push	{r7}
 80024f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024f2:	e7fe      	b.n	80024f2 <HardFault_Handler+0x4>

080024f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024f8:	e7fe      	b.n	80024f8 <MemManage_Handler+0x4>

080024fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024fa:	b480      	push	{r7}
 80024fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024fe:	e7fe      	b.n	80024fe <BusFault_Handler+0x4>

08002500 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002500:	b480      	push	{r7}
 8002502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002504:	e7fe      	b.n	8002504 <UsageFault_Handler+0x4>

08002506 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002506:	b480      	push	{r7}
 8002508:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800250a:	bf00      	nop
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr

08002514 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002518:	bf00      	nop
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr

08002522 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002522:	b480      	push	{r7}
 8002524:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002526:	bf00      	nop
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr

08002530 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002534:	f000 fa56 	bl	80029e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002538:	bf00      	nop
 800253a:	bd80      	pop	{r7, pc}

0800253c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002540:	4802      	ldr	r0, [pc, #8]	; (800254c <DMA1_Channel5_IRQHandler+0x10>)
 8002542:	f000 fd3c 	bl	8002fbe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002546:	bf00      	nop
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	2000046c 	.word	0x2000046c

08002550 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002554:	4802      	ldr	r0, [pc, #8]	; (8002560 <USART1_IRQHandler+0x10>)
 8002556:	f004 fe17 	bl	8007188 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800255a:	bf00      	nop
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	200003e8 	.word	0x200003e8

08002564 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 18.
  */
void RTC_Alarm_IRQHandler(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002568:	4802      	ldr	r0, [pc, #8]	; (8002574 <RTC_Alarm_IRQHandler+0x10>)
 800256a:	f004 f833 	bl	80065d4 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800256e:	bf00      	nop
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	2000035c 	.word	0x2000035c

08002578 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
	return 1;
 800257c:	2301      	movs	r3, #1
}
 800257e:	4618      	mov	r0, r3
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr

08002588 <_kill>:

int _kill(int pid, int sig)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002592:	f006 fda7 	bl	80090e4 <__errno>
 8002596:	4603      	mov	r3, r0
 8002598:	2216      	movs	r2, #22
 800259a:	601a      	str	r2, [r3, #0]
	return -1;
 800259c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3708      	adds	r7, #8
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <_exit>:

void _exit (int status)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80025b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f7ff ffe7 	bl	8002588 <_kill>
	while (1) {}		/* Make sure we hang here */
 80025ba:	e7fe      	b.n	80025ba <_exit+0x12>

080025bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b086      	sub	sp, #24
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	60b9      	str	r1, [r7, #8]
 80025c6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025c8:	2300      	movs	r3, #0
 80025ca:	617b      	str	r3, [r7, #20]
 80025cc:	e00a      	b.n	80025e4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80025ce:	f3af 8000 	nop.w
 80025d2:	4601      	mov	r1, r0
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	1c5a      	adds	r2, r3, #1
 80025d8:	60ba      	str	r2, [r7, #8]
 80025da:	b2ca      	uxtb	r2, r1
 80025dc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	3301      	adds	r3, #1
 80025e2:	617b      	str	r3, [r7, #20]
 80025e4:	697a      	ldr	r2, [r7, #20]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	dbf0      	blt.n	80025ce <_read+0x12>
	}

return len;
 80025ec:	687b      	ldr	r3, [r7, #4]
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3718      	adds	r7, #24
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}

080025f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80025f6:	b580      	push	{r7, lr}
 80025f8:	b086      	sub	sp, #24
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	60f8      	str	r0, [r7, #12]
 80025fe:	60b9      	str	r1, [r7, #8]
 8002600:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002602:	2300      	movs	r3, #0
 8002604:	617b      	str	r3, [r7, #20]
 8002606:	e009      	b.n	800261c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	1c5a      	adds	r2, r3, #1
 800260c:	60ba      	str	r2, [r7, #8]
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	4618      	mov	r0, r3
 8002612:	f000 f94f 	bl	80028b4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	3301      	adds	r3, #1
 800261a:	617b      	str	r3, [r7, #20]
 800261c:	697a      	ldr	r2, [r7, #20]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	429a      	cmp	r2, r3
 8002622:	dbf1      	blt.n	8002608 <_write+0x12>
	}
	return len;
 8002624:	687b      	ldr	r3, [r7, #4]
}
 8002626:	4618      	mov	r0, r3
 8002628:	3718      	adds	r7, #24
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}

0800262e <_close>:

int _close(int file)
{
 800262e:	b480      	push	{r7}
 8002630:	b083      	sub	sp, #12
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
	return -1;
 8002636:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800263a:	4618      	mov	r0, r3
 800263c:	370c      	adds	r7, #12
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr

08002646 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002646:	b480      	push	{r7}
 8002648:	b083      	sub	sp, #12
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
 800264e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002656:	605a      	str	r2, [r3, #4]
	return 0;
 8002658:	2300      	movs	r3, #0
}
 800265a:	4618      	mov	r0, r3
 800265c:	370c      	adds	r7, #12
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr

08002666 <_isatty>:

int _isatty(int file)
{
 8002666:	b480      	push	{r7}
 8002668:	b083      	sub	sp, #12
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
	return 1;
 800266e:	2301      	movs	r3, #1
}
 8002670:	4618      	mov	r0, r3
 8002672:	370c      	adds	r7, #12
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr

0800267c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800267c:	b480      	push	{r7}
 800267e:	b085      	sub	sp, #20
 8002680:	af00      	add	r7, sp, #0
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	60b9      	str	r1, [r7, #8]
 8002686:	607a      	str	r2, [r7, #4]
	return 0;
 8002688:	2300      	movs	r3, #0
}
 800268a:	4618      	mov	r0, r3
 800268c:	3714      	adds	r7, #20
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr
	...

08002698 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b086      	sub	sp, #24
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026a0:	4a14      	ldr	r2, [pc, #80]	; (80026f4 <_sbrk+0x5c>)
 80026a2:	4b15      	ldr	r3, [pc, #84]	; (80026f8 <_sbrk+0x60>)
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026ac:	4b13      	ldr	r3, [pc, #76]	; (80026fc <_sbrk+0x64>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d102      	bne.n	80026ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026b4:	4b11      	ldr	r3, [pc, #68]	; (80026fc <_sbrk+0x64>)
 80026b6:	4a12      	ldr	r2, [pc, #72]	; (8002700 <_sbrk+0x68>)
 80026b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026ba:	4b10      	ldr	r3, [pc, #64]	; (80026fc <_sbrk+0x64>)
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4413      	add	r3, r2
 80026c2:	693a      	ldr	r2, [r7, #16]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d207      	bcs.n	80026d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026c8:	f006 fd0c 	bl	80090e4 <__errno>
 80026cc:	4603      	mov	r3, r0
 80026ce:	220c      	movs	r2, #12
 80026d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026d6:	e009      	b.n	80026ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026d8:	4b08      	ldr	r3, [pc, #32]	; (80026fc <_sbrk+0x64>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026de:	4b07      	ldr	r3, [pc, #28]	; (80026fc <_sbrk+0x64>)
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4413      	add	r3, r2
 80026e6:	4a05      	ldr	r2, [pc, #20]	; (80026fc <_sbrk+0x64>)
 80026e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026ea:	68fb      	ldr	r3, [r7, #12]
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3718      	adds	r7, #24
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	20018000 	.word	0x20018000
 80026f8:	00000400 	.word	0x00000400
 80026fc:	200003e4 	.word	0x200003e4
 8002700:	200004c8 	.word	0x200004c8

08002704 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002708:	4b06      	ldr	r3, [pc, #24]	; (8002724 <SystemInit+0x20>)
 800270a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800270e:	4a05      	ldr	r2, [pc, #20]	; (8002724 <SystemInit+0x20>)
 8002710:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002714:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002718:	bf00      	nop
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	e000ed00 	.word	0xe000ed00

08002728 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800272c:	4b16      	ldr	r3, [pc, #88]	; (8002788 <MX_USART1_UART_Init+0x60>)
 800272e:	4a17      	ldr	r2, [pc, #92]	; (800278c <MX_USART1_UART_Init+0x64>)
 8002730:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002732:	4b15      	ldr	r3, [pc, #84]	; (8002788 <MX_USART1_UART_Init+0x60>)
 8002734:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002738:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800273a:	4b13      	ldr	r3, [pc, #76]	; (8002788 <MX_USART1_UART_Init+0x60>)
 800273c:	2200      	movs	r2, #0
 800273e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002740:	4b11      	ldr	r3, [pc, #68]	; (8002788 <MX_USART1_UART_Init+0x60>)
 8002742:	2200      	movs	r2, #0
 8002744:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002746:	4b10      	ldr	r3, [pc, #64]	; (8002788 <MX_USART1_UART_Init+0x60>)
 8002748:	2200      	movs	r2, #0
 800274a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800274c:	4b0e      	ldr	r3, [pc, #56]	; (8002788 <MX_USART1_UART_Init+0x60>)
 800274e:	220c      	movs	r2, #12
 8002750:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002752:	4b0d      	ldr	r3, [pc, #52]	; (8002788 <MX_USART1_UART_Init+0x60>)
 8002754:	2200      	movs	r2, #0
 8002756:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002758:	4b0b      	ldr	r3, [pc, #44]	; (8002788 <MX_USART1_UART_Init+0x60>)
 800275a:	2200      	movs	r2, #0
 800275c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800275e:	4b0a      	ldr	r3, [pc, #40]	; (8002788 <MX_USART1_UART_Init+0x60>)
 8002760:	2200      	movs	r2, #0
 8002762:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8002764:	4b08      	ldr	r3, [pc, #32]	; (8002788 <MX_USART1_UART_Init+0x60>)
 8002766:	2210      	movs	r2, #16
 8002768:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800276a:	4b07      	ldr	r3, [pc, #28]	; (8002788 <MX_USART1_UART_Init+0x60>)
 800276c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002770:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002772:	4805      	ldr	r0, [pc, #20]	; (8002788 <MX_USART1_UART_Init+0x60>)
 8002774:	f004 fbd0 	bl	8006f18 <HAL_UART_Init>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d001      	beq.n	8002782 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 800277e:	f7ff fd1f 	bl	80021c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002782:	bf00      	nop
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	200003e8 	.word	0x200003e8
 800278c:	40013800 	.word	0x40013800

08002790 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b0ac      	sub	sp, #176	; 0xb0
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002798:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800279c:	2200      	movs	r2, #0
 800279e:	601a      	str	r2, [r3, #0]
 80027a0:	605a      	str	r2, [r3, #4]
 80027a2:	609a      	str	r2, [r3, #8]
 80027a4:	60da      	str	r2, [r3, #12]
 80027a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80027a8:	f107 0314 	add.w	r3, r7, #20
 80027ac:	2288      	movs	r2, #136	; 0x88
 80027ae:	2100      	movs	r1, #0
 80027b0:	4618      	mov	r0, r3
 80027b2:	f006 ff11 	bl	80095d8 <memset>
  if(uartHandle->Instance==USART1)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a3a      	ldr	r2, [pc, #232]	; (80028a4 <HAL_UART_MspInit+0x114>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d16d      	bne.n	800289c <HAL_UART_MspInit+0x10c>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80027c0:	2301      	movs	r3, #1
 80027c2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80027c4:	2300      	movs	r3, #0
 80027c6:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80027c8:	f107 0314 	add.w	r3, r7, #20
 80027cc:	4618      	mov	r0, r3
 80027ce:	f002 fec1 	bl	8005554 <HAL_RCCEx_PeriphCLKConfig>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d001      	beq.n	80027dc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80027d8:	f7ff fcf2 	bl	80021c0 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80027dc:	4b32      	ldr	r3, [pc, #200]	; (80028a8 <HAL_UART_MspInit+0x118>)
 80027de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027e0:	4a31      	ldr	r2, [pc, #196]	; (80028a8 <HAL_UART_MspInit+0x118>)
 80027e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027e6:	6613      	str	r3, [r2, #96]	; 0x60
 80027e8:	4b2f      	ldr	r3, [pc, #188]	; (80028a8 <HAL_UART_MspInit+0x118>)
 80027ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027f0:	613b      	str	r3, [r7, #16]
 80027f2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027f4:	4b2c      	ldr	r3, [pc, #176]	; (80028a8 <HAL_UART_MspInit+0x118>)
 80027f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027f8:	4a2b      	ldr	r2, [pc, #172]	; (80028a8 <HAL_UART_MspInit+0x118>)
 80027fa:	f043 0301 	orr.w	r3, r3, #1
 80027fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002800:	4b29      	ldr	r3, [pc, #164]	; (80028a8 <HAL_UART_MspInit+0x118>)
 8002802:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002804:	f003 0301 	and.w	r3, r3, #1
 8002808:	60fb      	str	r3, [r7, #12]
 800280a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800280c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002810:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002814:	2302      	movs	r3, #2
 8002816:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281a:	2300      	movs	r3, #0
 800281c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002820:	2303      	movs	r3, #3
 8002822:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002826:	2307      	movs	r3, #7
 8002828:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800282c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002830:	4619      	mov	r1, r3
 8002832:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002836:	f000 fca1 	bl	800317c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800283a:	4b1c      	ldr	r3, [pc, #112]	; (80028ac <HAL_UART_MspInit+0x11c>)
 800283c:	4a1c      	ldr	r2, [pc, #112]	; (80028b0 <HAL_UART_MspInit+0x120>)
 800283e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8002840:	4b1a      	ldr	r3, [pc, #104]	; (80028ac <HAL_UART_MspInit+0x11c>)
 8002842:	2202      	movs	r2, #2
 8002844:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002846:	4b19      	ldr	r3, [pc, #100]	; (80028ac <HAL_UART_MspInit+0x11c>)
 8002848:	2200      	movs	r2, #0
 800284a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800284c:	4b17      	ldr	r3, [pc, #92]	; (80028ac <HAL_UART_MspInit+0x11c>)
 800284e:	2200      	movs	r2, #0
 8002850:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002852:	4b16      	ldr	r3, [pc, #88]	; (80028ac <HAL_UART_MspInit+0x11c>)
 8002854:	2280      	movs	r2, #128	; 0x80
 8002856:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002858:	4b14      	ldr	r3, [pc, #80]	; (80028ac <HAL_UART_MspInit+0x11c>)
 800285a:	2200      	movs	r2, #0
 800285c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800285e:	4b13      	ldr	r3, [pc, #76]	; (80028ac <HAL_UART_MspInit+0x11c>)
 8002860:	2200      	movs	r2, #0
 8002862:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002864:	4b11      	ldr	r3, [pc, #68]	; (80028ac <HAL_UART_MspInit+0x11c>)
 8002866:	2200      	movs	r2, #0
 8002868:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800286a:	4b10      	ldr	r3, [pc, #64]	; (80028ac <HAL_UART_MspInit+0x11c>)
 800286c:	2200      	movs	r2, #0
 800286e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002870:	480e      	ldr	r0, [pc, #56]	; (80028ac <HAL_UART_MspInit+0x11c>)
 8002872:	f000 fa0d 	bl	8002c90 <HAL_DMA_Init>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d001      	beq.n	8002880 <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 800287c:	f7ff fca0 	bl	80021c0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	4a0a      	ldr	r2, [pc, #40]	; (80028ac <HAL_UART_MspInit+0x11c>)
 8002884:	671a      	str	r2, [r3, #112]	; 0x70
 8002886:	4a09      	ldr	r2, [pc, #36]	; (80028ac <HAL_UART_MspInit+0x11c>)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800288c:	2200      	movs	r2, #0
 800288e:	2100      	movs	r1, #0
 8002890:	2025      	movs	r0, #37	; 0x25
 8002892:	f000 f9c6 	bl	8002c22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002896:	2025      	movs	r0, #37	; 0x25
 8002898:	f000 f9df 	bl	8002c5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800289c:	bf00      	nop
 800289e:	37b0      	adds	r7, #176	; 0xb0
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	40013800 	.word	0x40013800
 80028a8:	40021000 	.word	0x40021000
 80028ac:	2000046c 	.word	0x2000046c
 80028b0:	40020058 	.word	0x40020058

080028b4 <__io_putchar>:
  }
}

/* USER CODE BEGIN 1 */
int __io_putchar(int ch)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]

  HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80028bc:	1d39      	adds	r1, r7, #4
 80028be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80028c2:	2201      	movs	r2, #1
 80028c4:	4803      	ldr	r0, [pc, #12]	; (80028d4 <__io_putchar+0x20>)
 80028c6:	f004 fb75 	bl	8006fb4 <HAL_UART_Transmit>

  return 1;
 80028ca:	2301      	movs	r3, #1
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3708      	adds	r7, #8
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	200003e8 	.word	0x200003e8

080028d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80028d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002910 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80028dc:	f7ff ff12 	bl	8002704 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80028e0:	480c      	ldr	r0, [pc, #48]	; (8002914 <LoopForever+0x6>)
  ldr r1, =_edata
 80028e2:	490d      	ldr	r1, [pc, #52]	; (8002918 <LoopForever+0xa>)
  ldr r2, =_sidata
 80028e4:	4a0d      	ldr	r2, [pc, #52]	; (800291c <LoopForever+0xe>)
  movs r3, #0
 80028e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028e8:	e002      	b.n	80028f0 <LoopCopyDataInit>

080028ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028ee:	3304      	adds	r3, #4

080028f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028f4:	d3f9      	bcc.n	80028ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028f6:	4a0a      	ldr	r2, [pc, #40]	; (8002920 <LoopForever+0x12>)
  ldr r4, =_ebss
 80028f8:	4c0a      	ldr	r4, [pc, #40]	; (8002924 <LoopForever+0x16>)
  movs r3, #0
 80028fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028fc:	e001      	b.n	8002902 <LoopFillZerobss>

080028fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002900:	3204      	adds	r2, #4

08002902 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002902:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002904:	d3fb      	bcc.n	80028fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002906:	f006 fdbd 	bl	8009484 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800290a:	f7fe ffb5 	bl	8001878 <main>

0800290e <LoopForever>:

LoopForever:
    b LoopForever
 800290e:	e7fe      	b.n	800290e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002910:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002914:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002918:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 800291c:	08012f10 	.word	0x08012f10
  ldr r2, =_sbss
 8002920:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002924:	200004c8 	.word	0x200004c8

08002928 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002928:	e7fe      	b.n	8002928 <ADC1_2_IRQHandler>
	...

0800292c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002932:	2300      	movs	r3, #0
 8002934:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002936:	4b0c      	ldr	r3, [pc, #48]	; (8002968 <HAL_Init+0x3c>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a0b      	ldr	r2, [pc, #44]	; (8002968 <HAL_Init+0x3c>)
 800293c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002940:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002942:	2003      	movs	r0, #3
 8002944:	f000 f962 	bl	8002c0c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002948:	2000      	movs	r0, #0
 800294a:	f000 f80f 	bl	800296c <HAL_InitTick>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d002      	beq.n	800295a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	71fb      	strb	r3, [r7, #7]
 8002958:	e001      	b.n	800295e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800295a:	f7ff fda1 	bl	80024a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800295e:	79fb      	ldrb	r3, [r7, #7]
}
 8002960:	4618      	mov	r0, r3
 8002962:	3708      	adds	r7, #8
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	40022000 	.word	0x40022000

0800296c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002974:	2300      	movs	r3, #0
 8002976:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002978:	4b17      	ldr	r3, [pc, #92]	; (80029d8 <HAL_InitTick+0x6c>)
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d023      	beq.n	80029c8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002980:	4b16      	ldr	r3, [pc, #88]	; (80029dc <HAL_InitTick+0x70>)
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	4b14      	ldr	r3, [pc, #80]	; (80029d8 <HAL_InitTick+0x6c>)
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	4619      	mov	r1, r3
 800298a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800298e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002992:	fbb2 f3f3 	udiv	r3, r2, r3
 8002996:	4618      	mov	r0, r3
 8002998:	f000 f96d 	bl	8002c76 <HAL_SYSTICK_Config>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d10f      	bne.n	80029c2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2b0f      	cmp	r3, #15
 80029a6:	d809      	bhi.n	80029bc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029a8:	2200      	movs	r2, #0
 80029aa:	6879      	ldr	r1, [r7, #4]
 80029ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80029b0:	f000 f937 	bl	8002c22 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80029b4:	4a0a      	ldr	r2, [pc, #40]	; (80029e0 <HAL_InitTick+0x74>)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6013      	str	r3, [r2, #0]
 80029ba:	e007      	b.n	80029cc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	73fb      	strb	r3, [r7, #15]
 80029c0:	e004      	b.n	80029cc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	73fb      	strb	r3, [r7, #15]
 80029c6:	e001      	b.n	80029cc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80029cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3710      	adds	r7, #16
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	20000008 	.word	0x20000008
 80029dc:	20000000 	.word	0x20000000
 80029e0:	20000004 	.word	0x20000004

080029e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80029e8:	4b06      	ldr	r3, [pc, #24]	; (8002a04 <HAL_IncTick+0x20>)
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	461a      	mov	r2, r3
 80029ee:	4b06      	ldr	r3, [pc, #24]	; (8002a08 <HAL_IncTick+0x24>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4413      	add	r3, r2
 80029f4:	4a04      	ldr	r2, [pc, #16]	; (8002a08 <HAL_IncTick+0x24>)
 80029f6:	6013      	str	r3, [r2, #0]
}
 80029f8:	bf00      	nop
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	20000008 	.word	0x20000008
 8002a08:	200004b4 	.word	0x200004b4

08002a0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	af00      	add	r7, sp, #0
  return uwTick;
 8002a10:	4b03      	ldr	r3, [pc, #12]	; (8002a20 <HAL_GetTick+0x14>)
 8002a12:	681b      	ldr	r3, [r3, #0]
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
 8002a1e:	bf00      	nop
 8002a20:	200004b4 	.word	0x200004b4

08002a24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a2c:	f7ff ffee 	bl	8002a0c <HAL_GetTick>
 8002a30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a3c:	d005      	beq.n	8002a4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002a3e:	4b0a      	ldr	r3, [pc, #40]	; (8002a68 <HAL_Delay+0x44>)
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	461a      	mov	r2, r3
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	4413      	add	r3, r2
 8002a48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a4a:	bf00      	nop
 8002a4c:	f7ff ffde 	bl	8002a0c <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	68fa      	ldr	r2, [r7, #12]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d8f7      	bhi.n	8002a4c <HAL_Delay+0x28>
  {
  }
}
 8002a5c:	bf00      	nop
 8002a5e:	bf00      	nop
 8002a60:	3710      	adds	r7, #16
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	20000008 	.word	0x20000008

08002a6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b085      	sub	sp, #20
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f003 0307 	and.w	r3, r3, #7
 8002a7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a7c:	4b0c      	ldr	r3, [pc, #48]	; (8002ab0 <__NVIC_SetPriorityGrouping+0x44>)
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a82:	68ba      	ldr	r2, [r7, #8]
 8002a84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a88:	4013      	ands	r3, r2
 8002a8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a9e:	4a04      	ldr	r2, [pc, #16]	; (8002ab0 <__NVIC_SetPriorityGrouping+0x44>)
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	60d3      	str	r3, [r2, #12]
}
 8002aa4:	bf00      	nop
 8002aa6:	3714      	adds	r7, #20
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr
 8002ab0:	e000ed00 	.word	0xe000ed00

08002ab4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ab8:	4b04      	ldr	r3, [pc, #16]	; (8002acc <__NVIC_GetPriorityGrouping+0x18>)
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	0a1b      	lsrs	r3, r3, #8
 8002abe:	f003 0307 	and.w	r3, r3, #7
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr
 8002acc:	e000ed00 	.word	0xe000ed00

08002ad0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	db0b      	blt.n	8002afa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ae2:	79fb      	ldrb	r3, [r7, #7]
 8002ae4:	f003 021f 	and.w	r2, r3, #31
 8002ae8:	4907      	ldr	r1, [pc, #28]	; (8002b08 <__NVIC_EnableIRQ+0x38>)
 8002aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aee:	095b      	lsrs	r3, r3, #5
 8002af0:	2001      	movs	r0, #1
 8002af2:	fa00 f202 	lsl.w	r2, r0, r2
 8002af6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002afa:	bf00      	nop
 8002afc:	370c      	adds	r7, #12
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	e000e100 	.word	0xe000e100

08002b0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	4603      	mov	r3, r0
 8002b14:	6039      	str	r1, [r7, #0]
 8002b16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	db0a      	blt.n	8002b36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	b2da      	uxtb	r2, r3
 8002b24:	490c      	ldr	r1, [pc, #48]	; (8002b58 <__NVIC_SetPriority+0x4c>)
 8002b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b2a:	0112      	lsls	r2, r2, #4
 8002b2c:	b2d2      	uxtb	r2, r2
 8002b2e:	440b      	add	r3, r1
 8002b30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b34:	e00a      	b.n	8002b4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	b2da      	uxtb	r2, r3
 8002b3a:	4908      	ldr	r1, [pc, #32]	; (8002b5c <__NVIC_SetPriority+0x50>)
 8002b3c:	79fb      	ldrb	r3, [r7, #7]
 8002b3e:	f003 030f 	and.w	r3, r3, #15
 8002b42:	3b04      	subs	r3, #4
 8002b44:	0112      	lsls	r2, r2, #4
 8002b46:	b2d2      	uxtb	r2, r2
 8002b48:	440b      	add	r3, r1
 8002b4a:	761a      	strb	r2, [r3, #24]
}
 8002b4c:	bf00      	nop
 8002b4e:	370c      	adds	r7, #12
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr
 8002b58:	e000e100 	.word	0xe000e100
 8002b5c:	e000ed00 	.word	0xe000ed00

08002b60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b089      	sub	sp, #36	; 0x24
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	60b9      	str	r1, [r7, #8]
 8002b6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f003 0307 	and.w	r3, r3, #7
 8002b72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	f1c3 0307 	rsb	r3, r3, #7
 8002b7a:	2b04      	cmp	r3, #4
 8002b7c:	bf28      	it	cs
 8002b7e:	2304      	movcs	r3, #4
 8002b80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	3304      	adds	r3, #4
 8002b86:	2b06      	cmp	r3, #6
 8002b88:	d902      	bls.n	8002b90 <NVIC_EncodePriority+0x30>
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	3b03      	subs	r3, #3
 8002b8e:	e000      	b.n	8002b92 <NVIC_EncodePriority+0x32>
 8002b90:	2300      	movs	r3, #0
 8002b92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9e:	43da      	mvns	r2, r3
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	401a      	ands	r2, r3
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ba8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	fa01 f303 	lsl.w	r3, r1, r3
 8002bb2:	43d9      	mvns	r1, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bb8:	4313      	orrs	r3, r2
         );
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3724      	adds	r7, #36	; 0x24
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
	...

08002bc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	3b01      	subs	r3, #1
 8002bd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bd8:	d301      	bcc.n	8002bde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e00f      	b.n	8002bfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bde:	4a0a      	ldr	r2, [pc, #40]	; (8002c08 <SysTick_Config+0x40>)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	3b01      	subs	r3, #1
 8002be4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002be6:	210f      	movs	r1, #15
 8002be8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002bec:	f7ff ff8e 	bl	8002b0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bf0:	4b05      	ldr	r3, [pc, #20]	; (8002c08 <SysTick_Config+0x40>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bf6:	4b04      	ldr	r3, [pc, #16]	; (8002c08 <SysTick_Config+0x40>)
 8002bf8:	2207      	movs	r2, #7
 8002bfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3708      	adds	r7, #8
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	e000e010 	.word	0xe000e010

08002c0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f7ff ff29 	bl	8002a6c <__NVIC_SetPriorityGrouping>
}
 8002c1a:	bf00      	nop
 8002c1c:	3708      	adds	r7, #8
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}

08002c22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c22:	b580      	push	{r7, lr}
 8002c24:	b086      	sub	sp, #24
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	4603      	mov	r3, r0
 8002c2a:	60b9      	str	r1, [r7, #8]
 8002c2c:	607a      	str	r2, [r7, #4]
 8002c2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002c30:	2300      	movs	r3, #0
 8002c32:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002c34:	f7ff ff3e 	bl	8002ab4 <__NVIC_GetPriorityGrouping>
 8002c38:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	68b9      	ldr	r1, [r7, #8]
 8002c3e:	6978      	ldr	r0, [r7, #20]
 8002c40:	f7ff ff8e 	bl	8002b60 <NVIC_EncodePriority>
 8002c44:	4602      	mov	r2, r0
 8002c46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c4a:	4611      	mov	r1, r2
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7ff ff5d 	bl	8002b0c <__NVIC_SetPriority>
}
 8002c52:	bf00      	nop
 8002c54:	3718      	adds	r7, #24
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}

08002c5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c5a:	b580      	push	{r7, lr}
 8002c5c:	b082      	sub	sp, #8
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	4603      	mov	r3, r0
 8002c62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7ff ff31 	bl	8002ad0 <__NVIC_EnableIRQ>
}
 8002c6e:	bf00      	nop
 8002c70:	3708      	adds	r7, #8
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}

08002c76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c76:	b580      	push	{r7, lr}
 8002c78:	b082      	sub	sp, #8
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f7ff ffa2 	bl	8002bc8 <SysTick_Config>
 8002c84:	4603      	mov	r3, r0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3708      	adds	r7, #8
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
	...

08002c90 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b085      	sub	sp, #20
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d101      	bne.n	8002ca2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e098      	b.n	8002dd4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	4b4d      	ldr	r3, [pc, #308]	; (8002de0 <HAL_DMA_Init+0x150>)
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d80f      	bhi.n	8002cce <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	4b4b      	ldr	r3, [pc, #300]	; (8002de4 <HAL_DMA_Init+0x154>)
 8002cb6:	4413      	add	r3, r2
 8002cb8:	4a4b      	ldr	r2, [pc, #300]	; (8002de8 <HAL_DMA_Init+0x158>)
 8002cba:	fba2 2303 	umull	r2, r3, r2, r3
 8002cbe:	091b      	lsrs	r3, r3, #4
 8002cc0:	009a      	lsls	r2, r3, #2
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a48      	ldr	r2, [pc, #288]	; (8002dec <HAL_DMA_Init+0x15c>)
 8002cca:	641a      	str	r2, [r3, #64]	; 0x40
 8002ccc:	e00e      	b.n	8002cec <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	4b46      	ldr	r3, [pc, #280]	; (8002df0 <HAL_DMA_Init+0x160>)
 8002cd6:	4413      	add	r3, r2
 8002cd8:	4a43      	ldr	r2, [pc, #268]	; (8002de8 <HAL_DMA_Init+0x158>)
 8002cda:	fba2 2303 	umull	r2, r3, r2, r3
 8002cde:	091b      	lsrs	r3, r3, #4
 8002ce0:	009a      	lsls	r2, r3, #2
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a42      	ldr	r2, [pc, #264]	; (8002df4 <HAL_DMA_Init+0x164>)
 8002cea:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2202      	movs	r2, #2
 8002cf0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002d02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d06:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002d10:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	699b      	ldr	r3, [r3, #24]
 8002d22:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d28:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a1b      	ldr	r3, [r3, #32]
 8002d2e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002d30:	68fa      	ldr	r2, [r7, #12]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	68fa      	ldr	r2, [r7, #12]
 8002d3c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d46:	d039      	beq.n	8002dbc <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4c:	4a27      	ldr	r2, [pc, #156]	; (8002dec <HAL_DMA_Init+0x15c>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d11a      	bne.n	8002d88 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002d52:	4b29      	ldr	r3, [pc, #164]	; (8002df8 <HAL_DMA_Init+0x168>)
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d5a:	f003 031c 	and.w	r3, r3, #28
 8002d5e:	210f      	movs	r1, #15
 8002d60:	fa01 f303 	lsl.w	r3, r1, r3
 8002d64:	43db      	mvns	r3, r3
 8002d66:	4924      	ldr	r1, [pc, #144]	; (8002df8 <HAL_DMA_Init+0x168>)
 8002d68:	4013      	ands	r3, r2
 8002d6a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002d6c:	4b22      	ldr	r3, [pc, #136]	; (8002df8 <HAL_DMA_Init+0x168>)
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6859      	ldr	r1, [r3, #4]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d78:	f003 031c 	and.w	r3, r3, #28
 8002d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d80:	491d      	ldr	r1, [pc, #116]	; (8002df8 <HAL_DMA_Init+0x168>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	600b      	str	r3, [r1, #0]
 8002d86:	e019      	b.n	8002dbc <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002d88:	4b1c      	ldr	r3, [pc, #112]	; (8002dfc <HAL_DMA_Init+0x16c>)
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d90:	f003 031c 	and.w	r3, r3, #28
 8002d94:	210f      	movs	r1, #15
 8002d96:	fa01 f303 	lsl.w	r3, r1, r3
 8002d9a:	43db      	mvns	r3, r3
 8002d9c:	4917      	ldr	r1, [pc, #92]	; (8002dfc <HAL_DMA_Init+0x16c>)
 8002d9e:	4013      	ands	r3, r2
 8002da0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002da2:	4b16      	ldr	r3, [pc, #88]	; (8002dfc <HAL_DMA_Init+0x16c>)
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6859      	ldr	r1, [r3, #4]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dae:	f003 031c 	and.w	r3, r3, #28
 8002db2:	fa01 f303 	lsl.w	r3, r1, r3
 8002db6:	4911      	ldr	r1, [pc, #68]	; (8002dfc <HAL_DMA_Init+0x16c>)
 8002db8:	4313      	orrs	r3, r2
 8002dba:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002dd2:	2300      	movs	r3, #0
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3714      	adds	r7, #20
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr
 8002de0:	40020407 	.word	0x40020407
 8002de4:	bffdfff8 	.word	0xbffdfff8
 8002de8:	cccccccd 	.word	0xcccccccd
 8002dec:	40020000 	.word	0x40020000
 8002df0:	bffdfbf8 	.word	0xbffdfbf8
 8002df4:	40020400 	.word	0x40020400
 8002df8:	400200a8 	.word	0x400200a8
 8002dfc:	400204a8 	.word	0x400204a8

08002e00 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b086      	sub	sp, #24
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	60b9      	str	r1, [r7, #8]
 8002e0a:	607a      	str	r2, [r7, #4]
 8002e0c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d101      	bne.n	8002e20 <HAL_DMA_Start_IT+0x20>
 8002e1c:	2302      	movs	r3, #2
 8002e1e:	e04b      	b.n	8002eb8 <HAL_DMA_Start_IT+0xb8>
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d13a      	bne.n	8002eaa <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2202      	movs	r2, #2
 8002e38:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f022 0201 	bic.w	r2, r2, #1
 8002e50:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	68b9      	ldr	r1, [r7, #8]
 8002e58:	68f8      	ldr	r0, [r7, #12]
 8002e5a:	f000 f95f 	bl	800311c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d008      	beq.n	8002e78 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f042 020e 	orr.w	r2, r2, #14
 8002e74:	601a      	str	r2, [r3, #0]
 8002e76:	e00f      	b.n	8002e98 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f022 0204 	bic.w	r2, r2, #4
 8002e86:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f042 020a 	orr.w	r2, r2, #10
 8002e96:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f042 0201 	orr.w	r2, r2, #1
 8002ea6:	601a      	str	r2, [r3, #0]
 8002ea8:	e005      	b.n	8002eb6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002eb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3718      	adds	r7, #24
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b085      	sub	sp, #20
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d008      	beq.n	8002eea <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2204      	movs	r2, #4
 8002edc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e022      	b.n	8002f30 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f022 020e 	bic.w	r2, r2, #14
 8002ef8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f022 0201 	bic.w	r2, r2, #1
 8002f08:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f0e:	f003 021c 	and.w	r2, r3, #28
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f16:	2101      	movs	r1, #1
 8002f18:	fa01 f202 	lsl.w	r2, r1, r2
 8002f1c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2201      	movs	r2, #1
 8002f22:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002f2e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3714      	adds	r7, #20
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr

08002f3c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f44:	2300      	movs	r3, #0
 8002f46:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d005      	beq.n	8002f60 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2204      	movs	r2, #4
 8002f58:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	73fb      	strb	r3, [r7, #15]
 8002f5e:	e029      	b.n	8002fb4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f022 020e 	bic.w	r2, r2, #14
 8002f6e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f022 0201 	bic.w	r2, r2, #1
 8002f7e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f84:	f003 021c 	and.w	r2, r3, #28
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8c:	2101      	movs	r1, #1
 8002f8e:	fa01 f202 	lsl.w	r2, r1, r2
 8002f92:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d003      	beq.n	8002fb4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	4798      	blx	r3
    }
  }
  return status;
 8002fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3710      	adds	r7, #16
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}

08002fbe <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	b084      	sub	sp, #16
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fda:	f003 031c 	and.w	r3, r3, #28
 8002fde:	2204      	movs	r2, #4
 8002fe0:	409a      	lsls	r2, r3
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d026      	beq.n	8003038 <HAL_DMA_IRQHandler+0x7a>
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	f003 0304 	and.w	r3, r3, #4
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d021      	beq.n	8003038 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0320 	and.w	r3, r3, #32
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d107      	bne.n	8003012 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f022 0204 	bic.w	r2, r2, #4
 8003010:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003016:	f003 021c 	and.w	r2, r3, #28
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301e:	2104      	movs	r1, #4
 8003020:	fa01 f202 	lsl.w	r2, r1, r2
 8003024:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302a:	2b00      	cmp	r3, #0
 800302c:	d071      	beq.n	8003112 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003036:	e06c      	b.n	8003112 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800303c:	f003 031c 	and.w	r3, r3, #28
 8003040:	2202      	movs	r2, #2
 8003042:	409a      	lsls	r2, r3
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	4013      	ands	r3, r2
 8003048:	2b00      	cmp	r3, #0
 800304a:	d02e      	beq.n	80030aa <HAL_DMA_IRQHandler+0xec>
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	f003 0302 	and.w	r3, r3, #2
 8003052:	2b00      	cmp	r3, #0
 8003054:	d029      	beq.n	80030aa <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0320 	and.w	r3, r3, #32
 8003060:	2b00      	cmp	r3, #0
 8003062:	d10b      	bne.n	800307c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f022 020a 	bic.w	r2, r2, #10
 8003072:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003080:	f003 021c 	and.w	r2, r3, #28
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003088:	2102      	movs	r1, #2
 800308a:	fa01 f202 	lsl.w	r2, r1, r2
 800308e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800309c:	2b00      	cmp	r3, #0
 800309e:	d038      	beq.n	8003112 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80030a8:	e033      	b.n	8003112 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ae:	f003 031c 	and.w	r3, r3, #28
 80030b2:	2208      	movs	r2, #8
 80030b4:	409a      	lsls	r2, r3
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	4013      	ands	r3, r2
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d02a      	beq.n	8003114 <HAL_DMA_IRQHandler+0x156>
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	f003 0308 	and.w	r3, r3, #8
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d025      	beq.n	8003114 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f022 020e 	bic.w	r2, r2, #14
 80030d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030dc:	f003 021c 	and.w	r2, r3, #28
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e4:	2101      	movs	r1, #1
 80030e6:	fa01 f202 	lsl.w	r2, r1, r2
 80030ea:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2201      	movs	r2, #1
 80030f6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003106:	2b00      	cmp	r3, #0
 8003108:	d004      	beq.n	8003114 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003112:	bf00      	nop
 8003114:	bf00      	nop
}
 8003116:	3710      	adds	r7, #16
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}

0800311c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800311c:	b480      	push	{r7}
 800311e:	b085      	sub	sp, #20
 8003120:	af00      	add	r7, sp, #0
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	60b9      	str	r1, [r7, #8]
 8003126:	607a      	str	r2, [r7, #4]
 8003128:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800312e:	f003 021c 	and.w	r2, r3, #28
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003136:	2101      	movs	r1, #1
 8003138:	fa01 f202 	lsl.w	r2, r1, r2
 800313c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	683a      	ldr	r2, [r7, #0]
 8003144:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	2b10      	cmp	r3, #16
 800314c:	d108      	bne.n	8003160 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	68ba      	ldr	r2, [r7, #8]
 800315c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800315e:	e007      	b.n	8003170 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	68ba      	ldr	r2, [r7, #8]
 8003166:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	60da      	str	r2, [r3, #12]
}
 8003170:	bf00      	nop
 8003172:	3714      	adds	r7, #20
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr

0800317c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800317c:	b480      	push	{r7}
 800317e:	b087      	sub	sp, #28
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003186:	2300      	movs	r3, #0
 8003188:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800318a:	e17f      	b.n	800348c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	2101      	movs	r1, #1
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	fa01 f303 	lsl.w	r3, r1, r3
 8003198:	4013      	ands	r3, r2
 800319a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	f000 8171 	beq.w	8003486 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f003 0303 	and.w	r3, r3, #3
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d005      	beq.n	80031bc <HAL_GPIO_Init+0x40>
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f003 0303 	and.w	r3, r3, #3
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d130      	bne.n	800321e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	005b      	lsls	r3, r3, #1
 80031c6:	2203      	movs	r2, #3
 80031c8:	fa02 f303 	lsl.w	r3, r2, r3
 80031cc:	43db      	mvns	r3, r3
 80031ce:	693a      	ldr	r2, [r7, #16]
 80031d0:	4013      	ands	r3, r2
 80031d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	68da      	ldr	r2, [r3, #12]
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	005b      	lsls	r3, r3, #1
 80031dc:	fa02 f303 	lsl.w	r3, r2, r3
 80031e0:	693a      	ldr	r2, [r7, #16]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	693a      	ldr	r2, [r7, #16]
 80031ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80031f2:	2201      	movs	r2, #1
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	fa02 f303 	lsl.w	r3, r2, r3
 80031fa:	43db      	mvns	r3, r3
 80031fc:	693a      	ldr	r2, [r7, #16]
 80031fe:	4013      	ands	r3, r2
 8003200:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	091b      	lsrs	r3, r3, #4
 8003208:	f003 0201 	and.w	r2, r3, #1
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	fa02 f303 	lsl.w	r3, r2, r3
 8003212:	693a      	ldr	r2, [r7, #16]
 8003214:	4313      	orrs	r3, r2
 8003216:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	693a      	ldr	r2, [r7, #16]
 800321c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f003 0303 	and.w	r3, r3, #3
 8003226:	2b03      	cmp	r3, #3
 8003228:	d118      	bne.n	800325c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800322e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003230:	2201      	movs	r2, #1
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	fa02 f303 	lsl.w	r3, r2, r3
 8003238:	43db      	mvns	r3, r3
 800323a:	693a      	ldr	r2, [r7, #16]
 800323c:	4013      	ands	r3, r2
 800323e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	08db      	lsrs	r3, r3, #3
 8003246:	f003 0201 	and.w	r2, r3, #1
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	fa02 f303 	lsl.w	r3, r2, r3
 8003250:	693a      	ldr	r2, [r7, #16]
 8003252:	4313      	orrs	r3, r2
 8003254:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	693a      	ldr	r2, [r7, #16]
 800325a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f003 0303 	and.w	r3, r3, #3
 8003264:	2b03      	cmp	r3, #3
 8003266:	d017      	beq.n	8003298 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	005b      	lsls	r3, r3, #1
 8003272:	2203      	movs	r2, #3
 8003274:	fa02 f303 	lsl.w	r3, r2, r3
 8003278:	43db      	mvns	r3, r3
 800327a:	693a      	ldr	r2, [r7, #16]
 800327c:	4013      	ands	r3, r2
 800327e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	689a      	ldr	r2, [r3, #8]
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	005b      	lsls	r3, r3, #1
 8003288:	fa02 f303 	lsl.w	r3, r2, r3
 800328c:	693a      	ldr	r2, [r7, #16]
 800328e:	4313      	orrs	r3, r2
 8003290:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	693a      	ldr	r2, [r7, #16]
 8003296:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f003 0303 	and.w	r3, r3, #3
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d123      	bne.n	80032ec <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	08da      	lsrs	r2, r3, #3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	3208      	adds	r2, #8
 80032ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	f003 0307 	and.w	r3, r3, #7
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	220f      	movs	r2, #15
 80032bc:	fa02 f303 	lsl.w	r3, r2, r3
 80032c0:	43db      	mvns	r3, r3
 80032c2:	693a      	ldr	r2, [r7, #16]
 80032c4:	4013      	ands	r3, r2
 80032c6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	691a      	ldr	r2, [r3, #16]
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	f003 0307 	and.w	r3, r3, #7
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	fa02 f303 	lsl.w	r3, r2, r3
 80032d8:	693a      	ldr	r2, [r7, #16]
 80032da:	4313      	orrs	r3, r2
 80032dc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	08da      	lsrs	r2, r3, #3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	3208      	adds	r2, #8
 80032e6:	6939      	ldr	r1, [r7, #16]
 80032e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	005b      	lsls	r3, r3, #1
 80032f6:	2203      	movs	r2, #3
 80032f8:	fa02 f303 	lsl.w	r3, r2, r3
 80032fc:	43db      	mvns	r3, r3
 80032fe:	693a      	ldr	r2, [r7, #16]
 8003300:	4013      	ands	r3, r2
 8003302:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f003 0203 	and.w	r2, r3, #3
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	005b      	lsls	r3, r3, #1
 8003310:	fa02 f303 	lsl.w	r3, r2, r3
 8003314:	693a      	ldr	r2, [r7, #16]
 8003316:	4313      	orrs	r3, r2
 8003318:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	693a      	ldr	r2, [r7, #16]
 800331e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003328:	2b00      	cmp	r3, #0
 800332a:	f000 80ac 	beq.w	8003486 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800332e:	4b5f      	ldr	r3, [pc, #380]	; (80034ac <HAL_GPIO_Init+0x330>)
 8003330:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003332:	4a5e      	ldr	r2, [pc, #376]	; (80034ac <HAL_GPIO_Init+0x330>)
 8003334:	f043 0301 	orr.w	r3, r3, #1
 8003338:	6613      	str	r3, [r2, #96]	; 0x60
 800333a:	4b5c      	ldr	r3, [pc, #368]	; (80034ac <HAL_GPIO_Init+0x330>)
 800333c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800333e:	f003 0301 	and.w	r3, r3, #1
 8003342:	60bb      	str	r3, [r7, #8]
 8003344:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003346:	4a5a      	ldr	r2, [pc, #360]	; (80034b0 <HAL_GPIO_Init+0x334>)
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	089b      	lsrs	r3, r3, #2
 800334c:	3302      	adds	r3, #2
 800334e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003352:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	f003 0303 	and.w	r3, r3, #3
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	220f      	movs	r2, #15
 800335e:	fa02 f303 	lsl.w	r3, r2, r3
 8003362:	43db      	mvns	r3, r3
 8003364:	693a      	ldr	r2, [r7, #16]
 8003366:	4013      	ands	r3, r2
 8003368:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003370:	d025      	beq.n	80033be <HAL_GPIO_Init+0x242>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a4f      	ldr	r2, [pc, #316]	; (80034b4 <HAL_GPIO_Init+0x338>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d01f      	beq.n	80033ba <HAL_GPIO_Init+0x23e>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a4e      	ldr	r2, [pc, #312]	; (80034b8 <HAL_GPIO_Init+0x33c>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d019      	beq.n	80033b6 <HAL_GPIO_Init+0x23a>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a4d      	ldr	r2, [pc, #308]	; (80034bc <HAL_GPIO_Init+0x340>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d013      	beq.n	80033b2 <HAL_GPIO_Init+0x236>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a4c      	ldr	r2, [pc, #304]	; (80034c0 <HAL_GPIO_Init+0x344>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d00d      	beq.n	80033ae <HAL_GPIO_Init+0x232>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a4b      	ldr	r2, [pc, #300]	; (80034c4 <HAL_GPIO_Init+0x348>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d007      	beq.n	80033aa <HAL_GPIO_Init+0x22e>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a4a      	ldr	r2, [pc, #296]	; (80034c8 <HAL_GPIO_Init+0x34c>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d101      	bne.n	80033a6 <HAL_GPIO_Init+0x22a>
 80033a2:	2306      	movs	r3, #6
 80033a4:	e00c      	b.n	80033c0 <HAL_GPIO_Init+0x244>
 80033a6:	2307      	movs	r3, #7
 80033a8:	e00a      	b.n	80033c0 <HAL_GPIO_Init+0x244>
 80033aa:	2305      	movs	r3, #5
 80033ac:	e008      	b.n	80033c0 <HAL_GPIO_Init+0x244>
 80033ae:	2304      	movs	r3, #4
 80033b0:	e006      	b.n	80033c0 <HAL_GPIO_Init+0x244>
 80033b2:	2303      	movs	r3, #3
 80033b4:	e004      	b.n	80033c0 <HAL_GPIO_Init+0x244>
 80033b6:	2302      	movs	r3, #2
 80033b8:	e002      	b.n	80033c0 <HAL_GPIO_Init+0x244>
 80033ba:	2301      	movs	r3, #1
 80033bc:	e000      	b.n	80033c0 <HAL_GPIO_Init+0x244>
 80033be:	2300      	movs	r3, #0
 80033c0:	697a      	ldr	r2, [r7, #20]
 80033c2:	f002 0203 	and.w	r2, r2, #3
 80033c6:	0092      	lsls	r2, r2, #2
 80033c8:	4093      	lsls	r3, r2
 80033ca:	693a      	ldr	r2, [r7, #16]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80033d0:	4937      	ldr	r1, [pc, #220]	; (80034b0 <HAL_GPIO_Init+0x334>)
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	089b      	lsrs	r3, r3, #2
 80033d6:	3302      	adds	r3, #2
 80033d8:	693a      	ldr	r2, [r7, #16]
 80033da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80033de:	4b3b      	ldr	r3, [pc, #236]	; (80034cc <HAL_GPIO_Init+0x350>)
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	43db      	mvns	r3, r3
 80033e8:	693a      	ldr	r2, [r7, #16]
 80033ea:	4013      	ands	r3, r2
 80033ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d003      	beq.n	8003402 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80033fa:	693a      	ldr	r2, [r7, #16]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	4313      	orrs	r3, r2
 8003400:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003402:	4a32      	ldr	r2, [pc, #200]	; (80034cc <HAL_GPIO_Init+0x350>)
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003408:	4b30      	ldr	r3, [pc, #192]	; (80034cc <HAL_GPIO_Init+0x350>)
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	43db      	mvns	r3, r3
 8003412:	693a      	ldr	r2, [r7, #16]
 8003414:	4013      	ands	r3, r2
 8003416:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d003      	beq.n	800342c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003424:	693a      	ldr	r2, [r7, #16]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	4313      	orrs	r3, r2
 800342a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800342c:	4a27      	ldr	r2, [pc, #156]	; (80034cc <HAL_GPIO_Init+0x350>)
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003432:	4b26      	ldr	r3, [pc, #152]	; (80034cc <HAL_GPIO_Init+0x350>)
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	43db      	mvns	r3, r3
 800343c:	693a      	ldr	r2, [r7, #16]
 800343e:	4013      	ands	r3, r2
 8003440:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d003      	beq.n	8003456 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800344e:	693a      	ldr	r2, [r7, #16]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	4313      	orrs	r3, r2
 8003454:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003456:	4a1d      	ldr	r2, [pc, #116]	; (80034cc <HAL_GPIO_Init+0x350>)
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800345c:	4b1b      	ldr	r3, [pc, #108]	; (80034cc <HAL_GPIO_Init+0x350>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	43db      	mvns	r3, r3
 8003466:	693a      	ldr	r2, [r7, #16]
 8003468:	4013      	ands	r3, r2
 800346a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d003      	beq.n	8003480 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003478:	693a      	ldr	r2, [r7, #16]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	4313      	orrs	r3, r2
 800347e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003480:	4a12      	ldr	r2, [pc, #72]	; (80034cc <HAL_GPIO_Init+0x350>)
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	3301      	adds	r3, #1
 800348a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	fa22 f303 	lsr.w	r3, r2, r3
 8003496:	2b00      	cmp	r3, #0
 8003498:	f47f ae78 	bne.w	800318c <HAL_GPIO_Init+0x10>
  }
}
 800349c:	bf00      	nop
 800349e:	bf00      	nop
 80034a0:	371c      	adds	r7, #28
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr
 80034aa:	bf00      	nop
 80034ac:	40021000 	.word	0x40021000
 80034b0:	40010000 	.word	0x40010000
 80034b4:	48000400 	.word	0x48000400
 80034b8:	48000800 	.word	0x48000800
 80034bc:	48000c00 	.word	0x48000c00
 80034c0:	48001000 	.word	0x48001000
 80034c4:	48001400 	.word	0x48001400
 80034c8:	48001800 	.word	0x48001800
 80034cc:	40010400 	.word	0x40010400

080034d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	460b      	mov	r3, r1
 80034da:	807b      	strh	r3, [r7, #2]
 80034dc:	4613      	mov	r3, r2
 80034de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034e0:	787b      	ldrb	r3, [r7, #1]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d003      	beq.n	80034ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80034e6:	887a      	ldrh	r2, [r7, #2]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80034ec:	e002      	b.n	80034f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80034ee:	887a      	ldrh	r2, [r7, #2]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80034f4:	bf00      	nop
 80034f6:	370c      	adds	r7, #12
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr

08003500 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d101      	bne.n	8003512 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e081      	b.n	8003616 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003518:	b2db      	uxtb	r3, r3
 800351a:	2b00      	cmp	r3, #0
 800351c:	d106      	bne.n	800352c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f7fd fe12 	bl	8001150 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2224      	movs	r2, #36	; 0x24
 8003530:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f022 0201 	bic.w	r2, r2, #1
 8003542:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	685a      	ldr	r2, [r3, #4]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003550:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	689a      	ldr	r2, [r3, #8]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003560:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	2b01      	cmp	r3, #1
 8003568:	d107      	bne.n	800357a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	689a      	ldr	r2, [r3, #8]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003576:	609a      	str	r2, [r3, #8]
 8003578:	e006      	b.n	8003588 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	689a      	ldr	r2, [r3, #8]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003586:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	2b02      	cmp	r3, #2
 800358e:	d104      	bne.n	800359a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003598:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	6812      	ldr	r2, [r2, #0]
 80035a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80035a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035ac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68da      	ldr	r2, [r3, #12]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035bc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	691a      	ldr	r2, [r3, #16]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	695b      	ldr	r3, [r3, #20]
 80035c6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	699b      	ldr	r3, [r3, #24]
 80035ce:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	430a      	orrs	r2, r1
 80035d6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	69d9      	ldr	r1, [r3, #28]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6a1a      	ldr	r2, [r3, #32]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	430a      	orrs	r2, r1
 80035e6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f042 0201 	orr.w	r2, r2, #1
 80035f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2220      	movs	r2, #32
 8003602:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	3708      	adds	r7, #8
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
	...

08003620 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b088      	sub	sp, #32
 8003624:	af02      	add	r7, sp, #8
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	607a      	str	r2, [r7, #4]
 800362a:	461a      	mov	r2, r3
 800362c:	460b      	mov	r3, r1
 800362e:	817b      	strh	r3, [r7, #10]
 8003630:	4613      	mov	r3, r2
 8003632:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800363a:	b2db      	uxtb	r3, r3
 800363c:	2b20      	cmp	r3, #32
 800363e:	f040 80da 	bne.w	80037f6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003648:	2b01      	cmp	r3, #1
 800364a:	d101      	bne.n	8003650 <HAL_I2C_Master_Transmit+0x30>
 800364c:	2302      	movs	r3, #2
 800364e:	e0d3      	b.n	80037f8 <HAL_I2C_Master_Transmit+0x1d8>
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003658:	f7ff f9d8 	bl	8002a0c <HAL_GetTick>
 800365c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	9300      	str	r3, [sp, #0]
 8003662:	2319      	movs	r3, #25
 8003664:	2201      	movs	r2, #1
 8003666:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800366a:	68f8      	ldr	r0, [r7, #12]
 800366c:	f000 fdc4 	bl	80041f8 <I2C_WaitOnFlagUntilTimeout>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d001      	beq.n	800367a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e0be      	b.n	80037f8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2221      	movs	r2, #33	; 0x21
 800367e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2210      	movs	r2, #16
 8003686:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2200      	movs	r2, #0
 800368e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	893a      	ldrh	r2, [r7, #8]
 800369a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2200      	movs	r2, #0
 80036a0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	2bff      	cmp	r3, #255	; 0xff
 80036aa:	d90e      	bls.n	80036ca <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	22ff      	movs	r2, #255	; 0xff
 80036b0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036b6:	b2da      	uxtb	r2, r3
 80036b8:	8979      	ldrh	r1, [r7, #10]
 80036ba:	4b51      	ldr	r3, [pc, #324]	; (8003800 <HAL_I2C_Master_Transmit+0x1e0>)
 80036bc:	9300      	str	r3, [sp, #0]
 80036be:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80036c2:	68f8      	ldr	r0, [r7, #12]
 80036c4:	f000 ffba 	bl	800463c <I2C_TransferConfig>
 80036c8:	e06c      	b.n	80037a4 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ce:	b29a      	uxth	r2, r3
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036d8:	b2da      	uxtb	r2, r3
 80036da:	8979      	ldrh	r1, [r7, #10]
 80036dc:	4b48      	ldr	r3, [pc, #288]	; (8003800 <HAL_I2C_Master_Transmit+0x1e0>)
 80036de:	9300      	str	r3, [sp, #0]
 80036e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036e4:	68f8      	ldr	r0, [r7, #12]
 80036e6:	f000 ffa9 	bl	800463c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80036ea:	e05b      	b.n	80037a4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036ec:	697a      	ldr	r2, [r7, #20]
 80036ee:	6a39      	ldr	r1, [r7, #32]
 80036f0:	68f8      	ldr	r0, [r7, #12]
 80036f2:	f000 fdc1 	bl	8004278 <I2C_WaitOnTXISFlagUntilTimeout>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d001      	beq.n	8003700 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e07b      	b.n	80037f8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003704:	781a      	ldrb	r2, [r3, #0]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003710:	1c5a      	adds	r2, r3, #1
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800371a:	b29b      	uxth	r3, r3
 800371c:	3b01      	subs	r3, #1
 800371e:	b29a      	uxth	r2, r3
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003728:	3b01      	subs	r3, #1
 800372a:	b29a      	uxth	r2, r3
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003734:	b29b      	uxth	r3, r3
 8003736:	2b00      	cmp	r3, #0
 8003738:	d034      	beq.n	80037a4 <HAL_I2C_Master_Transmit+0x184>
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800373e:	2b00      	cmp	r3, #0
 8003740:	d130      	bne.n	80037a4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	9300      	str	r3, [sp, #0]
 8003746:	6a3b      	ldr	r3, [r7, #32]
 8003748:	2200      	movs	r2, #0
 800374a:	2180      	movs	r1, #128	; 0x80
 800374c:	68f8      	ldr	r0, [r7, #12]
 800374e:	f000 fd53 	bl	80041f8 <I2C_WaitOnFlagUntilTimeout>
 8003752:	4603      	mov	r3, r0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d001      	beq.n	800375c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e04d      	b.n	80037f8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003760:	b29b      	uxth	r3, r3
 8003762:	2bff      	cmp	r3, #255	; 0xff
 8003764:	d90e      	bls.n	8003784 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	22ff      	movs	r2, #255	; 0xff
 800376a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003770:	b2da      	uxtb	r2, r3
 8003772:	8979      	ldrh	r1, [r7, #10]
 8003774:	2300      	movs	r3, #0
 8003776:	9300      	str	r3, [sp, #0]
 8003778:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800377c:	68f8      	ldr	r0, [r7, #12]
 800377e:	f000 ff5d 	bl	800463c <I2C_TransferConfig>
 8003782:	e00f      	b.n	80037a4 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003788:	b29a      	uxth	r2, r3
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003792:	b2da      	uxtb	r2, r3
 8003794:	8979      	ldrh	r1, [r7, #10]
 8003796:	2300      	movs	r3, #0
 8003798:	9300      	str	r3, [sp, #0]
 800379a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800379e:	68f8      	ldr	r0, [r7, #12]
 80037a0:	f000 ff4c 	bl	800463c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d19e      	bne.n	80036ec <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037ae:	697a      	ldr	r2, [r7, #20]
 80037b0:	6a39      	ldr	r1, [r7, #32]
 80037b2:	68f8      	ldr	r0, [r7, #12]
 80037b4:	f000 fda0 	bl	80042f8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d001      	beq.n	80037c2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e01a      	b.n	80037f8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	2220      	movs	r2, #32
 80037c8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	6859      	ldr	r1, [r3, #4]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	4b0b      	ldr	r3, [pc, #44]	; (8003804 <HAL_I2C_Master_Transmit+0x1e4>)
 80037d6:	400b      	ands	r3, r1
 80037d8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2220      	movs	r2, #32
 80037de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80037f2:	2300      	movs	r3, #0
 80037f4:	e000      	b.n	80037f8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80037f6:	2302      	movs	r3, #2
  }
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3718      	adds	r7, #24
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	80002000 	.word	0x80002000
 8003804:	fe00e800 	.word	0xfe00e800

08003808 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b088      	sub	sp, #32
 800380c:	af02      	add	r7, sp, #8
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	607a      	str	r2, [r7, #4]
 8003812:	461a      	mov	r2, r3
 8003814:	460b      	mov	r3, r1
 8003816:	817b      	strh	r3, [r7, #10]
 8003818:	4613      	mov	r3, r2
 800381a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003822:	b2db      	uxtb	r3, r3
 8003824:	2b20      	cmp	r3, #32
 8003826:	f040 80db 	bne.w	80039e0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003830:	2b01      	cmp	r3, #1
 8003832:	d101      	bne.n	8003838 <HAL_I2C_Master_Receive+0x30>
 8003834:	2302      	movs	r3, #2
 8003836:	e0d4      	b.n	80039e2 <HAL_I2C_Master_Receive+0x1da>
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003840:	f7ff f8e4 	bl	8002a0c <HAL_GetTick>
 8003844:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	9300      	str	r3, [sp, #0]
 800384a:	2319      	movs	r3, #25
 800384c:	2201      	movs	r2, #1
 800384e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003852:	68f8      	ldr	r0, [r7, #12]
 8003854:	f000 fcd0 	bl	80041f8 <I2C_WaitOnFlagUntilTimeout>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d001      	beq.n	8003862 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e0bf      	b.n	80039e2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2222      	movs	r2, #34	; 0x22
 8003866:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2210      	movs	r2, #16
 800386e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2200      	movs	r2, #0
 8003876:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	893a      	ldrh	r2, [r7, #8]
 8003882:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2200      	movs	r2, #0
 8003888:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800388e:	b29b      	uxth	r3, r3
 8003890:	2bff      	cmp	r3, #255	; 0xff
 8003892:	d90e      	bls.n	80038b2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	22ff      	movs	r2, #255	; 0xff
 8003898:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800389e:	b2da      	uxtb	r2, r3
 80038a0:	8979      	ldrh	r1, [r7, #10]
 80038a2:	4b52      	ldr	r3, [pc, #328]	; (80039ec <HAL_I2C_Master_Receive+0x1e4>)
 80038a4:	9300      	str	r3, [sp, #0]
 80038a6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80038aa:	68f8      	ldr	r0, [r7, #12]
 80038ac:	f000 fec6 	bl	800463c <I2C_TransferConfig>
 80038b0:	e06d      	b.n	800398e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038b6:	b29a      	uxth	r2, r3
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038c0:	b2da      	uxtb	r2, r3
 80038c2:	8979      	ldrh	r1, [r7, #10]
 80038c4:	4b49      	ldr	r3, [pc, #292]	; (80039ec <HAL_I2C_Master_Receive+0x1e4>)
 80038c6:	9300      	str	r3, [sp, #0]
 80038c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038cc:	68f8      	ldr	r0, [r7, #12]
 80038ce:	f000 feb5 	bl	800463c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80038d2:	e05c      	b.n	800398e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038d4:	697a      	ldr	r2, [r7, #20]
 80038d6:	6a39      	ldr	r1, [r7, #32]
 80038d8:	68f8      	ldr	r0, [r7, #12]
 80038da:	f000 fd49 	bl	8004370 <I2C_WaitOnRXNEFlagUntilTimeout>
 80038de:	4603      	mov	r3, r0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d001      	beq.n	80038e8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e07c      	b.n	80039e2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f2:	b2d2      	uxtb	r2, r2
 80038f4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fa:	1c5a      	adds	r2, r3, #1
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003904:	3b01      	subs	r3, #1
 8003906:	b29a      	uxth	r2, r3
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003910:	b29b      	uxth	r3, r3
 8003912:	3b01      	subs	r3, #1
 8003914:	b29a      	uxth	r2, r3
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800391e:	b29b      	uxth	r3, r3
 8003920:	2b00      	cmp	r3, #0
 8003922:	d034      	beq.n	800398e <HAL_I2C_Master_Receive+0x186>
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003928:	2b00      	cmp	r3, #0
 800392a:	d130      	bne.n	800398e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	9300      	str	r3, [sp, #0]
 8003930:	6a3b      	ldr	r3, [r7, #32]
 8003932:	2200      	movs	r2, #0
 8003934:	2180      	movs	r1, #128	; 0x80
 8003936:	68f8      	ldr	r0, [r7, #12]
 8003938:	f000 fc5e 	bl	80041f8 <I2C_WaitOnFlagUntilTimeout>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d001      	beq.n	8003946 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e04d      	b.n	80039e2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800394a:	b29b      	uxth	r3, r3
 800394c:	2bff      	cmp	r3, #255	; 0xff
 800394e:	d90e      	bls.n	800396e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	22ff      	movs	r2, #255	; 0xff
 8003954:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800395a:	b2da      	uxtb	r2, r3
 800395c:	8979      	ldrh	r1, [r7, #10]
 800395e:	2300      	movs	r3, #0
 8003960:	9300      	str	r3, [sp, #0]
 8003962:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003966:	68f8      	ldr	r0, [r7, #12]
 8003968:	f000 fe68 	bl	800463c <I2C_TransferConfig>
 800396c:	e00f      	b.n	800398e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003972:	b29a      	uxth	r2, r3
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800397c:	b2da      	uxtb	r2, r3
 800397e:	8979      	ldrh	r1, [r7, #10]
 8003980:	2300      	movs	r3, #0
 8003982:	9300      	str	r3, [sp, #0]
 8003984:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003988:	68f8      	ldr	r0, [r7, #12]
 800398a:	f000 fe57 	bl	800463c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003992:	b29b      	uxth	r3, r3
 8003994:	2b00      	cmp	r3, #0
 8003996:	d19d      	bne.n	80038d4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003998:	697a      	ldr	r2, [r7, #20]
 800399a:	6a39      	ldr	r1, [r7, #32]
 800399c:	68f8      	ldr	r0, [r7, #12]
 800399e:	f000 fcab 	bl	80042f8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d001      	beq.n	80039ac <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e01a      	b.n	80039e2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2220      	movs	r2, #32
 80039b2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	6859      	ldr	r1, [r3, #4]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	4b0c      	ldr	r3, [pc, #48]	; (80039f0 <HAL_I2C_Master_Receive+0x1e8>)
 80039c0:	400b      	ands	r3, r1
 80039c2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2220      	movs	r2, #32
 80039c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2200      	movs	r2, #0
 80039d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80039dc:	2300      	movs	r3, #0
 80039de:	e000      	b.n	80039e2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80039e0:	2302      	movs	r3, #2
  }
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3718      	adds	r7, #24
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	80002400 	.word	0x80002400
 80039f0:	fe00e800 	.word	0xfe00e800

080039f4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b088      	sub	sp, #32
 80039f8:	af02      	add	r7, sp, #8
 80039fa:	60f8      	str	r0, [r7, #12]
 80039fc:	4608      	mov	r0, r1
 80039fe:	4611      	mov	r1, r2
 8003a00:	461a      	mov	r2, r3
 8003a02:	4603      	mov	r3, r0
 8003a04:	817b      	strh	r3, [r7, #10]
 8003a06:	460b      	mov	r3, r1
 8003a08:	813b      	strh	r3, [r7, #8]
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	2b20      	cmp	r3, #32
 8003a18:	f040 80f9 	bne.w	8003c0e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a1c:	6a3b      	ldr	r3, [r7, #32]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d002      	beq.n	8003a28 <HAL_I2C_Mem_Write+0x34>
 8003a22:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d105      	bne.n	8003a34 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a2e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e0ed      	b.n	8003c10 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d101      	bne.n	8003a42 <HAL_I2C_Mem_Write+0x4e>
 8003a3e:	2302      	movs	r3, #2
 8003a40:	e0e6      	b.n	8003c10 <HAL_I2C_Mem_Write+0x21c>
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2201      	movs	r2, #1
 8003a46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003a4a:	f7fe ffdf 	bl	8002a0c <HAL_GetTick>
 8003a4e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	9300      	str	r3, [sp, #0]
 8003a54:	2319      	movs	r3, #25
 8003a56:	2201      	movs	r2, #1
 8003a58:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003a5c:	68f8      	ldr	r0, [r7, #12]
 8003a5e:	f000 fbcb 	bl	80041f8 <I2C_WaitOnFlagUntilTimeout>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d001      	beq.n	8003a6c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e0d1      	b.n	8003c10 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2221      	movs	r2, #33	; 0x21
 8003a70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2240      	movs	r2, #64	; 0x40
 8003a78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	6a3a      	ldr	r2, [r7, #32]
 8003a86:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003a8c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2200      	movs	r2, #0
 8003a92:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a94:	88f8      	ldrh	r0, [r7, #6]
 8003a96:	893a      	ldrh	r2, [r7, #8]
 8003a98:	8979      	ldrh	r1, [r7, #10]
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	9301      	str	r3, [sp, #4]
 8003a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa0:	9300      	str	r3, [sp, #0]
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	68f8      	ldr	r0, [r7, #12]
 8003aa6:	f000 fadb 	bl	8004060 <I2C_RequestMemoryWrite>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d005      	beq.n	8003abc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e0a9      	b.n	8003c10 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	2bff      	cmp	r3, #255	; 0xff
 8003ac4:	d90e      	bls.n	8003ae4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	22ff      	movs	r2, #255	; 0xff
 8003aca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ad0:	b2da      	uxtb	r2, r3
 8003ad2:	8979      	ldrh	r1, [r7, #10]
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	9300      	str	r3, [sp, #0]
 8003ad8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003adc:	68f8      	ldr	r0, [r7, #12]
 8003ade:	f000 fdad 	bl	800463c <I2C_TransferConfig>
 8003ae2:	e00f      	b.n	8003b04 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae8:	b29a      	uxth	r2, r3
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003af2:	b2da      	uxtb	r2, r3
 8003af4:	8979      	ldrh	r1, [r7, #10]
 8003af6:	2300      	movs	r3, #0
 8003af8:	9300      	str	r3, [sp, #0]
 8003afa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003afe:	68f8      	ldr	r0, [r7, #12]
 8003b00:	f000 fd9c 	bl	800463c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b04:	697a      	ldr	r2, [r7, #20]
 8003b06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b08:	68f8      	ldr	r0, [r7, #12]
 8003b0a:	f000 fbb5 	bl	8004278 <I2C_WaitOnTXISFlagUntilTimeout>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d001      	beq.n	8003b18 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e07b      	b.n	8003c10 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1c:	781a      	ldrb	r2, [r3, #0]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b28:	1c5a      	adds	r2, r3, #1
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	3b01      	subs	r3, #1
 8003b36:	b29a      	uxth	r2, r3
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b40:	3b01      	subs	r3, #1
 8003b42:	b29a      	uxth	r2, r3
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d034      	beq.n	8003bbc <HAL_I2C_Mem_Write+0x1c8>
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d130      	bne.n	8003bbc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	9300      	str	r3, [sp, #0]
 8003b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b60:	2200      	movs	r2, #0
 8003b62:	2180      	movs	r1, #128	; 0x80
 8003b64:	68f8      	ldr	r0, [r7, #12]
 8003b66:	f000 fb47 	bl	80041f8 <I2C_WaitOnFlagUntilTimeout>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d001      	beq.n	8003b74 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e04d      	b.n	8003c10 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	2bff      	cmp	r3, #255	; 0xff
 8003b7c:	d90e      	bls.n	8003b9c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	22ff      	movs	r2, #255	; 0xff
 8003b82:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b88:	b2da      	uxtb	r2, r3
 8003b8a:	8979      	ldrh	r1, [r7, #10]
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	9300      	str	r3, [sp, #0]
 8003b90:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b94:	68f8      	ldr	r0, [r7, #12]
 8003b96:	f000 fd51 	bl	800463c <I2C_TransferConfig>
 8003b9a:	e00f      	b.n	8003bbc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ba0:	b29a      	uxth	r2, r3
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003baa:	b2da      	uxtb	r2, r3
 8003bac:	8979      	ldrh	r1, [r7, #10]
 8003bae:	2300      	movs	r3, #0
 8003bb0:	9300      	str	r3, [sp, #0]
 8003bb2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003bb6:	68f8      	ldr	r0, [r7, #12]
 8003bb8:	f000 fd40 	bl	800463c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d19e      	bne.n	8003b04 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bc6:	697a      	ldr	r2, [r7, #20]
 8003bc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003bca:	68f8      	ldr	r0, [r7, #12]
 8003bcc:	f000 fb94 	bl	80042f8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d001      	beq.n	8003bda <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e01a      	b.n	8003c10 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	2220      	movs	r2, #32
 8003be0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	6859      	ldr	r1, [r3, #4]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	4b0a      	ldr	r3, [pc, #40]	; (8003c18 <HAL_I2C_Mem_Write+0x224>)
 8003bee:	400b      	ands	r3, r1
 8003bf0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2220      	movs	r2, #32
 8003bf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2200      	movs	r2, #0
 8003c06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	e000      	b.n	8003c10 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003c0e:	2302      	movs	r3, #2
  }
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3718      	adds	r7, #24
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	fe00e800 	.word	0xfe00e800

08003c1c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b088      	sub	sp, #32
 8003c20:	af02      	add	r7, sp, #8
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	4608      	mov	r0, r1
 8003c26:	4611      	mov	r1, r2
 8003c28:	461a      	mov	r2, r3
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	817b      	strh	r3, [r7, #10]
 8003c2e:	460b      	mov	r3, r1
 8003c30:	813b      	strh	r3, [r7, #8]
 8003c32:	4613      	mov	r3, r2
 8003c34:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	2b20      	cmp	r3, #32
 8003c40:	f040 80fd 	bne.w	8003e3e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c44:	6a3b      	ldr	r3, [r7, #32]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d002      	beq.n	8003c50 <HAL_I2C_Mem_Read+0x34>
 8003c4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d105      	bne.n	8003c5c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c56:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e0f1      	b.n	8003e40 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d101      	bne.n	8003c6a <HAL_I2C_Mem_Read+0x4e>
 8003c66:	2302      	movs	r3, #2
 8003c68:	e0ea      	b.n	8003e40 <HAL_I2C_Mem_Read+0x224>
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003c72:	f7fe fecb 	bl	8002a0c <HAL_GetTick>
 8003c76:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	9300      	str	r3, [sp, #0]
 8003c7c:	2319      	movs	r3, #25
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003c84:	68f8      	ldr	r0, [r7, #12]
 8003c86:	f000 fab7 	bl	80041f8 <I2C_WaitOnFlagUntilTimeout>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d001      	beq.n	8003c94 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e0d5      	b.n	8003e40 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2222      	movs	r2, #34	; 0x22
 8003c98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2240      	movs	r2, #64	; 0x40
 8003ca0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	6a3a      	ldr	r2, [r7, #32]
 8003cae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003cb4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003cbc:	88f8      	ldrh	r0, [r7, #6]
 8003cbe:	893a      	ldrh	r2, [r7, #8]
 8003cc0:	8979      	ldrh	r1, [r7, #10]
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	9301      	str	r3, [sp, #4]
 8003cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cc8:	9300      	str	r3, [sp, #0]
 8003cca:	4603      	mov	r3, r0
 8003ccc:	68f8      	ldr	r0, [r7, #12]
 8003cce:	f000 fa1b 	bl	8004108 <I2C_RequestMemoryRead>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d005      	beq.n	8003ce4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e0ad      	b.n	8003e40 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	2bff      	cmp	r3, #255	; 0xff
 8003cec:	d90e      	bls.n	8003d0c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	22ff      	movs	r2, #255	; 0xff
 8003cf2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cf8:	b2da      	uxtb	r2, r3
 8003cfa:	8979      	ldrh	r1, [r7, #10]
 8003cfc:	4b52      	ldr	r3, [pc, #328]	; (8003e48 <HAL_I2C_Mem_Read+0x22c>)
 8003cfe:	9300      	str	r3, [sp, #0]
 8003d00:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d04:	68f8      	ldr	r0, [r7, #12]
 8003d06:	f000 fc99 	bl	800463c <I2C_TransferConfig>
 8003d0a:	e00f      	b.n	8003d2c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d10:	b29a      	uxth	r2, r3
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d1a:	b2da      	uxtb	r2, r3
 8003d1c:	8979      	ldrh	r1, [r7, #10]
 8003d1e:	4b4a      	ldr	r3, [pc, #296]	; (8003e48 <HAL_I2C_Mem_Read+0x22c>)
 8003d20:	9300      	str	r3, [sp, #0]
 8003d22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d26:	68f8      	ldr	r0, [r7, #12]
 8003d28:	f000 fc88 	bl	800463c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	9300      	str	r3, [sp, #0]
 8003d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d32:	2200      	movs	r2, #0
 8003d34:	2104      	movs	r1, #4
 8003d36:	68f8      	ldr	r0, [r7, #12]
 8003d38:	f000 fa5e 	bl	80041f8 <I2C_WaitOnFlagUntilTimeout>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d001      	beq.n	8003d46 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e07c      	b.n	8003e40 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d50:	b2d2      	uxtb	r2, r2
 8003d52:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d58:	1c5a      	adds	r2, r3, #1
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d62:	3b01      	subs	r3, #1
 8003d64:	b29a      	uxth	r2, r3
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	3b01      	subs	r3, #1
 8003d72:	b29a      	uxth	r2, r3
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d034      	beq.n	8003dec <HAL_I2C_Mem_Read+0x1d0>
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d130      	bne.n	8003dec <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	9300      	str	r3, [sp, #0]
 8003d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d90:	2200      	movs	r2, #0
 8003d92:	2180      	movs	r1, #128	; 0x80
 8003d94:	68f8      	ldr	r0, [r7, #12]
 8003d96:	f000 fa2f 	bl	80041f8 <I2C_WaitOnFlagUntilTimeout>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d001      	beq.n	8003da4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e04d      	b.n	8003e40 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	2bff      	cmp	r3, #255	; 0xff
 8003dac:	d90e      	bls.n	8003dcc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	22ff      	movs	r2, #255	; 0xff
 8003db2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003db8:	b2da      	uxtb	r2, r3
 8003dba:	8979      	ldrh	r1, [r7, #10]
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	9300      	str	r3, [sp, #0]
 8003dc0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003dc4:	68f8      	ldr	r0, [r7, #12]
 8003dc6:	f000 fc39 	bl	800463c <I2C_TransferConfig>
 8003dca:	e00f      	b.n	8003dec <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dd0:	b29a      	uxth	r2, r3
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dda:	b2da      	uxtb	r2, r3
 8003ddc:	8979      	ldrh	r1, [r7, #10]
 8003dde:	2300      	movs	r3, #0
 8003de0:	9300      	str	r3, [sp, #0]
 8003de2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003de6:	68f8      	ldr	r0, [r7, #12]
 8003de8:	f000 fc28 	bl	800463c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d19a      	bne.n	8003d2c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003df6:	697a      	ldr	r2, [r7, #20]
 8003df8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003dfa:	68f8      	ldr	r0, [r7, #12]
 8003dfc:	f000 fa7c 	bl	80042f8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d001      	beq.n	8003e0a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e01a      	b.n	8003e40 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	2220      	movs	r2, #32
 8003e10:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	6859      	ldr	r1, [r3, #4]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	4b0b      	ldr	r3, [pc, #44]	; (8003e4c <HAL_I2C_Mem_Read+0x230>)
 8003e1e:	400b      	ands	r3, r1
 8003e20:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2220      	movs	r2, #32
 8003e26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2200      	movs	r2, #0
 8003e36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	e000      	b.n	8003e40 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003e3e:	2302      	movs	r3, #2
  }
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3718      	adds	r7, #24
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}
 8003e48:	80002400 	.word	0x80002400
 8003e4c:	fe00e800 	.word	0xfe00e800

08003e50 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b08a      	sub	sp, #40	; 0x28
 8003e54:	af02      	add	r7, sp, #8
 8003e56:	60f8      	str	r0, [r7, #12]
 8003e58:	607a      	str	r2, [r7, #4]
 8003e5a:	603b      	str	r3, [r7, #0]
 8003e5c:	460b      	mov	r3, r1
 8003e5e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8003e60:	2300      	movs	r3, #0
 8003e62:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	2b20      	cmp	r3, #32
 8003e6e:	f040 80f1 	bne.w	8004054 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	699b      	ldr	r3, [r3, #24]
 8003e78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e80:	d101      	bne.n	8003e86 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8003e82:	2302      	movs	r3, #2
 8003e84:	e0e7      	b.n	8004056 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d101      	bne.n	8003e94 <HAL_I2C_IsDeviceReady+0x44>
 8003e90:	2302      	movs	r3, #2
 8003e92:	e0e0      	b.n	8004056 <HAL_I2C_IsDeviceReady+0x206>
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2224      	movs	r2, #36	; 0x24
 8003ea0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	68db      	ldr	r3, [r3, #12]
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d107      	bne.n	8003ec2 <HAL_I2C_IsDeviceReady+0x72>
 8003eb2:	897b      	ldrh	r3, [r7, #10]
 8003eb4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003eb8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003ebc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003ec0:	e004      	b.n	8003ecc <HAL_I2C_IsDeviceReady+0x7c>
 8003ec2:	897b      	ldrh	r3, [r7, #10]
 8003ec4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ec8:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8003ecc:	68fa      	ldr	r2, [r7, #12]
 8003ece:	6812      	ldr	r2, [r2, #0]
 8003ed0:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8003ed2:	f7fe fd9b 	bl	8002a0c <HAL_GetTick>
 8003ed6:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	699b      	ldr	r3, [r3, #24]
 8003ede:	f003 0320 	and.w	r3, r3, #32
 8003ee2:	2b20      	cmp	r3, #32
 8003ee4:	bf0c      	ite	eq
 8003ee6:	2301      	moveq	r3, #1
 8003ee8:	2300      	movne	r3, #0
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	699b      	ldr	r3, [r3, #24]
 8003ef4:	f003 0310 	and.w	r3, r3, #16
 8003ef8:	2b10      	cmp	r3, #16
 8003efa:	bf0c      	ite	eq
 8003efc:	2301      	moveq	r3, #1
 8003efe:	2300      	movne	r3, #0
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003f04:	e034      	b.n	8003f70 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f0c:	d01a      	beq.n	8003f44 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003f0e:	f7fe fd7d 	bl	8002a0c <HAL_GetTick>
 8003f12:	4602      	mov	r2, r0
 8003f14:	69bb      	ldr	r3, [r7, #24]
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	683a      	ldr	r2, [r7, #0]
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d302      	bcc.n	8003f24 <HAL_I2C_IsDeviceReady+0xd4>
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d10f      	bne.n	8003f44 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2220      	movs	r2, #32
 8003f28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f30:	f043 0220 	orr.w	r2, r3, #32
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e088      	b.n	8004056 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	699b      	ldr	r3, [r3, #24]
 8003f4a:	f003 0320 	and.w	r3, r3, #32
 8003f4e:	2b20      	cmp	r3, #32
 8003f50:	bf0c      	ite	eq
 8003f52:	2301      	moveq	r3, #1
 8003f54:	2300      	movne	r3, #0
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	699b      	ldr	r3, [r3, #24]
 8003f60:	f003 0310 	and.w	r3, r3, #16
 8003f64:	2b10      	cmp	r3, #16
 8003f66:	bf0c      	ite	eq
 8003f68:	2301      	moveq	r3, #1
 8003f6a:	2300      	movne	r3, #0
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003f70:	7ffb      	ldrb	r3, [r7, #31]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d102      	bne.n	8003f7c <HAL_I2C_IsDeviceReady+0x12c>
 8003f76:	7fbb      	ldrb	r3, [r7, #30]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d0c4      	beq.n	8003f06 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	699b      	ldr	r3, [r3, #24]
 8003f82:	f003 0310 	and.w	r3, r3, #16
 8003f86:	2b10      	cmp	r3, #16
 8003f88:	d01a      	beq.n	8003fc0 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	9300      	str	r3, [sp, #0]
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	2200      	movs	r2, #0
 8003f92:	2120      	movs	r1, #32
 8003f94:	68f8      	ldr	r0, [r7, #12]
 8003f96:	f000 f92f 	bl	80041f8 <I2C_WaitOnFlagUntilTimeout>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d001      	beq.n	8003fa4 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e058      	b.n	8004056 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2220      	movs	r2, #32
 8003faa:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2220      	movs	r2, #32
 8003fb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	e04a      	b.n	8004056 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	9300      	str	r3, [sp, #0]
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	2120      	movs	r1, #32
 8003fca:	68f8      	ldr	r0, [r7, #12]
 8003fcc:	f000 f914 	bl	80041f8 <I2C_WaitOnFlagUntilTimeout>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d001      	beq.n	8003fda <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e03d      	b.n	8004056 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	2210      	movs	r2, #16
 8003fe0:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2220      	movs	r2, #32
 8003fe8:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	687a      	ldr	r2, [r7, #4]
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d118      	bne.n	8004024 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	685a      	ldr	r2, [r3, #4]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004000:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	9300      	str	r3, [sp, #0]
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	2200      	movs	r2, #0
 800400a:	2120      	movs	r1, #32
 800400c:	68f8      	ldr	r0, [r7, #12]
 800400e:	f000 f8f3 	bl	80041f8 <I2C_WaitOnFlagUntilTimeout>
 8004012:	4603      	mov	r3, r0
 8004014:	2b00      	cmp	r3, #0
 8004016:	d001      	beq.n	800401c <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e01c      	b.n	8004056 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2220      	movs	r2, #32
 8004022:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	3301      	adds	r3, #1
 8004028:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	429a      	cmp	r2, r3
 8004030:	f63f af3b 	bhi.w	8003eaa <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2220      	movs	r2, #32
 8004038:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004040:	f043 0220 	orr.w	r2, r3, #32
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2200      	movs	r2, #0
 800404c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e000      	b.n	8004056 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8004054:	2302      	movs	r3, #2
  }
}
 8004056:	4618      	mov	r0, r3
 8004058:	3720      	adds	r7, #32
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
	...

08004060 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b086      	sub	sp, #24
 8004064:	af02      	add	r7, sp, #8
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	4608      	mov	r0, r1
 800406a:	4611      	mov	r1, r2
 800406c:	461a      	mov	r2, r3
 800406e:	4603      	mov	r3, r0
 8004070:	817b      	strh	r3, [r7, #10]
 8004072:	460b      	mov	r3, r1
 8004074:	813b      	strh	r3, [r7, #8]
 8004076:	4613      	mov	r3, r2
 8004078:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800407a:	88fb      	ldrh	r3, [r7, #6]
 800407c:	b2da      	uxtb	r2, r3
 800407e:	8979      	ldrh	r1, [r7, #10]
 8004080:	4b20      	ldr	r3, [pc, #128]	; (8004104 <I2C_RequestMemoryWrite+0xa4>)
 8004082:	9300      	str	r3, [sp, #0]
 8004084:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004088:	68f8      	ldr	r0, [r7, #12]
 800408a:	f000 fad7 	bl	800463c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800408e:	69fa      	ldr	r2, [r7, #28]
 8004090:	69b9      	ldr	r1, [r7, #24]
 8004092:	68f8      	ldr	r0, [r7, #12]
 8004094:	f000 f8f0 	bl	8004278 <I2C_WaitOnTXISFlagUntilTimeout>
 8004098:	4603      	mov	r3, r0
 800409a:	2b00      	cmp	r3, #0
 800409c:	d001      	beq.n	80040a2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e02c      	b.n	80040fc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80040a2:	88fb      	ldrh	r3, [r7, #6]
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d105      	bne.n	80040b4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80040a8:	893b      	ldrh	r3, [r7, #8]
 80040aa:	b2da      	uxtb	r2, r3
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	629a      	str	r2, [r3, #40]	; 0x28
 80040b2:	e015      	b.n	80040e0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80040b4:	893b      	ldrh	r3, [r7, #8]
 80040b6:	0a1b      	lsrs	r3, r3, #8
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	b2da      	uxtb	r2, r3
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040c2:	69fa      	ldr	r2, [r7, #28]
 80040c4:	69b9      	ldr	r1, [r7, #24]
 80040c6:	68f8      	ldr	r0, [r7, #12]
 80040c8:	f000 f8d6 	bl	8004278 <I2C_WaitOnTXISFlagUntilTimeout>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d001      	beq.n	80040d6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e012      	b.n	80040fc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80040d6:	893b      	ldrh	r3, [r7, #8]
 80040d8:	b2da      	uxtb	r2, r3
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	9300      	str	r3, [sp, #0]
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	2200      	movs	r2, #0
 80040e8:	2180      	movs	r1, #128	; 0x80
 80040ea:	68f8      	ldr	r0, [r7, #12]
 80040ec:	f000 f884 	bl	80041f8 <I2C_WaitOnFlagUntilTimeout>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d001      	beq.n	80040fa <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e000      	b.n	80040fc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80040fa:	2300      	movs	r3, #0
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3710      	adds	r7, #16
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}
 8004104:	80002000 	.word	0x80002000

08004108 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b086      	sub	sp, #24
 800410c:	af02      	add	r7, sp, #8
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	4608      	mov	r0, r1
 8004112:	4611      	mov	r1, r2
 8004114:	461a      	mov	r2, r3
 8004116:	4603      	mov	r3, r0
 8004118:	817b      	strh	r3, [r7, #10]
 800411a:	460b      	mov	r3, r1
 800411c:	813b      	strh	r3, [r7, #8]
 800411e:	4613      	mov	r3, r2
 8004120:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004122:	88fb      	ldrh	r3, [r7, #6]
 8004124:	b2da      	uxtb	r2, r3
 8004126:	8979      	ldrh	r1, [r7, #10]
 8004128:	4b20      	ldr	r3, [pc, #128]	; (80041ac <I2C_RequestMemoryRead+0xa4>)
 800412a:	9300      	str	r3, [sp, #0]
 800412c:	2300      	movs	r3, #0
 800412e:	68f8      	ldr	r0, [r7, #12]
 8004130:	f000 fa84 	bl	800463c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004134:	69fa      	ldr	r2, [r7, #28]
 8004136:	69b9      	ldr	r1, [r7, #24]
 8004138:	68f8      	ldr	r0, [r7, #12]
 800413a:	f000 f89d 	bl	8004278 <I2C_WaitOnTXISFlagUntilTimeout>
 800413e:	4603      	mov	r3, r0
 8004140:	2b00      	cmp	r3, #0
 8004142:	d001      	beq.n	8004148 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e02c      	b.n	80041a2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004148:	88fb      	ldrh	r3, [r7, #6]
 800414a:	2b01      	cmp	r3, #1
 800414c:	d105      	bne.n	800415a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800414e:	893b      	ldrh	r3, [r7, #8]
 8004150:	b2da      	uxtb	r2, r3
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	629a      	str	r2, [r3, #40]	; 0x28
 8004158:	e015      	b.n	8004186 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800415a:	893b      	ldrh	r3, [r7, #8]
 800415c:	0a1b      	lsrs	r3, r3, #8
 800415e:	b29b      	uxth	r3, r3
 8004160:	b2da      	uxtb	r2, r3
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004168:	69fa      	ldr	r2, [r7, #28]
 800416a:	69b9      	ldr	r1, [r7, #24]
 800416c:	68f8      	ldr	r0, [r7, #12]
 800416e:	f000 f883 	bl	8004278 <I2C_WaitOnTXISFlagUntilTimeout>
 8004172:	4603      	mov	r3, r0
 8004174:	2b00      	cmp	r3, #0
 8004176:	d001      	beq.n	800417c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	e012      	b.n	80041a2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800417c:	893b      	ldrh	r3, [r7, #8]
 800417e:	b2da      	uxtb	r2, r3
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	9300      	str	r3, [sp, #0]
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	2200      	movs	r2, #0
 800418e:	2140      	movs	r1, #64	; 0x40
 8004190:	68f8      	ldr	r0, [r7, #12]
 8004192:	f000 f831 	bl	80041f8 <I2C_WaitOnFlagUntilTimeout>
 8004196:	4603      	mov	r3, r0
 8004198:	2b00      	cmp	r3, #0
 800419a:	d001      	beq.n	80041a0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e000      	b.n	80041a2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80041a0:	2300      	movs	r3, #0
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3710      	adds	r7, #16
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	80002000 	.word	0x80002000

080041b0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	699b      	ldr	r3, [r3, #24]
 80041be:	f003 0302 	and.w	r3, r3, #2
 80041c2:	2b02      	cmp	r3, #2
 80041c4:	d103      	bne.n	80041ce <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	2200      	movs	r2, #0
 80041cc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	699b      	ldr	r3, [r3, #24]
 80041d4:	f003 0301 	and.w	r3, r3, #1
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d007      	beq.n	80041ec <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	699a      	ldr	r2, [r3, #24]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f042 0201 	orr.w	r2, r2, #1
 80041ea:	619a      	str	r2, [r3, #24]
  }
}
 80041ec:	bf00      	nop
 80041ee:	370c      	adds	r7, #12
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr

080041f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	60b9      	str	r1, [r7, #8]
 8004202:	603b      	str	r3, [r7, #0]
 8004204:	4613      	mov	r3, r2
 8004206:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004208:	e022      	b.n	8004250 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004210:	d01e      	beq.n	8004250 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004212:	f7fe fbfb 	bl	8002a0c <HAL_GetTick>
 8004216:	4602      	mov	r2, r0
 8004218:	69bb      	ldr	r3, [r7, #24]
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	683a      	ldr	r2, [r7, #0]
 800421e:	429a      	cmp	r2, r3
 8004220:	d302      	bcc.n	8004228 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d113      	bne.n	8004250 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800422c:	f043 0220 	orr.w	r2, r3, #32
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2220      	movs	r2, #32
 8004238:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2200      	movs	r2, #0
 8004240:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2200      	movs	r2, #0
 8004248:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e00f      	b.n	8004270 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	699a      	ldr	r2, [r3, #24]
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	4013      	ands	r3, r2
 800425a:	68ba      	ldr	r2, [r7, #8]
 800425c:	429a      	cmp	r2, r3
 800425e:	bf0c      	ite	eq
 8004260:	2301      	moveq	r3, #1
 8004262:	2300      	movne	r3, #0
 8004264:	b2db      	uxtb	r3, r3
 8004266:	461a      	mov	r2, r3
 8004268:	79fb      	ldrb	r3, [r7, #7]
 800426a:	429a      	cmp	r2, r3
 800426c:	d0cd      	beq.n	800420a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800426e:	2300      	movs	r3, #0
}
 8004270:	4618      	mov	r0, r3
 8004272:	3710      	adds	r7, #16
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}

08004278 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	60b9      	str	r1, [r7, #8]
 8004282:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004284:	e02c      	b.n	80042e0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	68b9      	ldr	r1, [r7, #8]
 800428a:	68f8      	ldr	r0, [r7, #12]
 800428c:	f000 f8ea 	bl	8004464 <I2C_IsErrorOccurred>
 8004290:	4603      	mov	r3, r0
 8004292:	2b00      	cmp	r3, #0
 8004294:	d001      	beq.n	800429a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e02a      	b.n	80042f0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042a0:	d01e      	beq.n	80042e0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042a2:	f7fe fbb3 	bl	8002a0c <HAL_GetTick>
 80042a6:	4602      	mov	r2, r0
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	68ba      	ldr	r2, [r7, #8]
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d302      	bcc.n	80042b8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d113      	bne.n	80042e0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042bc:	f043 0220 	orr.w	r2, r3, #32
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2220      	movs	r2, #32
 80042c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2200      	movs	r2, #0
 80042d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2200      	movs	r2, #0
 80042d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e007      	b.n	80042f0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	699b      	ldr	r3, [r3, #24]
 80042e6:	f003 0302 	and.w	r3, r3, #2
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	d1cb      	bne.n	8004286 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80042ee:	2300      	movs	r3, #0
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3710      	adds	r7, #16
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	60b9      	str	r1, [r7, #8]
 8004302:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004304:	e028      	b.n	8004358 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	68b9      	ldr	r1, [r7, #8]
 800430a:	68f8      	ldr	r0, [r7, #12]
 800430c:	f000 f8aa 	bl	8004464 <I2C_IsErrorOccurred>
 8004310:	4603      	mov	r3, r0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d001      	beq.n	800431a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e026      	b.n	8004368 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800431a:	f7fe fb77 	bl	8002a0c <HAL_GetTick>
 800431e:	4602      	mov	r2, r0
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	1ad3      	subs	r3, r2, r3
 8004324:	68ba      	ldr	r2, [r7, #8]
 8004326:	429a      	cmp	r2, r3
 8004328:	d302      	bcc.n	8004330 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d113      	bne.n	8004358 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004334:	f043 0220 	orr.w	r2, r3, #32
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2220      	movs	r2, #32
 8004340:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2200      	movs	r2, #0
 8004348:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2200      	movs	r2, #0
 8004350:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e007      	b.n	8004368 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	699b      	ldr	r3, [r3, #24]
 800435e:	f003 0320 	and.w	r3, r3, #32
 8004362:	2b20      	cmp	r3, #32
 8004364:	d1cf      	bne.n	8004306 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004366:	2300      	movs	r3, #0
}
 8004368:	4618      	mov	r0, r3
 800436a:	3710      	adds	r7, #16
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}

08004370 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b084      	sub	sp, #16
 8004374:	af00      	add	r7, sp, #0
 8004376:	60f8      	str	r0, [r7, #12]
 8004378:	60b9      	str	r1, [r7, #8]
 800437a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800437c:	e064      	b.n	8004448 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	68b9      	ldr	r1, [r7, #8]
 8004382:	68f8      	ldr	r0, [r7, #12]
 8004384:	f000 f86e 	bl	8004464 <I2C_IsErrorOccurred>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	d001      	beq.n	8004392 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e062      	b.n	8004458 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	699b      	ldr	r3, [r3, #24]
 8004398:	f003 0320 	and.w	r3, r3, #32
 800439c:	2b20      	cmp	r3, #32
 800439e:	d138      	bne.n	8004412 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	699b      	ldr	r3, [r3, #24]
 80043a6:	f003 0304 	and.w	r3, r3, #4
 80043aa:	2b04      	cmp	r3, #4
 80043ac:	d105      	bne.n	80043ba <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d001      	beq.n	80043ba <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80043b6:	2300      	movs	r3, #0
 80043b8:	e04e      	b.n	8004458 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	699b      	ldr	r3, [r3, #24]
 80043c0:	f003 0310 	and.w	r3, r3, #16
 80043c4:	2b10      	cmp	r3, #16
 80043c6:	d107      	bne.n	80043d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	2210      	movs	r2, #16
 80043ce:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2204      	movs	r2, #4
 80043d4:	645a      	str	r2, [r3, #68]	; 0x44
 80043d6:	e002      	b.n	80043de <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2200      	movs	r2, #0
 80043dc:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	2220      	movs	r2, #32
 80043e4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	6859      	ldr	r1, [r3, #4]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	4b1b      	ldr	r3, [pc, #108]	; (8004460 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80043f2:	400b      	ands	r3, r1
 80043f4:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2220      	movs	r2, #32
 80043fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2200      	movs	r2, #0
 800440a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e022      	b.n	8004458 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004412:	f7fe fafb 	bl	8002a0c <HAL_GetTick>
 8004416:	4602      	mov	r2, r0
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	68ba      	ldr	r2, [r7, #8]
 800441e:	429a      	cmp	r2, r3
 8004420:	d302      	bcc.n	8004428 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d10f      	bne.n	8004448 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800442c:	f043 0220 	orr.w	r2, r3, #32
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2220      	movs	r2, #32
 8004438:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2200      	movs	r2, #0
 8004440:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	e007      	b.n	8004458 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	699b      	ldr	r3, [r3, #24]
 800444e:	f003 0304 	and.w	r3, r3, #4
 8004452:	2b04      	cmp	r3, #4
 8004454:	d193      	bne.n	800437e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004456:	2300      	movs	r3, #0
}
 8004458:	4618      	mov	r0, r3
 800445a:	3710      	adds	r7, #16
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}
 8004460:	fe00e800 	.word	0xfe00e800

08004464 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b08a      	sub	sp, #40	; 0x28
 8004468:	af00      	add	r7, sp, #0
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004470:	2300      	movs	r3, #0
 8004472:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	699b      	ldr	r3, [r3, #24]
 800447c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800447e:	2300      	movs	r3, #0
 8004480:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	f003 0310 	and.w	r3, r3, #16
 800448c:	2b00      	cmp	r3, #0
 800448e:	d075      	beq.n	800457c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2210      	movs	r2, #16
 8004496:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004498:	e056      	b.n	8004548 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044a0:	d052      	beq.n	8004548 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80044a2:	f7fe fab3 	bl	8002a0c <HAL_GetTick>
 80044a6:	4602      	mov	r2, r0
 80044a8:	69fb      	ldr	r3, [r7, #28]
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	68ba      	ldr	r2, [r7, #8]
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d302      	bcc.n	80044b8 <I2C_IsErrorOccurred+0x54>
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d147      	bne.n	8004548 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044c2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80044ca:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	699b      	ldr	r3, [r3, #24]
 80044d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044da:	d12e      	bne.n	800453a <I2C_IsErrorOccurred+0xd6>
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044e2:	d02a      	beq.n	800453a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80044e4:	7cfb      	ldrb	r3, [r7, #19]
 80044e6:	2b20      	cmp	r3, #32
 80044e8:	d027      	beq.n	800453a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	685a      	ldr	r2, [r3, #4]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80044f8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80044fa:	f7fe fa87 	bl	8002a0c <HAL_GetTick>
 80044fe:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004500:	e01b      	b.n	800453a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004502:	f7fe fa83 	bl	8002a0c <HAL_GetTick>
 8004506:	4602      	mov	r2, r0
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	2b19      	cmp	r3, #25
 800450e:	d914      	bls.n	800453a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004514:	f043 0220 	orr.w	r2, r3, #32
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2220      	movs	r2, #32
 8004520:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2200      	movs	r2, #0
 8004528:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2200      	movs	r2, #0
 8004530:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	699b      	ldr	r3, [r3, #24]
 8004540:	f003 0320 	and.w	r3, r3, #32
 8004544:	2b20      	cmp	r3, #32
 8004546:	d1dc      	bne.n	8004502 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	699b      	ldr	r3, [r3, #24]
 800454e:	f003 0320 	and.w	r3, r3, #32
 8004552:	2b20      	cmp	r3, #32
 8004554:	d003      	beq.n	800455e <I2C_IsErrorOccurred+0xfa>
 8004556:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800455a:	2b00      	cmp	r3, #0
 800455c:	d09d      	beq.n	800449a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800455e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004562:	2b00      	cmp	r3, #0
 8004564:	d103      	bne.n	800456e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	2220      	movs	r2, #32
 800456c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800456e:	6a3b      	ldr	r3, [r7, #32]
 8004570:	f043 0304 	orr.w	r3, r3, #4
 8004574:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	699b      	ldr	r3, [r3, #24]
 8004582:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004584:	69bb      	ldr	r3, [r7, #24]
 8004586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800458a:	2b00      	cmp	r3, #0
 800458c:	d00b      	beq.n	80045a6 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800458e:	6a3b      	ldr	r3, [r7, #32]
 8004590:	f043 0301 	orr.w	r3, r3, #1
 8004594:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800459e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80045a6:	69bb      	ldr	r3, [r7, #24]
 80045a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d00b      	beq.n	80045c8 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80045b0:	6a3b      	ldr	r3, [r7, #32]
 80045b2:	f043 0308 	orr.w	r3, r3, #8
 80045b6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80045c0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80045c8:	69bb      	ldr	r3, [r7, #24]
 80045ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d00b      	beq.n	80045ea <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80045d2:	6a3b      	ldr	r3, [r7, #32]
 80045d4:	f043 0302 	orr.w	r3, r3, #2
 80045d8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045e2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80045ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d01c      	beq.n	800462c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80045f2:	68f8      	ldr	r0, [r7, #12]
 80045f4:	f7ff fddc 	bl	80041b0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	6859      	ldr	r1, [r3, #4]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	4b0d      	ldr	r3, [pc, #52]	; (8004638 <I2C_IsErrorOccurred+0x1d4>)
 8004604:	400b      	ands	r3, r1
 8004606:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800460c:	6a3b      	ldr	r3, [r7, #32]
 800460e:	431a      	orrs	r2, r3
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2220      	movs	r2, #32
 8004618:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2200      	movs	r2, #0
 8004620:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2200      	movs	r2, #0
 8004628:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800462c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004630:	4618      	mov	r0, r3
 8004632:	3728      	adds	r7, #40	; 0x28
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}
 8004638:	fe00e800 	.word	0xfe00e800

0800463c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800463c:	b480      	push	{r7}
 800463e:	b087      	sub	sp, #28
 8004640:	af00      	add	r7, sp, #0
 8004642:	60f8      	str	r0, [r7, #12]
 8004644:	607b      	str	r3, [r7, #4]
 8004646:	460b      	mov	r3, r1
 8004648:	817b      	strh	r3, [r7, #10]
 800464a:	4613      	mov	r3, r2
 800464c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800464e:	897b      	ldrh	r3, [r7, #10]
 8004650:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004654:	7a7b      	ldrb	r3, [r7, #9]
 8004656:	041b      	lsls	r3, r3, #16
 8004658:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800465c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004662:	6a3b      	ldr	r3, [r7, #32]
 8004664:	4313      	orrs	r3, r2
 8004666:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800466a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	685a      	ldr	r2, [r3, #4]
 8004672:	6a3b      	ldr	r3, [r7, #32]
 8004674:	0d5b      	lsrs	r3, r3, #21
 8004676:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800467a:	4b08      	ldr	r3, [pc, #32]	; (800469c <I2C_TransferConfig+0x60>)
 800467c:	430b      	orrs	r3, r1
 800467e:	43db      	mvns	r3, r3
 8004680:	ea02 0103 	and.w	r1, r2, r3
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	697a      	ldr	r2, [r7, #20]
 800468a:	430a      	orrs	r2, r1
 800468c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800468e:	bf00      	nop
 8004690:	371c      	adds	r7, #28
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr
 800469a:	bf00      	nop
 800469c:	03ff63ff 	.word	0x03ff63ff

080046a0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	2b20      	cmp	r3, #32
 80046b4:	d138      	bne.n	8004728 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d101      	bne.n	80046c4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80046c0:	2302      	movs	r3, #2
 80046c2:	e032      	b.n	800472a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2201      	movs	r2, #1
 80046c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2224      	movs	r2, #36	; 0x24
 80046d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f022 0201 	bic.w	r2, r2, #1
 80046e2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80046f2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	6819      	ldr	r1, [r3, #0]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	683a      	ldr	r2, [r7, #0]
 8004700:	430a      	orrs	r2, r1
 8004702:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f042 0201 	orr.w	r2, r2, #1
 8004712:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2220      	movs	r2, #32
 8004718:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004724:	2300      	movs	r3, #0
 8004726:	e000      	b.n	800472a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004728:	2302      	movs	r3, #2
  }
}
 800472a:	4618      	mov	r0, r3
 800472c:	370c      	adds	r7, #12
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr

08004736 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004736:	b480      	push	{r7}
 8004738:	b085      	sub	sp, #20
 800473a:	af00      	add	r7, sp, #0
 800473c:	6078      	str	r0, [r7, #4]
 800473e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004746:	b2db      	uxtb	r3, r3
 8004748:	2b20      	cmp	r3, #32
 800474a:	d139      	bne.n	80047c0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004752:	2b01      	cmp	r3, #1
 8004754:	d101      	bne.n	800475a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004756:	2302      	movs	r3, #2
 8004758:	e033      	b.n	80047c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2201      	movs	r2, #1
 800475e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2224      	movs	r2, #36	; 0x24
 8004766:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f022 0201 	bic.w	r2, r2, #1
 8004778:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004788:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	021b      	lsls	r3, r3, #8
 800478e:	68fa      	ldr	r2, [r7, #12]
 8004790:	4313      	orrs	r3, r2
 8004792:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	68fa      	ldr	r2, [r7, #12]
 800479a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f042 0201 	orr.w	r2, r2, #1
 80047aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2220      	movs	r2, #32
 80047b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80047bc:	2300      	movs	r3, #0
 80047be:	e000      	b.n	80047c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80047c0:	2302      	movs	r3, #2
  }
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3714      	adds	r7, #20
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr

080047ce <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80047ce:	b580      	push	{r7, lr}
 80047d0:	b084      	sub	sp, #16
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d101      	bne.n	80047e0 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e041      	b.n	8004864 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80047e8:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f245 5255 	movw	r2, #21845	; 0x5555
 80047f2:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	6852      	ldr	r2, [r2, #4]
 80047fc:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	6892      	ldr	r2, [r2, #8]
 8004806:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8004808:	f7fe f900 	bl	8002a0c <HAL_GetTick>
 800480c:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800480e:	e00f      	b.n	8004830 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8004810:	f7fe f8fc 	bl	8002a0c <HAL_GetTick>
 8004814:	4602      	mov	r2, r0
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	2b31      	cmp	r3, #49	; 0x31
 800481c:	d908      	bls.n	8004830 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	f003 0307 	and.w	r3, r3, #7
 8004828:	2b00      	cmp	r3, #0
 800482a:	d001      	beq.n	8004830 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800482c:	2303      	movs	r3, #3
 800482e:	e019      	b.n	8004864 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	f003 0307 	and.w	r3, r3, #7
 800483a:	2b00      	cmp	r3, #0
 800483c:	d1e8      	bne.n	8004810 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	691a      	ldr	r2, [r3, #16]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	429a      	cmp	r2, r3
 800484a:	d005      	beq.n	8004858 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	68d2      	ldr	r2, [r2, #12]
 8004854:	611a      	str	r2, [r3, #16]
 8004856:	e004      	b.n	8004862 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8004860:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004862:	2300      	movs	r3, #0
}
 8004864:	4618      	mov	r0, r3
 8004866:	3710      	adds	r7, #16
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}

0800486c <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800487c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800487e:	2300      	movs	r3, #0
}
 8004880:	4618      	mov	r0, r3
 8004882:	370c      	adds	r7, #12
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr

0800488c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800488c:	b480      	push	{r7}
 800488e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004890:	4b04      	ldr	r3, [pc, #16]	; (80048a4 <HAL_PWREx_GetVoltageRange+0x18>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004898:	4618      	mov	r0, r3
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr
 80048a2:	bf00      	nop
 80048a4:	40007000 	.word	0x40007000

080048a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b085      	sub	sp, #20
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048b6:	d130      	bne.n	800491a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80048b8:	4b23      	ldr	r3, [pc, #140]	; (8004948 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80048c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048c4:	d038      	beq.n	8004938 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80048c6:	4b20      	ldr	r3, [pc, #128]	; (8004948 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80048ce:	4a1e      	ldr	r2, [pc, #120]	; (8004948 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80048d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80048d4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80048d6:	4b1d      	ldr	r3, [pc, #116]	; (800494c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	2232      	movs	r2, #50	; 0x32
 80048dc:	fb02 f303 	mul.w	r3, r2, r3
 80048e0:	4a1b      	ldr	r2, [pc, #108]	; (8004950 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80048e2:	fba2 2303 	umull	r2, r3, r2, r3
 80048e6:	0c9b      	lsrs	r3, r3, #18
 80048e8:	3301      	adds	r3, #1
 80048ea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80048ec:	e002      	b.n	80048f4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	3b01      	subs	r3, #1
 80048f2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80048f4:	4b14      	ldr	r3, [pc, #80]	; (8004948 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80048f6:	695b      	ldr	r3, [r3, #20]
 80048f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004900:	d102      	bne.n	8004908 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d1f2      	bne.n	80048ee <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004908:	4b0f      	ldr	r3, [pc, #60]	; (8004948 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800490a:	695b      	ldr	r3, [r3, #20]
 800490c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004910:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004914:	d110      	bne.n	8004938 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004916:	2303      	movs	r3, #3
 8004918:	e00f      	b.n	800493a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800491a:	4b0b      	ldr	r3, [pc, #44]	; (8004948 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004922:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004926:	d007      	beq.n	8004938 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004928:	4b07      	ldr	r3, [pc, #28]	; (8004948 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004930:	4a05      	ldr	r2, [pc, #20]	; (8004948 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004932:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004936:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004938:	2300      	movs	r3, #0
}
 800493a:	4618      	mov	r0, r3
 800493c:	3714      	adds	r7, #20
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr
 8004946:	bf00      	nop
 8004948:	40007000 	.word	0x40007000
 800494c:	20000000 	.word	0x20000000
 8004950:	431bde83 	.word	0x431bde83

08004954 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b088      	sub	sp, #32
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d101      	bne.n	8004966 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e3ca      	b.n	80050fc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004966:	4b97      	ldr	r3, [pc, #604]	; (8004bc4 <HAL_RCC_OscConfig+0x270>)
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	f003 030c 	and.w	r3, r3, #12
 800496e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004970:	4b94      	ldr	r3, [pc, #592]	; (8004bc4 <HAL_RCC_OscConfig+0x270>)
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	f003 0303 	and.w	r3, r3, #3
 8004978:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 0310 	and.w	r3, r3, #16
 8004982:	2b00      	cmp	r3, #0
 8004984:	f000 80e4 	beq.w	8004b50 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004988:	69bb      	ldr	r3, [r7, #24]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d007      	beq.n	800499e <HAL_RCC_OscConfig+0x4a>
 800498e:	69bb      	ldr	r3, [r7, #24]
 8004990:	2b0c      	cmp	r3, #12
 8004992:	f040 808b 	bne.w	8004aac <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	2b01      	cmp	r3, #1
 800499a:	f040 8087 	bne.w	8004aac <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800499e:	4b89      	ldr	r3, [pc, #548]	; (8004bc4 <HAL_RCC_OscConfig+0x270>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 0302 	and.w	r3, r3, #2
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d005      	beq.n	80049b6 <HAL_RCC_OscConfig+0x62>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	699b      	ldr	r3, [r3, #24]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d101      	bne.n	80049b6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e3a2      	b.n	80050fc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6a1a      	ldr	r2, [r3, #32]
 80049ba:	4b82      	ldr	r3, [pc, #520]	; (8004bc4 <HAL_RCC_OscConfig+0x270>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 0308 	and.w	r3, r3, #8
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d004      	beq.n	80049d0 <HAL_RCC_OscConfig+0x7c>
 80049c6:	4b7f      	ldr	r3, [pc, #508]	; (8004bc4 <HAL_RCC_OscConfig+0x270>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049ce:	e005      	b.n	80049dc <HAL_RCC_OscConfig+0x88>
 80049d0:	4b7c      	ldr	r3, [pc, #496]	; (8004bc4 <HAL_RCC_OscConfig+0x270>)
 80049d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049d6:	091b      	lsrs	r3, r3, #4
 80049d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049dc:	4293      	cmp	r3, r2
 80049de:	d223      	bcs.n	8004a28 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6a1b      	ldr	r3, [r3, #32]
 80049e4:	4618      	mov	r0, r3
 80049e6:	f000 fd55 	bl	8005494 <RCC_SetFlashLatencyFromMSIRange>
 80049ea:	4603      	mov	r3, r0
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d001      	beq.n	80049f4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e383      	b.n	80050fc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80049f4:	4b73      	ldr	r3, [pc, #460]	; (8004bc4 <HAL_RCC_OscConfig+0x270>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a72      	ldr	r2, [pc, #456]	; (8004bc4 <HAL_RCC_OscConfig+0x270>)
 80049fa:	f043 0308 	orr.w	r3, r3, #8
 80049fe:	6013      	str	r3, [r2, #0]
 8004a00:	4b70      	ldr	r3, [pc, #448]	; (8004bc4 <HAL_RCC_OscConfig+0x270>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6a1b      	ldr	r3, [r3, #32]
 8004a0c:	496d      	ldr	r1, [pc, #436]	; (8004bc4 <HAL_RCC_OscConfig+0x270>)
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a12:	4b6c      	ldr	r3, [pc, #432]	; (8004bc4 <HAL_RCC_OscConfig+0x270>)
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	69db      	ldr	r3, [r3, #28]
 8004a1e:	021b      	lsls	r3, r3, #8
 8004a20:	4968      	ldr	r1, [pc, #416]	; (8004bc4 <HAL_RCC_OscConfig+0x270>)
 8004a22:	4313      	orrs	r3, r2
 8004a24:	604b      	str	r3, [r1, #4]
 8004a26:	e025      	b.n	8004a74 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a28:	4b66      	ldr	r3, [pc, #408]	; (8004bc4 <HAL_RCC_OscConfig+0x270>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a65      	ldr	r2, [pc, #404]	; (8004bc4 <HAL_RCC_OscConfig+0x270>)
 8004a2e:	f043 0308 	orr.w	r3, r3, #8
 8004a32:	6013      	str	r3, [r2, #0]
 8004a34:	4b63      	ldr	r3, [pc, #396]	; (8004bc4 <HAL_RCC_OscConfig+0x270>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6a1b      	ldr	r3, [r3, #32]
 8004a40:	4960      	ldr	r1, [pc, #384]	; (8004bc4 <HAL_RCC_OscConfig+0x270>)
 8004a42:	4313      	orrs	r3, r2
 8004a44:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a46:	4b5f      	ldr	r3, [pc, #380]	; (8004bc4 <HAL_RCC_OscConfig+0x270>)
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	69db      	ldr	r3, [r3, #28]
 8004a52:	021b      	lsls	r3, r3, #8
 8004a54:	495b      	ldr	r1, [pc, #364]	; (8004bc4 <HAL_RCC_OscConfig+0x270>)
 8004a56:	4313      	orrs	r3, r2
 8004a58:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d109      	bne.n	8004a74 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6a1b      	ldr	r3, [r3, #32]
 8004a64:	4618      	mov	r0, r3
 8004a66:	f000 fd15 	bl	8005494 <RCC_SetFlashLatencyFromMSIRange>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d001      	beq.n	8004a74 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	e343      	b.n	80050fc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004a74:	f000 fc4a 	bl	800530c <HAL_RCC_GetSysClockFreq>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	4b52      	ldr	r3, [pc, #328]	; (8004bc4 <HAL_RCC_OscConfig+0x270>)
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	091b      	lsrs	r3, r3, #4
 8004a80:	f003 030f 	and.w	r3, r3, #15
 8004a84:	4950      	ldr	r1, [pc, #320]	; (8004bc8 <HAL_RCC_OscConfig+0x274>)
 8004a86:	5ccb      	ldrb	r3, [r1, r3]
 8004a88:	f003 031f 	and.w	r3, r3, #31
 8004a8c:	fa22 f303 	lsr.w	r3, r2, r3
 8004a90:	4a4e      	ldr	r2, [pc, #312]	; (8004bcc <HAL_RCC_OscConfig+0x278>)
 8004a92:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004a94:	4b4e      	ldr	r3, [pc, #312]	; (8004bd0 <HAL_RCC_OscConfig+0x27c>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f7fd ff67 	bl	800296c <HAL_InitTick>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004aa2:	7bfb      	ldrb	r3, [r7, #15]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d052      	beq.n	8004b4e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004aa8:	7bfb      	ldrb	r3, [r7, #15]
 8004aaa:	e327      	b.n	80050fc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	699b      	ldr	r3, [r3, #24]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d032      	beq.n	8004b1a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004ab4:	4b43      	ldr	r3, [pc, #268]	; (8004bc4 <HAL_RCC_OscConfig+0x270>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a42      	ldr	r2, [pc, #264]	; (8004bc4 <HAL_RCC_OscConfig+0x270>)
 8004aba:	f043 0301 	orr.w	r3, r3, #1
 8004abe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004ac0:	f7fd ffa4 	bl	8002a0c <HAL_GetTick>
 8004ac4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004ac6:	e008      	b.n	8004ada <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004ac8:	f7fd ffa0 	bl	8002a0c <HAL_GetTick>
 8004acc:	4602      	mov	r2, r0
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	2b02      	cmp	r3, #2
 8004ad4:	d901      	bls.n	8004ada <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e310      	b.n	80050fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004ada:	4b3a      	ldr	r3, [pc, #232]	; (8004bc4 <HAL_RCC_OscConfig+0x270>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0302 	and.w	r3, r3, #2
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d0f0      	beq.n	8004ac8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ae6:	4b37      	ldr	r3, [pc, #220]	; (8004bc4 <HAL_RCC_OscConfig+0x270>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a36      	ldr	r2, [pc, #216]	; (8004bc4 <HAL_RCC_OscConfig+0x270>)
 8004aec:	f043 0308 	orr.w	r3, r3, #8
 8004af0:	6013      	str	r3, [r2, #0]
 8004af2:	4b34      	ldr	r3, [pc, #208]	; (8004bc4 <HAL_RCC_OscConfig+0x270>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a1b      	ldr	r3, [r3, #32]
 8004afe:	4931      	ldr	r1, [pc, #196]	; (8004bc4 <HAL_RCC_OscConfig+0x270>)
 8004b00:	4313      	orrs	r3, r2
 8004b02:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b04:	4b2f      	ldr	r3, [pc, #188]	; (8004bc4 <HAL_RCC_OscConfig+0x270>)
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	69db      	ldr	r3, [r3, #28]
 8004b10:	021b      	lsls	r3, r3, #8
 8004b12:	492c      	ldr	r1, [pc, #176]	; (8004bc4 <HAL_RCC_OscConfig+0x270>)
 8004b14:	4313      	orrs	r3, r2
 8004b16:	604b      	str	r3, [r1, #4]
 8004b18:	e01a      	b.n	8004b50 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004b1a:	4b2a      	ldr	r3, [pc, #168]	; (8004bc4 <HAL_RCC_OscConfig+0x270>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a29      	ldr	r2, [pc, #164]	; (8004bc4 <HAL_RCC_OscConfig+0x270>)
 8004b20:	f023 0301 	bic.w	r3, r3, #1
 8004b24:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004b26:	f7fd ff71 	bl	8002a0c <HAL_GetTick>
 8004b2a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004b2c:	e008      	b.n	8004b40 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004b2e:	f7fd ff6d 	bl	8002a0c <HAL_GetTick>
 8004b32:	4602      	mov	r2, r0
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	1ad3      	subs	r3, r2, r3
 8004b38:	2b02      	cmp	r3, #2
 8004b3a:	d901      	bls.n	8004b40 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004b3c:	2303      	movs	r3, #3
 8004b3e:	e2dd      	b.n	80050fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004b40:	4b20      	ldr	r3, [pc, #128]	; (8004bc4 <HAL_RCC_OscConfig+0x270>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0302 	and.w	r3, r3, #2
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d1f0      	bne.n	8004b2e <HAL_RCC_OscConfig+0x1da>
 8004b4c:	e000      	b.n	8004b50 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004b4e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 0301 	and.w	r3, r3, #1
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d074      	beq.n	8004c46 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004b5c:	69bb      	ldr	r3, [r7, #24]
 8004b5e:	2b08      	cmp	r3, #8
 8004b60:	d005      	beq.n	8004b6e <HAL_RCC_OscConfig+0x21a>
 8004b62:	69bb      	ldr	r3, [r7, #24]
 8004b64:	2b0c      	cmp	r3, #12
 8004b66:	d10e      	bne.n	8004b86 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	2b03      	cmp	r3, #3
 8004b6c:	d10b      	bne.n	8004b86 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b6e:	4b15      	ldr	r3, [pc, #84]	; (8004bc4 <HAL_RCC_OscConfig+0x270>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d064      	beq.n	8004c44 <HAL_RCC_OscConfig+0x2f0>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d160      	bne.n	8004c44 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e2ba      	b.n	80050fc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b8e:	d106      	bne.n	8004b9e <HAL_RCC_OscConfig+0x24a>
 8004b90:	4b0c      	ldr	r3, [pc, #48]	; (8004bc4 <HAL_RCC_OscConfig+0x270>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a0b      	ldr	r2, [pc, #44]	; (8004bc4 <HAL_RCC_OscConfig+0x270>)
 8004b96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b9a:	6013      	str	r3, [r2, #0]
 8004b9c:	e026      	b.n	8004bec <HAL_RCC_OscConfig+0x298>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ba6:	d115      	bne.n	8004bd4 <HAL_RCC_OscConfig+0x280>
 8004ba8:	4b06      	ldr	r3, [pc, #24]	; (8004bc4 <HAL_RCC_OscConfig+0x270>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a05      	ldr	r2, [pc, #20]	; (8004bc4 <HAL_RCC_OscConfig+0x270>)
 8004bae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004bb2:	6013      	str	r3, [r2, #0]
 8004bb4:	4b03      	ldr	r3, [pc, #12]	; (8004bc4 <HAL_RCC_OscConfig+0x270>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a02      	ldr	r2, [pc, #8]	; (8004bc4 <HAL_RCC_OscConfig+0x270>)
 8004bba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bbe:	6013      	str	r3, [r2, #0]
 8004bc0:	e014      	b.n	8004bec <HAL_RCC_OscConfig+0x298>
 8004bc2:	bf00      	nop
 8004bc4:	40021000 	.word	0x40021000
 8004bc8:	080128b0 	.word	0x080128b0
 8004bcc:	20000000 	.word	0x20000000
 8004bd0:	20000004 	.word	0x20000004
 8004bd4:	4ba0      	ldr	r3, [pc, #640]	; (8004e58 <HAL_RCC_OscConfig+0x504>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a9f      	ldr	r2, [pc, #636]	; (8004e58 <HAL_RCC_OscConfig+0x504>)
 8004bda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bde:	6013      	str	r3, [r2, #0]
 8004be0:	4b9d      	ldr	r3, [pc, #628]	; (8004e58 <HAL_RCC_OscConfig+0x504>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a9c      	ldr	r2, [pc, #624]	; (8004e58 <HAL_RCC_OscConfig+0x504>)
 8004be6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d013      	beq.n	8004c1c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bf4:	f7fd ff0a 	bl	8002a0c <HAL_GetTick>
 8004bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004bfa:	e008      	b.n	8004c0e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bfc:	f7fd ff06 	bl	8002a0c <HAL_GetTick>
 8004c00:	4602      	mov	r2, r0
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	2b64      	cmp	r3, #100	; 0x64
 8004c08:	d901      	bls.n	8004c0e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	e276      	b.n	80050fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c0e:	4b92      	ldr	r3, [pc, #584]	; (8004e58 <HAL_RCC_OscConfig+0x504>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d0f0      	beq.n	8004bfc <HAL_RCC_OscConfig+0x2a8>
 8004c1a:	e014      	b.n	8004c46 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c1c:	f7fd fef6 	bl	8002a0c <HAL_GetTick>
 8004c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c22:	e008      	b.n	8004c36 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c24:	f7fd fef2 	bl	8002a0c <HAL_GetTick>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	1ad3      	subs	r3, r2, r3
 8004c2e:	2b64      	cmp	r3, #100	; 0x64
 8004c30:	d901      	bls.n	8004c36 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004c32:	2303      	movs	r3, #3
 8004c34:	e262      	b.n	80050fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c36:	4b88      	ldr	r3, [pc, #544]	; (8004e58 <HAL_RCC_OscConfig+0x504>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d1f0      	bne.n	8004c24 <HAL_RCC_OscConfig+0x2d0>
 8004c42:	e000      	b.n	8004c46 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0302 	and.w	r3, r3, #2
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d060      	beq.n	8004d14 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004c52:	69bb      	ldr	r3, [r7, #24]
 8004c54:	2b04      	cmp	r3, #4
 8004c56:	d005      	beq.n	8004c64 <HAL_RCC_OscConfig+0x310>
 8004c58:	69bb      	ldr	r3, [r7, #24]
 8004c5a:	2b0c      	cmp	r3, #12
 8004c5c:	d119      	bne.n	8004c92 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	2b02      	cmp	r3, #2
 8004c62:	d116      	bne.n	8004c92 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c64:	4b7c      	ldr	r3, [pc, #496]	; (8004e58 <HAL_RCC_OscConfig+0x504>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d005      	beq.n	8004c7c <HAL_RCC_OscConfig+0x328>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d101      	bne.n	8004c7c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e23f      	b.n	80050fc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c7c:	4b76      	ldr	r3, [pc, #472]	; (8004e58 <HAL_RCC_OscConfig+0x504>)
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	691b      	ldr	r3, [r3, #16]
 8004c88:	061b      	lsls	r3, r3, #24
 8004c8a:	4973      	ldr	r1, [pc, #460]	; (8004e58 <HAL_RCC_OscConfig+0x504>)
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c90:	e040      	b.n	8004d14 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d023      	beq.n	8004ce2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c9a:	4b6f      	ldr	r3, [pc, #444]	; (8004e58 <HAL_RCC_OscConfig+0x504>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a6e      	ldr	r2, [pc, #440]	; (8004e58 <HAL_RCC_OscConfig+0x504>)
 8004ca0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ca4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ca6:	f7fd feb1 	bl	8002a0c <HAL_GetTick>
 8004caa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004cac:	e008      	b.n	8004cc0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cae:	f7fd fead 	bl	8002a0c <HAL_GetTick>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	1ad3      	subs	r3, r2, r3
 8004cb8:	2b02      	cmp	r3, #2
 8004cba:	d901      	bls.n	8004cc0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004cbc:	2303      	movs	r3, #3
 8004cbe:	e21d      	b.n	80050fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004cc0:	4b65      	ldr	r3, [pc, #404]	; (8004e58 <HAL_RCC_OscConfig+0x504>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d0f0      	beq.n	8004cae <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ccc:	4b62      	ldr	r3, [pc, #392]	; (8004e58 <HAL_RCC_OscConfig+0x504>)
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	691b      	ldr	r3, [r3, #16]
 8004cd8:	061b      	lsls	r3, r3, #24
 8004cda:	495f      	ldr	r1, [pc, #380]	; (8004e58 <HAL_RCC_OscConfig+0x504>)
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	604b      	str	r3, [r1, #4]
 8004ce0:	e018      	b.n	8004d14 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ce2:	4b5d      	ldr	r3, [pc, #372]	; (8004e58 <HAL_RCC_OscConfig+0x504>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a5c      	ldr	r2, [pc, #368]	; (8004e58 <HAL_RCC_OscConfig+0x504>)
 8004ce8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004cec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cee:	f7fd fe8d 	bl	8002a0c <HAL_GetTick>
 8004cf2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004cf4:	e008      	b.n	8004d08 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cf6:	f7fd fe89 	bl	8002a0c <HAL_GetTick>
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	1ad3      	subs	r3, r2, r3
 8004d00:	2b02      	cmp	r3, #2
 8004d02:	d901      	bls.n	8004d08 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004d04:	2303      	movs	r3, #3
 8004d06:	e1f9      	b.n	80050fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d08:	4b53      	ldr	r3, [pc, #332]	; (8004e58 <HAL_RCC_OscConfig+0x504>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d1f0      	bne.n	8004cf6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 0308 	and.w	r3, r3, #8
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d03c      	beq.n	8004d9a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	695b      	ldr	r3, [r3, #20]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d01c      	beq.n	8004d62 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d28:	4b4b      	ldr	r3, [pc, #300]	; (8004e58 <HAL_RCC_OscConfig+0x504>)
 8004d2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d2e:	4a4a      	ldr	r2, [pc, #296]	; (8004e58 <HAL_RCC_OscConfig+0x504>)
 8004d30:	f043 0301 	orr.w	r3, r3, #1
 8004d34:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d38:	f7fd fe68 	bl	8002a0c <HAL_GetTick>
 8004d3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d3e:	e008      	b.n	8004d52 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d40:	f7fd fe64 	bl	8002a0c <HAL_GetTick>
 8004d44:	4602      	mov	r2, r0
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	1ad3      	subs	r3, r2, r3
 8004d4a:	2b02      	cmp	r3, #2
 8004d4c:	d901      	bls.n	8004d52 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004d4e:	2303      	movs	r3, #3
 8004d50:	e1d4      	b.n	80050fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d52:	4b41      	ldr	r3, [pc, #260]	; (8004e58 <HAL_RCC_OscConfig+0x504>)
 8004d54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d58:	f003 0302 	and.w	r3, r3, #2
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d0ef      	beq.n	8004d40 <HAL_RCC_OscConfig+0x3ec>
 8004d60:	e01b      	b.n	8004d9a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d62:	4b3d      	ldr	r3, [pc, #244]	; (8004e58 <HAL_RCC_OscConfig+0x504>)
 8004d64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d68:	4a3b      	ldr	r2, [pc, #236]	; (8004e58 <HAL_RCC_OscConfig+0x504>)
 8004d6a:	f023 0301 	bic.w	r3, r3, #1
 8004d6e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d72:	f7fd fe4b 	bl	8002a0c <HAL_GetTick>
 8004d76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d78:	e008      	b.n	8004d8c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d7a:	f7fd fe47 	bl	8002a0c <HAL_GetTick>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	2b02      	cmp	r3, #2
 8004d86:	d901      	bls.n	8004d8c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004d88:	2303      	movs	r3, #3
 8004d8a:	e1b7      	b.n	80050fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d8c:	4b32      	ldr	r3, [pc, #200]	; (8004e58 <HAL_RCC_OscConfig+0x504>)
 8004d8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d92:	f003 0302 	and.w	r3, r3, #2
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d1ef      	bne.n	8004d7a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 0304 	and.w	r3, r3, #4
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	f000 80a6 	beq.w	8004ef4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004da8:	2300      	movs	r3, #0
 8004daa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004dac:	4b2a      	ldr	r3, [pc, #168]	; (8004e58 <HAL_RCC_OscConfig+0x504>)
 8004dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004db0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d10d      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004db8:	4b27      	ldr	r3, [pc, #156]	; (8004e58 <HAL_RCC_OscConfig+0x504>)
 8004dba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dbc:	4a26      	ldr	r2, [pc, #152]	; (8004e58 <HAL_RCC_OscConfig+0x504>)
 8004dbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dc2:	6593      	str	r3, [r2, #88]	; 0x58
 8004dc4:	4b24      	ldr	r3, [pc, #144]	; (8004e58 <HAL_RCC_OscConfig+0x504>)
 8004dc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dcc:	60bb      	str	r3, [r7, #8]
 8004dce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004dd4:	4b21      	ldr	r3, [pc, #132]	; (8004e5c <HAL_RCC_OscConfig+0x508>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d118      	bne.n	8004e12 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004de0:	4b1e      	ldr	r3, [pc, #120]	; (8004e5c <HAL_RCC_OscConfig+0x508>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a1d      	ldr	r2, [pc, #116]	; (8004e5c <HAL_RCC_OscConfig+0x508>)
 8004de6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004dec:	f7fd fe0e 	bl	8002a0c <HAL_GetTick>
 8004df0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004df2:	e008      	b.n	8004e06 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004df4:	f7fd fe0a 	bl	8002a0c <HAL_GetTick>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	2b02      	cmp	r3, #2
 8004e00:	d901      	bls.n	8004e06 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004e02:	2303      	movs	r3, #3
 8004e04:	e17a      	b.n	80050fc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e06:	4b15      	ldr	r3, [pc, #84]	; (8004e5c <HAL_RCC_OscConfig+0x508>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d0f0      	beq.n	8004df4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d108      	bne.n	8004e2c <HAL_RCC_OscConfig+0x4d8>
 8004e1a:	4b0f      	ldr	r3, [pc, #60]	; (8004e58 <HAL_RCC_OscConfig+0x504>)
 8004e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e20:	4a0d      	ldr	r2, [pc, #52]	; (8004e58 <HAL_RCC_OscConfig+0x504>)
 8004e22:	f043 0301 	orr.w	r3, r3, #1
 8004e26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e2a:	e029      	b.n	8004e80 <HAL_RCC_OscConfig+0x52c>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	2b05      	cmp	r3, #5
 8004e32:	d115      	bne.n	8004e60 <HAL_RCC_OscConfig+0x50c>
 8004e34:	4b08      	ldr	r3, [pc, #32]	; (8004e58 <HAL_RCC_OscConfig+0x504>)
 8004e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e3a:	4a07      	ldr	r2, [pc, #28]	; (8004e58 <HAL_RCC_OscConfig+0x504>)
 8004e3c:	f043 0304 	orr.w	r3, r3, #4
 8004e40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e44:	4b04      	ldr	r3, [pc, #16]	; (8004e58 <HAL_RCC_OscConfig+0x504>)
 8004e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e4a:	4a03      	ldr	r2, [pc, #12]	; (8004e58 <HAL_RCC_OscConfig+0x504>)
 8004e4c:	f043 0301 	orr.w	r3, r3, #1
 8004e50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e54:	e014      	b.n	8004e80 <HAL_RCC_OscConfig+0x52c>
 8004e56:	bf00      	nop
 8004e58:	40021000 	.word	0x40021000
 8004e5c:	40007000 	.word	0x40007000
 8004e60:	4b9c      	ldr	r3, [pc, #624]	; (80050d4 <HAL_RCC_OscConfig+0x780>)
 8004e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e66:	4a9b      	ldr	r2, [pc, #620]	; (80050d4 <HAL_RCC_OscConfig+0x780>)
 8004e68:	f023 0301 	bic.w	r3, r3, #1
 8004e6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e70:	4b98      	ldr	r3, [pc, #608]	; (80050d4 <HAL_RCC_OscConfig+0x780>)
 8004e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e76:	4a97      	ldr	r2, [pc, #604]	; (80050d4 <HAL_RCC_OscConfig+0x780>)
 8004e78:	f023 0304 	bic.w	r3, r3, #4
 8004e7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d016      	beq.n	8004eb6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e88:	f7fd fdc0 	bl	8002a0c <HAL_GetTick>
 8004e8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e8e:	e00a      	b.n	8004ea6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e90:	f7fd fdbc 	bl	8002a0c <HAL_GetTick>
 8004e94:	4602      	mov	r2, r0
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	1ad3      	subs	r3, r2, r3
 8004e9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d901      	bls.n	8004ea6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004ea2:	2303      	movs	r3, #3
 8004ea4:	e12a      	b.n	80050fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ea6:	4b8b      	ldr	r3, [pc, #556]	; (80050d4 <HAL_RCC_OscConfig+0x780>)
 8004ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eac:	f003 0302 	and.w	r3, r3, #2
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d0ed      	beq.n	8004e90 <HAL_RCC_OscConfig+0x53c>
 8004eb4:	e015      	b.n	8004ee2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eb6:	f7fd fda9 	bl	8002a0c <HAL_GetTick>
 8004eba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ebc:	e00a      	b.n	8004ed4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ebe:	f7fd fda5 	bl	8002a0c <HAL_GetTick>
 8004ec2:	4602      	mov	r2, r0
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	1ad3      	subs	r3, r2, r3
 8004ec8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d901      	bls.n	8004ed4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004ed0:	2303      	movs	r3, #3
 8004ed2:	e113      	b.n	80050fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ed4:	4b7f      	ldr	r3, [pc, #508]	; (80050d4 <HAL_RCC_OscConfig+0x780>)
 8004ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eda:	f003 0302 	and.w	r3, r3, #2
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d1ed      	bne.n	8004ebe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ee2:	7ffb      	ldrb	r3, [r7, #31]
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d105      	bne.n	8004ef4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ee8:	4b7a      	ldr	r3, [pc, #488]	; (80050d4 <HAL_RCC_OscConfig+0x780>)
 8004eea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eec:	4a79      	ldr	r2, [pc, #484]	; (80050d4 <HAL_RCC_OscConfig+0x780>)
 8004eee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ef2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	f000 80fe 	beq.w	80050fa <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f02:	2b02      	cmp	r3, #2
 8004f04:	f040 80d0 	bne.w	80050a8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004f08:	4b72      	ldr	r3, [pc, #456]	; (80050d4 <HAL_RCC_OscConfig+0x780>)
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	f003 0203 	and.w	r2, r3, #3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d130      	bne.n	8004f7e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f26:	3b01      	subs	r3, #1
 8004f28:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d127      	bne.n	8004f7e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f38:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d11f      	bne.n	8004f7e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004f48:	2a07      	cmp	r2, #7
 8004f4a:	bf14      	ite	ne
 8004f4c:	2201      	movne	r2, #1
 8004f4e:	2200      	moveq	r2, #0
 8004f50:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d113      	bne.n	8004f7e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f60:	085b      	lsrs	r3, r3, #1
 8004f62:	3b01      	subs	r3, #1
 8004f64:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d109      	bne.n	8004f7e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f74:	085b      	lsrs	r3, r3, #1
 8004f76:	3b01      	subs	r3, #1
 8004f78:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d06e      	beq.n	800505c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004f7e:	69bb      	ldr	r3, [r7, #24]
 8004f80:	2b0c      	cmp	r3, #12
 8004f82:	d069      	beq.n	8005058 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004f84:	4b53      	ldr	r3, [pc, #332]	; (80050d4 <HAL_RCC_OscConfig+0x780>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d105      	bne.n	8004f9c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004f90:	4b50      	ldr	r3, [pc, #320]	; (80050d4 <HAL_RCC_OscConfig+0x780>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d001      	beq.n	8004fa0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e0ad      	b.n	80050fc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004fa0:	4b4c      	ldr	r3, [pc, #304]	; (80050d4 <HAL_RCC_OscConfig+0x780>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a4b      	ldr	r2, [pc, #300]	; (80050d4 <HAL_RCC_OscConfig+0x780>)
 8004fa6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004faa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004fac:	f7fd fd2e 	bl	8002a0c <HAL_GetTick>
 8004fb0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fb2:	e008      	b.n	8004fc6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fb4:	f7fd fd2a 	bl	8002a0c <HAL_GetTick>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	1ad3      	subs	r3, r2, r3
 8004fbe:	2b02      	cmp	r3, #2
 8004fc0:	d901      	bls.n	8004fc6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	e09a      	b.n	80050fc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fc6:	4b43      	ldr	r3, [pc, #268]	; (80050d4 <HAL_RCC_OscConfig+0x780>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d1f0      	bne.n	8004fb4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004fd2:	4b40      	ldr	r3, [pc, #256]	; (80050d4 <HAL_RCC_OscConfig+0x780>)
 8004fd4:	68da      	ldr	r2, [r3, #12]
 8004fd6:	4b40      	ldr	r3, [pc, #256]	; (80050d8 <HAL_RCC_OscConfig+0x784>)
 8004fd8:	4013      	ands	r3, r2
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004fe2:	3a01      	subs	r2, #1
 8004fe4:	0112      	lsls	r2, r2, #4
 8004fe6:	4311      	orrs	r1, r2
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004fec:	0212      	lsls	r2, r2, #8
 8004fee:	4311      	orrs	r1, r2
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004ff4:	0852      	lsrs	r2, r2, #1
 8004ff6:	3a01      	subs	r2, #1
 8004ff8:	0552      	lsls	r2, r2, #21
 8004ffa:	4311      	orrs	r1, r2
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005000:	0852      	lsrs	r2, r2, #1
 8005002:	3a01      	subs	r2, #1
 8005004:	0652      	lsls	r2, r2, #25
 8005006:	4311      	orrs	r1, r2
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800500c:	0912      	lsrs	r2, r2, #4
 800500e:	0452      	lsls	r2, r2, #17
 8005010:	430a      	orrs	r2, r1
 8005012:	4930      	ldr	r1, [pc, #192]	; (80050d4 <HAL_RCC_OscConfig+0x780>)
 8005014:	4313      	orrs	r3, r2
 8005016:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005018:	4b2e      	ldr	r3, [pc, #184]	; (80050d4 <HAL_RCC_OscConfig+0x780>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a2d      	ldr	r2, [pc, #180]	; (80050d4 <HAL_RCC_OscConfig+0x780>)
 800501e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005022:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005024:	4b2b      	ldr	r3, [pc, #172]	; (80050d4 <HAL_RCC_OscConfig+0x780>)
 8005026:	68db      	ldr	r3, [r3, #12]
 8005028:	4a2a      	ldr	r2, [pc, #168]	; (80050d4 <HAL_RCC_OscConfig+0x780>)
 800502a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800502e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005030:	f7fd fcec 	bl	8002a0c <HAL_GetTick>
 8005034:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005036:	e008      	b.n	800504a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005038:	f7fd fce8 	bl	8002a0c <HAL_GetTick>
 800503c:	4602      	mov	r2, r0
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	2b02      	cmp	r3, #2
 8005044:	d901      	bls.n	800504a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005046:	2303      	movs	r3, #3
 8005048:	e058      	b.n	80050fc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800504a:	4b22      	ldr	r3, [pc, #136]	; (80050d4 <HAL_RCC_OscConfig+0x780>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005052:	2b00      	cmp	r3, #0
 8005054:	d0f0      	beq.n	8005038 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005056:	e050      	b.n	80050fa <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	e04f      	b.n	80050fc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800505c:	4b1d      	ldr	r3, [pc, #116]	; (80050d4 <HAL_RCC_OscConfig+0x780>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005064:	2b00      	cmp	r3, #0
 8005066:	d148      	bne.n	80050fa <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005068:	4b1a      	ldr	r3, [pc, #104]	; (80050d4 <HAL_RCC_OscConfig+0x780>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a19      	ldr	r2, [pc, #100]	; (80050d4 <HAL_RCC_OscConfig+0x780>)
 800506e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005072:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005074:	4b17      	ldr	r3, [pc, #92]	; (80050d4 <HAL_RCC_OscConfig+0x780>)
 8005076:	68db      	ldr	r3, [r3, #12]
 8005078:	4a16      	ldr	r2, [pc, #88]	; (80050d4 <HAL_RCC_OscConfig+0x780>)
 800507a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800507e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005080:	f7fd fcc4 	bl	8002a0c <HAL_GetTick>
 8005084:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005086:	e008      	b.n	800509a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005088:	f7fd fcc0 	bl	8002a0c <HAL_GetTick>
 800508c:	4602      	mov	r2, r0
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	1ad3      	subs	r3, r2, r3
 8005092:	2b02      	cmp	r3, #2
 8005094:	d901      	bls.n	800509a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8005096:	2303      	movs	r3, #3
 8005098:	e030      	b.n	80050fc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800509a:	4b0e      	ldr	r3, [pc, #56]	; (80050d4 <HAL_RCC_OscConfig+0x780>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d0f0      	beq.n	8005088 <HAL_RCC_OscConfig+0x734>
 80050a6:	e028      	b.n	80050fa <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80050a8:	69bb      	ldr	r3, [r7, #24]
 80050aa:	2b0c      	cmp	r3, #12
 80050ac:	d023      	beq.n	80050f6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050ae:	4b09      	ldr	r3, [pc, #36]	; (80050d4 <HAL_RCC_OscConfig+0x780>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a08      	ldr	r2, [pc, #32]	; (80050d4 <HAL_RCC_OscConfig+0x780>)
 80050b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050ba:	f7fd fca7 	bl	8002a0c <HAL_GetTick>
 80050be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050c0:	e00c      	b.n	80050dc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050c2:	f7fd fca3 	bl	8002a0c <HAL_GetTick>
 80050c6:	4602      	mov	r2, r0
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	1ad3      	subs	r3, r2, r3
 80050cc:	2b02      	cmp	r3, #2
 80050ce:	d905      	bls.n	80050dc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80050d0:	2303      	movs	r3, #3
 80050d2:	e013      	b.n	80050fc <HAL_RCC_OscConfig+0x7a8>
 80050d4:	40021000 	.word	0x40021000
 80050d8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050dc:	4b09      	ldr	r3, [pc, #36]	; (8005104 <HAL_RCC_OscConfig+0x7b0>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d1ec      	bne.n	80050c2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80050e8:	4b06      	ldr	r3, [pc, #24]	; (8005104 <HAL_RCC_OscConfig+0x7b0>)
 80050ea:	68da      	ldr	r2, [r3, #12]
 80050ec:	4905      	ldr	r1, [pc, #20]	; (8005104 <HAL_RCC_OscConfig+0x7b0>)
 80050ee:	4b06      	ldr	r3, [pc, #24]	; (8005108 <HAL_RCC_OscConfig+0x7b4>)
 80050f0:	4013      	ands	r3, r2
 80050f2:	60cb      	str	r3, [r1, #12]
 80050f4:	e001      	b.n	80050fa <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e000      	b.n	80050fc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80050fa:	2300      	movs	r3, #0
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3720      	adds	r7, #32
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}
 8005104:	40021000 	.word	0x40021000
 8005108:	feeefffc 	.word	0xfeeefffc

0800510c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b084      	sub	sp, #16
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d101      	bne.n	8005120 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	e0e7      	b.n	80052f0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005120:	4b75      	ldr	r3, [pc, #468]	; (80052f8 <HAL_RCC_ClockConfig+0x1ec>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 0307 	and.w	r3, r3, #7
 8005128:	683a      	ldr	r2, [r7, #0]
 800512a:	429a      	cmp	r2, r3
 800512c:	d910      	bls.n	8005150 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800512e:	4b72      	ldr	r3, [pc, #456]	; (80052f8 <HAL_RCC_ClockConfig+0x1ec>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f023 0207 	bic.w	r2, r3, #7
 8005136:	4970      	ldr	r1, [pc, #448]	; (80052f8 <HAL_RCC_ClockConfig+0x1ec>)
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	4313      	orrs	r3, r2
 800513c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800513e:	4b6e      	ldr	r3, [pc, #440]	; (80052f8 <HAL_RCC_ClockConfig+0x1ec>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 0307 	and.w	r3, r3, #7
 8005146:	683a      	ldr	r2, [r7, #0]
 8005148:	429a      	cmp	r2, r3
 800514a:	d001      	beq.n	8005150 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	e0cf      	b.n	80052f0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f003 0302 	and.w	r3, r3, #2
 8005158:	2b00      	cmp	r3, #0
 800515a:	d010      	beq.n	800517e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	689a      	ldr	r2, [r3, #8]
 8005160:	4b66      	ldr	r3, [pc, #408]	; (80052fc <HAL_RCC_ClockConfig+0x1f0>)
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005168:	429a      	cmp	r2, r3
 800516a:	d908      	bls.n	800517e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800516c:	4b63      	ldr	r3, [pc, #396]	; (80052fc <HAL_RCC_ClockConfig+0x1f0>)
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	4960      	ldr	r1, [pc, #384]	; (80052fc <HAL_RCC_ClockConfig+0x1f0>)
 800517a:	4313      	orrs	r3, r2
 800517c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f003 0301 	and.w	r3, r3, #1
 8005186:	2b00      	cmp	r3, #0
 8005188:	d04c      	beq.n	8005224 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	2b03      	cmp	r3, #3
 8005190:	d107      	bne.n	80051a2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005192:	4b5a      	ldr	r3, [pc, #360]	; (80052fc <HAL_RCC_ClockConfig+0x1f0>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800519a:	2b00      	cmp	r3, #0
 800519c:	d121      	bne.n	80051e2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e0a6      	b.n	80052f0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	2b02      	cmp	r3, #2
 80051a8:	d107      	bne.n	80051ba <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80051aa:	4b54      	ldr	r3, [pc, #336]	; (80052fc <HAL_RCC_ClockConfig+0x1f0>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d115      	bne.n	80051e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	e09a      	b.n	80052f0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d107      	bne.n	80051d2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80051c2:	4b4e      	ldr	r3, [pc, #312]	; (80052fc <HAL_RCC_ClockConfig+0x1f0>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 0302 	and.w	r3, r3, #2
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d109      	bne.n	80051e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e08e      	b.n	80052f0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051d2:	4b4a      	ldr	r3, [pc, #296]	; (80052fc <HAL_RCC_ClockConfig+0x1f0>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d101      	bne.n	80051e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e086      	b.n	80052f0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80051e2:	4b46      	ldr	r3, [pc, #280]	; (80052fc <HAL_RCC_ClockConfig+0x1f0>)
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	f023 0203 	bic.w	r2, r3, #3
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	4943      	ldr	r1, [pc, #268]	; (80052fc <HAL_RCC_ClockConfig+0x1f0>)
 80051f0:	4313      	orrs	r3, r2
 80051f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051f4:	f7fd fc0a 	bl	8002a0c <HAL_GetTick>
 80051f8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051fa:	e00a      	b.n	8005212 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051fc:	f7fd fc06 	bl	8002a0c <HAL_GetTick>
 8005200:	4602      	mov	r2, r0
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	1ad3      	subs	r3, r2, r3
 8005206:	f241 3288 	movw	r2, #5000	; 0x1388
 800520a:	4293      	cmp	r3, r2
 800520c:	d901      	bls.n	8005212 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800520e:	2303      	movs	r3, #3
 8005210:	e06e      	b.n	80052f0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005212:	4b3a      	ldr	r3, [pc, #232]	; (80052fc <HAL_RCC_ClockConfig+0x1f0>)
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	f003 020c 	and.w	r2, r3, #12
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	429a      	cmp	r2, r3
 8005222:	d1eb      	bne.n	80051fc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f003 0302 	and.w	r3, r3, #2
 800522c:	2b00      	cmp	r3, #0
 800522e:	d010      	beq.n	8005252 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	689a      	ldr	r2, [r3, #8]
 8005234:	4b31      	ldr	r3, [pc, #196]	; (80052fc <HAL_RCC_ClockConfig+0x1f0>)
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800523c:	429a      	cmp	r2, r3
 800523e:	d208      	bcs.n	8005252 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005240:	4b2e      	ldr	r3, [pc, #184]	; (80052fc <HAL_RCC_ClockConfig+0x1f0>)
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	492b      	ldr	r1, [pc, #172]	; (80052fc <HAL_RCC_ClockConfig+0x1f0>)
 800524e:	4313      	orrs	r3, r2
 8005250:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005252:	4b29      	ldr	r3, [pc, #164]	; (80052f8 <HAL_RCC_ClockConfig+0x1ec>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 0307 	and.w	r3, r3, #7
 800525a:	683a      	ldr	r2, [r7, #0]
 800525c:	429a      	cmp	r2, r3
 800525e:	d210      	bcs.n	8005282 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005260:	4b25      	ldr	r3, [pc, #148]	; (80052f8 <HAL_RCC_ClockConfig+0x1ec>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f023 0207 	bic.w	r2, r3, #7
 8005268:	4923      	ldr	r1, [pc, #140]	; (80052f8 <HAL_RCC_ClockConfig+0x1ec>)
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	4313      	orrs	r3, r2
 800526e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005270:	4b21      	ldr	r3, [pc, #132]	; (80052f8 <HAL_RCC_ClockConfig+0x1ec>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 0307 	and.w	r3, r3, #7
 8005278:	683a      	ldr	r2, [r7, #0]
 800527a:	429a      	cmp	r2, r3
 800527c:	d001      	beq.n	8005282 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e036      	b.n	80052f0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f003 0304 	and.w	r3, r3, #4
 800528a:	2b00      	cmp	r3, #0
 800528c:	d008      	beq.n	80052a0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800528e:	4b1b      	ldr	r3, [pc, #108]	; (80052fc <HAL_RCC_ClockConfig+0x1f0>)
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	68db      	ldr	r3, [r3, #12]
 800529a:	4918      	ldr	r1, [pc, #96]	; (80052fc <HAL_RCC_ClockConfig+0x1f0>)
 800529c:	4313      	orrs	r3, r2
 800529e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 0308 	and.w	r3, r3, #8
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d009      	beq.n	80052c0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80052ac:	4b13      	ldr	r3, [pc, #76]	; (80052fc <HAL_RCC_ClockConfig+0x1f0>)
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	691b      	ldr	r3, [r3, #16]
 80052b8:	00db      	lsls	r3, r3, #3
 80052ba:	4910      	ldr	r1, [pc, #64]	; (80052fc <HAL_RCC_ClockConfig+0x1f0>)
 80052bc:	4313      	orrs	r3, r2
 80052be:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80052c0:	f000 f824 	bl	800530c <HAL_RCC_GetSysClockFreq>
 80052c4:	4602      	mov	r2, r0
 80052c6:	4b0d      	ldr	r3, [pc, #52]	; (80052fc <HAL_RCC_ClockConfig+0x1f0>)
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	091b      	lsrs	r3, r3, #4
 80052cc:	f003 030f 	and.w	r3, r3, #15
 80052d0:	490b      	ldr	r1, [pc, #44]	; (8005300 <HAL_RCC_ClockConfig+0x1f4>)
 80052d2:	5ccb      	ldrb	r3, [r1, r3]
 80052d4:	f003 031f 	and.w	r3, r3, #31
 80052d8:	fa22 f303 	lsr.w	r3, r2, r3
 80052dc:	4a09      	ldr	r2, [pc, #36]	; (8005304 <HAL_RCC_ClockConfig+0x1f8>)
 80052de:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80052e0:	4b09      	ldr	r3, [pc, #36]	; (8005308 <HAL_RCC_ClockConfig+0x1fc>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4618      	mov	r0, r3
 80052e6:	f7fd fb41 	bl	800296c <HAL_InitTick>
 80052ea:	4603      	mov	r3, r0
 80052ec:	72fb      	strb	r3, [r7, #11]

  return status;
 80052ee:	7afb      	ldrb	r3, [r7, #11]
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3710      	adds	r7, #16
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}
 80052f8:	40022000 	.word	0x40022000
 80052fc:	40021000 	.word	0x40021000
 8005300:	080128b0 	.word	0x080128b0
 8005304:	20000000 	.word	0x20000000
 8005308:	20000004 	.word	0x20000004

0800530c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800530c:	b480      	push	{r7}
 800530e:	b089      	sub	sp, #36	; 0x24
 8005310:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005312:	2300      	movs	r3, #0
 8005314:	61fb      	str	r3, [r7, #28]
 8005316:	2300      	movs	r3, #0
 8005318:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800531a:	4b3e      	ldr	r3, [pc, #248]	; (8005414 <HAL_RCC_GetSysClockFreq+0x108>)
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	f003 030c 	and.w	r3, r3, #12
 8005322:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005324:	4b3b      	ldr	r3, [pc, #236]	; (8005414 <HAL_RCC_GetSysClockFreq+0x108>)
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	f003 0303 	and.w	r3, r3, #3
 800532c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d005      	beq.n	8005340 <HAL_RCC_GetSysClockFreq+0x34>
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	2b0c      	cmp	r3, #12
 8005338:	d121      	bne.n	800537e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2b01      	cmp	r3, #1
 800533e:	d11e      	bne.n	800537e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005340:	4b34      	ldr	r3, [pc, #208]	; (8005414 <HAL_RCC_GetSysClockFreq+0x108>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 0308 	and.w	r3, r3, #8
 8005348:	2b00      	cmp	r3, #0
 800534a:	d107      	bne.n	800535c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800534c:	4b31      	ldr	r3, [pc, #196]	; (8005414 <HAL_RCC_GetSysClockFreq+0x108>)
 800534e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005352:	0a1b      	lsrs	r3, r3, #8
 8005354:	f003 030f 	and.w	r3, r3, #15
 8005358:	61fb      	str	r3, [r7, #28]
 800535a:	e005      	b.n	8005368 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800535c:	4b2d      	ldr	r3, [pc, #180]	; (8005414 <HAL_RCC_GetSysClockFreq+0x108>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	091b      	lsrs	r3, r3, #4
 8005362:	f003 030f 	and.w	r3, r3, #15
 8005366:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005368:	4a2b      	ldr	r2, [pc, #172]	; (8005418 <HAL_RCC_GetSysClockFreq+0x10c>)
 800536a:	69fb      	ldr	r3, [r7, #28]
 800536c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005370:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d10d      	bne.n	8005394 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005378:	69fb      	ldr	r3, [r7, #28]
 800537a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800537c:	e00a      	b.n	8005394 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	2b04      	cmp	r3, #4
 8005382:	d102      	bne.n	800538a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005384:	4b25      	ldr	r3, [pc, #148]	; (800541c <HAL_RCC_GetSysClockFreq+0x110>)
 8005386:	61bb      	str	r3, [r7, #24]
 8005388:	e004      	b.n	8005394 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	2b08      	cmp	r3, #8
 800538e:	d101      	bne.n	8005394 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005390:	4b23      	ldr	r3, [pc, #140]	; (8005420 <HAL_RCC_GetSysClockFreq+0x114>)
 8005392:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	2b0c      	cmp	r3, #12
 8005398:	d134      	bne.n	8005404 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800539a:	4b1e      	ldr	r3, [pc, #120]	; (8005414 <HAL_RCC_GetSysClockFreq+0x108>)
 800539c:	68db      	ldr	r3, [r3, #12]
 800539e:	f003 0303 	and.w	r3, r3, #3
 80053a2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	2b02      	cmp	r3, #2
 80053a8:	d003      	beq.n	80053b2 <HAL_RCC_GetSysClockFreq+0xa6>
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	2b03      	cmp	r3, #3
 80053ae:	d003      	beq.n	80053b8 <HAL_RCC_GetSysClockFreq+0xac>
 80053b0:	e005      	b.n	80053be <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80053b2:	4b1a      	ldr	r3, [pc, #104]	; (800541c <HAL_RCC_GetSysClockFreq+0x110>)
 80053b4:	617b      	str	r3, [r7, #20]
      break;
 80053b6:	e005      	b.n	80053c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80053b8:	4b19      	ldr	r3, [pc, #100]	; (8005420 <HAL_RCC_GetSysClockFreq+0x114>)
 80053ba:	617b      	str	r3, [r7, #20]
      break;
 80053bc:	e002      	b.n	80053c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80053be:	69fb      	ldr	r3, [r7, #28]
 80053c0:	617b      	str	r3, [r7, #20]
      break;
 80053c2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80053c4:	4b13      	ldr	r3, [pc, #76]	; (8005414 <HAL_RCC_GetSysClockFreq+0x108>)
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	091b      	lsrs	r3, r3, #4
 80053ca:	f003 0307 	and.w	r3, r3, #7
 80053ce:	3301      	adds	r3, #1
 80053d0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80053d2:	4b10      	ldr	r3, [pc, #64]	; (8005414 <HAL_RCC_GetSysClockFreq+0x108>)
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	0a1b      	lsrs	r3, r3, #8
 80053d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053dc:	697a      	ldr	r2, [r7, #20]
 80053de:	fb03 f202 	mul.w	r2, r3, r2
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80053e8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80053ea:	4b0a      	ldr	r3, [pc, #40]	; (8005414 <HAL_RCC_GetSysClockFreq+0x108>)
 80053ec:	68db      	ldr	r3, [r3, #12]
 80053ee:	0e5b      	lsrs	r3, r3, #25
 80053f0:	f003 0303 	and.w	r3, r3, #3
 80053f4:	3301      	adds	r3, #1
 80053f6:	005b      	lsls	r3, r3, #1
 80053f8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80053fa:	697a      	ldr	r2, [r7, #20]
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005402:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005404:	69bb      	ldr	r3, [r7, #24]
}
 8005406:	4618      	mov	r0, r3
 8005408:	3724      	adds	r7, #36	; 0x24
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr
 8005412:	bf00      	nop
 8005414:	40021000 	.word	0x40021000
 8005418:	080128c8 	.word	0x080128c8
 800541c:	00f42400 	.word	0x00f42400
 8005420:	007a1200 	.word	0x007a1200

08005424 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005424:	b480      	push	{r7}
 8005426:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005428:	4b03      	ldr	r3, [pc, #12]	; (8005438 <HAL_RCC_GetHCLKFreq+0x14>)
 800542a:	681b      	ldr	r3, [r3, #0]
}
 800542c:	4618      	mov	r0, r3
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr
 8005436:	bf00      	nop
 8005438:	20000000 	.word	0x20000000

0800543c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005440:	f7ff fff0 	bl	8005424 <HAL_RCC_GetHCLKFreq>
 8005444:	4602      	mov	r2, r0
 8005446:	4b06      	ldr	r3, [pc, #24]	; (8005460 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	0a1b      	lsrs	r3, r3, #8
 800544c:	f003 0307 	and.w	r3, r3, #7
 8005450:	4904      	ldr	r1, [pc, #16]	; (8005464 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005452:	5ccb      	ldrb	r3, [r1, r3]
 8005454:	f003 031f 	and.w	r3, r3, #31
 8005458:	fa22 f303 	lsr.w	r3, r2, r3
}
 800545c:	4618      	mov	r0, r3
 800545e:	bd80      	pop	{r7, pc}
 8005460:	40021000 	.word	0x40021000
 8005464:	080128c0 	.word	0x080128c0

08005468 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800546c:	f7ff ffda 	bl	8005424 <HAL_RCC_GetHCLKFreq>
 8005470:	4602      	mov	r2, r0
 8005472:	4b06      	ldr	r3, [pc, #24]	; (800548c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	0adb      	lsrs	r3, r3, #11
 8005478:	f003 0307 	and.w	r3, r3, #7
 800547c:	4904      	ldr	r1, [pc, #16]	; (8005490 <HAL_RCC_GetPCLK2Freq+0x28>)
 800547e:	5ccb      	ldrb	r3, [r1, r3]
 8005480:	f003 031f 	and.w	r3, r3, #31
 8005484:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005488:	4618      	mov	r0, r3
 800548a:	bd80      	pop	{r7, pc}
 800548c:	40021000 	.word	0x40021000
 8005490:	080128c0 	.word	0x080128c0

08005494 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b086      	sub	sp, #24
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800549c:	2300      	movs	r3, #0
 800549e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80054a0:	4b2a      	ldr	r3, [pc, #168]	; (800554c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80054a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d003      	beq.n	80054b4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80054ac:	f7ff f9ee 	bl	800488c <HAL_PWREx_GetVoltageRange>
 80054b0:	6178      	str	r0, [r7, #20]
 80054b2:	e014      	b.n	80054de <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80054b4:	4b25      	ldr	r3, [pc, #148]	; (800554c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80054b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054b8:	4a24      	ldr	r2, [pc, #144]	; (800554c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80054ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054be:	6593      	str	r3, [r2, #88]	; 0x58
 80054c0:	4b22      	ldr	r3, [pc, #136]	; (800554c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80054c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054c8:	60fb      	str	r3, [r7, #12]
 80054ca:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80054cc:	f7ff f9de 	bl	800488c <HAL_PWREx_GetVoltageRange>
 80054d0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80054d2:	4b1e      	ldr	r3, [pc, #120]	; (800554c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80054d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054d6:	4a1d      	ldr	r2, [pc, #116]	; (800554c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80054d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054dc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054e4:	d10b      	bne.n	80054fe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2b80      	cmp	r3, #128	; 0x80
 80054ea:	d919      	bls.n	8005520 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2ba0      	cmp	r3, #160	; 0xa0
 80054f0:	d902      	bls.n	80054f8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80054f2:	2302      	movs	r3, #2
 80054f4:	613b      	str	r3, [r7, #16]
 80054f6:	e013      	b.n	8005520 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80054f8:	2301      	movs	r3, #1
 80054fa:	613b      	str	r3, [r7, #16]
 80054fc:	e010      	b.n	8005520 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2b80      	cmp	r3, #128	; 0x80
 8005502:	d902      	bls.n	800550a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005504:	2303      	movs	r3, #3
 8005506:	613b      	str	r3, [r7, #16]
 8005508:	e00a      	b.n	8005520 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2b80      	cmp	r3, #128	; 0x80
 800550e:	d102      	bne.n	8005516 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005510:	2302      	movs	r3, #2
 8005512:	613b      	str	r3, [r7, #16]
 8005514:	e004      	b.n	8005520 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2b70      	cmp	r3, #112	; 0x70
 800551a:	d101      	bne.n	8005520 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800551c:	2301      	movs	r3, #1
 800551e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005520:	4b0b      	ldr	r3, [pc, #44]	; (8005550 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f023 0207 	bic.w	r2, r3, #7
 8005528:	4909      	ldr	r1, [pc, #36]	; (8005550 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	4313      	orrs	r3, r2
 800552e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005530:	4b07      	ldr	r3, [pc, #28]	; (8005550 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f003 0307 	and.w	r3, r3, #7
 8005538:	693a      	ldr	r2, [r7, #16]
 800553a:	429a      	cmp	r2, r3
 800553c:	d001      	beq.n	8005542 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e000      	b.n	8005544 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005542:	2300      	movs	r3, #0
}
 8005544:	4618      	mov	r0, r3
 8005546:	3718      	adds	r7, #24
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}
 800554c:	40021000 	.word	0x40021000
 8005550:	40022000 	.word	0x40022000

08005554 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b086      	sub	sp, #24
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800555c:	2300      	movs	r3, #0
 800555e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005560:	2300      	movs	r3, #0
 8005562:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800556c:	2b00      	cmp	r3, #0
 800556e:	d041      	beq.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005574:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005578:	d02a      	beq.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800557a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800557e:	d824      	bhi.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005580:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005584:	d008      	beq.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005586:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800558a:	d81e      	bhi.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x76>
 800558c:	2b00      	cmp	r3, #0
 800558e:	d00a      	beq.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005590:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005594:	d010      	beq.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005596:	e018      	b.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005598:	4b86      	ldr	r3, [pc, #536]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	4a85      	ldr	r2, [pc, #532]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800559e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055a2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80055a4:	e015      	b.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	3304      	adds	r3, #4
 80055aa:	2100      	movs	r1, #0
 80055ac:	4618      	mov	r0, r3
 80055ae:	f000 fabb 	bl	8005b28 <RCCEx_PLLSAI1_Config>
 80055b2:	4603      	mov	r3, r0
 80055b4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80055b6:	e00c      	b.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	3320      	adds	r3, #32
 80055bc:	2100      	movs	r1, #0
 80055be:	4618      	mov	r0, r3
 80055c0:	f000 fba6 	bl	8005d10 <RCCEx_PLLSAI2_Config>
 80055c4:	4603      	mov	r3, r0
 80055c6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80055c8:	e003      	b.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	74fb      	strb	r3, [r7, #19]
      break;
 80055ce:	e000      	b.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80055d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055d2:	7cfb      	ldrb	r3, [r7, #19]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d10b      	bne.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80055d8:	4b76      	ldr	r3, [pc, #472]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055de:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055e6:	4973      	ldr	r1, [pc, #460]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055e8:	4313      	orrs	r3, r2
 80055ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80055ee:	e001      	b.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055f0:	7cfb      	ldrb	r3, [r7, #19]
 80055f2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d041      	beq.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005604:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005608:	d02a      	beq.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800560a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800560e:	d824      	bhi.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005610:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005614:	d008      	beq.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005616:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800561a:	d81e      	bhi.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800561c:	2b00      	cmp	r3, #0
 800561e:	d00a      	beq.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005620:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005624:	d010      	beq.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005626:	e018      	b.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005628:	4b62      	ldr	r3, [pc, #392]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800562a:	68db      	ldr	r3, [r3, #12]
 800562c:	4a61      	ldr	r2, [pc, #388]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800562e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005632:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005634:	e015      	b.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	3304      	adds	r3, #4
 800563a:	2100      	movs	r1, #0
 800563c:	4618      	mov	r0, r3
 800563e:	f000 fa73 	bl	8005b28 <RCCEx_PLLSAI1_Config>
 8005642:	4603      	mov	r3, r0
 8005644:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005646:	e00c      	b.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	3320      	adds	r3, #32
 800564c:	2100      	movs	r1, #0
 800564e:	4618      	mov	r0, r3
 8005650:	f000 fb5e 	bl	8005d10 <RCCEx_PLLSAI2_Config>
 8005654:	4603      	mov	r3, r0
 8005656:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005658:	e003      	b.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	74fb      	strb	r3, [r7, #19]
      break;
 800565e:	e000      	b.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005660:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005662:	7cfb      	ldrb	r3, [r7, #19]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d10b      	bne.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005668:	4b52      	ldr	r3, [pc, #328]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800566a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800566e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005676:	494f      	ldr	r1, [pc, #316]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005678:	4313      	orrs	r3, r2
 800567a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800567e:	e001      	b.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005680:	7cfb      	ldrb	r3, [r7, #19]
 8005682:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800568c:	2b00      	cmp	r3, #0
 800568e:	f000 80a0 	beq.w	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005692:	2300      	movs	r3, #0
 8005694:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005696:	4b47      	ldr	r3, [pc, #284]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800569a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d101      	bne.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80056a2:	2301      	movs	r3, #1
 80056a4:	e000      	b.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80056a6:	2300      	movs	r3, #0
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d00d      	beq.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056ac:	4b41      	ldr	r3, [pc, #260]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056b0:	4a40      	ldr	r2, [pc, #256]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056b6:	6593      	str	r3, [r2, #88]	; 0x58
 80056b8:	4b3e      	ldr	r3, [pc, #248]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056c0:	60bb      	str	r3, [r7, #8]
 80056c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056c4:	2301      	movs	r3, #1
 80056c6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80056c8:	4b3b      	ldr	r3, [pc, #236]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a3a      	ldr	r2, [pc, #232]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80056ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056d2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80056d4:	f7fd f99a 	bl	8002a0c <HAL_GetTick>
 80056d8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80056da:	e009      	b.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056dc:	f7fd f996 	bl	8002a0c <HAL_GetTick>
 80056e0:	4602      	mov	r2, r0
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	1ad3      	subs	r3, r2, r3
 80056e6:	2b02      	cmp	r3, #2
 80056e8:	d902      	bls.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80056ea:	2303      	movs	r3, #3
 80056ec:	74fb      	strb	r3, [r7, #19]
        break;
 80056ee:	e005      	b.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80056f0:	4b31      	ldr	r3, [pc, #196]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d0ef      	beq.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80056fc:	7cfb      	ldrb	r3, [r7, #19]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d15c      	bne.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005702:	4b2c      	ldr	r3, [pc, #176]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005704:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005708:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800570c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d01f      	beq.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800571a:	697a      	ldr	r2, [r7, #20]
 800571c:	429a      	cmp	r2, r3
 800571e:	d019      	beq.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005720:	4b24      	ldr	r3, [pc, #144]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005726:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800572a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800572c:	4b21      	ldr	r3, [pc, #132]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800572e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005732:	4a20      	ldr	r2, [pc, #128]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005734:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005738:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800573c:	4b1d      	ldr	r3, [pc, #116]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800573e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005742:	4a1c      	ldr	r2, [pc, #112]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005744:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005748:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800574c:	4a19      	ldr	r2, [pc, #100]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	f003 0301 	and.w	r3, r3, #1
 800575a:	2b00      	cmp	r3, #0
 800575c:	d016      	beq.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800575e:	f7fd f955 	bl	8002a0c <HAL_GetTick>
 8005762:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005764:	e00b      	b.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005766:	f7fd f951 	bl	8002a0c <HAL_GetTick>
 800576a:	4602      	mov	r2, r0
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	1ad3      	subs	r3, r2, r3
 8005770:	f241 3288 	movw	r2, #5000	; 0x1388
 8005774:	4293      	cmp	r3, r2
 8005776:	d902      	bls.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005778:	2303      	movs	r3, #3
 800577a:	74fb      	strb	r3, [r7, #19]
            break;
 800577c:	e006      	b.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800577e:	4b0d      	ldr	r3, [pc, #52]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005780:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005784:	f003 0302 	and.w	r3, r3, #2
 8005788:	2b00      	cmp	r3, #0
 800578a:	d0ec      	beq.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800578c:	7cfb      	ldrb	r3, [r7, #19]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d10c      	bne.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005792:	4b08      	ldr	r3, [pc, #32]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005794:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005798:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057a2:	4904      	ldr	r1, [pc, #16]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057a4:	4313      	orrs	r3, r2
 80057a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80057aa:	e009      	b.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80057ac:	7cfb      	ldrb	r3, [r7, #19]
 80057ae:	74bb      	strb	r3, [r7, #18]
 80057b0:	e006      	b.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80057b2:	bf00      	nop
 80057b4:	40021000 	.word	0x40021000
 80057b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057bc:	7cfb      	ldrb	r3, [r7, #19]
 80057be:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80057c0:	7c7b      	ldrb	r3, [r7, #17]
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	d105      	bne.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057c6:	4b9e      	ldr	r3, [pc, #632]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057ca:	4a9d      	ldr	r2, [pc, #628]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057d0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f003 0301 	and.w	r3, r3, #1
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d00a      	beq.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80057de:	4b98      	ldr	r3, [pc, #608]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057e4:	f023 0203 	bic.w	r2, r3, #3
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ec:	4994      	ldr	r1, [pc, #592]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057ee:	4313      	orrs	r3, r2
 80057f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f003 0302 	and.w	r3, r3, #2
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d00a      	beq.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005800:	4b8f      	ldr	r3, [pc, #572]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005806:	f023 020c 	bic.w	r2, r3, #12
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800580e:	498c      	ldr	r1, [pc, #560]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005810:	4313      	orrs	r3, r2
 8005812:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f003 0304 	and.w	r3, r3, #4
 800581e:	2b00      	cmp	r3, #0
 8005820:	d00a      	beq.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005822:	4b87      	ldr	r3, [pc, #540]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005824:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005828:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005830:	4983      	ldr	r1, [pc, #524]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005832:	4313      	orrs	r3, r2
 8005834:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f003 0308 	and.w	r3, r3, #8
 8005840:	2b00      	cmp	r3, #0
 8005842:	d00a      	beq.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005844:	4b7e      	ldr	r3, [pc, #504]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800584a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005852:	497b      	ldr	r1, [pc, #492]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005854:	4313      	orrs	r3, r2
 8005856:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f003 0310 	and.w	r3, r3, #16
 8005862:	2b00      	cmp	r3, #0
 8005864:	d00a      	beq.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005866:	4b76      	ldr	r3, [pc, #472]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800586c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005874:	4972      	ldr	r1, [pc, #456]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005876:	4313      	orrs	r3, r2
 8005878:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f003 0320 	and.w	r3, r3, #32
 8005884:	2b00      	cmp	r3, #0
 8005886:	d00a      	beq.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005888:	4b6d      	ldr	r3, [pc, #436]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800588a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800588e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005896:	496a      	ldr	r1, [pc, #424]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005898:	4313      	orrs	r3, r2
 800589a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d00a      	beq.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80058aa:	4b65      	ldr	r3, [pc, #404]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058b0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058b8:	4961      	ldr	r1, [pc, #388]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058ba:	4313      	orrs	r3, r2
 80058bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d00a      	beq.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80058cc:	4b5c      	ldr	r3, [pc, #368]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058da:	4959      	ldr	r1, [pc, #356]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058dc:	4313      	orrs	r3, r2
 80058de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d00a      	beq.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80058ee:	4b54      	ldr	r3, [pc, #336]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058f4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058fc:	4950      	ldr	r1, [pc, #320]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058fe:	4313      	orrs	r3, r2
 8005900:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800590c:	2b00      	cmp	r3, #0
 800590e:	d00a      	beq.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005910:	4b4b      	ldr	r3, [pc, #300]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005916:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800591e:	4948      	ldr	r1, [pc, #288]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005920:	4313      	orrs	r3, r2
 8005922:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800592e:	2b00      	cmp	r3, #0
 8005930:	d00a      	beq.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005932:	4b43      	ldr	r3, [pc, #268]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005938:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005940:	493f      	ldr	r1, [pc, #252]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005942:	4313      	orrs	r3, r2
 8005944:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005950:	2b00      	cmp	r3, #0
 8005952:	d028      	beq.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005954:	4b3a      	ldr	r3, [pc, #232]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800595a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005962:	4937      	ldr	r1, [pc, #220]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005964:	4313      	orrs	r3, r2
 8005966:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800596e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005972:	d106      	bne.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005974:	4b32      	ldr	r3, [pc, #200]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	4a31      	ldr	r2, [pc, #196]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800597a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800597e:	60d3      	str	r3, [r2, #12]
 8005980:	e011      	b.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005986:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800598a:	d10c      	bne.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	3304      	adds	r3, #4
 8005990:	2101      	movs	r1, #1
 8005992:	4618      	mov	r0, r3
 8005994:	f000 f8c8 	bl	8005b28 <RCCEx_PLLSAI1_Config>
 8005998:	4603      	mov	r3, r0
 800599a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800599c:	7cfb      	ldrb	r3, [r7, #19]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d001      	beq.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80059a2:	7cfb      	ldrb	r3, [r7, #19]
 80059a4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d028      	beq.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80059b2:	4b23      	ldr	r3, [pc, #140]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059b8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059c0:	491f      	ldr	r1, [pc, #124]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059c2:	4313      	orrs	r3, r2
 80059c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80059d0:	d106      	bne.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059d2:	4b1b      	ldr	r3, [pc, #108]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	4a1a      	ldr	r2, [pc, #104]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80059dc:	60d3      	str	r3, [r2, #12]
 80059de:	e011      	b.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80059e8:	d10c      	bne.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	3304      	adds	r3, #4
 80059ee:	2101      	movs	r1, #1
 80059f0:	4618      	mov	r0, r3
 80059f2:	f000 f899 	bl	8005b28 <RCCEx_PLLSAI1_Config>
 80059f6:	4603      	mov	r3, r0
 80059f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80059fa:	7cfb      	ldrb	r3, [r7, #19]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d001      	beq.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005a00:	7cfb      	ldrb	r3, [r7, #19]
 8005a02:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d02b      	beq.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005a10:	4b0b      	ldr	r3, [pc, #44]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a16:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a1e:	4908      	ldr	r1, [pc, #32]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a20:	4313      	orrs	r3, r2
 8005a22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a2e:	d109      	bne.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a30:	4b03      	ldr	r3, [pc, #12]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	4a02      	ldr	r2, [pc, #8]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a3a:	60d3      	str	r3, [r2, #12]
 8005a3c:	e014      	b.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005a3e:	bf00      	nop
 8005a40:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a48:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a4c:	d10c      	bne.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	3304      	adds	r3, #4
 8005a52:	2101      	movs	r1, #1
 8005a54:	4618      	mov	r0, r3
 8005a56:	f000 f867 	bl	8005b28 <RCCEx_PLLSAI1_Config>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005a5e:	7cfb      	ldrb	r3, [r7, #19]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d001      	beq.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005a64:	7cfb      	ldrb	r3, [r7, #19]
 8005a66:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d02f      	beq.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005a74:	4b2b      	ldr	r3, [pc, #172]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a7a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a82:	4928      	ldr	r1, [pc, #160]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005a84:	4313      	orrs	r3, r2
 8005a86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a92:	d10d      	bne.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	3304      	adds	r3, #4
 8005a98:	2102      	movs	r1, #2
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f000 f844 	bl	8005b28 <RCCEx_PLLSAI1_Config>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005aa4:	7cfb      	ldrb	r3, [r7, #19]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d014      	beq.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005aaa:	7cfb      	ldrb	r3, [r7, #19]
 8005aac:	74bb      	strb	r3, [r7, #18]
 8005aae:	e011      	b.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ab4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ab8:	d10c      	bne.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	3320      	adds	r3, #32
 8005abe:	2102      	movs	r1, #2
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f000 f925 	bl	8005d10 <RCCEx_PLLSAI2_Config>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005aca:	7cfb      	ldrb	r3, [r7, #19]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d001      	beq.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005ad0:	7cfb      	ldrb	r3, [r7, #19]
 8005ad2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d00a      	beq.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005ae0:	4b10      	ldr	r3, [pc, #64]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ae6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005aee:	490d      	ldr	r1, [pc, #52]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005af0:	4313      	orrs	r3, r2
 8005af2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d00b      	beq.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005b02:	4b08      	ldr	r3, [pc, #32]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b08:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b12:	4904      	ldr	r1, [pc, #16]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005b14:	4313      	orrs	r3, r2
 8005b16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005b1a:	7cbb      	ldrb	r3, [r7, #18]
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3718      	adds	r7, #24
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}
 8005b24:	40021000 	.word	0x40021000

08005b28 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b084      	sub	sp, #16
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005b32:	2300      	movs	r3, #0
 8005b34:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005b36:	4b75      	ldr	r3, [pc, #468]	; (8005d0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b38:	68db      	ldr	r3, [r3, #12]
 8005b3a:	f003 0303 	and.w	r3, r3, #3
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d018      	beq.n	8005b74 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005b42:	4b72      	ldr	r3, [pc, #456]	; (8005d0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b44:	68db      	ldr	r3, [r3, #12]
 8005b46:	f003 0203 	and.w	r2, r3, #3
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	d10d      	bne.n	8005b6e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
       ||
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d009      	beq.n	8005b6e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005b5a:	4b6c      	ldr	r3, [pc, #432]	; (8005d0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b5c:	68db      	ldr	r3, [r3, #12]
 8005b5e:	091b      	lsrs	r3, r3, #4
 8005b60:	f003 0307 	and.w	r3, r3, #7
 8005b64:	1c5a      	adds	r2, r3, #1
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	685b      	ldr	r3, [r3, #4]
       ||
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	d047      	beq.n	8005bfe <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	73fb      	strb	r3, [r7, #15]
 8005b72:	e044      	b.n	8005bfe <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	2b03      	cmp	r3, #3
 8005b7a:	d018      	beq.n	8005bae <RCCEx_PLLSAI1_Config+0x86>
 8005b7c:	2b03      	cmp	r3, #3
 8005b7e:	d825      	bhi.n	8005bcc <RCCEx_PLLSAI1_Config+0xa4>
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d002      	beq.n	8005b8a <RCCEx_PLLSAI1_Config+0x62>
 8005b84:	2b02      	cmp	r3, #2
 8005b86:	d009      	beq.n	8005b9c <RCCEx_PLLSAI1_Config+0x74>
 8005b88:	e020      	b.n	8005bcc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005b8a:	4b60      	ldr	r3, [pc, #384]	; (8005d0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f003 0302 	and.w	r3, r3, #2
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d11d      	bne.n	8005bd2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b9a:	e01a      	b.n	8005bd2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005b9c:	4b5b      	ldr	r3, [pc, #364]	; (8005d0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d116      	bne.n	8005bd6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005bac:	e013      	b.n	8005bd6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005bae:	4b57      	ldr	r3, [pc, #348]	; (8005d0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d10f      	bne.n	8005bda <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005bba:	4b54      	ldr	r3, [pc, #336]	; (8005d0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d109      	bne.n	8005bda <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005bca:	e006      	b.n	8005bda <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	73fb      	strb	r3, [r7, #15]
      break;
 8005bd0:	e004      	b.n	8005bdc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005bd2:	bf00      	nop
 8005bd4:	e002      	b.n	8005bdc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005bd6:	bf00      	nop
 8005bd8:	e000      	b.n	8005bdc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005bda:	bf00      	nop
    }

    if(status == HAL_OK)
 8005bdc:	7bfb      	ldrb	r3, [r7, #15]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d10d      	bne.n	8005bfe <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005be2:	4b4a      	ldr	r3, [pc, #296]	; (8005d0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005be4:	68db      	ldr	r3, [r3, #12]
 8005be6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6819      	ldr	r1, [r3, #0]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	3b01      	subs	r3, #1
 8005bf4:	011b      	lsls	r3, r3, #4
 8005bf6:	430b      	orrs	r3, r1
 8005bf8:	4944      	ldr	r1, [pc, #272]	; (8005d0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005bfe:	7bfb      	ldrb	r3, [r7, #15]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d17d      	bne.n	8005d00 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005c04:	4b41      	ldr	r3, [pc, #260]	; (8005d0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a40      	ldr	r2, [pc, #256]	; (8005d0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c0a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005c0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c10:	f7fc fefc 	bl	8002a0c <HAL_GetTick>
 8005c14:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005c16:	e009      	b.n	8005c2c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005c18:	f7fc fef8 	bl	8002a0c <HAL_GetTick>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	1ad3      	subs	r3, r2, r3
 8005c22:	2b02      	cmp	r3, #2
 8005c24:	d902      	bls.n	8005c2c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005c26:	2303      	movs	r3, #3
 8005c28:	73fb      	strb	r3, [r7, #15]
        break;
 8005c2a:	e005      	b.n	8005c38 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005c2c:	4b37      	ldr	r3, [pc, #220]	; (8005d0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d1ef      	bne.n	8005c18 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005c38:	7bfb      	ldrb	r3, [r7, #15]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d160      	bne.n	8005d00 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d111      	bne.n	8005c68 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005c44:	4b31      	ldr	r3, [pc, #196]	; (8005d0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c46:	691b      	ldr	r3, [r3, #16]
 8005c48:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005c4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c50:	687a      	ldr	r2, [r7, #4]
 8005c52:	6892      	ldr	r2, [r2, #8]
 8005c54:	0211      	lsls	r1, r2, #8
 8005c56:	687a      	ldr	r2, [r7, #4]
 8005c58:	68d2      	ldr	r2, [r2, #12]
 8005c5a:	0912      	lsrs	r2, r2, #4
 8005c5c:	0452      	lsls	r2, r2, #17
 8005c5e:	430a      	orrs	r2, r1
 8005c60:	492a      	ldr	r1, [pc, #168]	; (8005d0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c62:	4313      	orrs	r3, r2
 8005c64:	610b      	str	r3, [r1, #16]
 8005c66:	e027      	b.n	8005cb8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	d112      	bne.n	8005c94 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005c6e:	4b27      	ldr	r3, [pc, #156]	; (8005d0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c70:	691b      	ldr	r3, [r3, #16]
 8005c72:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005c76:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	6892      	ldr	r2, [r2, #8]
 8005c7e:	0211      	lsls	r1, r2, #8
 8005c80:	687a      	ldr	r2, [r7, #4]
 8005c82:	6912      	ldr	r2, [r2, #16]
 8005c84:	0852      	lsrs	r2, r2, #1
 8005c86:	3a01      	subs	r2, #1
 8005c88:	0552      	lsls	r2, r2, #21
 8005c8a:	430a      	orrs	r2, r1
 8005c8c:	491f      	ldr	r1, [pc, #124]	; (8005d0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	610b      	str	r3, [r1, #16]
 8005c92:	e011      	b.n	8005cb8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005c94:	4b1d      	ldr	r3, [pc, #116]	; (8005d0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c96:	691b      	ldr	r3, [r3, #16]
 8005c98:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005c9c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005ca0:	687a      	ldr	r2, [r7, #4]
 8005ca2:	6892      	ldr	r2, [r2, #8]
 8005ca4:	0211      	lsls	r1, r2, #8
 8005ca6:	687a      	ldr	r2, [r7, #4]
 8005ca8:	6952      	ldr	r2, [r2, #20]
 8005caa:	0852      	lsrs	r2, r2, #1
 8005cac:	3a01      	subs	r2, #1
 8005cae:	0652      	lsls	r2, r2, #25
 8005cb0:	430a      	orrs	r2, r1
 8005cb2:	4916      	ldr	r1, [pc, #88]	; (8005d0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005cb8:	4b14      	ldr	r3, [pc, #80]	; (8005d0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a13      	ldr	r2, [pc, #76]	; (8005d0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005cbe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005cc2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cc4:	f7fc fea2 	bl	8002a0c <HAL_GetTick>
 8005cc8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005cca:	e009      	b.n	8005ce0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005ccc:	f7fc fe9e 	bl	8002a0c <HAL_GetTick>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	1ad3      	subs	r3, r2, r3
 8005cd6:	2b02      	cmp	r3, #2
 8005cd8:	d902      	bls.n	8005ce0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005cda:	2303      	movs	r3, #3
 8005cdc:	73fb      	strb	r3, [r7, #15]
          break;
 8005cde:	e005      	b.n	8005cec <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005ce0:	4b0a      	ldr	r3, [pc, #40]	; (8005d0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d0ef      	beq.n	8005ccc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005cec:	7bfb      	ldrb	r3, [r7, #15]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d106      	bne.n	8005d00 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005cf2:	4b06      	ldr	r3, [pc, #24]	; (8005d0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005cf4:	691a      	ldr	r2, [r3, #16]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	699b      	ldr	r3, [r3, #24]
 8005cfa:	4904      	ldr	r1, [pc, #16]	; (8005d0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3710      	adds	r7, #16
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}
 8005d0a:	bf00      	nop
 8005d0c:	40021000 	.word	0x40021000

08005d10 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b084      	sub	sp, #16
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005d1e:	4b6a      	ldr	r3, [pc, #424]	; (8005ec8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	f003 0303 	and.w	r3, r3, #3
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d018      	beq.n	8005d5c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005d2a:	4b67      	ldr	r3, [pc, #412]	; (8005ec8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d2c:	68db      	ldr	r3, [r3, #12]
 8005d2e:	f003 0203 	and.w	r2, r3, #3
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d10d      	bne.n	8005d56 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
       ||
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d009      	beq.n	8005d56 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005d42:	4b61      	ldr	r3, [pc, #388]	; (8005ec8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d44:	68db      	ldr	r3, [r3, #12]
 8005d46:	091b      	lsrs	r3, r3, #4
 8005d48:	f003 0307 	and.w	r3, r3, #7
 8005d4c:	1c5a      	adds	r2, r3, #1
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	685b      	ldr	r3, [r3, #4]
       ||
 8005d52:	429a      	cmp	r2, r3
 8005d54:	d047      	beq.n	8005de6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005d56:	2301      	movs	r3, #1
 8005d58:	73fb      	strb	r3, [r7, #15]
 8005d5a:	e044      	b.n	8005de6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	2b03      	cmp	r3, #3
 8005d62:	d018      	beq.n	8005d96 <RCCEx_PLLSAI2_Config+0x86>
 8005d64:	2b03      	cmp	r3, #3
 8005d66:	d825      	bhi.n	8005db4 <RCCEx_PLLSAI2_Config+0xa4>
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d002      	beq.n	8005d72 <RCCEx_PLLSAI2_Config+0x62>
 8005d6c:	2b02      	cmp	r3, #2
 8005d6e:	d009      	beq.n	8005d84 <RCCEx_PLLSAI2_Config+0x74>
 8005d70:	e020      	b.n	8005db4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005d72:	4b55      	ldr	r3, [pc, #340]	; (8005ec8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f003 0302 	and.w	r3, r3, #2
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d11d      	bne.n	8005dba <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d82:	e01a      	b.n	8005dba <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005d84:	4b50      	ldr	r3, [pc, #320]	; (8005ec8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d116      	bne.n	8005dbe <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005d90:	2301      	movs	r3, #1
 8005d92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d94:	e013      	b.n	8005dbe <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005d96:	4b4c      	ldr	r3, [pc, #304]	; (8005ec8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d10f      	bne.n	8005dc2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005da2:	4b49      	ldr	r3, [pc, #292]	; (8005ec8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d109      	bne.n	8005dc2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005dae:	2301      	movs	r3, #1
 8005db0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005db2:	e006      	b.n	8005dc2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005db4:	2301      	movs	r3, #1
 8005db6:	73fb      	strb	r3, [r7, #15]
      break;
 8005db8:	e004      	b.n	8005dc4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005dba:	bf00      	nop
 8005dbc:	e002      	b.n	8005dc4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005dbe:	bf00      	nop
 8005dc0:	e000      	b.n	8005dc4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005dc2:	bf00      	nop
    }

    if(status == HAL_OK)
 8005dc4:	7bfb      	ldrb	r3, [r7, #15]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d10d      	bne.n	8005de6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005dca:	4b3f      	ldr	r3, [pc, #252]	; (8005ec8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005dcc:	68db      	ldr	r3, [r3, #12]
 8005dce:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6819      	ldr	r1, [r3, #0]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	3b01      	subs	r3, #1
 8005ddc:	011b      	lsls	r3, r3, #4
 8005dde:	430b      	orrs	r3, r1
 8005de0:	4939      	ldr	r1, [pc, #228]	; (8005ec8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005de2:	4313      	orrs	r3, r2
 8005de4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005de6:	7bfb      	ldrb	r3, [r7, #15]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d167      	bne.n	8005ebc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005dec:	4b36      	ldr	r3, [pc, #216]	; (8005ec8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a35      	ldr	r2, [pc, #212]	; (8005ec8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005df2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005df6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005df8:	f7fc fe08 	bl	8002a0c <HAL_GetTick>
 8005dfc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005dfe:	e009      	b.n	8005e14 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005e00:	f7fc fe04 	bl	8002a0c <HAL_GetTick>
 8005e04:	4602      	mov	r2, r0
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	1ad3      	subs	r3, r2, r3
 8005e0a:	2b02      	cmp	r3, #2
 8005e0c:	d902      	bls.n	8005e14 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005e0e:	2303      	movs	r3, #3
 8005e10:	73fb      	strb	r3, [r7, #15]
        break;
 8005e12:	e005      	b.n	8005e20 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005e14:	4b2c      	ldr	r3, [pc, #176]	; (8005ec8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d1ef      	bne.n	8005e00 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005e20:	7bfb      	ldrb	r3, [r7, #15]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d14a      	bne.n	8005ebc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d111      	bne.n	8005e50 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005e2c:	4b26      	ldr	r3, [pc, #152]	; (8005ec8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e2e:	695b      	ldr	r3, [r3, #20]
 8005e30:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005e34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e38:	687a      	ldr	r2, [r7, #4]
 8005e3a:	6892      	ldr	r2, [r2, #8]
 8005e3c:	0211      	lsls	r1, r2, #8
 8005e3e:	687a      	ldr	r2, [r7, #4]
 8005e40:	68d2      	ldr	r2, [r2, #12]
 8005e42:	0912      	lsrs	r2, r2, #4
 8005e44:	0452      	lsls	r2, r2, #17
 8005e46:	430a      	orrs	r2, r1
 8005e48:	491f      	ldr	r1, [pc, #124]	; (8005ec8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	614b      	str	r3, [r1, #20]
 8005e4e:	e011      	b.n	8005e74 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005e50:	4b1d      	ldr	r3, [pc, #116]	; (8005ec8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e52:	695b      	ldr	r3, [r3, #20]
 8005e54:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005e58:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005e5c:	687a      	ldr	r2, [r7, #4]
 8005e5e:	6892      	ldr	r2, [r2, #8]
 8005e60:	0211      	lsls	r1, r2, #8
 8005e62:	687a      	ldr	r2, [r7, #4]
 8005e64:	6912      	ldr	r2, [r2, #16]
 8005e66:	0852      	lsrs	r2, r2, #1
 8005e68:	3a01      	subs	r2, #1
 8005e6a:	0652      	lsls	r2, r2, #25
 8005e6c:	430a      	orrs	r2, r1
 8005e6e:	4916      	ldr	r1, [pc, #88]	; (8005ec8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e70:	4313      	orrs	r3, r2
 8005e72:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005e74:	4b14      	ldr	r3, [pc, #80]	; (8005ec8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a13      	ldr	r2, [pc, #76]	; (8005ec8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e7e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e80:	f7fc fdc4 	bl	8002a0c <HAL_GetTick>
 8005e84:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005e86:	e009      	b.n	8005e9c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005e88:	f7fc fdc0 	bl	8002a0c <HAL_GetTick>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	1ad3      	subs	r3, r2, r3
 8005e92:	2b02      	cmp	r3, #2
 8005e94:	d902      	bls.n	8005e9c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005e96:	2303      	movs	r3, #3
 8005e98:	73fb      	strb	r3, [r7, #15]
          break;
 8005e9a:	e005      	b.n	8005ea8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005e9c:	4b0a      	ldr	r3, [pc, #40]	; (8005ec8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d0ef      	beq.n	8005e88 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005ea8:	7bfb      	ldrb	r3, [r7, #15]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d106      	bne.n	8005ebc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005eae:	4b06      	ldr	r3, [pc, #24]	; (8005ec8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005eb0:	695a      	ldr	r2, [r3, #20]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	695b      	ldr	r3, [r3, #20]
 8005eb6:	4904      	ldr	r1, [pc, #16]	; (8005ec8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3710      	adds	r7, #16
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}
 8005ec6:	bf00      	nop
 8005ec8:	40021000 	.word	0x40021000

08005ecc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b084      	sub	sp, #16
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d06c      	beq.n	8005fb8 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005ee4:	b2db      	uxtb	r3, r3
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d106      	bne.n	8005ef8 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2200      	movs	r2, #0
 8005eee:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f7fc f9fa 	bl	80022ec <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2202      	movs	r2, #2
 8005efc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	22ca      	movs	r2, #202	; 0xca
 8005f06:	625a      	str	r2, [r3, #36]	; 0x24
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	2253      	movs	r2, #83	; 0x53
 8005f0e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f000 fbd5 	bl	80066c0 <RTC_EnterInitMode>
 8005f16:	4603      	mov	r3, r0
 8005f18:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8005f1a:	7bfb      	ldrb	r3, [r7, #15]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d14b      	bne.n	8005fb8 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	687a      	ldr	r2, [r7, #4]
 8005f28:	6812      	ldr	r2, [r2, #0]
 8005f2a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005f2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f32:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	6899      	ldr	r1, [r3, #8]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	685a      	ldr	r2, [r3, #4]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	691b      	ldr	r3, [r3, #16]
 8005f42:	431a      	orrs	r2, r3
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	699b      	ldr	r3, [r3, #24]
 8005f48:	431a      	orrs	r2, r3
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	430a      	orrs	r2, r1
 8005f50:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	68d2      	ldr	r2, [r2, #12]
 8005f5a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	6919      	ldr	r1, [r3, #16]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	041a      	lsls	r2, r3, #16
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	430a      	orrs	r2, r1
 8005f6e:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f000 fbd9 	bl	8006728 <RTC_ExitInitMode>
 8005f76:	4603      	mov	r3, r0
 8005f78:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8005f7a:	7bfb      	ldrb	r3, [r7, #15]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d11b      	bne.n	8005fb8 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f022 0203 	bic.w	r2, r2, #3
 8005f8e:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	69da      	ldr	r2, [r3, #28]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	695b      	ldr	r3, [r3, #20]
 8005f9e:	431a      	orrs	r2, r3
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	430a      	orrs	r2, r1
 8005fa6:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	22ff      	movs	r2, #255	; 0xff
 8005fae:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8005fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3710      	adds	r7, #16
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}

08005fc2 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005fc2:	b590      	push	{r4, r7, lr}
 8005fc4:	b087      	sub	sp, #28
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	60f8      	str	r0, [r7, #12]
 8005fca:	60b9      	str	r1, [r7, #8]
 8005fcc:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	d101      	bne.n	8005fdc <HAL_RTC_SetTime+0x1a>
 8005fd8:	2302      	movs	r3, #2
 8005fda:	e08b      	b.n	80060f4 <HAL_RTC_SetTime+0x132>
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2202      	movs	r2, #2
 8005fe8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	22ca      	movs	r2, #202	; 0xca
 8005ff2:	625a      	str	r2, [r3, #36]	; 0x24
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	2253      	movs	r2, #83	; 0x53
 8005ffa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005ffc:	68f8      	ldr	r0, [r7, #12]
 8005ffe:	f000 fb5f 	bl	80066c0 <RTC_EnterInitMode>
 8006002:	4603      	mov	r3, r0
 8006004:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8006006:	7cfb      	ldrb	r3, [r7, #19]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d163      	bne.n	80060d4 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d126      	bne.n	8006060 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800601c:	2b00      	cmp	r3, #0
 800601e:	d102      	bne.n	8006026 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	2200      	movs	r2, #0
 8006024:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	781b      	ldrb	r3, [r3, #0]
 800602a:	4618      	mov	r0, r3
 800602c:	f000 fbba 	bl	80067a4 <RTC_ByteToBcd2>
 8006030:	4603      	mov	r3, r0
 8006032:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	785b      	ldrb	r3, [r3, #1]
 8006038:	4618      	mov	r0, r3
 800603a:	f000 fbb3 	bl	80067a4 <RTC_ByteToBcd2>
 800603e:	4603      	mov	r3, r0
 8006040:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006042:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	789b      	ldrb	r3, [r3, #2]
 8006048:	4618      	mov	r0, r3
 800604a:	f000 fbab 	bl	80067a4 <RTC_ByteToBcd2>
 800604e:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006050:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	78db      	ldrb	r3, [r3, #3]
 8006058:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800605a:	4313      	orrs	r3, r2
 800605c:	617b      	str	r3, [r7, #20]
 800605e:	e018      	b.n	8006092 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800606a:	2b00      	cmp	r3, #0
 800606c:	d102      	bne.n	8006074 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	2200      	movs	r2, #0
 8006072:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	785b      	ldrb	r3, [r3, #1]
 800607e:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006080:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006082:	68ba      	ldr	r2, [r7, #8]
 8006084:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006086:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	78db      	ldrb	r3, [r3, #3]
 800608c:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800608e:	4313      	orrs	r3, r2
 8006090:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800609c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80060a0:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	689a      	ldr	r2, [r3, #8]
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80060b0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	6899      	ldr	r1, [r3, #8]
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	68da      	ldr	r2, [r3, #12]
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	691b      	ldr	r3, [r3, #16]
 80060c0:	431a      	orrs	r2, r3
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	430a      	orrs	r2, r1
 80060c8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80060ca:	68f8      	ldr	r0, [r7, #12]
 80060cc:	f000 fb2c 	bl	8006728 <RTC_ExitInitMode>
 80060d0:	4603      	mov	r3, r0
 80060d2:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	22ff      	movs	r2, #255	; 0xff
 80060da:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80060dc:	7cfb      	ldrb	r3, [r7, #19]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d103      	bne.n	80060ea <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	2201      	movs	r2, #1
 80060e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2200      	movs	r2, #0
 80060ee:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80060f2:	7cfb      	ldrb	r3, [r7, #19]
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	371c      	adds	r7, #28
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd90      	pop	{r4, r7, pc}

080060fc <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b086      	sub	sp, #24
 8006100:	af00      	add	r7, sp, #0
 8006102:	60f8      	str	r0, [r7, #12]
 8006104:	60b9      	str	r1, [r7, #8]
 8006106:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	691b      	ldr	r3, [r3, #16]
 8006118:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800612a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800612e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	0c1b      	lsrs	r3, r3, #16
 8006134:	b2db      	uxtb	r3, r3
 8006136:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800613a:	b2da      	uxtb	r2, r3
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	0a1b      	lsrs	r3, r3, #8
 8006144:	b2db      	uxtb	r3, r3
 8006146:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800614a:	b2da      	uxtb	r2, r3
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	b2db      	uxtb	r3, r3
 8006154:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006158:	b2da      	uxtb	r2, r3
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	0d9b      	lsrs	r3, r3, #22
 8006162:	b2db      	uxtb	r3, r3
 8006164:	f003 0301 	and.w	r3, r3, #1
 8006168:	b2da      	uxtb	r2, r3
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d11a      	bne.n	80061aa <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	4618      	mov	r0, r3
 800617a:	f000 fb33 	bl	80067e4 <RTC_Bcd2ToByte>
 800617e:	4603      	mov	r3, r0
 8006180:	461a      	mov	r2, r3
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	785b      	ldrb	r3, [r3, #1]
 800618a:	4618      	mov	r0, r3
 800618c:	f000 fb2a 	bl	80067e4 <RTC_Bcd2ToByte>
 8006190:	4603      	mov	r3, r0
 8006192:	461a      	mov	r2, r3
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	789b      	ldrb	r3, [r3, #2]
 800619c:	4618      	mov	r0, r3
 800619e:	f000 fb21 	bl	80067e4 <RTC_Bcd2ToByte>
 80061a2:	4603      	mov	r3, r0
 80061a4:	461a      	mov	r2, r3
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80061aa:	2300      	movs	r3, #0
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3718      	adds	r7, #24
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}

080061b4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80061b4:	b590      	push	{r4, r7, lr}
 80061b6:	b087      	sub	sp, #28
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	60f8      	str	r0, [r7, #12]
 80061bc:	60b9      	str	r1, [r7, #8]
 80061be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d101      	bne.n	80061ce <HAL_RTC_SetDate+0x1a>
 80061ca:	2302      	movs	r3, #2
 80061cc:	e075      	b.n	80062ba <HAL_RTC_SetDate+0x106>
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2201      	movs	r2, #1
 80061d2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2202      	movs	r2, #2
 80061da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d10e      	bne.n	8006202 <HAL_RTC_SetDate+0x4e>
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	785b      	ldrb	r3, [r3, #1]
 80061e8:	f003 0310 	and.w	r3, r3, #16
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d008      	beq.n	8006202 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	785b      	ldrb	r3, [r3, #1]
 80061f4:	f023 0310 	bic.w	r3, r3, #16
 80061f8:	b2db      	uxtb	r3, r3
 80061fa:	330a      	adds	r3, #10
 80061fc:	b2da      	uxtb	r2, r3
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d11c      	bne.n	8006242 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	78db      	ldrb	r3, [r3, #3]
 800620c:	4618      	mov	r0, r3
 800620e:	f000 fac9 	bl	80067a4 <RTC_ByteToBcd2>
 8006212:	4603      	mov	r3, r0
 8006214:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	785b      	ldrb	r3, [r3, #1]
 800621a:	4618      	mov	r0, r3
 800621c:	f000 fac2 	bl	80067a4 <RTC_ByteToBcd2>
 8006220:	4603      	mov	r3, r0
 8006222:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006224:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	789b      	ldrb	r3, [r3, #2]
 800622a:	4618      	mov	r0, r3
 800622c:	f000 faba 	bl	80067a4 <RTC_ByteToBcd2>
 8006230:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006232:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	781b      	ldrb	r3, [r3, #0]
 800623a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800623c:	4313      	orrs	r3, r2
 800623e:	617b      	str	r3, [r7, #20]
 8006240:	e00e      	b.n	8006260 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	78db      	ldrb	r3, [r3, #3]
 8006246:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	785b      	ldrb	r3, [r3, #1]
 800624c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800624e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8006250:	68ba      	ldr	r2, [r7, #8]
 8006252:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8006254:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	781b      	ldrb	r3, [r3, #0]
 800625a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800625c:	4313      	orrs	r3, r2
 800625e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	22ca      	movs	r2, #202	; 0xca
 8006266:	625a      	str	r2, [r3, #36]	; 0x24
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	2253      	movs	r2, #83	; 0x53
 800626e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006270:	68f8      	ldr	r0, [r7, #12]
 8006272:	f000 fa25 	bl	80066c0 <RTC_EnterInitMode>
 8006276:	4603      	mov	r3, r0
 8006278:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800627a:	7cfb      	ldrb	r3, [r7, #19]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d10c      	bne.n	800629a <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681a      	ldr	r2, [r3, #0]
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800628a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800628e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006290:	68f8      	ldr	r0, [r7, #12]
 8006292:	f000 fa49 	bl	8006728 <RTC_ExitInitMode>
 8006296:	4603      	mov	r3, r0
 8006298:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	22ff      	movs	r2, #255	; 0xff
 80062a0:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80062a2:	7cfb      	ldrb	r3, [r7, #19]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d103      	bne.n	80062b0 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2201      	movs	r2, #1
 80062ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2200      	movs	r2, #0
 80062b4:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80062b8:	7cfb      	ldrb	r3, [r7, #19]
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	371c      	adds	r7, #28
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd90      	pop	{r4, r7, pc}

080062c2 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80062c2:	b580      	push	{r7, lr}
 80062c4:	b086      	sub	sp, #24
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	60f8      	str	r0, [r7, #12]
 80062ca:	60b9      	str	r1, [r7, #8]
 80062cc:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80062d8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80062dc:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	0c1b      	lsrs	r3, r3, #16
 80062e2:	b2da      	uxtb	r2, r3
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	0a1b      	lsrs	r3, r3, #8
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	f003 031f 	and.w	r3, r3, #31
 80062f2:	b2da      	uxtb	r2, r3
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	b2db      	uxtb	r3, r3
 80062fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006300:	b2da      	uxtb	r2, r3
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	0b5b      	lsrs	r3, r3, #13
 800630a:	b2db      	uxtb	r3, r3
 800630c:	f003 0307 	and.w	r3, r3, #7
 8006310:	b2da      	uxtb	r2, r3
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d11a      	bne.n	8006352 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	78db      	ldrb	r3, [r3, #3]
 8006320:	4618      	mov	r0, r3
 8006322:	f000 fa5f 	bl	80067e4 <RTC_Bcd2ToByte>
 8006326:	4603      	mov	r3, r0
 8006328:	461a      	mov	r2, r3
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	785b      	ldrb	r3, [r3, #1]
 8006332:	4618      	mov	r0, r3
 8006334:	f000 fa56 	bl	80067e4 <RTC_Bcd2ToByte>
 8006338:	4603      	mov	r3, r0
 800633a:	461a      	mov	r2, r3
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	789b      	ldrb	r3, [r3, #2]
 8006344:	4618      	mov	r0, r3
 8006346:	f000 fa4d 	bl	80067e4 <RTC_Bcd2ToByte>
 800634a:	4603      	mov	r3, r0
 800634c:	461a      	mov	r2, r3
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006352:	2300      	movs	r3, #0
}
 8006354:	4618      	mov	r0, r3
 8006356:	3718      	adds	r7, #24
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}

0800635c <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800635c:	b590      	push	{r4, r7, lr}
 800635e:	b089      	sub	sp, #36	; 0x24
 8006360:	af00      	add	r7, sp, #0
 8006362:	60f8      	str	r0, [r7, #12]
 8006364:	60b9      	str	r1, [r7, #8]
 8006366:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800636e:	2b01      	cmp	r3, #1
 8006370:	d101      	bne.n	8006376 <HAL_RTC_SetAlarm_IT+0x1a>
 8006372:	2302      	movs	r3, #2
 8006374:	e127      	b.n	80065c6 <HAL_RTC_SetAlarm_IT+0x26a>
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2201      	movs	r2, #1
 800637a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2202      	movs	r2, #2
 8006382:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d137      	bne.n	80063fc <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006396:	2b00      	cmp	r3, #0
 8006398:	d102      	bne.n	80063a0 <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	2200      	movs	r2, #0
 800639e:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	781b      	ldrb	r3, [r3, #0]
 80063a4:	4618      	mov	r0, r3
 80063a6:	f000 f9fd 	bl	80067a4 <RTC_ByteToBcd2>
 80063aa:	4603      	mov	r3, r0
 80063ac:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	785b      	ldrb	r3, [r3, #1]
 80063b2:	4618      	mov	r0, r3
 80063b4:	f000 f9f6 	bl	80067a4 <RTC_ByteToBcd2>
 80063b8:	4603      	mov	r3, r0
 80063ba:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80063bc:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	789b      	ldrb	r3, [r3, #2]
 80063c2:	4618      	mov	r0, r3
 80063c4:	f000 f9ee 	bl	80067a4 <RTC_ByteToBcd2>
 80063c8:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80063ca:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	78db      	ldrb	r3, [r3, #3]
 80063d2:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80063d4:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80063de:	4618      	mov	r0, r3
 80063e0:	f000 f9e0 	bl	80067a4 <RTC_ByteToBcd2>
 80063e4:	4603      	mov	r3, r0
 80063e6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80063e8:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80063f0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80063f6:	4313      	orrs	r3, r2
 80063f8:	61fb      	str	r3, [r7, #28]
 80063fa:	e023      	b.n	8006444 <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006406:	2b00      	cmp	r3, #0
 8006408:	d102      	bne.n	8006410 <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	2200      	movs	r2, #0
 800640e:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	781b      	ldrb	r3, [r3, #0]
 8006414:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	785b      	ldrb	r3, [r3, #1]
 800641a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800641c:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800641e:	68ba      	ldr	r2, [r7, #8]
 8006420:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006422:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	78db      	ldrb	r3, [r3, #3]
 8006428:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800642a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006432:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006434:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800643a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006440:	4313      	orrs	r3, r2
 8006442:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	685a      	ldr	r2, [r3, #4]
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	69db      	ldr	r3, [r3, #28]
 800644c:	4313      	orrs	r3, r2
 800644e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	22ca      	movs	r2, #202	; 0xca
 8006456:	625a      	str	r2, [r3, #36]	; 0x24
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	2253      	movs	r2, #83	; 0x53
 800645e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006464:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006468:	d14a      	bne.n	8006500 <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	689a      	ldr	r2, [r3, #8]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006478:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	68db      	ldr	r3, [r3, #12]
 8006480:	b2da      	uxtb	r2, r3
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800648a:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 800648c:	f7fc fabe 	bl	8002a0c <HAL_GetTick>
 8006490:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8006492:	e015      	b.n	80064c0 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006494:	f7fc faba 	bl	8002a0c <HAL_GetTick>
 8006498:	4602      	mov	r2, r0
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	1ad3      	subs	r3, r2, r3
 800649e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80064a2:	d90d      	bls.n	80064c0 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	22ff      	movs	r2, #255	; 0xff
 80064aa:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2203      	movs	r2, #3
 80064b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2200      	movs	r2, #0
 80064b8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80064bc:	2303      	movs	r3, #3
 80064be:	e082      	b.n	80065c6 <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	68db      	ldr	r3, [r3, #12]
 80064c6:	f003 0301 	and.w	r3, r3, #1
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d0e2      	beq.n	8006494 <HAL_RTC_SetAlarm_IT+0x138>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	69fa      	ldr	r2, [r7, #28]
 80064d4:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	69ba      	ldr	r2, [r7, #24]
 80064dc:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	689a      	ldr	r2, [r3, #8]
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80064ec:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	689a      	ldr	r2, [r3, #8]
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80064fc:	609a      	str	r2, [r3, #8]
 80064fe:	e049      	b.n	8006594 <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	689a      	ldr	r2, [r3, #8]
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800650e:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	68db      	ldr	r3, [r3, #12]
 8006516:	b2da      	uxtb	r2, r3
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f462 7220 	orn	r2, r2, #640	; 0x280
 8006520:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 8006522:	f7fc fa73 	bl	8002a0c <HAL_GetTick>
 8006526:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8006528:	e015      	b.n	8006556 <HAL_RTC_SetAlarm_IT+0x1fa>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800652a:	f7fc fa6f 	bl	8002a0c <HAL_GetTick>
 800652e:	4602      	mov	r2, r0
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	1ad3      	subs	r3, r2, r3
 8006534:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006538:	d90d      	bls.n	8006556 <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	22ff      	movs	r2, #255	; 0xff
 8006540:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2203      	movs	r2, #3
 8006546:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2200      	movs	r2, #0
 800654e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8006552:	2303      	movs	r3, #3
 8006554:	e037      	b.n	80065c6 <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	68db      	ldr	r3, [r3, #12]
 800655c:	f003 0302 	and.w	r3, r3, #2
 8006560:	2b00      	cmp	r3, #0
 8006562:	d0e2      	beq.n	800652a <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	69fa      	ldr	r2, [r7, #28]
 800656a:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	69ba      	ldr	r2, [r7, #24]
 8006572:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	689a      	ldr	r2, [r3, #8]
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006582:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	689a      	ldr	r2, [r3, #8]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006592:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8006594:	4b0e      	ldr	r3, [pc, #56]	; (80065d0 <HAL_RTC_SetAlarm_IT+0x274>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a0d      	ldr	r2, [pc, #52]	; (80065d0 <HAL_RTC_SetAlarm_IT+0x274>)
 800659a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800659e:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80065a0:	4b0b      	ldr	r3, [pc, #44]	; (80065d0 <HAL_RTC_SetAlarm_IT+0x274>)
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	4a0a      	ldr	r2, [pc, #40]	; (80065d0 <HAL_RTC_SetAlarm_IT+0x274>)
 80065a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80065aa:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	22ff      	movs	r2, #255	; 0xff
 80065b2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2201      	movs	r2, #1
 80065b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2200      	movs	r2, #0
 80065c0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80065c4:	2300      	movs	r3, #0
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3724      	adds	r7, #36	; 0x24
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd90      	pop	{r4, r7, pc}
 80065ce:	bf00      	nop
 80065d0:	40010400 	.word	0x40010400

080065d4 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b082      	sub	sp, #8
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80065dc:	4b1f      	ldr	r3, [pc, #124]	; (800665c <HAL_RTC_AlarmIRQHandler+0x88>)
 80065de:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80065e2:	615a      	str	r2, [r3, #20]
  }

#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d012      	beq.n	8006618 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	68db      	ldr	r3, [r3, #12]
 80065f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d00b      	beq.n	8006618 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	68db      	ldr	r3, [r3, #12]
 8006606:	b2da      	uxtb	r2, r3
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8006610:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f000 f824 	bl	8006660 <HAL_RTC_AlarmAEventCallback>
#endif
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006622:	2b00      	cmp	r3, #0
 8006624:	d012      	beq.n	800664c <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	68db      	ldr	r3, [r3, #12]
 800662c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006630:	2b00      	cmp	r3, #0
 8006632:	d00b      	beq.n	800664c <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	68db      	ldr	r3, [r3, #12]
 800663a:	b2da      	uxtb	r2, r3
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f462 7220 	orn	r2, r2, #640	; 0x280
 8006644:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f000 f8e6 	bl	8006818 <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2201      	movs	r2, #1
 8006650:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8006654:	bf00      	nop
 8006656:	3708      	adds	r7, #8
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}
 800665c:	40010400 	.word	0x40010400

08006660 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006660:	b480      	push	{r7}
 8006662:	b083      	sub	sp, #12
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8006668:	bf00      	nop
 800666a:	370c      	adds	r7, #12
 800666c:	46bd      	mov	sp, r7
 800666e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006672:	4770      	bx	lr

08006674 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b084      	sub	sp, #16
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	68da      	ldr	r2, [r3, #12]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800668a:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800668c:	f7fc f9be 	bl	8002a0c <HAL_GetTick>
 8006690:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006692:	e009      	b.n	80066a8 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006694:	f7fc f9ba 	bl	8002a0c <HAL_GetTick>
 8006698:	4602      	mov	r2, r0
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	1ad3      	subs	r3, r2, r3
 800669e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80066a2:	d901      	bls.n	80066a8 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80066a4:	2303      	movs	r3, #3
 80066a6:	e007      	b.n	80066b8 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	68db      	ldr	r3, [r3, #12]
 80066ae:	f003 0320 	and.w	r3, r3, #32
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d0ee      	beq.n	8006694 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80066b6:	2300      	movs	r3, #0
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3710      	adds	r7, #16
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}

080066c0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b084      	sub	sp, #16
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80066c8:	2300      	movs	r3, #0
 80066ca:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	68db      	ldr	r3, [r3, #12]
 80066d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d120      	bne.n	800671c <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80066e2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80066e4:	f7fc f992 	bl	8002a0c <HAL_GetTick>
 80066e8:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80066ea:	e00d      	b.n	8006708 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80066ec:	f7fc f98e 	bl	8002a0c <HAL_GetTick>
 80066f0:	4602      	mov	r2, r0
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	1ad3      	subs	r3, r2, r3
 80066f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80066fa:	d905      	bls.n	8006708 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80066fc:	2303      	movs	r3, #3
 80066fe:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2203      	movs	r2, #3
 8006704:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	68db      	ldr	r3, [r3, #12]
 800670e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006712:	2b00      	cmp	r3, #0
 8006714:	d102      	bne.n	800671c <RTC_EnterInitMode+0x5c>
 8006716:	7bfb      	ldrb	r3, [r7, #15]
 8006718:	2b03      	cmp	r3, #3
 800671a:	d1e7      	bne.n	80066ec <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800671c:	7bfb      	ldrb	r3, [r7, #15]
}
 800671e:	4618      	mov	r0, r3
 8006720:	3710      	adds	r7, #16
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}
	...

08006728 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b084      	sub	sp, #16
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006730:	2300      	movs	r3, #0
 8006732:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8006734:	4b1a      	ldr	r3, [pc, #104]	; (80067a0 <RTC_ExitInitMode+0x78>)
 8006736:	68db      	ldr	r3, [r3, #12]
 8006738:	4a19      	ldr	r2, [pc, #100]	; (80067a0 <RTC_ExitInitMode+0x78>)
 800673a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800673e:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006740:	4b17      	ldr	r3, [pc, #92]	; (80067a0 <RTC_ExitInitMode+0x78>)
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	f003 0320 	and.w	r3, r3, #32
 8006748:	2b00      	cmp	r3, #0
 800674a:	d10c      	bne.n	8006766 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f7ff ff91 	bl	8006674 <HAL_RTC_WaitForSynchro>
 8006752:	4603      	mov	r3, r0
 8006754:	2b00      	cmp	r3, #0
 8006756:	d01e      	beq.n	8006796 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2203      	movs	r2, #3
 800675c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8006760:	2303      	movs	r3, #3
 8006762:	73fb      	strb	r3, [r7, #15]
 8006764:	e017      	b.n	8006796 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006766:	4b0e      	ldr	r3, [pc, #56]	; (80067a0 <RTC_ExitInitMode+0x78>)
 8006768:	689b      	ldr	r3, [r3, #8]
 800676a:	4a0d      	ldr	r2, [pc, #52]	; (80067a0 <RTC_ExitInitMode+0x78>)
 800676c:	f023 0320 	bic.w	r3, r3, #32
 8006770:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f7ff ff7e 	bl	8006674 <HAL_RTC_WaitForSynchro>
 8006778:	4603      	mov	r3, r0
 800677a:	2b00      	cmp	r3, #0
 800677c:	d005      	beq.n	800678a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2203      	movs	r2, #3
 8006782:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8006786:	2303      	movs	r3, #3
 8006788:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800678a:	4b05      	ldr	r3, [pc, #20]	; (80067a0 <RTC_ExitInitMode+0x78>)
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	4a04      	ldr	r2, [pc, #16]	; (80067a0 <RTC_ExitInitMode+0x78>)
 8006790:	f043 0320 	orr.w	r3, r3, #32
 8006794:	6093      	str	r3, [r2, #8]
  }

  return status;
 8006796:	7bfb      	ldrb	r3, [r7, #15]
}
 8006798:	4618      	mov	r0, r3
 800679a:	3710      	adds	r7, #16
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}
 80067a0:	40002800 	.word	0x40002800

080067a4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b085      	sub	sp, #20
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	4603      	mov	r3, r0
 80067ac:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80067ae:	2300      	movs	r3, #0
 80067b0:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 80067b2:	79fb      	ldrb	r3, [r7, #7]
 80067b4:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 80067b6:	e005      	b.n	80067c4 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	3301      	adds	r3, #1
 80067bc:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 80067be:	7afb      	ldrb	r3, [r7, #11]
 80067c0:	3b0a      	subs	r3, #10
 80067c2:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 80067c4:	7afb      	ldrb	r3, [r7, #11]
 80067c6:	2b09      	cmp	r3, #9
 80067c8:	d8f6      	bhi.n	80067b8 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	b2db      	uxtb	r3, r3
 80067ce:	011b      	lsls	r3, r3, #4
 80067d0:	b2da      	uxtb	r2, r3
 80067d2:	7afb      	ldrb	r3, [r7, #11]
 80067d4:	4313      	orrs	r3, r2
 80067d6:	b2db      	uxtb	r3, r3
}
 80067d8:	4618      	mov	r0, r3
 80067da:	3714      	adds	r7, #20
 80067dc:	46bd      	mov	sp, r7
 80067de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e2:	4770      	bx	lr

080067e4 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80067e4:	b480      	push	{r7}
 80067e6:	b085      	sub	sp, #20
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	4603      	mov	r3, r0
 80067ec:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 80067ee:	79fb      	ldrb	r3, [r7, #7]
 80067f0:	091b      	lsrs	r3, r3, #4
 80067f2:	b2db      	uxtb	r3, r3
 80067f4:	461a      	mov	r2, r3
 80067f6:	0092      	lsls	r2, r2, #2
 80067f8:	4413      	add	r3, r2
 80067fa:	005b      	lsls	r3, r3, #1
 80067fc:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 80067fe:	79fb      	ldrb	r3, [r7, #7]
 8006800:	f003 030f 	and.w	r3, r3, #15
 8006804:	b2da      	uxtb	r2, r3
 8006806:	7bfb      	ldrb	r3, [r7, #15]
 8006808:	4413      	add	r3, r2
 800680a:	b2db      	uxtb	r3, r3
}
 800680c:	4618      	mov	r0, r3
 800680e:	3714      	adds	r7, #20
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr

08006818 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006818:	b480      	push	{r7}
 800681a:	b083      	sub	sp, #12
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8006820:	bf00      	nop
 8006822:	370c      	adds	r7, #12
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr

0800682c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b084      	sub	sp, #16
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d101      	bne.n	800683e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800683a:	2301      	movs	r3, #1
 800683c:	e095      	b.n	800696a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006842:	2b00      	cmp	r3, #0
 8006844:	d108      	bne.n	8006858 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800684e:	d009      	beq.n	8006864 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2200      	movs	r2, #0
 8006854:	61da      	str	r2, [r3, #28]
 8006856:	e005      	b.n	8006864 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2200      	movs	r2, #0
 800685c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2200      	movs	r2, #0
 8006862:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2200      	movs	r2, #0
 8006868:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006870:	b2db      	uxtb	r3, r3
 8006872:	2b00      	cmp	r3, #0
 8006874:	d106      	bne.n	8006884 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2200      	movs	r2, #0
 800687a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f7fb fdac 	bl	80023dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2202      	movs	r2, #2
 8006888:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	681a      	ldr	r2, [r3, #0]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800689a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	68db      	ldr	r3, [r3, #12]
 80068a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80068a4:	d902      	bls.n	80068ac <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80068a6:	2300      	movs	r3, #0
 80068a8:	60fb      	str	r3, [r7, #12]
 80068aa:	e002      	b.n	80068b2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80068ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80068b0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	68db      	ldr	r3, [r3, #12]
 80068b6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80068ba:	d007      	beq.n	80068cc <HAL_SPI_Init+0xa0>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	68db      	ldr	r3, [r3, #12]
 80068c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80068c4:	d002      	beq.n	80068cc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2200      	movs	r2, #0
 80068ca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	689b      	ldr	r3, [r3, #8]
 80068d8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80068dc:	431a      	orrs	r2, r3
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	691b      	ldr	r3, [r3, #16]
 80068e2:	f003 0302 	and.w	r3, r3, #2
 80068e6:	431a      	orrs	r2, r3
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	695b      	ldr	r3, [r3, #20]
 80068ec:	f003 0301 	and.w	r3, r3, #1
 80068f0:	431a      	orrs	r2, r3
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	699b      	ldr	r3, [r3, #24]
 80068f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80068fa:	431a      	orrs	r2, r3
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	69db      	ldr	r3, [r3, #28]
 8006900:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006904:	431a      	orrs	r2, r3
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6a1b      	ldr	r3, [r3, #32]
 800690a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800690e:	ea42 0103 	orr.w	r1, r2, r3
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006916:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	430a      	orrs	r2, r1
 8006920:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	699b      	ldr	r3, [r3, #24]
 8006926:	0c1b      	lsrs	r3, r3, #16
 8006928:	f003 0204 	and.w	r2, r3, #4
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006930:	f003 0310 	and.w	r3, r3, #16
 8006934:	431a      	orrs	r2, r3
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800693a:	f003 0308 	and.w	r3, r3, #8
 800693e:	431a      	orrs	r2, r3
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	68db      	ldr	r3, [r3, #12]
 8006944:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006948:	ea42 0103 	orr.w	r1, r2, r3
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	430a      	orrs	r2, r1
 8006958:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2200      	movs	r2, #0
 800695e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2201      	movs	r2, #1
 8006964:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006968:	2300      	movs	r3, #0
}
 800696a:	4618      	mov	r0, r3
 800696c:	3710      	adds	r7, #16
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}

08006972 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006972:	b580      	push	{r7, lr}
 8006974:	b088      	sub	sp, #32
 8006976:	af00      	add	r7, sp, #0
 8006978:	60f8      	str	r0, [r7, #12]
 800697a:	60b9      	str	r1, [r7, #8]
 800697c:	603b      	str	r3, [r7, #0]
 800697e:	4613      	mov	r3, r2
 8006980:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006982:	2300      	movs	r3, #0
 8006984:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800698c:	2b01      	cmp	r3, #1
 800698e:	d101      	bne.n	8006994 <HAL_SPI_Transmit+0x22>
 8006990:	2302      	movs	r3, #2
 8006992:	e158      	b.n	8006c46 <HAL_SPI_Transmit+0x2d4>
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2201      	movs	r2, #1
 8006998:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800699c:	f7fc f836 	bl	8002a0c <HAL_GetTick>
 80069a0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80069a2:	88fb      	ldrh	r3, [r7, #6]
 80069a4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80069ac:	b2db      	uxtb	r3, r3
 80069ae:	2b01      	cmp	r3, #1
 80069b0:	d002      	beq.n	80069b8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80069b2:	2302      	movs	r3, #2
 80069b4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80069b6:	e13d      	b.n	8006c34 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d002      	beq.n	80069c4 <HAL_SPI_Transmit+0x52>
 80069be:	88fb      	ldrh	r3, [r7, #6]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d102      	bne.n	80069ca <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80069c4:	2301      	movs	r3, #1
 80069c6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80069c8:	e134      	b.n	8006c34 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2203      	movs	r2, #3
 80069ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2200      	movs	r2, #0
 80069d6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	68ba      	ldr	r2, [r7, #8]
 80069dc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	88fa      	ldrh	r2, [r7, #6]
 80069e2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	88fa      	ldrh	r2, [r7, #6]
 80069e8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2200      	movs	r2, #0
 80069ee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2200      	movs	r2, #0
 80069f4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2200      	movs	r2, #0
 80069fc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2200      	movs	r2, #0
 8006a04:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	689b      	ldr	r3, [r3, #8]
 8006a10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a14:	d10f      	bne.n	8006a36 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a24:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006a34:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a40:	2b40      	cmp	r3, #64	; 0x40
 8006a42:	d007      	beq.n	8006a54 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	681a      	ldr	r2, [r3, #0]
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a52:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	68db      	ldr	r3, [r3, #12]
 8006a58:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006a5c:	d94b      	bls.n	8006af6 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d002      	beq.n	8006a6c <HAL_SPI_Transmit+0xfa>
 8006a66:	8afb      	ldrh	r3, [r7, #22]
 8006a68:	2b01      	cmp	r3, #1
 8006a6a:	d13e      	bne.n	8006aea <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a70:	881a      	ldrh	r2, [r3, #0]
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a7c:	1c9a      	adds	r2, r3, #2
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	3b01      	subs	r3, #1
 8006a8a:	b29a      	uxth	r2, r3
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006a90:	e02b      	b.n	8006aea <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	689b      	ldr	r3, [r3, #8]
 8006a98:	f003 0302 	and.w	r3, r3, #2
 8006a9c:	2b02      	cmp	r3, #2
 8006a9e:	d112      	bne.n	8006ac6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aa4:	881a      	ldrh	r2, [r3, #0]
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ab0:	1c9a      	adds	r2, r3, #2
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	3b01      	subs	r3, #1
 8006abe:	b29a      	uxth	r2, r3
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006ac4:	e011      	b.n	8006aea <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ac6:	f7fb ffa1 	bl	8002a0c <HAL_GetTick>
 8006aca:	4602      	mov	r2, r0
 8006acc:	69bb      	ldr	r3, [r7, #24]
 8006ace:	1ad3      	subs	r3, r2, r3
 8006ad0:	683a      	ldr	r2, [r7, #0]
 8006ad2:	429a      	cmp	r2, r3
 8006ad4:	d803      	bhi.n	8006ade <HAL_SPI_Transmit+0x16c>
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006adc:	d102      	bne.n	8006ae4 <HAL_SPI_Transmit+0x172>
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d102      	bne.n	8006aea <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8006ae4:	2303      	movs	r3, #3
 8006ae6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006ae8:	e0a4      	b.n	8006c34 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d1ce      	bne.n	8006a92 <HAL_SPI_Transmit+0x120>
 8006af4:	e07c      	b.n	8006bf0 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d002      	beq.n	8006b04 <HAL_SPI_Transmit+0x192>
 8006afe:	8afb      	ldrh	r3, [r7, #22]
 8006b00:	2b01      	cmp	r3, #1
 8006b02:	d170      	bne.n	8006be6 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b08:	b29b      	uxth	r3, r3
 8006b0a:	2b01      	cmp	r3, #1
 8006b0c:	d912      	bls.n	8006b34 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b12:	881a      	ldrh	r2, [r3, #0]
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b1e:	1c9a      	adds	r2, r3, #2
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	3b02      	subs	r3, #2
 8006b2c:	b29a      	uxth	r2, r3
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006b32:	e058      	b.n	8006be6 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	330c      	adds	r3, #12
 8006b3e:	7812      	ldrb	r2, [r2, #0]
 8006b40:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b46:	1c5a      	adds	r2, r3, #1
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	3b01      	subs	r3, #1
 8006b54:	b29a      	uxth	r2, r3
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006b5a:	e044      	b.n	8006be6 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	689b      	ldr	r3, [r3, #8]
 8006b62:	f003 0302 	and.w	r3, r3, #2
 8006b66:	2b02      	cmp	r3, #2
 8006b68:	d12b      	bne.n	8006bc2 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b6e:	b29b      	uxth	r3, r3
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	d912      	bls.n	8006b9a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b78:	881a      	ldrh	r2, [r3, #0]
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b84:	1c9a      	adds	r2, r3, #2
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b8e:	b29b      	uxth	r3, r3
 8006b90:	3b02      	subs	r3, #2
 8006b92:	b29a      	uxth	r2, r3
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006b98:	e025      	b.n	8006be6 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	330c      	adds	r3, #12
 8006ba4:	7812      	ldrb	r2, [r2, #0]
 8006ba6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bac:	1c5a      	adds	r2, r3, #1
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	3b01      	subs	r3, #1
 8006bba:	b29a      	uxth	r2, r3
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006bc0:	e011      	b.n	8006be6 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006bc2:	f7fb ff23 	bl	8002a0c <HAL_GetTick>
 8006bc6:	4602      	mov	r2, r0
 8006bc8:	69bb      	ldr	r3, [r7, #24]
 8006bca:	1ad3      	subs	r3, r2, r3
 8006bcc:	683a      	ldr	r2, [r7, #0]
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	d803      	bhi.n	8006bda <HAL_SPI_Transmit+0x268>
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006bd8:	d102      	bne.n	8006be0 <HAL_SPI_Transmit+0x26e>
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d102      	bne.n	8006be6 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8006be0:	2303      	movs	r3, #3
 8006be2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006be4:	e026      	b.n	8006c34 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d1b5      	bne.n	8006b5c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006bf0:	69ba      	ldr	r2, [r7, #24]
 8006bf2:	6839      	ldr	r1, [r7, #0]
 8006bf4:	68f8      	ldr	r0, [r7, #12]
 8006bf6:	f000 f949 	bl	8006e8c <SPI_EndRxTxTransaction>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d002      	beq.n	8006c06 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2220      	movs	r2, #32
 8006c04:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d10a      	bne.n	8006c24 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c0e:	2300      	movs	r3, #0
 8006c10:	613b      	str	r3, [r7, #16]
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	68db      	ldr	r3, [r3, #12]
 8006c18:	613b      	str	r3, [r7, #16]
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	689b      	ldr	r3, [r3, #8]
 8006c20:	613b      	str	r3, [r7, #16]
 8006c22:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d002      	beq.n	8006c32 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	77fb      	strb	r3, [r7, #31]
 8006c30:	e000      	b.n	8006c34 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8006c32:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2201      	movs	r2, #1
 8006c38:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006c44:	7ffb      	ldrb	r3, [r7, #31]
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	3720      	adds	r7, #32
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}
	...

08006c50 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b088      	sub	sp, #32
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	60f8      	str	r0, [r7, #12]
 8006c58:	60b9      	str	r1, [r7, #8]
 8006c5a:	603b      	str	r3, [r7, #0]
 8006c5c:	4613      	mov	r3, r2
 8006c5e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006c60:	f7fb fed4 	bl	8002a0c <HAL_GetTick>
 8006c64:	4602      	mov	r2, r0
 8006c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c68:	1a9b      	subs	r3, r3, r2
 8006c6a:	683a      	ldr	r2, [r7, #0]
 8006c6c:	4413      	add	r3, r2
 8006c6e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006c70:	f7fb fecc 	bl	8002a0c <HAL_GetTick>
 8006c74:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006c76:	4b39      	ldr	r3, [pc, #228]	; (8006d5c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	015b      	lsls	r3, r3, #5
 8006c7c:	0d1b      	lsrs	r3, r3, #20
 8006c7e:	69fa      	ldr	r2, [r7, #28]
 8006c80:	fb02 f303 	mul.w	r3, r2, r3
 8006c84:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c86:	e054      	b.n	8006d32 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c8e:	d050      	beq.n	8006d32 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006c90:	f7fb febc 	bl	8002a0c <HAL_GetTick>
 8006c94:	4602      	mov	r2, r0
 8006c96:	69bb      	ldr	r3, [r7, #24]
 8006c98:	1ad3      	subs	r3, r2, r3
 8006c9a:	69fa      	ldr	r2, [r7, #28]
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d902      	bls.n	8006ca6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006ca0:	69fb      	ldr	r3, [r7, #28]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d13d      	bne.n	8006d22 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	685a      	ldr	r2, [r3, #4]
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006cb4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006cbe:	d111      	bne.n	8006ce4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	689b      	ldr	r3, [r3, #8]
 8006cc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cc8:	d004      	beq.n	8006cd4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	689b      	ldr	r3, [r3, #8]
 8006cce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cd2:	d107      	bne.n	8006ce4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	681a      	ldr	r2, [r3, #0]
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ce2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ce8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cec:	d10f      	bne.n	8006d0e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	681a      	ldr	r2, [r3, #0]
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006cfc:	601a      	str	r2, [r3, #0]
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	681a      	ldr	r2, [r3, #0]
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006d0c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2201      	movs	r2, #1
 8006d12:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006d1e:	2303      	movs	r3, #3
 8006d20:	e017      	b.n	8006d52 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d101      	bne.n	8006d2c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	3b01      	subs	r3, #1
 8006d30:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	689a      	ldr	r2, [r3, #8]
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	4013      	ands	r3, r2
 8006d3c:	68ba      	ldr	r2, [r7, #8]
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	bf0c      	ite	eq
 8006d42:	2301      	moveq	r3, #1
 8006d44:	2300      	movne	r3, #0
 8006d46:	b2db      	uxtb	r3, r3
 8006d48:	461a      	mov	r2, r3
 8006d4a:	79fb      	ldrb	r3, [r7, #7]
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d19b      	bne.n	8006c88 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006d50:	2300      	movs	r3, #0
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3720      	adds	r7, #32
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}
 8006d5a:	bf00      	nop
 8006d5c:	20000000 	.word	0x20000000

08006d60 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b08a      	sub	sp, #40	; 0x28
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	60f8      	str	r0, [r7, #12]
 8006d68:	60b9      	str	r1, [r7, #8]
 8006d6a:	607a      	str	r2, [r7, #4]
 8006d6c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006d72:	f7fb fe4b 	bl	8002a0c <HAL_GetTick>
 8006d76:	4602      	mov	r2, r0
 8006d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d7a:	1a9b      	subs	r3, r3, r2
 8006d7c:	683a      	ldr	r2, [r7, #0]
 8006d7e:	4413      	add	r3, r2
 8006d80:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006d82:	f7fb fe43 	bl	8002a0c <HAL_GetTick>
 8006d86:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	330c      	adds	r3, #12
 8006d8e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006d90:	4b3d      	ldr	r3, [pc, #244]	; (8006e88 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006d92:	681a      	ldr	r2, [r3, #0]
 8006d94:	4613      	mov	r3, r2
 8006d96:	009b      	lsls	r3, r3, #2
 8006d98:	4413      	add	r3, r2
 8006d9a:	00da      	lsls	r2, r3, #3
 8006d9c:	1ad3      	subs	r3, r2, r3
 8006d9e:	0d1b      	lsrs	r3, r3, #20
 8006da0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006da2:	fb02 f303 	mul.w	r3, r2, r3
 8006da6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006da8:	e060      	b.n	8006e6c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006db0:	d107      	bne.n	8006dc2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d104      	bne.n	8006dc2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006db8:	69fb      	ldr	r3, [r7, #28]
 8006dba:	781b      	ldrb	r3, [r3, #0]
 8006dbc:	b2db      	uxtb	r3, r3
 8006dbe:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006dc0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006dc8:	d050      	beq.n	8006e6c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006dca:	f7fb fe1f 	bl	8002a0c <HAL_GetTick>
 8006dce:	4602      	mov	r2, r0
 8006dd0:	6a3b      	ldr	r3, [r7, #32]
 8006dd2:	1ad3      	subs	r3, r2, r3
 8006dd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006dd6:	429a      	cmp	r2, r3
 8006dd8:	d902      	bls.n	8006de0 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d13d      	bne.n	8006e5c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	685a      	ldr	r2, [r3, #4]
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006dee:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006df8:	d111      	bne.n	8006e1e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	689b      	ldr	r3, [r3, #8]
 8006dfe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e02:	d004      	beq.n	8006e0e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	689b      	ldr	r3, [r3, #8]
 8006e08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e0c:	d107      	bne.n	8006e1e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	681a      	ldr	r2, [r3, #0]
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e1c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e26:	d10f      	bne.n	8006e48 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	681a      	ldr	r2, [r3, #0]
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006e36:	601a      	str	r2, [r3, #0]
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	681a      	ldr	r2, [r3, #0]
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006e46:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	2201      	movs	r2, #1
 8006e4c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2200      	movs	r2, #0
 8006e54:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006e58:	2303      	movs	r3, #3
 8006e5a:	e010      	b.n	8006e7e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006e5c:	69bb      	ldr	r3, [r7, #24]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d101      	bne.n	8006e66 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006e62:	2300      	movs	r3, #0
 8006e64:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006e66:	69bb      	ldr	r3, [r7, #24]
 8006e68:	3b01      	subs	r3, #1
 8006e6a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	689a      	ldr	r2, [r3, #8]
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	4013      	ands	r3, r2
 8006e76:	687a      	ldr	r2, [r7, #4]
 8006e78:	429a      	cmp	r2, r3
 8006e7a:	d196      	bne.n	8006daa <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006e7c:	2300      	movs	r3, #0
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3728      	adds	r7, #40	; 0x28
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}
 8006e86:	bf00      	nop
 8006e88:	20000000 	.word	0x20000000

08006e8c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b086      	sub	sp, #24
 8006e90:	af02      	add	r7, sp, #8
 8006e92:	60f8      	str	r0, [r7, #12]
 8006e94:	60b9      	str	r1, [r7, #8]
 8006e96:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	9300      	str	r3, [sp, #0]
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006ea4:	68f8      	ldr	r0, [r7, #12]
 8006ea6:	f7ff ff5b 	bl	8006d60 <SPI_WaitFifoStateUntilTimeout>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d007      	beq.n	8006ec0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006eb4:	f043 0220 	orr.w	r2, r3, #32
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006ebc:	2303      	movs	r3, #3
 8006ebe:	e027      	b.n	8006f10 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	9300      	str	r3, [sp, #0]
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	2180      	movs	r1, #128	; 0x80
 8006eca:	68f8      	ldr	r0, [r7, #12]
 8006ecc:	f7ff fec0 	bl	8006c50 <SPI_WaitFlagStateUntilTimeout>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d007      	beq.n	8006ee6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006eda:	f043 0220 	orr.w	r2, r3, #32
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006ee2:	2303      	movs	r3, #3
 8006ee4:	e014      	b.n	8006f10 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	9300      	str	r3, [sp, #0]
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	2200      	movs	r2, #0
 8006eee:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006ef2:	68f8      	ldr	r0, [r7, #12]
 8006ef4:	f7ff ff34 	bl	8006d60 <SPI_WaitFifoStateUntilTimeout>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d007      	beq.n	8006f0e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f02:	f043 0220 	orr.w	r2, r3, #32
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006f0a:	2303      	movs	r3, #3
 8006f0c:	e000      	b.n	8006f10 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006f0e:	2300      	movs	r3, #0
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	3710      	adds	r7, #16
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}

08006f18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b082      	sub	sp, #8
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d101      	bne.n	8006f2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f26:	2301      	movs	r3, #1
 8006f28:	e040      	b.n	8006fac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d106      	bne.n	8006f40 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2200      	movs	r2, #0
 8006f36:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f7fb fc28 	bl	8002790 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2224      	movs	r2, #36	; 0x24
 8006f44:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	681a      	ldr	r2, [r3, #0]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f022 0201 	bic.w	r2, r2, #1
 8006f54:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f000 fc22 	bl	80077a0 <UART_SetConfig>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	2b01      	cmp	r3, #1
 8006f60:	d101      	bne.n	8006f66 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006f62:	2301      	movs	r3, #1
 8006f64:	e022      	b.n	8006fac <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d002      	beq.n	8006f74 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f000 fece 	bl	8007d10 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	685a      	ldr	r2, [r3, #4]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006f82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	689a      	ldr	r2, [r3, #8]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006f92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	681a      	ldr	r2, [r3, #0]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f042 0201 	orr.w	r2, r2, #1
 8006fa2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f000 ff55 	bl	8007e54 <UART_CheckIdleState>
 8006faa:	4603      	mov	r3, r0
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	3708      	adds	r7, #8
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}

08006fb4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b08a      	sub	sp, #40	; 0x28
 8006fb8:	af02      	add	r7, sp, #8
 8006fba:	60f8      	str	r0, [r7, #12]
 8006fbc:	60b9      	str	r1, [r7, #8]
 8006fbe:	603b      	str	r3, [r7, #0]
 8006fc0:	4613      	mov	r3, r2
 8006fc2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006fc8:	2b20      	cmp	r3, #32
 8006fca:	f040 8082 	bne.w	80070d2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d002      	beq.n	8006fda <HAL_UART_Transmit+0x26>
 8006fd4:	88fb      	ldrh	r3, [r7, #6]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d101      	bne.n	8006fde <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	e07a      	b.n	80070d4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	d101      	bne.n	8006fec <HAL_UART_Transmit+0x38>
 8006fe8:	2302      	movs	r3, #2
 8006fea:	e073      	b.n	80070d4 <HAL_UART_Transmit+0x120>
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2201      	movs	r2, #1
 8006ff0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2221      	movs	r2, #33	; 0x21
 8007000:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007002:	f7fb fd03 	bl	8002a0c <HAL_GetTick>
 8007006:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	88fa      	ldrh	r2, [r7, #6]
 800700c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	88fa      	ldrh	r2, [r7, #6]
 8007014:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	689b      	ldr	r3, [r3, #8]
 800701c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007020:	d108      	bne.n	8007034 <HAL_UART_Transmit+0x80>
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	691b      	ldr	r3, [r3, #16]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d104      	bne.n	8007034 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800702a:	2300      	movs	r3, #0
 800702c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	61bb      	str	r3, [r7, #24]
 8007032:	e003      	b.n	800703c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007038:	2300      	movs	r3, #0
 800703a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	2200      	movs	r2, #0
 8007040:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8007044:	e02d      	b.n	80070a2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	9300      	str	r3, [sp, #0]
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	2200      	movs	r2, #0
 800704e:	2180      	movs	r1, #128	; 0x80
 8007050:	68f8      	ldr	r0, [r7, #12]
 8007052:	f000 ff48 	bl	8007ee6 <UART_WaitOnFlagUntilTimeout>
 8007056:	4603      	mov	r3, r0
 8007058:	2b00      	cmp	r3, #0
 800705a:	d001      	beq.n	8007060 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800705c:	2303      	movs	r3, #3
 800705e:	e039      	b.n	80070d4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8007060:	69fb      	ldr	r3, [r7, #28]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d10b      	bne.n	800707e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007066:	69bb      	ldr	r3, [r7, #24]
 8007068:	881a      	ldrh	r2, [r3, #0]
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007072:	b292      	uxth	r2, r2
 8007074:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007076:	69bb      	ldr	r3, [r7, #24]
 8007078:	3302      	adds	r3, #2
 800707a:	61bb      	str	r3, [r7, #24]
 800707c:	e008      	b.n	8007090 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800707e:	69fb      	ldr	r3, [r7, #28]
 8007080:	781a      	ldrb	r2, [r3, #0]
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	b292      	uxth	r2, r2
 8007088:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800708a:	69fb      	ldr	r3, [r7, #28]
 800708c:	3301      	adds	r3, #1
 800708e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007096:	b29b      	uxth	r3, r3
 8007098:	3b01      	subs	r3, #1
 800709a:	b29a      	uxth	r2, r3
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80070a8:	b29b      	uxth	r3, r3
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d1cb      	bne.n	8007046 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	9300      	str	r3, [sp, #0]
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	2200      	movs	r2, #0
 80070b6:	2140      	movs	r1, #64	; 0x40
 80070b8:	68f8      	ldr	r0, [r7, #12]
 80070ba:	f000 ff14 	bl	8007ee6 <UART_WaitOnFlagUntilTimeout>
 80070be:	4603      	mov	r3, r0
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d001      	beq.n	80070c8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80070c4:	2303      	movs	r3, #3
 80070c6:	e005      	b.n	80070d4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2220      	movs	r2, #32
 80070cc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80070ce:	2300      	movs	r3, #0
 80070d0:	e000      	b.n	80070d4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80070d2:	2302      	movs	r3, #2
  }
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3720      	adds	r7, #32
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}

080070dc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b08a      	sub	sp, #40	; 0x28
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	60f8      	str	r0, [r7, #12]
 80070e4:	60b9      	str	r1, [r7, #8]
 80070e6:	4613      	mov	r3, r2
 80070e8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80070ee:	2b20      	cmp	r3, #32
 80070f0:	d142      	bne.n	8007178 <HAL_UART_Receive_DMA+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d002      	beq.n	80070fe <HAL_UART_Receive_DMA+0x22>
 80070f8:	88fb      	ldrh	r3, [r7, #6]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d101      	bne.n	8007102 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 80070fe:	2301      	movs	r3, #1
 8007100:	e03b      	b.n	800717a <HAL_UART_Receive_DMA+0x9e>
    }

    __HAL_LOCK(huart);
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007108:	2b01      	cmp	r3, #1
 800710a:	d101      	bne.n	8007110 <HAL_UART_Receive_DMA+0x34>
 800710c:	2302      	movs	r3, #2
 800710e:	e034      	b.n	800717a <HAL_UART_Receive_DMA+0x9e>
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	2201      	movs	r2, #1
 8007114:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	2200      	movs	r2, #0
 800711c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a18      	ldr	r2, [pc, #96]	; (8007184 <HAL_UART_Receive_DMA+0xa8>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d01f      	beq.n	8007168 <HAL_UART_Receive_DMA+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007132:	2b00      	cmp	r3, #0
 8007134:	d018      	beq.n	8007168 <HAL_UART_Receive_DMA+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	e853 3f00 	ldrex	r3, [r3]
 8007142:	613b      	str	r3, [r7, #16]
   return(result);
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800714a:	627b      	str	r3, [r7, #36]	; 0x24
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	461a      	mov	r2, r3
 8007152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007154:	623b      	str	r3, [r7, #32]
 8007156:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007158:	69f9      	ldr	r1, [r7, #28]
 800715a:	6a3a      	ldr	r2, [r7, #32]
 800715c:	e841 2300 	strex	r3, r2, [r1]
 8007160:	61bb      	str	r3, [r7, #24]
   return(result);
 8007162:	69bb      	ldr	r3, [r7, #24]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d1e6      	bne.n	8007136 <HAL_UART_Receive_DMA+0x5a>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007168:	88fb      	ldrh	r3, [r7, #6]
 800716a:	461a      	mov	r2, r3
 800716c:	68b9      	ldr	r1, [r7, #8]
 800716e:	68f8      	ldr	r0, [r7, #12]
 8007170:	f000 ff7e 	bl	8008070 <UART_Start_Receive_DMA>
 8007174:	4603      	mov	r3, r0
 8007176:	e000      	b.n	800717a <HAL_UART_Receive_DMA+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8007178:	2302      	movs	r3, #2
  }
}
 800717a:	4618      	mov	r0, r3
 800717c:	3728      	adds	r7, #40	; 0x28
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
 8007182:	bf00      	nop
 8007184:	40008000 	.word	0x40008000

08007188 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b0ba      	sub	sp, #232	; 0xe8
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	69db      	ldr	r3, [r3, #28]
 8007196:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	689b      	ldr	r3, [r3, #8]
 80071aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80071ae:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80071b2:	f640 030f 	movw	r3, #2063	; 0x80f
 80071b6:	4013      	ands	r3, r2
 80071b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80071bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d115      	bne.n	80071f0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80071c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071c8:	f003 0320 	and.w	r3, r3, #32
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d00f      	beq.n	80071f0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80071d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071d4:	f003 0320 	and.w	r3, r3, #32
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d009      	beq.n	80071f0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	f000 82a6 	beq.w	8007732 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	4798      	blx	r3
      }
      return;
 80071ee:	e2a0      	b.n	8007732 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80071f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	f000 8117 	beq.w	8007428 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80071fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071fe:	f003 0301 	and.w	r3, r3, #1
 8007202:	2b00      	cmp	r3, #0
 8007204:	d106      	bne.n	8007214 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007206:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800720a:	4b85      	ldr	r3, [pc, #532]	; (8007420 <HAL_UART_IRQHandler+0x298>)
 800720c:	4013      	ands	r3, r2
 800720e:	2b00      	cmp	r3, #0
 8007210:	f000 810a 	beq.w	8007428 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007214:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007218:	f003 0301 	and.w	r3, r3, #1
 800721c:	2b00      	cmp	r3, #0
 800721e:	d011      	beq.n	8007244 <HAL_UART_IRQHandler+0xbc>
 8007220:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007228:	2b00      	cmp	r3, #0
 800722a:	d00b      	beq.n	8007244 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	2201      	movs	r2, #1
 8007232:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800723a:	f043 0201 	orr.w	r2, r3, #1
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007244:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007248:	f003 0302 	and.w	r3, r3, #2
 800724c:	2b00      	cmp	r3, #0
 800724e:	d011      	beq.n	8007274 <HAL_UART_IRQHandler+0xec>
 8007250:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007254:	f003 0301 	and.w	r3, r3, #1
 8007258:	2b00      	cmp	r3, #0
 800725a:	d00b      	beq.n	8007274 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	2202      	movs	r2, #2
 8007262:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800726a:	f043 0204 	orr.w	r2, r3, #4
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007274:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007278:	f003 0304 	and.w	r3, r3, #4
 800727c:	2b00      	cmp	r3, #0
 800727e:	d011      	beq.n	80072a4 <HAL_UART_IRQHandler+0x11c>
 8007280:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007284:	f003 0301 	and.w	r3, r3, #1
 8007288:	2b00      	cmp	r3, #0
 800728a:	d00b      	beq.n	80072a4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	2204      	movs	r2, #4
 8007292:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800729a:	f043 0202 	orr.w	r2, r3, #2
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80072a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072a8:	f003 0308 	and.w	r3, r3, #8
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d017      	beq.n	80072e0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80072b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072b4:	f003 0320 	and.w	r3, r3, #32
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d105      	bne.n	80072c8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80072bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80072c0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d00b      	beq.n	80072e0 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	2208      	movs	r2, #8
 80072ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80072d6:	f043 0208 	orr.w	r2, r3, #8
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80072e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d012      	beq.n	8007312 <HAL_UART_IRQHandler+0x18a>
 80072ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d00c      	beq.n	8007312 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007300:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007308:	f043 0220 	orr.w	r2, r3, #32
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007318:	2b00      	cmp	r3, #0
 800731a:	f000 820c 	beq.w	8007736 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800731e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007322:	f003 0320 	and.w	r3, r3, #32
 8007326:	2b00      	cmp	r3, #0
 8007328:	d00d      	beq.n	8007346 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800732a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800732e:	f003 0320 	and.w	r3, r3, #32
 8007332:	2b00      	cmp	r3, #0
 8007334:	d007      	beq.n	8007346 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800733a:	2b00      	cmp	r3, #0
 800733c:	d003      	beq.n	8007346 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800734c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	689b      	ldr	r3, [r3, #8]
 8007356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800735a:	2b40      	cmp	r3, #64	; 0x40
 800735c:	d005      	beq.n	800736a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800735e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007362:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007366:	2b00      	cmp	r3, #0
 8007368:	d04f      	beq.n	800740a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f000 ff4c 	bl	8008208 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	689b      	ldr	r3, [r3, #8]
 8007376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800737a:	2b40      	cmp	r3, #64	; 0x40
 800737c:	d141      	bne.n	8007402 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	3308      	adds	r3, #8
 8007384:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007388:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800738c:	e853 3f00 	ldrex	r3, [r3]
 8007390:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007394:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007398:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800739c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	3308      	adds	r3, #8
 80073a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80073aa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80073ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80073b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80073ba:	e841 2300 	strex	r3, r2, [r1]
 80073be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80073c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d1d9      	bne.n	800737e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d013      	beq.n	80073fa <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073d6:	4a13      	ldr	r2, [pc, #76]	; (8007424 <HAL_UART_IRQHandler+0x29c>)
 80073d8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073de:	4618      	mov	r0, r3
 80073e0:	f7fb fdac 	bl	8002f3c <HAL_DMA_Abort_IT>
 80073e4:	4603      	mov	r3, r0
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d017      	beq.n	800741a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073f0:	687a      	ldr	r2, [r7, #4]
 80073f2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80073f4:	4610      	mov	r0, r2
 80073f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073f8:	e00f      	b.n	800741a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f000 f9ba 	bl	8007774 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007400:	e00b      	b.n	800741a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f000 f9b6 	bl	8007774 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007408:	e007      	b.n	800741a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f000 f9b2 	bl	8007774 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2200      	movs	r2, #0
 8007414:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8007418:	e18d      	b.n	8007736 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800741a:	bf00      	nop
    return;
 800741c:	e18b      	b.n	8007736 <HAL_UART_IRQHandler+0x5ae>
 800741e:	bf00      	nop
 8007420:	04000120 	.word	0x04000120
 8007424:	080084a7 	.word	0x080084a7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800742c:	2b01      	cmp	r3, #1
 800742e:	f040 8146 	bne.w	80076be <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007432:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007436:	f003 0310 	and.w	r3, r3, #16
 800743a:	2b00      	cmp	r3, #0
 800743c:	f000 813f 	beq.w	80076be <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007440:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007444:	f003 0310 	and.w	r3, r3, #16
 8007448:	2b00      	cmp	r3, #0
 800744a:	f000 8138 	beq.w	80076be <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	2210      	movs	r2, #16
 8007454:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	689b      	ldr	r3, [r3, #8]
 800745c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007460:	2b40      	cmp	r3, #64	; 0x40
 8007462:	f040 80b4 	bne.w	80075ce <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	685b      	ldr	r3, [r3, #4]
 800746e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007472:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007476:	2b00      	cmp	r3, #0
 8007478:	f000 815f 	beq.w	800773a <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007482:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007486:	429a      	cmp	r2, r3
 8007488:	f080 8157 	bcs.w	800773a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007492:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f003 0320 	and.w	r3, r3, #32
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	f040 8085 	bne.w	80075b2 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80074b4:	e853 3f00 	ldrex	r3, [r3]
 80074b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80074bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80074c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80074c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	461a      	mov	r2, r3
 80074ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80074d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80074d6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074da:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80074de:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80074e2:	e841 2300 	strex	r3, r2, [r1]
 80074e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80074ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d1da      	bne.n	80074a8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	3308      	adds	r3, #8
 80074f8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80074fc:	e853 3f00 	ldrex	r3, [r3]
 8007500:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007502:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007504:	f023 0301 	bic.w	r3, r3, #1
 8007508:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	3308      	adds	r3, #8
 8007512:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007516:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800751a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800751c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800751e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007522:	e841 2300 	strex	r3, r2, [r1]
 8007526:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007528:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800752a:	2b00      	cmp	r3, #0
 800752c:	d1e1      	bne.n	80074f2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	3308      	adds	r3, #8
 8007534:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007536:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007538:	e853 3f00 	ldrex	r3, [r3]
 800753c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800753e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007540:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007544:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	3308      	adds	r3, #8
 800754e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007552:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007554:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007556:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007558:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800755a:	e841 2300 	strex	r3, r2, [r1]
 800755e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007560:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007562:	2b00      	cmp	r3, #0
 8007564:	d1e3      	bne.n	800752e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2220      	movs	r2, #32
 800756a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2200      	movs	r2, #0
 8007570:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007578:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800757a:	e853 3f00 	ldrex	r3, [r3]
 800757e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007580:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007582:	f023 0310 	bic.w	r3, r3, #16
 8007586:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	461a      	mov	r2, r3
 8007590:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007594:	65bb      	str	r3, [r7, #88]	; 0x58
 8007596:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007598:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800759a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800759c:	e841 2300 	strex	r3, r2, [r1]
 80075a0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80075a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d1e4      	bne.n	8007572 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075ac:	4618      	mov	r0, r3
 80075ae:	f7fb fc87 	bl	8002ec0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80075be:	b29b      	uxth	r3, r3
 80075c0:	1ad3      	subs	r3, r2, r3
 80075c2:	b29b      	uxth	r3, r3
 80075c4:	4619      	mov	r1, r3
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f000 f8de 	bl	8007788 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80075cc:	e0b5      	b.n	800773a <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80075da:	b29b      	uxth	r3, r3
 80075dc:	1ad3      	subs	r3, r2, r3
 80075de:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80075e8:	b29b      	uxth	r3, r3
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	f000 80a7 	beq.w	800773e <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 80075f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	f000 80a2 	beq.w	800773e <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007602:	e853 3f00 	ldrex	r3, [r3]
 8007606:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800760a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800760e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	461a      	mov	r2, r3
 8007618:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800761c:	647b      	str	r3, [r7, #68]	; 0x44
 800761e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007620:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007622:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007624:	e841 2300 	strex	r3, r2, [r1]
 8007628:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800762a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800762c:	2b00      	cmp	r3, #0
 800762e:	d1e4      	bne.n	80075fa <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	3308      	adds	r3, #8
 8007636:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800763a:	e853 3f00 	ldrex	r3, [r3]
 800763e:	623b      	str	r3, [r7, #32]
   return(result);
 8007640:	6a3b      	ldr	r3, [r7, #32]
 8007642:	f023 0301 	bic.w	r3, r3, #1
 8007646:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	3308      	adds	r3, #8
 8007650:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007654:	633a      	str	r2, [r7, #48]	; 0x30
 8007656:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007658:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800765a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800765c:	e841 2300 	strex	r3, r2, [r1]
 8007660:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007664:	2b00      	cmp	r3, #0
 8007666:	d1e3      	bne.n	8007630 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2220      	movs	r2, #32
 800766c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2200      	movs	r2, #0
 8007672:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2200      	movs	r2, #0
 8007678:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	e853 3f00 	ldrex	r3, [r3]
 8007686:	60fb      	str	r3, [r7, #12]
   return(result);
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	f023 0310 	bic.w	r3, r3, #16
 800768e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	461a      	mov	r2, r3
 8007698:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800769c:	61fb      	str	r3, [r7, #28]
 800769e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076a0:	69b9      	ldr	r1, [r7, #24]
 80076a2:	69fa      	ldr	r2, [r7, #28]
 80076a4:	e841 2300 	strex	r3, r2, [r1]
 80076a8:	617b      	str	r3, [r7, #20]
   return(result);
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d1e4      	bne.n	800767a <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80076b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80076b4:	4619      	mov	r1, r3
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f000 f866 	bl	8007788 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80076bc:	e03f      	b.n	800773e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80076be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d00e      	beq.n	80076e8 <HAL_UART_IRQHandler+0x560>
 80076ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d008      	beq.n	80076e8 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80076de:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f000 ff20 	bl	8008526 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80076e6:	e02d      	b.n	8007744 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80076e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d00e      	beq.n	8007712 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80076f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d008      	beq.n	8007712 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007704:	2b00      	cmp	r3, #0
 8007706:	d01c      	beq.n	8007742 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	4798      	blx	r3
    }
    return;
 8007710:	e017      	b.n	8007742 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007712:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800771a:	2b00      	cmp	r3, #0
 800771c:	d012      	beq.n	8007744 <HAL_UART_IRQHandler+0x5bc>
 800771e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007726:	2b00      	cmp	r3, #0
 8007728:	d00c      	beq.n	8007744 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f000 fed1 	bl	80084d2 <UART_EndTransmit_IT>
    return;
 8007730:	e008      	b.n	8007744 <HAL_UART_IRQHandler+0x5bc>
      return;
 8007732:	bf00      	nop
 8007734:	e006      	b.n	8007744 <HAL_UART_IRQHandler+0x5bc>
    return;
 8007736:	bf00      	nop
 8007738:	e004      	b.n	8007744 <HAL_UART_IRQHandler+0x5bc>
      return;
 800773a:	bf00      	nop
 800773c:	e002      	b.n	8007744 <HAL_UART_IRQHandler+0x5bc>
      return;
 800773e:	bf00      	nop
 8007740:	e000      	b.n	8007744 <HAL_UART_IRQHandler+0x5bc>
    return;
 8007742:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8007744:	37e8      	adds	r7, #232	; 0xe8
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}
 800774a:	bf00      	nop

0800774c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800774c:	b480      	push	{r7}
 800774e:	b083      	sub	sp, #12
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007754:	bf00      	nop
 8007756:	370c      	adds	r7, #12
 8007758:	46bd      	mov	sp, r7
 800775a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775e:	4770      	bx	lr

08007760 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007760:	b480      	push	{r7}
 8007762:	b083      	sub	sp, #12
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007768:	bf00      	nop
 800776a:	370c      	adds	r7, #12
 800776c:	46bd      	mov	sp, r7
 800776e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007772:	4770      	bx	lr

08007774 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007774:	b480      	push	{r7}
 8007776:	b083      	sub	sp, #12
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800777c:	bf00      	nop
 800777e:	370c      	adds	r7, #12
 8007780:	46bd      	mov	sp, r7
 8007782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007786:	4770      	bx	lr

08007788 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007788:	b480      	push	{r7}
 800778a:	b083      	sub	sp, #12
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
 8007790:	460b      	mov	r3, r1
 8007792:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007794:	bf00      	nop
 8007796:	370c      	adds	r7, #12
 8007798:	46bd      	mov	sp, r7
 800779a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779e:	4770      	bx	lr

080077a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80077a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80077a4:	b08a      	sub	sp, #40	; 0x28
 80077a6:	af00      	add	r7, sp, #0
 80077a8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80077aa:	2300      	movs	r3, #0
 80077ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	689a      	ldr	r2, [r3, #8]
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	691b      	ldr	r3, [r3, #16]
 80077b8:	431a      	orrs	r2, r3
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	695b      	ldr	r3, [r3, #20]
 80077be:	431a      	orrs	r2, r3
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	69db      	ldr	r3, [r3, #28]
 80077c4:	4313      	orrs	r3, r2
 80077c6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	681a      	ldr	r2, [r3, #0]
 80077ce:	4ba4      	ldr	r3, [pc, #656]	; (8007a60 <UART_SetConfig+0x2c0>)
 80077d0:	4013      	ands	r3, r2
 80077d2:	68fa      	ldr	r2, [r7, #12]
 80077d4:	6812      	ldr	r2, [r2, #0]
 80077d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80077d8:	430b      	orrs	r3, r1
 80077da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	68da      	ldr	r2, [r3, #12]
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	430a      	orrs	r2, r1
 80077f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	699b      	ldr	r3, [r3, #24]
 80077f6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a99      	ldr	r2, [pc, #612]	; (8007a64 <UART_SetConfig+0x2c4>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d004      	beq.n	800780c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	6a1b      	ldr	r3, [r3, #32]
 8007806:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007808:	4313      	orrs	r3, r2
 800780a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	689b      	ldr	r3, [r3, #8]
 8007812:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800781c:	430a      	orrs	r2, r1
 800781e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4a90      	ldr	r2, [pc, #576]	; (8007a68 <UART_SetConfig+0x2c8>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d126      	bne.n	8007878 <UART_SetConfig+0xd8>
 800782a:	4b90      	ldr	r3, [pc, #576]	; (8007a6c <UART_SetConfig+0x2cc>)
 800782c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007830:	f003 0303 	and.w	r3, r3, #3
 8007834:	2b03      	cmp	r3, #3
 8007836:	d81b      	bhi.n	8007870 <UART_SetConfig+0xd0>
 8007838:	a201      	add	r2, pc, #4	; (adr r2, 8007840 <UART_SetConfig+0xa0>)
 800783a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800783e:	bf00      	nop
 8007840:	08007851 	.word	0x08007851
 8007844:	08007861 	.word	0x08007861
 8007848:	08007859 	.word	0x08007859
 800784c:	08007869 	.word	0x08007869
 8007850:	2301      	movs	r3, #1
 8007852:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007856:	e116      	b.n	8007a86 <UART_SetConfig+0x2e6>
 8007858:	2302      	movs	r3, #2
 800785a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800785e:	e112      	b.n	8007a86 <UART_SetConfig+0x2e6>
 8007860:	2304      	movs	r3, #4
 8007862:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007866:	e10e      	b.n	8007a86 <UART_SetConfig+0x2e6>
 8007868:	2308      	movs	r3, #8
 800786a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800786e:	e10a      	b.n	8007a86 <UART_SetConfig+0x2e6>
 8007870:	2310      	movs	r3, #16
 8007872:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007876:	e106      	b.n	8007a86 <UART_SetConfig+0x2e6>
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a7c      	ldr	r2, [pc, #496]	; (8007a70 <UART_SetConfig+0x2d0>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d138      	bne.n	80078f4 <UART_SetConfig+0x154>
 8007882:	4b7a      	ldr	r3, [pc, #488]	; (8007a6c <UART_SetConfig+0x2cc>)
 8007884:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007888:	f003 030c 	and.w	r3, r3, #12
 800788c:	2b0c      	cmp	r3, #12
 800788e:	d82d      	bhi.n	80078ec <UART_SetConfig+0x14c>
 8007890:	a201      	add	r2, pc, #4	; (adr r2, 8007898 <UART_SetConfig+0xf8>)
 8007892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007896:	bf00      	nop
 8007898:	080078cd 	.word	0x080078cd
 800789c:	080078ed 	.word	0x080078ed
 80078a0:	080078ed 	.word	0x080078ed
 80078a4:	080078ed 	.word	0x080078ed
 80078a8:	080078dd 	.word	0x080078dd
 80078ac:	080078ed 	.word	0x080078ed
 80078b0:	080078ed 	.word	0x080078ed
 80078b4:	080078ed 	.word	0x080078ed
 80078b8:	080078d5 	.word	0x080078d5
 80078bc:	080078ed 	.word	0x080078ed
 80078c0:	080078ed 	.word	0x080078ed
 80078c4:	080078ed 	.word	0x080078ed
 80078c8:	080078e5 	.word	0x080078e5
 80078cc:	2300      	movs	r3, #0
 80078ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078d2:	e0d8      	b.n	8007a86 <UART_SetConfig+0x2e6>
 80078d4:	2302      	movs	r3, #2
 80078d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078da:	e0d4      	b.n	8007a86 <UART_SetConfig+0x2e6>
 80078dc:	2304      	movs	r3, #4
 80078de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078e2:	e0d0      	b.n	8007a86 <UART_SetConfig+0x2e6>
 80078e4:	2308      	movs	r3, #8
 80078e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078ea:	e0cc      	b.n	8007a86 <UART_SetConfig+0x2e6>
 80078ec:	2310      	movs	r3, #16
 80078ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078f2:	e0c8      	b.n	8007a86 <UART_SetConfig+0x2e6>
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4a5e      	ldr	r2, [pc, #376]	; (8007a74 <UART_SetConfig+0x2d4>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d125      	bne.n	800794a <UART_SetConfig+0x1aa>
 80078fe:	4b5b      	ldr	r3, [pc, #364]	; (8007a6c <UART_SetConfig+0x2cc>)
 8007900:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007904:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007908:	2b30      	cmp	r3, #48	; 0x30
 800790a:	d016      	beq.n	800793a <UART_SetConfig+0x19a>
 800790c:	2b30      	cmp	r3, #48	; 0x30
 800790e:	d818      	bhi.n	8007942 <UART_SetConfig+0x1a2>
 8007910:	2b20      	cmp	r3, #32
 8007912:	d00a      	beq.n	800792a <UART_SetConfig+0x18a>
 8007914:	2b20      	cmp	r3, #32
 8007916:	d814      	bhi.n	8007942 <UART_SetConfig+0x1a2>
 8007918:	2b00      	cmp	r3, #0
 800791a:	d002      	beq.n	8007922 <UART_SetConfig+0x182>
 800791c:	2b10      	cmp	r3, #16
 800791e:	d008      	beq.n	8007932 <UART_SetConfig+0x192>
 8007920:	e00f      	b.n	8007942 <UART_SetConfig+0x1a2>
 8007922:	2300      	movs	r3, #0
 8007924:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007928:	e0ad      	b.n	8007a86 <UART_SetConfig+0x2e6>
 800792a:	2302      	movs	r3, #2
 800792c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007930:	e0a9      	b.n	8007a86 <UART_SetConfig+0x2e6>
 8007932:	2304      	movs	r3, #4
 8007934:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007938:	e0a5      	b.n	8007a86 <UART_SetConfig+0x2e6>
 800793a:	2308      	movs	r3, #8
 800793c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007940:	e0a1      	b.n	8007a86 <UART_SetConfig+0x2e6>
 8007942:	2310      	movs	r3, #16
 8007944:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007948:	e09d      	b.n	8007a86 <UART_SetConfig+0x2e6>
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4a4a      	ldr	r2, [pc, #296]	; (8007a78 <UART_SetConfig+0x2d8>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d125      	bne.n	80079a0 <UART_SetConfig+0x200>
 8007954:	4b45      	ldr	r3, [pc, #276]	; (8007a6c <UART_SetConfig+0x2cc>)
 8007956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800795a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800795e:	2bc0      	cmp	r3, #192	; 0xc0
 8007960:	d016      	beq.n	8007990 <UART_SetConfig+0x1f0>
 8007962:	2bc0      	cmp	r3, #192	; 0xc0
 8007964:	d818      	bhi.n	8007998 <UART_SetConfig+0x1f8>
 8007966:	2b80      	cmp	r3, #128	; 0x80
 8007968:	d00a      	beq.n	8007980 <UART_SetConfig+0x1e0>
 800796a:	2b80      	cmp	r3, #128	; 0x80
 800796c:	d814      	bhi.n	8007998 <UART_SetConfig+0x1f8>
 800796e:	2b00      	cmp	r3, #0
 8007970:	d002      	beq.n	8007978 <UART_SetConfig+0x1d8>
 8007972:	2b40      	cmp	r3, #64	; 0x40
 8007974:	d008      	beq.n	8007988 <UART_SetConfig+0x1e8>
 8007976:	e00f      	b.n	8007998 <UART_SetConfig+0x1f8>
 8007978:	2300      	movs	r3, #0
 800797a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800797e:	e082      	b.n	8007a86 <UART_SetConfig+0x2e6>
 8007980:	2302      	movs	r3, #2
 8007982:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007986:	e07e      	b.n	8007a86 <UART_SetConfig+0x2e6>
 8007988:	2304      	movs	r3, #4
 800798a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800798e:	e07a      	b.n	8007a86 <UART_SetConfig+0x2e6>
 8007990:	2308      	movs	r3, #8
 8007992:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007996:	e076      	b.n	8007a86 <UART_SetConfig+0x2e6>
 8007998:	2310      	movs	r3, #16
 800799a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800799e:	e072      	b.n	8007a86 <UART_SetConfig+0x2e6>
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4a35      	ldr	r2, [pc, #212]	; (8007a7c <UART_SetConfig+0x2dc>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d12a      	bne.n	8007a00 <UART_SetConfig+0x260>
 80079aa:	4b30      	ldr	r3, [pc, #192]	; (8007a6c <UART_SetConfig+0x2cc>)
 80079ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80079b8:	d01a      	beq.n	80079f0 <UART_SetConfig+0x250>
 80079ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80079be:	d81b      	bhi.n	80079f8 <UART_SetConfig+0x258>
 80079c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079c4:	d00c      	beq.n	80079e0 <UART_SetConfig+0x240>
 80079c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079ca:	d815      	bhi.n	80079f8 <UART_SetConfig+0x258>
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d003      	beq.n	80079d8 <UART_SetConfig+0x238>
 80079d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079d4:	d008      	beq.n	80079e8 <UART_SetConfig+0x248>
 80079d6:	e00f      	b.n	80079f8 <UART_SetConfig+0x258>
 80079d8:	2300      	movs	r3, #0
 80079da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80079de:	e052      	b.n	8007a86 <UART_SetConfig+0x2e6>
 80079e0:	2302      	movs	r3, #2
 80079e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80079e6:	e04e      	b.n	8007a86 <UART_SetConfig+0x2e6>
 80079e8:	2304      	movs	r3, #4
 80079ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80079ee:	e04a      	b.n	8007a86 <UART_SetConfig+0x2e6>
 80079f0:	2308      	movs	r3, #8
 80079f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80079f6:	e046      	b.n	8007a86 <UART_SetConfig+0x2e6>
 80079f8:	2310      	movs	r3, #16
 80079fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80079fe:	e042      	b.n	8007a86 <UART_SetConfig+0x2e6>
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4a17      	ldr	r2, [pc, #92]	; (8007a64 <UART_SetConfig+0x2c4>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d13a      	bne.n	8007a80 <UART_SetConfig+0x2e0>
 8007a0a:	4b18      	ldr	r3, [pc, #96]	; (8007a6c <UART_SetConfig+0x2cc>)
 8007a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a10:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007a14:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007a18:	d01a      	beq.n	8007a50 <UART_SetConfig+0x2b0>
 8007a1a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007a1e:	d81b      	bhi.n	8007a58 <UART_SetConfig+0x2b8>
 8007a20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a24:	d00c      	beq.n	8007a40 <UART_SetConfig+0x2a0>
 8007a26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a2a:	d815      	bhi.n	8007a58 <UART_SetConfig+0x2b8>
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d003      	beq.n	8007a38 <UART_SetConfig+0x298>
 8007a30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a34:	d008      	beq.n	8007a48 <UART_SetConfig+0x2a8>
 8007a36:	e00f      	b.n	8007a58 <UART_SetConfig+0x2b8>
 8007a38:	2300      	movs	r3, #0
 8007a3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a3e:	e022      	b.n	8007a86 <UART_SetConfig+0x2e6>
 8007a40:	2302      	movs	r3, #2
 8007a42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a46:	e01e      	b.n	8007a86 <UART_SetConfig+0x2e6>
 8007a48:	2304      	movs	r3, #4
 8007a4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a4e:	e01a      	b.n	8007a86 <UART_SetConfig+0x2e6>
 8007a50:	2308      	movs	r3, #8
 8007a52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a56:	e016      	b.n	8007a86 <UART_SetConfig+0x2e6>
 8007a58:	2310      	movs	r3, #16
 8007a5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a5e:	e012      	b.n	8007a86 <UART_SetConfig+0x2e6>
 8007a60:	efff69f3 	.word	0xefff69f3
 8007a64:	40008000 	.word	0x40008000
 8007a68:	40013800 	.word	0x40013800
 8007a6c:	40021000 	.word	0x40021000
 8007a70:	40004400 	.word	0x40004400
 8007a74:	40004800 	.word	0x40004800
 8007a78:	40004c00 	.word	0x40004c00
 8007a7c:	40005000 	.word	0x40005000
 8007a80:	2310      	movs	r3, #16
 8007a82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	4a9f      	ldr	r2, [pc, #636]	; (8007d08 <UART_SetConfig+0x568>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d17a      	bne.n	8007b86 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007a90:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007a94:	2b08      	cmp	r3, #8
 8007a96:	d824      	bhi.n	8007ae2 <UART_SetConfig+0x342>
 8007a98:	a201      	add	r2, pc, #4	; (adr r2, 8007aa0 <UART_SetConfig+0x300>)
 8007a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a9e:	bf00      	nop
 8007aa0:	08007ac5 	.word	0x08007ac5
 8007aa4:	08007ae3 	.word	0x08007ae3
 8007aa8:	08007acd 	.word	0x08007acd
 8007aac:	08007ae3 	.word	0x08007ae3
 8007ab0:	08007ad3 	.word	0x08007ad3
 8007ab4:	08007ae3 	.word	0x08007ae3
 8007ab8:	08007ae3 	.word	0x08007ae3
 8007abc:	08007ae3 	.word	0x08007ae3
 8007ac0:	08007adb 	.word	0x08007adb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ac4:	f7fd fcba 	bl	800543c <HAL_RCC_GetPCLK1Freq>
 8007ac8:	61f8      	str	r0, [r7, #28]
        break;
 8007aca:	e010      	b.n	8007aee <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007acc:	4b8f      	ldr	r3, [pc, #572]	; (8007d0c <UART_SetConfig+0x56c>)
 8007ace:	61fb      	str	r3, [r7, #28]
        break;
 8007ad0:	e00d      	b.n	8007aee <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ad2:	f7fd fc1b 	bl	800530c <HAL_RCC_GetSysClockFreq>
 8007ad6:	61f8      	str	r0, [r7, #28]
        break;
 8007ad8:	e009      	b.n	8007aee <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ada:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ade:	61fb      	str	r3, [r7, #28]
        break;
 8007ae0:	e005      	b.n	8007aee <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007aec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007aee:	69fb      	ldr	r3, [r7, #28]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	f000 80fb 	beq.w	8007cec <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	685a      	ldr	r2, [r3, #4]
 8007afa:	4613      	mov	r3, r2
 8007afc:	005b      	lsls	r3, r3, #1
 8007afe:	4413      	add	r3, r2
 8007b00:	69fa      	ldr	r2, [r7, #28]
 8007b02:	429a      	cmp	r2, r3
 8007b04:	d305      	bcc.n	8007b12 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	685b      	ldr	r3, [r3, #4]
 8007b0a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007b0c:	69fa      	ldr	r2, [r7, #28]
 8007b0e:	429a      	cmp	r2, r3
 8007b10:	d903      	bls.n	8007b1a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007b12:	2301      	movs	r3, #1
 8007b14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007b18:	e0e8      	b.n	8007cec <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007b1a:	69fb      	ldr	r3, [r7, #28]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	461c      	mov	r4, r3
 8007b20:	4615      	mov	r5, r2
 8007b22:	f04f 0200 	mov.w	r2, #0
 8007b26:	f04f 0300 	mov.w	r3, #0
 8007b2a:	022b      	lsls	r3, r5, #8
 8007b2c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007b30:	0222      	lsls	r2, r4, #8
 8007b32:	68f9      	ldr	r1, [r7, #12]
 8007b34:	6849      	ldr	r1, [r1, #4]
 8007b36:	0849      	lsrs	r1, r1, #1
 8007b38:	2000      	movs	r0, #0
 8007b3a:	4688      	mov	r8, r1
 8007b3c:	4681      	mov	r9, r0
 8007b3e:	eb12 0a08 	adds.w	sl, r2, r8
 8007b42:	eb43 0b09 	adc.w	fp, r3, r9
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	685b      	ldr	r3, [r3, #4]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	603b      	str	r3, [r7, #0]
 8007b4e:	607a      	str	r2, [r7, #4]
 8007b50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b54:	4650      	mov	r0, sl
 8007b56:	4659      	mov	r1, fp
 8007b58:	f7f9 f886 	bl	8000c68 <__aeabi_uldivmod>
 8007b5c:	4602      	mov	r2, r0
 8007b5e:	460b      	mov	r3, r1
 8007b60:	4613      	mov	r3, r2
 8007b62:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007b64:	69bb      	ldr	r3, [r7, #24]
 8007b66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b6a:	d308      	bcc.n	8007b7e <UART_SetConfig+0x3de>
 8007b6c:	69bb      	ldr	r3, [r7, #24]
 8007b6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b72:	d204      	bcs.n	8007b7e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	69ba      	ldr	r2, [r7, #24]
 8007b7a:	60da      	str	r2, [r3, #12]
 8007b7c:	e0b6      	b.n	8007cec <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8007b7e:	2301      	movs	r3, #1
 8007b80:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007b84:	e0b2      	b.n	8007cec <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	69db      	ldr	r3, [r3, #28]
 8007b8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b8e:	d15e      	bne.n	8007c4e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007b90:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007b94:	2b08      	cmp	r3, #8
 8007b96:	d828      	bhi.n	8007bea <UART_SetConfig+0x44a>
 8007b98:	a201      	add	r2, pc, #4	; (adr r2, 8007ba0 <UART_SetConfig+0x400>)
 8007b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b9e:	bf00      	nop
 8007ba0:	08007bc5 	.word	0x08007bc5
 8007ba4:	08007bcd 	.word	0x08007bcd
 8007ba8:	08007bd5 	.word	0x08007bd5
 8007bac:	08007beb 	.word	0x08007beb
 8007bb0:	08007bdb 	.word	0x08007bdb
 8007bb4:	08007beb 	.word	0x08007beb
 8007bb8:	08007beb 	.word	0x08007beb
 8007bbc:	08007beb 	.word	0x08007beb
 8007bc0:	08007be3 	.word	0x08007be3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007bc4:	f7fd fc3a 	bl	800543c <HAL_RCC_GetPCLK1Freq>
 8007bc8:	61f8      	str	r0, [r7, #28]
        break;
 8007bca:	e014      	b.n	8007bf6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007bcc:	f7fd fc4c 	bl	8005468 <HAL_RCC_GetPCLK2Freq>
 8007bd0:	61f8      	str	r0, [r7, #28]
        break;
 8007bd2:	e010      	b.n	8007bf6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007bd4:	4b4d      	ldr	r3, [pc, #308]	; (8007d0c <UART_SetConfig+0x56c>)
 8007bd6:	61fb      	str	r3, [r7, #28]
        break;
 8007bd8:	e00d      	b.n	8007bf6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007bda:	f7fd fb97 	bl	800530c <HAL_RCC_GetSysClockFreq>
 8007bde:	61f8      	str	r0, [r7, #28]
        break;
 8007be0:	e009      	b.n	8007bf6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007be2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007be6:	61fb      	str	r3, [r7, #28]
        break;
 8007be8:	e005      	b.n	8007bf6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007bea:	2300      	movs	r3, #0
 8007bec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007bf4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007bf6:	69fb      	ldr	r3, [r7, #28]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d077      	beq.n	8007cec <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007bfc:	69fb      	ldr	r3, [r7, #28]
 8007bfe:	005a      	lsls	r2, r3, #1
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	685b      	ldr	r3, [r3, #4]
 8007c04:	085b      	lsrs	r3, r3, #1
 8007c06:	441a      	add	r2, r3
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	685b      	ldr	r3, [r3, #4]
 8007c0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c10:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c12:	69bb      	ldr	r3, [r7, #24]
 8007c14:	2b0f      	cmp	r3, #15
 8007c16:	d916      	bls.n	8007c46 <UART_SetConfig+0x4a6>
 8007c18:	69bb      	ldr	r3, [r7, #24]
 8007c1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c1e:	d212      	bcs.n	8007c46 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007c20:	69bb      	ldr	r3, [r7, #24]
 8007c22:	b29b      	uxth	r3, r3
 8007c24:	f023 030f 	bic.w	r3, r3, #15
 8007c28:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007c2a:	69bb      	ldr	r3, [r7, #24]
 8007c2c:	085b      	lsrs	r3, r3, #1
 8007c2e:	b29b      	uxth	r3, r3
 8007c30:	f003 0307 	and.w	r3, r3, #7
 8007c34:	b29a      	uxth	r2, r3
 8007c36:	8afb      	ldrh	r3, [r7, #22]
 8007c38:	4313      	orrs	r3, r2
 8007c3a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	8afa      	ldrh	r2, [r7, #22]
 8007c42:	60da      	str	r2, [r3, #12]
 8007c44:	e052      	b.n	8007cec <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007c46:	2301      	movs	r3, #1
 8007c48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007c4c:	e04e      	b.n	8007cec <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007c4e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007c52:	2b08      	cmp	r3, #8
 8007c54:	d827      	bhi.n	8007ca6 <UART_SetConfig+0x506>
 8007c56:	a201      	add	r2, pc, #4	; (adr r2, 8007c5c <UART_SetConfig+0x4bc>)
 8007c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c5c:	08007c81 	.word	0x08007c81
 8007c60:	08007c89 	.word	0x08007c89
 8007c64:	08007c91 	.word	0x08007c91
 8007c68:	08007ca7 	.word	0x08007ca7
 8007c6c:	08007c97 	.word	0x08007c97
 8007c70:	08007ca7 	.word	0x08007ca7
 8007c74:	08007ca7 	.word	0x08007ca7
 8007c78:	08007ca7 	.word	0x08007ca7
 8007c7c:	08007c9f 	.word	0x08007c9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c80:	f7fd fbdc 	bl	800543c <HAL_RCC_GetPCLK1Freq>
 8007c84:	61f8      	str	r0, [r7, #28]
        break;
 8007c86:	e014      	b.n	8007cb2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c88:	f7fd fbee 	bl	8005468 <HAL_RCC_GetPCLK2Freq>
 8007c8c:	61f8      	str	r0, [r7, #28]
        break;
 8007c8e:	e010      	b.n	8007cb2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c90:	4b1e      	ldr	r3, [pc, #120]	; (8007d0c <UART_SetConfig+0x56c>)
 8007c92:	61fb      	str	r3, [r7, #28]
        break;
 8007c94:	e00d      	b.n	8007cb2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c96:	f7fd fb39 	bl	800530c <HAL_RCC_GetSysClockFreq>
 8007c9a:	61f8      	str	r0, [r7, #28]
        break;
 8007c9c:	e009      	b.n	8007cb2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ca2:	61fb      	str	r3, [r7, #28]
        break;
 8007ca4:	e005      	b.n	8007cb2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007caa:	2301      	movs	r3, #1
 8007cac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007cb0:	bf00      	nop
    }

    if (pclk != 0U)
 8007cb2:	69fb      	ldr	r3, [r7, #28]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d019      	beq.n	8007cec <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	685b      	ldr	r3, [r3, #4]
 8007cbc:	085a      	lsrs	r2, r3, #1
 8007cbe:	69fb      	ldr	r3, [r7, #28]
 8007cc0:	441a      	add	r2, r3
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	685b      	ldr	r3, [r3, #4]
 8007cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cca:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ccc:	69bb      	ldr	r3, [r7, #24]
 8007cce:	2b0f      	cmp	r3, #15
 8007cd0:	d909      	bls.n	8007ce6 <UART_SetConfig+0x546>
 8007cd2:	69bb      	ldr	r3, [r7, #24]
 8007cd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cd8:	d205      	bcs.n	8007ce6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007cda:	69bb      	ldr	r3, [r7, #24]
 8007cdc:	b29a      	uxth	r2, r3
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	60da      	str	r2, [r3, #12]
 8007ce4:	e002      	b.n	8007cec <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007cf8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	3728      	adds	r7, #40	; 0x28
 8007d00:	46bd      	mov	sp, r7
 8007d02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007d06:	bf00      	nop
 8007d08:	40008000 	.word	0x40008000
 8007d0c:	00f42400 	.word	0x00f42400

08007d10 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007d10:	b480      	push	{r7}
 8007d12:	b083      	sub	sp, #12
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d1c:	f003 0301 	and.w	r3, r3, #1
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d00a      	beq.n	8007d3a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	685b      	ldr	r3, [r3, #4]
 8007d2a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	430a      	orrs	r2, r1
 8007d38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d3e:	f003 0302 	and.w	r3, r3, #2
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d00a      	beq.n	8007d5c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	685b      	ldr	r3, [r3, #4]
 8007d4c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	430a      	orrs	r2, r1
 8007d5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d60:	f003 0304 	and.w	r3, r3, #4
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d00a      	beq.n	8007d7e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	685b      	ldr	r3, [r3, #4]
 8007d6e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	430a      	orrs	r2, r1
 8007d7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d82:	f003 0308 	and.w	r3, r3, #8
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d00a      	beq.n	8007da0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	685b      	ldr	r3, [r3, #4]
 8007d90:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	430a      	orrs	r2, r1
 8007d9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da4:	f003 0310 	and.w	r3, r3, #16
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d00a      	beq.n	8007dc2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	689b      	ldr	r3, [r3, #8]
 8007db2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	430a      	orrs	r2, r1
 8007dc0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dc6:	f003 0320 	and.w	r3, r3, #32
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d00a      	beq.n	8007de4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	689b      	ldr	r3, [r3, #8]
 8007dd4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	430a      	orrs	r2, r1
 8007de2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d01a      	beq.n	8007e26 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	685b      	ldr	r3, [r3, #4]
 8007df6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	430a      	orrs	r2, r1
 8007e04:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e0e:	d10a      	bne.n	8007e26 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	685b      	ldr	r3, [r3, #4]
 8007e16:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	430a      	orrs	r2, r1
 8007e24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d00a      	beq.n	8007e48 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	685b      	ldr	r3, [r3, #4]
 8007e38:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	430a      	orrs	r2, r1
 8007e46:	605a      	str	r2, [r3, #4]
  }
}
 8007e48:	bf00      	nop
 8007e4a:	370c      	adds	r7, #12
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e52:	4770      	bx	lr

08007e54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b086      	sub	sp, #24
 8007e58:	af02      	add	r7, sp, #8
 8007e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007e64:	f7fa fdd2 	bl	8002a0c <HAL_GetTick>
 8007e68:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f003 0308 	and.w	r3, r3, #8
 8007e74:	2b08      	cmp	r3, #8
 8007e76:	d10e      	bne.n	8007e96 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e78:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007e7c:	9300      	str	r3, [sp, #0]
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	2200      	movs	r2, #0
 8007e82:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f000 f82d 	bl	8007ee6 <UART_WaitOnFlagUntilTimeout>
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d001      	beq.n	8007e96 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e92:	2303      	movs	r3, #3
 8007e94:	e023      	b.n	8007ede <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f003 0304 	and.w	r3, r3, #4
 8007ea0:	2b04      	cmp	r3, #4
 8007ea2:	d10e      	bne.n	8007ec2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ea4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007ea8:	9300      	str	r3, [sp, #0]
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	2200      	movs	r2, #0
 8007eae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f000 f817 	bl	8007ee6 <UART_WaitOnFlagUntilTimeout>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d001      	beq.n	8007ec2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ebe:	2303      	movs	r3, #3
 8007ec0:	e00d      	b.n	8007ede <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2220      	movs	r2, #32
 8007ec6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2220      	movs	r2, #32
 8007ecc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007edc:	2300      	movs	r3, #0
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	3710      	adds	r7, #16
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}

08007ee6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007ee6:	b580      	push	{r7, lr}
 8007ee8:	b09c      	sub	sp, #112	; 0x70
 8007eea:	af00      	add	r7, sp, #0
 8007eec:	60f8      	str	r0, [r7, #12]
 8007eee:	60b9      	str	r1, [r7, #8]
 8007ef0:	603b      	str	r3, [r7, #0]
 8007ef2:	4613      	mov	r3, r2
 8007ef4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ef6:	e0a5      	b.n	8008044 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ef8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007efa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007efe:	f000 80a1 	beq.w	8008044 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f02:	f7fa fd83 	bl	8002a0c <HAL_GetTick>
 8007f06:	4602      	mov	r2, r0
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	1ad3      	subs	r3, r2, r3
 8007f0c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007f0e:	429a      	cmp	r2, r3
 8007f10:	d302      	bcc.n	8007f18 <UART_WaitOnFlagUntilTimeout+0x32>
 8007f12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d13e      	bne.n	8007f96 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f20:	e853 3f00 	ldrex	r3, [r3]
 8007f24:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007f26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f28:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007f2c:	667b      	str	r3, [r7, #100]	; 0x64
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	461a      	mov	r2, r3
 8007f34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f36:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007f38:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f3a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007f3c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007f3e:	e841 2300 	strex	r3, r2, [r1]
 8007f42:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007f44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d1e6      	bne.n	8007f18 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	3308      	adds	r3, #8
 8007f50:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f54:	e853 3f00 	ldrex	r3, [r3]
 8007f58:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f5c:	f023 0301 	bic.w	r3, r3, #1
 8007f60:	663b      	str	r3, [r7, #96]	; 0x60
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	3308      	adds	r3, #8
 8007f68:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007f6a:	64ba      	str	r2, [r7, #72]	; 0x48
 8007f6c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f6e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007f70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f72:	e841 2300 	strex	r3, r2, [r1]
 8007f76:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007f78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d1e5      	bne.n	8007f4a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	2220      	movs	r2, #32
 8007f82:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	2220      	movs	r2, #32
 8007f88:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007f92:	2303      	movs	r3, #3
 8007f94:	e067      	b.n	8008066 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f003 0304 	and.w	r3, r3, #4
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d04f      	beq.n	8008044 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	69db      	ldr	r3, [r3, #28]
 8007faa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007fae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007fb2:	d147      	bne.n	8008044 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007fbc:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fc6:	e853 3f00 	ldrex	r3, [r3]
 8007fca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fce:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007fd2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	461a      	mov	r2, r3
 8007fda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fdc:	637b      	str	r3, [r7, #52]	; 0x34
 8007fde:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fe0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007fe2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007fe4:	e841 2300 	strex	r3, r2, [r1]
 8007fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d1e6      	bne.n	8007fbe <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	3308      	adds	r3, #8
 8007ff6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	e853 3f00 	ldrex	r3, [r3]
 8007ffe:	613b      	str	r3, [r7, #16]
   return(result);
 8008000:	693b      	ldr	r3, [r7, #16]
 8008002:	f023 0301 	bic.w	r3, r3, #1
 8008006:	66bb      	str	r3, [r7, #104]	; 0x68
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	3308      	adds	r3, #8
 800800e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008010:	623a      	str	r2, [r7, #32]
 8008012:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008014:	69f9      	ldr	r1, [r7, #28]
 8008016:	6a3a      	ldr	r2, [r7, #32]
 8008018:	e841 2300 	strex	r3, r2, [r1]
 800801c:	61bb      	str	r3, [r7, #24]
   return(result);
 800801e:	69bb      	ldr	r3, [r7, #24]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d1e5      	bne.n	8007ff0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	2220      	movs	r2, #32
 8008028:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	2220      	movs	r2, #32
 800802e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	2220      	movs	r2, #32
 8008034:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	2200      	movs	r2, #0
 800803c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008040:	2303      	movs	r3, #3
 8008042:	e010      	b.n	8008066 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	69da      	ldr	r2, [r3, #28]
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	4013      	ands	r3, r2
 800804e:	68ba      	ldr	r2, [r7, #8]
 8008050:	429a      	cmp	r2, r3
 8008052:	bf0c      	ite	eq
 8008054:	2301      	moveq	r3, #1
 8008056:	2300      	movne	r3, #0
 8008058:	b2db      	uxtb	r3, r3
 800805a:	461a      	mov	r2, r3
 800805c:	79fb      	ldrb	r3, [r7, #7]
 800805e:	429a      	cmp	r2, r3
 8008060:	f43f af4a 	beq.w	8007ef8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008064:	2300      	movs	r3, #0
}
 8008066:	4618      	mov	r0, r3
 8008068:	3770      	adds	r7, #112	; 0x70
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}
	...

08008070 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b096      	sub	sp, #88	; 0x58
 8008074:	af00      	add	r7, sp, #0
 8008076:	60f8      	str	r0, [r7, #12]
 8008078:	60b9      	str	r1, [r7, #8]
 800807a:	4613      	mov	r3, r2
 800807c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	68ba      	ldr	r2, [r7, #8]
 8008082:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	88fa      	ldrh	r2, [r7, #6]
 8008088:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	2200      	movs	r2, #0
 8008090:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	2222      	movs	r2, #34	; 0x22
 8008098:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d02b      	beq.n	80080fa <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080a6:	4a42      	ldr	r2, [pc, #264]	; (80081b0 <UART_Start_Receive_DMA+0x140>)
 80080a8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080ae:	4a41      	ldr	r2, [pc, #260]	; (80081b4 <UART_Start_Receive_DMA+0x144>)
 80080b0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080b6:	4a40      	ldr	r2, [pc, #256]	; (80081b8 <UART_Start_Receive_DMA+0x148>)
 80080b8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080be:	2200      	movs	r2, #0
 80080c0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	3324      	adds	r3, #36	; 0x24
 80080cc:	4619      	mov	r1, r3
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080d2:	461a      	mov	r2, r3
 80080d4:	88fb      	ldrh	r3, [r7, #6]
 80080d6:	f7fa fe93 	bl	8002e00 <HAL_DMA_Start_IT>
 80080da:	4603      	mov	r3, r0
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d00c      	beq.n	80080fa <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	2210      	movs	r2, #16
 80080e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	2200      	movs	r2, #0
 80080ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	2220      	movs	r2, #32
 80080f4:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 80080f6:	2301      	movs	r3, #1
 80080f8:	e055      	b.n	80081a6 <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	2200      	movs	r2, #0
 80080fe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	691b      	ldr	r3, [r3, #16]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d018      	beq.n	800813c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008110:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008112:	e853 3f00 	ldrex	r3, [r3]
 8008116:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800811a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800811e:	657b      	str	r3, [r7, #84]	; 0x54
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	461a      	mov	r2, r3
 8008126:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008128:	64bb      	str	r3, [r7, #72]	; 0x48
 800812a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800812c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800812e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008130:	e841 2300 	strex	r3, r2, [r1]
 8008134:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008136:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008138:	2b00      	cmp	r3, #0
 800813a:	d1e6      	bne.n	800810a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	3308      	adds	r3, #8
 8008142:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008146:	e853 3f00 	ldrex	r3, [r3]
 800814a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800814c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800814e:	f043 0301 	orr.w	r3, r3, #1
 8008152:	653b      	str	r3, [r7, #80]	; 0x50
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	3308      	adds	r3, #8
 800815a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800815c:	637a      	str	r2, [r7, #52]	; 0x34
 800815e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008160:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008162:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008164:	e841 2300 	strex	r3, r2, [r1]
 8008168:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800816a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800816c:	2b00      	cmp	r3, #0
 800816e:	d1e5      	bne.n	800813c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	3308      	adds	r3, #8
 8008176:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008178:	697b      	ldr	r3, [r7, #20]
 800817a:	e853 3f00 	ldrex	r3, [r3]
 800817e:	613b      	str	r3, [r7, #16]
   return(result);
 8008180:	693b      	ldr	r3, [r7, #16]
 8008182:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008186:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	3308      	adds	r3, #8
 800818e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008190:	623a      	str	r2, [r7, #32]
 8008192:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008194:	69f9      	ldr	r1, [r7, #28]
 8008196:	6a3a      	ldr	r2, [r7, #32]
 8008198:	e841 2300 	strex	r3, r2, [r1]
 800819c:	61bb      	str	r3, [r7, #24]
   return(result);
 800819e:	69bb      	ldr	r3, [r7, #24]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d1e5      	bne.n	8008170 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80081a4:	2300      	movs	r3, #0
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	3758      	adds	r7, #88	; 0x58
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}
 80081ae:	bf00      	nop
 80081b0:	080082cf 	.word	0x080082cf
 80081b4:	080083f3 	.word	0x080083f3
 80081b8:	0800842b 	.word	0x0800842b

080081bc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80081bc:	b480      	push	{r7}
 80081be:	b089      	sub	sp, #36	; 0x24
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	e853 3f00 	ldrex	r3, [r3]
 80081d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80081d8:	61fb      	str	r3, [r7, #28]
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	461a      	mov	r2, r3
 80081e0:	69fb      	ldr	r3, [r7, #28]
 80081e2:	61bb      	str	r3, [r7, #24]
 80081e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081e6:	6979      	ldr	r1, [r7, #20]
 80081e8:	69ba      	ldr	r2, [r7, #24]
 80081ea:	e841 2300 	strex	r3, r2, [r1]
 80081ee:	613b      	str	r3, [r7, #16]
   return(result);
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d1e6      	bne.n	80081c4 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2220      	movs	r2, #32
 80081fa:	679a      	str	r2, [r3, #120]	; 0x78
}
 80081fc:	bf00      	nop
 80081fe:	3724      	adds	r7, #36	; 0x24
 8008200:	46bd      	mov	sp, r7
 8008202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008206:	4770      	bx	lr

08008208 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008208:	b480      	push	{r7}
 800820a:	b095      	sub	sp, #84	; 0x54
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008218:	e853 3f00 	ldrex	r3, [r3]
 800821c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800821e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008220:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008224:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	461a      	mov	r2, r3
 800822c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800822e:	643b      	str	r3, [r7, #64]	; 0x40
 8008230:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008232:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008234:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008236:	e841 2300 	strex	r3, r2, [r1]
 800823a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800823c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800823e:	2b00      	cmp	r3, #0
 8008240:	d1e6      	bne.n	8008210 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	3308      	adds	r3, #8
 8008248:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800824a:	6a3b      	ldr	r3, [r7, #32]
 800824c:	e853 3f00 	ldrex	r3, [r3]
 8008250:	61fb      	str	r3, [r7, #28]
   return(result);
 8008252:	69fb      	ldr	r3, [r7, #28]
 8008254:	f023 0301 	bic.w	r3, r3, #1
 8008258:	64bb      	str	r3, [r7, #72]	; 0x48
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	3308      	adds	r3, #8
 8008260:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008262:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008264:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008266:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008268:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800826a:	e841 2300 	strex	r3, r2, [r1]
 800826e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008272:	2b00      	cmp	r3, #0
 8008274:	d1e5      	bne.n	8008242 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800827a:	2b01      	cmp	r3, #1
 800827c:	d118      	bne.n	80082b0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	e853 3f00 	ldrex	r3, [r3]
 800828a:	60bb      	str	r3, [r7, #8]
   return(result);
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	f023 0310 	bic.w	r3, r3, #16
 8008292:	647b      	str	r3, [r7, #68]	; 0x44
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	461a      	mov	r2, r3
 800829a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800829c:	61bb      	str	r3, [r7, #24]
 800829e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082a0:	6979      	ldr	r1, [r7, #20]
 80082a2:	69ba      	ldr	r2, [r7, #24]
 80082a4:	e841 2300 	strex	r3, r2, [r1]
 80082a8:	613b      	str	r3, [r7, #16]
   return(result);
 80082aa:	693b      	ldr	r3, [r7, #16]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d1e6      	bne.n	800827e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2220      	movs	r2, #32
 80082b4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2200      	movs	r2, #0
 80082ba:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2200      	movs	r2, #0
 80082c0:	665a      	str	r2, [r3, #100]	; 0x64
}
 80082c2:	bf00      	nop
 80082c4:	3754      	adds	r7, #84	; 0x54
 80082c6:	46bd      	mov	sp, r7
 80082c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082cc:	4770      	bx	lr

080082ce <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80082ce:	b580      	push	{r7, lr}
 80082d0:	b09c      	sub	sp, #112	; 0x70
 80082d2:	af00      	add	r7, sp, #0
 80082d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082da:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f003 0320 	and.w	r3, r3, #32
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d170      	bne.n	80083cc <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 80082ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082ec:	2200      	movs	r2, #0
 80082ee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80082f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082fa:	e853 3f00 	ldrex	r3, [r3]
 80082fe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008300:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008302:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008306:	66bb      	str	r3, [r7, #104]	; 0x68
 8008308:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	461a      	mov	r2, r3
 800830e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008310:	65bb      	str	r3, [r7, #88]	; 0x58
 8008312:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008314:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008316:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008318:	e841 2300 	strex	r3, r2, [r1]
 800831c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800831e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008320:	2b00      	cmp	r3, #0
 8008322:	d1e6      	bne.n	80082f2 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008324:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	3308      	adds	r3, #8
 800832a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800832c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800832e:	e853 3f00 	ldrex	r3, [r3]
 8008332:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008336:	f023 0301 	bic.w	r3, r3, #1
 800833a:	667b      	str	r3, [r7, #100]	; 0x64
 800833c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	3308      	adds	r3, #8
 8008342:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008344:	647a      	str	r2, [r7, #68]	; 0x44
 8008346:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008348:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800834a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800834c:	e841 2300 	strex	r3, r2, [r1]
 8008350:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008352:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008354:	2b00      	cmp	r3, #0
 8008356:	d1e5      	bne.n	8008324 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008358:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	3308      	adds	r3, #8
 800835e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008362:	e853 3f00 	ldrex	r3, [r3]
 8008366:	623b      	str	r3, [r7, #32]
   return(result);
 8008368:	6a3b      	ldr	r3, [r7, #32]
 800836a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800836e:	663b      	str	r3, [r7, #96]	; 0x60
 8008370:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	3308      	adds	r3, #8
 8008376:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008378:	633a      	str	r2, [r7, #48]	; 0x30
 800837a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800837c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800837e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008380:	e841 2300 	strex	r3, r2, [r1]
 8008384:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008388:	2b00      	cmp	r3, #0
 800838a:	d1e5      	bne.n	8008358 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800838c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800838e:	2220      	movs	r2, #32
 8008390:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008392:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008394:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008396:	2b01      	cmp	r3, #1
 8008398:	d118      	bne.n	80083cc <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800839a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083a0:	693b      	ldr	r3, [r7, #16]
 80083a2:	e853 3f00 	ldrex	r3, [r3]
 80083a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	f023 0310 	bic.w	r3, r3, #16
 80083ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80083b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	461a      	mov	r2, r3
 80083b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80083b8:	61fb      	str	r3, [r7, #28]
 80083ba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083bc:	69b9      	ldr	r1, [r7, #24]
 80083be:	69fa      	ldr	r2, [r7, #28]
 80083c0:	e841 2300 	strex	r3, r2, [r1]
 80083c4:	617b      	str	r3, [r7, #20]
   return(result);
 80083c6:	697b      	ldr	r3, [r7, #20]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d1e6      	bne.n	800839a <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083d0:	2b01      	cmp	r3, #1
 80083d2:	d107      	bne.n	80083e4 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80083d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083d6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80083da:	4619      	mov	r1, r3
 80083dc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80083de:	f7ff f9d3 	bl	8007788 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80083e2:	e002      	b.n	80083ea <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 80083e4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80083e6:	f7f9 fec9 	bl	800217c <HAL_UART_RxCpltCallback>
}
 80083ea:	bf00      	nop
 80083ec:	3770      	adds	r7, #112	; 0x70
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}

080083f2 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80083f2:	b580      	push	{r7, lr}
 80083f4:	b084      	sub	sp, #16
 80083f6:	af00      	add	r7, sp, #0
 80083f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083fe:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008404:	2b01      	cmp	r3, #1
 8008406:	d109      	bne.n	800841c <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800840e:	085b      	lsrs	r3, r3, #1
 8008410:	b29b      	uxth	r3, r3
 8008412:	4619      	mov	r1, r3
 8008414:	68f8      	ldr	r0, [r7, #12]
 8008416:	f7ff f9b7 	bl	8007788 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800841a:	e002      	b.n	8008422 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800841c:	68f8      	ldr	r0, [r7, #12]
 800841e:	f7ff f99f 	bl	8007760 <HAL_UART_RxHalfCpltCallback>
}
 8008422:	bf00      	nop
 8008424:	3710      	adds	r7, #16
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}

0800842a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800842a:	b580      	push	{r7, lr}
 800842c:	b086      	sub	sp, #24
 800842e:	af00      	add	r7, sp, #0
 8008430:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008436:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008438:	697b      	ldr	r3, [r7, #20]
 800843a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800843c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008442:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	689b      	ldr	r3, [r3, #8]
 800844a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800844e:	2b80      	cmp	r3, #128	; 0x80
 8008450:	d109      	bne.n	8008466 <UART_DMAError+0x3c>
 8008452:	693b      	ldr	r3, [r7, #16]
 8008454:	2b21      	cmp	r3, #33	; 0x21
 8008456:	d106      	bne.n	8008466 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	2200      	movs	r2, #0
 800845c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8008460:	6978      	ldr	r0, [r7, #20]
 8008462:	f7ff feab 	bl	80081bc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008466:	697b      	ldr	r3, [r7, #20]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	689b      	ldr	r3, [r3, #8]
 800846c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008470:	2b40      	cmp	r3, #64	; 0x40
 8008472:	d109      	bne.n	8008488 <UART_DMAError+0x5e>
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	2b22      	cmp	r3, #34	; 0x22
 8008478:	d106      	bne.n	8008488 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800847a:	697b      	ldr	r3, [r7, #20]
 800847c:	2200      	movs	r2, #0
 800847e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8008482:	6978      	ldr	r0, [r7, #20]
 8008484:	f7ff fec0 	bl	8008208 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008488:	697b      	ldr	r3, [r7, #20]
 800848a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800848e:	f043 0210 	orr.w	r2, r3, #16
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008498:	6978      	ldr	r0, [r7, #20]
 800849a:	f7ff f96b 	bl	8007774 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800849e:	bf00      	nop
 80084a0:	3718      	adds	r7, #24
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}

080084a6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80084a6:	b580      	push	{r7, lr}
 80084a8:	b084      	sub	sp, #16
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084b2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	2200      	movs	r2, #0
 80084b8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	2200      	movs	r2, #0
 80084c0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80084c4:	68f8      	ldr	r0, [r7, #12]
 80084c6:	f7ff f955 	bl	8007774 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80084ca:	bf00      	nop
 80084cc:	3710      	adds	r7, #16
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}

080084d2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80084d2:	b580      	push	{r7, lr}
 80084d4:	b088      	sub	sp, #32
 80084d6:	af00      	add	r7, sp, #0
 80084d8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	e853 3f00 	ldrex	r3, [r3]
 80084e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084ee:	61fb      	str	r3, [r7, #28]
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	461a      	mov	r2, r3
 80084f6:	69fb      	ldr	r3, [r7, #28]
 80084f8:	61bb      	str	r3, [r7, #24]
 80084fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084fc:	6979      	ldr	r1, [r7, #20]
 80084fe:	69ba      	ldr	r2, [r7, #24]
 8008500:	e841 2300 	strex	r3, r2, [r1]
 8008504:	613b      	str	r3, [r7, #16]
   return(result);
 8008506:	693b      	ldr	r3, [r7, #16]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d1e6      	bne.n	80084da <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2220      	movs	r2, #32
 8008510:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2200      	movs	r2, #0
 8008516:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	f7ff f917 	bl	800774c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800851e:	bf00      	nop
 8008520:	3720      	adds	r7, #32
 8008522:	46bd      	mov	sp, r7
 8008524:	bd80      	pop	{r7, pc}

08008526 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008526:	b480      	push	{r7}
 8008528:	b083      	sub	sp, #12
 800852a:	af00      	add	r7, sp, #0
 800852c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800852e:	bf00      	nop
 8008530:	370c      	adds	r7, #12
 8008532:	46bd      	mov	sp, r7
 8008534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008538:	4770      	bx	lr

0800853a <bitmap_init>:
    return bitmap->width * (bitmap->depth / 8) * bitmap->height;
};

/* Initialise bitmap with given buffer. */
void bitmap_init(bitmap_t *bitmap, uint8_t *buffer)
{
 800853a:	b480      	push	{r7}
 800853c:	b083      	sub	sp, #12
 800853e:	af00      	add	r7, sp, #0
 8008540:	6078      	str	r0, [r7, #4]
 8008542:	6039      	str	r1, [r7, #0]
    bitmap->pitch = bitmap->width * (bitmap->depth / 8);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	881a      	ldrh	r2, [r3, #0]
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	799b      	ldrb	r3, [r3, #6]
 800854c:	08db      	lsrs	r3, r3, #3
 800854e:	b2db      	uxtb	r3, r3
 8008550:	b29b      	uxth	r3, r3
 8008552:	fb12 f303 	smulbb	r3, r2, r3
 8008556:	b29a      	uxth	r2, r3
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	809a      	strh	r2, [r3, #4]
    bitmap->size = bitmap->pitch * bitmap->height;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	889b      	ldrh	r3, [r3, #4]
 8008560:	461a      	mov	r2, r3
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	885b      	ldrh	r3, [r3, #2]
 8008566:	fb02 f303 	mul.w	r3, r2, r3
 800856a:	461a      	mov	r2, r3
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	609a      	str	r2, [r3, #8]
    bitmap->buffer = buffer;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	683a      	ldr	r2, [r7, #0]
 8008574:	60da      	str	r2, [r3, #12]
}
 8008576:	bf00      	nop
 8008578:	370c      	adds	r7, #12
 800857a:	46bd      	mov	sp, r7
 800857c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008580:	4770      	bx	lr

08008582 <code>:
static const uint8_t RIGHT = 0b0010;
static const uint8_t BOTTOM = 0b0100;
static const uint8_t TOP = 0b1000;

static uint8_t code(int16_t x0, int16_t y0, window_t window)
{
 8008582:	b490      	push	{r4, r7}
 8008584:	b086      	sub	sp, #24
 8008586:	af00      	add	r7, sp, #0
 8008588:	4604      	mov	r4, r0
 800858a:	4608      	mov	r0, r1
 800858c:	1d39      	adds	r1, r7, #4
 800858e:	e881 000c 	stmia.w	r1, {r2, r3}
 8008592:	4623      	mov	r3, r4
 8008594:	81fb      	strh	r3, [r7, #14]
 8008596:	4603      	mov	r3, r0
 8008598:	81bb      	strh	r3, [r7, #12]
    uint8_t code = INSIDE;
 800859a:	2300      	movs	r3, #0
 800859c:	75fb      	strb	r3, [r7, #23]

    if (x0 < window.x0) {
 800859e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80085a2:	88ba      	ldrh	r2, [r7, #4]
 80085a4:	4293      	cmp	r3, r2
 80085a6:	da04      	bge.n	80085b2 <code+0x30>
        code |= LEFT;
 80085a8:	2201      	movs	r2, #1
 80085aa:	7dfb      	ldrb	r3, [r7, #23]
 80085ac:	4313      	orrs	r3, r2
 80085ae:	75fb      	strb	r3, [r7, #23]
 80085b0:	e008      	b.n	80085c4 <code+0x42>
    } else if (x0 > window.x1) {
 80085b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80085b6:	893a      	ldrh	r2, [r7, #8]
 80085b8:	4293      	cmp	r3, r2
 80085ba:	dd03      	ble.n	80085c4 <code+0x42>
        code |= RIGHT;
 80085bc:	2202      	movs	r2, #2
 80085be:	7dfb      	ldrb	r3, [r7, #23]
 80085c0:	4313      	orrs	r3, r2
 80085c2:	75fb      	strb	r3, [r7, #23]
    } if (y0 < window.y0) {
 80085c4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80085c8:	88fa      	ldrh	r2, [r7, #6]
 80085ca:	4293      	cmp	r3, r2
 80085cc:	da04      	bge.n	80085d8 <code+0x56>
        code |= BOTTOM;
 80085ce:	2204      	movs	r2, #4
 80085d0:	7dfb      	ldrb	r3, [r7, #23]
 80085d2:	4313      	orrs	r3, r2
 80085d4:	75fb      	strb	r3, [r7, #23]
 80085d6:	e008      	b.n	80085ea <code+0x68>
    } else if (y0 > window.y1) {
 80085d8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80085dc:	897a      	ldrh	r2, [r7, #10]
 80085de:	4293      	cmp	r3, r2
 80085e0:	dd03      	ble.n	80085ea <code+0x68>
        code |= TOP;
 80085e2:	2208      	movs	r2, #8
 80085e4:	7dfb      	ldrb	r3, [r7, #23]
 80085e6:	4313      	orrs	r3, r2
 80085e8:	75fb      	strb	r3, [r7, #23]
    }

    return code;
 80085ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80085ec:	4618      	mov	r0, r3
 80085ee:	3718      	adds	r7, #24
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bc90      	pop	{r4, r7}
 80085f4:	4770      	bx	lr

080085f6 <clip_line>:

bool clip_line(int16_t *x0, int16_t *y0, int16_t *x1, int16_t *y1, window_t window)
{
 80085f6:	b580      	push	{r7, lr}
 80085f8:	b088      	sub	sp, #32
 80085fa:	af00      	add	r7, sp, #0
 80085fc:	60f8      	str	r0, [r7, #12]
 80085fe:	60b9      	str	r1, [r7, #8]
 8008600:	607a      	str	r2, [r7, #4]
 8008602:	603b      	str	r3, [r7, #0]
    uint8_t code0 = code(*x0, *y0, window);
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	f9b3 0000 	ldrsh.w	r0, [r3]
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	f9b3 1000 	ldrsh.w	r1, [r3]
 8008610:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008614:	cb0c      	ldmia	r3, {r2, r3}
 8008616:	f7ff ffb4 	bl	8008582 <code>
 800861a:	4603      	mov	r3, r0
 800861c:	77fb      	strb	r3, [r7, #31]
    uint8_t code1 = code(*x1, *y1, window);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f9b3 0000 	ldrsh.w	r0, [r3]
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	f9b3 1000 	ldrsh.w	r1, [r3]
 800862a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800862e:	cb0c      	ldmia	r3, {r2, r3}
 8008630:	f7ff ffa7 	bl	8008582 <code>
 8008634:	4603      	mov	r3, r0
 8008636:	77bb      	strb	r3, [r7, #30]

    bool accept = false;
 8008638:	2300      	movs	r3, #0
 800863a:	777b      	strb	r3, [r7, #29]

    while (true) {
        if (!(code0 | code1)) {
 800863c:	7ffa      	ldrb	r2, [r7, #31]
 800863e:	7fbb      	ldrb	r3, [r7, #30]
 8008640:	4313      	orrs	r3, r2
 8008642:	b2db      	uxtb	r3, r3
 8008644:	2b00      	cmp	r3, #0
 8008646:	d102      	bne.n	800864e <clip_line+0x58>
            /* Both endpoints inside clipping window, trivial accept. */
            accept = true;
 8008648:	2301      	movs	r3, #1
 800864a:	777b      	strb	r3, [r7, #29]
            break;
 800864c:	e0e9      	b.n	8008822 <clip_line+0x22c>
        } else if (code0 & code1) {
 800864e:	7ffa      	ldrb	r2, [r7, #31]
 8008650:	7fbb      	ldrb	r3, [r7, #30]
 8008652:	4013      	ands	r3, r2
 8008654:	b2db      	uxtb	r3, r3
 8008656:	2b00      	cmp	r3, #0
 8008658:	f040 80e2 	bne.w	8008820 <clip_line+0x22a>
            /* Both endpoints outside clipping window, trivial reject. */
            break;
        } else {
            /* Part of line inside clipping window, nontrivial situation. */

            int16_t x = 0;
 800865c:	2300      	movs	r3, #0
 800865e:	837b      	strh	r3, [r7, #26]
            int16_t y = 0;
 8008660:	2300      	movs	r3, #0
 8008662:	833b      	strh	r3, [r7, #24]
            uint8_t code3 = code0 ? code0 : code1;
 8008664:	7ffb      	ldrb	r3, [r7, #31]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d001      	beq.n	800866e <clip_line+0x78>
 800866a:	7ffb      	ldrb	r3, [r7, #31]
 800866c:	e000      	b.n	8008670 <clip_line+0x7a>
 800866e:	7fbb      	ldrb	r3, [r7, #30]
 8008670:	75fb      	strb	r3, [r7, #23]

            /* Find intersection point. */
            /* slope = (y1 - y0) / (x1 - x0) */
            /* x = x0 + (1 / slope) * (ym - y0), where ym is ymin or ymax */
            /* y = y0 + slope * (xm - x0), where xm is xmin or xmax */
            if (code3 & TOP) {
 8008672:	2208      	movs	r2, #8
 8008674:	7dfb      	ldrb	r3, [r7, #23]
 8008676:	4013      	ands	r3, r2
 8008678:	b2db      	uxtb	r3, r3
 800867a:	2b00      	cmp	r3, #0
 800867c:	d024      	beq.n	80086c8 <clip_line+0xd2>
                x = *x0 + (*x1 - *x0) * (window.y1 - *y0) / (*y1 - *y0);
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008684:	b29a      	uxth	r2, r3
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	f9b3 3000 	ldrsh.w	r3, [r3]
 800868c:	4619      	mov	r1, r3
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008694:	1acb      	subs	r3, r1, r3
 8008696:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 8008698:	4608      	mov	r0, r1
 800869a:	68b9      	ldr	r1, [r7, #8]
 800869c:	f9b1 1000 	ldrsh.w	r1, [r1]
 80086a0:	1a41      	subs	r1, r0, r1
 80086a2:	fb03 f101 	mul.w	r1, r3, r1
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80086ac:	4618      	mov	r0, r3
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80086b4:	1ac3      	subs	r3, r0, r3
 80086b6:	fb91 f3f3 	sdiv	r3, r1, r3
 80086ba:	b29b      	uxth	r3, r3
 80086bc:	4413      	add	r3, r2
 80086be:	b29b      	uxth	r3, r3
 80086c0:	837b      	strh	r3, [r7, #26]
                y = window.y1;
 80086c2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80086c4:	833b      	strh	r3, [r7, #24]
 80086c6:	e07f      	b.n	80087c8 <clip_line+0x1d2>
            } else if (code3 & BOTTOM) {
 80086c8:	2204      	movs	r2, #4
 80086ca:	7dfb      	ldrb	r3, [r7, #23]
 80086cc:	4013      	ands	r3, r2
 80086ce:	b2db      	uxtb	r3, r3
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d024      	beq.n	800871e <clip_line+0x128>
                x = *x0 + (*x1 - *x0) * (window.y0 - *y0) / (*y1 - *y0);
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80086da:	b29a      	uxth	r2, r3
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80086e2:	4619      	mov	r1, r3
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80086ea:	1acb      	subs	r3, r1, r3
 80086ec:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 80086ee:	4608      	mov	r0, r1
 80086f0:	68b9      	ldr	r1, [r7, #8]
 80086f2:	f9b1 1000 	ldrsh.w	r1, [r1]
 80086f6:	1a41      	subs	r1, r0, r1
 80086f8:	fb03 f101 	mul.w	r1, r3, r1
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008702:	4618      	mov	r0, r3
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	f9b3 3000 	ldrsh.w	r3, [r3]
 800870a:	1ac3      	subs	r3, r0, r3
 800870c:	fb91 f3f3 	sdiv	r3, r1, r3
 8008710:	b29b      	uxth	r3, r3
 8008712:	4413      	add	r3, r2
 8008714:	b29b      	uxth	r3, r3
 8008716:	837b      	strh	r3, [r7, #26]
                y = window.y0;
 8008718:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800871a:	833b      	strh	r3, [r7, #24]
 800871c:	e054      	b.n	80087c8 <clip_line+0x1d2>
            } else if (code3 & RIGHT) {
 800871e:	2202      	movs	r2, #2
 8008720:	7dfb      	ldrb	r3, [r7, #23]
 8008722:	4013      	ands	r3, r2
 8008724:	b2db      	uxtb	r3, r3
 8008726:	2b00      	cmp	r3, #0
 8008728:	d024      	beq.n	8008774 <clip_line+0x17e>
                y = *y0 + (*y1 - *y0) * (window.x1 - *x0) / (*x1 - *x0);
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008730:	b29a      	uxth	r2, r3
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008738:	4619      	mov	r1, r3
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008740:	1acb      	subs	r3, r1, r3
 8008742:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8008744:	4608      	mov	r0, r1
 8008746:	68f9      	ldr	r1, [r7, #12]
 8008748:	f9b1 1000 	ldrsh.w	r1, [r1]
 800874c:	1a41      	subs	r1, r0, r1
 800874e:	fb03 f101 	mul.w	r1, r3, r1
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008758:	4618      	mov	r0, r3
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008760:	1ac3      	subs	r3, r0, r3
 8008762:	fb91 f3f3 	sdiv	r3, r1, r3
 8008766:	b29b      	uxth	r3, r3
 8008768:	4413      	add	r3, r2
 800876a:	b29b      	uxth	r3, r3
 800876c:	833b      	strh	r3, [r7, #24]
                x = window.x1;
 800876e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008770:	837b      	strh	r3, [r7, #26]
 8008772:	e029      	b.n	80087c8 <clip_line+0x1d2>
            }  else if (code3 & LEFT) {
 8008774:	2201      	movs	r2, #1
 8008776:	7dfb      	ldrb	r3, [r7, #23]
 8008778:	4013      	ands	r3, r2
 800877a:	b2db      	uxtb	r3, r3
 800877c:	2b00      	cmp	r3, #0
 800877e:	d023      	beq.n	80087c8 <clip_line+0x1d2>
                y = *y0 + (*y1 - *y0) * (window.x0 - *x0) / (*x1 - *x0);
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008786:	b29a      	uxth	r2, r3
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800878e:	4619      	mov	r1, r3
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008796:	1acb      	subs	r3, r1, r3
 8008798:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 800879a:	4608      	mov	r0, r1
 800879c:	68f9      	ldr	r1, [r7, #12]
 800879e:	f9b1 1000 	ldrsh.w	r1, [r1]
 80087a2:	1a41      	subs	r1, r0, r1
 80087a4:	fb03 f101 	mul.w	r1, r3, r1
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80087ae:	4618      	mov	r0, r3
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80087b6:	1ac3      	subs	r3, r0, r3
 80087b8:	fb91 f3f3 	sdiv	r3, r1, r3
 80087bc:	b29b      	uxth	r3, r3
 80087be:	4413      	add	r3, r2
 80087c0:	b29b      	uxth	r3, r3
 80087c2:	833b      	strh	r3, [r7, #24]
                x = window.x0;
 80087c4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80087c6:	837b      	strh	r3, [r7, #26]
            }

            /* Replace the outside point with the intersection point. */
            if (code3 == code0) {
 80087c8:	7dfa      	ldrb	r2, [r7, #23]
 80087ca:	7ffb      	ldrb	r3, [r7, #31]
 80087cc:	429a      	cmp	r2, r3
 80087ce:	d113      	bne.n	80087f8 <clip_line+0x202>
                *x0 = x;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	8b7a      	ldrh	r2, [r7, #26]
 80087d4:	801a      	strh	r2, [r3, #0]
                *y0 = y;
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	8b3a      	ldrh	r2, [r7, #24]
 80087da:	801a      	strh	r2, [r3, #0]
                code0 = code(*x0, *y0, window);
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	f9b3 0000 	ldrsh.w	r0, [r3]
 80087e2:	68bb      	ldr	r3, [r7, #8]
 80087e4:	f9b3 1000 	ldrsh.w	r1, [r3]
 80087e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80087ec:	cb0c      	ldmia	r3, {r2, r3}
 80087ee:	f7ff fec8 	bl	8008582 <code>
 80087f2:	4603      	mov	r3, r0
 80087f4:	77fb      	strb	r3, [r7, #31]
 80087f6:	e721      	b.n	800863c <clip_line+0x46>
            } else {
                *x1 = x;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	8b7a      	ldrh	r2, [r7, #26]
 80087fc:	801a      	strh	r2, [r3, #0]
                *y1 = y;
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	8b3a      	ldrh	r2, [r7, #24]
 8008802:	801a      	strh	r2, [r3, #0]
                code1 = code(*x1, *y1, window);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f9b3 0000 	ldrsh.w	r0, [r3]
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	f9b3 1000 	ldrsh.w	r1, [r3]
 8008810:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008814:	cb0c      	ldmia	r3, {r2, r3}
 8008816:	f7ff feb4 	bl	8008582 <code>
 800881a:	4603      	mov	r3, r0
 800881c:	77bb      	strb	r3, [r7, #30]
        if (!(code0 | code1)) {
 800881e:	e70d      	b.n	800863c <clip_line+0x46>
            break;
 8008820:	bf00      	nop
            }
        }
    }

    return accept;
 8008822:	7f7b      	ldrb	r3, [r7, #29]
 8008824:	4618      	mov	r0, r3
 8008826:	3720      	adds	r7, #32
 8008828:	46bd      	mov	sp, r7
 800882a:	bd80      	pop	{r7, pc}

0800882c <fontx_meta>:
#include <stddef.h>
#include <string.h>

#include "fontx.h"

uint8_t fontx_meta(fontx_meta_t *meta, const uint8_t *font) {
 800882c:	b580      	push	{r7, lr}
 800882e:	b082      	sub	sp, #8
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
 8008834:	6039      	str	r1, [r7, #0]

    memcpy(meta->name, &font[FONTX_NAME], 8);
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	3306      	adds	r3, #6
 800883c:	2208      	movs	r2, #8
 800883e:	4619      	mov	r1, r3
 8008840:	f000 febc 	bl	80095bc <memcpy>
    meta->width = font[FONTX_WIDTH];
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	7b9a      	ldrb	r2, [r3, #14]
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	725a      	strb	r2, [r3, #9]
    meta->height = font[FONTX_HEIGHT];
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	7bda      	ldrb	r2, [r3, #15]
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	729a      	strb	r2, [r3, #10]
    meta->type = font[FONTX_TYPE];
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	7c1a      	ldrb	r2, [r3, #16]
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	72da      	strb	r2, [r3, #11]

    return 0;
 800885c:	2300      	movs	r3, #0
}
 800885e:	4618      	mov	r0, r3
 8008860:	3708      	adds	r7, #8
 8008862:	46bd      	mov	sp, r7
 8008864:	bd80      	pop	{r7, pc}

08008866 <fontx_glyph>:


uint8_t fontx_glyph(fontx_glyph_t *glyph, wchar_t code, const uint8_t* font) {
 8008866:	b580      	push	{r7, lr}
 8008868:	b08e      	sub	sp, #56	; 0x38
 800886a:	af00      	add	r7, sp, #0
 800886c:	60f8      	str	r0, [r7, #12]
 800886e:	60b9      	str	r1, [r7, #8]
 8008870:	607a      	str	r2, [r7, #4]
    uint32_t nc, bc, sb, eb;
    uint8_t status;
    const uint8_t *block_table;
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 8008872:	f107 0314 	add.w	r3, r7, #20
 8008876:	6879      	ldr	r1, [r7, #4]
 8008878:	4618      	mov	r0, r3
 800887a:	f7ff ffd7 	bl	800882c <fontx_meta>
 800887e:	4603      	mov	r3, r0
 8008880:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (0 != status) {
 8008884:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008888:	2b00      	cmp	r3, #0
 800888a:	d002      	beq.n	8008892 <fontx_glyph+0x2c>
        return status;
 800888c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008890:	e077      	b.n	8008982 <fontx_glyph+0x11c>
    }

    glyph->width = meta.width;
 8008892:	7f7a      	ldrb	r2, [r7, #29]
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	701a      	strb	r2, [r3, #0]
    glyph->height = meta.height;
 8008898:	7fba      	ldrb	r2, [r7, #30]
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	705a      	strb	r2, [r3, #1]
    glyph->pitch = (meta.width + 7) / 8;
 800889e:	7f7b      	ldrb	r3, [r7, #29]
 80088a0:	3307      	adds	r3, #7
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	da00      	bge.n	80088a8 <fontx_glyph+0x42>
 80088a6:	3307      	adds	r3, #7
 80088a8:	10db      	asrs	r3, r3, #3
 80088aa:	b2da      	uxtb	r2, r3
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	70da      	strb	r2, [r3, #3]
    glyph->size = glyph->pitch * meta.height;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	78da      	ldrb	r2, [r3, #3]
 80088b4:	7fbb      	ldrb	r3, [r7, #30]
 80088b6:	fb12 f303 	smulbb	r3, r2, r3
 80088ba:	b2da      	uxtb	r2, r3
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	709a      	strb	r2, [r3, #2]

    if (FONTX_TYPE_SBCS == meta.type) {
 80088c0:	7ffb      	ldrb	r3, [r7, #31]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d10f      	bne.n	80088e6 <fontx_glyph+0x80>
        if (code < 0x100) {
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	2bff      	cmp	r3, #255	; 0xff
 80088ca:	d859      	bhi.n	8008980 <fontx_glyph+0x11a>
            glyph->buffer = &font[FONTX_GLYPH_DATA_START + code * glyph->size];
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	789b      	ldrb	r3, [r3, #2]
 80088d0:	461a      	mov	r2, r3
 80088d2:	68bb      	ldr	r3, [r7, #8]
 80088d4:	fb02 f303 	mul.w	r3, r2, r3
 80088d8:	3311      	adds	r3, #17
 80088da:	687a      	ldr	r2, [r7, #4]
 80088dc:	441a      	add	r2, r3
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	605a      	str	r2, [r3, #4]
            return FONTX_OK;
 80088e2:	2300      	movs	r3, #0
 80088e4:	e04d      	b.n	8008982 <fontx_glyph+0x11c>
        }
    } else {
        block_table = &font[FONTX_BLOCK_TABLE_START];
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	3312      	adds	r3, #18
 80088ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        nc = 0;
 80088ec:	2300      	movs	r3, #0
 80088ee:	637b      	str	r3, [r7, #52]	; 0x34
        bc = font[FONTX_BLOCK_TABLE_SIZE];
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	3311      	adds	r3, #17
 80088f4:	781b      	ldrb	r3, [r3, #0]
 80088f6:	633b      	str	r3, [r7, #48]	; 0x30
        while (bc--) {
 80088f8:	e03d      	b.n	8008976 <fontx_glyph+0x110>
            /* Get range of the code block_table. */
            sb = block_table[0] + block_table[1] * 0x100;
 80088fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088fc:	781b      	ldrb	r3, [r3, #0]
 80088fe:	461a      	mov	r2, r3
 8008900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008902:	3301      	adds	r3, #1
 8008904:	781b      	ldrb	r3, [r3, #0]
 8008906:	021b      	lsls	r3, r3, #8
 8008908:	4413      	add	r3, r2
 800890a:	627b      	str	r3, [r7, #36]	; 0x24
            eb = block_table[2] + block_table[3] * 0x100;
 800890c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800890e:	3302      	adds	r3, #2
 8008910:	781b      	ldrb	r3, [r3, #0]
 8008912:	461a      	mov	r2, r3
 8008914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008916:	3303      	adds	r3, #3
 8008918:	781b      	ldrb	r3, [r3, #0]
 800891a:	021b      	lsls	r3, r3, #8
 800891c:	4413      	add	r3, r2
 800891e:	623b      	str	r3, [r7, #32]

             /* Check if in the code block_table. */
            if (code >= sb && code <= eb) {
 8008920:	68ba      	ldr	r2, [r7, #8]
 8008922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008924:	429a      	cmp	r2, r3
 8008926:	d31c      	bcc.n	8008962 <fontx_glyph+0xfc>
 8008928:	68ba      	ldr	r2, [r7, #8]
 800892a:	6a3b      	ldr	r3, [r7, #32]
 800892c:	429a      	cmp	r2, r3
 800892e:	d818      	bhi.n	8008962 <fontx_glyph+0xfc>
                /* Number of codes from top of the block_table. */
                nc += code - sb;
 8008930:	68ba      	ldr	r2, [r7, #8]
 8008932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008934:	1ad3      	subs	r3, r2, r3
 8008936:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008938:	4413      	add	r3, r2
 800893a:	637b      	str	r3, [r7, #52]	; 0x34
                glyph->buffer = &font[
                    FONTX_BLOCK_TABLE_START +
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	3311      	adds	r3, #17
 8008940:	781b      	ldrb	r3, [r3, #0]
 8008942:	009b      	lsls	r3, r3, #2
 8008944:	461a      	mov	r2, r3
                    nc * glyph->size
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	789b      	ldrb	r3, [r3, #2]
 800894a:	4619      	mov	r1, r3
 800894c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800894e:	fb01 f303 	mul.w	r3, r1, r3
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 8008952:	4413      	add	r3, r2
 8008954:	3312      	adds	r3, #18
                glyph->buffer = &font[
 8008956:	687a      	ldr	r2, [r7, #4]
 8008958:	441a      	add	r2, r3
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	605a      	str	r2, [r3, #4]
                ];
                return FONTX_OK;
 800895e:	2300      	movs	r3, #0
 8008960:	e00f      	b.n	8008982 <fontx_glyph+0x11c>
            }
            /* Number of codes in the previous block_tables. */
            nc += eb - sb + 1;
 8008962:	6a3a      	ldr	r2, [r7, #32]
 8008964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008966:	1ad2      	subs	r2, r2, r3
 8008968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800896a:	4413      	add	r3, r2
 800896c:	3301      	adds	r3, #1
 800896e:	637b      	str	r3, [r7, #52]	; 0x34
            /* Next code block_table. */
            block_table += 4;
 8008970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008972:	3304      	adds	r3, #4
 8008974:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (bc--) {
 8008976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008978:	1e5a      	subs	r2, r3, #1
 800897a:	633a      	str	r2, [r7, #48]	; 0x30
 800897c:	2b00      	cmp	r3, #0
 800897e:	d1bc      	bne.n	80088fa <fontx_glyph+0x94>
        }
    }

    return FONTX_ERR_GLYPH_NOT_FOUND;
 8008980:	2301      	movs	r3, #1
 8008982:	4618      	mov	r0, r3
 8008984:	3738      	adds	r7, #56	; 0x38
 8008986:	46bd      	mov	sp, r7
 8008988:	bd80      	pop	{r7, pc}

0800898a <min>:
#include "hsl.h"

hsl_t rgb888_to_hsl(rgb_t *rgb);
uint16_t rgb888_to_rgb565(rgb_t *input);

static inline int min(int a, int b) {
 800898a:	b480      	push	{r7}
 800898c:	b083      	sub	sp, #12
 800898e:	af00      	add	r7, sp, #0
 8008990:	6078      	str	r0, [r7, #4]
 8008992:	6039      	str	r1, [r7, #0]
    if (a > b) {
 8008994:	687a      	ldr	r2, [r7, #4]
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	429a      	cmp	r2, r3
 800899a:	dd01      	ble.n	80089a0 <min+0x16>
        return b;
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	e000      	b.n	80089a2 <min+0x18>
    };
    return a;
 80089a0:	687b      	ldr	r3, [r7, #4]
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	370c      	adds	r7, #12
 80089a6:	46bd      	mov	sp, r7
 80089a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ac:	4770      	bx	lr

080089ae <max>:

static inline int max(int a, int b) {
 80089ae:	b480      	push	{r7}
 80089b0:	b083      	sub	sp, #12
 80089b2:	af00      	add	r7, sp, #0
 80089b4:	6078      	str	r0, [r7, #4]
 80089b6:	6039      	str	r1, [r7, #0]
    if (a > b) {
 80089b8:	687a      	ldr	r2, [r7, #4]
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	429a      	cmp	r2, r3
 80089be:	dd01      	ble.n	80089c4 <max+0x16>
        return a;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	e000      	b.n	80089c6 <max+0x18>
    }
    return b;
 80089c4:	683b      	ldr	r3, [r7, #0]
}
 80089c6:	4618      	mov	r0, r3
 80089c8:	370c      	adds	r7, #12
 80089ca:	46bd      	mov	sp, r7
 80089cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d0:	4770      	bx	lr
	...

080089d4 <hagl_set_clip_window>:
    .y0 = 0,
    .x1 = DISPLAY_WIDTH - 1,
    .y1 = DISPLAY_HEIGHT - 1,
};

void hagl_set_clip_window(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 80089d4:	b490      	push	{r4, r7}
 80089d6:	b082      	sub	sp, #8
 80089d8:	af00      	add	r7, sp, #0
 80089da:	4604      	mov	r4, r0
 80089dc:	4608      	mov	r0, r1
 80089de:	4611      	mov	r1, r2
 80089e0:	461a      	mov	r2, r3
 80089e2:	4623      	mov	r3, r4
 80089e4:	80fb      	strh	r3, [r7, #6]
 80089e6:	4603      	mov	r3, r0
 80089e8:	80bb      	strh	r3, [r7, #4]
 80089ea:	460b      	mov	r3, r1
 80089ec:	807b      	strh	r3, [r7, #2]
 80089ee:	4613      	mov	r3, r2
 80089f0:	803b      	strh	r3, [r7, #0]
    clip_window.x0 = x0;
 80089f2:	4a08      	ldr	r2, [pc, #32]	; (8008a14 <hagl_set_clip_window+0x40>)
 80089f4:	88fb      	ldrh	r3, [r7, #6]
 80089f6:	8013      	strh	r3, [r2, #0]
    clip_window.y0 = y0;
 80089f8:	4a06      	ldr	r2, [pc, #24]	; (8008a14 <hagl_set_clip_window+0x40>)
 80089fa:	88bb      	ldrh	r3, [r7, #4]
 80089fc:	8053      	strh	r3, [r2, #2]
    clip_window.x1 = x1;
 80089fe:	4a05      	ldr	r2, [pc, #20]	; (8008a14 <hagl_set_clip_window+0x40>)
 8008a00:	887b      	ldrh	r3, [r7, #2]
 8008a02:	8093      	strh	r3, [r2, #4]
    clip_window.y1 = y1;
 8008a04:	4a03      	ldr	r2, [pc, #12]	; (8008a14 <hagl_set_clip_window+0x40>)
 8008a06:	883b      	ldrh	r3, [r7, #0]
 8008a08:	80d3      	strh	r3, [r2, #6]
}
 8008a0a:	bf00      	nop
 8008a0c:	3708      	adds	r7, #8
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bc90      	pop	{r4, r7}
 8008a12:	4770      	bx	lr
 8008a14:	2000000c 	.word	0x2000000c

08008a18 <hagl_put_pixel>:

void hagl_put_pixel(int16_t x0, int16_t y0, color_t color)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b082      	sub	sp, #8
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	4603      	mov	r3, r0
 8008a20:	80fb      	strh	r3, [r7, #6]
 8008a22:	460b      	mov	r3, r1
 8008a24:	80bb      	strh	r3, [r7, #4]
 8008a26:	4613      	mov	r3, r2
 8008a28:	807b      	strh	r3, [r7, #2]
    /* x0 or y0 is before the edge, nothing to do. */
    if ((x0 < clip_window.x0) || (y0 < clip_window.y0))  {
 8008a2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008a2e:	4a12      	ldr	r2, [pc, #72]	; (8008a78 <hagl_put_pixel+0x60>)
 8008a30:	8812      	ldrh	r2, [r2, #0]
 8008a32:	4293      	cmp	r3, r2
 8008a34:	db1a      	blt.n	8008a6c <hagl_put_pixel+0x54>
 8008a36:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8008a3a:	4a0f      	ldr	r2, [pc, #60]	; (8008a78 <hagl_put_pixel+0x60>)
 8008a3c:	8852      	ldrh	r2, [r2, #2]
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	db14      	blt.n	8008a6c <hagl_put_pixel+0x54>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 8008a42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008a46:	4a0c      	ldr	r2, [pc, #48]	; (8008a78 <hagl_put_pixel+0x60>)
 8008a48:	8892      	ldrh	r2, [r2, #4]
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	dc10      	bgt.n	8008a70 <hagl_put_pixel+0x58>
 8008a4e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8008a52:	4a09      	ldr	r2, [pc, #36]	; (8008a78 <hagl_put_pixel+0x60>)
 8008a54:	88d2      	ldrh	r2, [r2, #6]
 8008a56:	4293      	cmp	r3, r2
 8008a58:	dc0a      	bgt.n	8008a70 <hagl_put_pixel+0x58>
        return;
    }

    /* If still in bounds set the pixel. */
    hagl_hal_put_pixel(x0, y0, color);
 8008a5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008a5e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8008a62:	887a      	ldrh	r2, [r7, #2]
 8008a64:	4618      	mov	r0, r3
 8008a66:	f7f8 fcfb 	bl	8001460 <lcd_draw_point>
 8008a6a:	e002      	b.n	8008a72 <hagl_put_pixel+0x5a>
        return;
 8008a6c:	bf00      	nop
 8008a6e:	e000      	b.n	8008a72 <hagl_put_pixel+0x5a>
        return;
 8008a70:	bf00      	nop
}
 8008a72:	3708      	adds	r7, #8
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}
 8008a78:	2000000c 	.word	0x2000000c

08008a7c <hagl_draw_hline>:
#else
    return hagl_color(0, 0, 0);
#endif /* HAGL_HAS_HAL_GET_PIXEL */
}

void hagl_draw_hline(int16_t x0, int16_t y0, uint16_t w, color_t color) {
 8008a7c:	b590      	push	{r4, r7, lr}
 8008a7e:	b085      	sub	sp, #20
 8008a80:	af02      	add	r7, sp, #8
 8008a82:	4604      	mov	r4, r0
 8008a84:	4608      	mov	r0, r1
 8008a86:	4611      	mov	r1, r2
 8008a88:	461a      	mov	r2, r3
 8008a8a:	4623      	mov	r3, r4
 8008a8c:	80fb      	strh	r3, [r7, #6]
 8008a8e:	4603      	mov	r3, r0
 8008a90:	80bb      	strh	r3, [r7, #4]
 8008a92:	460b      	mov	r3, r1
 8008a94:	807b      	strh	r3, [r7, #2]
 8008a96:	4613      	mov	r3, r2
 8008a98:	803b      	strh	r3, [r7, #0]
        width = width - (x0 + width - clip_window.x1);
    }

    hagl_hal_hline(x0, y0, width, color);
#else
    hagl_draw_line(x0, y0, x0 + w, y0, color);
 8008a9a:	88fa      	ldrh	r2, [r7, #6]
 8008a9c:	887b      	ldrh	r3, [r7, #2]
 8008a9e:	4413      	add	r3, r2
 8008aa0:	b29b      	uxth	r3, r3
 8008aa2:	b21a      	sxth	r2, r3
 8008aa4:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8008aa8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8008aac:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8008ab0:	883b      	ldrh	r3, [r7, #0]
 8008ab2:	9300      	str	r3, [sp, #0]
 8008ab4:	4623      	mov	r3, r4
 8008ab6:	f000 f805 	bl	8008ac4 <hagl_draw_line>
#endif
}
 8008aba:	bf00      	nop
 8008abc:	370c      	adds	r7, #12
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd90      	pop	{r4, r7, pc}
	...

08008ac4 <hagl_draw_line>:

/*
 * Draw a line using Bresenham's algorithm with given color.
 */
void hagl_draw_line(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 8008ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ac6:	b089      	sub	sp, #36	; 0x24
 8008ac8:	af02      	add	r7, sp, #8
 8008aca:	4604      	mov	r4, r0
 8008acc:	4608      	mov	r0, r1
 8008ace:	4611      	mov	r1, r2
 8008ad0:	461a      	mov	r2, r3
 8008ad2:	4623      	mov	r3, r4
 8008ad4:	80fb      	strh	r3, [r7, #6]
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	80bb      	strh	r3, [r7, #4]
 8008ada:	460b      	mov	r3, r1
 8008adc:	807b      	strh	r3, [r7, #2]
 8008ade:	4613      	mov	r3, r2
 8008ae0:	803b      	strh	r3, [r7, #0]
    /* Clip coordinates to fit clip window. */
    if (false == clip_line(&x0, &y0, &x1, &y1, clip_window)) {
 8008ae2:	463b      	mov	r3, r7
 8008ae4:	1cba      	adds	r2, r7, #2
 8008ae6:	1d3d      	adds	r5, r7, #4
 8008ae8:	1dbc      	adds	r4, r7, #6
 8008aea:	494a      	ldr	r1, [pc, #296]	; (8008c14 <hagl_draw_line+0x150>)
 8008aec:	466e      	mov	r6, sp
 8008aee:	c903      	ldmia	r1, {r0, r1}
 8008af0:	e886 0003 	stmia.w	r6, {r0, r1}
 8008af4:	4629      	mov	r1, r5
 8008af6:	4620      	mov	r0, r4
 8008af8:	f7ff fd7d 	bl	80085f6 <clip_line>
 8008afc:	4603      	mov	r3, r0
 8008afe:	f083 0301 	eor.w	r3, r3, #1
 8008b02:	b2db      	uxtb	r3, r3
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d17e      	bne.n	8008c06 <hagl_draw_line+0x142>
    int16_t dy;
    int16_t sy;
    int16_t err;
    int16_t e2;

    dx = ABS(x1 - x0);
 8008b08:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008b0c:	461a      	mov	r2, r3
 8008b0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008b12:	1ad3      	subs	r3, r2, r3
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	bfb8      	it	lt
 8008b18:	425b      	neglt	r3, r3
 8008b1a:	82bb      	strh	r3, [r7, #20]
    sx = x0 < x1 ? 1 : -1;
 8008b1c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008b20:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008b24:	429a      	cmp	r2, r3
 8008b26:	da01      	bge.n	8008b2c <hagl_draw_line+0x68>
 8008b28:	2301      	movs	r3, #1
 8008b2a:	e001      	b.n	8008b30 <hagl_draw_line+0x6c>
 8008b2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008b30:	827b      	strh	r3, [r7, #18]
    dy = ABS(y1 - y0);
 8008b32:	f9b7 3000 	ldrsh.w	r3, [r7]
 8008b36:	461a      	mov	r2, r3
 8008b38:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8008b3c:	1ad3      	subs	r3, r2, r3
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	bfb8      	it	lt
 8008b42:	425b      	neglt	r3, r3
 8008b44:	823b      	strh	r3, [r7, #16]
    sy = y0 < y1 ? 1 : -1;
 8008b46:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8008b4a:	f9b7 3000 	ldrsh.w	r3, [r7]
 8008b4e:	429a      	cmp	r2, r3
 8008b50:	da01      	bge.n	8008b56 <hagl_draw_line+0x92>
 8008b52:	2301      	movs	r3, #1
 8008b54:	e001      	b.n	8008b5a <hagl_draw_line+0x96>
 8008b56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008b5a:	81fb      	strh	r3, [r7, #14]
    err = (dx > dy ? dx : -dy) / 2;
 8008b5c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8008b60:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8008b64:	429a      	cmp	r2, r3
 8008b66:	dd06      	ble.n	8008b76 <hagl_draw_line+0xb2>
 8008b68:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8008b6c:	0fda      	lsrs	r2, r3, #31
 8008b6e:	4413      	add	r3, r2
 8008b70:	105b      	asrs	r3, r3, #1
 8008b72:	b21b      	sxth	r3, r3
 8008b74:	e006      	b.n	8008b84 <hagl_draw_line+0xc0>
 8008b76:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8008b7a:	0fda      	lsrs	r2, r3, #31
 8008b7c:	4413      	add	r3, r2
 8008b7e:	105b      	asrs	r3, r3, #1
 8008b80:	425b      	negs	r3, r3
 8008b82:	b21b      	sxth	r3, r3
 8008b84:	82fb      	strh	r3, [r7, #22]

    while (1) {
        hagl_put_pixel(x0, y0, color);
 8008b86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008b8a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8008b8e:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8008b90:	4618      	mov	r0, r3
 8008b92:	f7ff ff41 	bl	8008a18 <hagl_put_pixel>

        if (x0 == x1 && y0 == y1) {
 8008b96:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008b9a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008b9e:	429a      	cmp	r2, r3
 8008ba0:	d105      	bne.n	8008bae <hagl_draw_line+0xea>
 8008ba2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8008ba6:	f9b7 3000 	ldrsh.w	r3, [r7]
 8008baa:	429a      	cmp	r2, r3
 8008bac:	d02d      	beq.n	8008c0a <hagl_draw_line+0x146>
            break;
        };

        e2 = err + err;
 8008bae:	8afb      	ldrh	r3, [r7, #22]
 8008bb0:	005b      	lsls	r3, r3, #1
 8008bb2:	b29b      	uxth	r3, r3
 8008bb4:	81bb      	strh	r3, [r7, #12]

        if (e2 > -dx) {
 8008bb6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8008bba:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8008bbe:	425b      	negs	r3, r3
 8008bc0:	429a      	cmp	r2, r3
 8008bc2:	dd0c      	ble.n	8008bde <hagl_draw_line+0x11a>
            err -= dy;
 8008bc4:	8afa      	ldrh	r2, [r7, #22]
 8008bc6:	8a3b      	ldrh	r3, [r7, #16]
 8008bc8:	1ad3      	subs	r3, r2, r3
 8008bca:	b29b      	uxth	r3, r3
 8008bcc:	82fb      	strh	r3, [r7, #22]
            x0 += sx;
 8008bce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008bd2:	b29a      	uxth	r2, r3
 8008bd4:	8a7b      	ldrh	r3, [r7, #18]
 8008bd6:	4413      	add	r3, r2
 8008bd8:	b29b      	uxth	r3, r3
 8008bda:	b21b      	sxth	r3, r3
 8008bdc:	80fb      	strh	r3, [r7, #6]
        }

        if (e2 < dy) {
 8008bde:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8008be2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8008be6:	429a      	cmp	r2, r3
 8008be8:	dacd      	bge.n	8008b86 <hagl_draw_line+0xc2>
            err += dx;
 8008bea:	8afa      	ldrh	r2, [r7, #22]
 8008bec:	8abb      	ldrh	r3, [r7, #20]
 8008bee:	4413      	add	r3, r2
 8008bf0:	b29b      	uxth	r3, r3
 8008bf2:	82fb      	strh	r3, [r7, #22]
            y0 += sy;
 8008bf4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8008bf8:	b29a      	uxth	r2, r3
 8008bfa:	89fb      	ldrh	r3, [r7, #14]
 8008bfc:	4413      	add	r3, r2
 8008bfe:	b29b      	uxth	r3, r3
 8008c00:	b21b      	sxth	r3, r3
 8008c02:	80bb      	strh	r3, [r7, #4]
        hagl_put_pixel(x0, y0, color);
 8008c04:	e7bf      	b.n	8008b86 <hagl_draw_line+0xc2>
        return;
 8008c06:	bf00      	nop
 8008c08:	e000      	b.n	8008c0c <hagl_draw_line+0x148>
            break;
 8008c0a:	bf00      	nop
        }
    }
}
 8008c0c:	371c      	adds	r7, #28
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c12:	bf00      	nop
 8008c14:	2000000c 	.word	0x2000000c

08008c18 <hagl_fill_rectangle>:

/*
 * Draw a filled rectangle with given color.
 */
void hagl_fill_rectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 8008c18:	b590      	push	{r4, r7, lr}
 8008c1a:	b085      	sub	sp, #20
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	4604      	mov	r4, r0
 8008c20:	4608      	mov	r0, r1
 8008c22:	4611      	mov	r1, r2
 8008c24:	461a      	mov	r2, r3
 8008c26:	4623      	mov	r3, r4
 8008c28:	80fb      	strh	r3, [r7, #6]
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	80bb      	strh	r3, [r7, #4]
 8008c2e:	460b      	mov	r3, r1
 8008c30:	807b      	strh	r3, [r7, #2]
 8008c32:	4613      	mov	r3, r2
 8008c34:	803b      	strh	r3, [r7, #0]
    /* Make sure x0 is smaller than x1. */
    if (x0 > x1) {
 8008c36:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008c3a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	dd0e      	ble.n	8008c60 <hagl_fill_rectangle+0x48>
        x0 = x0 + x1;
 8008c42:	88fa      	ldrh	r2, [r7, #6]
 8008c44:	887b      	ldrh	r3, [r7, #2]
 8008c46:	4413      	add	r3, r2
 8008c48:	b29b      	uxth	r3, r3
 8008c4a:	80fb      	strh	r3, [r7, #6]
        x1 = x0 - x1;
 8008c4c:	88fa      	ldrh	r2, [r7, #6]
 8008c4e:	887b      	ldrh	r3, [r7, #2]
 8008c50:	1ad3      	subs	r3, r2, r3
 8008c52:	b29b      	uxth	r3, r3
 8008c54:	807b      	strh	r3, [r7, #2]
        x0 = x0 - x1;
 8008c56:	88fa      	ldrh	r2, [r7, #6]
 8008c58:	887b      	ldrh	r3, [r7, #2]
 8008c5a:	1ad3      	subs	r3, r2, r3
 8008c5c:	b29b      	uxth	r3, r3
 8008c5e:	80fb      	strh	r3, [r7, #6]
    }

    /* Make sure y0 is smaller than y1. */
    if (y0 > y1) {
 8008c60:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8008c64:	f9b7 3000 	ldrsh.w	r3, [r7]
 8008c68:	429a      	cmp	r2, r3
 8008c6a:	dd0e      	ble.n	8008c8a <hagl_fill_rectangle+0x72>
        y0 = y0 + y1;
 8008c6c:	88ba      	ldrh	r2, [r7, #4]
 8008c6e:	883b      	ldrh	r3, [r7, #0]
 8008c70:	4413      	add	r3, r2
 8008c72:	b29b      	uxth	r3, r3
 8008c74:	80bb      	strh	r3, [r7, #4]
        y1 = y0 - y1;
 8008c76:	88ba      	ldrh	r2, [r7, #4]
 8008c78:	883b      	ldrh	r3, [r7, #0]
 8008c7a:	1ad3      	subs	r3, r2, r3
 8008c7c:	b29b      	uxth	r3, r3
 8008c7e:	803b      	strh	r3, [r7, #0]
        y0 = y0 - y1;
 8008c80:	88ba      	ldrh	r2, [r7, #4]
 8008c82:	883b      	ldrh	r3, [r7, #0]
 8008c84:	1ad3      	subs	r3, r2, r3
 8008c86:	b29b      	uxth	r3, r3
 8008c88:	80bb      	strh	r3, [r7, #4]
    }

    /* x1 or y1 is before the edge, nothing to do. */
    if ((x1 < clip_window.x0) || (y1 < clip_window.y0))  {
 8008c8a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008c8e:	4a33      	ldr	r2, [pc, #204]	; (8008d5c <hagl_fill_rectangle+0x144>)
 8008c90:	8812      	ldrh	r2, [r2, #0]
 8008c92:	4293      	cmp	r3, r2
 8008c94:	db5b      	blt.n	8008d4e <hagl_fill_rectangle+0x136>
 8008c96:	f9b7 3000 	ldrsh.w	r3, [r7]
 8008c9a:	4a30      	ldr	r2, [pc, #192]	; (8008d5c <hagl_fill_rectangle+0x144>)
 8008c9c:	8852      	ldrh	r2, [r2, #2]
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	db55      	blt.n	8008d4e <hagl_fill_rectangle+0x136>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 8008ca2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008ca6:	4a2d      	ldr	r2, [pc, #180]	; (8008d5c <hagl_fill_rectangle+0x144>)
 8008ca8:	8892      	ldrh	r2, [r2, #4]
 8008caa:	4293      	cmp	r3, r2
 8008cac:	dc51      	bgt.n	8008d52 <hagl_fill_rectangle+0x13a>
 8008cae:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8008cb2:	4a2a      	ldr	r2, [pc, #168]	; (8008d5c <hagl_fill_rectangle+0x144>)
 8008cb4:	88d2      	ldrh	r2, [r2, #6]
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	dc4b      	bgt.n	8008d52 <hagl_fill_rectangle+0x13a>
        return;
    }

    x0 = max(x0, clip_window.x0);
 8008cba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008cbe:	4a27      	ldr	r2, [pc, #156]	; (8008d5c <hagl_fill_rectangle+0x144>)
 8008cc0:	8812      	ldrh	r2, [r2, #0]
 8008cc2:	4611      	mov	r1, r2
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	f7ff fe72 	bl	80089ae <max>
 8008cca:	4603      	mov	r3, r0
 8008ccc:	80fb      	strh	r3, [r7, #6]
    y0 = max(y0, clip_window.y0);
 8008cce:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8008cd2:	4a22      	ldr	r2, [pc, #136]	; (8008d5c <hagl_fill_rectangle+0x144>)
 8008cd4:	8852      	ldrh	r2, [r2, #2]
 8008cd6:	4611      	mov	r1, r2
 8008cd8:	4618      	mov	r0, r3
 8008cda:	f7ff fe68 	bl	80089ae <max>
 8008cde:	4603      	mov	r3, r0
 8008ce0:	80bb      	strh	r3, [r7, #4]
    x1 = min(x1, clip_window.x1);
 8008ce2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008ce6:	4a1d      	ldr	r2, [pc, #116]	; (8008d5c <hagl_fill_rectangle+0x144>)
 8008ce8:	8892      	ldrh	r2, [r2, #4]
 8008cea:	4611      	mov	r1, r2
 8008cec:	4618      	mov	r0, r3
 8008cee:	f7ff fe4c 	bl	800898a <min>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	807b      	strh	r3, [r7, #2]
    y1 = min(y1, clip_window.y1);
 8008cf6:	f9b7 3000 	ldrsh.w	r3, [r7]
 8008cfa:	4a18      	ldr	r2, [pc, #96]	; (8008d5c <hagl_fill_rectangle+0x144>)
 8008cfc:	88d2      	ldrh	r2, [r2, #6]
 8008cfe:	4611      	mov	r1, r2
 8008d00:	4618      	mov	r0, r3
 8008d02:	f7ff fe42 	bl	800898a <min>
 8008d06:	4603      	mov	r3, r0
 8008d08:	803b      	strh	r3, [r7, #0]

    uint16_t width = x1 - x0 + 1;
 8008d0a:	887a      	ldrh	r2, [r7, #2]
 8008d0c:	88fb      	ldrh	r3, [r7, #6]
 8008d0e:	1ad3      	subs	r3, r2, r3
 8008d10:	b29b      	uxth	r3, r3
 8008d12:	3301      	adds	r3, #1
 8008d14:	81bb      	strh	r3, [r7, #12]
    uint16_t height = y1 - y0 + 1;
 8008d16:	883a      	ldrh	r2, [r7, #0]
 8008d18:	88bb      	ldrh	r3, [r7, #4]
 8008d1a:	1ad3      	subs	r3, r2, r3
 8008d1c:	b29b      	uxth	r3, r3
 8008d1e:	3301      	adds	r3, #1
 8008d20:	817b      	strh	r3, [r7, #10]

    for (uint16_t i = 0; i < height; i++) {
 8008d22:	2300      	movs	r3, #0
 8008d24:	81fb      	strh	r3, [r7, #14]
 8008d26:	e00d      	b.n	8008d44 <hagl_fill_rectangle+0x12c>
#ifdef HAGL_HAS_HAL_HLINE
        /* Already clipped so can call HAL directly. */
        hagl_hal_hline(x0, y0 + i, width, color);
#else
        hagl_draw_hline(x0, y0 + i, width, color);
 8008d28:	88ba      	ldrh	r2, [r7, #4]
 8008d2a:	89fb      	ldrh	r3, [r7, #14]
 8008d2c:	4413      	add	r3, r2
 8008d2e:	b29b      	uxth	r3, r3
 8008d30:	b219      	sxth	r1, r3
 8008d32:	8c3b      	ldrh	r3, [r7, #32]
 8008d34:	89ba      	ldrh	r2, [r7, #12]
 8008d36:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8008d3a:	f7ff fe9f 	bl	8008a7c <hagl_draw_hline>
    for (uint16_t i = 0; i < height; i++) {
 8008d3e:	89fb      	ldrh	r3, [r7, #14]
 8008d40:	3301      	adds	r3, #1
 8008d42:	81fb      	strh	r3, [r7, #14]
 8008d44:	89fa      	ldrh	r2, [r7, #14]
 8008d46:	897b      	ldrh	r3, [r7, #10]
 8008d48:	429a      	cmp	r2, r3
 8008d4a:	d3ed      	bcc.n	8008d28 <hagl_fill_rectangle+0x110>
 8008d4c:	e002      	b.n	8008d54 <hagl_fill_rectangle+0x13c>
        return;
 8008d4e:	bf00      	nop
 8008d50:	e000      	b.n	8008d54 <hagl_fill_rectangle+0x13c>
        return;
 8008d52:	bf00      	nop
#endif
    }
}
 8008d54:	3714      	adds	r7, #20
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd90      	pop	{r4, r7, pc}
 8008d5a:	bf00      	nop
 8008d5c:	2000000c 	.word	0x2000000c

08008d60 <hagl_put_char>:

    return 0;
}

uint8_t hagl_put_char(wchar_t code, int16_t x0, int16_t y0, color_t color, const uint8_t *font)
{
 8008d60:	b590      	push	{r4, r7, lr}
 8008d62:	f5ad 5d81 	sub.w	sp, sp, #4128	; 0x1020
 8008d66:	b085      	sub	sp, #20
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8008d6e:	f844 0c24 	str.w	r0, [r4, #-36]
 8008d72:	460c      	mov	r4, r1
 8008d74:	4610      	mov	r0, r2
 8008d76:	4619      	mov	r1, r3
 8008d78:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008d7c:	4622      	mov	r2, r4
 8008d7e:	f823 2c26 	strh.w	r2, [r3, #-38]
 8008d82:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008d86:	4602      	mov	r2, r0
 8008d88:	f823 2c28 	strh.w	r2, [r3, #-40]
 8008d8c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008d90:	460a      	mov	r2, r1
 8008d92:	f823 2c2a 	strh.w	r2, [r3, #-42]
    uint8_t set, status;
    color_t buffer[HAGL_CHAR_BUFFER_SIZE];
    bitmap_t bitmap;
    fontx_glyph_t glyph;

    status = fontx_glyph(&glyph, code, font);
 8008d96:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008d9a:	4619      	mov	r1, r3
 8008d9c:	f107 0310 	add.w	r3, r7, #16
 8008da0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008da4:	6812      	ldr	r2, [r2, #0]
 8008da6:	f851 1c24 	ldr.w	r1, [r1, #-36]
 8008daa:	4618      	mov	r0, r3
 8008dac:	f7ff fd5b 	bl	8008866 <fontx_glyph>
 8008db0:	4603      	mov	r3, r0
 8008db2:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8008db6:	f102 0209 	add.w	r2, r2, #9
 8008dba:	7013      	strb	r3, [r2, #0]

    if (0 != status) {
 8008dbc:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8008dc0:	f103 0309 	add.w	r3, r3, #9
 8008dc4:	781b      	ldrb	r3, [r3, #0]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d001      	beq.n	8008dce <hagl_put_char+0x6e>
        return 0;
 8008dca:	2300      	movs	r3, #0
 8008dcc:	e0c9      	b.n	8008f62 <hagl_put_char+0x202>
    }

    bitmap.width = glyph.width,
 8008dce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008dd2:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8008dd6:	b29a      	uxth	r2, r3
 8008dd8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008ddc:	f823 2c18 	strh.w	r2, [r3, #-24]
    bitmap.height = glyph.height,
 8008de0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008de4:	f813 3c1f 	ldrb.w	r3, [r3, #-31]
 8008de8:	b29a      	uxth	r2, r3
 8008dea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008dee:	f823 2c16 	strh.w	r2, [r3, #-22]
    bitmap.depth = DISPLAY_DEPTH,
 8008df2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008df6:	2210      	movs	r2, #16
 8008df8:	f803 2c12 	strb.w	r2, [r3, #-18]

    bitmap_init(&bitmap, (uint8_t *)buffer);
 8008dfc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008e00:	3a08      	subs	r2, #8
 8008e02:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008e06:	3b18      	subs	r3, #24
 8008e08:	4611      	mov	r1, r2
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	f7ff fb95 	bl	800853a <bitmap_init>

    color_t *ptr = (color_t *) bitmap.buffer;
 8008e10:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008e14:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 8008e18:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8008e1c:	f102 020c 	add.w	r2, r2, #12
 8008e20:	6013      	str	r3, [r2, #0]

    for (uint8_t y = 0; y < glyph.height; y++) {
 8008e22:	2300      	movs	r3, #0
 8008e24:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8008e28:	f102 020b 	add.w	r2, r2, #11
 8008e2c:	7013      	strb	r3, [r2, #0]
 8008e2e:	e079      	b.n	8008f24 <hagl_put_char+0x1c4>
        for (uint8_t x = 0; x < glyph.width; x++) {
 8008e30:	2300      	movs	r3, #0
 8008e32:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8008e36:	f102 020a 	add.w	r2, r2, #10
 8008e3a:	7013      	strb	r3, [r2, #0]
 8008e3c:	e04f      	b.n	8008ede <hagl_put_char+0x17e>
            set = *(glyph.buffer + x / 8) & (0x80 >> (x % 8));
 8008e3e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008e42:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8008e46:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8008e4a:	f102 020a 	add.w	r2, r2, #10
 8008e4e:	7812      	ldrb	r2, [r2, #0]
 8008e50:	08d2      	lsrs	r2, r2, #3
 8008e52:	b2d2      	uxtb	r2, r2
 8008e54:	4413      	add	r3, r2
 8008e56:	781b      	ldrb	r3, [r3, #0]
 8008e58:	b25a      	sxtb	r2, r3
 8008e5a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8008e5e:	f103 030a 	add.w	r3, r3, #10
 8008e62:	781b      	ldrb	r3, [r3, #0]
 8008e64:	f003 0307 	and.w	r3, r3, #7
 8008e68:	2180      	movs	r1, #128	; 0x80
 8008e6a:	fa41 f303 	asr.w	r3, r1, r3
 8008e6e:	b25b      	sxtb	r3, r3
 8008e70:	4013      	ands	r3, r2
 8008e72:	b25b      	sxtb	r3, r3
 8008e74:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8008e78:	f102 0208 	add.w	r2, r2, #8
 8008e7c:	7013      	strb	r3, [r2, #0]
            if (set) {
 8008e7e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8008e82:	f103 0308 	add.w	r3, r3, #8
 8008e86:	781b      	ldrb	r3, [r3, #0]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d010      	beq.n	8008eae <hagl_put_char+0x14e>
                *(ptr++) = color;
 8008e8c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8008e90:	f103 030c 	add.w	r3, r3, #12
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	1c9a      	adds	r2, r3, #2
 8008e98:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 8008e9c:	f101 010c 	add.w	r1, r1, #12
 8008ea0:	600a      	str	r2, [r1, #0]
 8008ea2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008ea6:	f832 2c2a 	ldrh.w	r2, [r2, #-42]
 8008eaa:	801a      	strh	r2, [r3, #0]
 8008eac:	e00c      	b.n	8008ec8 <hagl_put_char+0x168>
            } else {
                *(ptr++) = 0x0000;
 8008eae:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8008eb2:	f103 030c 	add.w	r3, r3, #12
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	1c9a      	adds	r2, r3, #2
 8008eba:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 8008ebe:	f101 010c 	add.w	r1, r1, #12
 8008ec2:	600a      	str	r2, [r1, #0]
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	801a      	strh	r2, [r3, #0]
        for (uint8_t x = 0; x < glyph.width; x++) {
 8008ec8:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8008ecc:	f103 030a 	add.w	r3, r3, #10
 8008ed0:	781b      	ldrb	r3, [r3, #0]
 8008ed2:	3301      	adds	r3, #1
 8008ed4:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8008ed8:	f102 020a 	add.w	r2, r2, #10
 8008edc:	7013      	strb	r3, [r2, #0]
 8008ede:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008ee2:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8008ee6:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8008eea:	f102 020a 	add.w	r2, r2, #10
 8008eee:	7812      	ldrb	r2, [r2, #0]
 8008ef0:	429a      	cmp	r2, r3
 8008ef2:	d3a4      	bcc.n	8008e3e <hagl_put_char+0xde>
            }
        }
        glyph.buffer += glyph.pitch;
 8008ef4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008ef8:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8008efc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008f00:	f812 2c1d 	ldrb.w	r2, [r2, #-29]
 8008f04:	4413      	add	r3, r2
 8008f06:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008f0a:	f842 3c1c 	str.w	r3, [r2, #-28]
    for (uint8_t y = 0; y < glyph.height; y++) {
 8008f0e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8008f12:	f103 030b 	add.w	r3, r3, #11
 8008f16:	781b      	ldrb	r3, [r3, #0]
 8008f18:	3301      	adds	r3, #1
 8008f1a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8008f1e:	f102 020b 	add.w	r2, r2, #11
 8008f22:	7013      	strb	r3, [r2, #0]
 8008f24:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008f28:	f813 3c1f 	ldrb.w	r3, [r3, #-31]
 8008f2c:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8008f30:	f102 020b 	add.w	r2, r2, #11
 8008f34:	7812      	ldrb	r2, [r2, #0]
 8008f36:	429a      	cmp	r2, r3
 8008f38:	f4ff af7a 	bcc.w	8008e30 <hagl_put_char+0xd0>
    }

    hagl_blit(x0, y0, &bitmap);
 8008f3c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008f40:	3b18      	subs	r3, #24
 8008f42:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008f46:	f932 1c28 	ldrsh.w	r1, [r2, #-40]
 8008f4a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008f4e:	f932 0c26 	ldrsh.w	r0, [r2, #-38]
 8008f52:	461a      	mov	r2, r3
 8008f54:	f000 f85a 	bl	800900c <hagl_blit>

    return bitmap.width;
 8008f58:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008f5c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8008f60:	b2db      	uxtb	r3, r3
}
 8008f62:	4618      	mov	r0, r3
 8008f64:	f507 5781 	add.w	r7, r7, #4128	; 0x1020
 8008f68:	3714      	adds	r7, #20
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bd90      	pop	{r4, r7, pc}

08008f6e <hagl_put_text>:
 * Write a string of text by calling hagl_put_char() repeadetly. CR and LF
 * continue from the next line.
 */

uint16_t hagl_put_text(const wchar_t *str, int16_t x0, int16_t y0, color_t color, const unsigned char *font)
{
 8008f6e:	b580      	push	{r7, lr}
 8008f70:	b08c      	sub	sp, #48	; 0x30
 8008f72:	af02      	add	r7, sp, #8
 8008f74:	60f8      	str	r0, [r7, #12]
 8008f76:	4608      	mov	r0, r1
 8008f78:	4611      	mov	r1, r2
 8008f7a:	461a      	mov	r2, r3
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	817b      	strh	r3, [r7, #10]
 8008f80:	460b      	mov	r3, r1
 8008f82:	813b      	strh	r3, [r7, #8]
 8008f84:	4613      	mov	r3, r2
 8008f86:	80fb      	strh	r3, [r7, #6]
    wchar_t temp;
    uint8_t status;
    uint16_t original = x0;
 8008f88:	897b      	ldrh	r3, [r7, #10]
 8008f8a:	84fb      	strh	r3, [r7, #38]	; 0x26
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 8008f8c:	f107 0314 	add.w	r3, r7, #20
 8008f90:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008f92:	4618      	mov	r0, r3
 8008f94:	f7ff fc4a 	bl	800882c <fontx_meta>
 8008f98:	4603      	mov	r3, r0
 8008f9a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    if (0 != status) {
 8008f9e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d001      	beq.n	8008faa <hagl_put_text+0x3c>
        return 0;
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	e02c      	b.n	8009004 <hagl_put_text+0x96>
    }

    do {
        temp = *str++;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	1d1a      	adds	r2, r3, #4
 8008fae:	60fa      	str	r2, [r7, #12]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	623b      	str	r3, [r7, #32]
        if (13 == temp || 10 == temp) {
 8008fb4:	6a3b      	ldr	r3, [r7, #32]
 8008fb6:	2b0d      	cmp	r3, #13
 8008fb8:	d002      	beq.n	8008fc0 <hagl_put_text+0x52>
 8008fba:	6a3b      	ldr	r3, [r7, #32]
 8008fbc:	2b0a      	cmp	r3, #10
 8008fbe:	d108      	bne.n	8008fd2 <hagl_put_text+0x64>
            x0 = 0;
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	817b      	strh	r3, [r7, #10]
            y0 += meta.height;
 8008fc4:	7fbb      	ldrb	r3, [r7, #30]
 8008fc6:	b29a      	uxth	r2, r3
 8008fc8:	893b      	ldrh	r3, [r7, #8]
 8008fca:	4413      	add	r3, r2
 8008fcc:	b29b      	uxth	r3, r3
 8008fce:	813b      	strh	r3, [r7, #8]
 8008fd0:	e010      	b.n	8008ff4 <hagl_put_text+0x86>
        } else {
            x0 += hagl_put_char(temp, x0, y0, color, font);
 8008fd2:	88f8      	ldrh	r0, [r7, #6]
 8008fd4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8008fd8:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8008fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fde:	9300      	str	r3, [sp, #0]
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	6a38      	ldr	r0, [r7, #32]
 8008fe4:	f7ff febc 	bl	8008d60 <hagl_put_char>
 8008fe8:	4603      	mov	r3, r0
 8008fea:	b29a      	uxth	r2, r3
 8008fec:	897b      	ldrh	r3, [r7, #10]
 8008fee:	4413      	add	r3, r2
 8008ff0:	b29b      	uxth	r3, r3
 8008ff2:	817b      	strh	r3, [r7, #10]
        }
    } while (*str != 0);
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d1d6      	bne.n	8008faa <hagl_put_text+0x3c>

    return x0 - original;
 8008ffc:	897a      	ldrh	r2, [r7, #10]
 8008ffe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009000:	1ad3      	subs	r3, r2, r3
 8009002:	b29b      	uxth	r3, r3
}
 8009004:	4618      	mov	r0, r3
 8009006:	3728      	adds	r7, #40	; 0x28
 8009008:	46bd      	mov	sp, r7
 800900a:	bd80      	pop	{r7, pc}

0800900c <hagl_blit>:
 * configurable source and destination see the file blit.c.
 *
 * TODO: Handle transparency.
 */

void hagl_blit(int16_t x0, int16_t y0, bitmap_t *source) {
 800900c:	b580      	push	{r7, lr}
 800900e:	b086      	sub	sp, #24
 8009010:	af00      	add	r7, sp, #0
 8009012:	4603      	mov	r3, r0
 8009014:	603a      	str	r2, [r7, #0]
 8009016:	80fb      	strh	r3, [r7, #6]
 8009018:	460b      	mov	r3, r1
 800901a:	80bb      	strh	r3, [r7, #4]
        /* Inside of bounds, can use HAL provided blit. */
        hagl_hal_blit(x0, y0, source);
    }
#else
    color_t color;
    color_t *ptr = (color_t *) source->buffer;
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	68db      	ldr	r3, [r3, #12]
 8009020:	617b      	str	r3, [r7, #20]

    for (uint16_t y = 0; y < source->height; y++) {
 8009022:	2300      	movs	r3, #0
 8009024:	827b      	strh	r3, [r7, #18]
 8009026:	e020      	b.n	800906a <hagl_blit+0x5e>
        for (uint16_t x = 0; x < source->width; x++) {
 8009028:	2300      	movs	r3, #0
 800902a:	823b      	strh	r3, [r7, #16]
 800902c:	e015      	b.n	800905a <hagl_blit+0x4e>
            color = *(ptr++);
 800902e:	697b      	ldr	r3, [r7, #20]
 8009030:	1c9a      	adds	r2, r3, #2
 8009032:	617a      	str	r2, [r7, #20]
 8009034:	881b      	ldrh	r3, [r3, #0]
 8009036:	81fb      	strh	r3, [r7, #14]
            hagl_put_pixel(x0 + x, y0 + y, color);
 8009038:	88fa      	ldrh	r2, [r7, #6]
 800903a:	8a3b      	ldrh	r3, [r7, #16]
 800903c:	4413      	add	r3, r2
 800903e:	b29b      	uxth	r3, r3
 8009040:	b218      	sxth	r0, r3
 8009042:	88ba      	ldrh	r2, [r7, #4]
 8009044:	8a7b      	ldrh	r3, [r7, #18]
 8009046:	4413      	add	r3, r2
 8009048:	b29b      	uxth	r3, r3
 800904a:	b21b      	sxth	r3, r3
 800904c:	89fa      	ldrh	r2, [r7, #14]
 800904e:	4619      	mov	r1, r3
 8009050:	f7ff fce2 	bl	8008a18 <hagl_put_pixel>
        for (uint16_t x = 0; x < source->width; x++) {
 8009054:	8a3b      	ldrh	r3, [r7, #16]
 8009056:	3301      	adds	r3, #1
 8009058:	823b      	strh	r3, [r7, #16]
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	881b      	ldrh	r3, [r3, #0]
 800905e:	8a3a      	ldrh	r2, [r7, #16]
 8009060:	429a      	cmp	r2, r3
 8009062:	d3e4      	bcc.n	800902e <hagl_blit+0x22>
    for (uint16_t y = 0; y < source->height; y++) {
 8009064:	8a7b      	ldrh	r3, [r7, #18]
 8009066:	3301      	adds	r3, #1
 8009068:	827b      	strh	r3, [r7, #18]
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	885b      	ldrh	r3, [r3, #2]
 800906e:	8a7a      	ldrh	r2, [r7, #18]
 8009070:	429a      	cmp	r2, r3
 8009072:	d3d9      	bcc.n	8009028 <hagl_blit+0x1c>
        }
    }
#endif
};
 8009074:	bf00      	nop
 8009076:	bf00      	nop
 8009078:	3718      	adds	r7, #24
 800907a:	46bd      	mov	sp, r7
 800907c:	bd80      	pop	{r7, pc}
	...

08009080 <hagl_clear_screen>:
        }
    }
#endif
};

void hagl_clear_screen() {
 8009080:	b580      	push	{r7, lr}
 8009082:	b084      	sub	sp, #16
 8009084:	af02      	add	r7, sp, #8
#ifdef HAGL_HAS_HAL_CLEAR_SCREEN
    hagl_hal_clear_screen();
#else
    uint16_t x0 = clip_window.x0;
 8009086:	4b12      	ldr	r3, [pc, #72]	; (80090d0 <hagl_clear_screen+0x50>)
 8009088:	881b      	ldrh	r3, [r3, #0]
 800908a:	80fb      	strh	r3, [r7, #6]
    uint16_t y0 = clip_window.y0;
 800908c:	4b10      	ldr	r3, [pc, #64]	; (80090d0 <hagl_clear_screen+0x50>)
 800908e:	885b      	ldrh	r3, [r3, #2]
 8009090:	80bb      	strh	r3, [r7, #4]
    uint16_t x1 = clip_window.x1;
 8009092:	4b0f      	ldr	r3, [pc, #60]	; (80090d0 <hagl_clear_screen+0x50>)
 8009094:	889b      	ldrh	r3, [r3, #4]
 8009096:	807b      	strh	r3, [r7, #2]
    uint16_t y1 = clip_window.y1;
 8009098:	4b0d      	ldr	r3, [pc, #52]	; (80090d0 <hagl_clear_screen+0x50>)
 800909a:	88db      	ldrh	r3, [r3, #6]
 800909c:	803b      	strh	r3, [r7, #0]

    hagl_set_clip_window(0, 0, DISPLAY_WIDTH - 1, DISPLAY_HEIGHT -1);
 800909e:	237f      	movs	r3, #127	; 0x7f
 80090a0:	229f      	movs	r2, #159	; 0x9f
 80090a2:	2100      	movs	r1, #0
 80090a4:	2000      	movs	r0, #0
 80090a6:	f7ff fc95 	bl	80089d4 <hagl_set_clip_window>
    hagl_fill_rectangle(0, 0, DISPLAY_WIDTH - 1, DISPLAY_HEIGHT -1, 0x00);
 80090aa:	2300      	movs	r3, #0
 80090ac:	9300      	str	r3, [sp, #0]
 80090ae:	237f      	movs	r3, #127	; 0x7f
 80090b0:	229f      	movs	r2, #159	; 0x9f
 80090b2:	2100      	movs	r1, #0
 80090b4:	2000      	movs	r0, #0
 80090b6:	f7ff fdaf 	bl	8008c18 <hagl_fill_rectangle>
    hagl_set_clip_window(x0, y0, x1, y1);
 80090ba:	883b      	ldrh	r3, [r7, #0]
 80090bc:	887a      	ldrh	r2, [r7, #2]
 80090be:	88b9      	ldrh	r1, [r7, #4]
 80090c0:	88f8      	ldrh	r0, [r7, #6]
 80090c2:	f7ff fc87 	bl	80089d4 <hagl_set_clip_window>
#endif
}
 80090c6:	bf00      	nop
 80090c8:	3708      	adds	r7, #8
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}
 80090ce:	bf00      	nop
 80090d0:	2000000c 	.word	0x2000000c

080090d4 <hagl_init>:
#else
    return rgb565(r, g, b);
#endif
}

bitmap_t *hagl_init() {
 80090d4:	b580      	push	{r7, lr}
 80090d6:	af00      	add	r7, sp, #0
#ifdef HAGL_HAS_HAL_INIT
    bitmap_t *bb = hagl_hal_init();
    hagl_clear_screen();
    return bb;
#else
    hagl_clear_screen();
 80090d8:	f7ff ffd2 	bl	8009080 <hagl_clear_screen>
    return NULL;
 80090dc:	2300      	movs	r3, #0
#endif
};
 80090de:	4618      	mov	r0, r3
 80090e0:	bd80      	pop	{r7, pc}
	...

080090e4 <__errno>:
 80090e4:	4b01      	ldr	r3, [pc, #4]	; (80090ec <__errno+0x8>)
 80090e6:	6818      	ldr	r0, [r3, #0]
 80090e8:	4770      	bx	lr
 80090ea:	bf00      	nop
 80090ec:	20000014 	.word	0x20000014

080090f0 <__sflush_r>:
 80090f0:	898a      	ldrh	r2, [r1, #12]
 80090f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090f6:	4605      	mov	r5, r0
 80090f8:	0710      	lsls	r0, r2, #28
 80090fa:	460c      	mov	r4, r1
 80090fc:	d458      	bmi.n	80091b0 <__sflush_r+0xc0>
 80090fe:	684b      	ldr	r3, [r1, #4]
 8009100:	2b00      	cmp	r3, #0
 8009102:	dc05      	bgt.n	8009110 <__sflush_r+0x20>
 8009104:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009106:	2b00      	cmp	r3, #0
 8009108:	dc02      	bgt.n	8009110 <__sflush_r+0x20>
 800910a:	2000      	movs	r0, #0
 800910c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009110:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009112:	2e00      	cmp	r6, #0
 8009114:	d0f9      	beq.n	800910a <__sflush_r+0x1a>
 8009116:	2300      	movs	r3, #0
 8009118:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800911c:	682f      	ldr	r7, [r5, #0]
 800911e:	602b      	str	r3, [r5, #0]
 8009120:	d032      	beq.n	8009188 <__sflush_r+0x98>
 8009122:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009124:	89a3      	ldrh	r3, [r4, #12]
 8009126:	075a      	lsls	r2, r3, #29
 8009128:	d505      	bpl.n	8009136 <__sflush_r+0x46>
 800912a:	6863      	ldr	r3, [r4, #4]
 800912c:	1ac0      	subs	r0, r0, r3
 800912e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009130:	b10b      	cbz	r3, 8009136 <__sflush_r+0x46>
 8009132:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009134:	1ac0      	subs	r0, r0, r3
 8009136:	2300      	movs	r3, #0
 8009138:	4602      	mov	r2, r0
 800913a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800913c:	6a21      	ldr	r1, [r4, #32]
 800913e:	4628      	mov	r0, r5
 8009140:	47b0      	blx	r6
 8009142:	1c43      	adds	r3, r0, #1
 8009144:	89a3      	ldrh	r3, [r4, #12]
 8009146:	d106      	bne.n	8009156 <__sflush_r+0x66>
 8009148:	6829      	ldr	r1, [r5, #0]
 800914a:	291d      	cmp	r1, #29
 800914c:	d82c      	bhi.n	80091a8 <__sflush_r+0xb8>
 800914e:	4a2a      	ldr	r2, [pc, #168]	; (80091f8 <__sflush_r+0x108>)
 8009150:	40ca      	lsrs	r2, r1
 8009152:	07d6      	lsls	r6, r2, #31
 8009154:	d528      	bpl.n	80091a8 <__sflush_r+0xb8>
 8009156:	2200      	movs	r2, #0
 8009158:	6062      	str	r2, [r4, #4]
 800915a:	04d9      	lsls	r1, r3, #19
 800915c:	6922      	ldr	r2, [r4, #16]
 800915e:	6022      	str	r2, [r4, #0]
 8009160:	d504      	bpl.n	800916c <__sflush_r+0x7c>
 8009162:	1c42      	adds	r2, r0, #1
 8009164:	d101      	bne.n	800916a <__sflush_r+0x7a>
 8009166:	682b      	ldr	r3, [r5, #0]
 8009168:	b903      	cbnz	r3, 800916c <__sflush_r+0x7c>
 800916a:	6560      	str	r0, [r4, #84]	; 0x54
 800916c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800916e:	602f      	str	r7, [r5, #0]
 8009170:	2900      	cmp	r1, #0
 8009172:	d0ca      	beq.n	800910a <__sflush_r+0x1a>
 8009174:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009178:	4299      	cmp	r1, r3
 800917a:	d002      	beq.n	8009182 <__sflush_r+0x92>
 800917c:	4628      	mov	r0, r5
 800917e:	f000 fa33 	bl	80095e8 <_free_r>
 8009182:	2000      	movs	r0, #0
 8009184:	6360      	str	r0, [r4, #52]	; 0x34
 8009186:	e7c1      	b.n	800910c <__sflush_r+0x1c>
 8009188:	6a21      	ldr	r1, [r4, #32]
 800918a:	2301      	movs	r3, #1
 800918c:	4628      	mov	r0, r5
 800918e:	47b0      	blx	r6
 8009190:	1c41      	adds	r1, r0, #1
 8009192:	d1c7      	bne.n	8009124 <__sflush_r+0x34>
 8009194:	682b      	ldr	r3, [r5, #0]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d0c4      	beq.n	8009124 <__sflush_r+0x34>
 800919a:	2b1d      	cmp	r3, #29
 800919c:	d001      	beq.n	80091a2 <__sflush_r+0xb2>
 800919e:	2b16      	cmp	r3, #22
 80091a0:	d101      	bne.n	80091a6 <__sflush_r+0xb6>
 80091a2:	602f      	str	r7, [r5, #0]
 80091a4:	e7b1      	b.n	800910a <__sflush_r+0x1a>
 80091a6:	89a3      	ldrh	r3, [r4, #12]
 80091a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091ac:	81a3      	strh	r3, [r4, #12]
 80091ae:	e7ad      	b.n	800910c <__sflush_r+0x1c>
 80091b0:	690f      	ldr	r7, [r1, #16]
 80091b2:	2f00      	cmp	r7, #0
 80091b4:	d0a9      	beq.n	800910a <__sflush_r+0x1a>
 80091b6:	0793      	lsls	r3, r2, #30
 80091b8:	680e      	ldr	r6, [r1, #0]
 80091ba:	bf08      	it	eq
 80091bc:	694b      	ldreq	r3, [r1, #20]
 80091be:	600f      	str	r7, [r1, #0]
 80091c0:	bf18      	it	ne
 80091c2:	2300      	movne	r3, #0
 80091c4:	eba6 0807 	sub.w	r8, r6, r7
 80091c8:	608b      	str	r3, [r1, #8]
 80091ca:	f1b8 0f00 	cmp.w	r8, #0
 80091ce:	dd9c      	ble.n	800910a <__sflush_r+0x1a>
 80091d0:	6a21      	ldr	r1, [r4, #32]
 80091d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80091d4:	4643      	mov	r3, r8
 80091d6:	463a      	mov	r2, r7
 80091d8:	4628      	mov	r0, r5
 80091da:	47b0      	blx	r6
 80091dc:	2800      	cmp	r0, #0
 80091de:	dc06      	bgt.n	80091ee <__sflush_r+0xfe>
 80091e0:	89a3      	ldrh	r3, [r4, #12]
 80091e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091e6:	81a3      	strh	r3, [r4, #12]
 80091e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80091ec:	e78e      	b.n	800910c <__sflush_r+0x1c>
 80091ee:	4407      	add	r7, r0
 80091f0:	eba8 0800 	sub.w	r8, r8, r0
 80091f4:	e7e9      	b.n	80091ca <__sflush_r+0xda>
 80091f6:	bf00      	nop
 80091f8:	20400001 	.word	0x20400001

080091fc <_fflush_r>:
 80091fc:	b538      	push	{r3, r4, r5, lr}
 80091fe:	690b      	ldr	r3, [r1, #16]
 8009200:	4605      	mov	r5, r0
 8009202:	460c      	mov	r4, r1
 8009204:	b913      	cbnz	r3, 800920c <_fflush_r+0x10>
 8009206:	2500      	movs	r5, #0
 8009208:	4628      	mov	r0, r5
 800920a:	bd38      	pop	{r3, r4, r5, pc}
 800920c:	b118      	cbz	r0, 8009216 <_fflush_r+0x1a>
 800920e:	6983      	ldr	r3, [r0, #24]
 8009210:	b90b      	cbnz	r3, 8009216 <_fflush_r+0x1a>
 8009212:	f000 f899 	bl	8009348 <__sinit>
 8009216:	4b14      	ldr	r3, [pc, #80]	; (8009268 <_fflush_r+0x6c>)
 8009218:	429c      	cmp	r4, r3
 800921a:	d11b      	bne.n	8009254 <_fflush_r+0x58>
 800921c:	686c      	ldr	r4, [r5, #4]
 800921e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d0ef      	beq.n	8009206 <_fflush_r+0xa>
 8009226:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009228:	07d0      	lsls	r0, r2, #31
 800922a:	d404      	bmi.n	8009236 <_fflush_r+0x3a>
 800922c:	0599      	lsls	r1, r3, #22
 800922e:	d402      	bmi.n	8009236 <_fflush_r+0x3a>
 8009230:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009232:	f000 f94c 	bl	80094ce <__retarget_lock_acquire_recursive>
 8009236:	4628      	mov	r0, r5
 8009238:	4621      	mov	r1, r4
 800923a:	f7ff ff59 	bl	80090f0 <__sflush_r>
 800923e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009240:	07da      	lsls	r2, r3, #31
 8009242:	4605      	mov	r5, r0
 8009244:	d4e0      	bmi.n	8009208 <_fflush_r+0xc>
 8009246:	89a3      	ldrh	r3, [r4, #12]
 8009248:	059b      	lsls	r3, r3, #22
 800924a:	d4dd      	bmi.n	8009208 <_fflush_r+0xc>
 800924c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800924e:	f000 f93f 	bl	80094d0 <__retarget_lock_release_recursive>
 8009252:	e7d9      	b.n	8009208 <_fflush_r+0xc>
 8009254:	4b05      	ldr	r3, [pc, #20]	; (800926c <_fflush_r+0x70>)
 8009256:	429c      	cmp	r4, r3
 8009258:	d101      	bne.n	800925e <_fflush_r+0x62>
 800925a:	68ac      	ldr	r4, [r5, #8]
 800925c:	e7df      	b.n	800921e <_fflush_r+0x22>
 800925e:	4b04      	ldr	r3, [pc, #16]	; (8009270 <_fflush_r+0x74>)
 8009260:	429c      	cmp	r4, r3
 8009262:	bf08      	it	eq
 8009264:	68ec      	ldreq	r4, [r5, #12]
 8009266:	e7da      	b.n	800921e <_fflush_r+0x22>
 8009268:	08012918 	.word	0x08012918
 800926c:	08012938 	.word	0x08012938
 8009270:	080128f8 	.word	0x080128f8

08009274 <fflush>:
 8009274:	4601      	mov	r1, r0
 8009276:	b920      	cbnz	r0, 8009282 <fflush+0xe>
 8009278:	4b04      	ldr	r3, [pc, #16]	; (800928c <fflush+0x18>)
 800927a:	4905      	ldr	r1, [pc, #20]	; (8009290 <fflush+0x1c>)
 800927c:	6818      	ldr	r0, [r3, #0]
 800927e:	f000 b8e1 	b.w	8009444 <_fwalk_reent>
 8009282:	4b04      	ldr	r3, [pc, #16]	; (8009294 <fflush+0x20>)
 8009284:	6818      	ldr	r0, [r3, #0]
 8009286:	f7ff bfb9 	b.w	80091fc <_fflush_r>
 800928a:	bf00      	nop
 800928c:	08012958 	.word	0x08012958
 8009290:	080091fd 	.word	0x080091fd
 8009294:	20000014 	.word	0x20000014

08009298 <std>:
 8009298:	2300      	movs	r3, #0
 800929a:	b510      	push	{r4, lr}
 800929c:	4604      	mov	r4, r0
 800929e:	e9c0 3300 	strd	r3, r3, [r0]
 80092a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80092a6:	6083      	str	r3, [r0, #8]
 80092a8:	8181      	strh	r1, [r0, #12]
 80092aa:	6643      	str	r3, [r0, #100]	; 0x64
 80092ac:	81c2      	strh	r2, [r0, #14]
 80092ae:	6183      	str	r3, [r0, #24]
 80092b0:	4619      	mov	r1, r3
 80092b2:	2208      	movs	r2, #8
 80092b4:	305c      	adds	r0, #92	; 0x5c
 80092b6:	f000 f98f 	bl	80095d8 <memset>
 80092ba:	4b05      	ldr	r3, [pc, #20]	; (80092d0 <std+0x38>)
 80092bc:	6263      	str	r3, [r4, #36]	; 0x24
 80092be:	4b05      	ldr	r3, [pc, #20]	; (80092d4 <std+0x3c>)
 80092c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80092c2:	4b05      	ldr	r3, [pc, #20]	; (80092d8 <std+0x40>)
 80092c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80092c6:	4b05      	ldr	r3, [pc, #20]	; (80092dc <std+0x44>)
 80092c8:	6224      	str	r4, [r4, #32]
 80092ca:	6323      	str	r3, [r4, #48]	; 0x30
 80092cc:	bd10      	pop	{r4, pc}
 80092ce:	bf00      	nop
 80092d0:	0800a23d 	.word	0x0800a23d
 80092d4:	0800a263 	.word	0x0800a263
 80092d8:	0800a29b 	.word	0x0800a29b
 80092dc:	0800a2bf 	.word	0x0800a2bf

080092e0 <_cleanup_r>:
 80092e0:	4901      	ldr	r1, [pc, #4]	; (80092e8 <_cleanup_r+0x8>)
 80092e2:	f000 b8af 	b.w	8009444 <_fwalk_reent>
 80092e6:	bf00      	nop
 80092e8:	080091fd 	.word	0x080091fd

080092ec <__sfmoreglue>:
 80092ec:	b570      	push	{r4, r5, r6, lr}
 80092ee:	2268      	movs	r2, #104	; 0x68
 80092f0:	1e4d      	subs	r5, r1, #1
 80092f2:	4355      	muls	r5, r2
 80092f4:	460e      	mov	r6, r1
 80092f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80092fa:	f000 f9e1 	bl	80096c0 <_malloc_r>
 80092fe:	4604      	mov	r4, r0
 8009300:	b140      	cbz	r0, 8009314 <__sfmoreglue+0x28>
 8009302:	2100      	movs	r1, #0
 8009304:	e9c0 1600 	strd	r1, r6, [r0]
 8009308:	300c      	adds	r0, #12
 800930a:	60a0      	str	r0, [r4, #8]
 800930c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009310:	f000 f962 	bl	80095d8 <memset>
 8009314:	4620      	mov	r0, r4
 8009316:	bd70      	pop	{r4, r5, r6, pc}

08009318 <__sfp_lock_acquire>:
 8009318:	4801      	ldr	r0, [pc, #4]	; (8009320 <__sfp_lock_acquire+0x8>)
 800931a:	f000 b8d8 	b.w	80094ce <__retarget_lock_acquire_recursive>
 800931e:	bf00      	nop
 8009320:	200004b9 	.word	0x200004b9

08009324 <__sfp_lock_release>:
 8009324:	4801      	ldr	r0, [pc, #4]	; (800932c <__sfp_lock_release+0x8>)
 8009326:	f000 b8d3 	b.w	80094d0 <__retarget_lock_release_recursive>
 800932a:	bf00      	nop
 800932c:	200004b9 	.word	0x200004b9

08009330 <__sinit_lock_acquire>:
 8009330:	4801      	ldr	r0, [pc, #4]	; (8009338 <__sinit_lock_acquire+0x8>)
 8009332:	f000 b8cc 	b.w	80094ce <__retarget_lock_acquire_recursive>
 8009336:	bf00      	nop
 8009338:	200004ba 	.word	0x200004ba

0800933c <__sinit_lock_release>:
 800933c:	4801      	ldr	r0, [pc, #4]	; (8009344 <__sinit_lock_release+0x8>)
 800933e:	f000 b8c7 	b.w	80094d0 <__retarget_lock_release_recursive>
 8009342:	bf00      	nop
 8009344:	200004ba 	.word	0x200004ba

08009348 <__sinit>:
 8009348:	b510      	push	{r4, lr}
 800934a:	4604      	mov	r4, r0
 800934c:	f7ff fff0 	bl	8009330 <__sinit_lock_acquire>
 8009350:	69a3      	ldr	r3, [r4, #24]
 8009352:	b11b      	cbz	r3, 800935c <__sinit+0x14>
 8009354:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009358:	f7ff bff0 	b.w	800933c <__sinit_lock_release>
 800935c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009360:	6523      	str	r3, [r4, #80]	; 0x50
 8009362:	4b13      	ldr	r3, [pc, #76]	; (80093b0 <__sinit+0x68>)
 8009364:	4a13      	ldr	r2, [pc, #76]	; (80093b4 <__sinit+0x6c>)
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	62a2      	str	r2, [r4, #40]	; 0x28
 800936a:	42a3      	cmp	r3, r4
 800936c:	bf04      	itt	eq
 800936e:	2301      	moveq	r3, #1
 8009370:	61a3      	streq	r3, [r4, #24]
 8009372:	4620      	mov	r0, r4
 8009374:	f000 f820 	bl	80093b8 <__sfp>
 8009378:	6060      	str	r0, [r4, #4]
 800937a:	4620      	mov	r0, r4
 800937c:	f000 f81c 	bl	80093b8 <__sfp>
 8009380:	60a0      	str	r0, [r4, #8]
 8009382:	4620      	mov	r0, r4
 8009384:	f000 f818 	bl	80093b8 <__sfp>
 8009388:	2200      	movs	r2, #0
 800938a:	60e0      	str	r0, [r4, #12]
 800938c:	2104      	movs	r1, #4
 800938e:	6860      	ldr	r0, [r4, #4]
 8009390:	f7ff ff82 	bl	8009298 <std>
 8009394:	68a0      	ldr	r0, [r4, #8]
 8009396:	2201      	movs	r2, #1
 8009398:	2109      	movs	r1, #9
 800939a:	f7ff ff7d 	bl	8009298 <std>
 800939e:	68e0      	ldr	r0, [r4, #12]
 80093a0:	2202      	movs	r2, #2
 80093a2:	2112      	movs	r1, #18
 80093a4:	f7ff ff78 	bl	8009298 <std>
 80093a8:	2301      	movs	r3, #1
 80093aa:	61a3      	str	r3, [r4, #24]
 80093ac:	e7d2      	b.n	8009354 <__sinit+0xc>
 80093ae:	bf00      	nop
 80093b0:	08012958 	.word	0x08012958
 80093b4:	080092e1 	.word	0x080092e1

080093b8 <__sfp>:
 80093b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093ba:	4607      	mov	r7, r0
 80093bc:	f7ff ffac 	bl	8009318 <__sfp_lock_acquire>
 80093c0:	4b1e      	ldr	r3, [pc, #120]	; (800943c <__sfp+0x84>)
 80093c2:	681e      	ldr	r6, [r3, #0]
 80093c4:	69b3      	ldr	r3, [r6, #24]
 80093c6:	b913      	cbnz	r3, 80093ce <__sfp+0x16>
 80093c8:	4630      	mov	r0, r6
 80093ca:	f7ff ffbd 	bl	8009348 <__sinit>
 80093ce:	3648      	adds	r6, #72	; 0x48
 80093d0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80093d4:	3b01      	subs	r3, #1
 80093d6:	d503      	bpl.n	80093e0 <__sfp+0x28>
 80093d8:	6833      	ldr	r3, [r6, #0]
 80093da:	b30b      	cbz	r3, 8009420 <__sfp+0x68>
 80093dc:	6836      	ldr	r6, [r6, #0]
 80093de:	e7f7      	b.n	80093d0 <__sfp+0x18>
 80093e0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80093e4:	b9d5      	cbnz	r5, 800941c <__sfp+0x64>
 80093e6:	4b16      	ldr	r3, [pc, #88]	; (8009440 <__sfp+0x88>)
 80093e8:	60e3      	str	r3, [r4, #12]
 80093ea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80093ee:	6665      	str	r5, [r4, #100]	; 0x64
 80093f0:	f000 f86c 	bl	80094cc <__retarget_lock_init_recursive>
 80093f4:	f7ff ff96 	bl	8009324 <__sfp_lock_release>
 80093f8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80093fc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009400:	6025      	str	r5, [r4, #0]
 8009402:	61a5      	str	r5, [r4, #24]
 8009404:	2208      	movs	r2, #8
 8009406:	4629      	mov	r1, r5
 8009408:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800940c:	f000 f8e4 	bl	80095d8 <memset>
 8009410:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009414:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009418:	4620      	mov	r0, r4
 800941a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800941c:	3468      	adds	r4, #104	; 0x68
 800941e:	e7d9      	b.n	80093d4 <__sfp+0x1c>
 8009420:	2104      	movs	r1, #4
 8009422:	4638      	mov	r0, r7
 8009424:	f7ff ff62 	bl	80092ec <__sfmoreglue>
 8009428:	4604      	mov	r4, r0
 800942a:	6030      	str	r0, [r6, #0]
 800942c:	2800      	cmp	r0, #0
 800942e:	d1d5      	bne.n	80093dc <__sfp+0x24>
 8009430:	f7ff ff78 	bl	8009324 <__sfp_lock_release>
 8009434:	230c      	movs	r3, #12
 8009436:	603b      	str	r3, [r7, #0]
 8009438:	e7ee      	b.n	8009418 <__sfp+0x60>
 800943a:	bf00      	nop
 800943c:	08012958 	.word	0x08012958
 8009440:	ffff0001 	.word	0xffff0001

08009444 <_fwalk_reent>:
 8009444:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009448:	4606      	mov	r6, r0
 800944a:	4688      	mov	r8, r1
 800944c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009450:	2700      	movs	r7, #0
 8009452:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009456:	f1b9 0901 	subs.w	r9, r9, #1
 800945a:	d505      	bpl.n	8009468 <_fwalk_reent+0x24>
 800945c:	6824      	ldr	r4, [r4, #0]
 800945e:	2c00      	cmp	r4, #0
 8009460:	d1f7      	bne.n	8009452 <_fwalk_reent+0xe>
 8009462:	4638      	mov	r0, r7
 8009464:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009468:	89ab      	ldrh	r3, [r5, #12]
 800946a:	2b01      	cmp	r3, #1
 800946c:	d907      	bls.n	800947e <_fwalk_reent+0x3a>
 800946e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009472:	3301      	adds	r3, #1
 8009474:	d003      	beq.n	800947e <_fwalk_reent+0x3a>
 8009476:	4629      	mov	r1, r5
 8009478:	4630      	mov	r0, r6
 800947a:	47c0      	blx	r8
 800947c:	4307      	orrs	r7, r0
 800947e:	3568      	adds	r5, #104	; 0x68
 8009480:	e7e9      	b.n	8009456 <_fwalk_reent+0x12>
	...

08009484 <__libc_init_array>:
 8009484:	b570      	push	{r4, r5, r6, lr}
 8009486:	4d0d      	ldr	r5, [pc, #52]	; (80094bc <__libc_init_array+0x38>)
 8009488:	4c0d      	ldr	r4, [pc, #52]	; (80094c0 <__libc_init_array+0x3c>)
 800948a:	1b64      	subs	r4, r4, r5
 800948c:	10a4      	asrs	r4, r4, #2
 800948e:	2600      	movs	r6, #0
 8009490:	42a6      	cmp	r6, r4
 8009492:	d109      	bne.n	80094a8 <__libc_init_array+0x24>
 8009494:	4d0b      	ldr	r5, [pc, #44]	; (80094c4 <__libc_init_array+0x40>)
 8009496:	4c0c      	ldr	r4, [pc, #48]	; (80094c8 <__libc_init_array+0x44>)
 8009498:	f005 f950 	bl	800e73c <_init>
 800949c:	1b64      	subs	r4, r4, r5
 800949e:	10a4      	asrs	r4, r4, #2
 80094a0:	2600      	movs	r6, #0
 80094a2:	42a6      	cmp	r6, r4
 80094a4:	d105      	bne.n	80094b2 <__libc_init_array+0x2e>
 80094a6:	bd70      	pop	{r4, r5, r6, pc}
 80094a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80094ac:	4798      	blx	r3
 80094ae:	3601      	adds	r6, #1
 80094b0:	e7ee      	b.n	8009490 <__libc_init_array+0xc>
 80094b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80094b6:	4798      	blx	r3
 80094b8:	3601      	adds	r6, #1
 80094ba:	e7f2      	b.n	80094a2 <__libc_init_array+0x1e>
 80094bc:	08012f08 	.word	0x08012f08
 80094c0:	08012f08 	.word	0x08012f08
 80094c4:	08012f08 	.word	0x08012f08
 80094c8:	08012f0c 	.word	0x08012f0c

080094cc <__retarget_lock_init_recursive>:
 80094cc:	4770      	bx	lr

080094ce <__retarget_lock_acquire_recursive>:
 80094ce:	4770      	bx	lr

080094d0 <__retarget_lock_release_recursive>:
 80094d0:	4770      	bx	lr

080094d2 <__swhatbuf_r>:
 80094d2:	b570      	push	{r4, r5, r6, lr}
 80094d4:	460e      	mov	r6, r1
 80094d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094da:	2900      	cmp	r1, #0
 80094dc:	b096      	sub	sp, #88	; 0x58
 80094de:	4614      	mov	r4, r2
 80094e0:	461d      	mov	r5, r3
 80094e2:	da08      	bge.n	80094f6 <__swhatbuf_r+0x24>
 80094e4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80094e8:	2200      	movs	r2, #0
 80094ea:	602a      	str	r2, [r5, #0]
 80094ec:	061a      	lsls	r2, r3, #24
 80094ee:	d410      	bmi.n	8009512 <__swhatbuf_r+0x40>
 80094f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80094f4:	e00e      	b.n	8009514 <__swhatbuf_r+0x42>
 80094f6:	466a      	mov	r2, sp
 80094f8:	f001 fe88 	bl	800b20c <_fstat_r>
 80094fc:	2800      	cmp	r0, #0
 80094fe:	dbf1      	blt.n	80094e4 <__swhatbuf_r+0x12>
 8009500:	9a01      	ldr	r2, [sp, #4]
 8009502:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009506:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800950a:	425a      	negs	r2, r3
 800950c:	415a      	adcs	r2, r3
 800950e:	602a      	str	r2, [r5, #0]
 8009510:	e7ee      	b.n	80094f0 <__swhatbuf_r+0x1e>
 8009512:	2340      	movs	r3, #64	; 0x40
 8009514:	2000      	movs	r0, #0
 8009516:	6023      	str	r3, [r4, #0]
 8009518:	b016      	add	sp, #88	; 0x58
 800951a:	bd70      	pop	{r4, r5, r6, pc}

0800951c <__smakebuf_r>:
 800951c:	898b      	ldrh	r3, [r1, #12]
 800951e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009520:	079d      	lsls	r5, r3, #30
 8009522:	4606      	mov	r6, r0
 8009524:	460c      	mov	r4, r1
 8009526:	d507      	bpl.n	8009538 <__smakebuf_r+0x1c>
 8009528:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800952c:	6023      	str	r3, [r4, #0]
 800952e:	6123      	str	r3, [r4, #16]
 8009530:	2301      	movs	r3, #1
 8009532:	6163      	str	r3, [r4, #20]
 8009534:	b002      	add	sp, #8
 8009536:	bd70      	pop	{r4, r5, r6, pc}
 8009538:	ab01      	add	r3, sp, #4
 800953a:	466a      	mov	r2, sp
 800953c:	f7ff ffc9 	bl	80094d2 <__swhatbuf_r>
 8009540:	9900      	ldr	r1, [sp, #0]
 8009542:	4605      	mov	r5, r0
 8009544:	4630      	mov	r0, r6
 8009546:	f000 f8bb 	bl	80096c0 <_malloc_r>
 800954a:	b948      	cbnz	r0, 8009560 <__smakebuf_r+0x44>
 800954c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009550:	059a      	lsls	r2, r3, #22
 8009552:	d4ef      	bmi.n	8009534 <__smakebuf_r+0x18>
 8009554:	f023 0303 	bic.w	r3, r3, #3
 8009558:	f043 0302 	orr.w	r3, r3, #2
 800955c:	81a3      	strh	r3, [r4, #12]
 800955e:	e7e3      	b.n	8009528 <__smakebuf_r+0xc>
 8009560:	4b0d      	ldr	r3, [pc, #52]	; (8009598 <__smakebuf_r+0x7c>)
 8009562:	62b3      	str	r3, [r6, #40]	; 0x28
 8009564:	89a3      	ldrh	r3, [r4, #12]
 8009566:	6020      	str	r0, [r4, #0]
 8009568:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800956c:	81a3      	strh	r3, [r4, #12]
 800956e:	9b00      	ldr	r3, [sp, #0]
 8009570:	6163      	str	r3, [r4, #20]
 8009572:	9b01      	ldr	r3, [sp, #4]
 8009574:	6120      	str	r0, [r4, #16]
 8009576:	b15b      	cbz	r3, 8009590 <__smakebuf_r+0x74>
 8009578:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800957c:	4630      	mov	r0, r6
 800957e:	f001 fe57 	bl	800b230 <_isatty_r>
 8009582:	b128      	cbz	r0, 8009590 <__smakebuf_r+0x74>
 8009584:	89a3      	ldrh	r3, [r4, #12]
 8009586:	f023 0303 	bic.w	r3, r3, #3
 800958a:	f043 0301 	orr.w	r3, r3, #1
 800958e:	81a3      	strh	r3, [r4, #12]
 8009590:	89a0      	ldrh	r0, [r4, #12]
 8009592:	4305      	orrs	r5, r0
 8009594:	81a5      	strh	r5, [r4, #12]
 8009596:	e7cd      	b.n	8009534 <__smakebuf_r+0x18>
 8009598:	080092e1 	.word	0x080092e1

0800959c <malloc>:
 800959c:	4b02      	ldr	r3, [pc, #8]	; (80095a8 <malloc+0xc>)
 800959e:	4601      	mov	r1, r0
 80095a0:	6818      	ldr	r0, [r3, #0]
 80095a2:	f000 b88d 	b.w	80096c0 <_malloc_r>
 80095a6:	bf00      	nop
 80095a8:	20000014 	.word	0x20000014

080095ac <free>:
 80095ac:	4b02      	ldr	r3, [pc, #8]	; (80095b8 <free+0xc>)
 80095ae:	4601      	mov	r1, r0
 80095b0:	6818      	ldr	r0, [r3, #0]
 80095b2:	f000 b819 	b.w	80095e8 <_free_r>
 80095b6:	bf00      	nop
 80095b8:	20000014 	.word	0x20000014

080095bc <memcpy>:
 80095bc:	440a      	add	r2, r1
 80095be:	4291      	cmp	r1, r2
 80095c0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80095c4:	d100      	bne.n	80095c8 <memcpy+0xc>
 80095c6:	4770      	bx	lr
 80095c8:	b510      	push	{r4, lr}
 80095ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80095ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80095d2:	4291      	cmp	r1, r2
 80095d4:	d1f9      	bne.n	80095ca <memcpy+0xe>
 80095d6:	bd10      	pop	{r4, pc}

080095d8 <memset>:
 80095d8:	4402      	add	r2, r0
 80095da:	4603      	mov	r3, r0
 80095dc:	4293      	cmp	r3, r2
 80095de:	d100      	bne.n	80095e2 <memset+0xa>
 80095e0:	4770      	bx	lr
 80095e2:	f803 1b01 	strb.w	r1, [r3], #1
 80095e6:	e7f9      	b.n	80095dc <memset+0x4>

080095e8 <_free_r>:
 80095e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80095ea:	2900      	cmp	r1, #0
 80095ec:	d044      	beq.n	8009678 <_free_r+0x90>
 80095ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095f2:	9001      	str	r0, [sp, #4]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	f1a1 0404 	sub.w	r4, r1, #4
 80095fa:	bfb8      	it	lt
 80095fc:	18e4      	addlt	r4, r4, r3
 80095fe:	f001 fe3d 	bl	800b27c <__malloc_lock>
 8009602:	4a1e      	ldr	r2, [pc, #120]	; (800967c <_free_r+0x94>)
 8009604:	9801      	ldr	r0, [sp, #4]
 8009606:	6813      	ldr	r3, [r2, #0]
 8009608:	b933      	cbnz	r3, 8009618 <_free_r+0x30>
 800960a:	6063      	str	r3, [r4, #4]
 800960c:	6014      	str	r4, [r2, #0]
 800960e:	b003      	add	sp, #12
 8009610:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009614:	f001 be38 	b.w	800b288 <__malloc_unlock>
 8009618:	42a3      	cmp	r3, r4
 800961a:	d908      	bls.n	800962e <_free_r+0x46>
 800961c:	6825      	ldr	r5, [r4, #0]
 800961e:	1961      	adds	r1, r4, r5
 8009620:	428b      	cmp	r3, r1
 8009622:	bf01      	itttt	eq
 8009624:	6819      	ldreq	r1, [r3, #0]
 8009626:	685b      	ldreq	r3, [r3, #4]
 8009628:	1949      	addeq	r1, r1, r5
 800962a:	6021      	streq	r1, [r4, #0]
 800962c:	e7ed      	b.n	800960a <_free_r+0x22>
 800962e:	461a      	mov	r2, r3
 8009630:	685b      	ldr	r3, [r3, #4]
 8009632:	b10b      	cbz	r3, 8009638 <_free_r+0x50>
 8009634:	42a3      	cmp	r3, r4
 8009636:	d9fa      	bls.n	800962e <_free_r+0x46>
 8009638:	6811      	ldr	r1, [r2, #0]
 800963a:	1855      	adds	r5, r2, r1
 800963c:	42a5      	cmp	r5, r4
 800963e:	d10b      	bne.n	8009658 <_free_r+0x70>
 8009640:	6824      	ldr	r4, [r4, #0]
 8009642:	4421      	add	r1, r4
 8009644:	1854      	adds	r4, r2, r1
 8009646:	42a3      	cmp	r3, r4
 8009648:	6011      	str	r1, [r2, #0]
 800964a:	d1e0      	bne.n	800960e <_free_r+0x26>
 800964c:	681c      	ldr	r4, [r3, #0]
 800964e:	685b      	ldr	r3, [r3, #4]
 8009650:	6053      	str	r3, [r2, #4]
 8009652:	4421      	add	r1, r4
 8009654:	6011      	str	r1, [r2, #0]
 8009656:	e7da      	b.n	800960e <_free_r+0x26>
 8009658:	d902      	bls.n	8009660 <_free_r+0x78>
 800965a:	230c      	movs	r3, #12
 800965c:	6003      	str	r3, [r0, #0]
 800965e:	e7d6      	b.n	800960e <_free_r+0x26>
 8009660:	6825      	ldr	r5, [r4, #0]
 8009662:	1961      	adds	r1, r4, r5
 8009664:	428b      	cmp	r3, r1
 8009666:	bf04      	itt	eq
 8009668:	6819      	ldreq	r1, [r3, #0]
 800966a:	685b      	ldreq	r3, [r3, #4]
 800966c:	6063      	str	r3, [r4, #4]
 800966e:	bf04      	itt	eq
 8009670:	1949      	addeq	r1, r1, r5
 8009672:	6021      	streq	r1, [r4, #0]
 8009674:	6054      	str	r4, [r2, #4]
 8009676:	e7ca      	b.n	800960e <_free_r+0x26>
 8009678:	b003      	add	sp, #12
 800967a:	bd30      	pop	{r4, r5, pc}
 800967c:	200004bc 	.word	0x200004bc

08009680 <sbrk_aligned>:
 8009680:	b570      	push	{r4, r5, r6, lr}
 8009682:	4e0e      	ldr	r6, [pc, #56]	; (80096bc <sbrk_aligned+0x3c>)
 8009684:	460c      	mov	r4, r1
 8009686:	6831      	ldr	r1, [r6, #0]
 8009688:	4605      	mov	r5, r0
 800968a:	b911      	cbnz	r1, 8009692 <sbrk_aligned+0x12>
 800968c:	f000 fd9a 	bl	800a1c4 <_sbrk_r>
 8009690:	6030      	str	r0, [r6, #0]
 8009692:	4621      	mov	r1, r4
 8009694:	4628      	mov	r0, r5
 8009696:	f000 fd95 	bl	800a1c4 <_sbrk_r>
 800969a:	1c43      	adds	r3, r0, #1
 800969c:	d00a      	beq.n	80096b4 <sbrk_aligned+0x34>
 800969e:	1cc4      	adds	r4, r0, #3
 80096a0:	f024 0403 	bic.w	r4, r4, #3
 80096a4:	42a0      	cmp	r0, r4
 80096a6:	d007      	beq.n	80096b8 <sbrk_aligned+0x38>
 80096a8:	1a21      	subs	r1, r4, r0
 80096aa:	4628      	mov	r0, r5
 80096ac:	f000 fd8a 	bl	800a1c4 <_sbrk_r>
 80096b0:	3001      	adds	r0, #1
 80096b2:	d101      	bne.n	80096b8 <sbrk_aligned+0x38>
 80096b4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80096b8:	4620      	mov	r0, r4
 80096ba:	bd70      	pop	{r4, r5, r6, pc}
 80096bc:	200004c0 	.word	0x200004c0

080096c0 <_malloc_r>:
 80096c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096c4:	1ccd      	adds	r5, r1, #3
 80096c6:	f025 0503 	bic.w	r5, r5, #3
 80096ca:	3508      	adds	r5, #8
 80096cc:	2d0c      	cmp	r5, #12
 80096ce:	bf38      	it	cc
 80096d0:	250c      	movcc	r5, #12
 80096d2:	2d00      	cmp	r5, #0
 80096d4:	4607      	mov	r7, r0
 80096d6:	db01      	blt.n	80096dc <_malloc_r+0x1c>
 80096d8:	42a9      	cmp	r1, r5
 80096da:	d905      	bls.n	80096e8 <_malloc_r+0x28>
 80096dc:	230c      	movs	r3, #12
 80096de:	603b      	str	r3, [r7, #0]
 80096e0:	2600      	movs	r6, #0
 80096e2:	4630      	mov	r0, r6
 80096e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096e8:	4e2e      	ldr	r6, [pc, #184]	; (80097a4 <_malloc_r+0xe4>)
 80096ea:	f001 fdc7 	bl	800b27c <__malloc_lock>
 80096ee:	6833      	ldr	r3, [r6, #0]
 80096f0:	461c      	mov	r4, r3
 80096f2:	bb34      	cbnz	r4, 8009742 <_malloc_r+0x82>
 80096f4:	4629      	mov	r1, r5
 80096f6:	4638      	mov	r0, r7
 80096f8:	f7ff ffc2 	bl	8009680 <sbrk_aligned>
 80096fc:	1c43      	adds	r3, r0, #1
 80096fe:	4604      	mov	r4, r0
 8009700:	d14d      	bne.n	800979e <_malloc_r+0xde>
 8009702:	6834      	ldr	r4, [r6, #0]
 8009704:	4626      	mov	r6, r4
 8009706:	2e00      	cmp	r6, #0
 8009708:	d140      	bne.n	800978c <_malloc_r+0xcc>
 800970a:	6823      	ldr	r3, [r4, #0]
 800970c:	4631      	mov	r1, r6
 800970e:	4638      	mov	r0, r7
 8009710:	eb04 0803 	add.w	r8, r4, r3
 8009714:	f000 fd56 	bl	800a1c4 <_sbrk_r>
 8009718:	4580      	cmp	r8, r0
 800971a:	d13a      	bne.n	8009792 <_malloc_r+0xd2>
 800971c:	6821      	ldr	r1, [r4, #0]
 800971e:	3503      	adds	r5, #3
 8009720:	1a6d      	subs	r5, r5, r1
 8009722:	f025 0503 	bic.w	r5, r5, #3
 8009726:	3508      	adds	r5, #8
 8009728:	2d0c      	cmp	r5, #12
 800972a:	bf38      	it	cc
 800972c:	250c      	movcc	r5, #12
 800972e:	4629      	mov	r1, r5
 8009730:	4638      	mov	r0, r7
 8009732:	f7ff ffa5 	bl	8009680 <sbrk_aligned>
 8009736:	3001      	adds	r0, #1
 8009738:	d02b      	beq.n	8009792 <_malloc_r+0xd2>
 800973a:	6823      	ldr	r3, [r4, #0]
 800973c:	442b      	add	r3, r5
 800973e:	6023      	str	r3, [r4, #0]
 8009740:	e00e      	b.n	8009760 <_malloc_r+0xa0>
 8009742:	6822      	ldr	r2, [r4, #0]
 8009744:	1b52      	subs	r2, r2, r5
 8009746:	d41e      	bmi.n	8009786 <_malloc_r+0xc6>
 8009748:	2a0b      	cmp	r2, #11
 800974a:	d916      	bls.n	800977a <_malloc_r+0xba>
 800974c:	1961      	adds	r1, r4, r5
 800974e:	42a3      	cmp	r3, r4
 8009750:	6025      	str	r5, [r4, #0]
 8009752:	bf18      	it	ne
 8009754:	6059      	strne	r1, [r3, #4]
 8009756:	6863      	ldr	r3, [r4, #4]
 8009758:	bf08      	it	eq
 800975a:	6031      	streq	r1, [r6, #0]
 800975c:	5162      	str	r2, [r4, r5]
 800975e:	604b      	str	r3, [r1, #4]
 8009760:	4638      	mov	r0, r7
 8009762:	f104 060b 	add.w	r6, r4, #11
 8009766:	f001 fd8f 	bl	800b288 <__malloc_unlock>
 800976a:	f026 0607 	bic.w	r6, r6, #7
 800976e:	1d23      	adds	r3, r4, #4
 8009770:	1af2      	subs	r2, r6, r3
 8009772:	d0b6      	beq.n	80096e2 <_malloc_r+0x22>
 8009774:	1b9b      	subs	r3, r3, r6
 8009776:	50a3      	str	r3, [r4, r2]
 8009778:	e7b3      	b.n	80096e2 <_malloc_r+0x22>
 800977a:	6862      	ldr	r2, [r4, #4]
 800977c:	42a3      	cmp	r3, r4
 800977e:	bf0c      	ite	eq
 8009780:	6032      	streq	r2, [r6, #0]
 8009782:	605a      	strne	r2, [r3, #4]
 8009784:	e7ec      	b.n	8009760 <_malloc_r+0xa0>
 8009786:	4623      	mov	r3, r4
 8009788:	6864      	ldr	r4, [r4, #4]
 800978a:	e7b2      	b.n	80096f2 <_malloc_r+0x32>
 800978c:	4634      	mov	r4, r6
 800978e:	6876      	ldr	r6, [r6, #4]
 8009790:	e7b9      	b.n	8009706 <_malloc_r+0x46>
 8009792:	230c      	movs	r3, #12
 8009794:	603b      	str	r3, [r7, #0]
 8009796:	4638      	mov	r0, r7
 8009798:	f001 fd76 	bl	800b288 <__malloc_unlock>
 800979c:	e7a1      	b.n	80096e2 <_malloc_r+0x22>
 800979e:	6025      	str	r5, [r4, #0]
 80097a0:	e7de      	b.n	8009760 <_malloc_r+0xa0>
 80097a2:	bf00      	nop
 80097a4:	200004bc 	.word	0x200004bc

080097a8 <__cvt>:
 80097a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80097ac:	ec55 4b10 	vmov	r4, r5, d0
 80097b0:	2d00      	cmp	r5, #0
 80097b2:	460e      	mov	r6, r1
 80097b4:	4619      	mov	r1, r3
 80097b6:	462b      	mov	r3, r5
 80097b8:	bfbb      	ittet	lt
 80097ba:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80097be:	461d      	movlt	r5, r3
 80097c0:	2300      	movge	r3, #0
 80097c2:	232d      	movlt	r3, #45	; 0x2d
 80097c4:	700b      	strb	r3, [r1, #0]
 80097c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80097c8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80097cc:	4691      	mov	r9, r2
 80097ce:	f023 0820 	bic.w	r8, r3, #32
 80097d2:	bfbc      	itt	lt
 80097d4:	4622      	movlt	r2, r4
 80097d6:	4614      	movlt	r4, r2
 80097d8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80097dc:	d005      	beq.n	80097ea <__cvt+0x42>
 80097de:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80097e2:	d100      	bne.n	80097e6 <__cvt+0x3e>
 80097e4:	3601      	adds	r6, #1
 80097e6:	2102      	movs	r1, #2
 80097e8:	e000      	b.n	80097ec <__cvt+0x44>
 80097ea:	2103      	movs	r1, #3
 80097ec:	ab03      	add	r3, sp, #12
 80097ee:	9301      	str	r3, [sp, #4]
 80097f0:	ab02      	add	r3, sp, #8
 80097f2:	9300      	str	r3, [sp, #0]
 80097f4:	ec45 4b10 	vmov	d0, r4, r5
 80097f8:	4653      	mov	r3, sl
 80097fa:	4632      	mov	r2, r6
 80097fc:	f000 ff18 	bl	800a630 <_dtoa_r>
 8009800:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009804:	4607      	mov	r7, r0
 8009806:	d102      	bne.n	800980e <__cvt+0x66>
 8009808:	f019 0f01 	tst.w	r9, #1
 800980c:	d022      	beq.n	8009854 <__cvt+0xac>
 800980e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009812:	eb07 0906 	add.w	r9, r7, r6
 8009816:	d110      	bne.n	800983a <__cvt+0x92>
 8009818:	783b      	ldrb	r3, [r7, #0]
 800981a:	2b30      	cmp	r3, #48	; 0x30
 800981c:	d10a      	bne.n	8009834 <__cvt+0x8c>
 800981e:	2200      	movs	r2, #0
 8009820:	2300      	movs	r3, #0
 8009822:	4620      	mov	r0, r4
 8009824:	4629      	mov	r1, r5
 8009826:	f7f7 f95f 	bl	8000ae8 <__aeabi_dcmpeq>
 800982a:	b918      	cbnz	r0, 8009834 <__cvt+0x8c>
 800982c:	f1c6 0601 	rsb	r6, r6, #1
 8009830:	f8ca 6000 	str.w	r6, [sl]
 8009834:	f8da 3000 	ldr.w	r3, [sl]
 8009838:	4499      	add	r9, r3
 800983a:	2200      	movs	r2, #0
 800983c:	2300      	movs	r3, #0
 800983e:	4620      	mov	r0, r4
 8009840:	4629      	mov	r1, r5
 8009842:	f7f7 f951 	bl	8000ae8 <__aeabi_dcmpeq>
 8009846:	b108      	cbz	r0, 800984c <__cvt+0xa4>
 8009848:	f8cd 900c 	str.w	r9, [sp, #12]
 800984c:	2230      	movs	r2, #48	; 0x30
 800984e:	9b03      	ldr	r3, [sp, #12]
 8009850:	454b      	cmp	r3, r9
 8009852:	d307      	bcc.n	8009864 <__cvt+0xbc>
 8009854:	9b03      	ldr	r3, [sp, #12]
 8009856:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009858:	1bdb      	subs	r3, r3, r7
 800985a:	4638      	mov	r0, r7
 800985c:	6013      	str	r3, [r2, #0]
 800985e:	b004      	add	sp, #16
 8009860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009864:	1c59      	adds	r1, r3, #1
 8009866:	9103      	str	r1, [sp, #12]
 8009868:	701a      	strb	r2, [r3, #0]
 800986a:	e7f0      	b.n	800984e <__cvt+0xa6>

0800986c <__exponent>:
 800986c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800986e:	4603      	mov	r3, r0
 8009870:	2900      	cmp	r1, #0
 8009872:	bfb8      	it	lt
 8009874:	4249      	neglt	r1, r1
 8009876:	f803 2b02 	strb.w	r2, [r3], #2
 800987a:	bfb4      	ite	lt
 800987c:	222d      	movlt	r2, #45	; 0x2d
 800987e:	222b      	movge	r2, #43	; 0x2b
 8009880:	2909      	cmp	r1, #9
 8009882:	7042      	strb	r2, [r0, #1]
 8009884:	dd2a      	ble.n	80098dc <__exponent+0x70>
 8009886:	f10d 0407 	add.w	r4, sp, #7
 800988a:	46a4      	mov	ip, r4
 800988c:	270a      	movs	r7, #10
 800988e:	46a6      	mov	lr, r4
 8009890:	460a      	mov	r2, r1
 8009892:	fb91 f6f7 	sdiv	r6, r1, r7
 8009896:	fb07 1516 	mls	r5, r7, r6, r1
 800989a:	3530      	adds	r5, #48	; 0x30
 800989c:	2a63      	cmp	r2, #99	; 0x63
 800989e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80098a2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80098a6:	4631      	mov	r1, r6
 80098a8:	dcf1      	bgt.n	800988e <__exponent+0x22>
 80098aa:	3130      	adds	r1, #48	; 0x30
 80098ac:	f1ae 0502 	sub.w	r5, lr, #2
 80098b0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80098b4:	1c44      	adds	r4, r0, #1
 80098b6:	4629      	mov	r1, r5
 80098b8:	4561      	cmp	r1, ip
 80098ba:	d30a      	bcc.n	80098d2 <__exponent+0x66>
 80098bc:	f10d 0209 	add.w	r2, sp, #9
 80098c0:	eba2 020e 	sub.w	r2, r2, lr
 80098c4:	4565      	cmp	r5, ip
 80098c6:	bf88      	it	hi
 80098c8:	2200      	movhi	r2, #0
 80098ca:	4413      	add	r3, r2
 80098cc:	1a18      	subs	r0, r3, r0
 80098ce:	b003      	add	sp, #12
 80098d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80098d6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80098da:	e7ed      	b.n	80098b8 <__exponent+0x4c>
 80098dc:	2330      	movs	r3, #48	; 0x30
 80098de:	3130      	adds	r1, #48	; 0x30
 80098e0:	7083      	strb	r3, [r0, #2]
 80098e2:	70c1      	strb	r1, [r0, #3]
 80098e4:	1d03      	adds	r3, r0, #4
 80098e6:	e7f1      	b.n	80098cc <__exponent+0x60>

080098e8 <_printf_float>:
 80098e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098ec:	ed2d 8b02 	vpush	{d8}
 80098f0:	b08d      	sub	sp, #52	; 0x34
 80098f2:	460c      	mov	r4, r1
 80098f4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80098f8:	4616      	mov	r6, r2
 80098fa:	461f      	mov	r7, r3
 80098fc:	4605      	mov	r5, r0
 80098fe:	f001 fca7 	bl	800b250 <_localeconv_r>
 8009902:	f8d0 a000 	ldr.w	sl, [r0]
 8009906:	4650      	mov	r0, sl
 8009908:	f7f6 fc6c 	bl	80001e4 <strlen>
 800990c:	2300      	movs	r3, #0
 800990e:	930a      	str	r3, [sp, #40]	; 0x28
 8009910:	6823      	ldr	r3, [r4, #0]
 8009912:	9305      	str	r3, [sp, #20]
 8009914:	f8d8 3000 	ldr.w	r3, [r8]
 8009918:	f894 b018 	ldrb.w	fp, [r4, #24]
 800991c:	3307      	adds	r3, #7
 800991e:	f023 0307 	bic.w	r3, r3, #7
 8009922:	f103 0208 	add.w	r2, r3, #8
 8009926:	f8c8 2000 	str.w	r2, [r8]
 800992a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800992e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009932:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009936:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800993a:	9307      	str	r3, [sp, #28]
 800993c:	f8cd 8018 	str.w	r8, [sp, #24]
 8009940:	ee08 0a10 	vmov	s16, r0
 8009944:	4b9f      	ldr	r3, [pc, #636]	; (8009bc4 <_printf_float+0x2dc>)
 8009946:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800994a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800994e:	f7f7 f8fd 	bl	8000b4c <__aeabi_dcmpun>
 8009952:	bb88      	cbnz	r0, 80099b8 <_printf_float+0xd0>
 8009954:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009958:	4b9a      	ldr	r3, [pc, #616]	; (8009bc4 <_printf_float+0x2dc>)
 800995a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800995e:	f7f7 f8d7 	bl	8000b10 <__aeabi_dcmple>
 8009962:	bb48      	cbnz	r0, 80099b8 <_printf_float+0xd0>
 8009964:	2200      	movs	r2, #0
 8009966:	2300      	movs	r3, #0
 8009968:	4640      	mov	r0, r8
 800996a:	4649      	mov	r1, r9
 800996c:	f7f7 f8c6 	bl	8000afc <__aeabi_dcmplt>
 8009970:	b110      	cbz	r0, 8009978 <_printf_float+0x90>
 8009972:	232d      	movs	r3, #45	; 0x2d
 8009974:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009978:	4b93      	ldr	r3, [pc, #588]	; (8009bc8 <_printf_float+0x2e0>)
 800997a:	4894      	ldr	r0, [pc, #592]	; (8009bcc <_printf_float+0x2e4>)
 800997c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009980:	bf94      	ite	ls
 8009982:	4698      	movls	r8, r3
 8009984:	4680      	movhi	r8, r0
 8009986:	2303      	movs	r3, #3
 8009988:	6123      	str	r3, [r4, #16]
 800998a:	9b05      	ldr	r3, [sp, #20]
 800998c:	f023 0204 	bic.w	r2, r3, #4
 8009990:	6022      	str	r2, [r4, #0]
 8009992:	f04f 0900 	mov.w	r9, #0
 8009996:	9700      	str	r7, [sp, #0]
 8009998:	4633      	mov	r3, r6
 800999a:	aa0b      	add	r2, sp, #44	; 0x2c
 800999c:	4621      	mov	r1, r4
 800999e:	4628      	mov	r0, r5
 80099a0:	f000 f9d8 	bl	8009d54 <_printf_common>
 80099a4:	3001      	adds	r0, #1
 80099a6:	f040 8090 	bne.w	8009aca <_printf_float+0x1e2>
 80099aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80099ae:	b00d      	add	sp, #52	; 0x34
 80099b0:	ecbd 8b02 	vpop	{d8}
 80099b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099b8:	4642      	mov	r2, r8
 80099ba:	464b      	mov	r3, r9
 80099bc:	4640      	mov	r0, r8
 80099be:	4649      	mov	r1, r9
 80099c0:	f7f7 f8c4 	bl	8000b4c <__aeabi_dcmpun>
 80099c4:	b140      	cbz	r0, 80099d8 <_printf_float+0xf0>
 80099c6:	464b      	mov	r3, r9
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	bfbc      	itt	lt
 80099cc:	232d      	movlt	r3, #45	; 0x2d
 80099ce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80099d2:	487f      	ldr	r0, [pc, #508]	; (8009bd0 <_printf_float+0x2e8>)
 80099d4:	4b7f      	ldr	r3, [pc, #508]	; (8009bd4 <_printf_float+0x2ec>)
 80099d6:	e7d1      	b.n	800997c <_printf_float+0x94>
 80099d8:	6863      	ldr	r3, [r4, #4]
 80099da:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80099de:	9206      	str	r2, [sp, #24]
 80099e0:	1c5a      	adds	r2, r3, #1
 80099e2:	d13f      	bne.n	8009a64 <_printf_float+0x17c>
 80099e4:	2306      	movs	r3, #6
 80099e6:	6063      	str	r3, [r4, #4]
 80099e8:	9b05      	ldr	r3, [sp, #20]
 80099ea:	6861      	ldr	r1, [r4, #4]
 80099ec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80099f0:	2300      	movs	r3, #0
 80099f2:	9303      	str	r3, [sp, #12]
 80099f4:	ab0a      	add	r3, sp, #40	; 0x28
 80099f6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80099fa:	ab09      	add	r3, sp, #36	; 0x24
 80099fc:	ec49 8b10 	vmov	d0, r8, r9
 8009a00:	9300      	str	r3, [sp, #0]
 8009a02:	6022      	str	r2, [r4, #0]
 8009a04:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009a08:	4628      	mov	r0, r5
 8009a0a:	f7ff fecd 	bl	80097a8 <__cvt>
 8009a0e:	9b06      	ldr	r3, [sp, #24]
 8009a10:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009a12:	2b47      	cmp	r3, #71	; 0x47
 8009a14:	4680      	mov	r8, r0
 8009a16:	d108      	bne.n	8009a2a <_printf_float+0x142>
 8009a18:	1cc8      	adds	r0, r1, #3
 8009a1a:	db02      	blt.n	8009a22 <_printf_float+0x13a>
 8009a1c:	6863      	ldr	r3, [r4, #4]
 8009a1e:	4299      	cmp	r1, r3
 8009a20:	dd41      	ble.n	8009aa6 <_printf_float+0x1be>
 8009a22:	f1ab 0b02 	sub.w	fp, fp, #2
 8009a26:	fa5f fb8b 	uxtb.w	fp, fp
 8009a2a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009a2e:	d820      	bhi.n	8009a72 <_printf_float+0x18a>
 8009a30:	3901      	subs	r1, #1
 8009a32:	465a      	mov	r2, fp
 8009a34:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009a38:	9109      	str	r1, [sp, #36]	; 0x24
 8009a3a:	f7ff ff17 	bl	800986c <__exponent>
 8009a3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a40:	1813      	adds	r3, r2, r0
 8009a42:	2a01      	cmp	r2, #1
 8009a44:	4681      	mov	r9, r0
 8009a46:	6123      	str	r3, [r4, #16]
 8009a48:	dc02      	bgt.n	8009a50 <_printf_float+0x168>
 8009a4a:	6822      	ldr	r2, [r4, #0]
 8009a4c:	07d2      	lsls	r2, r2, #31
 8009a4e:	d501      	bpl.n	8009a54 <_printf_float+0x16c>
 8009a50:	3301      	adds	r3, #1
 8009a52:	6123      	str	r3, [r4, #16]
 8009a54:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d09c      	beq.n	8009996 <_printf_float+0xae>
 8009a5c:	232d      	movs	r3, #45	; 0x2d
 8009a5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a62:	e798      	b.n	8009996 <_printf_float+0xae>
 8009a64:	9a06      	ldr	r2, [sp, #24]
 8009a66:	2a47      	cmp	r2, #71	; 0x47
 8009a68:	d1be      	bne.n	80099e8 <_printf_float+0x100>
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d1bc      	bne.n	80099e8 <_printf_float+0x100>
 8009a6e:	2301      	movs	r3, #1
 8009a70:	e7b9      	b.n	80099e6 <_printf_float+0xfe>
 8009a72:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009a76:	d118      	bne.n	8009aaa <_printf_float+0x1c2>
 8009a78:	2900      	cmp	r1, #0
 8009a7a:	6863      	ldr	r3, [r4, #4]
 8009a7c:	dd0b      	ble.n	8009a96 <_printf_float+0x1ae>
 8009a7e:	6121      	str	r1, [r4, #16]
 8009a80:	b913      	cbnz	r3, 8009a88 <_printf_float+0x1a0>
 8009a82:	6822      	ldr	r2, [r4, #0]
 8009a84:	07d0      	lsls	r0, r2, #31
 8009a86:	d502      	bpl.n	8009a8e <_printf_float+0x1a6>
 8009a88:	3301      	adds	r3, #1
 8009a8a:	440b      	add	r3, r1
 8009a8c:	6123      	str	r3, [r4, #16]
 8009a8e:	65a1      	str	r1, [r4, #88]	; 0x58
 8009a90:	f04f 0900 	mov.w	r9, #0
 8009a94:	e7de      	b.n	8009a54 <_printf_float+0x16c>
 8009a96:	b913      	cbnz	r3, 8009a9e <_printf_float+0x1b6>
 8009a98:	6822      	ldr	r2, [r4, #0]
 8009a9a:	07d2      	lsls	r2, r2, #31
 8009a9c:	d501      	bpl.n	8009aa2 <_printf_float+0x1ba>
 8009a9e:	3302      	adds	r3, #2
 8009aa0:	e7f4      	b.n	8009a8c <_printf_float+0x1a4>
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	e7f2      	b.n	8009a8c <_printf_float+0x1a4>
 8009aa6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009aaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009aac:	4299      	cmp	r1, r3
 8009aae:	db05      	blt.n	8009abc <_printf_float+0x1d4>
 8009ab0:	6823      	ldr	r3, [r4, #0]
 8009ab2:	6121      	str	r1, [r4, #16]
 8009ab4:	07d8      	lsls	r0, r3, #31
 8009ab6:	d5ea      	bpl.n	8009a8e <_printf_float+0x1a6>
 8009ab8:	1c4b      	adds	r3, r1, #1
 8009aba:	e7e7      	b.n	8009a8c <_printf_float+0x1a4>
 8009abc:	2900      	cmp	r1, #0
 8009abe:	bfd4      	ite	le
 8009ac0:	f1c1 0202 	rsble	r2, r1, #2
 8009ac4:	2201      	movgt	r2, #1
 8009ac6:	4413      	add	r3, r2
 8009ac8:	e7e0      	b.n	8009a8c <_printf_float+0x1a4>
 8009aca:	6823      	ldr	r3, [r4, #0]
 8009acc:	055a      	lsls	r2, r3, #21
 8009ace:	d407      	bmi.n	8009ae0 <_printf_float+0x1f8>
 8009ad0:	6923      	ldr	r3, [r4, #16]
 8009ad2:	4642      	mov	r2, r8
 8009ad4:	4631      	mov	r1, r6
 8009ad6:	4628      	mov	r0, r5
 8009ad8:	47b8      	blx	r7
 8009ada:	3001      	adds	r0, #1
 8009adc:	d12c      	bne.n	8009b38 <_printf_float+0x250>
 8009ade:	e764      	b.n	80099aa <_printf_float+0xc2>
 8009ae0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009ae4:	f240 80e0 	bls.w	8009ca8 <_printf_float+0x3c0>
 8009ae8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009aec:	2200      	movs	r2, #0
 8009aee:	2300      	movs	r3, #0
 8009af0:	f7f6 fffa 	bl	8000ae8 <__aeabi_dcmpeq>
 8009af4:	2800      	cmp	r0, #0
 8009af6:	d034      	beq.n	8009b62 <_printf_float+0x27a>
 8009af8:	4a37      	ldr	r2, [pc, #220]	; (8009bd8 <_printf_float+0x2f0>)
 8009afa:	2301      	movs	r3, #1
 8009afc:	4631      	mov	r1, r6
 8009afe:	4628      	mov	r0, r5
 8009b00:	47b8      	blx	r7
 8009b02:	3001      	adds	r0, #1
 8009b04:	f43f af51 	beq.w	80099aa <_printf_float+0xc2>
 8009b08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009b0c:	429a      	cmp	r2, r3
 8009b0e:	db02      	blt.n	8009b16 <_printf_float+0x22e>
 8009b10:	6823      	ldr	r3, [r4, #0]
 8009b12:	07d8      	lsls	r0, r3, #31
 8009b14:	d510      	bpl.n	8009b38 <_printf_float+0x250>
 8009b16:	ee18 3a10 	vmov	r3, s16
 8009b1a:	4652      	mov	r2, sl
 8009b1c:	4631      	mov	r1, r6
 8009b1e:	4628      	mov	r0, r5
 8009b20:	47b8      	blx	r7
 8009b22:	3001      	adds	r0, #1
 8009b24:	f43f af41 	beq.w	80099aa <_printf_float+0xc2>
 8009b28:	f04f 0800 	mov.w	r8, #0
 8009b2c:	f104 091a 	add.w	r9, r4, #26
 8009b30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b32:	3b01      	subs	r3, #1
 8009b34:	4543      	cmp	r3, r8
 8009b36:	dc09      	bgt.n	8009b4c <_printf_float+0x264>
 8009b38:	6823      	ldr	r3, [r4, #0]
 8009b3a:	079b      	lsls	r3, r3, #30
 8009b3c:	f100 8105 	bmi.w	8009d4a <_printf_float+0x462>
 8009b40:	68e0      	ldr	r0, [r4, #12]
 8009b42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b44:	4298      	cmp	r0, r3
 8009b46:	bfb8      	it	lt
 8009b48:	4618      	movlt	r0, r3
 8009b4a:	e730      	b.n	80099ae <_printf_float+0xc6>
 8009b4c:	2301      	movs	r3, #1
 8009b4e:	464a      	mov	r2, r9
 8009b50:	4631      	mov	r1, r6
 8009b52:	4628      	mov	r0, r5
 8009b54:	47b8      	blx	r7
 8009b56:	3001      	adds	r0, #1
 8009b58:	f43f af27 	beq.w	80099aa <_printf_float+0xc2>
 8009b5c:	f108 0801 	add.w	r8, r8, #1
 8009b60:	e7e6      	b.n	8009b30 <_printf_float+0x248>
 8009b62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	dc39      	bgt.n	8009bdc <_printf_float+0x2f4>
 8009b68:	4a1b      	ldr	r2, [pc, #108]	; (8009bd8 <_printf_float+0x2f0>)
 8009b6a:	2301      	movs	r3, #1
 8009b6c:	4631      	mov	r1, r6
 8009b6e:	4628      	mov	r0, r5
 8009b70:	47b8      	blx	r7
 8009b72:	3001      	adds	r0, #1
 8009b74:	f43f af19 	beq.w	80099aa <_printf_float+0xc2>
 8009b78:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009b7c:	4313      	orrs	r3, r2
 8009b7e:	d102      	bne.n	8009b86 <_printf_float+0x29e>
 8009b80:	6823      	ldr	r3, [r4, #0]
 8009b82:	07d9      	lsls	r1, r3, #31
 8009b84:	d5d8      	bpl.n	8009b38 <_printf_float+0x250>
 8009b86:	ee18 3a10 	vmov	r3, s16
 8009b8a:	4652      	mov	r2, sl
 8009b8c:	4631      	mov	r1, r6
 8009b8e:	4628      	mov	r0, r5
 8009b90:	47b8      	blx	r7
 8009b92:	3001      	adds	r0, #1
 8009b94:	f43f af09 	beq.w	80099aa <_printf_float+0xc2>
 8009b98:	f04f 0900 	mov.w	r9, #0
 8009b9c:	f104 0a1a 	add.w	sl, r4, #26
 8009ba0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ba2:	425b      	negs	r3, r3
 8009ba4:	454b      	cmp	r3, r9
 8009ba6:	dc01      	bgt.n	8009bac <_printf_float+0x2c4>
 8009ba8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009baa:	e792      	b.n	8009ad2 <_printf_float+0x1ea>
 8009bac:	2301      	movs	r3, #1
 8009bae:	4652      	mov	r2, sl
 8009bb0:	4631      	mov	r1, r6
 8009bb2:	4628      	mov	r0, r5
 8009bb4:	47b8      	blx	r7
 8009bb6:	3001      	adds	r0, #1
 8009bb8:	f43f aef7 	beq.w	80099aa <_printf_float+0xc2>
 8009bbc:	f109 0901 	add.w	r9, r9, #1
 8009bc0:	e7ee      	b.n	8009ba0 <_printf_float+0x2b8>
 8009bc2:	bf00      	nop
 8009bc4:	7fefffff 	.word	0x7fefffff
 8009bc8:	0801295c 	.word	0x0801295c
 8009bcc:	08012960 	.word	0x08012960
 8009bd0:	08012968 	.word	0x08012968
 8009bd4:	08012964 	.word	0x08012964
 8009bd8:	08012b91 	.word	0x08012b91
 8009bdc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009bde:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009be0:	429a      	cmp	r2, r3
 8009be2:	bfa8      	it	ge
 8009be4:	461a      	movge	r2, r3
 8009be6:	2a00      	cmp	r2, #0
 8009be8:	4691      	mov	r9, r2
 8009bea:	dc37      	bgt.n	8009c5c <_printf_float+0x374>
 8009bec:	f04f 0b00 	mov.w	fp, #0
 8009bf0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009bf4:	f104 021a 	add.w	r2, r4, #26
 8009bf8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009bfa:	9305      	str	r3, [sp, #20]
 8009bfc:	eba3 0309 	sub.w	r3, r3, r9
 8009c00:	455b      	cmp	r3, fp
 8009c02:	dc33      	bgt.n	8009c6c <_printf_float+0x384>
 8009c04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009c08:	429a      	cmp	r2, r3
 8009c0a:	db3b      	blt.n	8009c84 <_printf_float+0x39c>
 8009c0c:	6823      	ldr	r3, [r4, #0]
 8009c0e:	07da      	lsls	r2, r3, #31
 8009c10:	d438      	bmi.n	8009c84 <_printf_float+0x39c>
 8009c12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c14:	9a05      	ldr	r2, [sp, #20]
 8009c16:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009c18:	1a9a      	subs	r2, r3, r2
 8009c1a:	eba3 0901 	sub.w	r9, r3, r1
 8009c1e:	4591      	cmp	r9, r2
 8009c20:	bfa8      	it	ge
 8009c22:	4691      	movge	r9, r2
 8009c24:	f1b9 0f00 	cmp.w	r9, #0
 8009c28:	dc35      	bgt.n	8009c96 <_printf_float+0x3ae>
 8009c2a:	f04f 0800 	mov.w	r8, #0
 8009c2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009c32:	f104 0a1a 	add.w	sl, r4, #26
 8009c36:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009c3a:	1a9b      	subs	r3, r3, r2
 8009c3c:	eba3 0309 	sub.w	r3, r3, r9
 8009c40:	4543      	cmp	r3, r8
 8009c42:	f77f af79 	ble.w	8009b38 <_printf_float+0x250>
 8009c46:	2301      	movs	r3, #1
 8009c48:	4652      	mov	r2, sl
 8009c4a:	4631      	mov	r1, r6
 8009c4c:	4628      	mov	r0, r5
 8009c4e:	47b8      	blx	r7
 8009c50:	3001      	adds	r0, #1
 8009c52:	f43f aeaa 	beq.w	80099aa <_printf_float+0xc2>
 8009c56:	f108 0801 	add.w	r8, r8, #1
 8009c5a:	e7ec      	b.n	8009c36 <_printf_float+0x34e>
 8009c5c:	4613      	mov	r3, r2
 8009c5e:	4631      	mov	r1, r6
 8009c60:	4642      	mov	r2, r8
 8009c62:	4628      	mov	r0, r5
 8009c64:	47b8      	blx	r7
 8009c66:	3001      	adds	r0, #1
 8009c68:	d1c0      	bne.n	8009bec <_printf_float+0x304>
 8009c6a:	e69e      	b.n	80099aa <_printf_float+0xc2>
 8009c6c:	2301      	movs	r3, #1
 8009c6e:	4631      	mov	r1, r6
 8009c70:	4628      	mov	r0, r5
 8009c72:	9205      	str	r2, [sp, #20]
 8009c74:	47b8      	blx	r7
 8009c76:	3001      	adds	r0, #1
 8009c78:	f43f ae97 	beq.w	80099aa <_printf_float+0xc2>
 8009c7c:	9a05      	ldr	r2, [sp, #20]
 8009c7e:	f10b 0b01 	add.w	fp, fp, #1
 8009c82:	e7b9      	b.n	8009bf8 <_printf_float+0x310>
 8009c84:	ee18 3a10 	vmov	r3, s16
 8009c88:	4652      	mov	r2, sl
 8009c8a:	4631      	mov	r1, r6
 8009c8c:	4628      	mov	r0, r5
 8009c8e:	47b8      	blx	r7
 8009c90:	3001      	adds	r0, #1
 8009c92:	d1be      	bne.n	8009c12 <_printf_float+0x32a>
 8009c94:	e689      	b.n	80099aa <_printf_float+0xc2>
 8009c96:	9a05      	ldr	r2, [sp, #20]
 8009c98:	464b      	mov	r3, r9
 8009c9a:	4442      	add	r2, r8
 8009c9c:	4631      	mov	r1, r6
 8009c9e:	4628      	mov	r0, r5
 8009ca0:	47b8      	blx	r7
 8009ca2:	3001      	adds	r0, #1
 8009ca4:	d1c1      	bne.n	8009c2a <_printf_float+0x342>
 8009ca6:	e680      	b.n	80099aa <_printf_float+0xc2>
 8009ca8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009caa:	2a01      	cmp	r2, #1
 8009cac:	dc01      	bgt.n	8009cb2 <_printf_float+0x3ca>
 8009cae:	07db      	lsls	r3, r3, #31
 8009cb0:	d538      	bpl.n	8009d24 <_printf_float+0x43c>
 8009cb2:	2301      	movs	r3, #1
 8009cb4:	4642      	mov	r2, r8
 8009cb6:	4631      	mov	r1, r6
 8009cb8:	4628      	mov	r0, r5
 8009cba:	47b8      	blx	r7
 8009cbc:	3001      	adds	r0, #1
 8009cbe:	f43f ae74 	beq.w	80099aa <_printf_float+0xc2>
 8009cc2:	ee18 3a10 	vmov	r3, s16
 8009cc6:	4652      	mov	r2, sl
 8009cc8:	4631      	mov	r1, r6
 8009cca:	4628      	mov	r0, r5
 8009ccc:	47b8      	blx	r7
 8009cce:	3001      	adds	r0, #1
 8009cd0:	f43f ae6b 	beq.w	80099aa <_printf_float+0xc2>
 8009cd4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009cd8:	2200      	movs	r2, #0
 8009cda:	2300      	movs	r3, #0
 8009cdc:	f7f6 ff04 	bl	8000ae8 <__aeabi_dcmpeq>
 8009ce0:	b9d8      	cbnz	r0, 8009d1a <_printf_float+0x432>
 8009ce2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ce4:	f108 0201 	add.w	r2, r8, #1
 8009ce8:	3b01      	subs	r3, #1
 8009cea:	4631      	mov	r1, r6
 8009cec:	4628      	mov	r0, r5
 8009cee:	47b8      	blx	r7
 8009cf0:	3001      	adds	r0, #1
 8009cf2:	d10e      	bne.n	8009d12 <_printf_float+0x42a>
 8009cf4:	e659      	b.n	80099aa <_printf_float+0xc2>
 8009cf6:	2301      	movs	r3, #1
 8009cf8:	4652      	mov	r2, sl
 8009cfa:	4631      	mov	r1, r6
 8009cfc:	4628      	mov	r0, r5
 8009cfe:	47b8      	blx	r7
 8009d00:	3001      	adds	r0, #1
 8009d02:	f43f ae52 	beq.w	80099aa <_printf_float+0xc2>
 8009d06:	f108 0801 	add.w	r8, r8, #1
 8009d0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d0c:	3b01      	subs	r3, #1
 8009d0e:	4543      	cmp	r3, r8
 8009d10:	dcf1      	bgt.n	8009cf6 <_printf_float+0x40e>
 8009d12:	464b      	mov	r3, r9
 8009d14:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009d18:	e6dc      	b.n	8009ad4 <_printf_float+0x1ec>
 8009d1a:	f04f 0800 	mov.w	r8, #0
 8009d1e:	f104 0a1a 	add.w	sl, r4, #26
 8009d22:	e7f2      	b.n	8009d0a <_printf_float+0x422>
 8009d24:	2301      	movs	r3, #1
 8009d26:	4642      	mov	r2, r8
 8009d28:	e7df      	b.n	8009cea <_printf_float+0x402>
 8009d2a:	2301      	movs	r3, #1
 8009d2c:	464a      	mov	r2, r9
 8009d2e:	4631      	mov	r1, r6
 8009d30:	4628      	mov	r0, r5
 8009d32:	47b8      	blx	r7
 8009d34:	3001      	adds	r0, #1
 8009d36:	f43f ae38 	beq.w	80099aa <_printf_float+0xc2>
 8009d3a:	f108 0801 	add.w	r8, r8, #1
 8009d3e:	68e3      	ldr	r3, [r4, #12]
 8009d40:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009d42:	1a5b      	subs	r3, r3, r1
 8009d44:	4543      	cmp	r3, r8
 8009d46:	dcf0      	bgt.n	8009d2a <_printf_float+0x442>
 8009d48:	e6fa      	b.n	8009b40 <_printf_float+0x258>
 8009d4a:	f04f 0800 	mov.w	r8, #0
 8009d4e:	f104 0919 	add.w	r9, r4, #25
 8009d52:	e7f4      	b.n	8009d3e <_printf_float+0x456>

08009d54 <_printf_common>:
 8009d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d58:	4616      	mov	r6, r2
 8009d5a:	4699      	mov	r9, r3
 8009d5c:	688a      	ldr	r2, [r1, #8]
 8009d5e:	690b      	ldr	r3, [r1, #16]
 8009d60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009d64:	4293      	cmp	r3, r2
 8009d66:	bfb8      	it	lt
 8009d68:	4613      	movlt	r3, r2
 8009d6a:	6033      	str	r3, [r6, #0]
 8009d6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009d70:	4607      	mov	r7, r0
 8009d72:	460c      	mov	r4, r1
 8009d74:	b10a      	cbz	r2, 8009d7a <_printf_common+0x26>
 8009d76:	3301      	adds	r3, #1
 8009d78:	6033      	str	r3, [r6, #0]
 8009d7a:	6823      	ldr	r3, [r4, #0]
 8009d7c:	0699      	lsls	r1, r3, #26
 8009d7e:	bf42      	ittt	mi
 8009d80:	6833      	ldrmi	r3, [r6, #0]
 8009d82:	3302      	addmi	r3, #2
 8009d84:	6033      	strmi	r3, [r6, #0]
 8009d86:	6825      	ldr	r5, [r4, #0]
 8009d88:	f015 0506 	ands.w	r5, r5, #6
 8009d8c:	d106      	bne.n	8009d9c <_printf_common+0x48>
 8009d8e:	f104 0a19 	add.w	sl, r4, #25
 8009d92:	68e3      	ldr	r3, [r4, #12]
 8009d94:	6832      	ldr	r2, [r6, #0]
 8009d96:	1a9b      	subs	r3, r3, r2
 8009d98:	42ab      	cmp	r3, r5
 8009d9a:	dc26      	bgt.n	8009dea <_printf_common+0x96>
 8009d9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009da0:	1e13      	subs	r3, r2, #0
 8009da2:	6822      	ldr	r2, [r4, #0]
 8009da4:	bf18      	it	ne
 8009da6:	2301      	movne	r3, #1
 8009da8:	0692      	lsls	r2, r2, #26
 8009daa:	d42b      	bmi.n	8009e04 <_printf_common+0xb0>
 8009dac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009db0:	4649      	mov	r1, r9
 8009db2:	4638      	mov	r0, r7
 8009db4:	47c0      	blx	r8
 8009db6:	3001      	adds	r0, #1
 8009db8:	d01e      	beq.n	8009df8 <_printf_common+0xa4>
 8009dba:	6823      	ldr	r3, [r4, #0]
 8009dbc:	68e5      	ldr	r5, [r4, #12]
 8009dbe:	6832      	ldr	r2, [r6, #0]
 8009dc0:	f003 0306 	and.w	r3, r3, #6
 8009dc4:	2b04      	cmp	r3, #4
 8009dc6:	bf08      	it	eq
 8009dc8:	1aad      	subeq	r5, r5, r2
 8009dca:	68a3      	ldr	r3, [r4, #8]
 8009dcc:	6922      	ldr	r2, [r4, #16]
 8009dce:	bf0c      	ite	eq
 8009dd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009dd4:	2500      	movne	r5, #0
 8009dd6:	4293      	cmp	r3, r2
 8009dd8:	bfc4      	itt	gt
 8009dda:	1a9b      	subgt	r3, r3, r2
 8009ddc:	18ed      	addgt	r5, r5, r3
 8009dde:	2600      	movs	r6, #0
 8009de0:	341a      	adds	r4, #26
 8009de2:	42b5      	cmp	r5, r6
 8009de4:	d11a      	bne.n	8009e1c <_printf_common+0xc8>
 8009de6:	2000      	movs	r0, #0
 8009de8:	e008      	b.n	8009dfc <_printf_common+0xa8>
 8009dea:	2301      	movs	r3, #1
 8009dec:	4652      	mov	r2, sl
 8009dee:	4649      	mov	r1, r9
 8009df0:	4638      	mov	r0, r7
 8009df2:	47c0      	blx	r8
 8009df4:	3001      	adds	r0, #1
 8009df6:	d103      	bne.n	8009e00 <_printf_common+0xac>
 8009df8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e00:	3501      	adds	r5, #1
 8009e02:	e7c6      	b.n	8009d92 <_printf_common+0x3e>
 8009e04:	18e1      	adds	r1, r4, r3
 8009e06:	1c5a      	adds	r2, r3, #1
 8009e08:	2030      	movs	r0, #48	; 0x30
 8009e0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009e0e:	4422      	add	r2, r4
 8009e10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009e14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009e18:	3302      	adds	r3, #2
 8009e1a:	e7c7      	b.n	8009dac <_printf_common+0x58>
 8009e1c:	2301      	movs	r3, #1
 8009e1e:	4622      	mov	r2, r4
 8009e20:	4649      	mov	r1, r9
 8009e22:	4638      	mov	r0, r7
 8009e24:	47c0      	blx	r8
 8009e26:	3001      	adds	r0, #1
 8009e28:	d0e6      	beq.n	8009df8 <_printf_common+0xa4>
 8009e2a:	3601      	adds	r6, #1
 8009e2c:	e7d9      	b.n	8009de2 <_printf_common+0x8e>
	...

08009e30 <_printf_i>:
 8009e30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e34:	7e0f      	ldrb	r7, [r1, #24]
 8009e36:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009e38:	2f78      	cmp	r7, #120	; 0x78
 8009e3a:	4691      	mov	r9, r2
 8009e3c:	4680      	mov	r8, r0
 8009e3e:	460c      	mov	r4, r1
 8009e40:	469a      	mov	sl, r3
 8009e42:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009e46:	d807      	bhi.n	8009e58 <_printf_i+0x28>
 8009e48:	2f62      	cmp	r7, #98	; 0x62
 8009e4a:	d80a      	bhi.n	8009e62 <_printf_i+0x32>
 8009e4c:	2f00      	cmp	r7, #0
 8009e4e:	f000 80d8 	beq.w	800a002 <_printf_i+0x1d2>
 8009e52:	2f58      	cmp	r7, #88	; 0x58
 8009e54:	f000 80a3 	beq.w	8009f9e <_printf_i+0x16e>
 8009e58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009e5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009e60:	e03a      	b.n	8009ed8 <_printf_i+0xa8>
 8009e62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009e66:	2b15      	cmp	r3, #21
 8009e68:	d8f6      	bhi.n	8009e58 <_printf_i+0x28>
 8009e6a:	a101      	add	r1, pc, #4	; (adr r1, 8009e70 <_printf_i+0x40>)
 8009e6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009e70:	08009ec9 	.word	0x08009ec9
 8009e74:	08009edd 	.word	0x08009edd
 8009e78:	08009e59 	.word	0x08009e59
 8009e7c:	08009e59 	.word	0x08009e59
 8009e80:	08009e59 	.word	0x08009e59
 8009e84:	08009e59 	.word	0x08009e59
 8009e88:	08009edd 	.word	0x08009edd
 8009e8c:	08009e59 	.word	0x08009e59
 8009e90:	08009e59 	.word	0x08009e59
 8009e94:	08009e59 	.word	0x08009e59
 8009e98:	08009e59 	.word	0x08009e59
 8009e9c:	08009fe9 	.word	0x08009fe9
 8009ea0:	08009f0d 	.word	0x08009f0d
 8009ea4:	08009fcb 	.word	0x08009fcb
 8009ea8:	08009e59 	.word	0x08009e59
 8009eac:	08009e59 	.word	0x08009e59
 8009eb0:	0800a00b 	.word	0x0800a00b
 8009eb4:	08009e59 	.word	0x08009e59
 8009eb8:	08009f0d 	.word	0x08009f0d
 8009ebc:	08009e59 	.word	0x08009e59
 8009ec0:	08009e59 	.word	0x08009e59
 8009ec4:	08009fd3 	.word	0x08009fd3
 8009ec8:	682b      	ldr	r3, [r5, #0]
 8009eca:	1d1a      	adds	r2, r3, #4
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	602a      	str	r2, [r5, #0]
 8009ed0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009ed4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009ed8:	2301      	movs	r3, #1
 8009eda:	e0a3      	b.n	800a024 <_printf_i+0x1f4>
 8009edc:	6820      	ldr	r0, [r4, #0]
 8009ede:	6829      	ldr	r1, [r5, #0]
 8009ee0:	0606      	lsls	r6, r0, #24
 8009ee2:	f101 0304 	add.w	r3, r1, #4
 8009ee6:	d50a      	bpl.n	8009efe <_printf_i+0xce>
 8009ee8:	680e      	ldr	r6, [r1, #0]
 8009eea:	602b      	str	r3, [r5, #0]
 8009eec:	2e00      	cmp	r6, #0
 8009eee:	da03      	bge.n	8009ef8 <_printf_i+0xc8>
 8009ef0:	232d      	movs	r3, #45	; 0x2d
 8009ef2:	4276      	negs	r6, r6
 8009ef4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ef8:	485e      	ldr	r0, [pc, #376]	; (800a074 <_printf_i+0x244>)
 8009efa:	230a      	movs	r3, #10
 8009efc:	e019      	b.n	8009f32 <_printf_i+0x102>
 8009efe:	680e      	ldr	r6, [r1, #0]
 8009f00:	602b      	str	r3, [r5, #0]
 8009f02:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009f06:	bf18      	it	ne
 8009f08:	b236      	sxthne	r6, r6
 8009f0a:	e7ef      	b.n	8009eec <_printf_i+0xbc>
 8009f0c:	682b      	ldr	r3, [r5, #0]
 8009f0e:	6820      	ldr	r0, [r4, #0]
 8009f10:	1d19      	adds	r1, r3, #4
 8009f12:	6029      	str	r1, [r5, #0]
 8009f14:	0601      	lsls	r1, r0, #24
 8009f16:	d501      	bpl.n	8009f1c <_printf_i+0xec>
 8009f18:	681e      	ldr	r6, [r3, #0]
 8009f1a:	e002      	b.n	8009f22 <_printf_i+0xf2>
 8009f1c:	0646      	lsls	r6, r0, #25
 8009f1e:	d5fb      	bpl.n	8009f18 <_printf_i+0xe8>
 8009f20:	881e      	ldrh	r6, [r3, #0]
 8009f22:	4854      	ldr	r0, [pc, #336]	; (800a074 <_printf_i+0x244>)
 8009f24:	2f6f      	cmp	r7, #111	; 0x6f
 8009f26:	bf0c      	ite	eq
 8009f28:	2308      	moveq	r3, #8
 8009f2a:	230a      	movne	r3, #10
 8009f2c:	2100      	movs	r1, #0
 8009f2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009f32:	6865      	ldr	r5, [r4, #4]
 8009f34:	60a5      	str	r5, [r4, #8]
 8009f36:	2d00      	cmp	r5, #0
 8009f38:	bfa2      	ittt	ge
 8009f3a:	6821      	ldrge	r1, [r4, #0]
 8009f3c:	f021 0104 	bicge.w	r1, r1, #4
 8009f40:	6021      	strge	r1, [r4, #0]
 8009f42:	b90e      	cbnz	r6, 8009f48 <_printf_i+0x118>
 8009f44:	2d00      	cmp	r5, #0
 8009f46:	d04d      	beq.n	8009fe4 <_printf_i+0x1b4>
 8009f48:	4615      	mov	r5, r2
 8009f4a:	fbb6 f1f3 	udiv	r1, r6, r3
 8009f4e:	fb03 6711 	mls	r7, r3, r1, r6
 8009f52:	5dc7      	ldrb	r7, [r0, r7]
 8009f54:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009f58:	4637      	mov	r7, r6
 8009f5a:	42bb      	cmp	r3, r7
 8009f5c:	460e      	mov	r6, r1
 8009f5e:	d9f4      	bls.n	8009f4a <_printf_i+0x11a>
 8009f60:	2b08      	cmp	r3, #8
 8009f62:	d10b      	bne.n	8009f7c <_printf_i+0x14c>
 8009f64:	6823      	ldr	r3, [r4, #0]
 8009f66:	07de      	lsls	r6, r3, #31
 8009f68:	d508      	bpl.n	8009f7c <_printf_i+0x14c>
 8009f6a:	6923      	ldr	r3, [r4, #16]
 8009f6c:	6861      	ldr	r1, [r4, #4]
 8009f6e:	4299      	cmp	r1, r3
 8009f70:	bfde      	ittt	le
 8009f72:	2330      	movle	r3, #48	; 0x30
 8009f74:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009f78:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009f7c:	1b52      	subs	r2, r2, r5
 8009f7e:	6122      	str	r2, [r4, #16]
 8009f80:	f8cd a000 	str.w	sl, [sp]
 8009f84:	464b      	mov	r3, r9
 8009f86:	aa03      	add	r2, sp, #12
 8009f88:	4621      	mov	r1, r4
 8009f8a:	4640      	mov	r0, r8
 8009f8c:	f7ff fee2 	bl	8009d54 <_printf_common>
 8009f90:	3001      	adds	r0, #1
 8009f92:	d14c      	bne.n	800a02e <_printf_i+0x1fe>
 8009f94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009f98:	b004      	add	sp, #16
 8009f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f9e:	4835      	ldr	r0, [pc, #212]	; (800a074 <_printf_i+0x244>)
 8009fa0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009fa4:	6829      	ldr	r1, [r5, #0]
 8009fa6:	6823      	ldr	r3, [r4, #0]
 8009fa8:	f851 6b04 	ldr.w	r6, [r1], #4
 8009fac:	6029      	str	r1, [r5, #0]
 8009fae:	061d      	lsls	r5, r3, #24
 8009fb0:	d514      	bpl.n	8009fdc <_printf_i+0x1ac>
 8009fb2:	07df      	lsls	r7, r3, #31
 8009fb4:	bf44      	itt	mi
 8009fb6:	f043 0320 	orrmi.w	r3, r3, #32
 8009fba:	6023      	strmi	r3, [r4, #0]
 8009fbc:	b91e      	cbnz	r6, 8009fc6 <_printf_i+0x196>
 8009fbe:	6823      	ldr	r3, [r4, #0]
 8009fc0:	f023 0320 	bic.w	r3, r3, #32
 8009fc4:	6023      	str	r3, [r4, #0]
 8009fc6:	2310      	movs	r3, #16
 8009fc8:	e7b0      	b.n	8009f2c <_printf_i+0xfc>
 8009fca:	6823      	ldr	r3, [r4, #0]
 8009fcc:	f043 0320 	orr.w	r3, r3, #32
 8009fd0:	6023      	str	r3, [r4, #0]
 8009fd2:	2378      	movs	r3, #120	; 0x78
 8009fd4:	4828      	ldr	r0, [pc, #160]	; (800a078 <_printf_i+0x248>)
 8009fd6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009fda:	e7e3      	b.n	8009fa4 <_printf_i+0x174>
 8009fdc:	0659      	lsls	r1, r3, #25
 8009fde:	bf48      	it	mi
 8009fe0:	b2b6      	uxthmi	r6, r6
 8009fe2:	e7e6      	b.n	8009fb2 <_printf_i+0x182>
 8009fe4:	4615      	mov	r5, r2
 8009fe6:	e7bb      	b.n	8009f60 <_printf_i+0x130>
 8009fe8:	682b      	ldr	r3, [r5, #0]
 8009fea:	6826      	ldr	r6, [r4, #0]
 8009fec:	6961      	ldr	r1, [r4, #20]
 8009fee:	1d18      	adds	r0, r3, #4
 8009ff0:	6028      	str	r0, [r5, #0]
 8009ff2:	0635      	lsls	r5, r6, #24
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	d501      	bpl.n	8009ffc <_printf_i+0x1cc>
 8009ff8:	6019      	str	r1, [r3, #0]
 8009ffa:	e002      	b.n	800a002 <_printf_i+0x1d2>
 8009ffc:	0670      	lsls	r0, r6, #25
 8009ffe:	d5fb      	bpl.n	8009ff8 <_printf_i+0x1c8>
 800a000:	8019      	strh	r1, [r3, #0]
 800a002:	2300      	movs	r3, #0
 800a004:	6123      	str	r3, [r4, #16]
 800a006:	4615      	mov	r5, r2
 800a008:	e7ba      	b.n	8009f80 <_printf_i+0x150>
 800a00a:	682b      	ldr	r3, [r5, #0]
 800a00c:	1d1a      	adds	r2, r3, #4
 800a00e:	602a      	str	r2, [r5, #0]
 800a010:	681d      	ldr	r5, [r3, #0]
 800a012:	6862      	ldr	r2, [r4, #4]
 800a014:	2100      	movs	r1, #0
 800a016:	4628      	mov	r0, r5
 800a018:	f7f6 f8f2 	bl	8000200 <memchr>
 800a01c:	b108      	cbz	r0, 800a022 <_printf_i+0x1f2>
 800a01e:	1b40      	subs	r0, r0, r5
 800a020:	6060      	str	r0, [r4, #4]
 800a022:	6863      	ldr	r3, [r4, #4]
 800a024:	6123      	str	r3, [r4, #16]
 800a026:	2300      	movs	r3, #0
 800a028:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a02c:	e7a8      	b.n	8009f80 <_printf_i+0x150>
 800a02e:	6923      	ldr	r3, [r4, #16]
 800a030:	462a      	mov	r2, r5
 800a032:	4649      	mov	r1, r9
 800a034:	4640      	mov	r0, r8
 800a036:	47d0      	blx	sl
 800a038:	3001      	adds	r0, #1
 800a03a:	d0ab      	beq.n	8009f94 <_printf_i+0x164>
 800a03c:	6823      	ldr	r3, [r4, #0]
 800a03e:	079b      	lsls	r3, r3, #30
 800a040:	d413      	bmi.n	800a06a <_printf_i+0x23a>
 800a042:	68e0      	ldr	r0, [r4, #12]
 800a044:	9b03      	ldr	r3, [sp, #12]
 800a046:	4298      	cmp	r0, r3
 800a048:	bfb8      	it	lt
 800a04a:	4618      	movlt	r0, r3
 800a04c:	e7a4      	b.n	8009f98 <_printf_i+0x168>
 800a04e:	2301      	movs	r3, #1
 800a050:	4632      	mov	r2, r6
 800a052:	4649      	mov	r1, r9
 800a054:	4640      	mov	r0, r8
 800a056:	47d0      	blx	sl
 800a058:	3001      	adds	r0, #1
 800a05a:	d09b      	beq.n	8009f94 <_printf_i+0x164>
 800a05c:	3501      	adds	r5, #1
 800a05e:	68e3      	ldr	r3, [r4, #12]
 800a060:	9903      	ldr	r1, [sp, #12]
 800a062:	1a5b      	subs	r3, r3, r1
 800a064:	42ab      	cmp	r3, r5
 800a066:	dcf2      	bgt.n	800a04e <_printf_i+0x21e>
 800a068:	e7eb      	b.n	800a042 <_printf_i+0x212>
 800a06a:	2500      	movs	r5, #0
 800a06c:	f104 0619 	add.w	r6, r4, #25
 800a070:	e7f5      	b.n	800a05e <_printf_i+0x22e>
 800a072:	bf00      	nop
 800a074:	0801296c 	.word	0x0801296c
 800a078:	0801297d 	.word	0x0801297d

0800a07c <iprintf>:
 800a07c:	b40f      	push	{r0, r1, r2, r3}
 800a07e:	4b0a      	ldr	r3, [pc, #40]	; (800a0a8 <iprintf+0x2c>)
 800a080:	b513      	push	{r0, r1, r4, lr}
 800a082:	681c      	ldr	r4, [r3, #0]
 800a084:	b124      	cbz	r4, 800a090 <iprintf+0x14>
 800a086:	69a3      	ldr	r3, [r4, #24]
 800a088:	b913      	cbnz	r3, 800a090 <iprintf+0x14>
 800a08a:	4620      	mov	r0, r4
 800a08c:	f7ff f95c 	bl	8009348 <__sinit>
 800a090:	ab05      	add	r3, sp, #20
 800a092:	9a04      	ldr	r2, [sp, #16]
 800a094:	68a1      	ldr	r1, [r4, #8]
 800a096:	9301      	str	r3, [sp, #4]
 800a098:	4620      	mov	r0, r4
 800a09a:	f001 fe91 	bl	800bdc0 <_vfiprintf_r>
 800a09e:	b002      	add	sp, #8
 800a0a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0a4:	b004      	add	sp, #16
 800a0a6:	4770      	bx	lr
 800a0a8:	20000014 	.word	0x20000014

0800a0ac <putchar>:
 800a0ac:	4b09      	ldr	r3, [pc, #36]	; (800a0d4 <putchar+0x28>)
 800a0ae:	b513      	push	{r0, r1, r4, lr}
 800a0b0:	681c      	ldr	r4, [r3, #0]
 800a0b2:	4601      	mov	r1, r0
 800a0b4:	b134      	cbz	r4, 800a0c4 <putchar+0x18>
 800a0b6:	69a3      	ldr	r3, [r4, #24]
 800a0b8:	b923      	cbnz	r3, 800a0c4 <putchar+0x18>
 800a0ba:	9001      	str	r0, [sp, #4]
 800a0bc:	4620      	mov	r0, r4
 800a0be:	f7ff f943 	bl	8009348 <__sinit>
 800a0c2:	9901      	ldr	r1, [sp, #4]
 800a0c4:	68a2      	ldr	r2, [r4, #8]
 800a0c6:	4620      	mov	r0, r4
 800a0c8:	b002      	add	sp, #8
 800a0ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0ce:	f002 b8f9 	b.w	800c2c4 <_putc_r>
 800a0d2:	bf00      	nop
 800a0d4:	20000014 	.word	0x20000014

0800a0d8 <_puts_r>:
 800a0d8:	b570      	push	{r4, r5, r6, lr}
 800a0da:	460e      	mov	r6, r1
 800a0dc:	4605      	mov	r5, r0
 800a0de:	b118      	cbz	r0, 800a0e8 <_puts_r+0x10>
 800a0e0:	6983      	ldr	r3, [r0, #24]
 800a0e2:	b90b      	cbnz	r3, 800a0e8 <_puts_r+0x10>
 800a0e4:	f7ff f930 	bl	8009348 <__sinit>
 800a0e8:	69ab      	ldr	r3, [r5, #24]
 800a0ea:	68ac      	ldr	r4, [r5, #8]
 800a0ec:	b913      	cbnz	r3, 800a0f4 <_puts_r+0x1c>
 800a0ee:	4628      	mov	r0, r5
 800a0f0:	f7ff f92a 	bl	8009348 <__sinit>
 800a0f4:	4b2c      	ldr	r3, [pc, #176]	; (800a1a8 <_puts_r+0xd0>)
 800a0f6:	429c      	cmp	r4, r3
 800a0f8:	d120      	bne.n	800a13c <_puts_r+0x64>
 800a0fa:	686c      	ldr	r4, [r5, #4]
 800a0fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a0fe:	07db      	lsls	r3, r3, #31
 800a100:	d405      	bmi.n	800a10e <_puts_r+0x36>
 800a102:	89a3      	ldrh	r3, [r4, #12]
 800a104:	0598      	lsls	r0, r3, #22
 800a106:	d402      	bmi.n	800a10e <_puts_r+0x36>
 800a108:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a10a:	f7ff f9e0 	bl	80094ce <__retarget_lock_acquire_recursive>
 800a10e:	89a3      	ldrh	r3, [r4, #12]
 800a110:	0719      	lsls	r1, r3, #28
 800a112:	d51d      	bpl.n	800a150 <_puts_r+0x78>
 800a114:	6923      	ldr	r3, [r4, #16]
 800a116:	b1db      	cbz	r3, 800a150 <_puts_r+0x78>
 800a118:	3e01      	subs	r6, #1
 800a11a:	68a3      	ldr	r3, [r4, #8]
 800a11c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a120:	3b01      	subs	r3, #1
 800a122:	60a3      	str	r3, [r4, #8]
 800a124:	bb39      	cbnz	r1, 800a176 <_puts_r+0x9e>
 800a126:	2b00      	cmp	r3, #0
 800a128:	da38      	bge.n	800a19c <_puts_r+0xc4>
 800a12a:	4622      	mov	r2, r4
 800a12c:	210a      	movs	r1, #10
 800a12e:	4628      	mov	r0, r5
 800a130:	f000 f910 	bl	800a354 <__swbuf_r>
 800a134:	3001      	adds	r0, #1
 800a136:	d011      	beq.n	800a15c <_puts_r+0x84>
 800a138:	250a      	movs	r5, #10
 800a13a:	e011      	b.n	800a160 <_puts_r+0x88>
 800a13c:	4b1b      	ldr	r3, [pc, #108]	; (800a1ac <_puts_r+0xd4>)
 800a13e:	429c      	cmp	r4, r3
 800a140:	d101      	bne.n	800a146 <_puts_r+0x6e>
 800a142:	68ac      	ldr	r4, [r5, #8]
 800a144:	e7da      	b.n	800a0fc <_puts_r+0x24>
 800a146:	4b1a      	ldr	r3, [pc, #104]	; (800a1b0 <_puts_r+0xd8>)
 800a148:	429c      	cmp	r4, r3
 800a14a:	bf08      	it	eq
 800a14c:	68ec      	ldreq	r4, [r5, #12]
 800a14e:	e7d5      	b.n	800a0fc <_puts_r+0x24>
 800a150:	4621      	mov	r1, r4
 800a152:	4628      	mov	r0, r5
 800a154:	f000 f962 	bl	800a41c <__swsetup_r>
 800a158:	2800      	cmp	r0, #0
 800a15a:	d0dd      	beq.n	800a118 <_puts_r+0x40>
 800a15c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800a160:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a162:	07da      	lsls	r2, r3, #31
 800a164:	d405      	bmi.n	800a172 <_puts_r+0x9a>
 800a166:	89a3      	ldrh	r3, [r4, #12]
 800a168:	059b      	lsls	r3, r3, #22
 800a16a:	d402      	bmi.n	800a172 <_puts_r+0x9a>
 800a16c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a16e:	f7ff f9af 	bl	80094d0 <__retarget_lock_release_recursive>
 800a172:	4628      	mov	r0, r5
 800a174:	bd70      	pop	{r4, r5, r6, pc}
 800a176:	2b00      	cmp	r3, #0
 800a178:	da04      	bge.n	800a184 <_puts_r+0xac>
 800a17a:	69a2      	ldr	r2, [r4, #24]
 800a17c:	429a      	cmp	r2, r3
 800a17e:	dc06      	bgt.n	800a18e <_puts_r+0xb6>
 800a180:	290a      	cmp	r1, #10
 800a182:	d004      	beq.n	800a18e <_puts_r+0xb6>
 800a184:	6823      	ldr	r3, [r4, #0]
 800a186:	1c5a      	adds	r2, r3, #1
 800a188:	6022      	str	r2, [r4, #0]
 800a18a:	7019      	strb	r1, [r3, #0]
 800a18c:	e7c5      	b.n	800a11a <_puts_r+0x42>
 800a18e:	4622      	mov	r2, r4
 800a190:	4628      	mov	r0, r5
 800a192:	f000 f8df 	bl	800a354 <__swbuf_r>
 800a196:	3001      	adds	r0, #1
 800a198:	d1bf      	bne.n	800a11a <_puts_r+0x42>
 800a19a:	e7df      	b.n	800a15c <_puts_r+0x84>
 800a19c:	6823      	ldr	r3, [r4, #0]
 800a19e:	250a      	movs	r5, #10
 800a1a0:	1c5a      	adds	r2, r3, #1
 800a1a2:	6022      	str	r2, [r4, #0]
 800a1a4:	701d      	strb	r5, [r3, #0]
 800a1a6:	e7db      	b.n	800a160 <_puts_r+0x88>
 800a1a8:	08012918 	.word	0x08012918
 800a1ac:	08012938 	.word	0x08012938
 800a1b0:	080128f8 	.word	0x080128f8

0800a1b4 <puts>:
 800a1b4:	4b02      	ldr	r3, [pc, #8]	; (800a1c0 <puts+0xc>)
 800a1b6:	4601      	mov	r1, r0
 800a1b8:	6818      	ldr	r0, [r3, #0]
 800a1ba:	f7ff bf8d 	b.w	800a0d8 <_puts_r>
 800a1be:	bf00      	nop
 800a1c0:	20000014 	.word	0x20000014

0800a1c4 <_sbrk_r>:
 800a1c4:	b538      	push	{r3, r4, r5, lr}
 800a1c6:	4d06      	ldr	r5, [pc, #24]	; (800a1e0 <_sbrk_r+0x1c>)
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	4604      	mov	r4, r0
 800a1cc:	4608      	mov	r0, r1
 800a1ce:	602b      	str	r3, [r5, #0]
 800a1d0:	f7f8 fa62 	bl	8002698 <_sbrk>
 800a1d4:	1c43      	adds	r3, r0, #1
 800a1d6:	d102      	bne.n	800a1de <_sbrk_r+0x1a>
 800a1d8:	682b      	ldr	r3, [r5, #0]
 800a1da:	b103      	cbz	r3, 800a1de <_sbrk_r+0x1a>
 800a1dc:	6023      	str	r3, [r4, #0]
 800a1de:	bd38      	pop	{r3, r4, r5, pc}
 800a1e0:	200004c4 	.word	0x200004c4

0800a1e4 <siscanf>:
 800a1e4:	b40e      	push	{r1, r2, r3}
 800a1e6:	b510      	push	{r4, lr}
 800a1e8:	b09f      	sub	sp, #124	; 0x7c
 800a1ea:	ac21      	add	r4, sp, #132	; 0x84
 800a1ec:	f44f 7101 	mov.w	r1, #516	; 0x204
 800a1f0:	f854 2b04 	ldr.w	r2, [r4], #4
 800a1f4:	9201      	str	r2, [sp, #4]
 800a1f6:	f8ad 101c 	strh.w	r1, [sp, #28]
 800a1fa:	9004      	str	r0, [sp, #16]
 800a1fc:	9008      	str	r0, [sp, #32]
 800a1fe:	f7f5 fff1 	bl	80001e4 <strlen>
 800a202:	4b0c      	ldr	r3, [pc, #48]	; (800a234 <siscanf+0x50>)
 800a204:	9005      	str	r0, [sp, #20]
 800a206:	9009      	str	r0, [sp, #36]	; 0x24
 800a208:	930d      	str	r3, [sp, #52]	; 0x34
 800a20a:	480b      	ldr	r0, [pc, #44]	; (800a238 <siscanf+0x54>)
 800a20c:	9a01      	ldr	r2, [sp, #4]
 800a20e:	6800      	ldr	r0, [r0, #0]
 800a210:	9403      	str	r4, [sp, #12]
 800a212:	2300      	movs	r3, #0
 800a214:	9311      	str	r3, [sp, #68]	; 0x44
 800a216:	9316      	str	r3, [sp, #88]	; 0x58
 800a218:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a21c:	f8ad 301e 	strh.w	r3, [sp, #30]
 800a220:	a904      	add	r1, sp, #16
 800a222:	4623      	mov	r3, r4
 800a224:	f001 fc2a 	bl	800ba7c <__ssvfiscanf_r>
 800a228:	b01f      	add	sp, #124	; 0x7c
 800a22a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a22e:	b003      	add	sp, #12
 800a230:	4770      	bx	lr
 800a232:	bf00      	nop
 800a234:	0800a25f 	.word	0x0800a25f
 800a238:	20000014 	.word	0x20000014

0800a23c <__sread>:
 800a23c:	b510      	push	{r4, lr}
 800a23e:	460c      	mov	r4, r1
 800a240:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a244:	f002 f886 	bl	800c354 <_read_r>
 800a248:	2800      	cmp	r0, #0
 800a24a:	bfab      	itete	ge
 800a24c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a24e:	89a3      	ldrhlt	r3, [r4, #12]
 800a250:	181b      	addge	r3, r3, r0
 800a252:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a256:	bfac      	ite	ge
 800a258:	6563      	strge	r3, [r4, #84]	; 0x54
 800a25a:	81a3      	strhlt	r3, [r4, #12]
 800a25c:	bd10      	pop	{r4, pc}

0800a25e <__seofread>:
 800a25e:	2000      	movs	r0, #0
 800a260:	4770      	bx	lr

0800a262 <__swrite>:
 800a262:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a266:	461f      	mov	r7, r3
 800a268:	898b      	ldrh	r3, [r1, #12]
 800a26a:	05db      	lsls	r3, r3, #23
 800a26c:	4605      	mov	r5, r0
 800a26e:	460c      	mov	r4, r1
 800a270:	4616      	mov	r6, r2
 800a272:	d505      	bpl.n	800a280 <__swrite+0x1e>
 800a274:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a278:	2302      	movs	r3, #2
 800a27a:	2200      	movs	r2, #0
 800a27c:	f000 ffec 	bl	800b258 <_lseek_r>
 800a280:	89a3      	ldrh	r3, [r4, #12]
 800a282:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a286:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a28a:	81a3      	strh	r3, [r4, #12]
 800a28c:	4632      	mov	r2, r6
 800a28e:	463b      	mov	r3, r7
 800a290:	4628      	mov	r0, r5
 800a292:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a296:	f000 b8af 	b.w	800a3f8 <_write_r>

0800a29a <__sseek>:
 800a29a:	b510      	push	{r4, lr}
 800a29c:	460c      	mov	r4, r1
 800a29e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2a2:	f000 ffd9 	bl	800b258 <_lseek_r>
 800a2a6:	1c43      	adds	r3, r0, #1
 800a2a8:	89a3      	ldrh	r3, [r4, #12]
 800a2aa:	bf15      	itete	ne
 800a2ac:	6560      	strne	r0, [r4, #84]	; 0x54
 800a2ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a2b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a2b6:	81a3      	strheq	r3, [r4, #12]
 800a2b8:	bf18      	it	ne
 800a2ba:	81a3      	strhne	r3, [r4, #12]
 800a2bc:	bd10      	pop	{r4, pc}

0800a2be <__sclose>:
 800a2be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2c2:	f000 b919 	b.w	800a4f8 <_close_r>

0800a2c6 <strncat>:
 800a2c6:	b530      	push	{r4, r5, lr}
 800a2c8:	4604      	mov	r4, r0
 800a2ca:	7825      	ldrb	r5, [r4, #0]
 800a2cc:	4623      	mov	r3, r4
 800a2ce:	3401      	adds	r4, #1
 800a2d0:	2d00      	cmp	r5, #0
 800a2d2:	d1fa      	bne.n	800a2ca <strncat+0x4>
 800a2d4:	3a01      	subs	r2, #1
 800a2d6:	d304      	bcc.n	800a2e2 <strncat+0x1c>
 800a2d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a2dc:	f803 4b01 	strb.w	r4, [r3], #1
 800a2e0:	b904      	cbnz	r4, 800a2e4 <strncat+0x1e>
 800a2e2:	bd30      	pop	{r4, r5, pc}
 800a2e4:	2a00      	cmp	r2, #0
 800a2e6:	d1f5      	bne.n	800a2d4 <strncat+0xe>
 800a2e8:	701a      	strb	r2, [r3, #0]
 800a2ea:	e7f3      	b.n	800a2d4 <strncat+0xe>

0800a2ec <swprintf>:
 800a2ec:	b40c      	push	{r2, r3}
 800a2ee:	b530      	push	{r4, r5, lr}
 800a2f0:	4b17      	ldr	r3, [pc, #92]	; (800a350 <swprintf+0x64>)
 800a2f2:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 800a2f6:	681d      	ldr	r5, [r3, #0]
 800a2f8:	b09d      	sub	sp, #116	; 0x74
 800a2fa:	460c      	mov	r4, r1
 800a2fc:	d308      	bcc.n	800a310 <swprintf+0x24>
 800a2fe:	238b      	movs	r3, #139	; 0x8b
 800a300:	602b      	str	r3, [r5, #0]
 800a302:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a306:	b01d      	add	sp, #116	; 0x74
 800a308:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a30c:	b002      	add	sp, #8
 800a30e:	4770      	bx	lr
 800a310:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a314:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a318:	9002      	str	r0, [sp, #8]
 800a31a:	9006      	str	r0, [sp, #24]
 800a31c:	b1b1      	cbz	r1, 800a34c <swprintf+0x60>
 800a31e:	1e4b      	subs	r3, r1, #1
 800a320:	009b      	lsls	r3, r3, #2
 800a322:	9304      	str	r3, [sp, #16]
 800a324:	9307      	str	r3, [sp, #28]
 800a326:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a32a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a32e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a330:	ab21      	add	r3, sp, #132	; 0x84
 800a332:	a902      	add	r1, sp, #8
 800a334:	4628      	mov	r0, r5
 800a336:	9301      	str	r3, [sp, #4]
 800a338:	f002 f9be 	bl	800c6b8 <_svfwprintf_r>
 800a33c:	2c00      	cmp	r4, #0
 800a33e:	d0de      	beq.n	800a2fe <swprintf+0x12>
 800a340:	9b02      	ldr	r3, [sp, #8]
 800a342:	2200      	movs	r2, #0
 800a344:	42a0      	cmp	r0, r4
 800a346:	601a      	str	r2, [r3, #0]
 800a348:	d3dd      	bcc.n	800a306 <swprintf+0x1a>
 800a34a:	e7d8      	b.n	800a2fe <swprintf+0x12>
 800a34c:	460b      	mov	r3, r1
 800a34e:	e7e8      	b.n	800a322 <swprintf+0x36>
 800a350:	20000014 	.word	0x20000014

0800a354 <__swbuf_r>:
 800a354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a356:	460e      	mov	r6, r1
 800a358:	4614      	mov	r4, r2
 800a35a:	4605      	mov	r5, r0
 800a35c:	b118      	cbz	r0, 800a366 <__swbuf_r+0x12>
 800a35e:	6983      	ldr	r3, [r0, #24]
 800a360:	b90b      	cbnz	r3, 800a366 <__swbuf_r+0x12>
 800a362:	f7fe fff1 	bl	8009348 <__sinit>
 800a366:	4b21      	ldr	r3, [pc, #132]	; (800a3ec <__swbuf_r+0x98>)
 800a368:	429c      	cmp	r4, r3
 800a36a:	d12b      	bne.n	800a3c4 <__swbuf_r+0x70>
 800a36c:	686c      	ldr	r4, [r5, #4]
 800a36e:	69a3      	ldr	r3, [r4, #24]
 800a370:	60a3      	str	r3, [r4, #8]
 800a372:	89a3      	ldrh	r3, [r4, #12]
 800a374:	071a      	lsls	r2, r3, #28
 800a376:	d52f      	bpl.n	800a3d8 <__swbuf_r+0x84>
 800a378:	6923      	ldr	r3, [r4, #16]
 800a37a:	b36b      	cbz	r3, 800a3d8 <__swbuf_r+0x84>
 800a37c:	6923      	ldr	r3, [r4, #16]
 800a37e:	6820      	ldr	r0, [r4, #0]
 800a380:	1ac0      	subs	r0, r0, r3
 800a382:	6963      	ldr	r3, [r4, #20]
 800a384:	b2f6      	uxtb	r6, r6
 800a386:	4283      	cmp	r3, r0
 800a388:	4637      	mov	r7, r6
 800a38a:	dc04      	bgt.n	800a396 <__swbuf_r+0x42>
 800a38c:	4621      	mov	r1, r4
 800a38e:	4628      	mov	r0, r5
 800a390:	f7fe ff34 	bl	80091fc <_fflush_r>
 800a394:	bb30      	cbnz	r0, 800a3e4 <__swbuf_r+0x90>
 800a396:	68a3      	ldr	r3, [r4, #8]
 800a398:	3b01      	subs	r3, #1
 800a39a:	60a3      	str	r3, [r4, #8]
 800a39c:	6823      	ldr	r3, [r4, #0]
 800a39e:	1c5a      	adds	r2, r3, #1
 800a3a0:	6022      	str	r2, [r4, #0]
 800a3a2:	701e      	strb	r6, [r3, #0]
 800a3a4:	6963      	ldr	r3, [r4, #20]
 800a3a6:	3001      	adds	r0, #1
 800a3a8:	4283      	cmp	r3, r0
 800a3aa:	d004      	beq.n	800a3b6 <__swbuf_r+0x62>
 800a3ac:	89a3      	ldrh	r3, [r4, #12]
 800a3ae:	07db      	lsls	r3, r3, #31
 800a3b0:	d506      	bpl.n	800a3c0 <__swbuf_r+0x6c>
 800a3b2:	2e0a      	cmp	r6, #10
 800a3b4:	d104      	bne.n	800a3c0 <__swbuf_r+0x6c>
 800a3b6:	4621      	mov	r1, r4
 800a3b8:	4628      	mov	r0, r5
 800a3ba:	f7fe ff1f 	bl	80091fc <_fflush_r>
 800a3be:	b988      	cbnz	r0, 800a3e4 <__swbuf_r+0x90>
 800a3c0:	4638      	mov	r0, r7
 800a3c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a3c4:	4b0a      	ldr	r3, [pc, #40]	; (800a3f0 <__swbuf_r+0x9c>)
 800a3c6:	429c      	cmp	r4, r3
 800a3c8:	d101      	bne.n	800a3ce <__swbuf_r+0x7a>
 800a3ca:	68ac      	ldr	r4, [r5, #8]
 800a3cc:	e7cf      	b.n	800a36e <__swbuf_r+0x1a>
 800a3ce:	4b09      	ldr	r3, [pc, #36]	; (800a3f4 <__swbuf_r+0xa0>)
 800a3d0:	429c      	cmp	r4, r3
 800a3d2:	bf08      	it	eq
 800a3d4:	68ec      	ldreq	r4, [r5, #12]
 800a3d6:	e7ca      	b.n	800a36e <__swbuf_r+0x1a>
 800a3d8:	4621      	mov	r1, r4
 800a3da:	4628      	mov	r0, r5
 800a3dc:	f000 f81e 	bl	800a41c <__swsetup_r>
 800a3e0:	2800      	cmp	r0, #0
 800a3e2:	d0cb      	beq.n	800a37c <__swbuf_r+0x28>
 800a3e4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a3e8:	e7ea      	b.n	800a3c0 <__swbuf_r+0x6c>
 800a3ea:	bf00      	nop
 800a3ec:	08012918 	.word	0x08012918
 800a3f0:	08012938 	.word	0x08012938
 800a3f4:	080128f8 	.word	0x080128f8

0800a3f8 <_write_r>:
 800a3f8:	b538      	push	{r3, r4, r5, lr}
 800a3fa:	4d07      	ldr	r5, [pc, #28]	; (800a418 <_write_r+0x20>)
 800a3fc:	4604      	mov	r4, r0
 800a3fe:	4608      	mov	r0, r1
 800a400:	4611      	mov	r1, r2
 800a402:	2200      	movs	r2, #0
 800a404:	602a      	str	r2, [r5, #0]
 800a406:	461a      	mov	r2, r3
 800a408:	f7f8 f8f5 	bl	80025f6 <_write>
 800a40c:	1c43      	adds	r3, r0, #1
 800a40e:	d102      	bne.n	800a416 <_write_r+0x1e>
 800a410:	682b      	ldr	r3, [r5, #0]
 800a412:	b103      	cbz	r3, 800a416 <_write_r+0x1e>
 800a414:	6023      	str	r3, [r4, #0]
 800a416:	bd38      	pop	{r3, r4, r5, pc}
 800a418:	200004c4 	.word	0x200004c4

0800a41c <__swsetup_r>:
 800a41c:	4b32      	ldr	r3, [pc, #200]	; (800a4e8 <__swsetup_r+0xcc>)
 800a41e:	b570      	push	{r4, r5, r6, lr}
 800a420:	681d      	ldr	r5, [r3, #0]
 800a422:	4606      	mov	r6, r0
 800a424:	460c      	mov	r4, r1
 800a426:	b125      	cbz	r5, 800a432 <__swsetup_r+0x16>
 800a428:	69ab      	ldr	r3, [r5, #24]
 800a42a:	b913      	cbnz	r3, 800a432 <__swsetup_r+0x16>
 800a42c:	4628      	mov	r0, r5
 800a42e:	f7fe ff8b 	bl	8009348 <__sinit>
 800a432:	4b2e      	ldr	r3, [pc, #184]	; (800a4ec <__swsetup_r+0xd0>)
 800a434:	429c      	cmp	r4, r3
 800a436:	d10f      	bne.n	800a458 <__swsetup_r+0x3c>
 800a438:	686c      	ldr	r4, [r5, #4]
 800a43a:	89a3      	ldrh	r3, [r4, #12]
 800a43c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a440:	0719      	lsls	r1, r3, #28
 800a442:	d42c      	bmi.n	800a49e <__swsetup_r+0x82>
 800a444:	06dd      	lsls	r5, r3, #27
 800a446:	d411      	bmi.n	800a46c <__swsetup_r+0x50>
 800a448:	2309      	movs	r3, #9
 800a44a:	6033      	str	r3, [r6, #0]
 800a44c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a450:	81a3      	strh	r3, [r4, #12]
 800a452:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a456:	e03e      	b.n	800a4d6 <__swsetup_r+0xba>
 800a458:	4b25      	ldr	r3, [pc, #148]	; (800a4f0 <__swsetup_r+0xd4>)
 800a45a:	429c      	cmp	r4, r3
 800a45c:	d101      	bne.n	800a462 <__swsetup_r+0x46>
 800a45e:	68ac      	ldr	r4, [r5, #8]
 800a460:	e7eb      	b.n	800a43a <__swsetup_r+0x1e>
 800a462:	4b24      	ldr	r3, [pc, #144]	; (800a4f4 <__swsetup_r+0xd8>)
 800a464:	429c      	cmp	r4, r3
 800a466:	bf08      	it	eq
 800a468:	68ec      	ldreq	r4, [r5, #12]
 800a46a:	e7e6      	b.n	800a43a <__swsetup_r+0x1e>
 800a46c:	0758      	lsls	r0, r3, #29
 800a46e:	d512      	bpl.n	800a496 <__swsetup_r+0x7a>
 800a470:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a472:	b141      	cbz	r1, 800a486 <__swsetup_r+0x6a>
 800a474:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a478:	4299      	cmp	r1, r3
 800a47a:	d002      	beq.n	800a482 <__swsetup_r+0x66>
 800a47c:	4630      	mov	r0, r6
 800a47e:	f7ff f8b3 	bl	80095e8 <_free_r>
 800a482:	2300      	movs	r3, #0
 800a484:	6363      	str	r3, [r4, #52]	; 0x34
 800a486:	89a3      	ldrh	r3, [r4, #12]
 800a488:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a48c:	81a3      	strh	r3, [r4, #12]
 800a48e:	2300      	movs	r3, #0
 800a490:	6063      	str	r3, [r4, #4]
 800a492:	6923      	ldr	r3, [r4, #16]
 800a494:	6023      	str	r3, [r4, #0]
 800a496:	89a3      	ldrh	r3, [r4, #12]
 800a498:	f043 0308 	orr.w	r3, r3, #8
 800a49c:	81a3      	strh	r3, [r4, #12]
 800a49e:	6923      	ldr	r3, [r4, #16]
 800a4a0:	b94b      	cbnz	r3, 800a4b6 <__swsetup_r+0x9a>
 800a4a2:	89a3      	ldrh	r3, [r4, #12]
 800a4a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a4a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a4ac:	d003      	beq.n	800a4b6 <__swsetup_r+0x9a>
 800a4ae:	4621      	mov	r1, r4
 800a4b0:	4630      	mov	r0, r6
 800a4b2:	f7ff f833 	bl	800951c <__smakebuf_r>
 800a4b6:	89a0      	ldrh	r0, [r4, #12]
 800a4b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a4bc:	f010 0301 	ands.w	r3, r0, #1
 800a4c0:	d00a      	beq.n	800a4d8 <__swsetup_r+0xbc>
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	60a3      	str	r3, [r4, #8]
 800a4c6:	6963      	ldr	r3, [r4, #20]
 800a4c8:	425b      	negs	r3, r3
 800a4ca:	61a3      	str	r3, [r4, #24]
 800a4cc:	6923      	ldr	r3, [r4, #16]
 800a4ce:	b943      	cbnz	r3, 800a4e2 <__swsetup_r+0xc6>
 800a4d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a4d4:	d1ba      	bne.n	800a44c <__swsetup_r+0x30>
 800a4d6:	bd70      	pop	{r4, r5, r6, pc}
 800a4d8:	0781      	lsls	r1, r0, #30
 800a4da:	bf58      	it	pl
 800a4dc:	6963      	ldrpl	r3, [r4, #20]
 800a4de:	60a3      	str	r3, [r4, #8]
 800a4e0:	e7f4      	b.n	800a4cc <__swsetup_r+0xb0>
 800a4e2:	2000      	movs	r0, #0
 800a4e4:	e7f7      	b.n	800a4d6 <__swsetup_r+0xba>
 800a4e6:	bf00      	nop
 800a4e8:	20000014 	.word	0x20000014
 800a4ec:	08012918 	.word	0x08012918
 800a4f0:	08012938 	.word	0x08012938
 800a4f4:	080128f8 	.word	0x080128f8

0800a4f8 <_close_r>:
 800a4f8:	b538      	push	{r3, r4, r5, lr}
 800a4fa:	4d06      	ldr	r5, [pc, #24]	; (800a514 <_close_r+0x1c>)
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	4604      	mov	r4, r0
 800a500:	4608      	mov	r0, r1
 800a502:	602b      	str	r3, [r5, #0]
 800a504:	f7f8 f893 	bl	800262e <_close>
 800a508:	1c43      	adds	r3, r0, #1
 800a50a:	d102      	bne.n	800a512 <_close_r+0x1a>
 800a50c:	682b      	ldr	r3, [r5, #0]
 800a50e:	b103      	cbz	r3, 800a512 <_close_r+0x1a>
 800a510:	6023      	str	r3, [r4, #0]
 800a512:	bd38      	pop	{r3, r4, r5, pc}
 800a514:	200004c4 	.word	0x200004c4

0800a518 <quorem>:
 800a518:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a51c:	6903      	ldr	r3, [r0, #16]
 800a51e:	690c      	ldr	r4, [r1, #16]
 800a520:	42a3      	cmp	r3, r4
 800a522:	4607      	mov	r7, r0
 800a524:	f2c0 8081 	blt.w	800a62a <quorem+0x112>
 800a528:	3c01      	subs	r4, #1
 800a52a:	f101 0814 	add.w	r8, r1, #20
 800a52e:	f100 0514 	add.w	r5, r0, #20
 800a532:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a536:	9301      	str	r3, [sp, #4]
 800a538:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a53c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a540:	3301      	adds	r3, #1
 800a542:	429a      	cmp	r2, r3
 800a544:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a548:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a54c:	fbb2 f6f3 	udiv	r6, r2, r3
 800a550:	d331      	bcc.n	800a5b6 <quorem+0x9e>
 800a552:	f04f 0e00 	mov.w	lr, #0
 800a556:	4640      	mov	r0, r8
 800a558:	46ac      	mov	ip, r5
 800a55a:	46f2      	mov	sl, lr
 800a55c:	f850 2b04 	ldr.w	r2, [r0], #4
 800a560:	b293      	uxth	r3, r2
 800a562:	fb06 e303 	mla	r3, r6, r3, lr
 800a566:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a56a:	b29b      	uxth	r3, r3
 800a56c:	ebaa 0303 	sub.w	r3, sl, r3
 800a570:	f8dc a000 	ldr.w	sl, [ip]
 800a574:	0c12      	lsrs	r2, r2, #16
 800a576:	fa13 f38a 	uxtah	r3, r3, sl
 800a57a:	fb06 e202 	mla	r2, r6, r2, lr
 800a57e:	9300      	str	r3, [sp, #0]
 800a580:	9b00      	ldr	r3, [sp, #0]
 800a582:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a586:	b292      	uxth	r2, r2
 800a588:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a58c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a590:	f8bd 3000 	ldrh.w	r3, [sp]
 800a594:	4581      	cmp	r9, r0
 800a596:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a59a:	f84c 3b04 	str.w	r3, [ip], #4
 800a59e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a5a2:	d2db      	bcs.n	800a55c <quorem+0x44>
 800a5a4:	f855 300b 	ldr.w	r3, [r5, fp]
 800a5a8:	b92b      	cbnz	r3, 800a5b6 <quorem+0x9e>
 800a5aa:	9b01      	ldr	r3, [sp, #4]
 800a5ac:	3b04      	subs	r3, #4
 800a5ae:	429d      	cmp	r5, r3
 800a5b0:	461a      	mov	r2, r3
 800a5b2:	d32e      	bcc.n	800a612 <quorem+0xfa>
 800a5b4:	613c      	str	r4, [r7, #16]
 800a5b6:	4638      	mov	r0, r7
 800a5b8:	f001 f8ee 	bl	800b798 <__mcmp>
 800a5bc:	2800      	cmp	r0, #0
 800a5be:	db24      	blt.n	800a60a <quorem+0xf2>
 800a5c0:	3601      	adds	r6, #1
 800a5c2:	4628      	mov	r0, r5
 800a5c4:	f04f 0c00 	mov.w	ip, #0
 800a5c8:	f858 2b04 	ldr.w	r2, [r8], #4
 800a5cc:	f8d0 e000 	ldr.w	lr, [r0]
 800a5d0:	b293      	uxth	r3, r2
 800a5d2:	ebac 0303 	sub.w	r3, ip, r3
 800a5d6:	0c12      	lsrs	r2, r2, #16
 800a5d8:	fa13 f38e 	uxtah	r3, r3, lr
 800a5dc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a5e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a5e4:	b29b      	uxth	r3, r3
 800a5e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a5ea:	45c1      	cmp	r9, r8
 800a5ec:	f840 3b04 	str.w	r3, [r0], #4
 800a5f0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a5f4:	d2e8      	bcs.n	800a5c8 <quorem+0xb0>
 800a5f6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a5fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a5fe:	b922      	cbnz	r2, 800a60a <quorem+0xf2>
 800a600:	3b04      	subs	r3, #4
 800a602:	429d      	cmp	r5, r3
 800a604:	461a      	mov	r2, r3
 800a606:	d30a      	bcc.n	800a61e <quorem+0x106>
 800a608:	613c      	str	r4, [r7, #16]
 800a60a:	4630      	mov	r0, r6
 800a60c:	b003      	add	sp, #12
 800a60e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a612:	6812      	ldr	r2, [r2, #0]
 800a614:	3b04      	subs	r3, #4
 800a616:	2a00      	cmp	r2, #0
 800a618:	d1cc      	bne.n	800a5b4 <quorem+0x9c>
 800a61a:	3c01      	subs	r4, #1
 800a61c:	e7c7      	b.n	800a5ae <quorem+0x96>
 800a61e:	6812      	ldr	r2, [r2, #0]
 800a620:	3b04      	subs	r3, #4
 800a622:	2a00      	cmp	r2, #0
 800a624:	d1f0      	bne.n	800a608 <quorem+0xf0>
 800a626:	3c01      	subs	r4, #1
 800a628:	e7eb      	b.n	800a602 <quorem+0xea>
 800a62a:	2000      	movs	r0, #0
 800a62c:	e7ee      	b.n	800a60c <quorem+0xf4>
	...

0800a630 <_dtoa_r>:
 800a630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a634:	ed2d 8b04 	vpush	{d8-d9}
 800a638:	ec57 6b10 	vmov	r6, r7, d0
 800a63c:	b093      	sub	sp, #76	; 0x4c
 800a63e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a640:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a644:	9106      	str	r1, [sp, #24]
 800a646:	ee10 aa10 	vmov	sl, s0
 800a64a:	4604      	mov	r4, r0
 800a64c:	9209      	str	r2, [sp, #36]	; 0x24
 800a64e:	930c      	str	r3, [sp, #48]	; 0x30
 800a650:	46bb      	mov	fp, r7
 800a652:	b975      	cbnz	r5, 800a672 <_dtoa_r+0x42>
 800a654:	2010      	movs	r0, #16
 800a656:	f7fe ffa1 	bl	800959c <malloc>
 800a65a:	4602      	mov	r2, r0
 800a65c:	6260      	str	r0, [r4, #36]	; 0x24
 800a65e:	b920      	cbnz	r0, 800a66a <_dtoa_r+0x3a>
 800a660:	4ba7      	ldr	r3, [pc, #668]	; (800a900 <_dtoa_r+0x2d0>)
 800a662:	21ea      	movs	r1, #234	; 0xea
 800a664:	48a7      	ldr	r0, [pc, #668]	; (800a904 <_dtoa_r+0x2d4>)
 800a666:	f002 fdf3 	bl	800d250 <__assert_func>
 800a66a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a66e:	6005      	str	r5, [r0, #0]
 800a670:	60c5      	str	r5, [r0, #12]
 800a672:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a674:	6819      	ldr	r1, [r3, #0]
 800a676:	b151      	cbz	r1, 800a68e <_dtoa_r+0x5e>
 800a678:	685a      	ldr	r2, [r3, #4]
 800a67a:	604a      	str	r2, [r1, #4]
 800a67c:	2301      	movs	r3, #1
 800a67e:	4093      	lsls	r3, r2
 800a680:	608b      	str	r3, [r1, #8]
 800a682:	4620      	mov	r0, r4
 800a684:	f000 fe46 	bl	800b314 <_Bfree>
 800a688:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a68a:	2200      	movs	r2, #0
 800a68c:	601a      	str	r2, [r3, #0]
 800a68e:	1e3b      	subs	r3, r7, #0
 800a690:	bfaa      	itet	ge
 800a692:	2300      	movge	r3, #0
 800a694:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a698:	f8c8 3000 	strge.w	r3, [r8]
 800a69c:	4b9a      	ldr	r3, [pc, #616]	; (800a908 <_dtoa_r+0x2d8>)
 800a69e:	bfbc      	itt	lt
 800a6a0:	2201      	movlt	r2, #1
 800a6a2:	f8c8 2000 	strlt.w	r2, [r8]
 800a6a6:	ea33 030b 	bics.w	r3, r3, fp
 800a6aa:	d11b      	bne.n	800a6e4 <_dtoa_r+0xb4>
 800a6ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a6ae:	f242 730f 	movw	r3, #9999	; 0x270f
 800a6b2:	6013      	str	r3, [r2, #0]
 800a6b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a6b8:	4333      	orrs	r3, r6
 800a6ba:	f000 8592 	beq.w	800b1e2 <_dtoa_r+0xbb2>
 800a6be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a6c0:	b963      	cbnz	r3, 800a6dc <_dtoa_r+0xac>
 800a6c2:	4b92      	ldr	r3, [pc, #584]	; (800a90c <_dtoa_r+0x2dc>)
 800a6c4:	e022      	b.n	800a70c <_dtoa_r+0xdc>
 800a6c6:	4b92      	ldr	r3, [pc, #584]	; (800a910 <_dtoa_r+0x2e0>)
 800a6c8:	9301      	str	r3, [sp, #4]
 800a6ca:	3308      	adds	r3, #8
 800a6cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a6ce:	6013      	str	r3, [r2, #0]
 800a6d0:	9801      	ldr	r0, [sp, #4]
 800a6d2:	b013      	add	sp, #76	; 0x4c
 800a6d4:	ecbd 8b04 	vpop	{d8-d9}
 800a6d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6dc:	4b8b      	ldr	r3, [pc, #556]	; (800a90c <_dtoa_r+0x2dc>)
 800a6de:	9301      	str	r3, [sp, #4]
 800a6e0:	3303      	adds	r3, #3
 800a6e2:	e7f3      	b.n	800a6cc <_dtoa_r+0x9c>
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	4650      	mov	r0, sl
 800a6ea:	4659      	mov	r1, fp
 800a6ec:	f7f6 f9fc 	bl	8000ae8 <__aeabi_dcmpeq>
 800a6f0:	ec4b ab19 	vmov	d9, sl, fp
 800a6f4:	4680      	mov	r8, r0
 800a6f6:	b158      	cbz	r0, 800a710 <_dtoa_r+0xe0>
 800a6f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a6fa:	2301      	movs	r3, #1
 800a6fc:	6013      	str	r3, [r2, #0]
 800a6fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a700:	2b00      	cmp	r3, #0
 800a702:	f000 856b 	beq.w	800b1dc <_dtoa_r+0xbac>
 800a706:	4883      	ldr	r0, [pc, #524]	; (800a914 <_dtoa_r+0x2e4>)
 800a708:	6018      	str	r0, [r3, #0]
 800a70a:	1e43      	subs	r3, r0, #1
 800a70c:	9301      	str	r3, [sp, #4]
 800a70e:	e7df      	b.n	800a6d0 <_dtoa_r+0xa0>
 800a710:	ec4b ab10 	vmov	d0, sl, fp
 800a714:	aa10      	add	r2, sp, #64	; 0x40
 800a716:	a911      	add	r1, sp, #68	; 0x44
 800a718:	4620      	mov	r0, r4
 800a71a:	f001 f8e3 	bl	800b8e4 <__d2b>
 800a71e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a722:	ee08 0a10 	vmov	s16, r0
 800a726:	2d00      	cmp	r5, #0
 800a728:	f000 8084 	beq.w	800a834 <_dtoa_r+0x204>
 800a72c:	ee19 3a90 	vmov	r3, s19
 800a730:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a734:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a738:	4656      	mov	r6, sl
 800a73a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a73e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a742:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a746:	4b74      	ldr	r3, [pc, #464]	; (800a918 <_dtoa_r+0x2e8>)
 800a748:	2200      	movs	r2, #0
 800a74a:	4630      	mov	r0, r6
 800a74c:	4639      	mov	r1, r7
 800a74e:	f7f5 fdab 	bl	80002a8 <__aeabi_dsub>
 800a752:	a365      	add	r3, pc, #404	; (adr r3, 800a8e8 <_dtoa_r+0x2b8>)
 800a754:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a758:	f7f5 ff5e 	bl	8000618 <__aeabi_dmul>
 800a75c:	a364      	add	r3, pc, #400	; (adr r3, 800a8f0 <_dtoa_r+0x2c0>)
 800a75e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a762:	f7f5 fda3 	bl	80002ac <__adddf3>
 800a766:	4606      	mov	r6, r0
 800a768:	4628      	mov	r0, r5
 800a76a:	460f      	mov	r7, r1
 800a76c:	f7f5 feea 	bl	8000544 <__aeabi_i2d>
 800a770:	a361      	add	r3, pc, #388	; (adr r3, 800a8f8 <_dtoa_r+0x2c8>)
 800a772:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a776:	f7f5 ff4f 	bl	8000618 <__aeabi_dmul>
 800a77a:	4602      	mov	r2, r0
 800a77c:	460b      	mov	r3, r1
 800a77e:	4630      	mov	r0, r6
 800a780:	4639      	mov	r1, r7
 800a782:	f7f5 fd93 	bl	80002ac <__adddf3>
 800a786:	4606      	mov	r6, r0
 800a788:	460f      	mov	r7, r1
 800a78a:	f7f6 f9f5 	bl	8000b78 <__aeabi_d2iz>
 800a78e:	2200      	movs	r2, #0
 800a790:	9000      	str	r0, [sp, #0]
 800a792:	2300      	movs	r3, #0
 800a794:	4630      	mov	r0, r6
 800a796:	4639      	mov	r1, r7
 800a798:	f7f6 f9b0 	bl	8000afc <__aeabi_dcmplt>
 800a79c:	b150      	cbz	r0, 800a7b4 <_dtoa_r+0x184>
 800a79e:	9800      	ldr	r0, [sp, #0]
 800a7a0:	f7f5 fed0 	bl	8000544 <__aeabi_i2d>
 800a7a4:	4632      	mov	r2, r6
 800a7a6:	463b      	mov	r3, r7
 800a7a8:	f7f6 f99e 	bl	8000ae8 <__aeabi_dcmpeq>
 800a7ac:	b910      	cbnz	r0, 800a7b4 <_dtoa_r+0x184>
 800a7ae:	9b00      	ldr	r3, [sp, #0]
 800a7b0:	3b01      	subs	r3, #1
 800a7b2:	9300      	str	r3, [sp, #0]
 800a7b4:	9b00      	ldr	r3, [sp, #0]
 800a7b6:	2b16      	cmp	r3, #22
 800a7b8:	d85a      	bhi.n	800a870 <_dtoa_r+0x240>
 800a7ba:	9a00      	ldr	r2, [sp, #0]
 800a7bc:	4b57      	ldr	r3, [pc, #348]	; (800a91c <_dtoa_r+0x2ec>)
 800a7be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a7c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7c6:	ec51 0b19 	vmov	r0, r1, d9
 800a7ca:	f7f6 f997 	bl	8000afc <__aeabi_dcmplt>
 800a7ce:	2800      	cmp	r0, #0
 800a7d0:	d050      	beq.n	800a874 <_dtoa_r+0x244>
 800a7d2:	9b00      	ldr	r3, [sp, #0]
 800a7d4:	3b01      	subs	r3, #1
 800a7d6:	9300      	str	r3, [sp, #0]
 800a7d8:	2300      	movs	r3, #0
 800a7da:	930b      	str	r3, [sp, #44]	; 0x2c
 800a7dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a7de:	1b5d      	subs	r5, r3, r5
 800a7e0:	1e6b      	subs	r3, r5, #1
 800a7e2:	9305      	str	r3, [sp, #20]
 800a7e4:	bf45      	ittet	mi
 800a7e6:	f1c5 0301 	rsbmi	r3, r5, #1
 800a7ea:	9304      	strmi	r3, [sp, #16]
 800a7ec:	2300      	movpl	r3, #0
 800a7ee:	2300      	movmi	r3, #0
 800a7f0:	bf4c      	ite	mi
 800a7f2:	9305      	strmi	r3, [sp, #20]
 800a7f4:	9304      	strpl	r3, [sp, #16]
 800a7f6:	9b00      	ldr	r3, [sp, #0]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	db3d      	blt.n	800a878 <_dtoa_r+0x248>
 800a7fc:	9b05      	ldr	r3, [sp, #20]
 800a7fe:	9a00      	ldr	r2, [sp, #0]
 800a800:	920a      	str	r2, [sp, #40]	; 0x28
 800a802:	4413      	add	r3, r2
 800a804:	9305      	str	r3, [sp, #20]
 800a806:	2300      	movs	r3, #0
 800a808:	9307      	str	r3, [sp, #28]
 800a80a:	9b06      	ldr	r3, [sp, #24]
 800a80c:	2b09      	cmp	r3, #9
 800a80e:	f200 8089 	bhi.w	800a924 <_dtoa_r+0x2f4>
 800a812:	2b05      	cmp	r3, #5
 800a814:	bfc4      	itt	gt
 800a816:	3b04      	subgt	r3, #4
 800a818:	9306      	strgt	r3, [sp, #24]
 800a81a:	9b06      	ldr	r3, [sp, #24]
 800a81c:	f1a3 0302 	sub.w	r3, r3, #2
 800a820:	bfcc      	ite	gt
 800a822:	2500      	movgt	r5, #0
 800a824:	2501      	movle	r5, #1
 800a826:	2b03      	cmp	r3, #3
 800a828:	f200 8087 	bhi.w	800a93a <_dtoa_r+0x30a>
 800a82c:	e8df f003 	tbb	[pc, r3]
 800a830:	59383a2d 	.word	0x59383a2d
 800a834:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a838:	441d      	add	r5, r3
 800a83a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a83e:	2b20      	cmp	r3, #32
 800a840:	bfc1      	itttt	gt
 800a842:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a846:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a84a:	fa0b f303 	lslgt.w	r3, fp, r3
 800a84e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a852:	bfda      	itte	le
 800a854:	f1c3 0320 	rsble	r3, r3, #32
 800a858:	fa06 f003 	lslle.w	r0, r6, r3
 800a85c:	4318      	orrgt	r0, r3
 800a85e:	f7f5 fe61 	bl	8000524 <__aeabi_ui2d>
 800a862:	2301      	movs	r3, #1
 800a864:	4606      	mov	r6, r0
 800a866:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a86a:	3d01      	subs	r5, #1
 800a86c:	930e      	str	r3, [sp, #56]	; 0x38
 800a86e:	e76a      	b.n	800a746 <_dtoa_r+0x116>
 800a870:	2301      	movs	r3, #1
 800a872:	e7b2      	b.n	800a7da <_dtoa_r+0x1aa>
 800a874:	900b      	str	r0, [sp, #44]	; 0x2c
 800a876:	e7b1      	b.n	800a7dc <_dtoa_r+0x1ac>
 800a878:	9b04      	ldr	r3, [sp, #16]
 800a87a:	9a00      	ldr	r2, [sp, #0]
 800a87c:	1a9b      	subs	r3, r3, r2
 800a87e:	9304      	str	r3, [sp, #16]
 800a880:	4253      	negs	r3, r2
 800a882:	9307      	str	r3, [sp, #28]
 800a884:	2300      	movs	r3, #0
 800a886:	930a      	str	r3, [sp, #40]	; 0x28
 800a888:	e7bf      	b.n	800a80a <_dtoa_r+0x1da>
 800a88a:	2300      	movs	r3, #0
 800a88c:	9308      	str	r3, [sp, #32]
 800a88e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a890:	2b00      	cmp	r3, #0
 800a892:	dc55      	bgt.n	800a940 <_dtoa_r+0x310>
 800a894:	2301      	movs	r3, #1
 800a896:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a89a:	461a      	mov	r2, r3
 800a89c:	9209      	str	r2, [sp, #36]	; 0x24
 800a89e:	e00c      	b.n	800a8ba <_dtoa_r+0x28a>
 800a8a0:	2301      	movs	r3, #1
 800a8a2:	e7f3      	b.n	800a88c <_dtoa_r+0x25c>
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a8a8:	9308      	str	r3, [sp, #32]
 800a8aa:	9b00      	ldr	r3, [sp, #0]
 800a8ac:	4413      	add	r3, r2
 800a8ae:	9302      	str	r3, [sp, #8]
 800a8b0:	3301      	adds	r3, #1
 800a8b2:	2b01      	cmp	r3, #1
 800a8b4:	9303      	str	r3, [sp, #12]
 800a8b6:	bfb8      	it	lt
 800a8b8:	2301      	movlt	r3, #1
 800a8ba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a8bc:	2200      	movs	r2, #0
 800a8be:	6042      	str	r2, [r0, #4]
 800a8c0:	2204      	movs	r2, #4
 800a8c2:	f102 0614 	add.w	r6, r2, #20
 800a8c6:	429e      	cmp	r6, r3
 800a8c8:	6841      	ldr	r1, [r0, #4]
 800a8ca:	d93d      	bls.n	800a948 <_dtoa_r+0x318>
 800a8cc:	4620      	mov	r0, r4
 800a8ce:	f000 fce1 	bl	800b294 <_Balloc>
 800a8d2:	9001      	str	r0, [sp, #4]
 800a8d4:	2800      	cmp	r0, #0
 800a8d6:	d13b      	bne.n	800a950 <_dtoa_r+0x320>
 800a8d8:	4b11      	ldr	r3, [pc, #68]	; (800a920 <_dtoa_r+0x2f0>)
 800a8da:	4602      	mov	r2, r0
 800a8dc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a8e0:	e6c0      	b.n	800a664 <_dtoa_r+0x34>
 800a8e2:	2301      	movs	r3, #1
 800a8e4:	e7df      	b.n	800a8a6 <_dtoa_r+0x276>
 800a8e6:	bf00      	nop
 800a8e8:	636f4361 	.word	0x636f4361
 800a8ec:	3fd287a7 	.word	0x3fd287a7
 800a8f0:	8b60c8b3 	.word	0x8b60c8b3
 800a8f4:	3fc68a28 	.word	0x3fc68a28
 800a8f8:	509f79fb 	.word	0x509f79fb
 800a8fc:	3fd34413 	.word	0x3fd34413
 800a900:	0801299b 	.word	0x0801299b
 800a904:	080129b2 	.word	0x080129b2
 800a908:	7ff00000 	.word	0x7ff00000
 800a90c:	08012997 	.word	0x08012997
 800a910:	0801298e 	.word	0x0801298e
 800a914:	08012b92 	.word	0x08012b92
 800a918:	3ff80000 	.word	0x3ff80000
 800a91c:	08012aa8 	.word	0x08012aa8
 800a920:	08012a0d 	.word	0x08012a0d
 800a924:	2501      	movs	r5, #1
 800a926:	2300      	movs	r3, #0
 800a928:	9306      	str	r3, [sp, #24]
 800a92a:	9508      	str	r5, [sp, #32]
 800a92c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a930:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a934:	2200      	movs	r2, #0
 800a936:	2312      	movs	r3, #18
 800a938:	e7b0      	b.n	800a89c <_dtoa_r+0x26c>
 800a93a:	2301      	movs	r3, #1
 800a93c:	9308      	str	r3, [sp, #32]
 800a93e:	e7f5      	b.n	800a92c <_dtoa_r+0x2fc>
 800a940:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a942:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a946:	e7b8      	b.n	800a8ba <_dtoa_r+0x28a>
 800a948:	3101      	adds	r1, #1
 800a94a:	6041      	str	r1, [r0, #4]
 800a94c:	0052      	lsls	r2, r2, #1
 800a94e:	e7b8      	b.n	800a8c2 <_dtoa_r+0x292>
 800a950:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a952:	9a01      	ldr	r2, [sp, #4]
 800a954:	601a      	str	r2, [r3, #0]
 800a956:	9b03      	ldr	r3, [sp, #12]
 800a958:	2b0e      	cmp	r3, #14
 800a95a:	f200 809d 	bhi.w	800aa98 <_dtoa_r+0x468>
 800a95e:	2d00      	cmp	r5, #0
 800a960:	f000 809a 	beq.w	800aa98 <_dtoa_r+0x468>
 800a964:	9b00      	ldr	r3, [sp, #0]
 800a966:	2b00      	cmp	r3, #0
 800a968:	dd32      	ble.n	800a9d0 <_dtoa_r+0x3a0>
 800a96a:	4ab7      	ldr	r2, [pc, #732]	; (800ac48 <_dtoa_r+0x618>)
 800a96c:	f003 030f 	and.w	r3, r3, #15
 800a970:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a974:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a978:	9b00      	ldr	r3, [sp, #0]
 800a97a:	05d8      	lsls	r0, r3, #23
 800a97c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a980:	d516      	bpl.n	800a9b0 <_dtoa_r+0x380>
 800a982:	4bb2      	ldr	r3, [pc, #712]	; (800ac4c <_dtoa_r+0x61c>)
 800a984:	ec51 0b19 	vmov	r0, r1, d9
 800a988:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a98c:	f7f5 ff6e 	bl	800086c <__aeabi_ddiv>
 800a990:	f007 070f 	and.w	r7, r7, #15
 800a994:	4682      	mov	sl, r0
 800a996:	468b      	mov	fp, r1
 800a998:	2503      	movs	r5, #3
 800a99a:	4eac      	ldr	r6, [pc, #688]	; (800ac4c <_dtoa_r+0x61c>)
 800a99c:	b957      	cbnz	r7, 800a9b4 <_dtoa_r+0x384>
 800a99e:	4642      	mov	r2, r8
 800a9a0:	464b      	mov	r3, r9
 800a9a2:	4650      	mov	r0, sl
 800a9a4:	4659      	mov	r1, fp
 800a9a6:	f7f5 ff61 	bl	800086c <__aeabi_ddiv>
 800a9aa:	4682      	mov	sl, r0
 800a9ac:	468b      	mov	fp, r1
 800a9ae:	e028      	b.n	800aa02 <_dtoa_r+0x3d2>
 800a9b0:	2502      	movs	r5, #2
 800a9b2:	e7f2      	b.n	800a99a <_dtoa_r+0x36a>
 800a9b4:	07f9      	lsls	r1, r7, #31
 800a9b6:	d508      	bpl.n	800a9ca <_dtoa_r+0x39a>
 800a9b8:	4640      	mov	r0, r8
 800a9ba:	4649      	mov	r1, r9
 800a9bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a9c0:	f7f5 fe2a 	bl	8000618 <__aeabi_dmul>
 800a9c4:	3501      	adds	r5, #1
 800a9c6:	4680      	mov	r8, r0
 800a9c8:	4689      	mov	r9, r1
 800a9ca:	107f      	asrs	r7, r7, #1
 800a9cc:	3608      	adds	r6, #8
 800a9ce:	e7e5      	b.n	800a99c <_dtoa_r+0x36c>
 800a9d0:	f000 809b 	beq.w	800ab0a <_dtoa_r+0x4da>
 800a9d4:	9b00      	ldr	r3, [sp, #0]
 800a9d6:	4f9d      	ldr	r7, [pc, #628]	; (800ac4c <_dtoa_r+0x61c>)
 800a9d8:	425e      	negs	r6, r3
 800a9da:	4b9b      	ldr	r3, [pc, #620]	; (800ac48 <_dtoa_r+0x618>)
 800a9dc:	f006 020f 	and.w	r2, r6, #15
 800a9e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a9e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9e8:	ec51 0b19 	vmov	r0, r1, d9
 800a9ec:	f7f5 fe14 	bl	8000618 <__aeabi_dmul>
 800a9f0:	1136      	asrs	r6, r6, #4
 800a9f2:	4682      	mov	sl, r0
 800a9f4:	468b      	mov	fp, r1
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	2502      	movs	r5, #2
 800a9fa:	2e00      	cmp	r6, #0
 800a9fc:	d17a      	bne.n	800aaf4 <_dtoa_r+0x4c4>
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d1d3      	bne.n	800a9aa <_dtoa_r+0x37a>
 800aa02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	f000 8082 	beq.w	800ab0e <_dtoa_r+0x4de>
 800aa0a:	4b91      	ldr	r3, [pc, #580]	; (800ac50 <_dtoa_r+0x620>)
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	4650      	mov	r0, sl
 800aa10:	4659      	mov	r1, fp
 800aa12:	f7f6 f873 	bl	8000afc <__aeabi_dcmplt>
 800aa16:	2800      	cmp	r0, #0
 800aa18:	d079      	beq.n	800ab0e <_dtoa_r+0x4de>
 800aa1a:	9b03      	ldr	r3, [sp, #12]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d076      	beq.n	800ab0e <_dtoa_r+0x4de>
 800aa20:	9b02      	ldr	r3, [sp, #8]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	dd36      	ble.n	800aa94 <_dtoa_r+0x464>
 800aa26:	9b00      	ldr	r3, [sp, #0]
 800aa28:	4650      	mov	r0, sl
 800aa2a:	4659      	mov	r1, fp
 800aa2c:	1e5f      	subs	r7, r3, #1
 800aa2e:	2200      	movs	r2, #0
 800aa30:	4b88      	ldr	r3, [pc, #544]	; (800ac54 <_dtoa_r+0x624>)
 800aa32:	f7f5 fdf1 	bl	8000618 <__aeabi_dmul>
 800aa36:	9e02      	ldr	r6, [sp, #8]
 800aa38:	4682      	mov	sl, r0
 800aa3a:	468b      	mov	fp, r1
 800aa3c:	3501      	adds	r5, #1
 800aa3e:	4628      	mov	r0, r5
 800aa40:	f7f5 fd80 	bl	8000544 <__aeabi_i2d>
 800aa44:	4652      	mov	r2, sl
 800aa46:	465b      	mov	r3, fp
 800aa48:	f7f5 fde6 	bl	8000618 <__aeabi_dmul>
 800aa4c:	4b82      	ldr	r3, [pc, #520]	; (800ac58 <_dtoa_r+0x628>)
 800aa4e:	2200      	movs	r2, #0
 800aa50:	f7f5 fc2c 	bl	80002ac <__adddf3>
 800aa54:	46d0      	mov	r8, sl
 800aa56:	46d9      	mov	r9, fp
 800aa58:	4682      	mov	sl, r0
 800aa5a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800aa5e:	2e00      	cmp	r6, #0
 800aa60:	d158      	bne.n	800ab14 <_dtoa_r+0x4e4>
 800aa62:	4b7e      	ldr	r3, [pc, #504]	; (800ac5c <_dtoa_r+0x62c>)
 800aa64:	2200      	movs	r2, #0
 800aa66:	4640      	mov	r0, r8
 800aa68:	4649      	mov	r1, r9
 800aa6a:	f7f5 fc1d 	bl	80002a8 <__aeabi_dsub>
 800aa6e:	4652      	mov	r2, sl
 800aa70:	465b      	mov	r3, fp
 800aa72:	4680      	mov	r8, r0
 800aa74:	4689      	mov	r9, r1
 800aa76:	f7f6 f85f 	bl	8000b38 <__aeabi_dcmpgt>
 800aa7a:	2800      	cmp	r0, #0
 800aa7c:	f040 8295 	bne.w	800afaa <_dtoa_r+0x97a>
 800aa80:	4652      	mov	r2, sl
 800aa82:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800aa86:	4640      	mov	r0, r8
 800aa88:	4649      	mov	r1, r9
 800aa8a:	f7f6 f837 	bl	8000afc <__aeabi_dcmplt>
 800aa8e:	2800      	cmp	r0, #0
 800aa90:	f040 8289 	bne.w	800afa6 <_dtoa_r+0x976>
 800aa94:	ec5b ab19 	vmov	sl, fp, d9
 800aa98:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	f2c0 8148 	blt.w	800ad30 <_dtoa_r+0x700>
 800aaa0:	9a00      	ldr	r2, [sp, #0]
 800aaa2:	2a0e      	cmp	r2, #14
 800aaa4:	f300 8144 	bgt.w	800ad30 <_dtoa_r+0x700>
 800aaa8:	4b67      	ldr	r3, [pc, #412]	; (800ac48 <_dtoa_r+0x618>)
 800aaaa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aaae:	e9d3 8900 	ldrd	r8, r9, [r3]
 800aab2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	f280 80d5 	bge.w	800ac64 <_dtoa_r+0x634>
 800aaba:	9b03      	ldr	r3, [sp, #12]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	f300 80d1 	bgt.w	800ac64 <_dtoa_r+0x634>
 800aac2:	f040 826f 	bne.w	800afa4 <_dtoa_r+0x974>
 800aac6:	4b65      	ldr	r3, [pc, #404]	; (800ac5c <_dtoa_r+0x62c>)
 800aac8:	2200      	movs	r2, #0
 800aaca:	4640      	mov	r0, r8
 800aacc:	4649      	mov	r1, r9
 800aace:	f7f5 fda3 	bl	8000618 <__aeabi_dmul>
 800aad2:	4652      	mov	r2, sl
 800aad4:	465b      	mov	r3, fp
 800aad6:	f7f6 f825 	bl	8000b24 <__aeabi_dcmpge>
 800aada:	9e03      	ldr	r6, [sp, #12]
 800aadc:	4637      	mov	r7, r6
 800aade:	2800      	cmp	r0, #0
 800aae0:	f040 8245 	bne.w	800af6e <_dtoa_r+0x93e>
 800aae4:	9d01      	ldr	r5, [sp, #4]
 800aae6:	2331      	movs	r3, #49	; 0x31
 800aae8:	f805 3b01 	strb.w	r3, [r5], #1
 800aaec:	9b00      	ldr	r3, [sp, #0]
 800aaee:	3301      	adds	r3, #1
 800aaf0:	9300      	str	r3, [sp, #0]
 800aaf2:	e240      	b.n	800af76 <_dtoa_r+0x946>
 800aaf4:	07f2      	lsls	r2, r6, #31
 800aaf6:	d505      	bpl.n	800ab04 <_dtoa_r+0x4d4>
 800aaf8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aafc:	f7f5 fd8c 	bl	8000618 <__aeabi_dmul>
 800ab00:	3501      	adds	r5, #1
 800ab02:	2301      	movs	r3, #1
 800ab04:	1076      	asrs	r6, r6, #1
 800ab06:	3708      	adds	r7, #8
 800ab08:	e777      	b.n	800a9fa <_dtoa_r+0x3ca>
 800ab0a:	2502      	movs	r5, #2
 800ab0c:	e779      	b.n	800aa02 <_dtoa_r+0x3d2>
 800ab0e:	9f00      	ldr	r7, [sp, #0]
 800ab10:	9e03      	ldr	r6, [sp, #12]
 800ab12:	e794      	b.n	800aa3e <_dtoa_r+0x40e>
 800ab14:	9901      	ldr	r1, [sp, #4]
 800ab16:	4b4c      	ldr	r3, [pc, #304]	; (800ac48 <_dtoa_r+0x618>)
 800ab18:	4431      	add	r1, r6
 800ab1a:	910d      	str	r1, [sp, #52]	; 0x34
 800ab1c:	9908      	ldr	r1, [sp, #32]
 800ab1e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ab22:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ab26:	2900      	cmp	r1, #0
 800ab28:	d043      	beq.n	800abb2 <_dtoa_r+0x582>
 800ab2a:	494d      	ldr	r1, [pc, #308]	; (800ac60 <_dtoa_r+0x630>)
 800ab2c:	2000      	movs	r0, #0
 800ab2e:	f7f5 fe9d 	bl	800086c <__aeabi_ddiv>
 800ab32:	4652      	mov	r2, sl
 800ab34:	465b      	mov	r3, fp
 800ab36:	f7f5 fbb7 	bl	80002a8 <__aeabi_dsub>
 800ab3a:	9d01      	ldr	r5, [sp, #4]
 800ab3c:	4682      	mov	sl, r0
 800ab3e:	468b      	mov	fp, r1
 800ab40:	4649      	mov	r1, r9
 800ab42:	4640      	mov	r0, r8
 800ab44:	f7f6 f818 	bl	8000b78 <__aeabi_d2iz>
 800ab48:	4606      	mov	r6, r0
 800ab4a:	f7f5 fcfb 	bl	8000544 <__aeabi_i2d>
 800ab4e:	4602      	mov	r2, r0
 800ab50:	460b      	mov	r3, r1
 800ab52:	4640      	mov	r0, r8
 800ab54:	4649      	mov	r1, r9
 800ab56:	f7f5 fba7 	bl	80002a8 <__aeabi_dsub>
 800ab5a:	3630      	adds	r6, #48	; 0x30
 800ab5c:	f805 6b01 	strb.w	r6, [r5], #1
 800ab60:	4652      	mov	r2, sl
 800ab62:	465b      	mov	r3, fp
 800ab64:	4680      	mov	r8, r0
 800ab66:	4689      	mov	r9, r1
 800ab68:	f7f5 ffc8 	bl	8000afc <__aeabi_dcmplt>
 800ab6c:	2800      	cmp	r0, #0
 800ab6e:	d163      	bne.n	800ac38 <_dtoa_r+0x608>
 800ab70:	4642      	mov	r2, r8
 800ab72:	464b      	mov	r3, r9
 800ab74:	4936      	ldr	r1, [pc, #216]	; (800ac50 <_dtoa_r+0x620>)
 800ab76:	2000      	movs	r0, #0
 800ab78:	f7f5 fb96 	bl	80002a8 <__aeabi_dsub>
 800ab7c:	4652      	mov	r2, sl
 800ab7e:	465b      	mov	r3, fp
 800ab80:	f7f5 ffbc 	bl	8000afc <__aeabi_dcmplt>
 800ab84:	2800      	cmp	r0, #0
 800ab86:	f040 80b5 	bne.w	800acf4 <_dtoa_r+0x6c4>
 800ab8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab8c:	429d      	cmp	r5, r3
 800ab8e:	d081      	beq.n	800aa94 <_dtoa_r+0x464>
 800ab90:	4b30      	ldr	r3, [pc, #192]	; (800ac54 <_dtoa_r+0x624>)
 800ab92:	2200      	movs	r2, #0
 800ab94:	4650      	mov	r0, sl
 800ab96:	4659      	mov	r1, fp
 800ab98:	f7f5 fd3e 	bl	8000618 <__aeabi_dmul>
 800ab9c:	4b2d      	ldr	r3, [pc, #180]	; (800ac54 <_dtoa_r+0x624>)
 800ab9e:	4682      	mov	sl, r0
 800aba0:	468b      	mov	fp, r1
 800aba2:	4640      	mov	r0, r8
 800aba4:	4649      	mov	r1, r9
 800aba6:	2200      	movs	r2, #0
 800aba8:	f7f5 fd36 	bl	8000618 <__aeabi_dmul>
 800abac:	4680      	mov	r8, r0
 800abae:	4689      	mov	r9, r1
 800abb0:	e7c6      	b.n	800ab40 <_dtoa_r+0x510>
 800abb2:	4650      	mov	r0, sl
 800abb4:	4659      	mov	r1, fp
 800abb6:	f7f5 fd2f 	bl	8000618 <__aeabi_dmul>
 800abba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800abbc:	9d01      	ldr	r5, [sp, #4]
 800abbe:	930f      	str	r3, [sp, #60]	; 0x3c
 800abc0:	4682      	mov	sl, r0
 800abc2:	468b      	mov	fp, r1
 800abc4:	4649      	mov	r1, r9
 800abc6:	4640      	mov	r0, r8
 800abc8:	f7f5 ffd6 	bl	8000b78 <__aeabi_d2iz>
 800abcc:	4606      	mov	r6, r0
 800abce:	f7f5 fcb9 	bl	8000544 <__aeabi_i2d>
 800abd2:	3630      	adds	r6, #48	; 0x30
 800abd4:	4602      	mov	r2, r0
 800abd6:	460b      	mov	r3, r1
 800abd8:	4640      	mov	r0, r8
 800abda:	4649      	mov	r1, r9
 800abdc:	f7f5 fb64 	bl	80002a8 <__aeabi_dsub>
 800abe0:	f805 6b01 	strb.w	r6, [r5], #1
 800abe4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800abe6:	429d      	cmp	r5, r3
 800abe8:	4680      	mov	r8, r0
 800abea:	4689      	mov	r9, r1
 800abec:	f04f 0200 	mov.w	r2, #0
 800abf0:	d124      	bne.n	800ac3c <_dtoa_r+0x60c>
 800abf2:	4b1b      	ldr	r3, [pc, #108]	; (800ac60 <_dtoa_r+0x630>)
 800abf4:	4650      	mov	r0, sl
 800abf6:	4659      	mov	r1, fp
 800abf8:	f7f5 fb58 	bl	80002ac <__adddf3>
 800abfc:	4602      	mov	r2, r0
 800abfe:	460b      	mov	r3, r1
 800ac00:	4640      	mov	r0, r8
 800ac02:	4649      	mov	r1, r9
 800ac04:	f7f5 ff98 	bl	8000b38 <__aeabi_dcmpgt>
 800ac08:	2800      	cmp	r0, #0
 800ac0a:	d173      	bne.n	800acf4 <_dtoa_r+0x6c4>
 800ac0c:	4652      	mov	r2, sl
 800ac0e:	465b      	mov	r3, fp
 800ac10:	4913      	ldr	r1, [pc, #76]	; (800ac60 <_dtoa_r+0x630>)
 800ac12:	2000      	movs	r0, #0
 800ac14:	f7f5 fb48 	bl	80002a8 <__aeabi_dsub>
 800ac18:	4602      	mov	r2, r0
 800ac1a:	460b      	mov	r3, r1
 800ac1c:	4640      	mov	r0, r8
 800ac1e:	4649      	mov	r1, r9
 800ac20:	f7f5 ff6c 	bl	8000afc <__aeabi_dcmplt>
 800ac24:	2800      	cmp	r0, #0
 800ac26:	f43f af35 	beq.w	800aa94 <_dtoa_r+0x464>
 800ac2a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ac2c:	1e6b      	subs	r3, r5, #1
 800ac2e:	930f      	str	r3, [sp, #60]	; 0x3c
 800ac30:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ac34:	2b30      	cmp	r3, #48	; 0x30
 800ac36:	d0f8      	beq.n	800ac2a <_dtoa_r+0x5fa>
 800ac38:	9700      	str	r7, [sp, #0]
 800ac3a:	e049      	b.n	800acd0 <_dtoa_r+0x6a0>
 800ac3c:	4b05      	ldr	r3, [pc, #20]	; (800ac54 <_dtoa_r+0x624>)
 800ac3e:	f7f5 fceb 	bl	8000618 <__aeabi_dmul>
 800ac42:	4680      	mov	r8, r0
 800ac44:	4689      	mov	r9, r1
 800ac46:	e7bd      	b.n	800abc4 <_dtoa_r+0x594>
 800ac48:	08012aa8 	.word	0x08012aa8
 800ac4c:	08012a80 	.word	0x08012a80
 800ac50:	3ff00000 	.word	0x3ff00000
 800ac54:	40240000 	.word	0x40240000
 800ac58:	401c0000 	.word	0x401c0000
 800ac5c:	40140000 	.word	0x40140000
 800ac60:	3fe00000 	.word	0x3fe00000
 800ac64:	9d01      	ldr	r5, [sp, #4]
 800ac66:	4656      	mov	r6, sl
 800ac68:	465f      	mov	r7, fp
 800ac6a:	4642      	mov	r2, r8
 800ac6c:	464b      	mov	r3, r9
 800ac6e:	4630      	mov	r0, r6
 800ac70:	4639      	mov	r1, r7
 800ac72:	f7f5 fdfb 	bl	800086c <__aeabi_ddiv>
 800ac76:	f7f5 ff7f 	bl	8000b78 <__aeabi_d2iz>
 800ac7a:	4682      	mov	sl, r0
 800ac7c:	f7f5 fc62 	bl	8000544 <__aeabi_i2d>
 800ac80:	4642      	mov	r2, r8
 800ac82:	464b      	mov	r3, r9
 800ac84:	f7f5 fcc8 	bl	8000618 <__aeabi_dmul>
 800ac88:	4602      	mov	r2, r0
 800ac8a:	460b      	mov	r3, r1
 800ac8c:	4630      	mov	r0, r6
 800ac8e:	4639      	mov	r1, r7
 800ac90:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800ac94:	f7f5 fb08 	bl	80002a8 <__aeabi_dsub>
 800ac98:	f805 6b01 	strb.w	r6, [r5], #1
 800ac9c:	9e01      	ldr	r6, [sp, #4]
 800ac9e:	9f03      	ldr	r7, [sp, #12]
 800aca0:	1bae      	subs	r6, r5, r6
 800aca2:	42b7      	cmp	r7, r6
 800aca4:	4602      	mov	r2, r0
 800aca6:	460b      	mov	r3, r1
 800aca8:	d135      	bne.n	800ad16 <_dtoa_r+0x6e6>
 800acaa:	f7f5 faff 	bl	80002ac <__adddf3>
 800acae:	4642      	mov	r2, r8
 800acb0:	464b      	mov	r3, r9
 800acb2:	4606      	mov	r6, r0
 800acb4:	460f      	mov	r7, r1
 800acb6:	f7f5 ff3f 	bl	8000b38 <__aeabi_dcmpgt>
 800acba:	b9d0      	cbnz	r0, 800acf2 <_dtoa_r+0x6c2>
 800acbc:	4642      	mov	r2, r8
 800acbe:	464b      	mov	r3, r9
 800acc0:	4630      	mov	r0, r6
 800acc2:	4639      	mov	r1, r7
 800acc4:	f7f5 ff10 	bl	8000ae8 <__aeabi_dcmpeq>
 800acc8:	b110      	cbz	r0, 800acd0 <_dtoa_r+0x6a0>
 800acca:	f01a 0f01 	tst.w	sl, #1
 800acce:	d110      	bne.n	800acf2 <_dtoa_r+0x6c2>
 800acd0:	4620      	mov	r0, r4
 800acd2:	ee18 1a10 	vmov	r1, s16
 800acd6:	f000 fb1d 	bl	800b314 <_Bfree>
 800acda:	2300      	movs	r3, #0
 800acdc:	9800      	ldr	r0, [sp, #0]
 800acde:	702b      	strb	r3, [r5, #0]
 800ace0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ace2:	3001      	adds	r0, #1
 800ace4:	6018      	str	r0, [r3, #0]
 800ace6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ace8:	2b00      	cmp	r3, #0
 800acea:	f43f acf1 	beq.w	800a6d0 <_dtoa_r+0xa0>
 800acee:	601d      	str	r5, [r3, #0]
 800acf0:	e4ee      	b.n	800a6d0 <_dtoa_r+0xa0>
 800acf2:	9f00      	ldr	r7, [sp, #0]
 800acf4:	462b      	mov	r3, r5
 800acf6:	461d      	mov	r5, r3
 800acf8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800acfc:	2a39      	cmp	r2, #57	; 0x39
 800acfe:	d106      	bne.n	800ad0e <_dtoa_r+0x6de>
 800ad00:	9a01      	ldr	r2, [sp, #4]
 800ad02:	429a      	cmp	r2, r3
 800ad04:	d1f7      	bne.n	800acf6 <_dtoa_r+0x6c6>
 800ad06:	9901      	ldr	r1, [sp, #4]
 800ad08:	2230      	movs	r2, #48	; 0x30
 800ad0a:	3701      	adds	r7, #1
 800ad0c:	700a      	strb	r2, [r1, #0]
 800ad0e:	781a      	ldrb	r2, [r3, #0]
 800ad10:	3201      	adds	r2, #1
 800ad12:	701a      	strb	r2, [r3, #0]
 800ad14:	e790      	b.n	800ac38 <_dtoa_r+0x608>
 800ad16:	4ba6      	ldr	r3, [pc, #664]	; (800afb0 <_dtoa_r+0x980>)
 800ad18:	2200      	movs	r2, #0
 800ad1a:	f7f5 fc7d 	bl	8000618 <__aeabi_dmul>
 800ad1e:	2200      	movs	r2, #0
 800ad20:	2300      	movs	r3, #0
 800ad22:	4606      	mov	r6, r0
 800ad24:	460f      	mov	r7, r1
 800ad26:	f7f5 fedf 	bl	8000ae8 <__aeabi_dcmpeq>
 800ad2a:	2800      	cmp	r0, #0
 800ad2c:	d09d      	beq.n	800ac6a <_dtoa_r+0x63a>
 800ad2e:	e7cf      	b.n	800acd0 <_dtoa_r+0x6a0>
 800ad30:	9a08      	ldr	r2, [sp, #32]
 800ad32:	2a00      	cmp	r2, #0
 800ad34:	f000 80d7 	beq.w	800aee6 <_dtoa_r+0x8b6>
 800ad38:	9a06      	ldr	r2, [sp, #24]
 800ad3a:	2a01      	cmp	r2, #1
 800ad3c:	f300 80ba 	bgt.w	800aeb4 <_dtoa_r+0x884>
 800ad40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ad42:	2a00      	cmp	r2, #0
 800ad44:	f000 80b2 	beq.w	800aeac <_dtoa_r+0x87c>
 800ad48:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ad4c:	9e07      	ldr	r6, [sp, #28]
 800ad4e:	9d04      	ldr	r5, [sp, #16]
 800ad50:	9a04      	ldr	r2, [sp, #16]
 800ad52:	441a      	add	r2, r3
 800ad54:	9204      	str	r2, [sp, #16]
 800ad56:	9a05      	ldr	r2, [sp, #20]
 800ad58:	2101      	movs	r1, #1
 800ad5a:	441a      	add	r2, r3
 800ad5c:	4620      	mov	r0, r4
 800ad5e:	9205      	str	r2, [sp, #20]
 800ad60:	f000 fb90 	bl	800b484 <__i2b>
 800ad64:	4607      	mov	r7, r0
 800ad66:	2d00      	cmp	r5, #0
 800ad68:	dd0c      	ble.n	800ad84 <_dtoa_r+0x754>
 800ad6a:	9b05      	ldr	r3, [sp, #20]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	dd09      	ble.n	800ad84 <_dtoa_r+0x754>
 800ad70:	42ab      	cmp	r3, r5
 800ad72:	9a04      	ldr	r2, [sp, #16]
 800ad74:	bfa8      	it	ge
 800ad76:	462b      	movge	r3, r5
 800ad78:	1ad2      	subs	r2, r2, r3
 800ad7a:	9204      	str	r2, [sp, #16]
 800ad7c:	9a05      	ldr	r2, [sp, #20]
 800ad7e:	1aed      	subs	r5, r5, r3
 800ad80:	1ad3      	subs	r3, r2, r3
 800ad82:	9305      	str	r3, [sp, #20]
 800ad84:	9b07      	ldr	r3, [sp, #28]
 800ad86:	b31b      	cbz	r3, 800add0 <_dtoa_r+0x7a0>
 800ad88:	9b08      	ldr	r3, [sp, #32]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	f000 80af 	beq.w	800aeee <_dtoa_r+0x8be>
 800ad90:	2e00      	cmp	r6, #0
 800ad92:	dd13      	ble.n	800adbc <_dtoa_r+0x78c>
 800ad94:	4639      	mov	r1, r7
 800ad96:	4632      	mov	r2, r6
 800ad98:	4620      	mov	r0, r4
 800ad9a:	f000 fc33 	bl	800b604 <__pow5mult>
 800ad9e:	ee18 2a10 	vmov	r2, s16
 800ada2:	4601      	mov	r1, r0
 800ada4:	4607      	mov	r7, r0
 800ada6:	4620      	mov	r0, r4
 800ada8:	f000 fb82 	bl	800b4b0 <__multiply>
 800adac:	ee18 1a10 	vmov	r1, s16
 800adb0:	4680      	mov	r8, r0
 800adb2:	4620      	mov	r0, r4
 800adb4:	f000 faae 	bl	800b314 <_Bfree>
 800adb8:	ee08 8a10 	vmov	s16, r8
 800adbc:	9b07      	ldr	r3, [sp, #28]
 800adbe:	1b9a      	subs	r2, r3, r6
 800adc0:	d006      	beq.n	800add0 <_dtoa_r+0x7a0>
 800adc2:	ee18 1a10 	vmov	r1, s16
 800adc6:	4620      	mov	r0, r4
 800adc8:	f000 fc1c 	bl	800b604 <__pow5mult>
 800adcc:	ee08 0a10 	vmov	s16, r0
 800add0:	2101      	movs	r1, #1
 800add2:	4620      	mov	r0, r4
 800add4:	f000 fb56 	bl	800b484 <__i2b>
 800add8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800adda:	2b00      	cmp	r3, #0
 800addc:	4606      	mov	r6, r0
 800adde:	f340 8088 	ble.w	800aef2 <_dtoa_r+0x8c2>
 800ade2:	461a      	mov	r2, r3
 800ade4:	4601      	mov	r1, r0
 800ade6:	4620      	mov	r0, r4
 800ade8:	f000 fc0c 	bl	800b604 <__pow5mult>
 800adec:	9b06      	ldr	r3, [sp, #24]
 800adee:	2b01      	cmp	r3, #1
 800adf0:	4606      	mov	r6, r0
 800adf2:	f340 8081 	ble.w	800aef8 <_dtoa_r+0x8c8>
 800adf6:	f04f 0800 	mov.w	r8, #0
 800adfa:	6933      	ldr	r3, [r6, #16]
 800adfc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ae00:	6918      	ldr	r0, [r3, #16]
 800ae02:	f000 faef 	bl	800b3e4 <__hi0bits>
 800ae06:	f1c0 0020 	rsb	r0, r0, #32
 800ae0a:	9b05      	ldr	r3, [sp, #20]
 800ae0c:	4418      	add	r0, r3
 800ae0e:	f010 001f 	ands.w	r0, r0, #31
 800ae12:	f000 8092 	beq.w	800af3a <_dtoa_r+0x90a>
 800ae16:	f1c0 0320 	rsb	r3, r0, #32
 800ae1a:	2b04      	cmp	r3, #4
 800ae1c:	f340 808a 	ble.w	800af34 <_dtoa_r+0x904>
 800ae20:	f1c0 001c 	rsb	r0, r0, #28
 800ae24:	9b04      	ldr	r3, [sp, #16]
 800ae26:	4403      	add	r3, r0
 800ae28:	9304      	str	r3, [sp, #16]
 800ae2a:	9b05      	ldr	r3, [sp, #20]
 800ae2c:	4403      	add	r3, r0
 800ae2e:	4405      	add	r5, r0
 800ae30:	9305      	str	r3, [sp, #20]
 800ae32:	9b04      	ldr	r3, [sp, #16]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	dd07      	ble.n	800ae48 <_dtoa_r+0x818>
 800ae38:	ee18 1a10 	vmov	r1, s16
 800ae3c:	461a      	mov	r2, r3
 800ae3e:	4620      	mov	r0, r4
 800ae40:	f000 fc3a 	bl	800b6b8 <__lshift>
 800ae44:	ee08 0a10 	vmov	s16, r0
 800ae48:	9b05      	ldr	r3, [sp, #20]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	dd05      	ble.n	800ae5a <_dtoa_r+0x82a>
 800ae4e:	4631      	mov	r1, r6
 800ae50:	461a      	mov	r2, r3
 800ae52:	4620      	mov	r0, r4
 800ae54:	f000 fc30 	bl	800b6b8 <__lshift>
 800ae58:	4606      	mov	r6, r0
 800ae5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d06e      	beq.n	800af3e <_dtoa_r+0x90e>
 800ae60:	ee18 0a10 	vmov	r0, s16
 800ae64:	4631      	mov	r1, r6
 800ae66:	f000 fc97 	bl	800b798 <__mcmp>
 800ae6a:	2800      	cmp	r0, #0
 800ae6c:	da67      	bge.n	800af3e <_dtoa_r+0x90e>
 800ae6e:	9b00      	ldr	r3, [sp, #0]
 800ae70:	3b01      	subs	r3, #1
 800ae72:	ee18 1a10 	vmov	r1, s16
 800ae76:	9300      	str	r3, [sp, #0]
 800ae78:	220a      	movs	r2, #10
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	4620      	mov	r0, r4
 800ae7e:	f000 fa6b 	bl	800b358 <__multadd>
 800ae82:	9b08      	ldr	r3, [sp, #32]
 800ae84:	ee08 0a10 	vmov	s16, r0
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	f000 81b1 	beq.w	800b1f0 <_dtoa_r+0xbc0>
 800ae8e:	2300      	movs	r3, #0
 800ae90:	4639      	mov	r1, r7
 800ae92:	220a      	movs	r2, #10
 800ae94:	4620      	mov	r0, r4
 800ae96:	f000 fa5f 	bl	800b358 <__multadd>
 800ae9a:	9b02      	ldr	r3, [sp, #8]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	4607      	mov	r7, r0
 800aea0:	f300 808e 	bgt.w	800afc0 <_dtoa_r+0x990>
 800aea4:	9b06      	ldr	r3, [sp, #24]
 800aea6:	2b02      	cmp	r3, #2
 800aea8:	dc51      	bgt.n	800af4e <_dtoa_r+0x91e>
 800aeaa:	e089      	b.n	800afc0 <_dtoa_r+0x990>
 800aeac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aeae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800aeb2:	e74b      	b.n	800ad4c <_dtoa_r+0x71c>
 800aeb4:	9b03      	ldr	r3, [sp, #12]
 800aeb6:	1e5e      	subs	r6, r3, #1
 800aeb8:	9b07      	ldr	r3, [sp, #28]
 800aeba:	42b3      	cmp	r3, r6
 800aebc:	bfbf      	itttt	lt
 800aebe:	9b07      	ldrlt	r3, [sp, #28]
 800aec0:	9607      	strlt	r6, [sp, #28]
 800aec2:	1af2      	sublt	r2, r6, r3
 800aec4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800aec6:	bfb6      	itet	lt
 800aec8:	189b      	addlt	r3, r3, r2
 800aeca:	1b9e      	subge	r6, r3, r6
 800aecc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800aece:	9b03      	ldr	r3, [sp, #12]
 800aed0:	bfb8      	it	lt
 800aed2:	2600      	movlt	r6, #0
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	bfb7      	itett	lt
 800aed8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800aedc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800aee0:	1a9d      	sublt	r5, r3, r2
 800aee2:	2300      	movlt	r3, #0
 800aee4:	e734      	b.n	800ad50 <_dtoa_r+0x720>
 800aee6:	9e07      	ldr	r6, [sp, #28]
 800aee8:	9d04      	ldr	r5, [sp, #16]
 800aeea:	9f08      	ldr	r7, [sp, #32]
 800aeec:	e73b      	b.n	800ad66 <_dtoa_r+0x736>
 800aeee:	9a07      	ldr	r2, [sp, #28]
 800aef0:	e767      	b.n	800adc2 <_dtoa_r+0x792>
 800aef2:	9b06      	ldr	r3, [sp, #24]
 800aef4:	2b01      	cmp	r3, #1
 800aef6:	dc18      	bgt.n	800af2a <_dtoa_r+0x8fa>
 800aef8:	f1ba 0f00 	cmp.w	sl, #0
 800aefc:	d115      	bne.n	800af2a <_dtoa_r+0x8fa>
 800aefe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800af02:	b993      	cbnz	r3, 800af2a <_dtoa_r+0x8fa>
 800af04:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800af08:	0d1b      	lsrs	r3, r3, #20
 800af0a:	051b      	lsls	r3, r3, #20
 800af0c:	b183      	cbz	r3, 800af30 <_dtoa_r+0x900>
 800af0e:	9b04      	ldr	r3, [sp, #16]
 800af10:	3301      	adds	r3, #1
 800af12:	9304      	str	r3, [sp, #16]
 800af14:	9b05      	ldr	r3, [sp, #20]
 800af16:	3301      	adds	r3, #1
 800af18:	9305      	str	r3, [sp, #20]
 800af1a:	f04f 0801 	mov.w	r8, #1
 800af1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af20:	2b00      	cmp	r3, #0
 800af22:	f47f af6a 	bne.w	800adfa <_dtoa_r+0x7ca>
 800af26:	2001      	movs	r0, #1
 800af28:	e76f      	b.n	800ae0a <_dtoa_r+0x7da>
 800af2a:	f04f 0800 	mov.w	r8, #0
 800af2e:	e7f6      	b.n	800af1e <_dtoa_r+0x8ee>
 800af30:	4698      	mov	r8, r3
 800af32:	e7f4      	b.n	800af1e <_dtoa_r+0x8ee>
 800af34:	f43f af7d 	beq.w	800ae32 <_dtoa_r+0x802>
 800af38:	4618      	mov	r0, r3
 800af3a:	301c      	adds	r0, #28
 800af3c:	e772      	b.n	800ae24 <_dtoa_r+0x7f4>
 800af3e:	9b03      	ldr	r3, [sp, #12]
 800af40:	2b00      	cmp	r3, #0
 800af42:	dc37      	bgt.n	800afb4 <_dtoa_r+0x984>
 800af44:	9b06      	ldr	r3, [sp, #24]
 800af46:	2b02      	cmp	r3, #2
 800af48:	dd34      	ble.n	800afb4 <_dtoa_r+0x984>
 800af4a:	9b03      	ldr	r3, [sp, #12]
 800af4c:	9302      	str	r3, [sp, #8]
 800af4e:	9b02      	ldr	r3, [sp, #8]
 800af50:	b96b      	cbnz	r3, 800af6e <_dtoa_r+0x93e>
 800af52:	4631      	mov	r1, r6
 800af54:	2205      	movs	r2, #5
 800af56:	4620      	mov	r0, r4
 800af58:	f000 f9fe 	bl	800b358 <__multadd>
 800af5c:	4601      	mov	r1, r0
 800af5e:	4606      	mov	r6, r0
 800af60:	ee18 0a10 	vmov	r0, s16
 800af64:	f000 fc18 	bl	800b798 <__mcmp>
 800af68:	2800      	cmp	r0, #0
 800af6a:	f73f adbb 	bgt.w	800aae4 <_dtoa_r+0x4b4>
 800af6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af70:	9d01      	ldr	r5, [sp, #4]
 800af72:	43db      	mvns	r3, r3
 800af74:	9300      	str	r3, [sp, #0]
 800af76:	f04f 0800 	mov.w	r8, #0
 800af7a:	4631      	mov	r1, r6
 800af7c:	4620      	mov	r0, r4
 800af7e:	f000 f9c9 	bl	800b314 <_Bfree>
 800af82:	2f00      	cmp	r7, #0
 800af84:	f43f aea4 	beq.w	800acd0 <_dtoa_r+0x6a0>
 800af88:	f1b8 0f00 	cmp.w	r8, #0
 800af8c:	d005      	beq.n	800af9a <_dtoa_r+0x96a>
 800af8e:	45b8      	cmp	r8, r7
 800af90:	d003      	beq.n	800af9a <_dtoa_r+0x96a>
 800af92:	4641      	mov	r1, r8
 800af94:	4620      	mov	r0, r4
 800af96:	f000 f9bd 	bl	800b314 <_Bfree>
 800af9a:	4639      	mov	r1, r7
 800af9c:	4620      	mov	r0, r4
 800af9e:	f000 f9b9 	bl	800b314 <_Bfree>
 800afa2:	e695      	b.n	800acd0 <_dtoa_r+0x6a0>
 800afa4:	2600      	movs	r6, #0
 800afa6:	4637      	mov	r7, r6
 800afa8:	e7e1      	b.n	800af6e <_dtoa_r+0x93e>
 800afaa:	9700      	str	r7, [sp, #0]
 800afac:	4637      	mov	r7, r6
 800afae:	e599      	b.n	800aae4 <_dtoa_r+0x4b4>
 800afb0:	40240000 	.word	0x40240000
 800afb4:	9b08      	ldr	r3, [sp, #32]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	f000 80ca 	beq.w	800b150 <_dtoa_r+0xb20>
 800afbc:	9b03      	ldr	r3, [sp, #12]
 800afbe:	9302      	str	r3, [sp, #8]
 800afc0:	2d00      	cmp	r5, #0
 800afc2:	dd05      	ble.n	800afd0 <_dtoa_r+0x9a0>
 800afc4:	4639      	mov	r1, r7
 800afc6:	462a      	mov	r2, r5
 800afc8:	4620      	mov	r0, r4
 800afca:	f000 fb75 	bl	800b6b8 <__lshift>
 800afce:	4607      	mov	r7, r0
 800afd0:	f1b8 0f00 	cmp.w	r8, #0
 800afd4:	d05b      	beq.n	800b08e <_dtoa_r+0xa5e>
 800afd6:	6879      	ldr	r1, [r7, #4]
 800afd8:	4620      	mov	r0, r4
 800afda:	f000 f95b 	bl	800b294 <_Balloc>
 800afde:	4605      	mov	r5, r0
 800afe0:	b928      	cbnz	r0, 800afee <_dtoa_r+0x9be>
 800afe2:	4b87      	ldr	r3, [pc, #540]	; (800b200 <_dtoa_r+0xbd0>)
 800afe4:	4602      	mov	r2, r0
 800afe6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800afea:	f7ff bb3b 	b.w	800a664 <_dtoa_r+0x34>
 800afee:	693a      	ldr	r2, [r7, #16]
 800aff0:	3202      	adds	r2, #2
 800aff2:	0092      	lsls	r2, r2, #2
 800aff4:	f107 010c 	add.w	r1, r7, #12
 800aff8:	300c      	adds	r0, #12
 800affa:	f7fe fadf 	bl	80095bc <memcpy>
 800affe:	2201      	movs	r2, #1
 800b000:	4629      	mov	r1, r5
 800b002:	4620      	mov	r0, r4
 800b004:	f000 fb58 	bl	800b6b8 <__lshift>
 800b008:	9b01      	ldr	r3, [sp, #4]
 800b00a:	f103 0901 	add.w	r9, r3, #1
 800b00e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800b012:	4413      	add	r3, r2
 800b014:	9305      	str	r3, [sp, #20]
 800b016:	f00a 0301 	and.w	r3, sl, #1
 800b01a:	46b8      	mov	r8, r7
 800b01c:	9304      	str	r3, [sp, #16]
 800b01e:	4607      	mov	r7, r0
 800b020:	4631      	mov	r1, r6
 800b022:	ee18 0a10 	vmov	r0, s16
 800b026:	f7ff fa77 	bl	800a518 <quorem>
 800b02a:	4641      	mov	r1, r8
 800b02c:	9002      	str	r0, [sp, #8]
 800b02e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b032:	ee18 0a10 	vmov	r0, s16
 800b036:	f000 fbaf 	bl	800b798 <__mcmp>
 800b03a:	463a      	mov	r2, r7
 800b03c:	9003      	str	r0, [sp, #12]
 800b03e:	4631      	mov	r1, r6
 800b040:	4620      	mov	r0, r4
 800b042:	f000 fbc5 	bl	800b7d0 <__mdiff>
 800b046:	68c2      	ldr	r2, [r0, #12]
 800b048:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800b04c:	4605      	mov	r5, r0
 800b04e:	bb02      	cbnz	r2, 800b092 <_dtoa_r+0xa62>
 800b050:	4601      	mov	r1, r0
 800b052:	ee18 0a10 	vmov	r0, s16
 800b056:	f000 fb9f 	bl	800b798 <__mcmp>
 800b05a:	4602      	mov	r2, r0
 800b05c:	4629      	mov	r1, r5
 800b05e:	4620      	mov	r0, r4
 800b060:	9207      	str	r2, [sp, #28]
 800b062:	f000 f957 	bl	800b314 <_Bfree>
 800b066:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b06a:	ea43 0102 	orr.w	r1, r3, r2
 800b06e:	9b04      	ldr	r3, [sp, #16]
 800b070:	430b      	orrs	r3, r1
 800b072:	464d      	mov	r5, r9
 800b074:	d10f      	bne.n	800b096 <_dtoa_r+0xa66>
 800b076:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b07a:	d02a      	beq.n	800b0d2 <_dtoa_r+0xaa2>
 800b07c:	9b03      	ldr	r3, [sp, #12]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	dd02      	ble.n	800b088 <_dtoa_r+0xa58>
 800b082:	9b02      	ldr	r3, [sp, #8]
 800b084:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b088:	f88b a000 	strb.w	sl, [fp]
 800b08c:	e775      	b.n	800af7a <_dtoa_r+0x94a>
 800b08e:	4638      	mov	r0, r7
 800b090:	e7ba      	b.n	800b008 <_dtoa_r+0x9d8>
 800b092:	2201      	movs	r2, #1
 800b094:	e7e2      	b.n	800b05c <_dtoa_r+0xa2c>
 800b096:	9b03      	ldr	r3, [sp, #12]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	db04      	blt.n	800b0a6 <_dtoa_r+0xa76>
 800b09c:	9906      	ldr	r1, [sp, #24]
 800b09e:	430b      	orrs	r3, r1
 800b0a0:	9904      	ldr	r1, [sp, #16]
 800b0a2:	430b      	orrs	r3, r1
 800b0a4:	d122      	bne.n	800b0ec <_dtoa_r+0xabc>
 800b0a6:	2a00      	cmp	r2, #0
 800b0a8:	ddee      	ble.n	800b088 <_dtoa_r+0xa58>
 800b0aa:	ee18 1a10 	vmov	r1, s16
 800b0ae:	2201      	movs	r2, #1
 800b0b0:	4620      	mov	r0, r4
 800b0b2:	f000 fb01 	bl	800b6b8 <__lshift>
 800b0b6:	4631      	mov	r1, r6
 800b0b8:	ee08 0a10 	vmov	s16, r0
 800b0bc:	f000 fb6c 	bl	800b798 <__mcmp>
 800b0c0:	2800      	cmp	r0, #0
 800b0c2:	dc03      	bgt.n	800b0cc <_dtoa_r+0xa9c>
 800b0c4:	d1e0      	bne.n	800b088 <_dtoa_r+0xa58>
 800b0c6:	f01a 0f01 	tst.w	sl, #1
 800b0ca:	d0dd      	beq.n	800b088 <_dtoa_r+0xa58>
 800b0cc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b0d0:	d1d7      	bne.n	800b082 <_dtoa_r+0xa52>
 800b0d2:	2339      	movs	r3, #57	; 0x39
 800b0d4:	f88b 3000 	strb.w	r3, [fp]
 800b0d8:	462b      	mov	r3, r5
 800b0da:	461d      	mov	r5, r3
 800b0dc:	3b01      	subs	r3, #1
 800b0de:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b0e2:	2a39      	cmp	r2, #57	; 0x39
 800b0e4:	d071      	beq.n	800b1ca <_dtoa_r+0xb9a>
 800b0e6:	3201      	adds	r2, #1
 800b0e8:	701a      	strb	r2, [r3, #0]
 800b0ea:	e746      	b.n	800af7a <_dtoa_r+0x94a>
 800b0ec:	2a00      	cmp	r2, #0
 800b0ee:	dd07      	ble.n	800b100 <_dtoa_r+0xad0>
 800b0f0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b0f4:	d0ed      	beq.n	800b0d2 <_dtoa_r+0xaa2>
 800b0f6:	f10a 0301 	add.w	r3, sl, #1
 800b0fa:	f88b 3000 	strb.w	r3, [fp]
 800b0fe:	e73c      	b.n	800af7a <_dtoa_r+0x94a>
 800b100:	9b05      	ldr	r3, [sp, #20]
 800b102:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b106:	4599      	cmp	r9, r3
 800b108:	d047      	beq.n	800b19a <_dtoa_r+0xb6a>
 800b10a:	ee18 1a10 	vmov	r1, s16
 800b10e:	2300      	movs	r3, #0
 800b110:	220a      	movs	r2, #10
 800b112:	4620      	mov	r0, r4
 800b114:	f000 f920 	bl	800b358 <__multadd>
 800b118:	45b8      	cmp	r8, r7
 800b11a:	ee08 0a10 	vmov	s16, r0
 800b11e:	f04f 0300 	mov.w	r3, #0
 800b122:	f04f 020a 	mov.w	r2, #10
 800b126:	4641      	mov	r1, r8
 800b128:	4620      	mov	r0, r4
 800b12a:	d106      	bne.n	800b13a <_dtoa_r+0xb0a>
 800b12c:	f000 f914 	bl	800b358 <__multadd>
 800b130:	4680      	mov	r8, r0
 800b132:	4607      	mov	r7, r0
 800b134:	f109 0901 	add.w	r9, r9, #1
 800b138:	e772      	b.n	800b020 <_dtoa_r+0x9f0>
 800b13a:	f000 f90d 	bl	800b358 <__multadd>
 800b13e:	4639      	mov	r1, r7
 800b140:	4680      	mov	r8, r0
 800b142:	2300      	movs	r3, #0
 800b144:	220a      	movs	r2, #10
 800b146:	4620      	mov	r0, r4
 800b148:	f000 f906 	bl	800b358 <__multadd>
 800b14c:	4607      	mov	r7, r0
 800b14e:	e7f1      	b.n	800b134 <_dtoa_r+0xb04>
 800b150:	9b03      	ldr	r3, [sp, #12]
 800b152:	9302      	str	r3, [sp, #8]
 800b154:	9d01      	ldr	r5, [sp, #4]
 800b156:	ee18 0a10 	vmov	r0, s16
 800b15a:	4631      	mov	r1, r6
 800b15c:	f7ff f9dc 	bl	800a518 <quorem>
 800b160:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b164:	9b01      	ldr	r3, [sp, #4]
 800b166:	f805 ab01 	strb.w	sl, [r5], #1
 800b16a:	1aea      	subs	r2, r5, r3
 800b16c:	9b02      	ldr	r3, [sp, #8]
 800b16e:	4293      	cmp	r3, r2
 800b170:	dd09      	ble.n	800b186 <_dtoa_r+0xb56>
 800b172:	ee18 1a10 	vmov	r1, s16
 800b176:	2300      	movs	r3, #0
 800b178:	220a      	movs	r2, #10
 800b17a:	4620      	mov	r0, r4
 800b17c:	f000 f8ec 	bl	800b358 <__multadd>
 800b180:	ee08 0a10 	vmov	s16, r0
 800b184:	e7e7      	b.n	800b156 <_dtoa_r+0xb26>
 800b186:	9b02      	ldr	r3, [sp, #8]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	bfc8      	it	gt
 800b18c:	461d      	movgt	r5, r3
 800b18e:	9b01      	ldr	r3, [sp, #4]
 800b190:	bfd8      	it	le
 800b192:	2501      	movle	r5, #1
 800b194:	441d      	add	r5, r3
 800b196:	f04f 0800 	mov.w	r8, #0
 800b19a:	ee18 1a10 	vmov	r1, s16
 800b19e:	2201      	movs	r2, #1
 800b1a0:	4620      	mov	r0, r4
 800b1a2:	f000 fa89 	bl	800b6b8 <__lshift>
 800b1a6:	4631      	mov	r1, r6
 800b1a8:	ee08 0a10 	vmov	s16, r0
 800b1ac:	f000 faf4 	bl	800b798 <__mcmp>
 800b1b0:	2800      	cmp	r0, #0
 800b1b2:	dc91      	bgt.n	800b0d8 <_dtoa_r+0xaa8>
 800b1b4:	d102      	bne.n	800b1bc <_dtoa_r+0xb8c>
 800b1b6:	f01a 0f01 	tst.w	sl, #1
 800b1ba:	d18d      	bne.n	800b0d8 <_dtoa_r+0xaa8>
 800b1bc:	462b      	mov	r3, r5
 800b1be:	461d      	mov	r5, r3
 800b1c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b1c4:	2a30      	cmp	r2, #48	; 0x30
 800b1c6:	d0fa      	beq.n	800b1be <_dtoa_r+0xb8e>
 800b1c8:	e6d7      	b.n	800af7a <_dtoa_r+0x94a>
 800b1ca:	9a01      	ldr	r2, [sp, #4]
 800b1cc:	429a      	cmp	r2, r3
 800b1ce:	d184      	bne.n	800b0da <_dtoa_r+0xaaa>
 800b1d0:	9b00      	ldr	r3, [sp, #0]
 800b1d2:	3301      	adds	r3, #1
 800b1d4:	9300      	str	r3, [sp, #0]
 800b1d6:	2331      	movs	r3, #49	; 0x31
 800b1d8:	7013      	strb	r3, [r2, #0]
 800b1da:	e6ce      	b.n	800af7a <_dtoa_r+0x94a>
 800b1dc:	4b09      	ldr	r3, [pc, #36]	; (800b204 <_dtoa_r+0xbd4>)
 800b1de:	f7ff ba95 	b.w	800a70c <_dtoa_r+0xdc>
 800b1e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	f47f aa6e 	bne.w	800a6c6 <_dtoa_r+0x96>
 800b1ea:	4b07      	ldr	r3, [pc, #28]	; (800b208 <_dtoa_r+0xbd8>)
 800b1ec:	f7ff ba8e 	b.w	800a70c <_dtoa_r+0xdc>
 800b1f0:	9b02      	ldr	r3, [sp, #8]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	dcae      	bgt.n	800b154 <_dtoa_r+0xb24>
 800b1f6:	9b06      	ldr	r3, [sp, #24]
 800b1f8:	2b02      	cmp	r3, #2
 800b1fa:	f73f aea8 	bgt.w	800af4e <_dtoa_r+0x91e>
 800b1fe:	e7a9      	b.n	800b154 <_dtoa_r+0xb24>
 800b200:	08012a0d 	.word	0x08012a0d
 800b204:	08012b91 	.word	0x08012b91
 800b208:	0801298e 	.word	0x0801298e

0800b20c <_fstat_r>:
 800b20c:	b538      	push	{r3, r4, r5, lr}
 800b20e:	4d07      	ldr	r5, [pc, #28]	; (800b22c <_fstat_r+0x20>)
 800b210:	2300      	movs	r3, #0
 800b212:	4604      	mov	r4, r0
 800b214:	4608      	mov	r0, r1
 800b216:	4611      	mov	r1, r2
 800b218:	602b      	str	r3, [r5, #0]
 800b21a:	f7f7 fa14 	bl	8002646 <_fstat>
 800b21e:	1c43      	adds	r3, r0, #1
 800b220:	d102      	bne.n	800b228 <_fstat_r+0x1c>
 800b222:	682b      	ldr	r3, [r5, #0]
 800b224:	b103      	cbz	r3, 800b228 <_fstat_r+0x1c>
 800b226:	6023      	str	r3, [r4, #0]
 800b228:	bd38      	pop	{r3, r4, r5, pc}
 800b22a:	bf00      	nop
 800b22c:	200004c4 	.word	0x200004c4

0800b230 <_isatty_r>:
 800b230:	b538      	push	{r3, r4, r5, lr}
 800b232:	4d06      	ldr	r5, [pc, #24]	; (800b24c <_isatty_r+0x1c>)
 800b234:	2300      	movs	r3, #0
 800b236:	4604      	mov	r4, r0
 800b238:	4608      	mov	r0, r1
 800b23a:	602b      	str	r3, [r5, #0]
 800b23c:	f7f7 fa13 	bl	8002666 <_isatty>
 800b240:	1c43      	adds	r3, r0, #1
 800b242:	d102      	bne.n	800b24a <_isatty_r+0x1a>
 800b244:	682b      	ldr	r3, [r5, #0]
 800b246:	b103      	cbz	r3, 800b24a <_isatty_r+0x1a>
 800b248:	6023      	str	r3, [r4, #0]
 800b24a:	bd38      	pop	{r3, r4, r5, pc}
 800b24c:	200004c4 	.word	0x200004c4

0800b250 <_localeconv_r>:
 800b250:	4800      	ldr	r0, [pc, #0]	; (800b254 <_localeconv_r+0x4>)
 800b252:	4770      	bx	lr
 800b254:	20000168 	.word	0x20000168

0800b258 <_lseek_r>:
 800b258:	b538      	push	{r3, r4, r5, lr}
 800b25a:	4d07      	ldr	r5, [pc, #28]	; (800b278 <_lseek_r+0x20>)
 800b25c:	4604      	mov	r4, r0
 800b25e:	4608      	mov	r0, r1
 800b260:	4611      	mov	r1, r2
 800b262:	2200      	movs	r2, #0
 800b264:	602a      	str	r2, [r5, #0]
 800b266:	461a      	mov	r2, r3
 800b268:	f7f7 fa08 	bl	800267c <_lseek>
 800b26c:	1c43      	adds	r3, r0, #1
 800b26e:	d102      	bne.n	800b276 <_lseek_r+0x1e>
 800b270:	682b      	ldr	r3, [r5, #0]
 800b272:	b103      	cbz	r3, 800b276 <_lseek_r+0x1e>
 800b274:	6023      	str	r3, [r4, #0]
 800b276:	bd38      	pop	{r3, r4, r5, pc}
 800b278:	200004c4 	.word	0x200004c4

0800b27c <__malloc_lock>:
 800b27c:	4801      	ldr	r0, [pc, #4]	; (800b284 <__malloc_lock+0x8>)
 800b27e:	f7fe b926 	b.w	80094ce <__retarget_lock_acquire_recursive>
 800b282:	bf00      	nop
 800b284:	200004b8 	.word	0x200004b8

0800b288 <__malloc_unlock>:
 800b288:	4801      	ldr	r0, [pc, #4]	; (800b290 <__malloc_unlock+0x8>)
 800b28a:	f7fe b921 	b.w	80094d0 <__retarget_lock_release_recursive>
 800b28e:	bf00      	nop
 800b290:	200004b8 	.word	0x200004b8

0800b294 <_Balloc>:
 800b294:	b570      	push	{r4, r5, r6, lr}
 800b296:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b298:	4604      	mov	r4, r0
 800b29a:	460d      	mov	r5, r1
 800b29c:	b976      	cbnz	r6, 800b2bc <_Balloc+0x28>
 800b29e:	2010      	movs	r0, #16
 800b2a0:	f7fe f97c 	bl	800959c <malloc>
 800b2a4:	4602      	mov	r2, r0
 800b2a6:	6260      	str	r0, [r4, #36]	; 0x24
 800b2a8:	b920      	cbnz	r0, 800b2b4 <_Balloc+0x20>
 800b2aa:	4b18      	ldr	r3, [pc, #96]	; (800b30c <_Balloc+0x78>)
 800b2ac:	4818      	ldr	r0, [pc, #96]	; (800b310 <_Balloc+0x7c>)
 800b2ae:	2166      	movs	r1, #102	; 0x66
 800b2b0:	f001 ffce 	bl	800d250 <__assert_func>
 800b2b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b2b8:	6006      	str	r6, [r0, #0]
 800b2ba:	60c6      	str	r6, [r0, #12]
 800b2bc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b2be:	68f3      	ldr	r3, [r6, #12]
 800b2c0:	b183      	cbz	r3, 800b2e4 <_Balloc+0x50>
 800b2c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b2c4:	68db      	ldr	r3, [r3, #12]
 800b2c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b2ca:	b9b8      	cbnz	r0, 800b2fc <_Balloc+0x68>
 800b2cc:	2101      	movs	r1, #1
 800b2ce:	fa01 f605 	lsl.w	r6, r1, r5
 800b2d2:	1d72      	adds	r2, r6, #5
 800b2d4:	0092      	lsls	r2, r2, #2
 800b2d6:	4620      	mov	r0, r4
 800b2d8:	f000 fb60 	bl	800b99c <_calloc_r>
 800b2dc:	b160      	cbz	r0, 800b2f8 <_Balloc+0x64>
 800b2de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b2e2:	e00e      	b.n	800b302 <_Balloc+0x6e>
 800b2e4:	2221      	movs	r2, #33	; 0x21
 800b2e6:	2104      	movs	r1, #4
 800b2e8:	4620      	mov	r0, r4
 800b2ea:	f000 fb57 	bl	800b99c <_calloc_r>
 800b2ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b2f0:	60f0      	str	r0, [r6, #12]
 800b2f2:	68db      	ldr	r3, [r3, #12]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d1e4      	bne.n	800b2c2 <_Balloc+0x2e>
 800b2f8:	2000      	movs	r0, #0
 800b2fa:	bd70      	pop	{r4, r5, r6, pc}
 800b2fc:	6802      	ldr	r2, [r0, #0]
 800b2fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b302:	2300      	movs	r3, #0
 800b304:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b308:	e7f7      	b.n	800b2fa <_Balloc+0x66>
 800b30a:	bf00      	nop
 800b30c:	0801299b 	.word	0x0801299b
 800b310:	08012a1e 	.word	0x08012a1e

0800b314 <_Bfree>:
 800b314:	b570      	push	{r4, r5, r6, lr}
 800b316:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b318:	4605      	mov	r5, r0
 800b31a:	460c      	mov	r4, r1
 800b31c:	b976      	cbnz	r6, 800b33c <_Bfree+0x28>
 800b31e:	2010      	movs	r0, #16
 800b320:	f7fe f93c 	bl	800959c <malloc>
 800b324:	4602      	mov	r2, r0
 800b326:	6268      	str	r0, [r5, #36]	; 0x24
 800b328:	b920      	cbnz	r0, 800b334 <_Bfree+0x20>
 800b32a:	4b09      	ldr	r3, [pc, #36]	; (800b350 <_Bfree+0x3c>)
 800b32c:	4809      	ldr	r0, [pc, #36]	; (800b354 <_Bfree+0x40>)
 800b32e:	218a      	movs	r1, #138	; 0x8a
 800b330:	f001 ff8e 	bl	800d250 <__assert_func>
 800b334:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b338:	6006      	str	r6, [r0, #0]
 800b33a:	60c6      	str	r6, [r0, #12]
 800b33c:	b13c      	cbz	r4, 800b34e <_Bfree+0x3a>
 800b33e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b340:	6862      	ldr	r2, [r4, #4]
 800b342:	68db      	ldr	r3, [r3, #12]
 800b344:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b348:	6021      	str	r1, [r4, #0]
 800b34a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b34e:	bd70      	pop	{r4, r5, r6, pc}
 800b350:	0801299b 	.word	0x0801299b
 800b354:	08012a1e 	.word	0x08012a1e

0800b358 <__multadd>:
 800b358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b35c:	690d      	ldr	r5, [r1, #16]
 800b35e:	4607      	mov	r7, r0
 800b360:	460c      	mov	r4, r1
 800b362:	461e      	mov	r6, r3
 800b364:	f101 0c14 	add.w	ip, r1, #20
 800b368:	2000      	movs	r0, #0
 800b36a:	f8dc 3000 	ldr.w	r3, [ip]
 800b36e:	b299      	uxth	r1, r3
 800b370:	fb02 6101 	mla	r1, r2, r1, r6
 800b374:	0c1e      	lsrs	r6, r3, #16
 800b376:	0c0b      	lsrs	r3, r1, #16
 800b378:	fb02 3306 	mla	r3, r2, r6, r3
 800b37c:	b289      	uxth	r1, r1
 800b37e:	3001      	adds	r0, #1
 800b380:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b384:	4285      	cmp	r5, r0
 800b386:	f84c 1b04 	str.w	r1, [ip], #4
 800b38a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b38e:	dcec      	bgt.n	800b36a <__multadd+0x12>
 800b390:	b30e      	cbz	r6, 800b3d6 <__multadd+0x7e>
 800b392:	68a3      	ldr	r3, [r4, #8]
 800b394:	42ab      	cmp	r3, r5
 800b396:	dc19      	bgt.n	800b3cc <__multadd+0x74>
 800b398:	6861      	ldr	r1, [r4, #4]
 800b39a:	4638      	mov	r0, r7
 800b39c:	3101      	adds	r1, #1
 800b39e:	f7ff ff79 	bl	800b294 <_Balloc>
 800b3a2:	4680      	mov	r8, r0
 800b3a4:	b928      	cbnz	r0, 800b3b2 <__multadd+0x5a>
 800b3a6:	4602      	mov	r2, r0
 800b3a8:	4b0c      	ldr	r3, [pc, #48]	; (800b3dc <__multadd+0x84>)
 800b3aa:	480d      	ldr	r0, [pc, #52]	; (800b3e0 <__multadd+0x88>)
 800b3ac:	21b5      	movs	r1, #181	; 0xb5
 800b3ae:	f001 ff4f 	bl	800d250 <__assert_func>
 800b3b2:	6922      	ldr	r2, [r4, #16]
 800b3b4:	3202      	adds	r2, #2
 800b3b6:	f104 010c 	add.w	r1, r4, #12
 800b3ba:	0092      	lsls	r2, r2, #2
 800b3bc:	300c      	adds	r0, #12
 800b3be:	f7fe f8fd 	bl	80095bc <memcpy>
 800b3c2:	4621      	mov	r1, r4
 800b3c4:	4638      	mov	r0, r7
 800b3c6:	f7ff ffa5 	bl	800b314 <_Bfree>
 800b3ca:	4644      	mov	r4, r8
 800b3cc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b3d0:	3501      	adds	r5, #1
 800b3d2:	615e      	str	r6, [r3, #20]
 800b3d4:	6125      	str	r5, [r4, #16]
 800b3d6:	4620      	mov	r0, r4
 800b3d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3dc:	08012a0d 	.word	0x08012a0d
 800b3e0:	08012a1e 	.word	0x08012a1e

0800b3e4 <__hi0bits>:
 800b3e4:	0c03      	lsrs	r3, r0, #16
 800b3e6:	041b      	lsls	r3, r3, #16
 800b3e8:	b9d3      	cbnz	r3, 800b420 <__hi0bits+0x3c>
 800b3ea:	0400      	lsls	r0, r0, #16
 800b3ec:	2310      	movs	r3, #16
 800b3ee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b3f2:	bf04      	itt	eq
 800b3f4:	0200      	lsleq	r0, r0, #8
 800b3f6:	3308      	addeq	r3, #8
 800b3f8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b3fc:	bf04      	itt	eq
 800b3fe:	0100      	lsleq	r0, r0, #4
 800b400:	3304      	addeq	r3, #4
 800b402:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b406:	bf04      	itt	eq
 800b408:	0080      	lsleq	r0, r0, #2
 800b40a:	3302      	addeq	r3, #2
 800b40c:	2800      	cmp	r0, #0
 800b40e:	db05      	blt.n	800b41c <__hi0bits+0x38>
 800b410:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b414:	f103 0301 	add.w	r3, r3, #1
 800b418:	bf08      	it	eq
 800b41a:	2320      	moveq	r3, #32
 800b41c:	4618      	mov	r0, r3
 800b41e:	4770      	bx	lr
 800b420:	2300      	movs	r3, #0
 800b422:	e7e4      	b.n	800b3ee <__hi0bits+0xa>

0800b424 <__lo0bits>:
 800b424:	6803      	ldr	r3, [r0, #0]
 800b426:	f013 0207 	ands.w	r2, r3, #7
 800b42a:	4601      	mov	r1, r0
 800b42c:	d00b      	beq.n	800b446 <__lo0bits+0x22>
 800b42e:	07da      	lsls	r2, r3, #31
 800b430:	d423      	bmi.n	800b47a <__lo0bits+0x56>
 800b432:	0798      	lsls	r0, r3, #30
 800b434:	bf49      	itett	mi
 800b436:	085b      	lsrmi	r3, r3, #1
 800b438:	089b      	lsrpl	r3, r3, #2
 800b43a:	2001      	movmi	r0, #1
 800b43c:	600b      	strmi	r3, [r1, #0]
 800b43e:	bf5c      	itt	pl
 800b440:	600b      	strpl	r3, [r1, #0]
 800b442:	2002      	movpl	r0, #2
 800b444:	4770      	bx	lr
 800b446:	b298      	uxth	r0, r3
 800b448:	b9a8      	cbnz	r0, 800b476 <__lo0bits+0x52>
 800b44a:	0c1b      	lsrs	r3, r3, #16
 800b44c:	2010      	movs	r0, #16
 800b44e:	b2da      	uxtb	r2, r3
 800b450:	b90a      	cbnz	r2, 800b456 <__lo0bits+0x32>
 800b452:	3008      	adds	r0, #8
 800b454:	0a1b      	lsrs	r3, r3, #8
 800b456:	071a      	lsls	r2, r3, #28
 800b458:	bf04      	itt	eq
 800b45a:	091b      	lsreq	r3, r3, #4
 800b45c:	3004      	addeq	r0, #4
 800b45e:	079a      	lsls	r2, r3, #30
 800b460:	bf04      	itt	eq
 800b462:	089b      	lsreq	r3, r3, #2
 800b464:	3002      	addeq	r0, #2
 800b466:	07da      	lsls	r2, r3, #31
 800b468:	d403      	bmi.n	800b472 <__lo0bits+0x4e>
 800b46a:	085b      	lsrs	r3, r3, #1
 800b46c:	f100 0001 	add.w	r0, r0, #1
 800b470:	d005      	beq.n	800b47e <__lo0bits+0x5a>
 800b472:	600b      	str	r3, [r1, #0]
 800b474:	4770      	bx	lr
 800b476:	4610      	mov	r0, r2
 800b478:	e7e9      	b.n	800b44e <__lo0bits+0x2a>
 800b47a:	2000      	movs	r0, #0
 800b47c:	4770      	bx	lr
 800b47e:	2020      	movs	r0, #32
 800b480:	4770      	bx	lr
	...

0800b484 <__i2b>:
 800b484:	b510      	push	{r4, lr}
 800b486:	460c      	mov	r4, r1
 800b488:	2101      	movs	r1, #1
 800b48a:	f7ff ff03 	bl	800b294 <_Balloc>
 800b48e:	4602      	mov	r2, r0
 800b490:	b928      	cbnz	r0, 800b49e <__i2b+0x1a>
 800b492:	4b05      	ldr	r3, [pc, #20]	; (800b4a8 <__i2b+0x24>)
 800b494:	4805      	ldr	r0, [pc, #20]	; (800b4ac <__i2b+0x28>)
 800b496:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b49a:	f001 fed9 	bl	800d250 <__assert_func>
 800b49e:	2301      	movs	r3, #1
 800b4a0:	6144      	str	r4, [r0, #20]
 800b4a2:	6103      	str	r3, [r0, #16]
 800b4a4:	bd10      	pop	{r4, pc}
 800b4a6:	bf00      	nop
 800b4a8:	08012a0d 	.word	0x08012a0d
 800b4ac:	08012a1e 	.word	0x08012a1e

0800b4b0 <__multiply>:
 800b4b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4b4:	4691      	mov	r9, r2
 800b4b6:	690a      	ldr	r2, [r1, #16]
 800b4b8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b4bc:	429a      	cmp	r2, r3
 800b4be:	bfb8      	it	lt
 800b4c0:	460b      	movlt	r3, r1
 800b4c2:	460c      	mov	r4, r1
 800b4c4:	bfbc      	itt	lt
 800b4c6:	464c      	movlt	r4, r9
 800b4c8:	4699      	movlt	r9, r3
 800b4ca:	6927      	ldr	r7, [r4, #16]
 800b4cc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b4d0:	68a3      	ldr	r3, [r4, #8]
 800b4d2:	6861      	ldr	r1, [r4, #4]
 800b4d4:	eb07 060a 	add.w	r6, r7, sl
 800b4d8:	42b3      	cmp	r3, r6
 800b4da:	b085      	sub	sp, #20
 800b4dc:	bfb8      	it	lt
 800b4de:	3101      	addlt	r1, #1
 800b4e0:	f7ff fed8 	bl	800b294 <_Balloc>
 800b4e4:	b930      	cbnz	r0, 800b4f4 <__multiply+0x44>
 800b4e6:	4602      	mov	r2, r0
 800b4e8:	4b44      	ldr	r3, [pc, #272]	; (800b5fc <__multiply+0x14c>)
 800b4ea:	4845      	ldr	r0, [pc, #276]	; (800b600 <__multiply+0x150>)
 800b4ec:	f240 115d 	movw	r1, #349	; 0x15d
 800b4f0:	f001 feae 	bl	800d250 <__assert_func>
 800b4f4:	f100 0514 	add.w	r5, r0, #20
 800b4f8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b4fc:	462b      	mov	r3, r5
 800b4fe:	2200      	movs	r2, #0
 800b500:	4543      	cmp	r3, r8
 800b502:	d321      	bcc.n	800b548 <__multiply+0x98>
 800b504:	f104 0314 	add.w	r3, r4, #20
 800b508:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b50c:	f109 0314 	add.w	r3, r9, #20
 800b510:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b514:	9202      	str	r2, [sp, #8]
 800b516:	1b3a      	subs	r2, r7, r4
 800b518:	3a15      	subs	r2, #21
 800b51a:	f022 0203 	bic.w	r2, r2, #3
 800b51e:	3204      	adds	r2, #4
 800b520:	f104 0115 	add.w	r1, r4, #21
 800b524:	428f      	cmp	r7, r1
 800b526:	bf38      	it	cc
 800b528:	2204      	movcc	r2, #4
 800b52a:	9201      	str	r2, [sp, #4]
 800b52c:	9a02      	ldr	r2, [sp, #8]
 800b52e:	9303      	str	r3, [sp, #12]
 800b530:	429a      	cmp	r2, r3
 800b532:	d80c      	bhi.n	800b54e <__multiply+0x9e>
 800b534:	2e00      	cmp	r6, #0
 800b536:	dd03      	ble.n	800b540 <__multiply+0x90>
 800b538:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d05a      	beq.n	800b5f6 <__multiply+0x146>
 800b540:	6106      	str	r6, [r0, #16]
 800b542:	b005      	add	sp, #20
 800b544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b548:	f843 2b04 	str.w	r2, [r3], #4
 800b54c:	e7d8      	b.n	800b500 <__multiply+0x50>
 800b54e:	f8b3 a000 	ldrh.w	sl, [r3]
 800b552:	f1ba 0f00 	cmp.w	sl, #0
 800b556:	d024      	beq.n	800b5a2 <__multiply+0xf2>
 800b558:	f104 0e14 	add.w	lr, r4, #20
 800b55c:	46a9      	mov	r9, r5
 800b55e:	f04f 0c00 	mov.w	ip, #0
 800b562:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b566:	f8d9 1000 	ldr.w	r1, [r9]
 800b56a:	fa1f fb82 	uxth.w	fp, r2
 800b56e:	b289      	uxth	r1, r1
 800b570:	fb0a 110b 	mla	r1, sl, fp, r1
 800b574:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b578:	f8d9 2000 	ldr.w	r2, [r9]
 800b57c:	4461      	add	r1, ip
 800b57e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b582:	fb0a c20b 	mla	r2, sl, fp, ip
 800b586:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b58a:	b289      	uxth	r1, r1
 800b58c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b590:	4577      	cmp	r7, lr
 800b592:	f849 1b04 	str.w	r1, [r9], #4
 800b596:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b59a:	d8e2      	bhi.n	800b562 <__multiply+0xb2>
 800b59c:	9a01      	ldr	r2, [sp, #4]
 800b59e:	f845 c002 	str.w	ip, [r5, r2]
 800b5a2:	9a03      	ldr	r2, [sp, #12]
 800b5a4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b5a8:	3304      	adds	r3, #4
 800b5aa:	f1b9 0f00 	cmp.w	r9, #0
 800b5ae:	d020      	beq.n	800b5f2 <__multiply+0x142>
 800b5b0:	6829      	ldr	r1, [r5, #0]
 800b5b2:	f104 0c14 	add.w	ip, r4, #20
 800b5b6:	46ae      	mov	lr, r5
 800b5b8:	f04f 0a00 	mov.w	sl, #0
 800b5bc:	f8bc b000 	ldrh.w	fp, [ip]
 800b5c0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b5c4:	fb09 220b 	mla	r2, r9, fp, r2
 800b5c8:	4492      	add	sl, r2
 800b5ca:	b289      	uxth	r1, r1
 800b5cc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b5d0:	f84e 1b04 	str.w	r1, [lr], #4
 800b5d4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b5d8:	f8be 1000 	ldrh.w	r1, [lr]
 800b5dc:	0c12      	lsrs	r2, r2, #16
 800b5de:	fb09 1102 	mla	r1, r9, r2, r1
 800b5e2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b5e6:	4567      	cmp	r7, ip
 800b5e8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b5ec:	d8e6      	bhi.n	800b5bc <__multiply+0x10c>
 800b5ee:	9a01      	ldr	r2, [sp, #4]
 800b5f0:	50a9      	str	r1, [r5, r2]
 800b5f2:	3504      	adds	r5, #4
 800b5f4:	e79a      	b.n	800b52c <__multiply+0x7c>
 800b5f6:	3e01      	subs	r6, #1
 800b5f8:	e79c      	b.n	800b534 <__multiply+0x84>
 800b5fa:	bf00      	nop
 800b5fc:	08012a0d 	.word	0x08012a0d
 800b600:	08012a1e 	.word	0x08012a1e

0800b604 <__pow5mult>:
 800b604:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b608:	4615      	mov	r5, r2
 800b60a:	f012 0203 	ands.w	r2, r2, #3
 800b60e:	4606      	mov	r6, r0
 800b610:	460f      	mov	r7, r1
 800b612:	d007      	beq.n	800b624 <__pow5mult+0x20>
 800b614:	4c25      	ldr	r4, [pc, #148]	; (800b6ac <__pow5mult+0xa8>)
 800b616:	3a01      	subs	r2, #1
 800b618:	2300      	movs	r3, #0
 800b61a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b61e:	f7ff fe9b 	bl	800b358 <__multadd>
 800b622:	4607      	mov	r7, r0
 800b624:	10ad      	asrs	r5, r5, #2
 800b626:	d03d      	beq.n	800b6a4 <__pow5mult+0xa0>
 800b628:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b62a:	b97c      	cbnz	r4, 800b64c <__pow5mult+0x48>
 800b62c:	2010      	movs	r0, #16
 800b62e:	f7fd ffb5 	bl	800959c <malloc>
 800b632:	4602      	mov	r2, r0
 800b634:	6270      	str	r0, [r6, #36]	; 0x24
 800b636:	b928      	cbnz	r0, 800b644 <__pow5mult+0x40>
 800b638:	4b1d      	ldr	r3, [pc, #116]	; (800b6b0 <__pow5mult+0xac>)
 800b63a:	481e      	ldr	r0, [pc, #120]	; (800b6b4 <__pow5mult+0xb0>)
 800b63c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b640:	f001 fe06 	bl	800d250 <__assert_func>
 800b644:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b648:	6004      	str	r4, [r0, #0]
 800b64a:	60c4      	str	r4, [r0, #12]
 800b64c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b650:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b654:	b94c      	cbnz	r4, 800b66a <__pow5mult+0x66>
 800b656:	f240 2171 	movw	r1, #625	; 0x271
 800b65a:	4630      	mov	r0, r6
 800b65c:	f7ff ff12 	bl	800b484 <__i2b>
 800b660:	2300      	movs	r3, #0
 800b662:	f8c8 0008 	str.w	r0, [r8, #8]
 800b666:	4604      	mov	r4, r0
 800b668:	6003      	str	r3, [r0, #0]
 800b66a:	f04f 0900 	mov.w	r9, #0
 800b66e:	07eb      	lsls	r3, r5, #31
 800b670:	d50a      	bpl.n	800b688 <__pow5mult+0x84>
 800b672:	4639      	mov	r1, r7
 800b674:	4622      	mov	r2, r4
 800b676:	4630      	mov	r0, r6
 800b678:	f7ff ff1a 	bl	800b4b0 <__multiply>
 800b67c:	4639      	mov	r1, r7
 800b67e:	4680      	mov	r8, r0
 800b680:	4630      	mov	r0, r6
 800b682:	f7ff fe47 	bl	800b314 <_Bfree>
 800b686:	4647      	mov	r7, r8
 800b688:	106d      	asrs	r5, r5, #1
 800b68a:	d00b      	beq.n	800b6a4 <__pow5mult+0xa0>
 800b68c:	6820      	ldr	r0, [r4, #0]
 800b68e:	b938      	cbnz	r0, 800b6a0 <__pow5mult+0x9c>
 800b690:	4622      	mov	r2, r4
 800b692:	4621      	mov	r1, r4
 800b694:	4630      	mov	r0, r6
 800b696:	f7ff ff0b 	bl	800b4b0 <__multiply>
 800b69a:	6020      	str	r0, [r4, #0]
 800b69c:	f8c0 9000 	str.w	r9, [r0]
 800b6a0:	4604      	mov	r4, r0
 800b6a2:	e7e4      	b.n	800b66e <__pow5mult+0x6a>
 800b6a4:	4638      	mov	r0, r7
 800b6a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6aa:	bf00      	nop
 800b6ac:	08012b70 	.word	0x08012b70
 800b6b0:	0801299b 	.word	0x0801299b
 800b6b4:	08012a1e 	.word	0x08012a1e

0800b6b8 <__lshift>:
 800b6b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6bc:	460c      	mov	r4, r1
 800b6be:	6849      	ldr	r1, [r1, #4]
 800b6c0:	6923      	ldr	r3, [r4, #16]
 800b6c2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b6c6:	68a3      	ldr	r3, [r4, #8]
 800b6c8:	4607      	mov	r7, r0
 800b6ca:	4691      	mov	r9, r2
 800b6cc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b6d0:	f108 0601 	add.w	r6, r8, #1
 800b6d4:	42b3      	cmp	r3, r6
 800b6d6:	db0b      	blt.n	800b6f0 <__lshift+0x38>
 800b6d8:	4638      	mov	r0, r7
 800b6da:	f7ff fddb 	bl	800b294 <_Balloc>
 800b6de:	4605      	mov	r5, r0
 800b6e0:	b948      	cbnz	r0, 800b6f6 <__lshift+0x3e>
 800b6e2:	4602      	mov	r2, r0
 800b6e4:	4b2a      	ldr	r3, [pc, #168]	; (800b790 <__lshift+0xd8>)
 800b6e6:	482b      	ldr	r0, [pc, #172]	; (800b794 <__lshift+0xdc>)
 800b6e8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b6ec:	f001 fdb0 	bl	800d250 <__assert_func>
 800b6f0:	3101      	adds	r1, #1
 800b6f2:	005b      	lsls	r3, r3, #1
 800b6f4:	e7ee      	b.n	800b6d4 <__lshift+0x1c>
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	f100 0114 	add.w	r1, r0, #20
 800b6fc:	f100 0210 	add.w	r2, r0, #16
 800b700:	4618      	mov	r0, r3
 800b702:	4553      	cmp	r3, sl
 800b704:	db37      	blt.n	800b776 <__lshift+0xbe>
 800b706:	6920      	ldr	r0, [r4, #16]
 800b708:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b70c:	f104 0314 	add.w	r3, r4, #20
 800b710:	f019 091f 	ands.w	r9, r9, #31
 800b714:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b718:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b71c:	d02f      	beq.n	800b77e <__lshift+0xc6>
 800b71e:	f1c9 0e20 	rsb	lr, r9, #32
 800b722:	468a      	mov	sl, r1
 800b724:	f04f 0c00 	mov.w	ip, #0
 800b728:	681a      	ldr	r2, [r3, #0]
 800b72a:	fa02 f209 	lsl.w	r2, r2, r9
 800b72e:	ea42 020c 	orr.w	r2, r2, ip
 800b732:	f84a 2b04 	str.w	r2, [sl], #4
 800b736:	f853 2b04 	ldr.w	r2, [r3], #4
 800b73a:	4298      	cmp	r0, r3
 800b73c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b740:	d8f2      	bhi.n	800b728 <__lshift+0x70>
 800b742:	1b03      	subs	r3, r0, r4
 800b744:	3b15      	subs	r3, #21
 800b746:	f023 0303 	bic.w	r3, r3, #3
 800b74a:	3304      	adds	r3, #4
 800b74c:	f104 0215 	add.w	r2, r4, #21
 800b750:	4290      	cmp	r0, r2
 800b752:	bf38      	it	cc
 800b754:	2304      	movcc	r3, #4
 800b756:	f841 c003 	str.w	ip, [r1, r3]
 800b75a:	f1bc 0f00 	cmp.w	ip, #0
 800b75e:	d001      	beq.n	800b764 <__lshift+0xac>
 800b760:	f108 0602 	add.w	r6, r8, #2
 800b764:	3e01      	subs	r6, #1
 800b766:	4638      	mov	r0, r7
 800b768:	612e      	str	r6, [r5, #16]
 800b76a:	4621      	mov	r1, r4
 800b76c:	f7ff fdd2 	bl	800b314 <_Bfree>
 800b770:	4628      	mov	r0, r5
 800b772:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b776:	f842 0f04 	str.w	r0, [r2, #4]!
 800b77a:	3301      	adds	r3, #1
 800b77c:	e7c1      	b.n	800b702 <__lshift+0x4a>
 800b77e:	3904      	subs	r1, #4
 800b780:	f853 2b04 	ldr.w	r2, [r3], #4
 800b784:	f841 2f04 	str.w	r2, [r1, #4]!
 800b788:	4298      	cmp	r0, r3
 800b78a:	d8f9      	bhi.n	800b780 <__lshift+0xc8>
 800b78c:	e7ea      	b.n	800b764 <__lshift+0xac>
 800b78e:	bf00      	nop
 800b790:	08012a0d 	.word	0x08012a0d
 800b794:	08012a1e 	.word	0x08012a1e

0800b798 <__mcmp>:
 800b798:	b530      	push	{r4, r5, lr}
 800b79a:	6902      	ldr	r2, [r0, #16]
 800b79c:	690c      	ldr	r4, [r1, #16]
 800b79e:	1b12      	subs	r2, r2, r4
 800b7a0:	d10e      	bne.n	800b7c0 <__mcmp+0x28>
 800b7a2:	f100 0314 	add.w	r3, r0, #20
 800b7a6:	3114      	adds	r1, #20
 800b7a8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b7ac:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b7b0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b7b4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b7b8:	42a5      	cmp	r5, r4
 800b7ba:	d003      	beq.n	800b7c4 <__mcmp+0x2c>
 800b7bc:	d305      	bcc.n	800b7ca <__mcmp+0x32>
 800b7be:	2201      	movs	r2, #1
 800b7c0:	4610      	mov	r0, r2
 800b7c2:	bd30      	pop	{r4, r5, pc}
 800b7c4:	4283      	cmp	r3, r0
 800b7c6:	d3f3      	bcc.n	800b7b0 <__mcmp+0x18>
 800b7c8:	e7fa      	b.n	800b7c0 <__mcmp+0x28>
 800b7ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b7ce:	e7f7      	b.n	800b7c0 <__mcmp+0x28>

0800b7d0 <__mdiff>:
 800b7d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7d4:	460c      	mov	r4, r1
 800b7d6:	4606      	mov	r6, r0
 800b7d8:	4611      	mov	r1, r2
 800b7da:	4620      	mov	r0, r4
 800b7dc:	4690      	mov	r8, r2
 800b7de:	f7ff ffdb 	bl	800b798 <__mcmp>
 800b7e2:	1e05      	subs	r5, r0, #0
 800b7e4:	d110      	bne.n	800b808 <__mdiff+0x38>
 800b7e6:	4629      	mov	r1, r5
 800b7e8:	4630      	mov	r0, r6
 800b7ea:	f7ff fd53 	bl	800b294 <_Balloc>
 800b7ee:	b930      	cbnz	r0, 800b7fe <__mdiff+0x2e>
 800b7f0:	4b3a      	ldr	r3, [pc, #232]	; (800b8dc <__mdiff+0x10c>)
 800b7f2:	4602      	mov	r2, r0
 800b7f4:	f240 2132 	movw	r1, #562	; 0x232
 800b7f8:	4839      	ldr	r0, [pc, #228]	; (800b8e0 <__mdiff+0x110>)
 800b7fa:	f001 fd29 	bl	800d250 <__assert_func>
 800b7fe:	2301      	movs	r3, #1
 800b800:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b804:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b808:	bfa4      	itt	ge
 800b80a:	4643      	movge	r3, r8
 800b80c:	46a0      	movge	r8, r4
 800b80e:	4630      	mov	r0, r6
 800b810:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b814:	bfa6      	itte	ge
 800b816:	461c      	movge	r4, r3
 800b818:	2500      	movge	r5, #0
 800b81a:	2501      	movlt	r5, #1
 800b81c:	f7ff fd3a 	bl	800b294 <_Balloc>
 800b820:	b920      	cbnz	r0, 800b82c <__mdiff+0x5c>
 800b822:	4b2e      	ldr	r3, [pc, #184]	; (800b8dc <__mdiff+0x10c>)
 800b824:	4602      	mov	r2, r0
 800b826:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b82a:	e7e5      	b.n	800b7f8 <__mdiff+0x28>
 800b82c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b830:	6926      	ldr	r6, [r4, #16]
 800b832:	60c5      	str	r5, [r0, #12]
 800b834:	f104 0914 	add.w	r9, r4, #20
 800b838:	f108 0514 	add.w	r5, r8, #20
 800b83c:	f100 0e14 	add.w	lr, r0, #20
 800b840:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b844:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b848:	f108 0210 	add.w	r2, r8, #16
 800b84c:	46f2      	mov	sl, lr
 800b84e:	2100      	movs	r1, #0
 800b850:	f859 3b04 	ldr.w	r3, [r9], #4
 800b854:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b858:	fa1f f883 	uxth.w	r8, r3
 800b85c:	fa11 f18b 	uxtah	r1, r1, fp
 800b860:	0c1b      	lsrs	r3, r3, #16
 800b862:	eba1 0808 	sub.w	r8, r1, r8
 800b866:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b86a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b86e:	fa1f f888 	uxth.w	r8, r8
 800b872:	1419      	asrs	r1, r3, #16
 800b874:	454e      	cmp	r6, r9
 800b876:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b87a:	f84a 3b04 	str.w	r3, [sl], #4
 800b87e:	d8e7      	bhi.n	800b850 <__mdiff+0x80>
 800b880:	1b33      	subs	r3, r6, r4
 800b882:	3b15      	subs	r3, #21
 800b884:	f023 0303 	bic.w	r3, r3, #3
 800b888:	3304      	adds	r3, #4
 800b88a:	3415      	adds	r4, #21
 800b88c:	42a6      	cmp	r6, r4
 800b88e:	bf38      	it	cc
 800b890:	2304      	movcc	r3, #4
 800b892:	441d      	add	r5, r3
 800b894:	4473      	add	r3, lr
 800b896:	469e      	mov	lr, r3
 800b898:	462e      	mov	r6, r5
 800b89a:	4566      	cmp	r6, ip
 800b89c:	d30e      	bcc.n	800b8bc <__mdiff+0xec>
 800b89e:	f10c 0203 	add.w	r2, ip, #3
 800b8a2:	1b52      	subs	r2, r2, r5
 800b8a4:	f022 0203 	bic.w	r2, r2, #3
 800b8a8:	3d03      	subs	r5, #3
 800b8aa:	45ac      	cmp	ip, r5
 800b8ac:	bf38      	it	cc
 800b8ae:	2200      	movcc	r2, #0
 800b8b0:	441a      	add	r2, r3
 800b8b2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b8b6:	b17b      	cbz	r3, 800b8d8 <__mdiff+0x108>
 800b8b8:	6107      	str	r7, [r0, #16]
 800b8ba:	e7a3      	b.n	800b804 <__mdiff+0x34>
 800b8bc:	f856 8b04 	ldr.w	r8, [r6], #4
 800b8c0:	fa11 f288 	uxtah	r2, r1, r8
 800b8c4:	1414      	asrs	r4, r2, #16
 800b8c6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b8ca:	b292      	uxth	r2, r2
 800b8cc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b8d0:	f84e 2b04 	str.w	r2, [lr], #4
 800b8d4:	1421      	asrs	r1, r4, #16
 800b8d6:	e7e0      	b.n	800b89a <__mdiff+0xca>
 800b8d8:	3f01      	subs	r7, #1
 800b8da:	e7ea      	b.n	800b8b2 <__mdiff+0xe2>
 800b8dc:	08012a0d 	.word	0x08012a0d
 800b8e0:	08012a1e 	.word	0x08012a1e

0800b8e4 <__d2b>:
 800b8e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b8e8:	4689      	mov	r9, r1
 800b8ea:	2101      	movs	r1, #1
 800b8ec:	ec57 6b10 	vmov	r6, r7, d0
 800b8f0:	4690      	mov	r8, r2
 800b8f2:	f7ff fccf 	bl	800b294 <_Balloc>
 800b8f6:	4604      	mov	r4, r0
 800b8f8:	b930      	cbnz	r0, 800b908 <__d2b+0x24>
 800b8fa:	4602      	mov	r2, r0
 800b8fc:	4b25      	ldr	r3, [pc, #148]	; (800b994 <__d2b+0xb0>)
 800b8fe:	4826      	ldr	r0, [pc, #152]	; (800b998 <__d2b+0xb4>)
 800b900:	f240 310a 	movw	r1, #778	; 0x30a
 800b904:	f001 fca4 	bl	800d250 <__assert_func>
 800b908:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b90c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b910:	bb35      	cbnz	r5, 800b960 <__d2b+0x7c>
 800b912:	2e00      	cmp	r6, #0
 800b914:	9301      	str	r3, [sp, #4]
 800b916:	d028      	beq.n	800b96a <__d2b+0x86>
 800b918:	4668      	mov	r0, sp
 800b91a:	9600      	str	r6, [sp, #0]
 800b91c:	f7ff fd82 	bl	800b424 <__lo0bits>
 800b920:	9900      	ldr	r1, [sp, #0]
 800b922:	b300      	cbz	r0, 800b966 <__d2b+0x82>
 800b924:	9a01      	ldr	r2, [sp, #4]
 800b926:	f1c0 0320 	rsb	r3, r0, #32
 800b92a:	fa02 f303 	lsl.w	r3, r2, r3
 800b92e:	430b      	orrs	r3, r1
 800b930:	40c2      	lsrs	r2, r0
 800b932:	6163      	str	r3, [r4, #20]
 800b934:	9201      	str	r2, [sp, #4]
 800b936:	9b01      	ldr	r3, [sp, #4]
 800b938:	61a3      	str	r3, [r4, #24]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	bf14      	ite	ne
 800b93e:	2202      	movne	r2, #2
 800b940:	2201      	moveq	r2, #1
 800b942:	6122      	str	r2, [r4, #16]
 800b944:	b1d5      	cbz	r5, 800b97c <__d2b+0x98>
 800b946:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b94a:	4405      	add	r5, r0
 800b94c:	f8c9 5000 	str.w	r5, [r9]
 800b950:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b954:	f8c8 0000 	str.w	r0, [r8]
 800b958:	4620      	mov	r0, r4
 800b95a:	b003      	add	sp, #12
 800b95c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b960:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b964:	e7d5      	b.n	800b912 <__d2b+0x2e>
 800b966:	6161      	str	r1, [r4, #20]
 800b968:	e7e5      	b.n	800b936 <__d2b+0x52>
 800b96a:	a801      	add	r0, sp, #4
 800b96c:	f7ff fd5a 	bl	800b424 <__lo0bits>
 800b970:	9b01      	ldr	r3, [sp, #4]
 800b972:	6163      	str	r3, [r4, #20]
 800b974:	2201      	movs	r2, #1
 800b976:	6122      	str	r2, [r4, #16]
 800b978:	3020      	adds	r0, #32
 800b97a:	e7e3      	b.n	800b944 <__d2b+0x60>
 800b97c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b980:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b984:	f8c9 0000 	str.w	r0, [r9]
 800b988:	6918      	ldr	r0, [r3, #16]
 800b98a:	f7ff fd2b 	bl	800b3e4 <__hi0bits>
 800b98e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b992:	e7df      	b.n	800b954 <__d2b+0x70>
 800b994:	08012a0d 	.word	0x08012a0d
 800b998:	08012a1e 	.word	0x08012a1e

0800b99c <_calloc_r>:
 800b99c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b99e:	fba1 2402 	umull	r2, r4, r1, r2
 800b9a2:	b94c      	cbnz	r4, 800b9b8 <_calloc_r+0x1c>
 800b9a4:	4611      	mov	r1, r2
 800b9a6:	9201      	str	r2, [sp, #4]
 800b9a8:	f7fd fe8a 	bl	80096c0 <_malloc_r>
 800b9ac:	9a01      	ldr	r2, [sp, #4]
 800b9ae:	4605      	mov	r5, r0
 800b9b0:	b930      	cbnz	r0, 800b9c0 <_calloc_r+0x24>
 800b9b2:	4628      	mov	r0, r5
 800b9b4:	b003      	add	sp, #12
 800b9b6:	bd30      	pop	{r4, r5, pc}
 800b9b8:	220c      	movs	r2, #12
 800b9ba:	6002      	str	r2, [r0, #0]
 800b9bc:	2500      	movs	r5, #0
 800b9be:	e7f8      	b.n	800b9b2 <_calloc_r+0x16>
 800b9c0:	4621      	mov	r1, r4
 800b9c2:	f7fd fe09 	bl	80095d8 <memset>
 800b9c6:	e7f4      	b.n	800b9b2 <_calloc_r+0x16>

0800b9c8 <_sungetc_r>:
 800b9c8:	b538      	push	{r3, r4, r5, lr}
 800b9ca:	1c4b      	adds	r3, r1, #1
 800b9cc:	4614      	mov	r4, r2
 800b9ce:	d103      	bne.n	800b9d8 <_sungetc_r+0x10>
 800b9d0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800b9d4:	4628      	mov	r0, r5
 800b9d6:	bd38      	pop	{r3, r4, r5, pc}
 800b9d8:	8993      	ldrh	r3, [r2, #12]
 800b9da:	f023 0320 	bic.w	r3, r3, #32
 800b9de:	8193      	strh	r3, [r2, #12]
 800b9e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b9e2:	6852      	ldr	r2, [r2, #4]
 800b9e4:	b2cd      	uxtb	r5, r1
 800b9e6:	b18b      	cbz	r3, 800ba0c <_sungetc_r+0x44>
 800b9e8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b9ea:	4293      	cmp	r3, r2
 800b9ec:	dd08      	ble.n	800ba00 <_sungetc_r+0x38>
 800b9ee:	6823      	ldr	r3, [r4, #0]
 800b9f0:	1e5a      	subs	r2, r3, #1
 800b9f2:	6022      	str	r2, [r4, #0]
 800b9f4:	f803 5c01 	strb.w	r5, [r3, #-1]
 800b9f8:	6863      	ldr	r3, [r4, #4]
 800b9fa:	3301      	adds	r3, #1
 800b9fc:	6063      	str	r3, [r4, #4]
 800b9fe:	e7e9      	b.n	800b9d4 <_sungetc_r+0xc>
 800ba00:	4621      	mov	r1, r4
 800ba02:	f001 fbd3 	bl	800d1ac <__submore>
 800ba06:	2800      	cmp	r0, #0
 800ba08:	d0f1      	beq.n	800b9ee <_sungetc_r+0x26>
 800ba0a:	e7e1      	b.n	800b9d0 <_sungetc_r+0x8>
 800ba0c:	6921      	ldr	r1, [r4, #16]
 800ba0e:	6823      	ldr	r3, [r4, #0]
 800ba10:	b151      	cbz	r1, 800ba28 <_sungetc_r+0x60>
 800ba12:	4299      	cmp	r1, r3
 800ba14:	d208      	bcs.n	800ba28 <_sungetc_r+0x60>
 800ba16:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800ba1a:	42a9      	cmp	r1, r5
 800ba1c:	d104      	bne.n	800ba28 <_sungetc_r+0x60>
 800ba1e:	3b01      	subs	r3, #1
 800ba20:	3201      	adds	r2, #1
 800ba22:	6023      	str	r3, [r4, #0]
 800ba24:	6062      	str	r2, [r4, #4]
 800ba26:	e7d5      	b.n	800b9d4 <_sungetc_r+0xc>
 800ba28:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800ba2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ba30:	6363      	str	r3, [r4, #52]	; 0x34
 800ba32:	2303      	movs	r3, #3
 800ba34:	63a3      	str	r3, [r4, #56]	; 0x38
 800ba36:	4623      	mov	r3, r4
 800ba38:	f803 5f46 	strb.w	r5, [r3, #70]!
 800ba3c:	6023      	str	r3, [r4, #0]
 800ba3e:	2301      	movs	r3, #1
 800ba40:	e7dc      	b.n	800b9fc <_sungetc_r+0x34>

0800ba42 <__ssrefill_r>:
 800ba42:	b510      	push	{r4, lr}
 800ba44:	460c      	mov	r4, r1
 800ba46:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800ba48:	b169      	cbz	r1, 800ba66 <__ssrefill_r+0x24>
 800ba4a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ba4e:	4299      	cmp	r1, r3
 800ba50:	d001      	beq.n	800ba56 <__ssrefill_r+0x14>
 800ba52:	f7fd fdc9 	bl	80095e8 <_free_r>
 800ba56:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ba58:	6063      	str	r3, [r4, #4]
 800ba5a:	2000      	movs	r0, #0
 800ba5c:	6360      	str	r0, [r4, #52]	; 0x34
 800ba5e:	b113      	cbz	r3, 800ba66 <__ssrefill_r+0x24>
 800ba60:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ba62:	6023      	str	r3, [r4, #0]
 800ba64:	bd10      	pop	{r4, pc}
 800ba66:	6923      	ldr	r3, [r4, #16]
 800ba68:	6023      	str	r3, [r4, #0]
 800ba6a:	2300      	movs	r3, #0
 800ba6c:	6063      	str	r3, [r4, #4]
 800ba6e:	89a3      	ldrh	r3, [r4, #12]
 800ba70:	f043 0320 	orr.w	r3, r3, #32
 800ba74:	81a3      	strh	r3, [r4, #12]
 800ba76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ba7a:	e7f3      	b.n	800ba64 <__ssrefill_r+0x22>

0800ba7c <__ssvfiscanf_r>:
 800ba7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba80:	460c      	mov	r4, r1
 800ba82:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800ba86:	2100      	movs	r1, #0
 800ba88:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800ba8c:	49a6      	ldr	r1, [pc, #664]	; (800bd28 <__ssvfiscanf_r+0x2ac>)
 800ba8e:	91a0      	str	r1, [sp, #640]	; 0x280
 800ba90:	f10d 0804 	add.w	r8, sp, #4
 800ba94:	49a5      	ldr	r1, [pc, #660]	; (800bd2c <__ssvfiscanf_r+0x2b0>)
 800ba96:	4fa6      	ldr	r7, [pc, #664]	; (800bd30 <__ssvfiscanf_r+0x2b4>)
 800ba98:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800bd34 <__ssvfiscanf_r+0x2b8>
 800ba9c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800baa0:	4606      	mov	r6, r0
 800baa2:	91a1      	str	r1, [sp, #644]	; 0x284
 800baa4:	9300      	str	r3, [sp, #0]
 800baa6:	7813      	ldrb	r3, [r2, #0]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	f000 815a 	beq.w	800bd62 <__ssvfiscanf_r+0x2e6>
 800baae:	5dd9      	ldrb	r1, [r3, r7]
 800bab0:	f011 0108 	ands.w	r1, r1, #8
 800bab4:	f102 0501 	add.w	r5, r2, #1
 800bab8:	d019      	beq.n	800baee <__ssvfiscanf_r+0x72>
 800baba:	6863      	ldr	r3, [r4, #4]
 800babc:	2b00      	cmp	r3, #0
 800babe:	dd0f      	ble.n	800bae0 <__ssvfiscanf_r+0x64>
 800bac0:	6823      	ldr	r3, [r4, #0]
 800bac2:	781a      	ldrb	r2, [r3, #0]
 800bac4:	5cba      	ldrb	r2, [r7, r2]
 800bac6:	0712      	lsls	r2, r2, #28
 800bac8:	d401      	bmi.n	800bace <__ssvfiscanf_r+0x52>
 800baca:	462a      	mov	r2, r5
 800bacc:	e7eb      	b.n	800baa6 <__ssvfiscanf_r+0x2a>
 800bace:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800bad0:	3201      	adds	r2, #1
 800bad2:	9245      	str	r2, [sp, #276]	; 0x114
 800bad4:	6862      	ldr	r2, [r4, #4]
 800bad6:	3301      	adds	r3, #1
 800bad8:	3a01      	subs	r2, #1
 800bada:	6062      	str	r2, [r4, #4]
 800badc:	6023      	str	r3, [r4, #0]
 800bade:	e7ec      	b.n	800baba <__ssvfiscanf_r+0x3e>
 800bae0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bae2:	4621      	mov	r1, r4
 800bae4:	4630      	mov	r0, r6
 800bae6:	4798      	blx	r3
 800bae8:	2800      	cmp	r0, #0
 800baea:	d0e9      	beq.n	800bac0 <__ssvfiscanf_r+0x44>
 800baec:	e7ed      	b.n	800baca <__ssvfiscanf_r+0x4e>
 800baee:	2b25      	cmp	r3, #37	; 0x25
 800baf0:	d012      	beq.n	800bb18 <__ssvfiscanf_r+0x9c>
 800baf2:	469a      	mov	sl, r3
 800baf4:	6863      	ldr	r3, [r4, #4]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	f340 8091 	ble.w	800bc1e <__ssvfiscanf_r+0x1a2>
 800bafc:	6822      	ldr	r2, [r4, #0]
 800bafe:	7813      	ldrb	r3, [r2, #0]
 800bb00:	4553      	cmp	r3, sl
 800bb02:	f040 812e 	bne.w	800bd62 <__ssvfiscanf_r+0x2e6>
 800bb06:	6863      	ldr	r3, [r4, #4]
 800bb08:	3b01      	subs	r3, #1
 800bb0a:	6063      	str	r3, [r4, #4]
 800bb0c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800bb0e:	3201      	adds	r2, #1
 800bb10:	3301      	adds	r3, #1
 800bb12:	6022      	str	r2, [r4, #0]
 800bb14:	9345      	str	r3, [sp, #276]	; 0x114
 800bb16:	e7d8      	b.n	800baca <__ssvfiscanf_r+0x4e>
 800bb18:	9141      	str	r1, [sp, #260]	; 0x104
 800bb1a:	9143      	str	r1, [sp, #268]	; 0x10c
 800bb1c:	7853      	ldrb	r3, [r2, #1]
 800bb1e:	2b2a      	cmp	r3, #42	; 0x2a
 800bb20:	bf02      	ittt	eq
 800bb22:	2310      	moveq	r3, #16
 800bb24:	1c95      	addeq	r5, r2, #2
 800bb26:	9341      	streq	r3, [sp, #260]	; 0x104
 800bb28:	220a      	movs	r2, #10
 800bb2a:	46aa      	mov	sl, r5
 800bb2c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800bb30:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800bb34:	2b09      	cmp	r3, #9
 800bb36:	d91d      	bls.n	800bb74 <__ssvfiscanf_r+0xf8>
 800bb38:	487e      	ldr	r0, [pc, #504]	; (800bd34 <__ssvfiscanf_r+0x2b8>)
 800bb3a:	2203      	movs	r2, #3
 800bb3c:	f7f4 fb60 	bl	8000200 <memchr>
 800bb40:	b140      	cbz	r0, 800bb54 <__ssvfiscanf_r+0xd8>
 800bb42:	2301      	movs	r3, #1
 800bb44:	eba0 0009 	sub.w	r0, r0, r9
 800bb48:	fa03 f000 	lsl.w	r0, r3, r0
 800bb4c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bb4e:	4318      	orrs	r0, r3
 800bb50:	9041      	str	r0, [sp, #260]	; 0x104
 800bb52:	4655      	mov	r5, sl
 800bb54:	f815 3b01 	ldrb.w	r3, [r5], #1
 800bb58:	2b78      	cmp	r3, #120	; 0x78
 800bb5a:	d806      	bhi.n	800bb6a <__ssvfiscanf_r+0xee>
 800bb5c:	2b57      	cmp	r3, #87	; 0x57
 800bb5e:	d810      	bhi.n	800bb82 <__ssvfiscanf_r+0x106>
 800bb60:	2b25      	cmp	r3, #37	; 0x25
 800bb62:	d0c6      	beq.n	800baf2 <__ssvfiscanf_r+0x76>
 800bb64:	d856      	bhi.n	800bc14 <__ssvfiscanf_r+0x198>
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d064      	beq.n	800bc34 <__ssvfiscanf_r+0x1b8>
 800bb6a:	2303      	movs	r3, #3
 800bb6c:	9347      	str	r3, [sp, #284]	; 0x11c
 800bb6e:	230a      	movs	r3, #10
 800bb70:	9342      	str	r3, [sp, #264]	; 0x108
 800bb72:	e071      	b.n	800bc58 <__ssvfiscanf_r+0x1dc>
 800bb74:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800bb76:	fb02 1103 	mla	r1, r2, r3, r1
 800bb7a:	3930      	subs	r1, #48	; 0x30
 800bb7c:	9143      	str	r1, [sp, #268]	; 0x10c
 800bb7e:	4655      	mov	r5, sl
 800bb80:	e7d3      	b.n	800bb2a <__ssvfiscanf_r+0xae>
 800bb82:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800bb86:	2a20      	cmp	r2, #32
 800bb88:	d8ef      	bhi.n	800bb6a <__ssvfiscanf_r+0xee>
 800bb8a:	a101      	add	r1, pc, #4	; (adr r1, 800bb90 <__ssvfiscanf_r+0x114>)
 800bb8c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800bb90:	0800bc43 	.word	0x0800bc43
 800bb94:	0800bb6b 	.word	0x0800bb6b
 800bb98:	0800bb6b 	.word	0x0800bb6b
 800bb9c:	0800bca1 	.word	0x0800bca1
 800bba0:	0800bb6b 	.word	0x0800bb6b
 800bba4:	0800bb6b 	.word	0x0800bb6b
 800bba8:	0800bb6b 	.word	0x0800bb6b
 800bbac:	0800bb6b 	.word	0x0800bb6b
 800bbb0:	0800bb6b 	.word	0x0800bb6b
 800bbb4:	0800bb6b 	.word	0x0800bb6b
 800bbb8:	0800bb6b 	.word	0x0800bb6b
 800bbbc:	0800bcb7 	.word	0x0800bcb7
 800bbc0:	0800bc8d 	.word	0x0800bc8d
 800bbc4:	0800bc1b 	.word	0x0800bc1b
 800bbc8:	0800bc1b 	.word	0x0800bc1b
 800bbcc:	0800bc1b 	.word	0x0800bc1b
 800bbd0:	0800bb6b 	.word	0x0800bb6b
 800bbd4:	0800bc91 	.word	0x0800bc91
 800bbd8:	0800bb6b 	.word	0x0800bb6b
 800bbdc:	0800bb6b 	.word	0x0800bb6b
 800bbe0:	0800bb6b 	.word	0x0800bb6b
 800bbe4:	0800bb6b 	.word	0x0800bb6b
 800bbe8:	0800bcc7 	.word	0x0800bcc7
 800bbec:	0800bc99 	.word	0x0800bc99
 800bbf0:	0800bc3b 	.word	0x0800bc3b
 800bbf4:	0800bb6b 	.word	0x0800bb6b
 800bbf8:	0800bb6b 	.word	0x0800bb6b
 800bbfc:	0800bcc3 	.word	0x0800bcc3
 800bc00:	0800bb6b 	.word	0x0800bb6b
 800bc04:	0800bc8d 	.word	0x0800bc8d
 800bc08:	0800bb6b 	.word	0x0800bb6b
 800bc0c:	0800bb6b 	.word	0x0800bb6b
 800bc10:	0800bc43 	.word	0x0800bc43
 800bc14:	3b45      	subs	r3, #69	; 0x45
 800bc16:	2b02      	cmp	r3, #2
 800bc18:	d8a7      	bhi.n	800bb6a <__ssvfiscanf_r+0xee>
 800bc1a:	2305      	movs	r3, #5
 800bc1c:	e01b      	b.n	800bc56 <__ssvfiscanf_r+0x1da>
 800bc1e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bc20:	4621      	mov	r1, r4
 800bc22:	4630      	mov	r0, r6
 800bc24:	4798      	blx	r3
 800bc26:	2800      	cmp	r0, #0
 800bc28:	f43f af68 	beq.w	800bafc <__ssvfiscanf_r+0x80>
 800bc2c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800bc2e:	2800      	cmp	r0, #0
 800bc30:	f040 808d 	bne.w	800bd4e <__ssvfiscanf_r+0x2d2>
 800bc34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bc38:	e08f      	b.n	800bd5a <__ssvfiscanf_r+0x2de>
 800bc3a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800bc3c:	f042 0220 	orr.w	r2, r2, #32
 800bc40:	9241      	str	r2, [sp, #260]	; 0x104
 800bc42:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800bc44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bc48:	9241      	str	r2, [sp, #260]	; 0x104
 800bc4a:	2210      	movs	r2, #16
 800bc4c:	2b6f      	cmp	r3, #111	; 0x6f
 800bc4e:	9242      	str	r2, [sp, #264]	; 0x108
 800bc50:	bf34      	ite	cc
 800bc52:	2303      	movcc	r3, #3
 800bc54:	2304      	movcs	r3, #4
 800bc56:	9347      	str	r3, [sp, #284]	; 0x11c
 800bc58:	6863      	ldr	r3, [r4, #4]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	dd42      	ble.n	800bce4 <__ssvfiscanf_r+0x268>
 800bc5e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bc60:	0659      	lsls	r1, r3, #25
 800bc62:	d404      	bmi.n	800bc6e <__ssvfiscanf_r+0x1f2>
 800bc64:	6823      	ldr	r3, [r4, #0]
 800bc66:	781a      	ldrb	r2, [r3, #0]
 800bc68:	5cba      	ldrb	r2, [r7, r2]
 800bc6a:	0712      	lsls	r2, r2, #28
 800bc6c:	d441      	bmi.n	800bcf2 <__ssvfiscanf_r+0x276>
 800bc6e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800bc70:	2b02      	cmp	r3, #2
 800bc72:	dc50      	bgt.n	800bd16 <__ssvfiscanf_r+0x29a>
 800bc74:	466b      	mov	r3, sp
 800bc76:	4622      	mov	r2, r4
 800bc78:	a941      	add	r1, sp, #260	; 0x104
 800bc7a:	4630      	mov	r0, r6
 800bc7c:	f000 f9d0 	bl	800c020 <_scanf_chars>
 800bc80:	2801      	cmp	r0, #1
 800bc82:	d06e      	beq.n	800bd62 <__ssvfiscanf_r+0x2e6>
 800bc84:	2802      	cmp	r0, #2
 800bc86:	f47f af20 	bne.w	800baca <__ssvfiscanf_r+0x4e>
 800bc8a:	e7cf      	b.n	800bc2c <__ssvfiscanf_r+0x1b0>
 800bc8c:	220a      	movs	r2, #10
 800bc8e:	e7dd      	b.n	800bc4c <__ssvfiscanf_r+0x1d0>
 800bc90:	2300      	movs	r3, #0
 800bc92:	9342      	str	r3, [sp, #264]	; 0x108
 800bc94:	2303      	movs	r3, #3
 800bc96:	e7de      	b.n	800bc56 <__ssvfiscanf_r+0x1da>
 800bc98:	2308      	movs	r3, #8
 800bc9a:	9342      	str	r3, [sp, #264]	; 0x108
 800bc9c:	2304      	movs	r3, #4
 800bc9e:	e7da      	b.n	800bc56 <__ssvfiscanf_r+0x1da>
 800bca0:	4629      	mov	r1, r5
 800bca2:	4640      	mov	r0, r8
 800bca4:	f000 fb68 	bl	800c378 <__sccl>
 800bca8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bcaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bcae:	9341      	str	r3, [sp, #260]	; 0x104
 800bcb0:	4605      	mov	r5, r0
 800bcb2:	2301      	movs	r3, #1
 800bcb4:	e7cf      	b.n	800bc56 <__ssvfiscanf_r+0x1da>
 800bcb6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bcb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bcbc:	9341      	str	r3, [sp, #260]	; 0x104
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	e7c9      	b.n	800bc56 <__ssvfiscanf_r+0x1da>
 800bcc2:	2302      	movs	r3, #2
 800bcc4:	e7c7      	b.n	800bc56 <__ssvfiscanf_r+0x1da>
 800bcc6:	9841      	ldr	r0, [sp, #260]	; 0x104
 800bcc8:	06c3      	lsls	r3, r0, #27
 800bcca:	f53f aefe 	bmi.w	800baca <__ssvfiscanf_r+0x4e>
 800bcce:	9b00      	ldr	r3, [sp, #0]
 800bcd0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800bcd2:	1d19      	adds	r1, r3, #4
 800bcd4:	9100      	str	r1, [sp, #0]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	f010 0f01 	tst.w	r0, #1
 800bcdc:	bf14      	ite	ne
 800bcde:	801a      	strhne	r2, [r3, #0]
 800bce0:	601a      	streq	r2, [r3, #0]
 800bce2:	e6f2      	b.n	800baca <__ssvfiscanf_r+0x4e>
 800bce4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bce6:	4621      	mov	r1, r4
 800bce8:	4630      	mov	r0, r6
 800bcea:	4798      	blx	r3
 800bcec:	2800      	cmp	r0, #0
 800bcee:	d0b6      	beq.n	800bc5e <__ssvfiscanf_r+0x1e2>
 800bcf0:	e79c      	b.n	800bc2c <__ssvfiscanf_r+0x1b0>
 800bcf2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800bcf4:	3201      	adds	r2, #1
 800bcf6:	9245      	str	r2, [sp, #276]	; 0x114
 800bcf8:	6862      	ldr	r2, [r4, #4]
 800bcfa:	3a01      	subs	r2, #1
 800bcfc:	2a00      	cmp	r2, #0
 800bcfe:	6062      	str	r2, [r4, #4]
 800bd00:	dd02      	ble.n	800bd08 <__ssvfiscanf_r+0x28c>
 800bd02:	3301      	adds	r3, #1
 800bd04:	6023      	str	r3, [r4, #0]
 800bd06:	e7ad      	b.n	800bc64 <__ssvfiscanf_r+0x1e8>
 800bd08:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bd0a:	4621      	mov	r1, r4
 800bd0c:	4630      	mov	r0, r6
 800bd0e:	4798      	blx	r3
 800bd10:	2800      	cmp	r0, #0
 800bd12:	d0a7      	beq.n	800bc64 <__ssvfiscanf_r+0x1e8>
 800bd14:	e78a      	b.n	800bc2c <__ssvfiscanf_r+0x1b0>
 800bd16:	2b04      	cmp	r3, #4
 800bd18:	dc0e      	bgt.n	800bd38 <__ssvfiscanf_r+0x2bc>
 800bd1a:	466b      	mov	r3, sp
 800bd1c:	4622      	mov	r2, r4
 800bd1e:	a941      	add	r1, sp, #260	; 0x104
 800bd20:	4630      	mov	r0, r6
 800bd22:	f000 f9d7 	bl	800c0d4 <_scanf_i>
 800bd26:	e7ab      	b.n	800bc80 <__ssvfiscanf_r+0x204>
 800bd28:	0800b9c9 	.word	0x0800b9c9
 800bd2c:	0800ba43 	.word	0x0800ba43
 800bd30:	08012d91 	.word	0x08012d91
 800bd34:	08012b7c 	.word	0x08012b7c
 800bd38:	4b0b      	ldr	r3, [pc, #44]	; (800bd68 <__ssvfiscanf_r+0x2ec>)
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	f43f aec5 	beq.w	800baca <__ssvfiscanf_r+0x4e>
 800bd40:	466b      	mov	r3, sp
 800bd42:	4622      	mov	r2, r4
 800bd44:	a941      	add	r1, sp, #260	; 0x104
 800bd46:	4630      	mov	r0, r6
 800bd48:	f3af 8000 	nop.w
 800bd4c:	e798      	b.n	800bc80 <__ssvfiscanf_r+0x204>
 800bd4e:	89a3      	ldrh	r3, [r4, #12]
 800bd50:	f013 0f40 	tst.w	r3, #64	; 0x40
 800bd54:	bf18      	it	ne
 800bd56:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800bd5a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800bd5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd62:	9844      	ldr	r0, [sp, #272]	; 0x110
 800bd64:	e7f9      	b.n	800bd5a <__ssvfiscanf_r+0x2de>
 800bd66:	bf00      	nop
 800bd68:	00000000 	.word	0x00000000

0800bd6c <__sfputc_r>:
 800bd6c:	6893      	ldr	r3, [r2, #8]
 800bd6e:	3b01      	subs	r3, #1
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	b410      	push	{r4}
 800bd74:	6093      	str	r3, [r2, #8]
 800bd76:	da08      	bge.n	800bd8a <__sfputc_r+0x1e>
 800bd78:	6994      	ldr	r4, [r2, #24]
 800bd7a:	42a3      	cmp	r3, r4
 800bd7c:	db01      	blt.n	800bd82 <__sfputc_r+0x16>
 800bd7e:	290a      	cmp	r1, #10
 800bd80:	d103      	bne.n	800bd8a <__sfputc_r+0x1e>
 800bd82:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd86:	f7fe bae5 	b.w	800a354 <__swbuf_r>
 800bd8a:	6813      	ldr	r3, [r2, #0]
 800bd8c:	1c58      	adds	r0, r3, #1
 800bd8e:	6010      	str	r0, [r2, #0]
 800bd90:	7019      	strb	r1, [r3, #0]
 800bd92:	4608      	mov	r0, r1
 800bd94:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd98:	4770      	bx	lr

0800bd9a <__sfputs_r>:
 800bd9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd9c:	4606      	mov	r6, r0
 800bd9e:	460f      	mov	r7, r1
 800bda0:	4614      	mov	r4, r2
 800bda2:	18d5      	adds	r5, r2, r3
 800bda4:	42ac      	cmp	r4, r5
 800bda6:	d101      	bne.n	800bdac <__sfputs_r+0x12>
 800bda8:	2000      	movs	r0, #0
 800bdaa:	e007      	b.n	800bdbc <__sfputs_r+0x22>
 800bdac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdb0:	463a      	mov	r2, r7
 800bdb2:	4630      	mov	r0, r6
 800bdb4:	f7ff ffda 	bl	800bd6c <__sfputc_r>
 800bdb8:	1c43      	adds	r3, r0, #1
 800bdba:	d1f3      	bne.n	800bda4 <__sfputs_r+0xa>
 800bdbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bdc0 <_vfiprintf_r>:
 800bdc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdc4:	460d      	mov	r5, r1
 800bdc6:	b09d      	sub	sp, #116	; 0x74
 800bdc8:	4614      	mov	r4, r2
 800bdca:	4698      	mov	r8, r3
 800bdcc:	4606      	mov	r6, r0
 800bdce:	b118      	cbz	r0, 800bdd8 <_vfiprintf_r+0x18>
 800bdd0:	6983      	ldr	r3, [r0, #24]
 800bdd2:	b90b      	cbnz	r3, 800bdd8 <_vfiprintf_r+0x18>
 800bdd4:	f7fd fab8 	bl	8009348 <__sinit>
 800bdd8:	4b89      	ldr	r3, [pc, #548]	; (800c000 <_vfiprintf_r+0x240>)
 800bdda:	429d      	cmp	r5, r3
 800bddc:	d11b      	bne.n	800be16 <_vfiprintf_r+0x56>
 800bdde:	6875      	ldr	r5, [r6, #4]
 800bde0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bde2:	07d9      	lsls	r1, r3, #31
 800bde4:	d405      	bmi.n	800bdf2 <_vfiprintf_r+0x32>
 800bde6:	89ab      	ldrh	r3, [r5, #12]
 800bde8:	059a      	lsls	r2, r3, #22
 800bdea:	d402      	bmi.n	800bdf2 <_vfiprintf_r+0x32>
 800bdec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bdee:	f7fd fb6e 	bl	80094ce <__retarget_lock_acquire_recursive>
 800bdf2:	89ab      	ldrh	r3, [r5, #12]
 800bdf4:	071b      	lsls	r3, r3, #28
 800bdf6:	d501      	bpl.n	800bdfc <_vfiprintf_r+0x3c>
 800bdf8:	692b      	ldr	r3, [r5, #16]
 800bdfa:	b9eb      	cbnz	r3, 800be38 <_vfiprintf_r+0x78>
 800bdfc:	4629      	mov	r1, r5
 800bdfe:	4630      	mov	r0, r6
 800be00:	f7fe fb0c 	bl	800a41c <__swsetup_r>
 800be04:	b1c0      	cbz	r0, 800be38 <_vfiprintf_r+0x78>
 800be06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800be08:	07dc      	lsls	r4, r3, #31
 800be0a:	d50e      	bpl.n	800be2a <_vfiprintf_r+0x6a>
 800be0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800be10:	b01d      	add	sp, #116	; 0x74
 800be12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be16:	4b7b      	ldr	r3, [pc, #492]	; (800c004 <_vfiprintf_r+0x244>)
 800be18:	429d      	cmp	r5, r3
 800be1a:	d101      	bne.n	800be20 <_vfiprintf_r+0x60>
 800be1c:	68b5      	ldr	r5, [r6, #8]
 800be1e:	e7df      	b.n	800bde0 <_vfiprintf_r+0x20>
 800be20:	4b79      	ldr	r3, [pc, #484]	; (800c008 <_vfiprintf_r+0x248>)
 800be22:	429d      	cmp	r5, r3
 800be24:	bf08      	it	eq
 800be26:	68f5      	ldreq	r5, [r6, #12]
 800be28:	e7da      	b.n	800bde0 <_vfiprintf_r+0x20>
 800be2a:	89ab      	ldrh	r3, [r5, #12]
 800be2c:	0598      	lsls	r0, r3, #22
 800be2e:	d4ed      	bmi.n	800be0c <_vfiprintf_r+0x4c>
 800be30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be32:	f7fd fb4d 	bl	80094d0 <__retarget_lock_release_recursive>
 800be36:	e7e9      	b.n	800be0c <_vfiprintf_r+0x4c>
 800be38:	2300      	movs	r3, #0
 800be3a:	9309      	str	r3, [sp, #36]	; 0x24
 800be3c:	2320      	movs	r3, #32
 800be3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800be42:	f8cd 800c 	str.w	r8, [sp, #12]
 800be46:	2330      	movs	r3, #48	; 0x30
 800be48:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c00c <_vfiprintf_r+0x24c>
 800be4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800be50:	f04f 0901 	mov.w	r9, #1
 800be54:	4623      	mov	r3, r4
 800be56:	469a      	mov	sl, r3
 800be58:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be5c:	b10a      	cbz	r2, 800be62 <_vfiprintf_r+0xa2>
 800be5e:	2a25      	cmp	r2, #37	; 0x25
 800be60:	d1f9      	bne.n	800be56 <_vfiprintf_r+0x96>
 800be62:	ebba 0b04 	subs.w	fp, sl, r4
 800be66:	d00b      	beq.n	800be80 <_vfiprintf_r+0xc0>
 800be68:	465b      	mov	r3, fp
 800be6a:	4622      	mov	r2, r4
 800be6c:	4629      	mov	r1, r5
 800be6e:	4630      	mov	r0, r6
 800be70:	f7ff ff93 	bl	800bd9a <__sfputs_r>
 800be74:	3001      	adds	r0, #1
 800be76:	f000 80aa 	beq.w	800bfce <_vfiprintf_r+0x20e>
 800be7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800be7c:	445a      	add	r2, fp
 800be7e:	9209      	str	r2, [sp, #36]	; 0x24
 800be80:	f89a 3000 	ldrb.w	r3, [sl]
 800be84:	2b00      	cmp	r3, #0
 800be86:	f000 80a2 	beq.w	800bfce <_vfiprintf_r+0x20e>
 800be8a:	2300      	movs	r3, #0
 800be8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800be90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800be94:	f10a 0a01 	add.w	sl, sl, #1
 800be98:	9304      	str	r3, [sp, #16]
 800be9a:	9307      	str	r3, [sp, #28]
 800be9c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bea0:	931a      	str	r3, [sp, #104]	; 0x68
 800bea2:	4654      	mov	r4, sl
 800bea4:	2205      	movs	r2, #5
 800bea6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800beaa:	4858      	ldr	r0, [pc, #352]	; (800c00c <_vfiprintf_r+0x24c>)
 800beac:	f7f4 f9a8 	bl	8000200 <memchr>
 800beb0:	9a04      	ldr	r2, [sp, #16]
 800beb2:	b9d8      	cbnz	r0, 800beec <_vfiprintf_r+0x12c>
 800beb4:	06d1      	lsls	r1, r2, #27
 800beb6:	bf44      	itt	mi
 800beb8:	2320      	movmi	r3, #32
 800beba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bebe:	0713      	lsls	r3, r2, #28
 800bec0:	bf44      	itt	mi
 800bec2:	232b      	movmi	r3, #43	; 0x2b
 800bec4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bec8:	f89a 3000 	ldrb.w	r3, [sl]
 800becc:	2b2a      	cmp	r3, #42	; 0x2a
 800bece:	d015      	beq.n	800befc <_vfiprintf_r+0x13c>
 800bed0:	9a07      	ldr	r2, [sp, #28]
 800bed2:	4654      	mov	r4, sl
 800bed4:	2000      	movs	r0, #0
 800bed6:	f04f 0c0a 	mov.w	ip, #10
 800beda:	4621      	mov	r1, r4
 800bedc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bee0:	3b30      	subs	r3, #48	; 0x30
 800bee2:	2b09      	cmp	r3, #9
 800bee4:	d94e      	bls.n	800bf84 <_vfiprintf_r+0x1c4>
 800bee6:	b1b0      	cbz	r0, 800bf16 <_vfiprintf_r+0x156>
 800bee8:	9207      	str	r2, [sp, #28]
 800beea:	e014      	b.n	800bf16 <_vfiprintf_r+0x156>
 800beec:	eba0 0308 	sub.w	r3, r0, r8
 800bef0:	fa09 f303 	lsl.w	r3, r9, r3
 800bef4:	4313      	orrs	r3, r2
 800bef6:	9304      	str	r3, [sp, #16]
 800bef8:	46a2      	mov	sl, r4
 800befa:	e7d2      	b.n	800bea2 <_vfiprintf_r+0xe2>
 800befc:	9b03      	ldr	r3, [sp, #12]
 800befe:	1d19      	adds	r1, r3, #4
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	9103      	str	r1, [sp, #12]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	bfbb      	ittet	lt
 800bf08:	425b      	neglt	r3, r3
 800bf0a:	f042 0202 	orrlt.w	r2, r2, #2
 800bf0e:	9307      	strge	r3, [sp, #28]
 800bf10:	9307      	strlt	r3, [sp, #28]
 800bf12:	bfb8      	it	lt
 800bf14:	9204      	strlt	r2, [sp, #16]
 800bf16:	7823      	ldrb	r3, [r4, #0]
 800bf18:	2b2e      	cmp	r3, #46	; 0x2e
 800bf1a:	d10c      	bne.n	800bf36 <_vfiprintf_r+0x176>
 800bf1c:	7863      	ldrb	r3, [r4, #1]
 800bf1e:	2b2a      	cmp	r3, #42	; 0x2a
 800bf20:	d135      	bne.n	800bf8e <_vfiprintf_r+0x1ce>
 800bf22:	9b03      	ldr	r3, [sp, #12]
 800bf24:	1d1a      	adds	r2, r3, #4
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	9203      	str	r2, [sp, #12]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	bfb8      	it	lt
 800bf2e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800bf32:	3402      	adds	r4, #2
 800bf34:	9305      	str	r3, [sp, #20]
 800bf36:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c01c <_vfiprintf_r+0x25c>
 800bf3a:	7821      	ldrb	r1, [r4, #0]
 800bf3c:	2203      	movs	r2, #3
 800bf3e:	4650      	mov	r0, sl
 800bf40:	f7f4 f95e 	bl	8000200 <memchr>
 800bf44:	b140      	cbz	r0, 800bf58 <_vfiprintf_r+0x198>
 800bf46:	2340      	movs	r3, #64	; 0x40
 800bf48:	eba0 000a 	sub.w	r0, r0, sl
 800bf4c:	fa03 f000 	lsl.w	r0, r3, r0
 800bf50:	9b04      	ldr	r3, [sp, #16]
 800bf52:	4303      	orrs	r3, r0
 800bf54:	3401      	adds	r4, #1
 800bf56:	9304      	str	r3, [sp, #16]
 800bf58:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf5c:	482c      	ldr	r0, [pc, #176]	; (800c010 <_vfiprintf_r+0x250>)
 800bf5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bf62:	2206      	movs	r2, #6
 800bf64:	f7f4 f94c 	bl	8000200 <memchr>
 800bf68:	2800      	cmp	r0, #0
 800bf6a:	d03f      	beq.n	800bfec <_vfiprintf_r+0x22c>
 800bf6c:	4b29      	ldr	r3, [pc, #164]	; (800c014 <_vfiprintf_r+0x254>)
 800bf6e:	bb1b      	cbnz	r3, 800bfb8 <_vfiprintf_r+0x1f8>
 800bf70:	9b03      	ldr	r3, [sp, #12]
 800bf72:	3307      	adds	r3, #7
 800bf74:	f023 0307 	bic.w	r3, r3, #7
 800bf78:	3308      	adds	r3, #8
 800bf7a:	9303      	str	r3, [sp, #12]
 800bf7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf7e:	443b      	add	r3, r7
 800bf80:	9309      	str	r3, [sp, #36]	; 0x24
 800bf82:	e767      	b.n	800be54 <_vfiprintf_r+0x94>
 800bf84:	fb0c 3202 	mla	r2, ip, r2, r3
 800bf88:	460c      	mov	r4, r1
 800bf8a:	2001      	movs	r0, #1
 800bf8c:	e7a5      	b.n	800beda <_vfiprintf_r+0x11a>
 800bf8e:	2300      	movs	r3, #0
 800bf90:	3401      	adds	r4, #1
 800bf92:	9305      	str	r3, [sp, #20]
 800bf94:	4619      	mov	r1, r3
 800bf96:	f04f 0c0a 	mov.w	ip, #10
 800bf9a:	4620      	mov	r0, r4
 800bf9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bfa0:	3a30      	subs	r2, #48	; 0x30
 800bfa2:	2a09      	cmp	r2, #9
 800bfa4:	d903      	bls.n	800bfae <_vfiprintf_r+0x1ee>
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d0c5      	beq.n	800bf36 <_vfiprintf_r+0x176>
 800bfaa:	9105      	str	r1, [sp, #20]
 800bfac:	e7c3      	b.n	800bf36 <_vfiprintf_r+0x176>
 800bfae:	fb0c 2101 	mla	r1, ip, r1, r2
 800bfb2:	4604      	mov	r4, r0
 800bfb4:	2301      	movs	r3, #1
 800bfb6:	e7f0      	b.n	800bf9a <_vfiprintf_r+0x1da>
 800bfb8:	ab03      	add	r3, sp, #12
 800bfba:	9300      	str	r3, [sp, #0]
 800bfbc:	462a      	mov	r2, r5
 800bfbe:	4b16      	ldr	r3, [pc, #88]	; (800c018 <_vfiprintf_r+0x258>)
 800bfc0:	a904      	add	r1, sp, #16
 800bfc2:	4630      	mov	r0, r6
 800bfc4:	f7fd fc90 	bl	80098e8 <_printf_float>
 800bfc8:	4607      	mov	r7, r0
 800bfca:	1c78      	adds	r0, r7, #1
 800bfcc:	d1d6      	bne.n	800bf7c <_vfiprintf_r+0x1bc>
 800bfce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bfd0:	07d9      	lsls	r1, r3, #31
 800bfd2:	d405      	bmi.n	800bfe0 <_vfiprintf_r+0x220>
 800bfd4:	89ab      	ldrh	r3, [r5, #12]
 800bfd6:	059a      	lsls	r2, r3, #22
 800bfd8:	d402      	bmi.n	800bfe0 <_vfiprintf_r+0x220>
 800bfda:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bfdc:	f7fd fa78 	bl	80094d0 <__retarget_lock_release_recursive>
 800bfe0:	89ab      	ldrh	r3, [r5, #12]
 800bfe2:	065b      	lsls	r3, r3, #25
 800bfe4:	f53f af12 	bmi.w	800be0c <_vfiprintf_r+0x4c>
 800bfe8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bfea:	e711      	b.n	800be10 <_vfiprintf_r+0x50>
 800bfec:	ab03      	add	r3, sp, #12
 800bfee:	9300      	str	r3, [sp, #0]
 800bff0:	462a      	mov	r2, r5
 800bff2:	4b09      	ldr	r3, [pc, #36]	; (800c018 <_vfiprintf_r+0x258>)
 800bff4:	a904      	add	r1, sp, #16
 800bff6:	4630      	mov	r0, r6
 800bff8:	f7fd ff1a 	bl	8009e30 <_printf_i>
 800bffc:	e7e4      	b.n	800bfc8 <_vfiprintf_r+0x208>
 800bffe:	bf00      	nop
 800c000:	08012918 	.word	0x08012918
 800c004:	08012938 	.word	0x08012938
 800c008:	080128f8 	.word	0x080128f8
 800c00c:	08012b80 	.word	0x08012b80
 800c010:	08012b86 	.word	0x08012b86
 800c014:	080098e9 	.word	0x080098e9
 800c018:	0800bd9b 	.word	0x0800bd9b
 800c01c:	08012b7c 	.word	0x08012b7c

0800c020 <_scanf_chars>:
 800c020:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c024:	4615      	mov	r5, r2
 800c026:	688a      	ldr	r2, [r1, #8]
 800c028:	4680      	mov	r8, r0
 800c02a:	460c      	mov	r4, r1
 800c02c:	b932      	cbnz	r2, 800c03c <_scanf_chars+0x1c>
 800c02e:	698a      	ldr	r2, [r1, #24]
 800c030:	2a00      	cmp	r2, #0
 800c032:	bf0c      	ite	eq
 800c034:	2201      	moveq	r2, #1
 800c036:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 800c03a:	608a      	str	r2, [r1, #8]
 800c03c:	6822      	ldr	r2, [r4, #0]
 800c03e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800c0d0 <_scanf_chars+0xb0>
 800c042:	06d1      	lsls	r1, r2, #27
 800c044:	bf5f      	itttt	pl
 800c046:	681a      	ldrpl	r2, [r3, #0]
 800c048:	1d11      	addpl	r1, r2, #4
 800c04a:	6019      	strpl	r1, [r3, #0]
 800c04c:	6816      	ldrpl	r6, [r2, #0]
 800c04e:	2700      	movs	r7, #0
 800c050:	69a0      	ldr	r0, [r4, #24]
 800c052:	b188      	cbz	r0, 800c078 <_scanf_chars+0x58>
 800c054:	2801      	cmp	r0, #1
 800c056:	d107      	bne.n	800c068 <_scanf_chars+0x48>
 800c058:	682a      	ldr	r2, [r5, #0]
 800c05a:	7811      	ldrb	r1, [r2, #0]
 800c05c:	6962      	ldr	r2, [r4, #20]
 800c05e:	5c52      	ldrb	r2, [r2, r1]
 800c060:	b952      	cbnz	r2, 800c078 <_scanf_chars+0x58>
 800c062:	2f00      	cmp	r7, #0
 800c064:	d031      	beq.n	800c0ca <_scanf_chars+0xaa>
 800c066:	e022      	b.n	800c0ae <_scanf_chars+0x8e>
 800c068:	2802      	cmp	r0, #2
 800c06a:	d120      	bne.n	800c0ae <_scanf_chars+0x8e>
 800c06c:	682b      	ldr	r3, [r5, #0]
 800c06e:	781b      	ldrb	r3, [r3, #0]
 800c070:	f813 3009 	ldrb.w	r3, [r3, r9]
 800c074:	071b      	lsls	r3, r3, #28
 800c076:	d41a      	bmi.n	800c0ae <_scanf_chars+0x8e>
 800c078:	6823      	ldr	r3, [r4, #0]
 800c07a:	06da      	lsls	r2, r3, #27
 800c07c:	bf5e      	ittt	pl
 800c07e:	682b      	ldrpl	r3, [r5, #0]
 800c080:	781b      	ldrbpl	r3, [r3, #0]
 800c082:	f806 3b01 	strbpl.w	r3, [r6], #1
 800c086:	682a      	ldr	r2, [r5, #0]
 800c088:	686b      	ldr	r3, [r5, #4]
 800c08a:	3201      	adds	r2, #1
 800c08c:	602a      	str	r2, [r5, #0]
 800c08e:	68a2      	ldr	r2, [r4, #8]
 800c090:	3b01      	subs	r3, #1
 800c092:	3a01      	subs	r2, #1
 800c094:	606b      	str	r3, [r5, #4]
 800c096:	3701      	adds	r7, #1
 800c098:	60a2      	str	r2, [r4, #8]
 800c09a:	b142      	cbz	r2, 800c0ae <_scanf_chars+0x8e>
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	dcd7      	bgt.n	800c050 <_scanf_chars+0x30>
 800c0a0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c0a4:	4629      	mov	r1, r5
 800c0a6:	4640      	mov	r0, r8
 800c0a8:	4798      	blx	r3
 800c0aa:	2800      	cmp	r0, #0
 800c0ac:	d0d0      	beq.n	800c050 <_scanf_chars+0x30>
 800c0ae:	6823      	ldr	r3, [r4, #0]
 800c0b0:	f013 0310 	ands.w	r3, r3, #16
 800c0b4:	d105      	bne.n	800c0c2 <_scanf_chars+0xa2>
 800c0b6:	68e2      	ldr	r2, [r4, #12]
 800c0b8:	3201      	adds	r2, #1
 800c0ba:	60e2      	str	r2, [r4, #12]
 800c0bc:	69a2      	ldr	r2, [r4, #24]
 800c0be:	b102      	cbz	r2, 800c0c2 <_scanf_chars+0xa2>
 800c0c0:	7033      	strb	r3, [r6, #0]
 800c0c2:	6923      	ldr	r3, [r4, #16]
 800c0c4:	443b      	add	r3, r7
 800c0c6:	6123      	str	r3, [r4, #16]
 800c0c8:	2000      	movs	r0, #0
 800c0ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0ce:	bf00      	nop
 800c0d0:	08012d91 	.word	0x08012d91

0800c0d4 <_scanf_i>:
 800c0d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0d8:	4698      	mov	r8, r3
 800c0da:	4b76      	ldr	r3, [pc, #472]	; (800c2b4 <_scanf_i+0x1e0>)
 800c0dc:	460c      	mov	r4, r1
 800c0de:	4682      	mov	sl, r0
 800c0e0:	4616      	mov	r6, r2
 800c0e2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c0e6:	b087      	sub	sp, #28
 800c0e8:	ab03      	add	r3, sp, #12
 800c0ea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c0ee:	4b72      	ldr	r3, [pc, #456]	; (800c2b8 <_scanf_i+0x1e4>)
 800c0f0:	69a1      	ldr	r1, [r4, #24]
 800c0f2:	4a72      	ldr	r2, [pc, #456]	; (800c2bc <_scanf_i+0x1e8>)
 800c0f4:	2903      	cmp	r1, #3
 800c0f6:	bf18      	it	ne
 800c0f8:	461a      	movne	r2, r3
 800c0fa:	68a3      	ldr	r3, [r4, #8]
 800c0fc:	9201      	str	r2, [sp, #4]
 800c0fe:	1e5a      	subs	r2, r3, #1
 800c100:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c104:	bf88      	it	hi
 800c106:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c10a:	4627      	mov	r7, r4
 800c10c:	bf82      	ittt	hi
 800c10e:	eb03 0905 	addhi.w	r9, r3, r5
 800c112:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c116:	60a3      	strhi	r3, [r4, #8]
 800c118:	f857 3b1c 	ldr.w	r3, [r7], #28
 800c11c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800c120:	bf98      	it	ls
 800c122:	f04f 0900 	movls.w	r9, #0
 800c126:	6023      	str	r3, [r4, #0]
 800c128:	463d      	mov	r5, r7
 800c12a:	f04f 0b00 	mov.w	fp, #0
 800c12e:	6831      	ldr	r1, [r6, #0]
 800c130:	ab03      	add	r3, sp, #12
 800c132:	7809      	ldrb	r1, [r1, #0]
 800c134:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800c138:	2202      	movs	r2, #2
 800c13a:	f7f4 f861 	bl	8000200 <memchr>
 800c13e:	b328      	cbz	r0, 800c18c <_scanf_i+0xb8>
 800c140:	f1bb 0f01 	cmp.w	fp, #1
 800c144:	d159      	bne.n	800c1fa <_scanf_i+0x126>
 800c146:	6862      	ldr	r2, [r4, #4]
 800c148:	b92a      	cbnz	r2, 800c156 <_scanf_i+0x82>
 800c14a:	6822      	ldr	r2, [r4, #0]
 800c14c:	2308      	movs	r3, #8
 800c14e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c152:	6063      	str	r3, [r4, #4]
 800c154:	6022      	str	r2, [r4, #0]
 800c156:	6822      	ldr	r2, [r4, #0]
 800c158:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800c15c:	6022      	str	r2, [r4, #0]
 800c15e:	68a2      	ldr	r2, [r4, #8]
 800c160:	1e51      	subs	r1, r2, #1
 800c162:	60a1      	str	r1, [r4, #8]
 800c164:	b192      	cbz	r2, 800c18c <_scanf_i+0xb8>
 800c166:	6832      	ldr	r2, [r6, #0]
 800c168:	1c51      	adds	r1, r2, #1
 800c16a:	6031      	str	r1, [r6, #0]
 800c16c:	7812      	ldrb	r2, [r2, #0]
 800c16e:	f805 2b01 	strb.w	r2, [r5], #1
 800c172:	6872      	ldr	r2, [r6, #4]
 800c174:	3a01      	subs	r2, #1
 800c176:	2a00      	cmp	r2, #0
 800c178:	6072      	str	r2, [r6, #4]
 800c17a:	dc07      	bgt.n	800c18c <_scanf_i+0xb8>
 800c17c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800c180:	4631      	mov	r1, r6
 800c182:	4650      	mov	r0, sl
 800c184:	4790      	blx	r2
 800c186:	2800      	cmp	r0, #0
 800c188:	f040 8085 	bne.w	800c296 <_scanf_i+0x1c2>
 800c18c:	f10b 0b01 	add.w	fp, fp, #1
 800c190:	f1bb 0f03 	cmp.w	fp, #3
 800c194:	d1cb      	bne.n	800c12e <_scanf_i+0x5a>
 800c196:	6863      	ldr	r3, [r4, #4]
 800c198:	b90b      	cbnz	r3, 800c19e <_scanf_i+0xca>
 800c19a:	230a      	movs	r3, #10
 800c19c:	6063      	str	r3, [r4, #4]
 800c19e:	6863      	ldr	r3, [r4, #4]
 800c1a0:	4947      	ldr	r1, [pc, #284]	; (800c2c0 <_scanf_i+0x1ec>)
 800c1a2:	6960      	ldr	r0, [r4, #20]
 800c1a4:	1ac9      	subs	r1, r1, r3
 800c1a6:	f000 f8e7 	bl	800c378 <__sccl>
 800c1aa:	f04f 0b00 	mov.w	fp, #0
 800c1ae:	68a3      	ldr	r3, [r4, #8]
 800c1b0:	6822      	ldr	r2, [r4, #0]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d03d      	beq.n	800c232 <_scanf_i+0x15e>
 800c1b6:	6831      	ldr	r1, [r6, #0]
 800c1b8:	6960      	ldr	r0, [r4, #20]
 800c1ba:	f891 c000 	ldrb.w	ip, [r1]
 800c1be:	f810 000c 	ldrb.w	r0, [r0, ip]
 800c1c2:	2800      	cmp	r0, #0
 800c1c4:	d035      	beq.n	800c232 <_scanf_i+0x15e>
 800c1c6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800c1ca:	d124      	bne.n	800c216 <_scanf_i+0x142>
 800c1cc:	0510      	lsls	r0, r2, #20
 800c1ce:	d522      	bpl.n	800c216 <_scanf_i+0x142>
 800c1d0:	f10b 0b01 	add.w	fp, fp, #1
 800c1d4:	f1b9 0f00 	cmp.w	r9, #0
 800c1d8:	d003      	beq.n	800c1e2 <_scanf_i+0x10e>
 800c1da:	3301      	adds	r3, #1
 800c1dc:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800c1e0:	60a3      	str	r3, [r4, #8]
 800c1e2:	6873      	ldr	r3, [r6, #4]
 800c1e4:	3b01      	subs	r3, #1
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	6073      	str	r3, [r6, #4]
 800c1ea:	dd1b      	ble.n	800c224 <_scanf_i+0x150>
 800c1ec:	6833      	ldr	r3, [r6, #0]
 800c1ee:	3301      	adds	r3, #1
 800c1f0:	6033      	str	r3, [r6, #0]
 800c1f2:	68a3      	ldr	r3, [r4, #8]
 800c1f4:	3b01      	subs	r3, #1
 800c1f6:	60a3      	str	r3, [r4, #8]
 800c1f8:	e7d9      	b.n	800c1ae <_scanf_i+0xda>
 800c1fa:	f1bb 0f02 	cmp.w	fp, #2
 800c1fe:	d1ae      	bne.n	800c15e <_scanf_i+0x8a>
 800c200:	6822      	ldr	r2, [r4, #0]
 800c202:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800c206:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800c20a:	d1bf      	bne.n	800c18c <_scanf_i+0xb8>
 800c20c:	2310      	movs	r3, #16
 800c20e:	6063      	str	r3, [r4, #4]
 800c210:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c214:	e7a2      	b.n	800c15c <_scanf_i+0x88>
 800c216:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800c21a:	6022      	str	r2, [r4, #0]
 800c21c:	780b      	ldrb	r3, [r1, #0]
 800c21e:	f805 3b01 	strb.w	r3, [r5], #1
 800c222:	e7de      	b.n	800c1e2 <_scanf_i+0x10e>
 800c224:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c228:	4631      	mov	r1, r6
 800c22a:	4650      	mov	r0, sl
 800c22c:	4798      	blx	r3
 800c22e:	2800      	cmp	r0, #0
 800c230:	d0df      	beq.n	800c1f2 <_scanf_i+0x11e>
 800c232:	6823      	ldr	r3, [r4, #0]
 800c234:	05db      	lsls	r3, r3, #23
 800c236:	d50d      	bpl.n	800c254 <_scanf_i+0x180>
 800c238:	42bd      	cmp	r5, r7
 800c23a:	d909      	bls.n	800c250 <_scanf_i+0x17c>
 800c23c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800c240:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c244:	4632      	mov	r2, r6
 800c246:	4650      	mov	r0, sl
 800c248:	4798      	blx	r3
 800c24a:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800c24e:	464d      	mov	r5, r9
 800c250:	42bd      	cmp	r5, r7
 800c252:	d02d      	beq.n	800c2b0 <_scanf_i+0x1dc>
 800c254:	6822      	ldr	r2, [r4, #0]
 800c256:	f012 0210 	ands.w	r2, r2, #16
 800c25a:	d113      	bne.n	800c284 <_scanf_i+0x1b0>
 800c25c:	702a      	strb	r2, [r5, #0]
 800c25e:	6863      	ldr	r3, [r4, #4]
 800c260:	9e01      	ldr	r6, [sp, #4]
 800c262:	4639      	mov	r1, r7
 800c264:	4650      	mov	r0, sl
 800c266:	47b0      	blx	r6
 800c268:	6821      	ldr	r1, [r4, #0]
 800c26a:	f8d8 3000 	ldr.w	r3, [r8]
 800c26e:	f011 0f20 	tst.w	r1, #32
 800c272:	d013      	beq.n	800c29c <_scanf_i+0x1c8>
 800c274:	1d1a      	adds	r2, r3, #4
 800c276:	f8c8 2000 	str.w	r2, [r8]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	6018      	str	r0, [r3, #0]
 800c27e:	68e3      	ldr	r3, [r4, #12]
 800c280:	3301      	adds	r3, #1
 800c282:	60e3      	str	r3, [r4, #12]
 800c284:	1bed      	subs	r5, r5, r7
 800c286:	44ab      	add	fp, r5
 800c288:	6925      	ldr	r5, [r4, #16]
 800c28a:	445d      	add	r5, fp
 800c28c:	6125      	str	r5, [r4, #16]
 800c28e:	2000      	movs	r0, #0
 800c290:	b007      	add	sp, #28
 800c292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c296:	f04f 0b00 	mov.w	fp, #0
 800c29a:	e7ca      	b.n	800c232 <_scanf_i+0x15e>
 800c29c:	1d1a      	adds	r2, r3, #4
 800c29e:	f8c8 2000 	str.w	r2, [r8]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	f011 0f01 	tst.w	r1, #1
 800c2a8:	bf14      	ite	ne
 800c2aa:	8018      	strhne	r0, [r3, #0]
 800c2ac:	6018      	streq	r0, [r3, #0]
 800c2ae:	e7e6      	b.n	800c27e <_scanf_i+0x1aa>
 800c2b0:	2001      	movs	r0, #1
 800c2b2:	e7ed      	b.n	800c290 <_scanf_i+0x1bc>
 800c2b4:	0800ead4 	.word	0x0800ead4
 800c2b8:	0800c5d5 	.word	0x0800c5d5
 800c2bc:	0800c4ed 	.word	0x0800c4ed
 800c2c0:	08012ba6 	.word	0x08012ba6

0800c2c4 <_putc_r>:
 800c2c4:	b570      	push	{r4, r5, r6, lr}
 800c2c6:	460d      	mov	r5, r1
 800c2c8:	4614      	mov	r4, r2
 800c2ca:	4606      	mov	r6, r0
 800c2cc:	b118      	cbz	r0, 800c2d6 <_putc_r+0x12>
 800c2ce:	6983      	ldr	r3, [r0, #24]
 800c2d0:	b90b      	cbnz	r3, 800c2d6 <_putc_r+0x12>
 800c2d2:	f7fd f839 	bl	8009348 <__sinit>
 800c2d6:	4b1c      	ldr	r3, [pc, #112]	; (800c348 <_putc_r+0x84>)
 800c2d8:	429c      	cmp	r4, r3
 800c2da:	d124      	bne.n	800c326 <_putc_r+0x62>
 800c2dc:	6874      	ldr	r4, [r6, #4]
 800c2de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c2e0:	07d8      	lsls	r0, r3, #31
 800c2e2:	d405      	bmi.n	800c2f0 <_putc_r+0x2c>
 800c2e4:	89a3      	ldrh	r3, [r4, #12]
 800c2e6:	0599      	lsls	r1, r3, #22
 800c2e8:	d402      	bmi.n	800c2f0 <_putc_r+0x2c>
 800c2ea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c2ec:	f7fd f8ef 	bl	80094ce <__retarget_lock_acquire_recursive>
 800c2f0:	68a3      	ldr	r3, [r4, #8]
 800c2f2:	3b01      	subs	r3, #1
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	60a3      	str	r3, [r4, #8]
 800c2f8:	da05      	bge.n	800c306 <_putc_r+0x42>
 800c2fa:	69a2      	ldr	r2, [r4, #24]
 800c2fc:	4293      	cmp	r3, r2
 800c2fe:	db1c      	blt.n	800c33a <_putc_r+0x76>
 800c300:	b2eb      	uxtb	r3, r5
 800c302:	2b0a      	cmp	r3, #10
 800c304:	d019      	beq.n	800c33a <_putc_r+0x76>
 800c306:	6823      	ldr	r3, [r4, #0]
 800c308:	1c5a      	adds	r2, r3, #1
 800c30a:	6022      	str	r2, [r4, #0]
 800c30c:	701d      	strb	r5, [r3, #0]
 800c30e:	b2ed      	uxtb	r5, r5
 800c310:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c312:	07da      	lsls	r2, r3, #31
 800c314:	d405      	bmi.n	800c322 <_putc_r+0x5e>
 800c316:	89a3      	ldrh	r3, [r4, #12]
 800c318:	059b      	lsls	r3, r3, #22
 800c31a:	d402      	bmi.n	800c322 <_putc_r+0x5e>
 800c31c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c31e:	f7fd f8d7 	bl	80094d0 <__retarget_lock_release_recursive>
 800c322:	4628      	mov	r0, r5
 800c324:	bd70      	pop	{r4, r5, r6, pc}
 800c326:	4b09      	ldr	r3, [pc, #36]	; (800c34c <_putc_r+0x88>)
 800c328:	429c      	cmp	r4, r3
 800c32a:	d101      	bne.n	800c330 <_putc_r+0x6c>
 800c32c:	68b4      	ldr	r4, [r6, #8]
 800c32e:	e7d6      	b.n	800c2de <_putc_r+0x1a>
 800c330:	4b07      	ldr	r3, [pc, #28]	; (800c350 <_putc_r+0x8c>)
 800c332:	429c      	cmp	r4, r3
 800c334:	bf08      	it	eq
 800c336:	68f4      	ldreq	r4, [r6, #12]
 800c338:	e7d1      	b.n	800c2de <_putc_r+0x1a>
 800c33a:	4629      	mov	r1, r5
 800c33c:	4622      	mov	r2, r4
 800c33e:	4630      	mov	r0, r6
 800c340:	f7fe f808 	bl	800a354 <__swbuf_r>
 800c344:	4605      	mov	r5, r0
 800c346:	e7e3      	b.n	800c310 <_putc_r+0x4c>
 800c348:	08012918 	.word	0x08012918
 800c34c:	08012938 	.word	0x08012938
 800c350:	080128f8 	.word	0x080128f8

0800c354 <_read_r>:
 800c354:	b538      	push	{r3, r4, r5, lr}
 800c356:	4d07      	ldr	r5, [pc, #28]	; (800c374 <_read_r+0x20>)
 800c358:	4604      	mov	r4, r0
 800c35a:	4608      	mov	r0, r1
 800c35c:	4611      	mov	r1, r2
 800c35e:	2200      	movs	r2, #0
 800c360:	602a      	str	r2, [r5, #0]
 800c362:	461a      	mov	r2, r3
 800c364:	f7f6 f92a 	bl	80025bc <_read>
 800c368:	1c43      	adds	r3, r0, #1
 800c36a:	d102      	bne.n	800c372 <_read_r+0x1e>
 800c36c:	682b      	ldr	r3, [r5, #0]
 800c36e:	b103      	cbz	r3, 800c372 <_read_r+0x1e>
 800c370:	6023      	str	r3, [r4, #0]
 800c372:	bd38      	pop	{r3, r4, r5, pc}
 800c374:	200004c4 	.word	0x200004c4

0800c378 <__sccl>:
 800c378:	b570      	push	{r4, r5, r6, lr}
 800c37a:	780b      	ldrb	r3, [r1, #0]
 800c37c:	4604      	mov	r4, r0
 800c37e:	2b5e      	cmp	r3, #94	; 0x5e
 800c380:	bf0b      	itete	eq
 800c382:	784b      	ldrbeq	r3, [r1, #1]
 800c384:	1c48      	addne	r0, r1, #1
 800c386:	1c88      	addeq	r0, r1, #2
 800c388:	2200      	movne	r2, #0
 800c38a:	bf08      	it	eq
 800c38c:	2201      	moveq	r2, #1
 800c38e:	1e61      	subs	r1, r4, #1
 800c390:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800c394:	f801 2f01 	strb.w	r2, [r1, #1]!
 800c398:	42a9      	cmp	r1, r5
 800c39a:	d1fb      	bne.n	800c394 <__sccl+0x1c>
 800c39c:	b90b      	cbnz	r3, 800c3a2 <__sccl+0x2a>
 800c39e:	3801      	subs	r0, #1
 800c3a0:	bd70      	pop	{r4, r5, r6, pc}
 800c3a2:	f082 0201 	eor.w	r2, r2, #1
 800c3a6:	54e2      	strb	r2, [r4, r3]
 800c3a8:	4605      	mov	r5, r0
 800c3aa:	4628      	mov	r0, r5
 800c3ac:	f810 1b01 	ldrb.w	r1, [r0], #1
 800c3b0:	292d      	cmp	r1, #45	; 0x2d
 800c3b2:	d006      	beq.n	800c3c2 <__sccl+0x4a>
 800c3b4:	295d      	cmp	r1, #93	; 0x5d
 800c3b6:	d0f3      	beq.n	800c3a0 <__sccl+0x28>
 800c3b8:	b909      	cbnz	r1, 800c3be <__sccl+0x46>
 800c3ba:	4628      	mov	r0, r5
 800c3bc:	e7f0      	b.n	800c3a0 <__sccl+0x28>
 800c3be:	460b      	mov	r3, r1
 800c3c0:	e7f1      	b.n	800c3a6 <__sccl+0x2e>
 800c3c2:	786e      	ldrb	r6, [r5, #1]
 800c3c4:	2e5d      	cmp	r6, #93	; 0x5d
 800c3c6:	d0fa      	beq.n	800c3be <__sccl+0x46>
 800c3c8:	42b3      	cmp	r3, r6
 800c3ca:	dcf8      	bgt.n	800c3be <__sccl+0x46>
 800c3cc:	3502      	adds	r5, #2
 800c3ce:	4619      	mov	r1, r3
 800c3d0:	3101      	adds	r1, #1
 800c3d2:	428e      	cmp	r6, r1
 800c3d4:	5462      	strb	r2, [r4, r1]
 800c3d6:	dcfb      	bgt.n	800c3d0 <__sccl+0x58>
 800c3d8:	1af1      	subs	r1, r6, r3
 800c3da:	3901      	subs	r1, #1
 800c3dc:	1c58      	adds	r0, r3, #1
 800c3de:	42b3      	cmp	r3, r6
 800c3e0:	bfa8      	it	ge
 800c3e2:	2100      	movge	r1, #0
 800c3e4:	1843      	adds	r3, r0, r1
 800c3e6:	e7e0      	b.n	800c3aa <__sccl+0x32>

0800c3e8 <_strtol_l.constprop.0>:
 800c3e8:	2b01      	cmp	r3, #1
 800c3ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c3ee:	d001      	beq.n	800c3f4 <_strtol_l.constprop.0+0xc>
 800c3f0:	2b24      	cmp	r3, #36	; 0x24
 800c3f2:	d906      	bls.n	800c402 <_strtol_l.constprop.0+0x1a>
 800c3f4:	f7fc fe76 	bl	80090e4 <__errno>
 800c3f8:	2316      	movs	r3, #22
 800c3fa:	6003      	str	r3, [r0, #0]
 800c3fc:	2000      	movs	r0, #0
 800c3fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c402:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c4e8 <_strtol_l.constprop.0+0x100>
 800c406:	460d      	mov	r5, r1
 800c408:	462e      	mov	r6, r5
 800c40a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c40e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800c412:	f017 0708 	ands.w	r7, r7, #8
 800c416:	d1f7      	bne.n	800c408 <_strtol_l.constprop.0+0x20>
 800c418:	2c2d      	cmp	r4, #45	; 0x2d
 800c41a:	d132      	bne.n	800c482 <_strtol_l.constprop.0+0x9a>
 800c41c:	782c      	ldrb	r4, [r5, #0]
 800c41e:	2701      	movs	r7, #1
 800c420:	1cb5      	adds	r5, r6, #2
 800c422:	2b00      	cmp	r3, #0
 800c424:	d05b      	beq.n	800c4de <_strtol_l.constprop.0+0xf6>
 800c426:	2b10      	cmp	r3, #16
 800c428:	d109      	bne.n	800c43e <_strtol_l.constprop.0+0x56>
 800c42a:	2c30      	cmp	r4, #48	; 0x30
 800c42c:	d107      	bne.n	800c43e <_strtol_l.constprop.0+0x56>
 800c42e:	782c      	ldrb	r4, [r5, #0]
 800c430:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c434:	2c58      	cmp	r4, #88	; 0x58
 800c436:	d14d      	bne.n	800c4d4 <_strtol_l.constprop.0+0xec>
 800c438:	786c      	ldrb	r4, [r5, #1]
 800c43a:	2310      	movs	r3, #16
 800c43c:	3502      	adds	r5, #2
 800c43e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c442:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800c446:	f04f 0c00 	mov.w	ip, #0
 800c44a:	fbb8 f9f3 	udiv	r9, r8, r3
 800c44e:	4666      	mov	r6, ip
 800c450:	fb03 8a19 	mls	sl, r3, r9, r8
 800c454:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800c458:	f1be 0f09 	cmp.w	lr, #9
 800c45c:	d816      	bhi.n	800c48c <_strtol_l.constprop.0+0xa4>
 800c45e:	4674      	mov	r4, lr
 800c460:	42a3      	cmp	r3, r4
 800c462:	dd24      	ble.n	800c4ae <_strtol_l.constprop.0+0xc6>
 800c464:	f1bc 0f00 	cmp.w	ip, #0
 800c468:	db1e      	blt.n	800c4a8 <_strtol_l.constprop.0+0xc0>
 800c46a:	45b1      	cmp	r9, r6
 800c46c:	d31c      	bcc.n	800c4a8 <_strtol_l.constprop.0+0xc0>
 800c46e:	d101      	bne.n	800c474 <_strtol_l.constprop.0+0x8c>
 800c470:	45a2      	cmp	sl, r4
 800c472:	db19      	blt.n	800c4a8 <_strtol_l.constprop.0+0xc0>
 800c474:	fb06 4603 	mla	r6, r6, r3, r4
 800c478:	f04f 0c01 	mov.w	ip, #1
 800c47c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c480:	e7e8      	b.n	800c454 <_strtol_l.constprop.0+0x6c>
 800c482:	2c2b      	cmp	r4, #43	; 0x2b
 800c484:	bf04      	itt	eq
 800c486:	782c      	ldrbeq	r4, [r5, #0]
 800c488:	1cb5      	addeq	r5, r6, #2
 800c48a:	e7ca      	b.n	800c422 <_strtol_l.constprop.0+0x3a>
 800c48c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800c490:	f1be 0f19 	cmp.w	lr, #25
 800c494:	d801      	bhi.n	800c49a <_strtol_l.constprop.0+0xb2>
 800c496:	3c37      	subs	r4, #55	; 0x37
 800c498:	e7e2      	b.n	800c460 <_strtol_l.constprop.0+0x78>
 800c49a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800c49e:	f1be 0f19 	cmp.w	lr, #25
 800c4a2:	d804      	bhi.n	800c4ae <_strtol_l.constprop.0+0xc6>
 800c4a4:	3c57      	subs	r4, #87	; 0x57
 800c4a6:	e7db      	b.n	800c460 <_strtol_l.constprop.0+0x78>
 800c4a8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800c4ac:	e7e6      	b.n	800c47c <_strtol_l.constprop.0+0x94>
 800c4ae:	f1bc 0f00 	cmp.w	ip, #0
 800c4b2:	da05      	bge.n	800c4c0 <_strtol_l.constprop.0+0xd8>
 800c4b4:	2322      	movs	r3, #34	; 0x22
 800c4b6:	6003      	str	r3, [r0, #0]
 800c4b8:	4646      	mov	r6, r8
 800c4ba:	b942      	cbnz	r2, 800c4ce <_strtol_l.constprop.0+0xe6>
 800c4bc:	4630      	mov	r0, r6
 800c4be:	e79e      	b.n	800c3fe <_strtol_l.constprop.0+0x16>
 800c4c0:	b107      	cbz	r7, 800c4c4 <_strtol_l.constprop.0+0xdc>
 800c4c2:	4276      	negs	r6, r6
 800c4c4:	2a00      	cmp	r2, #0
 800c4c6:	d0f9      	beq.n	800c4bc <_strtol_l.constprop.0+0xd4>
 800c4c8:	f1bc 0f00 	cmp.w	ip, #0
 800c4cc:	d000      	beq.n	800c4d0 <_strtol_l.constprop.0+0xe8>
 800c4ce:	1e69      	subs	r1, r5, #1
 800c4d0:	6011      	str	r1, [r2, #0]
 800c4d2:	e7f3      	b.n	800c4bc <_strtol_l.constprop.0+0xd4>
 800c4d4:	2430      	movs	r4, #48	; 0x30
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d1b1      	bne.n	800c43e <_strtol_l.constprop.0+0x56>
 800c4da:	2308      	movs	r3, #8
 800c4dc:	e7af      	b.n	800c43e <_strtol_l.constprop.0+0x56>
 800c4de:	2c30      	cmp	r4, #48	; 0x30
 800c4e0:	d0a5      	beq.n	800c42e <_strtol_l.constprop.0+0x46>
 800c4e2:	230a      	movs	r3, #10
 800c4e4:	e7ab      	b.n	800c43e <_strtol_l.constprop.0+0x56>
 800c4e6:	bf00      	nop
 800c4e8:	08012d91 	.word	0x08012d91

0800c4ec <_strtol_r>:
 800c4ec:	f7ff bf7c 	b.w	800c3e8 <_strtol_l.constprop.0>

0800c4f0 <_strtoul_l.constprop.0>:
 800c4f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c4f4:	4f36      	ldr	r7, [pc, #216]	; (800c5d0 <_strtoul_l.constprop.0+0xe0>)
 800c4f6:	4686      	mov	lr, r0
 800c4f8:	460d      	mov	r5, r1
 800c4fa:	4628      	mov	r0, r5
 800c4fc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c500:	5de6      	ldrb	r6, [r4, r7]
 800c502:	f016 0608 	ands.w	r6, r6, #8
 800c506:	d1f8      	bne.n	800c4fa <_strtoul_l.constprop.0+0xa>
 800c508:	2c2d      	cmp	r4, #45	; 0x2d
 800c50a:	d12f      	bne.n	800c56c <_strtoul_l.constprop.0+0x7c>
 800c50c:	782c      	ldrb	r4, [r5, #0]
 800c50e:	2601      	movs	r6, #1
 800c510:	1c85      	adds	r5, r0, #2
 800c512:	2b00      	cmp	r3, #0
 800c514:	d057      	beq.n	800c5c6 <_strtoul_l.constprop.0+0xd6>
 800c516:	2b10      	cmp	r3, #16
 800c518:	d109      	bne.n	800c52e <_strtoul_l.constprop.0+0x3e>
 800c51a:	2c30      	cmp	r4, #48	; 0x30
 800c51c:	d107      	bne.n	800c52e <_strtoul_l.constprop.0+0x3e>
 800c51e:	7828      	ldrb	r0, [r5, #0]
 800c520:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800c524:	2858      	cmp	r0, #88	; 0x58
 800c526:	d149      	bne.n	800c5bc <_strtoul_l.constprop.0+0xcc>
 800c528:	786c      	ldrb	r4, [r5, #1]
 800c52a:	2310      	movs	r3, #16
 800c52c:	3502      	adds	r5, #2
 800c52e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800c532:	2700      	movs	r7, #0
 800c534:	fbb8 f8f3 	udiv	r8, r8, r3
 800c538:	fb03 f908 	mul.w	r9, r3, r8
 800c53c:	ea6f 0909 	mvn.w	r9, r9
 800c540:	4638      	mov	r0, r7
 800c542:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800c546:	f1bc 0f09 	cmp.w	ip, #9
 800c54a:	d814      	bhi.n	800c576 <_strtoul_l.constprop.0+0x86>
 800c54c:	4664      	mov	r4, ip
 800c54e:	42a3      	cmp	r3, r4
 800c550:	dd22      	ble.n	800c598 <_strtoul_l.constprop.0+0xa8>
 800c552:	2f00      	cmp	r7, #0
 800c554:	db1d      	blt.n	800c592 <_strtoul_l.constprop.0+0xa2>
 800c556:	4580      	cmp	r8, r0
 800c558:	d31b      	bcc.n	800c592 <_strtoul_l.constprop.0+0xa2>
 800c55a:	d101      	bne.n	800c560 <_strtoul_l.constprop.0+0x70>
 800c55c:	45a1      	cmp	r9, r4
 800c55e:	db18      	blt.n	800c592 <_strtoul_l.constprop.0+0xa2>
 800c560:	fb00 4003 	mla	r0, r0, r3, r4
 800c564:	2701      	movs	r7, #1
 800c566:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c56a:	e7ea      	b.n	800c542 <_strtoul_l.constprop.0+0x52>
 800c56c:	2c2b      	cmp	r4, #43	; 0x2b
 800c56e:	bf04      	itt	eq
 800c570:	782c      	ldrbeq	r4, [r5, #0]
 800c572:	1c85      	addeq	r5, r0, #2
 800c574:	e7cd      	b.n	800c512 <_strtoul_l.constprop.0+0x22>
 800c576:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800c57a:	f1bc 0f19 	cmp.w	ip, #25
 800c57e:	d801      	bhi.n	800c584 <_strtoul_l.constprop.0+0x94>
 800c580:	3c37      	subs	r4, #55	; 0x37
 800c582:	e7e4      	b.n	800c54e <_strtoul_l.constprop.0+0x5e>
 800c584:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800c588:	f1bc 0f19 	cmp.w	ip, #25
 800c58c:	d804      	bhi.n	800c598 <_strtoul_l.constprop.0+0xa8>
 800c58e:	3c57      	subs	r4, #87	; 0x57
 800c590:	e7dd      	b.n	800c54e <_strtoul_l.constprop.0+0x5e>
 800c592:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800c596:	e7e6      	b.n	800c566 <_strtoul_l.constprop.0+0x76>
 800c598:	2f00      	cmp	r7, #0
 800c59a:	da07      	bge.n	800c5ac <_strtoul_l.constprop.0+0xbc>
 800c59c:	2322      	movs	r3, #34	; 0x22
 800c59e:	f8ce 3000 	str.w	r3, [lr]
 800c5a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c5a6:	b932      	cbnz	r2, 800c5b6 <_strtoul_l.constprop.0+0xc6>
 800c5a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c5ac:	b106      	cbz	r6, 800c5b0 <_strtoul_l.constprop.0+0xc0>
 800c5ae:	4240      	negs	r0, r0
 800c5b0:	2a00      	cmp	r2, #0
 800c5b2:	d0f9      	beq.n	800c5a8 <_strtoul_l.constprop.0+0xb8>
 800c5b4:	b107      	cbz	r7, 800c5b8 <_strtoul_l.constprop.0+0xc8>
 800c5b6:	1e69      	subs	r1, r5, #1
 800c5b8:	6011      	str	r1, [r2, #0]
 800c5ba:	e7f5      	b.n	800c5a8 <_strtoul_l.constprop.0+0xb8>
 800c5bc:	2430      	movs	r4, #48	; 0x30
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d1b5      	bne.n	800c52e <_strtoul_l.constprop.0+0x3e>
 800c5c2:	2308      	movs	r3, #8
 800c5c4:	e7b3      	b.n	800c52e <_strtoul_l.constprop.0+0x3e>
 800c5c6:	2c30      	cmp	r4, #48	; 0x30
 800c5c8:	d0a9      	beq.n	800c51e <_strtoul_l.constprop.0+0x2e>
 800c5ca:	230a      	movs	r3, #10
 800c5cc:	e7af      	b.n	800c52e <_strtoul_l.constprop.0+0x3e>
 800c5ce:	bf00      	nop
 800c5d0:	08012d91 	.word	0x08012d91

0800c5d4 <_strtoul_r>:
 800c5d4:	f7ff bf8c 	b.w	800c4f0 <_strtoul_l.constprop.0>

0800c5d8 <wcvt>:
 800c5d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5dc:	b085      	sub	sp, #20
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	461d      	mov	r5, r3
 800c5e2:	4614      	mov	r4, r2
 800c5e4:	bfbc      	itt	lt
 800c5e6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800c5ea:	4614      	movlt	r4, r2
 800c5ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c5ee:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800c5f0:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 800c5f4:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
 800c5f8:	bfb6      	itet	lt
 800c5fa:	461d      	movlt	r5, r3
 800c5fc:	2300      	movge	r3, #0
 800c5fe:	232d      	movlt	r3, #45	; 0x2d
 800c600:	6013      	str	r3, [r2, #0]
 800c602:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c604:	f023 0820 	bic.w	r8, r3, #32
 800c608:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c60c:	d005      	beq.n	800c61a <wcvt+0x42>
 800c60e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c612:	d100      	bne.n	800c616 <wcvt+0x3e>
 800c614:	3601      	adds	r6, #1
 800c616:	2102      	movs	r1, #2
 800c618:	e000      	b.n	800c61c <wcvt+0x44>
 800c61a:	2103      	movs	r1, #3
 800c61c:	ab03      	add	r3, sp, #12
 800c61e:	9301      	str	r3, [sp, #4]
 800c620:	ab02      	add	r3, sp, #8
 800c622:	9300      	str	r3, [sp, #0]
 800c624:	ec45 4b10 	vmov	d0, r4, r5
 800c628:	4653      	mov	r3, sl
 800c62a:	4632      	mov	r2, r6
 800c62c:	f7fe f800 	bl	800a630 <_dtoa_r>
 800c630:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c634:	4607      	mov	r7, r0
 800c636:	d112      	bne.n	800c65e <wcvt+0x86>
 800c638:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c63a:	07db      	lsls	r3, r3, #31
 800c63c:	d40f      	bmi.n	800c65e <wcvt+0x86>
 800c63e:	9b03      	ldr	r3, [sp, #12]
 800c640:	1bdb      	subs	r3, r3, r7
 800c642:	f8cb 3000 	str.w	r3, [fp]
 800c646:	2300      	movs	r3, #0
 800c648:	f8db 2000 	ldr.w	r2, [fp]
 800c64c:	429a      	cmp	r2, r3
 800c64e:	dd02      	ble.n	800c656 <wcvt+0x7e>
 800c650:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c652:	4293      	cmp	r3, r2
 800c654:	db2a      	blt.n	800c6ac <wcvt+0xd4>
 800c656:	9814      	ldr	r0, [sp, #80]	; 0x50
 800c658:	b005      	add	sp, #20
 800c65a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c65e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c662:	eb07 0906 	add.w	r9, r7, r6
 800c666:	d110      	bne.n	800c68a <wcvt+0xb2>
 800c668:	783b      	ldrb	r3, [r7, #0]
 800c66a:	2b30      	cmp	r3, #48	; 0x30
 800c66c:	d10a      	bne.n	800c684 <wcvt+0xac>
 800c66e:	2200      	movs	r2, #0
 800c670:	2300      	movs	r3, #0
 800c672:	4620      	mov	r0, r4
 800c674:	4629      	mov	r1, r5
 800c676:	f7f4 fa37 	bl	8000ae8 <__aeabi_dcmpeq>
 800c67a:	b918      	cbnz	r0, 800c684 <wcvt+0xac>
 800c67c:	f1c6 0601 	rsb	r6, r6, #1
 800c680:	f8ca 6000 	str.w	r6, [sl]
 800c684:	f8da 3000 	ldr.w	r3, [sl]
 800c688:	4499      	add	r9, r3
 800c68a:	2200      	movs	r2, #0
 800c68c:	2300      	movs	r3, #0
 800c68e:	4620      	mov	r0, r4
 800c690:	4629      	mov	r1, r5
 800c692:	f7f4 fa29 	bl	8000ae8 <__aeabi_dcmpeq>
 800c696:	b108      	cbz	r0, 800c69c <wcvt+0xc4>
 800c698:	f8cd 900c 	str.w	r9, [sp, #12]
 800c69c:	2230      	movs	r2, #48	; 0x30
 800c69e:	9b03      	ldr	r3, [sp, #12]
 800c6a0:	454b      	cmp	r3, r9
 800c6a2:	d2cc      	bcs.n	800c63e <wcvt+0x66>
 800c6a4:	1c59      	adds	r1, r3, #1
 800c6a6:	9103      	str	r1, [sp, #12]
 800c6a8:	701a      	strb	r2, [r3, #0]
 800c6aa:	e7f8      	b.n	800c69e <wcvt+0xc6>
 800c6ac:	9914      	ldr	r1, [sp, #80]	; 0x50
 800c6ae:	5cfa      	ldrb	r2, [r7, r3]
 800c6b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800c6b4:	3301      	adds	r3, #1
 800c6b6:	e7c7      	b.n	800c648 <wcvt+0x70>

0800c6b8 <_svfwprintf_r>:
 800c6b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6bc:	ed2d 8b04 	vpush	{d8-d9}
 800c6c0:	b0d3      	sub	sp, #332	; 0x14c
 800c6c2:	461d      	mov	r5, r3
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	4689      	mov	r9, r1
 800c6c8:	9319      	str	r3, [sp, #100]	; 0x64
 800c6ca:	4683      	mov	fp, r0
 800c6cc:	920b      	str	r2, [sp, #44]	; 0x2c
 800c6ce:	f7fe fdbf 	bl	800b250 <_localeconv_r>
 800c6d2:	6803      	ldr	r3, [r0, #0]
 800c6d4:	781b      	ldrb	r3, [r3, #0]
 800c6d6:	9316      	str	r3, [sp, #88]	; 0x58
 800c6d8:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800c6dc:	061e      	lsls	r6, r3, #24
 800c6de:	d51a      	bpl.n	800c716 <_svfwprintf_r+0x5e>
 800c6e0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c6e4:	b9bb      	cbnz	r3, 800c716 <_svfwprintf_r+0x5e>
 800c6e6:	2140      	movs	r1, #64	; 0x40
 800c6e8:	4658      	mov	r0, fp
 800c6ea:	f7fc ffe9 	bl	80096c0 <_malloc_r>
 800c6ee:	f8c9 0000 	str.w	r0, [r9]
 800c6f2:	f8c9 0010 	str.w	r0, [r9, #16]
 800c6f6:	b958      	cbnz	r0, 800c710 <_svfwprintf_r+0x58>
 800c6f8:	230c      	movs	r3, #12
 800c6fa:	f8cb 3000 	str.w	r3, [fp]
 800c6fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c702:	930d      	str	r3, [sp, #52]	; 0x34
 800c704:	980d      	ldr	r0, [sp, #52]	; 0x34
 800c706:	b053      	add	sp, #332	; 0x14c
 800c708:	ecbd 8b04 	vpop	{d8-d9}
 800c70c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c710:	2340      	movs	r3, #64	; 0x40
 800c712:	f8c9 3014 	str.w	r3, [r9, #20]
 800c716:	ed9f 7b8e 	vldr	d7, [pc, #568]	; 800c950 <_svfwprintf_r+0x298>
 800c71a:	2300      	movs	r3, #0
 800c71c:	930f      	str	r3, [sp, #60]	; 0x3c
 800c71e:	9311      	str	r3, [sp, #68]	; 0x44
 800c720:	930d      	str	r3, [sp, #52]	; 0x34
 800c722:	eeb0 8a47 	vmov.f32	s16, s14
 800c726:	eef0 8a67 	vmov.f32	s17, s15
 800c72a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c72c:	461c      	mov	r4, r3
 800c72e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c732:	b10a      	cbz	r2, 800c738 <_svfwprintf_r+0x80>
 800c734:	2a25      	cmp	r2, #37	; 0x25
 800c736:	d1f9      	bne.n	800c72c <_svfwprintf_r+0x74>
 800c738:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c73a:	42a3      	cmp	r3, r4
 800c73c:	d00d      	beq.n	800c75a <_svfwprintf_r+0xa2>
 800c73e:	1ae6      	subs	r6, r4, r3
 800c740:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c742:	4633      	mov	r3, r6
 800c744:	4649      	mov	r1, r9
 800c746:	4658      	mov	r0, fp
 800c748:	f000 fe57 	bl	800d3fa <__ssputs_r>
 800c74c:	3001      	adds	r0, #1
 800c74e:	f000 80e9 	beq.w	800c924 <_svfwprintf_r+0x26c>
 800c752:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c754:	eb03 03a6 	add.w	r3, r3, r6, asr #2
 800c758:	930d      	str	r3, [sp, #52]	; 0x34
 800c75a:	6823      	ldr	r3, [r4, #0]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	f000 80e1 	beq.w	800c924 <_svfwprintf_r+0x26c>
 800c762:	2100      	movs	r1, #0
 800c764:	1d22      	adds	r2, r4, #4
 800c766:	9115      	str	r1, [sp, #84]	; 0x54
 800c768:	460e      	mov	r6, r1
 800c76a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c76e:	910c      	str	r1, [sp, #48]	; 0x30
 800c770:	460f      	mov	r7, r1
 800c772:	200a      	movs	r0, #10
 800c774:	4613      	mov	r3, r2
 800c776:	f853 2b04 	ldr.w	r2, [r3], #4
 800c77a:	9209      	str	r2, [sp, #36]	; 0x24
 800c77c:	930b      	str	r3, [sp, #44]	; 0x2c
 800c77e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c780:	2b39      	cmp	r3, #57	; 0x39
 800c782:	d84c      	bhi.n	800c81e <_svfwprintf_r+0x166>
 800c784:	2b1f      	cmp	r3, #31
 800c786:	d94f      	bls.n	800c828 <_svfwprintf_r+0x170>
 800c788:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c78a:	3b20      	subs	r3, #32
 800c78c:	2b19      	cmp	r3, #25
 800c78e:	d84a      	bhi.n	800c826 <_svfwprintf_r+0x16e>
 800c790:	e8df f003 	tbb	[pc, r3]
 800c794:	7049496b 	.word	0x7049496b
 800c798:	49494949 	.word	0x49494949
 800c79c:	6c734949 	.word	0x6c734949
 800c7a0:	497d7a49 	.word	0x497d7a49
 800c7a4:	9b9b9b98 	.word	0x9b9b9b98
 800c7a8:	9b9b9b9b 	.word	0x9b9b9b9b
 800c7ac:	9b9b      	.short	0x9b9b
 800c7ae:	2b33      	cmp	r3, #51	; 0x33
 800c7b0:	d839      	bhi.n	800c826 <_svfwprintf_r+0x16e>
 800c7b2:	e8df f013 	tbh	[pc, r3, lsl #1]
 800c7b6:	00e5      	.short	0x00e5
 800c7b8:	00e50038 	.word	0x00e50038
 800c7bc:	00380038 	.word	0x00380038
 800c7c0:	00380038 	.word	0x00380038
 800c7c4:	0038009c 	.word	0x0038009c
 800c7c8:	00380038 	.word	0x00380038
 800c7cc:	00380038 	.word	0x00380038
 800c7d0:	00380038 	.word	0x00380038
 800c7d4:	00380038 	.word	0x00380038
 800c7d8:	00380038 	.word	0x00380038
 800c7dc:	0038031e 	.word	0x0038031e
 800c7e0:	00380038 	.word	0x00380038
 800c7e4:	00380038 	.word	0x00380038
 800c7e8:	00380038 	.word	0x00380038
 800c7ec:	00380038 	.word	0x00380038
 800c7f0:	00a50038 	.word	0x00a50038
 800c7f4:	00e500d3 	.word	0x00e500d3
 800c7f8:	00e500e5 	.word	0x00e500e5
 800c7fc:	00d3009f 	.word	0x00d3009f
 800c800:	00380038 	.word	0x00380038
 800c804:	003800a2 	.word	0x003800a2
 800c808:	02950284 	.word	0x02950284
 800c80c:	00a202b3 	.word	0x00a202b3
 800c810:	02c20038 	.word	0x02c20038
 800c814:	03120038 	.word	0x03120038
 800c818:	00380038 	.word	0x00380038
 800c81c:	0042      	.short	0x0042
 800c81e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c820:	3b45      	subs	r3, #69	; 0x45
 800c822:	2b33      	cmp	r3, #51	; 0x33
 800c824:	d9c3      	bls.n	800c7ae <_svfwprintf_r+0xf6>
 800c826:	b111      	cbz	r1, 800c82e <_svfwprintf_r+0x176>
 800c828:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d07a      	beq.n	800c924 <_svfwprintf_r+0x26c>
 800c82e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c830:	932a      	str	r3, [sp, #168]	; 0xa8
 800c832:	2000      	movs	r0, #0
 800c834:	9015      	str	r0, [sp, #84]	; 0x54
 800c836:	950a      	str	r5, [sp, #40]	; 0x28
 800c838:	e081      	b.n	800c93e <_svfwprintf_r+0x286>
 800c83a:	b101      	cbz	r1, 800c83e <_svfwprintf_r+0x186>
 800c83c:	9615      	str	r6, [sp, #84]	; 0x54
 800c83e:	4b46      	ldr	r3, [pc, #280]	; (800c958 <_svfwprintf_r+0x2a0>)
 800c840:	930f      	str	r3, [sp, #60]	; 0x3c
 800c842:	462a      	mov	r2, r5
 800c844:	06f8      	lsls	r0, r7, #27
 800c846:	f852 3b04 	ldr.w	r3, [r2], #4
 800c84a:	920a      	str	r2, [sp, #40]	; 0x28
 800c84c:	d402      	bmi.n	800c854 <_svfwprintf_r+0x19c>
 800c84e:	0679      	lsls	r1, r7, #25
 800c850:	bf48      	it	mi
 800c852:	b29b      	uxthmi	r3, r3
 800c854:	07fa      	lsls	r2, r7, #31
 800c856:	d506      	bpl.n	800c866 <_svfwprintf_r+0x1ae>
 800c858:	b12b      	cbz	r3, 800c866 <_svfwprintf_r+0x1ae>
 800c85a:	2230      	movs	r2, #48	; 0x30
 800c85c:	921a      	str	r2, [sp, #104]	; 0x68
 800c85e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c860:	921b      	str	r2, [sp, #108]	; 0x6c
 800c862:	f047 0702 	orr.w	r7, r7, #2
 800c866:	2202      	movs	r2, #2
 800c868:	e242      	b.n	800ccf0 <_svfwprintf_r+0x638>
 800c86a:	b90e      	cbnz	r6, 800c870 <_svfwprintf_r+0x1b8>
 800c86c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c86e:	2101      	movs	r1, #1
 800c870:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c872:	e77f      	b.n	800c774 <_svfwprintf_r+0xbc>
 800c874:	f047 0701 	orr.w	r7, r7, #1
 800c878:	e7fa      	b.n	800c870 <_svfwprintf_r+0x1b8>
 800c87a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c87e:	930c      	str	r3, [sp, #48]	; 0x30
 800c880:	2b00      	cmp	r3, #0
 800c882:	daf5      	bge.n	800c870 <_svfwprintf_r+0x1b8>
 800c884:	425b      	negs	r3, r3
 800c886:	930c      	str	r3, [sp, #48]	; 0x30
 800c888:	f047 0704 	orr.w	r7, r7, #4
 800c88c:	e7f0      	b.n	800c870 <_svfwprintf_r+0x1b8>
 800c88e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c890:	f852 3b04 	ldr.w	r3, [r2], #4
 800c894:	9309      	str	r3, [sp, #36]	; 0x24
 800c896:	2b2a      	cmp	r3, #42	; 0x2a
 800c898:	d112      	bne.n	800c8c0 <_svfwprintf_r+0x208>
 800c89a:	f855 4b04 	ldr.w	r4, [r5], #4
 800c89e:	920b      	str	r2, [sp, #44]	; 0x2c
 800c8a0:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
 800c8a4:	e7e4      	b.n	800c870 <_svfwprintf_r+0x1b8>
 800c8a6:	fb00 3404 	mla	r4, r0, r4, r3
 800c8aa:	f852 3b04 	ldr.w	r3, [r2], #4
 800c8ae:	9309      	str	r3, [sp, #36]	; 0x24
 800c8b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8b2:	3b30      	subs	r3, #48	; 0x30
 800c8b4:	2b09      	cmp	r3, #9
 800c8b6:	d9f6      	bls.n	800c8a6 <_svfwprintf_r+0x1ee>
 800c8b8:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
 800c8bc:	920b      	str	r2, [sp, #44]	; 0x2c
 800c8be:	e75e      	b.n	800c77e <_svfwprintf_r+0xc6>
 800c8c0:	2400      	movs	r4, #0
 800c8c2:	e7f5      	b.n	800c8b0 <_svfwprintf_r+0x1f8>
 800c8c4:	f047 0780 	orr.w	r7, r7, #128	; 0x80
 800c8c8:	e7d2      	b.n	800c870 <_svfwprintf_r+0x1b8>
 800c8ca:	2300      	movs	r3, #0
 800c8cc:	930c      	str	r3, [sp, #48]	; 0x30
 800c8ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c8d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8d2:	fb00 3302 	mla	r3, r0, r2, r3
 800c8d6:	3b30      	subs	r3, #48	; 0x30
 800c8d8:	930c      	str	r3, [sp, #48]	; 0x30
 800c8da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c8dc:	f853 2b04 	ldr.w	r2, [r3], #4
 800c8e0:	930b      	str	r3, [sp, #44]	; 0x2c
 800c8e2:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800c8e6:	2b09      	cmp	r3, #9
 800c8e8:	9209      	str	r2, [sp, #36]	; 0x24
 800c8ea:	d9f0      	bls.n	800c8ce <_svfwprintf_r+0x216>
 800c8ec:	e747      	b.n	800c77e <_svfwprintf_r+0xc6>
 800c8ee:	f047 0708 	orr.w	r7, r7, #8
 800c8f2:	e7bd      	b.n	800c870 <_svfwprintf_r+0x1b8>
 800c8f4:	f047 0740 	orr.w	r7, r7, #64	; 0x40
 800c8f8:	e7ba      	b.n	800c870 <_svfwprintf_r+0x1b8>
 800c8fa:	f047 0710 	orr.w	r7, r7, #16
 800c8fe:	e7b7      	b.n	800c870 <_svfwprintf_r+0x1b8>
 800c900:	b101      	cbz	r1, 800c904 <_svfwprintf_r+0x24c>
 800c902:	9615      	str	r6, [sp, #84]	; 0x54
 800c904:	462b      	mov	r3, r5
 800c906:	06fd      	lsls	r5, r7, #27
 800c908:	f853 0b04 	ldr.w	r0, [r3], #4
 800c90c:	930a      	str	r3, [sp, #40]	; 0x28
 800c90e:	d412      	bmi.n	800c936 <_svfwprintf_r+0x27e>
 800c910:	f000 fcbc 	bl	800d28c <btowc>
 800c914:	1c44      	adds	r4, r0, #1
 800c916:	d10e      	bne.n	800c936 <_svfwprintf_r+0x27e>
 800c918:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800c91c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c920:	f8a9 300c 	strh.w	r3, [r9, #12]
 800c924:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800c928:	f013 0f40 	tst.w	r3, #64	; 0x40
 800c92c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c92e:	bf18      	it	ne
 800c930:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 800c934:	e6e5      	b.n	800c702 <_svfwprintf_r+0x4a>
 800c936:	902a      	str	r0, [sp, #168]	; 0xa8
 800c938:	2000      	movs	r0, #0
 800c93a:	902b      	str	r0, [sp, #172]	; 0xac
 800c93c:	9015      	str	r0, [sp, #84]	; 0x54
 800c93e:	4680      	mov	r8, r0
 800c940:	2401      	movs	r4, #1
 800c942:	4606      	mov	r6, r0
 800c944:	4605      	mov	r5, r0
 800c946:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 800c94a:	e104      	b.n	800cb56 <_svfwprintf_r+0x49e>
 800c94c:	f3af 8000 	nop.w
	...
 800c958:	08012c2c 	.word	0x08012c2c
 800c95c:	b101      	cbz	r1, 800c960 <_svfwprintf_r+0x2a8>
 800c95e:	9615      	str	r6, [sp, #84]	; 0x54
 800c960:	462a      	mov	r2, r5
 800c962:	06f9      	lsls	r1, r7, #27
 800c964:	f852 3b04 	ldr.w	r3, [r2], #4
 800c968:	920a      	str	r2, [sp, #40]	; 0x28
 800c96a:	d402      	bmi.n	800c972 <_svfwprintf_r+0x2ba>
 800c96c:	067a      	lsls	r2, r7, #25
 800c96e:	bf48      	it	mi
 800c970:	b21b      	sxthmi	r3, r3
 800c972:	2b00      	cmp	r3, #0
 800c974:	da02      	bge.n	800c97c <_svfwprintf_r+0x2c4>
 800c976:	222d      	movs	r2, #45	; 0x2d
 800c978:	425b      	negs	r3, r3
 800c97a:	9215      	str	r2, [sp, #84]	; 0x54
 800c97c:	2201      	movs	r2, #1
 800c97e:	e1b9      	b.n	800ccf4 <_svfwprintf_r+0x63c>
 800c980:	b101      	cbz	r1, 800c984 <_svfwprintf_r+0x2cc>
 800c982:	9615      	str	r6, [sp, #84]	; 0x54
 800c984:	3507      	adds	r5, #7
 800c986:	f025 0307 	bic.w	r3, r5, #7
 800c98a:	ecb3 7b02 	vldmia	r3!, {d7}
 800c98e:	930a      	str	r3, [sp, #40]	; 0x28
 800c990:	eeb0 8a47 	vmov.f32	s16, s14
 800c994:	eef0 8a67 	vmov.f32	s17, s15
 800c998:	ee18 3a90 	vmov	r3, s17
 800c99c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c9a0:	ee09 3a90 	vmov	s19, r3
 800c9a4:	eeb0 9a47 	vmov.f32	s18, s14
 800c9a8:	4ba6      	ldr	r3, [pc, #664]	; (800cc44 <_svfwprintf_r+0x58c>)
 800c9aa:	ec51 0b19 	vmov	r0, r1, d9
 800c9ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c9b2:	f7f4 f8cb 	bl	8000b4c <__aeabi_dcmpun>
 800c9b6:	b9f0      	cbnz	r0, 800c9f6 <_svfwprintf_r+0x33e>
 800c9b8:	4ba2      	ldr	r3, [pc, #648]	; (800cc44 <_svfwprintf_r+0x58c>)
 800c9ba:	ec51 0b19 	vmov	r0, r1, d9
 800c9be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c9c2:	f7f4 f8a5 	bl	8000b10 <__aeabi_dcmple>
 800c9c6:	b9b0      	cbnz	r0, 800c9f6 <_svfwprintf_r+0x33e>
 800c9c8:	ec51 0b18 	vmov	r0, r1, d8
 800c9cc:	2200      	movs	r2, #0
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	f7f4 f894 	bl	8000afc <__aeabi_dcmplt>
 800c9d4:	b108      	cbz	r0, 800c9da <_svfwprintf_r+0x322>
 800c9d6:	232d      	movs	r3, #45	; 0x2d
 800c9d8:	9315      	str	r3, [sp, #84]	; 0x54
 800c9da:	4b9b      	ldr	r3, [pc, #620]	; (800cc48 <_svfwprintf_r+0x590>)
 800c9dc:	489b      	ldr	r0, [pc, #620]	; (800cc4c <_svfwprintf_r+0x594>)
 800c9de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c9e0:	f027 0780 	bic.w	r7, r7, #128	; 0x80
 800c9e4:	2a47      	cmp	r2, #71	; 0x47
 800c9e6:	bf94      	ite	ls
 800c9e8:	469a      	movls	sl, r3
 800c9ea:	4682      	movhi	sl, r0
 800c9ec:	f04f 0800 	mov.w	r8, #0
 800c9f0:	2403      	movs	r4, #3
 800c9f2:	4646      	mov	r6, r8
 800c9f4:	e3d4      	b.n	800d1a0 <_svfwprintf_r+0xae8>
 800c9f6:	ec53 2b18 	vmov	r2, r3, d8
 800c9fa:	ec51 0b18 	vmov	r0, r1, d8
 800c9fe:	f7f4 f8a5 	bl	8000b4c <__aeabi_dcmpun>
 800ca02:	b140      	cbz	r0, 800ca16 <_svfwprintf_r+0x35e>
 800ca04:	ee18 3a90 	vmov	r3, s17
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	bfbc      	itt	lt
 800ca0c:	232d      	movlt	r3, #45	; 0x2d
 800ca0e:	9315      	strlt	r3, [sp, #84]	; 0x54
 800ca10:	488f      	ldr	r0, [pc, #572]	; (800cc50 <_svfwprintf_r+0x598>)
 800ca12:	4b90      	ldr	r3, [pc, #576]	; (800cc54 <_svfwprintf_r+0x59c>)
 800ca14:	e7e3      	b.n	800c9de <_svfwprintf_r+0x326>
 800ca16:	1c63      	adds	r3, r4, #1
 800ca18:	f000 810f 	beq.w	800cc3a <_svfwprintf_r+0x582>
 800ca1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca1e:	f023 0320 	bic.w	r3, r3, #32
 800ca22:	2b47      	cmp	r3, #71	; 0x47
 800ca24:	d102      	bne.n	800ca2c <_svfwprintf_r+0x374>
 800ca26:	2c00      	cmp	r4, #0
 800ca28:	bf08      	it	eq
 800ca2a:	2401      	moveq	r4, #1
 800ca2c:	f447 7380 	orr.w	r3, r7, #256	; 0x100
 800ca30:	930e      	str	r3, [sp, #56]	; 0x38
 800ca32:	2328      	movs	r3, #40	; 0x28
 800ca34:	9307      	str	r3, [sp, #28]
 800ca36:	ab19      	add	r3, sp, #100	; 0x64
 800ca38:	9305      	str	r3, [sp, #20]
 800ca3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca3c:	9304      	str	r3, [sp, #16]
 800ca3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ca40:	f10d 08a8 	add.w	r8, sp, #168	; 0xa8
 800ca44:	ae18      	add	r6, sp, #96	; 0x60
 800ca46:	ad17      	add	r5, sp, #92	; 0x5c
 800ca48:	e9cd 4300 	strd	r4, r3, [sp]
 800ca4c:	f8cd 8018 	str.w	r8, [sp, #24]
 800ca50:	ec53 2b18 	vmov	r2, r3, d8
 800ca54:	9603      	str	r6, [sp, #12]
 800ca56:	9502      	str	r5, [sp, #8]
 800ca58:	4658      	mov	r0, fp
 800ca5a:	f7ff fdbd 	bl	800c5d8 <wcvt>
 800ca5e:	4540      	cmp	r0, r8
 800ca60:	4682      	mov	sl, r0
 800ca62:	f040 80ec 	bne.w	800cc3e <_svfwprintf_r+0x586>
 800ca66:	9919      	ldr	r1, [sp, #100]	; 0x64
 800ca68:	2928      	cmp	r1, #40	; 0x28
 800ca6a:	f340 80e8 	ble.w	800cc3e <_svfwprintf_r+0x586>
 800ca6e:	0089      	lsls	r1, r1, #2
 800ca70:	4658      	mov	r0, fp
 800ca72:	f7fc fe25 	bl	80096c0 <_malloc_r>
 800ca76:	4680      	mov	r8, r0
 800ca78:	2800      	cmp	r0, #0
 800ca7a:	f43f af4d 	beq.w	800c918 <_svfwprintf_r+0x260>
 800ca7e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ca80:	9502      	str	r5, [sp, #8]
 800ca82:	e9cd 0306 	strd	r0, r3, [sp, #24]
 800ca86:	ab19      	add	r3, sp, #100	; 0x64
 800ca88:	9305      	str	r3, [sp, #20]
 800ca8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca8c:	e9cd 6303 	strd	r6, r3, [sp, #12]
 800ca90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ca92:	4658      	mov	r0, fp
 800ca94:	e9cd 4300 	strd	r4, r3, [sp]
 800ca98:	ec53 2b18 	vmov	r2, r3, d8
 800ca9c:	f7ff fd9c 	bl	800c5d8 <wcvt>
 800caa0:	4682      	mov	sl, r0
 800caa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800caa4:	9d18      	ldr	r5, [sp, #96]	; 0x60
 800caa6:	f023 0320 	bic.w	r3, r3, #32
 800caaa:	2b47      	cmp	r3, #71	; 0x47
 800caac:	f040 80d6 	bne.w	800cc5c <_svfwprintf_r+0x5a4>
 800cab0:	1cee      	adds	r6, r5, #3
 800cab2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cab4:	db02      	blt.n	800cabc <_svfwprintf_r+0x404>
 800cab6:	42ac      	cmp	r4, r5
 800cab8:	f280 80ec 	bge.w	800cc94 <_svfwprintf_r+0x5dc>
 800cabc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cabe:	3b02      	subs	r3, #2
 800cac0:	9309      	str	r3, [sp, #36]	; 0x24
 800cac2:	1e6b      	subs	r3, r5, #1
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cac8:	9318      	str	r3, [sp, #96]	; 0x60
 800caca:	bfb8      	it	lt
 800cacc:	f1c5 0301 	rsblt	r3, r5, #1
 800cad0:	921c      	str	r2, [sp, #112]	; 0x70
 800cad2:	bfb4      	ite	lt
 800cad4:	222d      	movlt	r2, #45	; 0x2d
 800cad6:	222b      	movge	r2, #43	; 0x2b
 800cad8:	2b09      	cmp	r3, #9
 800cada:	921d      	str	r2, [sp, #116]	; 0x74
 800cadc:	f340 80d1 	ble.w	800cc82 <_svfwprintf_r+0x5ca>
 800cae0:	a82a      	add	r0, sp, #168	; 0xa8
 800cae2:	250a      	movs	r5, #10
 800cae4:	4602      	mov	r2, r0
 800cae6:	fb93 f4f5 	sdiv	r4, r3, r5
 800caea:	fb05 3114 	mls	r1, r5, r4, r3
 800caee:	3130      	adds	r1, #48	; 0x30
 800caf0:	f842 1c04 	str.w	r1, [r2, #-4]
 800caf4:	4619      	mov	r1, r3
 800caf6:	2963      	cmp	r1, #99	; 0x63
 800caf8:	f1a0 0004 	sub.w	r0, r0, #4
 800cafc:	4623      	mov	r3, r4
 800cafe:	dcf1      	bgt.n	800cae4 <_svfwprintf_r+0x42c>
 800cb00:	3330      	adds	r3, #48	; 0x30
 800cb02:	f840 3c04 	str.w	r3, [r0, #-4]
 800cb06:	f1a2 0108 	sub.w	r1, r2, #8
 800cb0a:	a81e      	add	r0, sp, #120	; 0x78
 800cb0c:	ab2a      	add	r3, sp, #168	; 0xa8
 800cb0e:	4299      	cmp	r1, r3
 800cb10:	f0c0 80b2 	bcc.w	800cc78 <_svfwprintf_r+0x5c0>
 800cb14:	f10d 04b3 	add.w	r4, sp, #179	; 0xb3
 800cb18:	1aa4      	subs	r4, r4, r2
 800cb1a:	f024 0403 	bic.w	r4, r4, #3
 800cb1e:	3a0b      	subs	r2, #11
 800cb20:	4293      	cmp	r3, r2
 800cb22:	bf38      	it	cc
 800cb24:	2400      	movcc	r4, #0
 800cb26:	ab1e      	add	r3, sp, #120	; 0x78
 800cb28:	441c      	add	r4, r3
 800cb2a:	a81c      	add	r0, sp, #112	; 0x70
 800cb2c:	1a24      	subs	r4, r4, r0
 800cb2e:	10a3      	asrs	r3, r4, #2
 800cb30:	9311      	str	r3, [sp, #68]	; 0x44
 800cb32:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cb34:	2b01      	cmp	r3, #1
 800cb36:	eb03 04a4 	add.w	r4, r3, r4, asr #2
 800cb3a:	dc02      	bgt.n	800cb42 <_svfwprintf_r+0x48a>
 800cb3c:	f017 0501 	ands.w	r5, r7, #1
 800cb40:	d001      	beq.n	800cb46 <_svfwprintf_r+0x48e>
 800cb42:	3401      	adds	r4, #1
 800cb44:	2500      	movs	r5, #0
 800cb46:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800cb48:	2e00      	cmp	r6, #0
 800cb4a:	f000 817e 	beq.w	800ce4a <_svfwprintf_r+0x792>
 800cb4e:	232d      	movs	r3, #45	; 0x2d
 800cb50:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800cb52:	9315      	str	r3, [sp, #84]	; 0x54
 800cb54:	2600      	movs	r6, #0
 800cb56:	42a6      	cmp	r6, r4
 800cb58:	4633      	mov	r3, r6
 800cb5a:	bfb8      	it	lt
 800cb5c:	4623      	movlt	r3, r4
 800cb5e:	930e      	str	r3, [sp, #56]	; 0x38
 800cb60:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cb62:	b113      	cbz	r3, 800cb6a <_svfwprintf_r+0x4b2>
 800cb64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cb66:	3301      	adds	r3, #1
 800cb68:	930e      	str	r3, [sp, #56]	; 0x38
 800cb6a:	f017 0302 	ands.w	r3, r7, #2
 800cb6e:	9312      	str	r3, [sp, #72]	; 0x48
 800cb70:	bf1e      	ittt	ne
 800cb72:	9b0e      	ldrne	r3, [sp, #56]	; 0x38
 800cb74:	3302      	addne	r3, #2
 800cb76:	930e      	strne	r3, [sp, #56]	; 0x38
 800cb78:	f017 0384 	ands.w	r3, r7, #132	; 0x84
 800cb7c:	9313      	str	r3, [sp, #76]	; 0x4c
 800cb7e:	f000 8166 	beq.w	800ce4e <_svfwprintf_r+0x796>
 800cb82:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cb84:	b143      	cbz	r3, 800cb98 <_svfwprintf_r+0x4e0>
 800cb86:	2304      	movs	r3, #4
 800cb88:	aa15      	add	r2, sp, #84	; 0x54
 800cb8a:	4649      	mov	r1, r9
 800cb8c:	4658      	mov	r0, fp
 800cb8e:	f000 fc34 	bl	800d3fa <__ssputs_r>
 800cb92:	3001      	adds	r0, #1
 800cb94:	f000 816e 	beq.w	800ce74 <_svfwprintf_r+0x7bc>
 800cb98:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cb9a:	b143      	cbz	r3, 800cbae <_svfwprintf_r+0x4f6>
 800cb9c:	2308      	movs	r3, #8
 800cb9e:	aa1a      	add	r2, sp, #104	; 0x68
 800cba0:	4649      	mov	r1, r9
 800cba2:	4658      	mov	r0, fp
 800cba4:	f000 fc29 	bl	800d3fa <__ssputs_r>
 800cba8:	3001      	adds	r0, #1
 800cbaa:	f000 8163 	beq.w	800ce74 <_svfwprintf_r+0x7bc>
 800cbae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cbb0:	2b80      	cmp	r3, #128	; 0x80
 800cbb2:	d113      	bne.n	800cbdc <_svfwprintf_r+0x524>
 800cbb4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cbb6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cbb8:	1a9b      	subs	r3, r3, r2
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	9310      	str	r3, [sp, #64]	; 0x40
 800cbbe:	dd0d      	ble.n	800cbdc <_svfwprintf_r+0x524>
 800cbc0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cbc2:	4a25      	ldr	r2, [pc, #148]	; (800cc58 <_svfwprintf_r+0x5a0>)
 800cbc4:	2b10      	cmp	r3, #16
 800cbc6:	f300 816a 	bgt.w	800ce9e <_svfwprintf_r+0x7e6>
 800cbca:	4a23      	ldr	r2, [pc, #140]	; (800cc58 <_svfwprintf_r+0x5a0>)
 800cbcc:	009b      	lsls	r3, r3, #2
 800cbce:	4649      	mov	r1, r9
 800cbd0:	4658      	mov	r0, fp
 800cbd2:	f000 fc12 	bl	800d3fa <__ssputs_r>
 800cbd6:	3001      	adds	r0, #1
 800cbd8:	f000 814c 	beq.w	800ce74 <_svfwprintf_r+0x7bc>
 800cbdc:	1b36      	subs	r6, r6, r4
 800cbde:	2e00      	cmp	r6, #0
 800cbe0:	dd0c      	ble.n	800cbfc <_svfwprintf_r+0x544>
 800cbe2:	2e10      	cmp	r6, #16
 800cbe4:	4a1c      	ldr	r2, [pc, #112]	; (800cc58 <_svfwprintf_r+0x5a0>)
 800cbe6:	f300 8165 	bgt.w	800ceb4 <_svfwprintf_r+0x7fc>
 800cbea:	4a1b      	ldr	r2, [pc, #108]	; (800cc58 <_svfwprintf_r+0x5a0>)
 800cbec:	00b3      	lsls	r3, r6, #2
 800cbee:	4649      	mov	r1, r9
 800cbf0:	4658      	mov	r0, fp
 800cbf2:	f000 fc02 	bl	800d3fa <__ssputs_r>
 800cbf6:	3001      	adds	r0, #1
 800cbf8:	f000 813c 	beq.w	800ce74 <_svfwprintf_r+0x7bc>
 800cbfc:	05f9      	lsls	r1, r7, #23
 800cbfe:	f100 8162 	bmi.w	800cec6 <_svfwprintf_r+0x80e>
 800cc02:	00a3      	lsls	r3, r4, #2
 800cc04:	4652      	mov	r2, sl
 800cc06:	4649      	mov	r1, r9
 800cc08:	4658      	mov	r0, fp
 800cc0a:	f000 fbf6 	bl	800d3fa <__ssputs_r>
 800cc0e:	3001      	adds	r0, #1
 800cc10:	f000 8130 	beq.w	800ce74 <_svfwprintf_r+0x7bc>
 800cc14:	077a      	lsls	r2, r7, #29
 800cc16:	f100 8281 	bmi.w	800d11c <_svfwprintf_r+0xa64>
 800cc1a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800cc1e:	990e      	ldr	r1, [sp, #56]	; 0x38
 800cc20:	428a      	cmp	r2, r1
 800cc22:	bfac      	ite	ge
 800cc24:	189b      	addge	r3, r3, r2
 800cc26:	185b      	addlt	r3, r3, r1
 800cc28:	930d      	str	r3, [sp, #52]	; 0x34
 800cc2a:	f1b8 0f00 	cmp.w	r8, #0
 800cc2e:	d055      	beq.n	800ccdc <_svfwprintf_r+0x624>
 800cc30:	4641      	mov	r1, r8
 800cc32:	4658      	mov	r0, fp
 800cc34:	f7fc fcd8 	bl	80095e8 <_free_r>
 800cc38:	e050      	b.n	800ccdc <_svfwprintf_r+0x624>
 800cc3a:	2406      	movs	r4, #6
 800cc3c:	e6f6      	b.n	800ca2c <_svfwprintf_r+0x374>
 800cc3e:	f04f 0800 	mov.w	r8, #0
 800cc42:	e72e      	b.n	800caa2 <_svfwprintf_r+0x3ea>
 800cc44:	7fefffff 	.word	0x7fefffff
 800cc48:	08012ba8 	.word	0x08012ba8
 800cc4c:	08012bb8 	.word	0x08012bb8
 800cc50:	08012bd8 	.word	0x08012bd8
 800cc54:	08012bc8 	.word	0x08012bc8
 800cc58:	08012cb8 	.word	0x08012cb8
 800cc5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc5e:	2b66      	cmp	r3, #102	; 0x66
 800cc60:	f47f af2f 	bne.w	800cac2 <_svfwprintf_r+0x40a>
 800cc64:	f007 0301 	and.w	r3, r7, #1
 800cc68:	2d00      	cmp	r5, #0
 800cc6a:	ea43 0304 	orr.w	r3, r3, r4
 800cc6e:	dd0e      	ble.n	800cc8e <_svfwprintf_r+0x5d6>
 800cc70:	b1fb      	cbz	r3, 800ccb2 <_svfwprintf_r+0x5fa>
 800cc72:	3401      	adds	r4, #1
 800cc74:	442c      	add	r4, r5
 800cc76:	e766      	b.n	800cb46 <_svfwprintf_r+0x48e>
 800cc78:	f851 4b04 	ldr.w	r4, [r1], #4
 800cc7c:	f840 4b04 	str.w	r4, [r0], #4
 800cc80:	e745      	b.n	800cb0e <_svfwprintf_r+0x456>
 800cc82:	2230      	movs	r2, #48	; 0x30
 800cc84:	4413      	add	r3, r2
 800cc86:	921e      	str	r2, [sp, #120]	; 0x78
 800cc88:	931f      	str	r3, [sp, #124]	; 0x7c
 800cc8a:	ac20      	add	r4, sp, #128	; 0x80
 800cc8c:	e74d      	b.n	800cb2a <_svfwprintf_r+0x472>
 800cc8e:	b193      	cbz	r3, 800ccb6 <_svfwprintf_r+0x5fe>
 800cc90:	3402      	adds	r4, #2
 800cc92:	e758      	b.n	800cb46 <_svfwprintf_r+0x48e>
 800cc94:	42ab      	cmp	r3, r5
 800cc96:	dc05      	bgt.n	800cca4 <_svfwprintf_r+0x5ec>
 800cc98:	07fc      	lsls	r4, r7, #31
 800cc9a:	d50e      	bpl.n	800ccba <_svfwprintf_r+0x602>
 800cc9c:	1c6c      	adds	r4, r5, #1
 800cc9e:	2367      	movs	r3, #103	; 0x67
 800cca0:	9309      	str	r3, [sp, #36]	; 0x24
 800cca2:	e750      	b.n	800cb46 <_svfwprintf_r+0x48e>
 800cca4:	2d00      	cmp	r5, #0
 800cca6:	bfd4      	ite	le
 800cca8:	f1c5 0402 	rsble	r4, r5, #2
 800ccac:	2401      	movgt	r4, #1
 800ccae:	441c      	add	r4, r3
 800ccb0:	e7f5      	b.n	800cc9e <_svfwprintf_r+0x5e6>
 800ccb2:	462c      	mov	r4, r5
 800ccb4:	e747      	b.n	800cb46 <_svfwprintf_r+0x48e>
 800ccb6:	2401      	movs	r4, #1
 800ccb8:	e745      	b.n	800cb46 <_svfwprintf_r+0x48e>
 800ccba:	462c      	mov	r4, r5
 800ccbc:	e7ef      	b.n	800cc9e <_svfwprintf_r+0x5e6>
 800ccbe:	b101      	cbz	r1, 800ccc2 <_svfwprintf_r+0x60a>
 800ccc0:	9615      	str	r6, [sp, #84]	; 0x54
 800ccc2:	1d2b      	adds	r3, r5, #4
 800ccc4:	06f8      	lsls	r0, r7, #27
 800ccc6:	930a      	str	r3, [sp, #40]	; 0x28
 800ccc8:	d503      	bpl.n	800ccd2 <_svfwprintf_r+0x61a>
 800ccca:	682b      	ldr	r3, [r5, #0]
 800cccc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ccce:	601a      	str	r2, [r3, #0]
 800ccd0:	e004      	b.n	800ccdc <_svfwprintf_r+0x624>
 800ccd2:	0679      	lsls	r1, r7, #25
 800ccd4:	d5f9      	bpl.n	800ccca <_svfwprintf_r+0x612>
 800ccd6:	682b      	ldr	r3, [r5, #0]
 800ccd8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ccda:	801a      	strh	r2, [r3, #0]
 800ccdc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800ccde:	e524      	b.n	800c72a <_svfwprintf_r+0x72>
 800cce0:	462a      	mov	r2, r5
 800cce2:	f017 0110 	ands.w	r1, r7, #16
 800cce6:	f852 3b04 	ldr.w	r3, [r2], #4
 800ccea:	920a      	str	r2, [sp, #40]	; 0x28
 800ccec:	d011      	beq.n	800cd12 <_svfwprintf_r+0x65a>
 800ccee:	2200      	movs	r2, #0
 800ccf0:	2100      	movs	r1, #0
 800ccf2:	9115      	str	r1, [sp, #84]	; 0x54
 800ccf4:	1c66      	adds	r6, r4, #1
 800ccf6:	f000 822e 	beq.w	800d156 <_svfwprintf_r+0xa9e>
 800ccfa:	f027 0180 	bic.w	r1, r7, #128	; 0x80
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	f040 822d 	bne.w	800d15e <_svfwprintf_r+0xaa6>
 800cd04:	2c00      	cmp	r4, #0
 800cd06:	f000 8098 	beq.w	800ce3a <_svfwprintf_r+0x782>
 800cd0a:	2a01      	cmp	r2, #1
 800cd0c:	f040 822a 	bne.w	800d164 <_svfwprintf_r+0xaac>
 800cd10:	e075      	b.n	800cdfe <_svfwprintf_r+0x746>
 800cd12:	f017 0240 	ands.w	r2, r7, #64	; 0x40
 800cd16:	d0eb      	beq.n	800ccf0 <_svfwprintf_r+0x638>
 800cd18:	b29b      	uxth	r3, r3
 800cd1a:	e7e8      	b.n	800ccee <_svfwprintf_r+0x636>
 800cd1c:	462a      	mov	r2, r5
 800cd1e:	2178      	movs	r1, #120	; 0x78
 800cd20:	f852 3b04 	ldr.w	r3, [r2], #4
 800cd24:	920a      	str	r2, [sp, #40]	; 0x28
 800cd26:	2230      	movs	r2, #48	; 0x30
 800cd28:	e9cd 211a 	strd	r2, r1, [sp, #104]	; 0x68
 800cd2c:	4a9e      	ldr	r2, [pc, #632]	; (800cfa8 <_svfwprintf_r+0x8f0>)
 800cd2e:	920f      	str	r2, [sp, #60]	; 0x3c
 800cd30:	f047 0702 	orr.w	r7, r7, #2
 800cd34:	2202      	movs	r2, #2
 800cd36:	9109      	str	r1, [sp, #36]	; 0x24
 800cd38:	e7da      	b.n	800ccf0 <_svfwprintf_r+0x638>
 800cd3a:	462b      	mov	r3, r5
 800cd3c:	2600      	movs	r6, #0
 800cd3e:	f853 ab04 	ldr.w	sl, [r3], #4
 800cd42:	930a      	str	r3, [sp, #40]	; 0x28
 800cd44:	f017 0510 	ands.w	r5, r7, #16
 800cd48:	9615      	str	r6, [sp, #84]	; 0x54
 800cd4a:	d12d      	bne.n	800cda8 <_svfwprintf_r+0x6f0>
 800cd4c:	1c62      	adds	r2, r4, #1
 800cd4e:	d014      	beq.n	800cd7a <_svfwprintf_r+0x6c2>
 800cd50:	4622      	mov	r2, r4
 800cd52:	4629      	mov	r1, r5
 800cd54:	4650      	mov	r0, sl
 800cd56:	4626      	mov	r6, r4
 800cd58:	f7f3 fa52 	bl	8000200 <memchr>
 800cd5c:	b108      	cbz	r0, 800cd62 <_svfwprintf_r+0x6aa>
 800cd5e:	eba0 060a 	sub.w	r6, r0, sl
 800cd62:	2e27      	cmp	r6, #39	; 0x27
 800cd64:	d90e      	bls.n	800cd84 <_svfwprintf_r+0x6cc>
 800cd66:	1c71      	adds	r1, r6, #1
 800cd68:	0089      	lsls	r1, r1, #2
 800cd6a:	4658      	mov	r0, fp
 800cd6c:	f7fc fca8 	bl	80096c0 <_malloc_r>
 800cd70:	2800      	cmp	r0, #0
 800cd72:	f43f add1 	beq.w	800c918 <_svfwprintf_r+0x260>
 800cd76:	4680      	mov	r8, r0
 800cd78:	e007      	b.n	800cd8a <_svfwprintf_r+0x6d2>
 800cd7a:	4650      	mov	r0, sl
 800cd7c:	f7f3 fa32 	bl	80001e4 <strlen>
 800cd80:	4606      	mov	r6, r0
 800cd82:	e7ee      	b.n	800cd62 <_svfwprintf_r+0x6aa>
 800cd84:	f04f 0800 	mov.w	r8, #0
 800cd88:	a82a      	add	r0, sp, #168	; 0xa8
 800cd8a:	4634      	mov	r4, r6
 800cd8c:	2300      	movs	r3, #0
 800cd8e:	42b3      	cmp	r3, r6
 800cd90:	d104      	bne.n	800cd9c <_svfwprintf_r+0x6e4>
 800cd92:	2600      	movs	r6, #0
 800cd94:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 800cd98:	4682      	mov	sl, r0
 800cd9a:	e6dc      	b.n	800cb56 <_svfwprintf_r+0x49e>
 800cd9c:	f81a 2003 	ldrb.w	r2, [sl, r3]
 800cda0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 800cda4:	3301      	adds	r3, #1
 800cda6:	e7f2      	b.n	800cd8e <_svfwprintf_r+0x6d6>
 800cda8:	1c63      	adds	r3, r4, #1
 800cdaa:	d011      	beq.n	800cdd0 <_svfwprintf_r+0x718>
 800cdac:	4622      	mov	r2, r4
 800cdae:	4631      	mov	r1, r6
 800cdb0:	4650      	mov	r0, sl
 800cdb2:	f000 fa3e 	bl	800d232 <wmemchr>
 800cdb6:	4680      	mov	r8, r0
 800cdb8:	2800      	cmp	r0, #0
 800cdba:	f43f ae1a 	beq.w	800c9f2 <_svfwprintf_r+0x33a>
 800cdbe:	eba0 080a 	sub.w	r8, r0, sl
 800cdc2:	ea4f 08a8 	mov.w	r8, r8, asr #2
 800cdc6:	4544      	cmp	r4, r8
 800cdc8:	bfa8      	it	ge
 800cdca:	4644      	movge	r4, r8
 800cdcc:	46b0      	mov	r8, r6
 800cdce:	e610      	b.n	800c9f2 <_svfwprintf_r+0x33a>
 800cdd0:	4650      	mov	r0, sl
 800cdd2:	f000 fa25 	bl	800d220 <wcslen>
 800cdd6:	4604      	mov	r4, r0
 800cdd8:	e7f8      	b.n	800cdcc <_svfwprintf_r+0x714>
 800cdda:	462a      	mov	r2, r5
 800cddc:	06fe      	lsls	r6, r7, #27
 800cdde:	f852 3b04 	ldr.w	r3, [r2], #4
 800cde2:	920a      	str	r2, [sp, #40]	; 0x28
 800cde4:	d501      	bpl.n	800cdea <_svfwprintf_r+0x732>
 800cde6:	2201      	movs	r2, #1
 800cde8:	e782      	b.n	800ccf0 <_svfwprintf_r+0x638>
 800cdea:	067d      	lsls	r5, r7, #25
 800cdec:	bf48      	it	mi
 800cdee:	b29b      	uxthmi	r3, r3
 800cdf0:	e7f9      	b.n	800cde6 <_svfwprintf_r+0x72e>
 800cdf2:	b101      	cbz	r1, 800cdf6 <_svfwprintf_r+0x73e>
 800cdf4:	9615      	str	r6, [sp, #84]	; 0x54
 800cdf6:	4b6d      	ldr	r3, [pc, #436]	; (800cfac <_svfwprintf_r+0x8f4>)
 800cdf8:	e522      	b.n	800c840 <_svfwprintf_r+0x188>
 800cdfa:	2b09      	cmp	r3, #9
 800cdfc:	d804      	bhi.n	800ce08 <_svfwprintf_r+0x750>
 800cdfe:	3330      	adds	r3, #48	; 0x30
 800ce00:	9351      	str	r3, [sp, #324]	; 0x144
 800ce02:	f50d 7aa2 	add.w	sl, sp, #324	; 0x144
 800ce06:	e1c3      	b.n	800d190 <_svfwprintf_r+0xad8>
 800ce08:	f50d 7aa4 	add.w	sl, sp, #328	; 0x148
 800ce0c:	250a      	movs	r5, #10
 800ce0e:	fbb3 f0f5 	udiv	r0, r3, r5
 800ce12:	fb05 3210 	mls	r2, r5, r0, r3
 800ce16:	3230      	adds	r2, #48	; 0x30
 800ce18:	f84a 2d04 	str.w	r2, [sl, #-4]!
 800ce1c:	461a      	mov	r2, r3
 800ce1e:	2a09      	cmp	r2, #9
 800ce20:	4603      	mov	r3, r0
 800ce22:	d8f4      	bhi.n	800ce0e <_svfwprintf_r+0x756>
 800ce24:	e1b4      	b.n	800d190 <_svfwprintf_r+0xad8>
 800ce26:	f003 020f 	and.w	r2, r3, #15
 800ce2a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800ce2c:	091b      	lsrs	r3, r3, #4
 800ce2e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800ce32:	f84a 2d04 	str.w	r2, [sl, #-4]!
 800ce36:	d1f6      	bne.n	800ce26 <_svfwprintf_r+0x76e>
 800ce38:	e1aa      	b.n	800d190 <_svfwprintf_r+0xad8>
 800ce3a:	b91a      	cbnz	r2, 800ce44 <_svfwprintf_r+0x78c>
 800ce3c:	07f8      	lsls	r0, r7, #31
 800ce3e:	d501      	bpl.n	800ce44 <_svfwprintf_r+0x78c>
 800ce40:	2330      	movs	r3, #48	; 0x30
 800ce42:	e7dd      	b.n	800ce00 <_svfwprintf_r+0x748>
 800ce44:	f50d 7aa4 	add.w	sl, sp, #328	; 0x148
 800ce48:	e1a2      	b.n	800d190 <_svfwprintf_r+0xad8>
 800ce4a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800ce4c:	e683      	b.n	800cb56 <_svfwprintf_r+0x49e>
 800ce4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ce50:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ce52:	1a9b      	subs	r3, r3, r2
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	9310      	str	r3, [sp, #64]	; 0x40
 800ce58:	f77f ae93 	ble.w	800cb82 <_svfwprintf_r+0x4ca>
 800ce5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ce5e:	2b10      	cmp	r3, #16
 800ce60:	dc11      	bgt.n	800ce86 <_svfwprintf_r+0x7ce>
 800ce62:	4a53      	ldr	r2, [pc, #332]	; (800cfb0 <_svfwprintf_r+0x8f8>)
 800ce64:	009b      	lsls	r3, r3, #2
 800ce66:	4649      	mov	r1, r9
 800ce68:	4658      	mov	r0, fp
 800ce6a:	f000 fac6 	bl	800d3fa <__ssputs_r>
 800ce6e:	3001      	adds	r0, #1
 800ce70:	f47f ae87 	bne.w	800cb82 <_svfwprintf_r+0x4ca>
 800ce74:	f1b8 0f00 	cmp.w	r8, #0
 800ce78:	f43f ad54 	beq.w	800c924 <_svfwprintf_r+0x26c>
 800ce7c:	4641      	mov	r1, r8
 800ce7e:	4658      	mov	r0, fp
 800ce80:	f7fc fbb2 	bl	80095e8 <_free_r>
 800ce84:	e54e      	b.n	800c924 <_svfwprintf_r+0x26c>
 800ce86:	4a4a      	ldr	r2, [pc, #296]	; (800cfb0 <_svfwprintf_r+0x8f8>)
 800ce88:	2340      	movs	r3, #64	; 0x40
 800ce8a:	4649      	mov	r1, r9
 800ce8c:	4658      	mov	r0, fp
 800ce8e:	f000 fab4 	bl	800d3fa <__ssputs_r>
 800ce92:	3001      	adds	r0, #1
 800ce94:	d0ee      	beq.n	800ce74 <_svfwprintf_r+0x7bc>
 800ce96:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ce98:	3b10      	subs	r3, #16
 800ce9a:	9310      	str	r3, [sp, #64]	; 0x40
 800ce9c:	e7de      	b.n	800ce5c <_svfwprintf_r+0x7a4>
 800ce9e:	2340      	movs	r3, #64	; 0x40
 800cea0:	4649      	mov	r1, r9
 800cea2:	4658      	mov	r0, fp
 800cea4:	f000 faa9 	bl	800d3fa <__ssputs_r>
 800cea8:	3001      	adds	r0, #1
 800ceaa:	d0e3      	beq.n	800ce74 <_svfwprintf_r+0x7bc>
 800ceac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ceae:	3b10      	subs	r3, #16
 800ceb0:	9310      	str	r3, [sp, #64]	; 0x40
 800ceb2:	e685      	b.n	800cbc0 <_svfwprintf_r+0x508>
 800ceb4:	2340      	movs	r3, #64	; 0x40
 800ceb6:	4649      	mov	r1, r9
 800ceb8:	4658      	mov	r0, fp
 800ceba:	f000 fa9e 	bl	800d3fa <__ssputs_r>
 800cebe:	3001      	adds	r0, #1
 800cec0:	d0d8      	beq.n	800ce74 <_svfwprintf_r+0x7bc>
 800cec2:	3e10      	subs	r6, #16
 800cec4:	e68d      	b.n	800cbe2 <_svfwprintf_r+0x52a>
 800cec6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cec8:	2b65      	cmp	r3, #101	; 0x65
 800ceca:	f240 80e5 	bls.w	800d098 <_svfwprintf_r+0x9e0>
 800cece:	ec51 0b18 	vmov	r0, r1, d8
 800ced2:	2200      	movs	r2, #0
 800ced4:	2300      	movs	r3, #0
 800ced6:	f7f3 fe07 	bl	8000ae8 <__aeabi_dcmpeq>
 800ceda:	b358      	cbz	r0, 800cf34 <_svfwprintf_r+0x87c>
 800cedc:	4a35      	ldr	r2, [pc, #212]	; (800cfb4 <_svfwprintf_r+0x8fc>)
 800cede:	2304      	movs	r3, #4
 800cee0:	4649      	mov	r1, r9
 800cee2:	4658      	mov	r0, fp
 800cee4:	f000 fa89 	bl	800d3fa <__ssputs_r>
 800cee8:	3001      	adds	r0, #1
 800ceea:	d0c3      	beq.n	800ce74 <_svfwprintf_r+0x7bc>
 800ceec:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800cef0:	429a      	cmp	r2, r3
 800cef2:	db02      	blt.n	800cefa <_svfwprintf_r+0x842>
 800cef4:	07fb      	lsls	r3, r7, #31
 800cef6:	f57f ae8d 	bpl.w	800cc14 <_svfwprintf_r+0x55c>
 800cefa:	2304      	movs	r3, #4
 800cefc:	aa16      	add	r2, sp, #88	; 0x58
 800cefe:	4649      	mov	r1, r9
 800cf00:	4658      	mov	r0, fp
 800cf02:	f000 fa7a 	bl	800d3fa <__ssputs_r>
 800cf06:	3001      	adds	r0, #1
 800cf08:	d0b4      	beq.n	800ce74 <_svfwprintf_r+0x7bc>
 800cf0a:	9c19      	ldr	r4, [sp, #100]	; 0x64
 800cf0c:	3c01      	subs	r4, #1
 800cf0e:	2c00      	cmp	r4, #0
 800cf10:	f77f ae80 	ble.w	800cc14 <_svfwprintf_r+0x55c>
 800cf14:	4d28      	ldr	r5, [pc, #160]	; (800cfb8 <_svfwprintf_r+0x900>)
 800cf16:	2c10      	cmp	r4, #16
 800cf18:	dc02      	bgt.n	800cf20 <_svfwprintf_r+0x868>
 800cf1a:	00a3      	lsls	r3, r4, #2
 800cf1c:	4a26      	ldr	r2, [pc, #152]	; (800cfb8 <_svfwprintf_r+0x900>)
 800cf1e:	e672      	b.n	800cc06 <_svfwprintf_r+0x54e>
 800cf20:	2340      	movs	r3, #64	; 0x40
 800cf22:	462a      	mov	r2, r5
 800cf24:	4649      	mov	r1, r9
 800cf26:	4658      	mov	r0, fp
 800cf28:	f000 fa67 	bl	800d3fa <__ssputs_r>
 800cf2c:	3001      	adds	r0, #1
 800cf2e:	d0a1      	beq.n	800ce74 <_svfwprintf_r+0x7bc>
 800cf30:	3c10      	subs	r4, #16
 800cf32:	e7f0      	b.n	800cf16 <_svfwprintf_r+0x85e>
 800cf34:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	dc40      	bgt.n	800cfbc <_svfwprintf_r+0x904>
 800cf3a:	4a1e      	ldr	r2, [pc, #120]	; (800cfb4 <_svfwprintf_r+0x8fc>)
 800cf3c:	2304      	movs	r3, #4
 800cf3e:	4649      	mov	r1, r9
 800cf40:	4658      	mov	r0, fp
 800cf42:	f000 fa5a 	bl	800d3fa <__ssputs_r>
 800cf46:	3001      	adds	r0, #1
 800cf48:	d094      	beq.n	800ce74 <_svfwprintf_r+0x7bc>
 800cf4a:	e9dd 3218 	ldrd	r3, r2, [sp, #96]	; 0x60
 800cf4e:	4313      	orrs	r3, r2
 800cf50:	f007 0201 	and.w	r2, r7, #1
 800cf54:	4313      	orrs	r3, r2
 800cf56:	f43f ae5d 	beq.w	800cc14 <_svfwprintf_r+0x55c>
 800cf5a:	2304      	movs	r3, #4
 800cf5c:	aa16      	add	r2, sp, #88	; 0x58
 800cf5e:	4649      	mov	r1, r9
 800cf60:	4658      	mov	r0, fp
 800cf62:	f000 fa4a 	bl	800d3fa <__ssputs_r>
 800cf66:	3001      	adds	r0, #1
 800cf68:	d084      	beq.n	800ce74 <_svfwprintf_r+0x7bc>
 800cf6a:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800cf6c:	2c00      	cmp	r4, #0
 800cf6e:	da0c      	bge.n	800cf8a <_svfwprintf_r+0x8d2>
 800cf70:	4d11      	ldr	r5, [pc, #68]	; (800cfb8 <_svfwprintf_r+0x900>)
 800cf72:	4264      	negs	r4, r4
 800cf74:	2c10      	cmp	r4, #16
 800cf76:	dc0b      	bgt.n	800cf90 <_svfwprintf_r+0x8d8>
 800cf78:	4a0f      	ldr	r2, [pc, #60]	; (800cfb8 <_svfwprintf_r+0x900>)
 800cf7a:	00a3      	lsls	r3, r4, #2
 800cf7c:	4649      	mov	r1, r9
 800cf7e:	4658      	mov	r0, fp
 800cf80:	f000 fa3b 	bl	800d3fa <__ssputs_r>
 800cf84:	3001      	adds	r0, #1
 800cf86:	f43f af75 	beq.w	800ce74 <_svfwprintf_r+0x7bc>
 800cf8a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cf8c:	009b      	lsls	r3, r3, #2
 800cf8e:	e639      	b.n	800cc04 <_svfwprintf_r+0x54c>
 800cf90:	2340      	movs	r3, #64	; 0x40
 800cf92:	462a      	mov	r2, r5
 800cf94:	4649      	mov	r1, r9
 800cf96:	4658      	mov	r0, fp
 800cf98:	f000 fa2f 	bl	800d3fa <__ssputs_r>
 800cf9c:	3001      	adds	r0, #1
 800cf9e:	f43f af69 	beq.w	800ce74 <_svfwprintf_r+0x7bc>
 800cfa2:	3c10      	subs	r4, #16
 800cfa4:	e7e6      	b.n	800cf74 <_svfwprintf_r+0x8bc>
 800cfa6:	bf00      	nop
 800cfa8:	08012c2c 	.word	0x08012c2c
 800cfac:	08012be8 	.word	0x08012be8
 800cfb0:	08012c78 	.word	0x08012c78
 800cfb4:	08012c70 	.word	0x08012c70
 800cfb8:	08012cb8 	.word	0x08012cb8
 800cfbc:	9c19      	ldr	r4, [sp, #100]	; 0x64
 800cfbe:	f344 041d 	sbfx	r4, r4, #0, #30
 800cfc2:	42ac      	cmp	r4, r5
 800cfc4:	bfa8      	it	ge
 800cfc6:	462c      	movge	r4, r5
 800cfc8:	2c00      	cmp	r4, #0
 800cfca:	dc20      	bgt.n	800d00e <_svfwprintf_r+0x956>
 800cfcc:	2c00      	cmp	r4, #0
 800cfce:	bfac      	ite	ge
 800cfd0:	1b2e      	subge	r6, r5, r4
 800cfd2:	462e      	movlt	r6, r5
 800cfd4:	2e00      	cmp	r6, #0
 800cfd6:	dd0b      	ble.n	800cff0 <_svfwprintf_r+0x938>
 800cfd8:	4c72      	ldr	r4, [pc, #456]	; (800d1a4 <_svfwprintf_r+0xaec>)
 800cfda:	2e10      	cmp	r6, #16
 800cfdc:	dc20      	bgt.n	800d020 <_svfwprintf_r+0x968>
 800cfde:	4a71      	ldr	r2, [pc, #452]	; (800d1a4 <_svfwprintf_r+0xaec>)
 800cfe0:	00b3      	lsls	r3, r6, #2
 800cfe2:	4649      	mov	r1, r9
 800cfe4:	4658      	mov	r0, fp
 800cfe6:	f000 fa08 	bl	800d3fa <__ssputs_r>
 800cfea:	3001      	adds	r0, #1
 800cfec:	f43f af42 	beq.w	800ce74 <_svfwprintf_r+0x7bc>
 800cff0:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800cff4:	429a      	cmp	r2, r3
 800cff6:	ea4f 0585 	mov.w	r5, r5, lsl #2
 800cffa:	da1c      	bge.n	800d036 <_svfwprintf_r+0x97e>
 800cffc:	2304      	movs	r3, #4
 800cffe:	aa16      	add	r2, sp, #88	; 0x58
 800d000:	4649      	mov	r1, r9
 800d002:	4658      	mov	r0, fp
 800d004:	f000 f9f9 	bl	800d3fa <__ssputs_r>
 800d008:	3001      	adds	r0, #1
 800d00a:	d116      	bne.n	800d03a <_svfwprintf_r+0x982>
 800d00c:	e732      	b.n	800ce74 <_svfwprintf_r+0x7bc>
 800d00e:	00a3      	lsls	r3, r4, #2
 800d010:	4652      	mov	r2, sl
 800d012:	4649      	mov	r1, r9
 800d014:	4658      	mov	r0, fp
 800d016:	f000 f9f0 	bl	800d3fa <__ssputs_r>
 800d01a:	3001      	adds	r0, #1
 800d01c:	d1d6      	bne.n	800cfcc <_svfwprintf_r+0x914>
 800d01e:	e729      	b.n	800ce74 <_svfwprintf_r+0x7bc>
 800d020:	2340      	movs	r3, #64	; 0x40
 800d022:	4622      	mov	r2, r4
 800d024:	4649      	mov	r1, r9
 800d026:	4658      	mov	r0, fp
 800d028:	f000 f9e7 	bl	800d3fa <__ssputs_r>
 800d02c:	3001      	adds	r0, #1
 800d02e:	f43f af21 	beq.w	800ce74 <_svfwprintf_r+0x7bc>
 800d032:	3e10      	subs	r6, #16
 800d034:	e7d1      	b.n	800cfda <_svfwprintf_r+0x922>
 800d036:	07fe      	lsls	r6, r7, #31
 800d038:	d4e0      	bmi.n	800cffc <_svfwprintf_r+0x944>
 800d03a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d03c:	ebc5 0483 	rsb	r4, r5, r3, lsl #2
 800d040:	10a2      	asrs	r2, r4, #2
 800d042:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800d044:	1b1c      	subs	r4, r3, r4
 800d046:	4294      	cmp	r4, r2
 800d048:	bfa8      	it	ge
 800d04a:	4614      	movge	r4, r2
 800d04c:	2c00      	cmp	r4, #0
 800d04e:	dd09      	ble.n	800d064 <_svfwprintf_r+0x9ac>
 800d050:	00a3      	lsls	r3, r4, #2
 800d052:	eb0a 0205 	add.w	r2, sl, r5
 800d056:	4649      	mov	r1, r9
 800d058:	4658      	mov	r0, fp
 800d05a:	f000 f9ce 	bl	800d3fa <__ssputs_r>
 800d05e:	3001      	adds	r0, #1
 800d060:	f43f af08 	beq.w	800ce74 <_svfwprintf_r+0x7bc>
 800d064:	e9dd 3518 	ldrd	r3, r5, [sp, #96]	; 0x60
 800d068:	2c00      	cmp	r4, #0
 800d06a:	eba5 0503 	sub.w	r5, r5, r3
 800d06e:	bfa8      	it	ge
 800d070:	1b2d      	subge	r5, r5, r4
 800d072:	2d00      	cmp	r5, #0
 800d074:	f77f adce 	ble.w	800cc14 <_svfwprintf_r+0x55c>
 800d078:	4c4a      	ldr	r4, [pc, #296]	; (800d1a4 <_svfwprintf_r+0xaec>)
 800d07a:	2d10      	cmp	r5, #16
 800d07c:	dc01      	bgt.n	800d082 <_svfwprintf_r+0x9ca>
 800d07e:	00ab      	lsls	r3, r5, #2
 800d080:	e74c      	b.n	800cf1c <_svfwprintf_r+0x864>
 800d082:	2340      	movs	r3, #64	; 0x40
 800d084:	4622      	mov	r2, r4
 800d086:	4649      	mov	r1, r9
 800d088:	4658      	mov	r0, fp
 800d08a:	f000 f9b6 	bl	800d3fa <__ssputs_r>
 800d08e:	3001      	adds	r0, #1
 800d090:	f43f aef0 	beq.w	800ce74 <_svfwprintf_r+0x7bc>
 800d094:	3d10      	subs	r5, #16
 800d096:	e7f0      	b.n	800d07a <_svfwprintf_r+0x9c2>
 800d098:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d09a:	2b01      	cmp	r3, #1
 800d09c:	4652      	mov	r2, sl
 800d09e:	f04f 0304 	mov.w	r3, #4
 800d0a2:	4649      	mov	r1, r9
 800d0a4:	4658      	mov	r0, fp
 800d0a6:	dc01      	bgt.n	800d0ac <_svfwprintf_r+0x9f4>
 800d0a8:	07fc      	lsls	r4, r7, #31
 800d0aa:	d51b      	bpl.n	800d0e4 <_svfwprintf_r+0xa2c>
 800d0ac:	f000 f9a5 	bl	800d3fa <__ssputs_r>
 800d0b0:	3001      	adds	r0, #1
 800d0b2:	f43f aedf 	beq.w	800ce74 <_svfwprintf_r+0x7bc>
 800d0b6:	2304      	movs	r3, #4
 800d0b8:	aa16      	add	r2, sp, #88	; 0x58
 800d0ba:	4649      	mov	r1, r9
 800d0bc:	4658      	mov	r0, fp
 800d0be:	f000 f99c 	bl	800d3fa <__ssputs_r>
 800d0c2:	3001      	adds	r0, #1
 800d0c4:	f43f aed6 	beq.w	800ce74 <_svfwprintf_r+0x7bc>
 800d0c8:	9c19      	ldr	r4, [sp, #100]	; 0x64
 800d0ca:	ec51 0b18 	vmov	r0, r1, d8
 800d0ce:	2200      	movs	r2, #0
 800d0d0:	2300      	movs	r3, #0
 800d0d2:	3c01      	subs	r4, #1
 800d0d4:	f7f3 fd08 	bl	8000ae8 <__aeabi_dcmpeq>
 800d0d8:	b968      	cbnz	r0, 800d0f6 <_svfwprintf_r+0xa3e>
 800d0da:	00a3      	lsls	r3, r4, #2
 800d0dc:	f10a 0204 	add.w	r2, sl, #4
 800d0e0:	4649      	mov	r1, r9
 800d0e2:	4658      	mov	r0, fp
 800d0e4:	f000 f989 	bl	800d3fa <__ssputs_r>
 800d0e8:	3001      	adds	r0, #1
 800d0ea:	f43f aec3 	beq.w	800ce74 <_svfwprintf_r+0x7bc>
 800d0ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d0f0:	aa1c      	add	r2, sp, #112	; 0x70
 800d0f2:	009b      	lsls	r3, r3, #2
 800d0f4:	e587      	b.n	800cc06 <_svfwprintf_r+0x54e>
 800d0f6:	2c00      	cmp	r4, #0
 800d0f8:	ddf9      	ble.n	800d0ee <_svfwprintf_r+0xa36>
 800d0fa:	4d2a      	ldr	r5, [pc, #168]	; (800d1a4 <_svfwprintf_r+0xaec>)
 800d0fc:	2c10      	cmp	r4, #16
 800d0fe:	dc02      	bgt.n	800d106 <_svfwprintf_r+0xa4e>
 800d100:	4a28      	ldr	r2, [pc, #160]	; (800d1a4 <_svfwprintf_r+0xaec>)
 800d102:	00a3      	lsls	r3, r4, #2
 800d104:	e7ec      	b.n	800d0e0 <_svfwprintf_r+0xa28>
 800d106:	2340      	movs	r3, #64	; 0x40
 800d108:	462a      	mov	r2, r5
 800d10a:	4649      	mov	r1, r9
 800d10c:	4658      	mov	r0, fp
 800d10e:	f000 f974 	bl	800d3fa <__ssputs_r>
 800d112:	3001      	adds	r0, #1
 800d114:	f43f aeae 	beq.w	800ce74 <_svfwprintf_r+0x7bc>
 800d118:	3c10      	subs	r4, #16
 800d11a:	e7ef      	b.n	800d0fc <_svfwprintf_r+0xa44>
 800d11c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d11e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d120:	1a9c      	subs	r4, r3, r2
 800d122:	2c00      	cmp	r4, #0
 800d124:	f77f ad79 	ble.w	800cc1a <_svfwprintf_r+0x562>
 800d128:	2c10      	cmp	r4, #16
 800d12a:	dc09      	bgt.n	800d140 <_svfwprintf_r+0xa88>
 800d12c:	4a1e      	ldr	r2, [pc, #120]	; (800d1a8 <_svfwprintf_r+0xaf0>)
 800d12e:	00a3      	lsls	r3, r4, #2
 800d130:	4649      	mov	r1, r9
 800d132:	4658      	mov	r0, fp
 800d134:	f000 f961 	bl	800d3fa <__ssputs_r>
 800d138:	3001      	adds	r0, #1
 800d13a:	f47f ad6e 	bne.w	800cc1a <_svfwprintf_r+0x562>
 800d13e:	e699      	b.n	800ce74 <_svfwprintf_r+0x7bc>
 800d140:	4a19      	ldr	r2, [pc, #100]	; (800d1a8 <_svfwprintf_r+0xaf0>)
 800d142:	2340      	movs	r3, #64	; 0x40
 800d144:	4649      	mov	r1, r9
 800d146:	4658      	mov	r0, fp
 800d148:	f000 f957 	bl	800d3fa <__ssputs_r>
 800d14c:	3001      	adds	r0, #1
 800d14e:	f43f ae91 	beq.w	800ce74 <_svfwprintf_r+0x7bc>
 800d152:	3c10      	subs	r4, #16
 800d154:	e7e8      	b.n	800d128 <_svfwprintf_r+0xa70>
 800d156:	4639      	mov	r1, r7
 800d158:	2b00      	cmp	r3, #0
 800d15a:	f43f add6 	beq.w	800cd0a <_svfwprintf_r+0x652>
 800d15e:	2a01      	cmp	r2, #1
 800d160:	f43f ae4b 	beq.w	800cdfa <_svfwprintf_r+0x742>
 800d164:	2a02      	cmp	r2, #2
 800d166:	f50d 7aa4 	add.w	sl, sp, #328	; 0x148
 800d16a:	f43f ae5c 	beq.w	800ce26 <_svfwprintf_r+0x76e>
 800d16e:	f003 0207 	and.w	r2, r3, #7
 800d172:	3230      	adds	r2, #48	; 0x30
 800d174:	08db      	lsrs	r3, r3, #3
 800d176:	4650      	mov	r0, sl
 800d178:	f84a 2d04 	str.w	r2, [sl, #-4]!
 800d17c:	d1f7      	bne.n	800d16e <_svfwprintf_r+0xab6>
 800d17e:	07cd      	lsls	r5, r1, #31
 800d180:	d506      	bpl.n	800d190 <_svfwprintf_r+0xad8>
 800d182:	2a30      	cmp	r2, #48	; 0x30
 800d184:	d004      	beq.n	800d190 <_svfwprintf_r+0xad8>
 800d186:	2330      	movs	r3, #48	; 0x30
 800d188:	f84a 3c04 	str.w	r3, [sl, #-4]
 800d18c:	f1a0 0a08 	sub.w	sl, r0, #8
 800d190:	ab52      	add	r3, sp, #328	; 0x148
 800d192:	4626      	mov	r6, r4
 800d194:	eba3 040a 	sub.w	r4, r3, sl
 800d198:	10a4      	asrs	r4, r4, #2
 800d19a:	460f      	mov	r7, r1
 800d19c:	f04f 0800 	mov.w	r8, #0
 800d1a0:	4645      	mov	r5, r8
 800d1a2:	e4d8      	b.n	800cb56 <_svfwprintf_r+0x49e>
 800d1a4:	08012cb8 	.word	0x08012cb8
 800d1a8:	08012c78 	.word	0x08012c78

0800d1ac <__submore>:
 800d1ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1b0:	460c      	mov	r4, r1
 800d1b2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800d1b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d1b8:	4299      	cmp	r1, r3
 800d1ba:	d11d      	bne.n	800d1f8 <__submore+0x4c>
 800d1bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800d1c0:	f7fc fa7e 	bl	80096c0 <_malloc_r>
 800d1c4:	b918      	cbnz	r0, 800d1ce <__submore+0x22>
 800d1c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d1ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d1d2:	63a3      	str	r3, [r4, #56]	; 0x38
 800d1d4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800d1d8:	6360      	str	r0, [r4, #52]	; 0x34
 800d1da:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800d1de:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800d1e2:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800d1e6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800d1ea:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800d1ee:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800d1f2:	6020      	str	r0, [r4, #0]
 800d1f4:	2000      	movs	r0, #0
 800d1f6:	e7e8      	b.n	800d1ca <__submore+0x1e>
 800d1f8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800d1fa:	0077      	lsls	r7, r6, #1
 800d1fc:	463a      	mov	r2, r7
 800d1fe:	f000 f8cd 	bl	800d39c <_realloc_r>
 800d202:	4605      	mov	r5, r0
 800d204:	2800      	cmp	r0, #0
 800d206:	d0de      	beq.n	800d1c6 <__submore+0x1a>
 800d208:	eb00 0806 	add.w	r8, r0, r6
 800d20c:	4601      	mov	r1, r0
 800d20e:	4632      	mov	r2, r6
 800d210:	4640      	mov	r0, r8
 800d212:	f7fc f9d3 	bl	80095bc <memcpy>
 800d216:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800d21a:	f8c4 8000 	str.w	r8, [r4]
 800d21e:	e7e9      	b.n	800d1f4 <__submore+0x48>

0800d220 <wcslen>:
 800d220:	4602      	mov	r2, r0
 800d222:	4613      	mov	r3, r2
 800d224:	3204      	adds	r2, #4
 800d226:	6819      	ldr	r1, [r3, #0]
 800d228:	2900      	cmp	r1, #0
 800d22a:	d1fa      	bne.n	800d222 <wcslen+0x2>
 800d22c:	1a18      	subs	r0, r3, r0
 800d22e:	1080      	asrs	r0, r0, #2
 800d230:	4770      	bx	lr

0800d232 <wmemchr>:
 800d232:	b530      	push	{r4, r5, lr}
 800d234:	2400      	movs	r4, #0
 800d236:	4294      	cmp	r4, r2
 800d238:	4603      	mov	r3, r0
 800d23a:	d102      	bne.n	800d242 <wmemchr+0x10>
 800d23c:	2300      	movs	r3, #0
 800d23e:	4618      	mov	r0, r3
 800d240:	bd30      	pop	{r4, r5, pc}
 800d242:	681d      	ldr	r5, [r3, #0]
 800d244:	428d      	cmp	r5, r1
 800d246:	f100 0004 	add.w	r0, r0, #4
 800d24a:	d0f8      	beq.n	800d23e <wmemchr+0xc>
 800d24c:	3401      	adds	r4, #1
 800d24e:	e7f2      	b.n	800d236 <wmemchr+0x4>

0800d250 <__assert_func>:
 800d250:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d252:	4614      	mov	r4, r2
 800d254:	461a      	mov	r2, r3
 800d256:	4b09      	ldr	r3, [pc, #36]	; (800d27c <__assert_func+0x2c>)
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	4605      	mov	r5, r0
 800d25c:	68d8      	ldr	r0, [r3, #12]
 800d25e:	b14c      	cbz	r4, 800d274 <__assert_func+0x24>
 800d260:	4b07      	ldr	r3, [pc, #28]	; (800d280 <__assert_func+0x30>)
 800d262:	9100      	str	r1, [sp, #0]
 800d264:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d268:	4906      	ldr	r1, [pc, #24]	; (800d284 <__assert_func+0x34>)
 800d26a:	462b      	mov	r3, r5
 800d26c:	f000 f858 	bl	800d320 <fiprintf>
 800d270:	f000 f92b 	bl	800d4ca <abort>
 800d274:	4b04      	ldr	r3, [pc, #16]	; (800d288 <__assert_func+0x38>)
 800d276:	461c      	mov	r4, r3
 800d278:	e7f3      	b.n	800d262 <__assert_func+0x12>
 800d27a:	bf00      	nop
 800d27c:	20000014 	.word	0x20000014
 800d280:	08012cf8 	.word	0x08012cf8
 800d284:	08012d05 	.word	0x08012d05
 800d288:	08012d33 	.word	0x08012d33

0800d28c <btowc>:
 800d28c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d28e:	1c43      	adds	r3, r0, #1
 800d290:	b087      	sub	sp, #28
 800d292:	d103      	bne.n	800d29c <btowc+0x10>
 800d294:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d298:	b007      	add	sp, #28
 800d29a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d29c:	4d1c      	ldr	r5, [pc, #112]	; (800d310 <btowc+0x84>)
 800d29e:	f88d 000b 	strb.w	r0, [sp, #11]
 800d2a2:	ae04      	add	r6, sp, #16
 800d2a4:	2208      	movs	r2, #8
 800d2a6:	2100      	movs	r1, #0
 800d2a8:	4630      	mov	r0, r6
 800d2aa:	f7fc f995 	bl	80095d8 <memset>
 800d2ae:	682f      	ldr	r7, [r5, #0]
 800d2b0:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800d2b2:	b9fc      	cbnz	r4, 800d2f4 <btowc+0x68>
 800d2b4:	2050      	movs	r0, #80	; 0x50
 800d2b6:	f7fc f971 	bl	800959c <malloc>
 800d2ba:	4602      	mov	r2, r0
 800d2bc:	65b8      	str	r0, [r7, #88]	; 0x58
 800d2be:	b920      	cbnz	r0, 800d2ca <btowc+0x3e>
 800d2c0:	4b14      	ldr	r3, [pc, #80]	; (800d314 <btowc+0x88>)
 800d2c2:	4815      	ldr	r0, [pc, #84]	; (800d318 <btowc+0x8c>)
 800d2c4:	2118      	movs	r1, #24
 800d2c6:	f7ff ffc3 	bl	800d250 <__assert_func>
 800d2ca:	682b      	ldr	r3, [r5, #0]
 800d2cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d2ce:	e9c3 4400 	strd	r4, r4, [r3]
 800d2d2:	e9c3 4402 	strd	r4, r4, [r3, #8]
 800d2d6:	e9c3 4404 	strd	r4, r4, [r3, #16]
 800d2da:	e9c3 440a 	strd	r4, r4, [r3, #40]	; 0x28
 800d2de:	e9c3 440c 	strd	r4, r4, [r3, #48]	; 0x30
 800d2e2:	e9c3 440e 	strd	r4, r4, [r3, #56]	; 0x38
 800d2e6:	e9c3 4410 	strd	r4, r4, [r3, #64]	; 0x40
 800d2ea:	e9c3 4412 	strd	r4, r4, [r3, #72]	; 0x48
 800d2ee:	619c      	str	r4, [r3, #24]
 800d2f0:	771c      	strb	r4, [r3, #28]
 800d2f2:	625c      	str	r4, [r3, #36]	; 0x24
 800d2f4:	4b09      	ldr	r3, [pc, #36]	; (800d31c <btowc+0x90>)
 800d2f6:	9600      	str	r6, [sp, #0]
 800d2f8:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
 800d2fc:	6828      	ldr	r0, [r5, #0]
 800d2fe:	2301      	movs	r3, #1
 800d300:	f10d 020b 	add.w	r2, sp, #11
 800d304:	a903      	add	r1, sp, #12
 800d306:	47a0      	blx	r4
 800d308:	2801      	cmp	r0, #1
 800d30a:	d8c3      	bhi.n	800d294 <btowc+0x8>
 800d30c:	9803      	ldr	r0, [sp, #12]
 800d30e:	e7c3      	b.n	800d298 <btowc+0xc>
 800d310:	20000014 	.word	0x20000014
 800d314:	0801299b 	.word	0x0801299b
 800d318:	08012d34 	.word	0x08012d34
 800d31c:	20000078 	.word	0x20000078

0800d320 <fiprintf>:
 800d320:	b40e      	push	{r1, r2, r3}
 800d322:	b503      	push	{r0, r1, lr}
 800d324:	4601      	mov	r1, r0
 800d326:	ab03      	add	r3, sp, #12
 800d328:	4805      	ldr	r0, [pc, #20]	; (800d340 <fiprintf+0x20>)
 800d32a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d32e:	6800      	ldr	r0, [r0, #0]
 800d330:	9301      	str	r3, [sp, #4]
 800d332:	f7fe fd45 	bl	800bdc0 <_vfiprintf_r>
 800d336:	b002      	add	sp, #8
 800d338:	f85d eb04 	ldr.w	lr, [sp], #4
 800d33c:	b003      	add	sp, #12
 800d33e:	4770      	bx	lr
 800d340:	20000014 	.word	0x20000014

0800d344 <__ascii_mbtowc>:
 800d344:	b082      	sub	sp, #8
 800d346:	b901      	cbnz	r1, 800d34a <__ascii_mbtowc+0x6>
 800d348:	a901      	add	r1, sp, #4
 800d34a:	b142      	cbz	r2, 800d35e <__ascii_mbtowc+0x1a>
 800d34c:	b14b      	cbz	r3, 800d362 <__ascii_mbtowc+0x1e>
 800d34e:	7813      	ldrb	r3, [r2, #0]
 800d350:	600b      	str	r3, [r1, #0]
 800d352:	7812      	ldrb	r2, [r2, #0]
 800d354:	1e10      	subs	r0, r2, #0
 800d356:	bf18      	it	ne
 800d358:	2001      	movne	r0, #1
 800d35a:	b002      	add	sp, #8
 800d35c:	4770      	bx	lr
 800d35e:	4610      	mov	r0, r2
 800d360:	e7fb      	b.n	800d35a <__ascii_mbtowc+0x16>
 800d362:	f06f 0001 	mvn.w	r0, #1
 800d366:	e7f8      	b.n	800d35a <__ascii_mbtowc+0x16>

0800d368 <memmove>:
 800d368:	4288      	cmp	r0, r1
 800d36a:	b510      	push	{r4, lr}
 800d36c:	eb01 0402 	add.w	r4, r1, r2
 800d370:	d902      	bls.n	800d378 <memmove+0x10>
 800d372:	4284      	cmp	r4, r0
 800d374:	4623      	mov	r3, r4
 800d376:	d807      	bhi.n	800d388 <memmove+0x20>
 800d378:	1e43      	subs	r3, r0, #1
 800d37a:	42a1      	cmp	r1, r4
 800d37c:	d008      	beq.n	800d390 <memmove+0x28>
 800d37e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d382:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d386:	e7f8      	b.n	800d37a <memmove+0x12>
 800d388:	4402      	add	r2, r0
 800d38a:	4601      	mov	r1, r0
 800d38c:	428a      	cmp	r2, r1
 800d38e:	d100      	bne.n	800d392 <memmove+0x2a>
 800d390:	bd10      	pop	{r4, pc}
 800d392:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d396:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d39a:	e7f7      	b.n	800d38c <memmove+0x24>

0800d39c <_realloc_r>:
 800d39c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3a0:	4680      	mov	r8, r0
 800d3a2:	4614      	mov	r4, r2
 800d3a4:	460e      	mov	r6, r1
 800d3a6:	b921      	cbnz	r1, 800d3b2 <_realloc_r+0x16>
 800d3a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d3ac:	4611      	mov	r1, r2
 800d3ae:	f7fc b987 	b.w	80096c0 <_malloc_r>
 800d3b2:	b92a      	cbnz	r2, 800d3c0 <_realloc_r+0x24>
 800d3b4:	f7fc f918 	bl	80095e8 <_free_r>
 800d3b8:	4625      	mov	r5, r4
 800d3ba:	4628      	mov	r0, r5
 800d3bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3c0:	f000 f88a 	bl	800d4d8 <_malloc_usable_size_r>
 800d3c4:	4284      	cmp	r4, r0
 800d3c6:	4607      	mov	r7, r0
 800d3c8:	d802      	bhi.n	800d3d0 <_realloc_r+0x34>
 800d3ca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d3ce:	d812      	bhi.n	800d3f6 <_realloc_r+0x5a>
 800d3d0:	4621      	mov	r1, r4
 800d3d2:	4640      	mov	r0, r8
 800d3d4:	f7fc f974 	bl	80096c0 <_malloc_r>
 800d3d8:	4605      	mov	r5, r0
 800d3da:	2800      	cmp	r0, #0
 800d3dc:	d0ed      	beq.n	800d3ba <_realloc_r+0x1e>
 800d3de:	42bc      	cmp	r4, r7
 800d3e0:	4622      	mov	r2, r4
 800d3e2:	4631      	mov	r1, r6
 800d3e4:	bf28      	it	cs
 800d3e6:	463a      	movcs	r2, r7
 800d3e8:	f7fc f8e8 	bl	80095bc <memcpy>
 800d3ec:	4631      	mov	r1, r6
 800d3ee:	4640      	mov	r0, r8
 800d3f0:	f7fc f8fa 	bl	80095e8 <_free_r>
 800d3f4:	e7e1      	b.n	800d3ba <_realloc_r+0x1e>
 800d3f6:	4635      	mov	r5, r6
 800d3f8:	e7df      	b.n	800d3ba <_realloc_r+0x1e>

0800d3fa <__ssputs_r>:
 800d3fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d3fe:	688e      	ldr	r6, [r1, #8]
 800d400:	429e      	cmp	r6, r3
 800d402:	4682      	mov	sl, r0
 800d404:	460c      	mov	r4, r1
 800d406:	4690      	mov	r8, r2
 800d408:	461f      	mov	r7, r3
 800d40a:	d838      	bhi.n	800d47e <__ssputs_r+0x84>
 800d40c:	898a      	ldrh	r2, [r1, #12]
 800d40e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d412:	d032      	beq.n	800d47a <__ssputs_r+0x80>
 800d414:	6825      	ldr	r5, [r4, #0]
 800d416:	6909      	ldr	r1, [r1, #16]
 800d418:	eba5 0901 	sub.w	r9, r5, r1
 800d41c:	6965      	ldr	r5, [r4, #20]
 800d41e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d422:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d426:	3301      	adds	r3, #1
 800d428:	444b      	add	r3, r9
 800d42a:	106d      	asrs	r5, r5, #1
 800d42c:	429d      	cmp	r5, r3
 800d42e:	bf38      	it	cc
 800d430:	461d      	movcc	r5, r3
 800d432:	0553      	lsls	r3, r2, #21
 800d434:	d531      	bpl.n	800d49a <__ssputs_r+0xa0>
 800d436:	4629      	mov	r1, r5
 800d438:	f7fc f942 	bl	80096c0 <_malloc_r>
 800d43c:	4606      	mov	r6, r0
 800d43e:	b950      	cbnz	r0, 800d456 <__ssputs_r+0x5c>
 800d440:	230c      	movs	r3, #12
 800d442:	f8ca 3000 	str.w	r3, [sl]
 800d446:	89a3      	ldrh	r3, [r4, #12]
 800d448:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d44c:	81a3      	strh	r3, [r4, #12]
 800d44e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d456:	6921      	ldr	r1, [r4, #16]
 800d458:	464a      	mov	r2, r9
 800d45a:	f7fc f8af 	bl	80095bc <memcpy>
 800d45e:	89a3      	ldrh	r3, [r4, #12]
 800d460:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d464:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d468:	81a3      	strh	r3, [r4, #12]
 800d46a:	6126      	str	r6, [r4, #16]
 800d46c:	6165      	str	r5, [r4, #20]
 800d46e:	444e      	add	r6, r9
 800d470:	eba5 0509 	sub.w	r5, r5, r9
 800d474:	6026      	str	r6, [r4, #0]
 800d476:	60a5      	str	r5, [r4, #8]
 800d478:	463e      	mov	r6, r7
 800d47a:	42be      	cmp	r6, r7
 800d47c:	d900      	bls.n	800d480 <__ssputs_r+0x86>
 800d47e:	463e      	mov	r6, r7
 800d480:	6820      	ldr	r0, [r4, #0]
 800d482:	4632      	mov	r2, r6
 800d484:	4641      	mov	r1, r8
 800d486:	f7ff ff6f 	bl	800d368 <memmove>
 800d48a:	68a3      	ldr	r3, [r4, #8]
 800d48c:	1b9b      	subs	r3, r3, r6
 800d48e:	60a3      	str	r3, [r4, #8]
 800d490:	6823      	ldr	r3, [r4, #0]
 800d492:	4433      	add	r3, r6
 800d494:	6023      	str	r3, [r4, #0]
 800d496:	2000      	movs	r0, #0
 800d498:	e7db      	b.n	800d452 <__ssputs_r+0x58>
 800d49a:	462a      	mov	r2, r5
 800d49c:	f7ff ff7e 	bl	800d39c <_realloc_r>
 800d4a0:	4606      	mov	r6, r0
 800d4a2:	2800      	cmp	r0, #0
 800d4a4:	d1e1      	bne.n	800d46a <__ssputs_r+0x70>
 800d4a6:	6921      	ldr	r1, [r4, #16]
 800d4a8:	4650      	mov	r0, sl
 800d4aa:	f7fc f89d 	bl	80095e8 <_free_r>
 800d4ae:	e7c7      	b.n	800d440 <__ssputs_r+0x46>

0800d4b0 <__ascii_wctomb>:
 800d4b0:	b149      	cbz	r1, 800d4c6 <__ascii_wctomb+0x16>
 800d4b2:	2aff      	cmp	r2, #255	; 0xff
 800d4b4:	bf85      	ittet	hi
 800d4b6:	238a      	movhi	r3, #138	; 0x8a
 800d4b8:	6003      	strhi	r3, [r0, #0]
 800d4ba:	700a      	strbls	r2, [r1, #0]
 800d4bc:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800d4c0:	bf98      	it	ls
 800d4c2:	2001      	movls	r0, #1
 800d4c4:	4770      	bx	lr
 800d4c6:	4608      	mov	r0, r1
 800d4c8:	4770      	bx	lr

0800d4ca <abort>:
 800d4ca:	b508      	push	{r3, lr}
 800d4cc:	2006      	movs	r0, #6
 800d4ce:	f000 f833 	bl	800d538 <raise>
 800d4d2:	2001      	movs	r0, #1
 800d4d4:	f7f5 f868 	bl	80025a8 <_exit>

0800d4d8 <_malloc_usable_size_r>:
 800d4d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d4dc:	1f18      	subs	r0, r3, #4
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	bfbc      	itt	lt
 800d4e2:	580b      	ldrlt	r3, [r1, r0]
 800d4e4:	18c0      	addlt	r0, r0, r3
 800d4e6:	4770      	bx	lr

0800d4e8 <_raise_r>:
 800d4e8:	291f      	cmp	r1, #31
 800d4ea:	b538      	push	{r3, r4, r5, lr}
 800d4ec:	4604      	mov	r4, r0
 800d4ee:	460d      	mov	r5, r1
 800d4f0:	d904      	bls.n	800d4fc <_raise_r+0x14>
 800d4f2:	2316      	movs	r3, #22
 800d4f4:	6003      	str	r3, [r0, #0]
 800d4f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d4fa:	bd38      	pop	{r3, r4, r5, pc}
 800d4fc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d4fe:	b112      	cbz	r2, 800d506 <_raise_r+0x1e>
 800d500:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d504:	b94b      	cbnz	r3, 800d51a <_raise_r+0x32>
 800d506:	4620      	mov	r0, r4
 800d508:	f000 f830 	bl	800d56c <_getpid_r>
 800d50c:	462a      	mov	r2, r5
 800d50e:	4601      	mov	r1, r0
 800d510:	4620      	mov	r0, r4
 800d512:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d516:	f000 b817 	b.w	800d548 <_kill_r>
 800d51a:	2b01      	cmp	r3, #1
 800d51c:	d00a      	beq.n	800d534 <_raise_r+0x4c>
 800d51e:	1c59      	adds	r1, r3, #1
 800d520:	d103      	bne.n	800d52a <_raise_r+0x42>
 800d522:	2316      	movs	r3, #22
 800d524:	6003      	str	r3, [r0, #0]
 800d526:	2001      	movs	r0, #1
 800d528:	e7e7      	b.n	800d4fa <_raise_r+0x12>
 800d52a:	2400      	movs	r4, #0
 800d52c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d530:	4628      	mov	r0, r5
 800d532:	4798      	blx	r3
 800d534:	2000      	movs	r0, #0
 800d536:	e7e0      	b.n	800d4fa <_raise_r+0x12>

0800d538 <raise>:
 800d538:	4b02      	ldr	r3, [pc, #8]	; (800d544 <raise+0xc>)
 800d53a:	4601      	mov	r1, r0
 800d53c:	6818      	ldr	r0, [r3, #0]
 800d53e:	f7ff bfd3 	b.w	800d4e8 <_raise_r>
 800d542:	bf00      	nop
 800d544:	20000014 	.word	0x20000014

0800d548 <_kill_r>:
 800d548:	b538      	push	{r3, r4, r5, lr}
 800d54a:	4d07      	ldr	r5, [pc, #28]	; (800d568 <_kill_r+0x20>)
 800d54c:	2300      	movs	r3, #0
 800d54e:	4604      	mov	r4, r0
 800d550:	4608      	mov	r0, r1
 800d552:	4611      	mov	r1, r2
 800d554:	602b      	str	r3, [r5, #0]
 800d556:	f7f5 f817 	bl	8002588 <_kill>
 800d55a:	1c43      	adds	r3, r0, #1
 800d55c:	d102      	bne.n	800d564 <_kill_r+0x1c>
 800d55e:	682b      	ldr	r3, [r5, #0]
 800d560:	b103      	cbz	r3, 800d564 <_kill_r+0x1c>
 800d562:	6023      	str	r3, [r4, #0]
 800d564:	bd38      	pop	{r3, r4, r5, pc}
 800d566:	bf00      	nop
 800d568:	200004c4 	.word	0x200004c4

0800d56c <_getpid_r>:
 800d56c:	f7f5 b804 	b.w	8002578 <_getpid>

0800d570 <exp>:
 800d570:	b538      	push	{r3, r4, r5, lr}
 800d572:	ed2d 8b02 	vpush	{d8}
 800d576:	ec55 4b10 	vmov	r4, r5, d0
 800d57a:	f000 f8b1 	bl	800d6e0 <__ieee754_exp>
 800d57e:	eeb0 8a40 	vmov.f32	s16, s0
 800d582:	eef0 8a60 	vmov.f32	s17, s1
 800d586:	ec45 4b10 	vmov	d0, r4, r5
 800d58a:	f001 f846 	bl	800e61a <finite>
 800d58e:	b168      	cbz	r0, 800d5ac <exp+0x3c>
 800d590:	a317      	add	r3, pc, #92	; (adr r3, 800d5f0 <exp+0x80>)
 800d592:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d596:	4620      	mov	r0, r4
 800d598:	4629      	mov	r1, r5
 800d59a:	f7f3 facd 	bl	8000b38 <__aeabi_dcmpgt>
 800d59e:	b160      	cbz	r0, 800d5ba <exp+0x4a>
 800d5a0:	f7fb fda0 	bl	80090e4 <__errno>
 800d5a4:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 800d5e0 <exp+0x70>
 800d5a8:	2322      	movs	r3, #34	; 0x22
 800d5aa:	6003      	str	r3, [r0, #0]
 800d5ac:	eeb0 0a48 	vmov.f32	s0, s16
 800d5b0:	eef0 0a68 	vmov.f32	s1, s17
 800d5b4:	ecbd 8b02 	vpop	{d8}
 800d5b8:	bd38      	pop	{r3, r4, r5, pc}
 800d5ba:	a30f      	add	r3, pc, #60	; (adr r3, 800d5f8 <exp+0x88>)
 800d5bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5c0:	4620      	mov	r0, r4
 800d5c2:	4629      	mov	r1, r5
 800d5c4:	f7f3 fa9a 	bl	8000afc <__aeabi_dcmplt>
 800d5c8:	2800      	cmp	r0, #0
 800d5ca:	d0ef      	beq.n	800d5ac <exp+0x3c>
 800d5cc:	f7fb fd8a 	bl	80090e4 <__errno>
 800d5d0:	2322      	movs	r3, #34	; 0x22
 800d5d2:	ed9f 8b05 	vldr	d8, [pc, #20]	; 800d5e8 <exp+0x78>
 800d5d6:	6003      	str	r3, [r0, #0]
 800d5d8:	e7e8      	b.n	800d5ac <exp+0x3c>
 800d5da:	bf00      	nop
 800d5dc:	f3af 8000 	nop.w
 800d5e0:	00000000 	.word	0x00000000
 800d5e4:	7ff00000 	.word	0x7ff00000
	...
 800d5f0:	fefa39ef 	.word	0xfefa39ef
 800d5f4:	40862e42 	.word	0x40862e42
 800d5f8:	d52d3051 	.word	0xd52d3051
 800d5fc:	c0874910 	.word	0xc0874910

0800d600 <pow>:
 800d600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d602:	ed2d 8b02 	vpush	{d8}
 800d606:	eeb0 8a40 	vmov.f32	s16, s0
 800d60a:	eef0 8a60 	vmov.f32	s17, s1
 800d60e:	ec55 4b11 	vmov	r4, r5, d1
 800d612:	f000 f9e9 	bl	800d9e8 <__ieee754_pow>
 800d616:	4622      	mov	r2, r4
 800d618:	462b      	mov	r3, r5
 800d61a:	4620      	mov	r0, r4
 800d61c:	4629      	mov	r1, r5
 800d61e:	ec57 6b10 	vmov	r6, r7, d0
 800d622:	f7f3 fa93 	bl	8000b4c <__aeabi_dcmpun>
 800d626:	2800      	cmp	r0, #0
 800d628:	d13b      	bne.n	800d6a2 <pow+0xa2>
 800d62a:	ec51 0b18 	vmov	r0, r1, d8
 800d62e:	2200      	movs	r2, #0
 800d630:	2300      	movs	r3, #0
 800d632:	f7f3 fa59 	bl	8000ae8 <__aeabi_dcmpeq>
 800d636:	b1b8      	cbz	r0, 800d668 <pow+0x68>
 800d638:	2200      	movs	r2, #0
 800d63a:	2300      	movs	r3, #0
 800d63c:	4620      	mov	r0, r4
 800d63e:	4629      	mov	r1, r5
 800d640:	f7f3 fa52 	bl	8000ae8 <__aeabi_dcmpeq>
 800d644:	2800      	cmp	r0, #0
 800d646:	d146      	bne.n	800d6d6 <pow+0xd6>
 800d648:	ec45 4b10 	vmov	d0, r4, r5
 800d64c:	f000 ffe5 	bl	800e61a <finite>
 800d650:	b338      	cbz	r0, 800d6a2 <pow+0xa2>
 800d652:	2200      	movs	r2, #0
 800d654:	2300      	movs	r3, #0
 800d656:	4620      	mov	r0, r4
 800d658:	4629      	mov	r1, r5
 800d65a:	f7f3 fa4f 	bl	8000afc <__aeabi_dcmplt>
 800d65e:	b300      	cbz	r0, 800d6a2 <pow+0xa2>
 800d660:	f7fb fd40 	bl	80090e4 <__errno>
 800d664:	2322      	movs	r3, #34	; 0x22
 800d666:	e01b      	b.n	800d6a0 <pow+0xa0>
 800d668:	ec47 6b10 	vmov	d0, r6, r7
 800d66c:	f000 ffd5 	bl	800e61a <finite>
 800d670:	b9e0      	cbnz	r0, 800d6ac <pow+0xac>
 800d672:	eeb0 0a48 	vmov.f32	s0, s16
 800d676:	eef0 0a68 	vmov.f32	s1, s17
 800d67a:	f000 ffce 	bl	800e61a <finite>
 800d67e:	b1a8      	cbz	r0, 800d6ac <pow+0xac>
 800d680:	ec45 4b10 	vmov	d0, r4, r5
 800d684:	f000 ffc9 	bl	800e61a <finite>
 800d688:	b180      	cbz	r0, 800d6ac <pow+0xac>
 800d68a:	4632      	mov	r2, r6
 800d68c:	463b      	mov	r3, r7
 800d68e:	4630      	mov	r0, r6
 800d690:	4639      	mov	r1, r7
 800d692:	f7f3 fa5b 	bl	8000b4c <__aeabi_dcmpun>
 800d696:	2800      	cmp	r0, #0
 800d698:	d0e2      	beq.n	800d660 <pow+0x60>
 800d69a:	f7fb fd23 	bl	80090e4 <__errno>
 800d69e:	2321      	movs	r3, #33	; 0x21
 800d6a0:	6003      	str	r3, [r0, #0]
 800d6a2:	ecbd 8b02 	vpop	{d8}
 800d6a6:	ec47 6b10 	vmov	d0, r6, r7
 800d6aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d6ac:	2200      	movs	r2, #0
 800d6ae:	2300      	movs	r3, #0
 800d6b0:	4630      	mov	r0, r6
 800d6b2:	4639      	mov	r1, r7
 800d6b4:	f7f3 fa18 	bl	8000ae8 <__aeabi_dcmpeq>
 800d6b8:	2800      	cmp	r0, #0
 800d6ba:	d0f2      	beq.n	800d6a2 <pow+0xa2>
 800d6bc:	eeb0 0a48 	vmov.f32	s0, s16
 800d6c0:	eef0 0a68 	vmov.f32	s1, s17
 800d6c4:	f000 ffa9 	bl	800e61a <finite>
 800d6c8:	2800      	cmp	r0, #0
 800d6ca:	d0ea      	beq.n	800d6a2 <pow+0xa2>
 800d6cc:	ec45 4b10 	vmov	d0, r4, r5
 800d6d0:	f000 ffa3 	bl	800e61a <finite>
 800d6d4:	e7c3      	b.n	800d65e <pow+0x5e>
 800d6d6:	4f01      	ldr	r7, [pc, #4]	; (800d6dc <pow+0xdc>)
 800d6d8:	2600      	movs	r6, #0
 800d6da:	e7e2      	b.n	800d6a2 <pow+0xa2>
 800d6dc:	3ff00000 	.word	0x3ff00000

0800d6e0 <__ieee754_exp>:
 800d6e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d6e4:	ec55 4b10 	vmov	r4, r5, d0
 800d6e8:	49b5      	ldr	r1, [pc, #724]	; (800d9c0 <__ieee754_exp+0x2e0>)
 800d6ea:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d6ee:	428b      	cmp	r3, r1
 800d6f0:	ed2d 8b04 	vpush	{d8-d9}
 800d6f4:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 800d6f8:	d93d      	bls.n	800d776 <__ieee754_exp+0x96>
 800d6fa:	49b2      	ldr	r1, [pc, #712]	; (800d9c4 <__ieee754_exp+0x2e4>)
 800d6fc:	428b      	cmp	r3, r1
 800d6fe:	d918      	bls.n	800d732 <__ieee754_exp+0x52>
 800d700:	ee10 3a10 	vmov	r3, s0
 800d704:	f3c5 0213 	ubfx	r2, r5, #0, #20
 800d708:	4313      	orrs	r3, r2
 800d70a:	d009      	beq.n	800d720 <__ieee754_exp+0x40>
 800d70c:	ee10 2a10 	vmov	r2, s0
 800d710:	462b      	mov	r3, r5
 800d712:	4620      	mov	r0, r4
 800d714:	4629      	mov	r1, r5
 800d716:	f7f2 fdc9 	bl	80002ac <__adddf3>
 800d71a:	4604      	mov	r4, r0
 800d71c:	460d      	mov	r5, r1
 800d71e:	e002      	b.n	800d726 <__ieee754_exp+0x46>
 800d720:	b10e      	cbz	r6, 800d726 <__ieee754_exp+0x46>
 800d722:	2400      	movs	r4, #0
 800d724:	2500      	movs	r5, #0
 800d726:	ecbd 8b04 	vpop	{d8-d9}
 800d72a:	ec45 4b10 	vmov	d0, r4, r5
 800d72e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d732:	a38d      	add	r3, pc, #564	; (adr r3, 800d968 <__ieee754_exp+0x288>)
 800d734:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d738:	ee10 0a10 	vmov	r0, s0
 800d73c:	4629      	mov	r1, r5
 800d73e:	f7f3 f9fb 	bl	8000b38 <__aeabi_dcmpgt>
 800d742:	4607      	mov	r7, r0
 800d744:	b130      	cbz	r0, 800d754 <__ieee754_exp+0x74>
 800d746:	ecbd 8b04 	vpop	{d8-d9}
 800d74a:	2000      	movs	r0, #0
 800d74c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d750:	f000 bf51 	b.w	800e5f6 <__math_oflow>
 800d754:	a386      	add	r3, pc, #536	; (adr r3, 800d970 <__ieee754_exp+0x290>)
 800d756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d75a:	4620      	mov	r0, r4
 800d75c:	4629      	mov	r1, r5
 800d75e:	f7f3 f9cd 	bl	8000afc <__aeabi_dcmplt>
 800d762:	2800      	cmp	r0, #0
 800d764:	f000 808b 	beq.w	800d87e <__ieee754_exp+0x19e>
 800d768:	ecbd 8b04 	vpop	{d8-d9}
 800d76c:	4638      	mov	r0, r7
 800d76e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d772:	f000 bf37 	b.w	800e5e4 <__math_uflow>
 800d776:	4a94      	ldr	r2, [pc, #592]	; (800d9c8 <__ieee754_exp+0x2e8>)
 800d778:	4293      	cmp	r3, r2
 800d77a:	f240 80ac 	bls.w	800d8d6 <__ieee754_exp+0x1f6>
 800d77e:	4a93      	ldr	r2, [pc, #588]	; (800d9cc <__ieee754_exp+0x2ec>)
 800d780:	4293      	cmp	r3, r2
 800d782:	d87c      	bhi.n	800d87e <__ieee754_exp+0x19e>
 800d784:	4b92      	ldr	r3, [pc, #584]	; (800d9d0 <__ieee754_exp+0x2f0>)
 800d786:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d78a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d78e:	ee10 0a10 	vmov	r0, s0
 800d792:	4629      	mov	r1, r5
 800d794:	f7f2 fd88 	bl	80002a8 <__aeabi_dsub>
 800d798:	4b8e      	ldr	r3, [pc, #568]	; (800d9d4 <__ieee754_exp+0x2f4>)
 800d79a:	00f7      	lsls	r7, r6, #3
 800d79c:	443b      	add	r3, r7
 800d79e:	ed93 7b00 	vldr	d7, [r3]
 800d7a2:	f1c6 0a01 	rsb	sl, r6, #1
 800d7a6:	4680      	mov	r8, r0
 800d7a8:	4689      	mov	r9, r1
 800d7aa:	ebaa 0a06 	sub.w	sl, sl, r6
 800d7ae:	eeb0 8a47 	vmov.f32	s16, s14
 800d7b2:	eef0 8a67 	vmov.f32	s17, s15
 800d7b6:	ec53 2b18 	vmov	r2, r3, d8
 800d7ba:	4640      	mov	r0, r8
 800d7bc:	4649      	mov	r1, r9
 800d7be:	f7f2 fd73 	bl	80002a8 <__aeabi_dsub>
 800d7c2:	4604      	mov	r4, r0
 800d7c4:	460d      	mov	r5, r1
 800d7c6:	4622      	mov	r2, r4
 800d7c8:	462b      	mov	r3, r5
 800d7ca:	4620      	mov	r0, r4
 800d7cc:	4629      	mov	r1, r5
 800d7ce:	f7f2 ff23 	bl	8000618 <__aeabi_dmul>
 800d7d2:	a369      	add	r3, pc, #420	; (adr r3, 800d978 <__ieee754_exp+0x298>)
 800d7d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7d8:	4606      	mov	r6, r0
 800d7da:	460f      	mov	r7, r1
 800d7dc:	f7f2 ff1c 	bl	8000618 <__aeabi_dmul>
 800d7e0:	a367      	add	r3, pc, #412	; (adr r3, 800d980 <__ieee754_exp+0x2a0>)
 800d7e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7e6:	f7f2 fd5f 	bl	80002a8 <__aeabi_dsub>
 800d7ea:	4632      	mov	r2, r6
 800d7ec:	463b      	mov	r3, r7
 800d7ee:	f7f2 ff13 	bl	8000618 <__aeabi_dmul>
 800d7f2:	a365      	add	r3, pc, #404	; (adr r3, 800d988 <__ieee754_exp+0x2a8>)
 800d7f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7f8:	f7f2 fd58 	bl	80002ac <__adddf3>
 800d7fc:	4632      	mov	r2, r6
 800d7fe:	463b      	mov	r3, r7
 800d800:	f7f2 ff0a 	bl	8000618 <__aeabi_dmul>
 800d804:	a362      	add	r3, pc, #392	; (adr r3, 800d990 <__ieee754_exp+0x2b0>)
 800d806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d80a:	f7f2 fd4d 	bl	80002a8 <__aeabi_dsub>
 800d80e:	4632      	mov	r2, r6
 800d810:	463b      	mov	r3, r7
 800d812:	f7f2 ff01 	bl	8000618 <__aeabi_dmul>
 800d816:	a360      	add	r3, pc, #384	; (adr r3, 800d998 <__ieee754_exp+0x2b8>)
 800d818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d81c:	f7f2 fd46 	bl	80002ac <__adddf3>
 800d820:	4632      	mov	r2, r6
 800d822:	463b      	mov	r3, r7
 800d824:	f7f2 fef8 	bl	8000618 <__aeabi_dmul>
 800d828:	4602      	mov	r2, r0
 800d82a:	460b      	mov	r3, r1
 800d82c:	4620      	mov	r0, r4
 800d82e:	4629      	mov	r1, r5
 800d830:	f7f2 fd3a 	bl	80002a8 <__aeabi_dsub>
 800d834:	4602      	mov	r2, r0
 800d836:	460b      	mov	r3, r1
 800d838:	4606      	mov	r6, r0
 800d83a:	460f      	mov	r7, r1
 800d83c:	4620      	mov	r0, r4
 800d83e:	4629      	mov	r1, r5
 800d840:	f7f2 feea 	bl	8000618 <__aeabi_dmul>
 800d844:	ec41 0b19 	vmov	d9, r0, r1
 800d848:	f1ba 0f00 	cmp.w	sl, #0
 800d84c:	d15d      	bne.n	800d90a <__ieee754_exp+0x22a>
 800d84e:	2200      	movs	r2, #0
 800d850:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d854:	4630      	mov	r0, r6
 800d856:	4639      	mov	r1, r7
 800d858:	f7f2 fd26 	bl	80002a8 <__aeabi_dsub>
 800d85c:	4602      	mov	r2, r0
 800d85e:	460b      	mov	r3, r1
 800d860:	ec51 0b19 	vmov	r0, r1, d9
 800d864:	f7f3 f802 	bl	800086c <__aeabi_ddiv>
 800d868:	4622      	mov	r2, r4
 800d86a:	462b      	mov	r3, r5
 800d86c:	f7f2 fd1c 	bl	80002a8 <__aeabi_dsub>
 800d870:	4602      	mov	r2, r0
 800d872:	460b      	mov	r3, r1
 800d874:	2000      	movs	r0, #0
 800d876:	4958      	ldr	r1, [pc, #352]	; (800d9d8 <__ieee754_exp+0x2f8>)
 800d878:	f7f2 fd16 	bl	80002a8 <__aeabi_dsub>
 800d87c:	e74d      	b.n	800d71a <__ieee754_exp+0x3a>
 800d87e:	4857      	ldr	r0, [pc, #348]	; (800d9dc <__ieee754_exp+0x2fc>)
 800d880:	a347      	add	r3, pc, #284	; (adr r3, 800d9a0 <__ieee754_exp+0x2c0>)
 800d882:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d886:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800d88a:	4629      	mov	r1, r5
 800d88c:	4620      	mov	r0, r4
 800d88e:	f7f2 fec3 	bl	8000618 <__aeabi_dmul>
 800d892:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d896:	f7f2 fd09 	bl	80002ac <__adddf3>
 800d89a:	f7f3 f96d 	bl	8000b78 <__aeabi_d2iz>
 800d89e:	4682      	mov	sl, r0
 800d8a0:	f7f2 fe50 	bl	8000544 <__aeabi_i2d>
 800d8a4:	a340      	add	r3, pc, #256	; (adr r3, 800d9a8 <__ieee754_exp+0x2c8>)
 800d8a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8aa:	4606      	mov	r6, r0
 800d8ac:	460f      	mov	r7, r1
 800d8ae:	f7f2 feb3 	bl	8000618 <__aeabi_dmul>
 800d8b2:	4602      	mov	r2, r0
 800d8b4:	460b      	mov	r3, r1
 800d8b6:	4620      	mov	r0, r4
 800d8b8:	4629      	mov	r1, r5
 800d8ba:	f7f2 fcf5 	bl	80002a8 <__aeabi_dsub>
 800d8be:	a33c      	add	r3, pc, #240	; (adr r3, 800d9b0 <__ieee754_exp+0x2d0>)
 800d8c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8c4:	4680      	mov	r8, r0
 800d8c6:	4689      	mov	r9, r1
 800d8c8:	4630      	mov	r0, r6
 800d8ca:	4639      	mov	r1, r7
 800d8cc:	f7f2 fea4 	bl	8000618 <__aeabi_dmul>
 800d8d0:	ec41 0b18 	vmov	d8, r0, r1
 800d8d4:	e76f      	b.n	800d7b6 <__ieee754_exp+0xd6>
 800d8d6:	4a42      	ldr	r2, [pc, #264]	; (800d9e0 <__ieee754_exp+0x300>)
 800d8d8:	4293      	cmp	r3, r2
 800d8da:	d811      	bhi.n	800d900 <__ieee754_exp+0x220>
 800d8dc:	a336      	add	r3, pc, #216	; (adr r3, 800d9b8 <__ieee754_exp+0x2d8>)
 800d8de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8e2:	ee10 0a10 	vmov	r0, s0
 800d8e6:	4629      	mov	r1, r5
 800d8e8:	f7f2 fce0 	bl	80002ac <__adddf3>
 800d8ec:	4b3a      	ldr	r3, [pc, #232]	; (800d9d8 <__ieee754_exp+0x2f8>)
 800d8ee:	2200      	movs	r2, #0
 800d8f0:	f7f3 f922 	bl	8000b38 <__aeabi_dcmpgt>
 800d8f4:	b138      	cbz	r0, 800d906 <__ieee754_exp+0x226>
 800d8f6:	4b38      	ldr	r3, [pc, #224]	; (800d9d8 <__ieee754_exp+0x2f8>)
 800d8f8:	2200      	movs	r2, #0
 800d8fa:	4620      	mov	r0, r4
 800d8fc:	4629      	mov	r1, r5
 800d8fe:	e70a      	b.n	800d716 <__ieee754_exp+0x36>
 800d900:	f04f 0a00 	mov.w	sl, #0
 800d904:	e75f      	b.n	800d7c6 <__ieee754_exp+0xe6>
 800d906:	4682      	mov	sl, r0
 800d908:	e75d      	b.n	800d7c6 <__ieee754_exp+0xe6>
 800d90a:	4632      	mov	r2, r6
 800d90c:	463b      	mov	r3, r7
 800d90e:	2000      	movs	r0, #0
 800d910:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800d914:	f7f2 fcc8 	bl	80002a8 <__aeabi_dsub>
 800d918:	4602      	mov	r2, r0
 800d91a:	460b      	mov	r3, r1
 800d91c:	ec51 0b19 	vmov	r0, r1, d9
 800d920:	f7f2 ffa4 	bl	800086c <__aeabi_ddiv>
 800d924:	4602      	mov	r2, r0
 800d926:	460b      	mov	r3, r1
 800d928:	ec51 0b18 	vmov	r0, r1, d8
 800d92c:	f7f2 fcbc 	bl	80002a8 <__aeabi_dsub>
 800d930:	4642      	mov	r2, r8
 800d932:	464b      	mov	r3, r9
 800d934:	f7f2 fcb8 	bl	80002a8 <__aeabi_dsub>
 800d938:	4602      	mov	r2, r0
 800d93a:	460b      	mov	r3, r1
 800d93c:	2000      	movs	r0, #0
 800d93e:	4926      	ldr	r1, [pc, #152]	; (800d9d8 <__ieee754_exp+0x2f8>)
 800d940:	f7f2 fcb2 	bl	80002a8 <__aeabi_dsub>
 800d944:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 800d948:	4592      	cmp	sl, r2
 800d94a:	db02      	blt.n	800d952 <__ieee754_exp+0x272>
 800d94c:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800d950:	e6e3      	b.n	800d71a <__ieee754_exp+0x3a>
 800d952:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 800d956:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800d95a:	2200      	movs	r2, #0
 800d95c:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 800d960:	f7f2 fe5a 	bl	8000618 <__aeabi_dmul>
 800d964:	e6d9      	b.n	800d71a <__ieee754_exp+0x3a>
 800d966:	bf00      	nop
 800d968:	fefa39ef 	.word	0xfefa39ef
 800d96c:	40862e42 	.word	0x40862e42
 800d970:	d52d3051 	.word	0xd52d3051
 800d974:	c0874910 	.word	0xc0874910
 800d978:	72bea4d0 	.word	0x72bea4d0
 800d97c:	3e663769 	.word	0x3e663769
 800d980:	c5d26bf1 	.word	0xc5d26bf1
 800d984:	3ebbbd41 	.word	0x3ebbbd41
 800d988:	af25de2c 	.word	0xaf25de2c
 800d98c:	3f11566a 	.word	0x3f11566a
 800d990:	16bebd93 	.word	0x16bebd93
 800d994:	3f66c16c 	.word	0x3f66c16c
 800d998:	5555553e 	.word	0x5555553e
 800d99c:	3fc55555 	.word	0x3fc55555
 800d9a0:	652b82fe 	.word	0x652b82fe
 800d9a4:	3ff71547 	.word	0x3ff71547
 800d9a8:	fee00000 	.word	0xfee00000
 800d9ac:	3fe62e42 	.word	0x3fe62e42
 800d9b0:	35793c76 	.word	0x35793c76
 800d9b4:	3dea39ef 	.word	0x3dea39ef
 800d9b8:	8800759c 	.word	0x8800759c
 800d9bc:	7e37e43c 	.word	0x7e37e43c
 800d9c0:	40862e41 	.word	0x40862e41
 800d9c4:	7fefffff 	.word	0x7fefffff
 800d9c8:	3fd62e42 	.word	0x3fd62e42
 800d9cc:	3ff0a2b1 	.word	0x3ff0a2b1
 800d9d0:	08012eb0 	.word	0x08012eb0
 800d9d4:	08012ec0 	.word	0x08012ec0
 800d9d8:	3ff00000 	.word	0x3ff00000
 800d9dc:	08012ea0 	.word	0x08012ea0
 800d9e0:	3defffff 	.word	0x3defffff
 800d9e4:	00000000 	.word	0x00000000

0800d9e8 <__ieee754_pow>:
 800d9e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9ec:	ed2d 8b06 	vpush	{d8-d10}
 800d9f0:	b089      	sub	sp, #36	; 0x24
 800d9f2:	ed8d 1b00 	vstr	d1, [sp]
 800d9f6:	e9dd 2900 	ldrd	r2, r9, [sp]
 800d9fa:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800d9fe:	ea58 0102 	orrs.w	r1, r8, r2
 800da02:	ec57 6b10 	vmov	r6, r7, d0
 800da06:	d115      	bne.n	800da34 <__ieee754_pow+0x4c>
 800da08:	19b3      	adds	r3, r6, r6
 800da0a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800da0e:	4152      	adcs	r2, r2
 800da10:	4299      	cmp	r1, r3
 800da12:	4b89      	ldr	r3, [pc, #548]	; (800dc38 <__ieee754_pow+0x250>)
 800da14:	4193      	sbcs	r3, r2
 800da16:	f080 84d2 	bcs.w	800e3be <__ieee754_pow+0x9d6>
 800da1a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800da1e:	4630      	mov	r0, r6
 800da20:	4639      	mov	r1, r7
 800da22:	f7f2 fc43 	bl	80002ac <__adddf3>
 800da26:	ec41 0b10 	vmov	d0, r0, r1
 800da2a:	b009      	add	sp, #36	; 0x24
 800da2c:	ecbd 8b06 	vpop	{d8-d10}
 800da30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da34:	4b81      	ldr	r3, [pc, #516]	; (800dc3c <__ieee754_pow+0x254>)
 800da36:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800da3a:	429c      	cmp	r4, r3
 800da3c:	ee10 aa10 	vmov	sl, s0
 800da40:	463d      	mov	r5, r7
 800da42:	dc06      	bgt.n	800da52 <__ieee754_pow+0x6a>
 800da44:	d101      	bne.n	800da4a <__ieee754_pow+0x62>
 800da46:	2e00      	cmp	r6, #0
 800da48:	d1e7      	bne.n	800da1a <__ieee754_pow+0x32>
 800da4a:	4598      	cmp	r8, r3
 800da4c:	dc01      	bgt.n	800da52 <__ieee754_pow+0x6a>
 800da4e:	d10f      	bne.n	800da70 <__ieee754_pow+0x88>
 800da50:	b172      	cbz	r2, 800da70 <__ieee754_pow+0x88>
 800da52:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800da56:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800da5a:	ea55 050a 	orrs.w	r5, r5, sl
 800da5e:	d1dc      	bne.n	800da1a <__ieee754_pow+0x32>
 800da60:	e9dd 3200 	ldrd	r3, r2, [sp]
 800da64:	18db      	adds	r3, r3, r3
 800da66:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800da6a:	4152      	adcs	r2, r2
 800da6c:	429d      	cmp	r5, r3
 800da6e:	e7d0      	b.n	800da12 <__ieee754_pow+0x2a>
 800da70:	2d00      	cmp	r5, #0
 800da72:	da3b      	bge.n	800daec <__ieee754_pow+0x104>
 800da74:	4b72      	ldr	r3, [pc, #456]	; (800dc40 <__ieee754_pow+0x258>)
 800da76:	4598      	cmp	r8, r3
 800da78:	dc51      	bgt.n	800db1e <__ieee754_pow+0x136>
 800da7a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800da7e:	4598      	cmp	r8, r3
 800da80:	f340 84ac 	ble.w	800e3dc <__ieee754_pow+0x9f4>
 800da84:	ea4f 5328 	mov.w	r3, r8, asr #20
 800da88:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800da8c:	2b14      	cmp	r3, #20
 800da8e:	dd0f      	ble.n	800dab0 <__ieee754_pow+0xc8>
 800da90:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800da94:	fa22 f103 	lsr.w	r1, r2, r3
 800da98:	fa01 f303 	lsl.w	r3, r1, r3
 800da9c:	4293      	cmp	r3, r2
 800da9e:	f040 849d 	bne.w	800e3dc <__ieee754_pow+0x9f4>
 800daa2:	f001 0101 	and.w	r1, r1, #1
 800daa6:	f1c1 0302 	rsb	r3, r1, #2
 800daaa:	9304      	str	r3, [sp, #16]
 800daac:	b182      	cbz	r2, 800dad0 <__ieee754_pow+0xe8>
 800daae:	e05f      	b.n	800db70 <__ieee754_pow+0x188>
 800dab0:	2a00      	cmp	r2, #0
 800dab2:	d15b      	bne.n	800db6c <__ieee754_pow+0x184>
 800dab4:	f1c3 0314 	rsb	r3, r3, #20
 800dab8:	fa48 f103 	asr.w	r1, r8, r3
 800dabc:	fa01 f303 	lsl.w	r3, r1, r3
 800dac0:	4543      	cmp	r3, r8
 800dac2:	f040 8488 	bne.w	800e3d6 <__ieee754_pow+0x9ee>
 800dac6:	f001 0101 	and.w	r1, r1, #1
 800daca:	f1c1 0302 	rsb	r3, r1, #2
 800dace:	9304      	str	r3, [sp, #16]
 800dad0:	4b5c      	ldr	r3, [pc, #368]	; (800dc44 <__ieee754_pow+0x25c>)
 800dad2:	4598      	cmp	r8, r3
 800dad4:	d132      	bne.n	800db3c <__ieee754_pow+0x154>
 800dad6:	f1b9 0f00 	cmp.w	r9, #0
 800dada:	f280 8478 	bge.w	800e3ce <__ieee754_pow+0x9e6>
 800dade:	4959      	ldr	r1, [pc, #356]	; (800dc44 <__ieee754_pow+0x25c>)
 800dae0:	4632      	mov	r2, r6
 800dae2:	463b      	mov	r3, r7
 800dae4:	2000      	movs	r0, #0
 800dae6:	f7f2 fec1 	bl	800086c <__aeabi_ddiv>
 800daea:	e79c      	b.n	800da26 <__ieee754_pow+0x3e>
 800daec:	2300      	movs	r3, #0
 800daee:	9304      	str	r3, [sp, #16]
 800daf0:	2a00      	cmp	r2, #0
 800daf2:	d13d      	bne.n	800db70 <__ieee754_pow+0x188>
 800daf4:	4b51      	ldr	r3, [pc, #324]	; (800dc3c <__ieee754_pow+0x254>)
 800daf6:	4598      	cmp	r8, r3
 800daf8:	d1ea      	bne.n	800dad0 <__ieee754_pow+0xe8>
 800dafa:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800dafe:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800db02:	ea53 030a 	orrs.w	r3, r3, sl
 800db06:	f000 845a 	beq.w	800e3be <__ieee754_pow+0x9d6>
 800db0a:	4b4f      	ldr	r3, [pc, #316]	; (800dc48 <__ieee754_pow+0x260>)
 800db0c:	429c      	cmp	r4, r3
 800db0e:	dd08      	ble.n	800db22 <__ieee754_pow+0x13a>
 800db10:	f1b9 0f00 	cmp.w	r9, #0
 800db14:	f2c0 8457 	blt.w	800e3c6 <__ieee754_pow+0x9de>
 800db18:	e9dd 0100 	ldrd	r0, r1, [sp]
 800db1c:	e783      	b.n	800da26 <__ieee754_pow+0x3e>
 800db1e:	2302      	movs	r3, #2
 800db20:	e7e5      	b.n	800daee <__ieee754_pow+0x106>
 800db22:	f1b9 0f00 	cmp.w	r9, #0
 800db26:	f04f 0000 	mov.w	r0, #0
 800db2a:	f04f 0100 	mov.w	r1, #0
 800db2e:	f6bf af7a 	bge.w	800da26 <__ieee754_pow+0x3e>
 800db32:	e9dd 0300 	ldrd	r0, r3, [sp]
 800db36:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800db3a:	e774      	b.n	800da26 <__ieee754_pow+0x3e>
 800db3c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800db40:	d106      	bne.n	800db50 <__ieee754_pow+0x168>
 800db42:	4632      	mov	r2, r6
 800db44:	463b      	mov	r3, r7
 800db46:	4630      	mov	r0, r6
 800db48:	4639      	mov	r1, r7
 800db4a:	f7f2 fd65 	bl	8000618 <__aeabi_dmul>
 800db4e:	e76a      	b.n	800da26 <__ieee754_pow+0x3e>
 800db50:	4b3e      	ldr	r3, [pc, #248]	; (800dc4c <__ieee754_pow+0x264>)
 800db52:	4599      	cmp	r9, r3
 800db54:	d10c      	bne.n	800db70 <__ieee754_pow+0x188>
 800db56:	2d00      	cmp	r5, #0
 800db58:	db0a      	blt.n	800db70 <__ieee754_pow+0x188>
 800db5a:	ec47 6b10 	vmov	d0, r6, r7
 800db5e:	b009      	add	sp, #36	; 0x24
 800db60:	ecbd 8b06 	vpop	{d8-d10}
 800db64:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db68:	f000 bc6c 	b.w	800e444 <__ieee754_sqrt>
 800db6c:	2300      	movs	r3, #0
 800db6e:	9304      	str	r3, [sp, #16]
 800db70:	ec47 6b10 	vmov	d0, r6, r7
 800db74:	f000 fd48 	bl	800e608 <fabs>
 800db78:	ec51 0b10 	vmov	r0, r1, d0
 800db7c:	f1ba 0f00 	cmp.w	sl, #0
 800db80:	d129      	bne.n	800dbd6 <__ieee754_pow+0x1ee>
 800db82:	b124      	cbz	r4, 800db8e <__ieee754_pow+0x1a6>
 800db84:	4b2f      	ldr	r3, [pc, #188]	; (800dc44 <__ieee754_pow+0x25c>)
 800db86:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800db8a:	429a      	cmp	r2, r3
 800db8c:	d123      	bne.n	800dbd6 <__ieee754_pow+0x1ee>
 800db8e:	f1b9 0f00 	cmp.w	r9, #0
 800db92:	da05      	bge.n	800dba0 <__ieee754_pow+0x1b8>
 800db94:	4602      	mov	r2, r0
 800db96:	460b      	mov	r3, r1
 800db98:	2000      	movs	r0, #0
 800db9a:	492a      	ldr	r1, [pc, #168]	; (800dc44 <__ieee754_pow+0x25c>)
 800db9c:	f7f2 fe66 	bl	800086c <__aeabi_ddiv>
 800dba0:	2d00      	cmp	r5, #0
 800dba2:	f6bf af40 	bge.w	800da26 <__ieee754_pow+0x3e>
 800dba6:	9b04      	ldr	r3, [sp, #16]
 800dba8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800dbac:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800dbb0:	4323      	orrs	r3, r4
 800dbb2:	d108      	bne.n	800dbc6 <__ieee754_pow+0x1de>
 800dbb4:	4602      	mov	r2, r0
 800dbb6:	460b      	mov	r3, r1
 800dbb8:	4610      	mov	r0, r2
 800dbba:	4619      	mov	r1, r3
 800dbbc:	f7f2 fb74 	bl	80002a8 <__aeabi_dsub>
 800dbc0:	4602      	mov	r2, r0
 800dbc2:	460b      	mov	r3, r1
 800dbc4:	e78f      	b.n	800dae6 <__ieee754_pow+0xfe>
 800dbc6:	9b04      	ldr	r3, [sp, #16]
 800dbc8:	2b01      	cmp	r3, #1
 800dbca:	f47f af2c 	bne.w	800da26 <__ieee754_pow+0x3e>
 800dbce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dbd2:	4619      	mov	r1, r3
 800dbd4:	e727      	b.n	800da26 <__ieee754_pow+0x3e>
 800dbd6:	0feb      	lsrs	r3, r5, #31
 800dbd8:	3b01      	subs	r3, #1
 800dbda:	9306      	str	r3, [sp, #24]
 800dbdc:	9a06      	ldr	r2, [sp, #24]
 800dbde:	9b04      	ldr	r3, [sp, #16]
 800dbe0:	4313      	orrs	r3, r2
 800dbe2:	d102      	bne.n	800dbea <__ieee754_pow+0x202>
 800dbe4:	4632      	mov	r2, r6
 800dbe6:	463b      	mov	r3, r7
 800dbe8:	e7e6      	b.n	800dbb8 <__ieee754_pow+0x1d0>
 800dbea:	4b19      	ldr	r3, [pc, #100]	; (800dc50 <__ieee754_pow+0x268>)
 800dbec:	4598      	cmp	r8, r3
 800dbee:	f340 80fb 	ble.w	800dde8 <__ieee754_pow+0x400>
 800dbf2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800dbf6:	4598      	cmp	r8, r3
 800dbf8:	4b13      	ldr	r3, [pc, #76]	; (800dc48 <__ieee754_pow+0x260>)
 800dbfa:	dd0c      	ble.n	800dc16 <__ieee754_pow+0x22e>
 800dbfc:	429c      	cmp	r4, r3
 800dbfe:	dc0f      	bgt.n	800dc20 <__ieee754_pow+0x238>
 800dc00:	f1b9 0f00 	cmp.w	r9, #0
 800dc04:	da0f      	bge.n	800dc26 <__ieee754_pow+0x23e>
 800dc06:	2000      	movs	r0, #0
 800dc08:	b009      	add	sp, #36	; 0x24
 800dc0a:	ecbd 8b06 	vpop	{d8-d10}
 800dc0e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc12:	f000 bcf0 	b.w	800e5f6 <__math_oflow>
 800dc16:	429c      	cmp	r4, r3
 800dc18:	dbf2      	blt.n	800dc00 <__ieee754_pow+0x218>
 800dc1a:	4b0a      	ldr	r3, [pc, #40]	; (800dc44 <__ieee754_pow+0x25c>)
 800dc1c:	429c      	cmp	r4, r3
 800dc1e:	dd19      	ble.n	800dc54 <__ieee754_pow+0x26c>
 800dc20:	f1b9 0f00 	cmp.w	r9, #0
 800dc24:	dcef      	bgt.n	800dc06 <__ieee754_pow+0x21e>
 800dc26:	2000      	movs	r0, #0
 800dc28:	b009      	add	sp, #36	; 0x24
 800dc2a:	ecbd 8b06 	vpop	{d8-d10}
 800dc2e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc32:	f000 bcd7 	b.w	800e5e4 <__math_uflow>
 800dc36:	bf00      	nop
 800dc38:	fff00000 	.word	0xfff00000
 800dc3c:	7ff00000 	.word	0x7ff00000
 800dc40:	433fffff 	.word	0x433fffff
 800dc44:	3ff00000 	.word	0x3ff00000
 800dc48:	3fefffff 	.word	0x3fefffff
 800dc4c:	3fe00000 	.word	0x3fe00000
 800dc50:	41e00000 	.word	0x41e00000
 800dc54:	4b60      	ldr	r3, [pc, #384]	; (800ddd8 <__ieee754_pow+0x3f0>)
 800dc56:	2200      	movs	r2, #0
 800dc58:	f7f2 fb26 	bl	80002a8 <__aeabi_dsub>
 800dc5c:	a354      	add	r3, pc, #336	; (adr r3, 800ddb0 <__ieee754_pow+0x3c8>)
 800dc5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc62:	4604      	mov	r4, r0
 800dc64:	460d      	mov	r5, r1
 800dc66:	f7f2 fcd7 	bl	8000618 <__aeabi_dmul>
 800dc6a:	a353      	add	r3, pc, #332	; (adr r3, 800ddb8 <__ieee754_pow+0x3d0>)
 800dc6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc70:	4606      	mov	r6, r0
 800dc72:	460f      	mov	r7, r1
 800dc74:	4620      	mov	r0, r4
 800dc76:	4629      	mov	r1, r5
 800dc78:	f7f2 fcce 	bl	8000618 <__aeabi_dmul>
 800dc7c:	4b57      	ldr	r3, [pc, #348]	; (800dddc <__ieee754_pow+0x3f4>)
 800dc7e:	4682      	mov	sl, r0
 800dc80:	468b      	mov	fp, r1
 800dc82:	2200      	movs	r2, #0
 800dc84:	4620      	mov	r0, r4
 800dc86:	4629      	mov	r1, r5
 800dc88:	f7f2 fcc6 	bl	8000618 <__aeabi_dmul>
 800dc8c:	4602      	mov	r2, r0
 800dc8e:	460b      	mov	r3, r1
 800dc90:	a14b      	add	r1, pc, #300	; (adr r1, 800ddc0 <__ieee754_pow+0x3d8>)
 800dc92:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dc96:	f7f2 fb07 	bl	80002a8 <__aeabi_dsub>
 800dc9a:	4622      	mov	r2, r4
 800dc9c:	462b      	mov	r3, r5
 800dc9e:	f7f2 fcbb 	bl	8000618 <__aeabi_dmul>
 800dca2:	4602      	mov	r2, r0
 800dca4:	460b      	mov	r3, r1
 800dca6:	2000      	movs	r0, #0
 800dca8:	494d      	ldr	r1, [pc, #308]	; (800dde0 <__ieee754_pow+0x3f8>)
 800dcaa:	f7f2 fafd 	bl	80002a8 <__aeabi_dsub>
 800dcae:	4622      	mov	r2, r4
 800dcb0:	4680      	mov	r8, r0
 800dcb2:	4689      	mov	r9, r1
 800dcb4:	462b      	mov	r3, r5
 800dcb6:	4620      	mov	r0, r4
 800dcb8:	4629      	mov	r1, r5
 800dcba:	f7f2 fcad 	bl	8000618 <__aeabi_dmul>
 800dcbe:	4602      	mov	r2, r0
 800dcc0:	460b      	mov	r3, r1
 800dcc2:	4640      	mov	r0, r8
 800dcc4:	4649      	mov	r1, r9
 800dcc6:	f7f2 fca7 	bl	8000618 <__aeabi_dmul>
 800dcca:	a33f      	add	r3, pc, #252	; (adr r3, 800ddc8 <__ieee754_pow+0x3e0>)
 800dccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcd0:	f7f2 fca2 	bl	8000618 <__aeabi_dmul>
 800dcd4:	4602      	mov	r2, r0
 800dcd6:	460b      	mov	r3, r1
 800dcd8:	4650      	mov	r0, sl
 800dcda:	4659      	mov	r1, fp
 800dcdc:	f7f2 fae4 	bl	80002a8 <__aeabi_dsub>
 800dce0:	4602      	mov	r2, r0
 800dce2:	460b      	mov	r3, r1
 800dce4:	4680      	mov	r8, r0
 800dce6:	4689      	mov	r9, r1
 800dce8:	4630      	mov	r0, r6
 800dcea:	4639      	mov	r1, r7
 800dcec:	f7f2 fade 	bl	80002ac <__adddf3>
 800dcf0:	2000      	movs	r0, #0
 800dcf2:	4632      	mov	r2, r6
 800dcf4:	463b      	mov	r3, r7
 800dcf6:	4604      	mov	r4, r0
 800dcf8:	460d      	mov	r5, r1
 800dcfa:	f7f2 fad5 	bl	80002a8 <__aeabi_dsub>
 800dcfe:	4602      	mov	r2, r0
 800dd00:	460b      	mov	r3, r1
 800dd02:	4640      	mov	r0, r8
 800dd04:	4649      	mov	r1, r9
 800dd06:	f7f2 facf 	bl	80002a8 <__aeabi_dsub>
 800dd0a:	9b04      	ldr	r3, [sp, #16]
 800dd0c:	9a06      	ldr	r2, [sp, #24]
 800dd0e:	3b01      	subs	r3, #1
 800dd10:	4313      	orrs	r3, r2
 800dd12:	4682      	mov	sl, r0
 800dd14:	468b      	mov	fp, r1
 800dd16:	f040 81e7 	bne.w	800e0e8 <__ieee754_pow+0x700>
 800dd1a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800ddd0 <__ieee754_pow+0x3e8>
 800dd1e:	eeb0 8a47 	vmov.f32	s16, s14
 800dd22:	eef0 8a67 	vmov.f32	s17, s15
 800dd26:	e9dd 6700 	ldrd	r6, r7, [sp]
 800dd2a:	2600      	movs	r6, #0
 800dd2c:	4632      	mov	r2, r6
 800dd2e:	463b      	mov	r3, r7
 800dd30:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dd34:	f7f2 fab8 	bl	80002a8 <__aeabi_dsub>
 800dd38:	4622      	mov	r2, r4
 800dd3a:	462b      	mov	r3, r5
 800dd3c:	f7f2 fc6c 	bl	8000618 <__aeabi_dmul>
 800dd40:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dd44:	4680      	mov	r8, r0
 800dd46:	4689      	mov	r9, r1
 800dd48:	4650      	mov	r0, sl
 800dd4a:	4659      	mov	r1, fp
 800dd4c:	f7f2 fc64 	bl	8000618 <__aeabi_dmul>
 800dd50:	4602      	mov	r2, r0
 800dd52:	460b      	mov	r3, r1
 800dd54:	4640      	mov	r0, r8
 800dd56:	4649      	mov	r1, r9
 800dd58:	f7f2 faa8 	bl	80002ac <__adddf3>
 800dd5c:	4632      	mov	r2, r6
 800dd5e:	463b      	mov	r3, r7
 800dd60:	4680      	mov	r8, r0
 800dd62:	4689      	mov	r9, r1
 800dd64:	4620      	mov	r0, r4
 800dd66:	4629      	mov	r1, r5
 800dd68:	f7f2 fc56 	bl	8000618 <__aeabi_dmul>
 800dd6c:	460b      	mov	r3, r1
 800dd6e:	4604      	mov	r4, r0
 800dd70:	460d      	mov	r5, r1
 800dd72:	4602      	mov	r2, r0
 800dd74:	4649      	mov	r1, r9
 800dd76:	4640      	mov	r0, r8
 800dd78:	f7f2 fa98 	bl	80002ac <__adddf3>
 800dd7c:	4b19      	ldr	r3, [pc, #100]	; (800dde4 <__ieee754_pow+0x3fc>)
 800dd7e:	4299      	cmp	r1, r3
 800dd80:	ec45 4b19 	vmov	d9, r4, r5
 800dd84:	4606      	mov	r6, r0
 800dd86:	460f      	mov	r7, r1
 800dd88:	468b      	mov	fp, r1
 800dd8a:	f340 82f1 	ble.w	800e370 <__ieee754_pow+0x988>
 800dd8e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800dd92:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800dd96:	4303      	orrs	r3, r0
 800dd98:	f000 81e4 	beq.w	800e164 <__ieee754_pow+0x77c>
 800dd9c:	ec51 0b18 	vmov	r0, r1, d8
 800dda0:	2200      	movs	r2, #0
 800dda2:	2300      	movs	r3, #0
 800dda4:	f7f2 feaa 	bl	8000afc <__aeabi_dcmplt>
 800dda8:	3800      	subs	r0, #0
 800ddaa:	bf18      	it	ne
 800ddac:	2001      	movne	r0, #1
 800ddae:	e72b      	b.n	800dc08 <__ieee754_pow+0x220>
 800ddb0:	60000000 	.word	0x60000000
 800ddb4:	3ff71547 	.word	0x3ff71547
 800ddb8:	f85ddf44 	.word	0xf85ddf44
 800ddbc:	3e54ae0b 	.word	0x3e54ae0b
 800ddc0:	55555555 	.word	0x55555555
 800ddc4:	3fd55555 	.word	0x3fd55555
 800ddc8:	652b82fe 	.word	0x652b82fe
 800ddcc:	3ff71547 	.word	0x3ff71547
 800ddd0:	00000000 	.word	0x00000000
 800ddd4:	bff00000 	.word	0xbff00000
 800ddd8:	3ff00000 	.word	0x3ff00000
 800dddc:	3fd00000 	.word	0x3fd00000
 800dde0:	3fe00000 	.word	0x3fe00000
 800dde4:	408fffff 	.word	0x408fffff
 800dde8:	4bd5      	ldr	r3, [pc, #852]	; (800e140 <__ieee754_pow+0x758>)
 800ddea:	402b      	ands	r3, r5
 800ddec:	2200      	movs	r2, #0
 800ddee:	b92b      	cbnz	r3, 800ddfc <__ieee754_pow+0x414>
 800ddf0:	4bd4      	ldr	r3, [pc, #848]	; (800e144 <__ieee754_pow+0x75c>)
 800ddf2:	f7f2 fc11 	bl	8000618 <__aeabi_dmul>
 800ddf6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800ddfa:	460c      	mov	r4, r1
 800ddfc:	1523      	asrs	r3, r4, #20
 800ddfe:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800de02:	4413      	add	r3, r2
 800de04:	9305      	str	r3, [sp, #20]
 800de06:	4bd0      	ldr	r3, [pc, #832]	; (800e148 <__ieee754_pow+0x760>)
 800de08:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800de0c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800de10:	429c      	cmp	r4, r3
 800de12:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800de16:	dd08      	ble.n	800de2a <__ieee754_pow+0x442>
 800de18:	4bcc      	ldr	r3, [pc, #816]	; (800e14c <__ieee754_pow+0x764>)
 800de1a:	429c      	cmp	r4, r3
 800de1c:	f340 8162 	ble.w	800e0e4 <__ieee754_pow+0x6fc>
 800de20:	9b05      	ldr	r3, [sp, #20]
 800de22:	3301      	adds	r3, #1
 800de24:	9305      	str	r3, [sp, #20]
 800de26:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800de2a:	2400      	movs	r4, #0
 800de2c:	00e3      	lsls	r3, r4, #3
 800de2e:	9307      	str	r3, [sp, #28]
 800de30:	4bc7      	ldr	r3, [pc, #796]	; (800e150 <__ieee754_pow+0x768>)
 800de32:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800de36:	ed93 7b00 	vldr	d7, [r3]
 800de3a:	4629      	mov	r1, r5
 800de3c:	ec53 2b17 	vmov	r2, r3, d7
 800de40:	eeb0 9a47 	vmov.f32	s18, s14
 800de44:	eef0 9a67 	vmov.f32	s19, s15
 800de48:	4682      	mov	sl, r0
 800de4a:	f7f2 fa2d 	bl	80002a8 <__aeabi_dsub>
 800de4e:	4652      	mov	r2, sl
 800de50:	4606      	mov	r6, r0
 800de52:	460f      	mov	r7, r1
 800de54:	462b      	mov	r3, r5
 800de56:	ec51 0b19 	vmov	r0, r1, d9
 800de5a:	f7f2 fa27 	bl	80002ac <__adddf3>
 800de5e:	4602      	mov	r2, r0
 800de60:	460b      	mov	r3, r1
 800de62:	2000      	movs	r0, #0
 800de64:	49bb      	ldr	r1, [pc, #748]	; (800e154 <__ieee754_pow+0x76c>)
 800de66:	f7f2 fd01 	bl	800086c <__aeabi_ddiv>
 800de6a:	ec41 0b1a 	vmov	d10, r0, r1
 800de6e:	4602      	mov	r2, r0
 800de70:	460b      	mov	r3, r1
 800de72:	4630      	mov	r0, r6
 800de74:	4639      	mov	r1, r7
 800de76:	f7f2 fbcf 	bl	8000618 <__aeabi_dmul>
 800de7a:	2300      	movs	r3, #0
 800de7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800de80:	9302      	str	r3, [sp, #8]
 800de82:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800de86:	46ab      	mov	fp, r5
 800de88:	106d      	asrs	r5, r5, #1
 800de8a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800de8e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800de92:	ec41 0b18 	vmov	d8, r0, r1
 800de96:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800de9a:	2200      	movs	r2, #0
 800de9c:	4640      	mov	r0, r8
 800de9e:	4649      	mov	r1, r9
 800dea0:	4614      	mov	r4, r2
 800dea2:	461d      	mov	r5, r3
 800dea4:	f7f2 fbb8 	bl	8000618 <__aeabi_dmul>
 800dea8:	4602      	mov	r2, r0
 800deaa:	460b      	mov	r3, r1
 800deac:	4630      	mov	r0, r6
 800deae:	4639      	mov	r1, r7
 800deb0:	f7f2 f9fa 	bl	80002a8 <__aeabi_dsub>
 800deb4:	ec53 2b19 	vmov	r2, r3, d9
 800deb8:	4606      	mov	r6, r0
 800deba:	460f      	mov	r7, r1
 800debc:	4620      	mov	r0, r4
 800debe:	4629      	mov	r1, r5
 800dec0:	f7f2 f9f2 	bl	80002a8 <__aeabi_dsub>
 800dec4:	4602      	mov	r2, r0
 800dec6:	460b      	mov	r3, r1
 800dec8:	4650      	mov	r0, sl
 800deca:	4659      	mov	r1, fp
 800decc:	f7f2 f9ec 	bl	80002a8 <__aeabi_dsub>
 800ded0:	4642      	mov	r2, r8
 800ded2:	464b      	mov	r3, r9
 800ded4:	f7f2 fba0 	bl	8000618 <__aeabi_dmul>
 800ded8:	4602      	mov	r2, r0
 800deda:	460b      	mov	r3, r1
 800dedc:	4630      	mov	r0, r6
 800dede:	4639      	mov	r1, r7
 800dee0:	f7f2 f9e2 	bl	80002a8 <__aeabi_dsub>
 800dee4:	ec53 2b1a 	vmov	r2, r3, d10
 800dee8:	f7f2 fb96 	bl	8000618 <__aeabi_dmul>
 800deec:	ec53 2b18 	vmov	r2, r3, d8
 800def0:	ec41 0b19 	vmov	d9, r0, r1
 800def4:	ec51 0b18 	vmov	r0, r1, d8
 800def8:	f7f2 fb8e 	bl	8000618 <__aeabi_dmul>
 800defc:	a37c      	add	r3, pc, #496	; (adr r3, 800e0f0 <__ieee754_pow+0x708>)
 800defe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df02:	4604      	mov	r4, r0
 800df04:	460d      	mov	r5, r1
 800df06:	f7f2 fb87 	bl	8000618 <__aeabi_dmul>
 800df0a:	a37b      	add	r3, pc, #492	; (adr r3, 800e0f8 <__ieee754_pow+0x710>)
 800df0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df10:	f7f2 f9cc 	bl	80002ac <__adddf3>
 800df14:	4622      	mov	r2, r4
 800df16:	462b      	mov	r3, r5
 800df18:	f7f2 fb7e 	bl	8000618 <__aeabi_dmul>
 800df1c:	a378      	add	r3, pc, #480	; (adr r3, 800e100 <__ieee754_pow+0x718>)
 800df1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df22:	f7f2 f9c3 	bl	80002ac <__adddf3>
 800df26:	4622      	mov	r2, r4
 800df28:	462b      	mov	r3, r5
 800df2a:	f7f2 fb75 	bl	8000618 <__aeabi_dmul>
 800df2e:	a376      	add	r3, pc, #472	; (adr r3, 800e108 <__ieee754_pow+0x720>)
 800df30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df34:	f7f2 f9ba 	bl	80002ac <__adddf3>
 800df38:	4622      	mov	r2, r4
 800df3a:	462b      	mov	r3, r5
 800df3c:	f7f2 fb6c 	bl	8000618 <__aeabi_dmul>
 800df40:	a373      	add	r3, pc, #460	; (adr r3, 800e110 <__ieee754_pow+0x728>)
 800df42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df46:	f7f2 f9b1 	bl	80002ac <__adddf3>
 800df4a:	4622      	mov	r2, r4
 800df4c:	462b      	mov	r3, r5
 800df4e:	f7f2 fb63 	bl	8000618 <__aeabi_dmul>
 800df52:	a371      	add	r3, pc, #452	; (adr r3, 800e118 <__ieee754_pow+0x730>)
 800df54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df58:	f7f2 f9a8 	bl	80002ac <__adddf3>
 800df5c:	4622      	mov	r2, r4
 800df5e:	4606      	mov	r6, r0
 800df60:	460f      	mov	r7, r1
 800df62:	462b      	mov	r3, r5
 800df64:	4620      	mov	r0, r4
 800df66:	4629      	mov	r1, r5
 800df68:	f7f2 fb56 	bl	8000618 <__aeabi_dmul>
 800df6c:	4602      	mov	r2, r0
 800df6e:	460b      	mov	r3, r1
 800df70:	4630      	mov	r0, r6
 800df72:	4639      	mov	r1, r7
 800df74:	f7f2 fb50 	bl	8000618 <__aeabi_dmul>
 800df78:	4642      	mov	r2, r8
 800df7a:	4604      	mov	r4, r0
 800df7c:	460d      	mov	r5, r1
 800df7e:	464b      	mov	r3, r9
 800df80:	ec51 0b18 	vmov	r0, r1, d8
 800df84:	f7f2 f992 	bl	80002ac <__adddf3>
 800df88:	ec53 2b19 	vmov	r2, r3, d9
 800df8c:	f7f2 fb44 	bl	8000618 <__aeabi_dmul>
 800df90:	4622      	mov	r2, r4
 800df92:	462b      	mov	r3, r5
 800df94:	f7f2 f98a 	bl	80002ac <__adddf3>
 800df98:	4642      	mov	r2, r8
 800df9a:	4682      	mov	sl, r0
 800df9c:	468b      	mov	fp, r1
 800df9e:	464b      	mov	r3, r9
 800dfa0:	4640      	mov	r0, r8
 800dfa2:	4649      	mov	r1, r9
 800dfa4:	f7f2 fb38 	bl	8000618 <__aeabi_dmul>
 800dfa8:	4b6b      	ldr	r3, [pc, #428]	; (800e158 <__ieee754_pow+0x770>)
 800dfaa:	2200      	movs	r2, #0
 800dfac:	4606      	mov	r6, r0
 800dfae:	460f      	mov	r7, r1
 800dfb0:	f7f2 f97c 	bl	80002ac <__adddf3>
 800dfb4:	4652      	mov	r2, sl
 800dfb6:	465b      	mov	r3, fp
 800dfb8:	f7f2 f978 	bl	80002ac <__adddf3>
 800dfbc:	2000      	movs	r0, #0
 800dfbe:	4604      	mov	r4, r0
 800dfc0:	460d      	mov	r5, r1
 800dfc2:	4602      	mov	r2, r0
 800dfc4:	460b      	mov	r3, r1
 800dfc6:	4640      	mov	r0, r8
 800dfc8:	4649      	mov	r1, r9
 800dfca:	f7f2 fb25 	bl	8000618 <__aeabi_dmul>
 800dfce:	4b62      	ldr	r3, [pc, #392]	; (800e158 <__ieee754_pow+0x770>)
 800dfd0:	4680      	mov	r8, r0
 800dfd2:	4689      	mov	r9, r1
 800dfd4:	2200      	movs	r2, #0
 800dfd6:	4620      	mov	r0, r4
 800dfd8:	4629      	mov	r1, r5
 800dfda:	f7f2 f965 	bl	80002a8 <__aeabi_dsub>
 800dfde:	4632      	mov	r2, r6
 800dfe0:	463b      	mov	r3, r7
 800dfe2:	f7f2 f961 	bl	80002a8 <__aeabi_dsub>
 800dfe6:	4602      	mov	r2, r0
 800dfe8:	460b      	mov	r3, r1
 800dfea:	4650      	mov	r0, sl
 800dfec:	4659      	mov	r1, fp
 800dfee:	f7f2 f95b 	bl	80002a8 <__aeabi_dsub>
 800dff2:	ec53 2b18 	vmov	r2, r3, d8
 800dff6:	f7f2 fb0f 	bl	8000618 <__aeabi_dmul>
 800dffa:	4622      	mov	r2, r4
 800dffc:	4606      	mov	r6, r0
 800dffe:	460f      	mov	r7, r1
 800e000:	462b      	mov	r3, r5
 800e002:	ec51 0b19 	vmov	r0, r1, d9
 800e006:	f7f2 fb07 	bl	8000618 <__aeabi_dmul>
 800e00a:	4602      	mov	r2, r0
 800e00c:	460b      	mov	r3, r1
 800e00e:	4630      	mov	r0, r6
 800e010:	4639      	mov	r1, r7
 800e012:	f7f2 f94b 	bl	80002ac <__adddf3>
 800e016:	4606      	mov	r6, r0
 800e018:	460f      	mov	r7, r1
 800e01a:	4602      	mov	r2, r0
 800e01c:	460b      	mov	r3, r1
 800e01e:	4640      	mov	r0, r8
 800e020:	4649      	mov	r1, r9
 800e022:	f7f2 f943 	bl	80002ac <__adddf3>
 800e026:	a33e      	add	r3, pc, #248	; (adr r3, 800e120 <__ieee754_pow+0x738>)
 800e028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e02c:	2000      	movs	r0, #0
 800e02e:	4604      	mov	r4, r0
 800e030:	460d      	mov	r5, r1
 800e032:	f7f2 faf1 	bl	8000618 <__aeabi_dmul>
 800e036:	4642      	mov	r2, r8
 800e038:	ec41 0b18 	vmov	d8, r0, r1
 800e03c:	464b      	mov	r3, r9
 800e03e:	4620      	mov	r0, r4
 800e040:	4629      	mov	r1, r5
 800e042:	f7f2 f931 	bl	80002a8 <__aeabi_dsub>
 800e046:	4602      	mov	r2, r0
 800e048:	460b      	mov	r3, r1
 800e04a:	4630      	mov	r0, r6
 800e04c:	4639      	mov	r1, r7
 800e04e:	f7f2 f92b 	bl	80002a8 <__aeabi_dsub>
 800e052:	a335      	add	r3, pc, #212	; (adr r3, 800e128 <__ieee754_pow+0x740>)
 800e054:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e058:	f7f2 fade 	bl	8000618 <__aeabi_dmul>
 800e05c:	a334      	add	r3, pc, #208	; (adr r3, 800e130 <__ieee754_pow+0x748>)
 800e05e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e062:	4606      	mov	r6, r0
 800e064:	460f      	mov	r7, r1
 800e066:	4620      	mov	r0, r4
 800e068:	4629      	mov	r1, r5
 800e06a:	f7f2 fad5 	bl	8000618 <__aeabi_dmul>
 800e06e:	4602      	mov	r2, r0
 800e070:	460b      	mov	r3, r1
 800e072:	4630      	mov	r0, r6
 800e074:	4639      	mov	r1, r7
 800e076:	f7f2 f919 	bl	80002ac <__adddf3>
 800e07a:	9a07      	ldr	r2, [sp, #28]
 800e07c:	4b37      	ldr	r3, [pc, #220]	; (800e15c <__ieee754_pow+0x774>)
 800e07e:	4413      	add	r3, r2
 800e080:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e084:	f7f2 f912 	bl	80002ac <__adddf3>
 800e088:	4682      	mov	sl, r0
 800e08a:	9805      	ldr	r0, [sp, #20]
 800e08c:	468b      	mov	fp, r1
 800e08e:	f7f2 fa59 	bl	8000544 <__aeabi_i2d>
 800e092:	9a07      	ldr	r2, [sp, #28]
 800e094:	4b32      	ldr	r3, [pc, #200]	; (800e160 <__ieee754_pow+0x778>)
 800e096:	4413      	add	r3, r2
 800e098:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e09c:	4606      	mov	r6, r0
 800e09e:	460f      	mov	r7, r1
 800e0a0:	4652      	mov	r2, sl
 800e0a2:	465b      	mov	r3, fp
 800e0a4:	ec51 0b18 	vmov	r0, r1, d8
 800e0a8:	f7f2 f900 	bl	80002ac <__adddf3>
 800e0ac:	4642      	mov	r2, r8
 800e0ae:	464b      	mov	r3, r9
 800e0b0:	f7f2 f8fc 	bl	80002ac <__adddf3>
 800e0b4:	4632      	mov	r2, r6
 800e0b6:	463b      	mov	r3, r7
 800e0b8:	f7f2 f8f8 	bl	80002ac <__adddf3>
 800e0bc:	2000      	movs	r0, #0
 800e0be:	4632      	mov	r2, r6
 800e0c0:	463b      	mov	r3, r7
 800e0c2:	4604      	mov	r4, r0
 800e0c4:	460d      	mov	r5, r1
 800e0c6:	f7f2 f8ef 	bl	80002a8 <__aeabi_dsub>
 800e0ca:	4642      	mov	r2, r8
 800e0cc:	464b      	mov	r3, r9
 800e0ce:	f7f2 f8eb 	bl	80002a8 <__aeabi_dsub>
 800e0d2:	ec53 2b18 	vmov	r2, r3, d8
 800e0d6:	f7f2 f8e7 	bl	80002a8 <__aeabi_dsub>
 800e0da:	4602      	mov	r2, r0
 800e0dc:	460b      	mov	r3, r1
 800e0de:	4650      	mov	r0, sl
 800e0e0:	4659      	mov	r1, fp
 800e0e2:	e610      	b.n	800dd06 <__ieee754_pow+0x31e>
 800e0e4:	2401      	movs	r4, #1
 800e0e6:	e6a1      	b.n	800de2c <__ieee754_pow+0x444>
 800e0e8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800e138 <__ieee754_pow+0x750>
 800e0ec:	e617      	b.n	800dd1e <__ieee754_pow+0x336>
 800e0ee:	bf00      	nop
 800e0f0:	4a454eef 	.word	0x4a454eef
 800e0f4:	3fca7e28 	.word	0x3fca7e28
 800e0f8:	93c9db65 	.word	0x93c9db65
 800e0fc:	3fcd864a 	.word	0x3fcd864a
 800e100:	a91d4101 	.word	0xa91d4101
 800e104:	3fd17460 	.word	0x3fd17460
 800e108:	518f264d 	.word	0x518f264d
 800e10c:	3fd55555 	.word	0x3fd55555
 800e110:	db6fabff 	.word	0xdb6fabff
 800e114:	3fdb6db6 	.word	0x3fdb6db6
 800e118:	33333303 	.word	0x33333303
 800e11c:	3fe33333 	.word	0x3fe33333
 800e120:	e0000000 	.word	0xe0000000
 800e124:	3feec709 	.word	0x3feec709
 800e128:	dc3a03fd 	.word	0xdc3a03fd
 800e12c:	3feec709 	.word	0x3feec709
 800e130:	145b01f5 	.word	0x145b01f5
 800e134:	be3e2fe0 	.word	0xbe3e2fe0
 800e138:	00000000 	.word	0x00000000
 800e13c:	3ff00000 	.word	0x3ff00000
 800e140:	7ff00000 	.word	0x7ff00000
 800e144:	43400000 	.word	0x43400000
 800e148:	0003988e 	.word	0x0003988e
 800e14c:	000bb679 	.word	0x000bb679
 800e150:	08012ed0 	.word	0x08012ed0
 800e154:	3ff00000 	.word	0x3ff00000
 800e158:	40080000 	.word	0x40080000
 800e15c:	08012ef0 	.word	0x08012ef0
 800e160:	08012ee0 	.word	0x08012ee0
 800e164:	a3b5      	add	r3, pc, #724	; (adr r3, 800e43c <__ieee754_pow+0xa54>)
 800e166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e16a:	4640      	mov	r0, r8
 800e16c:	4649      	mov	r1, r9
 800e16e:	f7f2 f89d 	bl	80002ac <__adddf3>
 800e172:	4622      	mov	r2, r4
 800e174:	ec41 0b1a 	vmov	d10, r0, r1
 800e178:	462b      	mov	r3, r5
 800e17a:	4630      	mov	r0, r6
 800e17c:	4639      	mov	r1, r7
 800e17e:	f7f2 f893 	bl	80002a8 <__aeabi_dsub>
 800e182:	4602      	mov	r2, r0
 800e184:	460b      	mov	r3, r1
 800e186:	ec51 0b1a 	vmov	r0, r1, d10
 800e18a:	f7f2 fcd5 	bl	8000b38 <__aeabi_dcmpgt>
 800e18e:	2800      	cmp	r0, #0
 800e190:	f47f ae04 	bne.w	800dd9c <__ieee754_pow+0x3b4>
 800e194:	4aa4      	ldr	r2, [pc, #656]	; (800e428 <__ieee754_pow+0xa40>)
 800e196:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e19a:	4293      	cmp	r3, r2
 800e19c:	f340 8108 	ble.w	800e3b0 <__ieee754_pow+0x9c8>
 800e1a0:	151b      	asrs	r3, r3, #20
 800e1a2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800e1a6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800e1aa:	fa4a f303 	asr.w	r3, sl, r3
 800e1ae:	445b      	add	r3, fp
 800e1b0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800e1b4:	4e9d      	ldr	r6, [pc, #628]	; (800e42c <__ieee754_pow+0xa44>)
 800e1b6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800e1ba:	4116      	asrs	r6, r2
 800e1bc:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800e1c0:	2000      	movs	r0, #0
 800e1c2:	ea23 0106 	bic.w	r1, r3, r6
 800e1c6:	f1c2 0214 	rsb	r2, r2, #20
 800e1ca:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800e1ce:	fa4a fa02 	asr.w	sl, sl, r2
 800e1d2:	f1bb 0f00 	cmp.w	fp, #0
 800e1d6:	4602      	mov	r2, r0
 800e1d8:	460b      	mov	r3, r1
 800e1da:	4620      	mov	r0, r4
 800e1dc:	4629      	mov	r1, r5
 800e1de:	bfb8      	it	lt
 800e1e0:	f1ca 0a00 	rsblt	sl, sl, #0
 800e1e4:	f7f2 f860 	bl	80002a8 <__aeabi_dsub>
 800e1e8:	ec41 0b19 	vmov	d9, r0, r1
 800e1ec:	4642      	mov	r2, r8
 800e1ee:	464b      	mov	r3, r9
 800e1f0:	ec51 0b19 	vmov	r0, r1, d9
 800e1f4:	f7f2 f85a 	bl	80002ac <__adddf3>
 800e1f8:	a37b      	add	r3, pc, #492	; (adr r3, 800e3e8 <__ieee754_pow+0xa00>)
 800e1fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1fe:	2000      	movs	r0, #0
 800e200:	4604      	mov	r4, r0
 800e202:	460d      	mov	r5, r1
 800e204:	f7f2 fa08 	bl	8000618 <__aeabi_dmul>
 800e208:	ec53 2b19 	vmov	r2, r3, d9
 800e20c:	4606      	mov	r6, r0
 800e20e:	460f      	mov	r7, r1
 800e210:	4620      	mov	r0, r4
 800e212:	4629      	mov	r1, r5
 800e214:	f7f2 f848 	bl	80002a8 <__aeabi_dsub>
 800e218:	4602      	mov	r2, r0
 800e21a:	460b      	mov	r3, r1
 800e21c:	4640      	mov	r0, r8
 800e21e:	4649      	mov	r1, r9
 800e220:	f7f2 f842 	bl	80002a8 <__aeabi_dsub>
 800e224:	a372      	add	r3, pc, #456	; (adr r3, 800e3f0 <__ieee754_pow+0xa08>)
 800e226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e22a:	f7f2 f9f5 	bl	8000618 <__aeabi_dmul>
 800e22e:	a372      	add	r3, pc, #456	; (adr r3, 800e3f8 <__ieee754_pow+0xa10>)
 800e230:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e234:	4680      	mov	r8, r0
 800e236:	4689      	mov	r9, r1
 800e238:	4620      	mov	r0, r4
 800e23a:	4629      	mov	r1, r5
 800e23c:	f7f2 f9ec 	bl	8000618 <__aeabi_dmul>
 800e240:	4602      	mov	r2, r0
 800e242:	460b      	mov	r3, r1
 800e244:	4640      	mov	r0, r8
 800e246:	4649      	mov	r1, r9
 800e248:	f7f2 f830 	bl	80002ac <__adddf3>
 800e24c:	4604      	mov	r4, r0
 800e24e:	460d      	mov	r5, r1
 800e250:	4602      	mov	r2, r0
 800e252:	460b      	mov	r3, r1
 800e254:	4630      	mov	r0, r6
 800e256:	4639      	mov	r1, r7
 800e258:	f7f2 f828 	bl	80002ac <__adddf3>
 800e25c:	4632      	mov	r2, r6
 800e25e:	463b      	mov	r3, r7
 800e260:	4680      	mov	r8, r0
 800e262:	4689      	mov	r9, r1
 800e264:	f7f2 f820 	bl	80002a8 <__aeabi_dsub>
 800e268:	4602      	mov	r2, r0
 800e26a:	460b      	mov	r3, r1
 800e26c:	4620      	mov	r0, r4
 800e26e:	4629      	mov	r1, r5
 800e270:	f7f2 f81a 	bl	80002a8 <__aeabi_dsub>
 800e274:	4642      	mov	r2, r8
 800e276:	4606      	mov	r6, r0
 800e278:	460f      	mov	r7, r1
 800e27a:	464b      	mov	r3, r9
 800e27c:	4640      	mov	r0, r8
 800e27e:	4649      	mov	r1, r9
 800e280:	f7f2 f9ca 	bl	8000618 <__aeabi_dmul>
 800e284:	a35e      	add	r3, pc, #376	; (adr r3, 800e400 <__ieee754_pow+0xa18>)
 800e286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e28a:	4604      	mov	r4, r0
 800e28c:	460d      	mov	r5, r1
 800e28e:	f7f2 f9c3 	bl	8000618 <__aeabi_dmul>
 800e292:	a35d      	add	r3, pc, #372	; (adr r3, 800e408 <__ieee754_pow+0xa20>)
 800e294:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e298:	f7f2 f806 	bl	80002a8 <__aeabi_dsub>
 800e29c:	4622      	mov	r2, r4
 800e29e:	462b      	mov	r3, r5
 800e2a0:	f7f2 f9ba 	bl	8000618 <__aeabi_dmul>
 800e2a4:	a35a      	add	r3, pc, #360	; (adr r3, 800e410 <__ieee754_pow+0xa28>)
 800e2a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2aa:	f7f1 ffff 	bl	80002ac <__adddf3>
 800e2ae:	4622      	mov	r2, r4
 800e2b0:	462b      	mov	r3, r5
 800e2b2:	f7f2 f9b1 	bl	8000618 <__aeabi_dmul>
 800e2b6:	a358      	add	r3, pc, #352	; (adr r3, 800e418 <__ieee754_pow+0xa30>)
 800e2b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2bc:	f7f1 fff4 	bl	80002a8 <__aeabi_dsub>
 800e2c0:	4622      	mov	r2, r4
 800e2c2:	462b      	mov	r3, r5
 800e2c4:	f7f2 f9a8 	bl	8000618 <__aeabi_dmul>
 800e2c8:	a355      	add	r3, pc, #340	; (adr r3, 800e420 <__ieee754_pow+0xa38>)
 800e2ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2ce:	f7f1 ffed 	bl	80002ac <__adddf3>
 800e2d2:	4622      	mov	r2, r4
 800e2d4:	462b      	mov	r3, r5
 800e2d6:	f7f2 f99f 	bl	8000618 <__aeabi_dmul>
 800e2da:	4602      	mov	r2, r0
 800e2dc:	460b      	mov	r3, r1
 800e2de:	4640      	mov	r0, r8
 800e2e0:	4649      	mov	r1, r9
 800e2e2:	f7f1 ffe1 	bl	80002a8 <__aeabi_dsub>
 800e2e6:	4604      	mov	r4, r0
 800e2e8:	460d      	mov	r5, r1
 800e2ea:	4602      	mov	r2, r0
 800e2ec:	460b      	mov	r3, r1
 800e2ee:	4640      	mov	r0, r8
 800e2f0:	4649      	mov	r1, r9
 800e2f2:	f7f2 f991 	bl	8000618 <__aeabi_dmul>
 800e2f6:	2200      	movs	r2, #0
 800e2f8:	ec41 0b19 	vmov	d9, r0, r1
 800e2fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e300:	4620      	mov	r0, r4
 800e302:	4629      	mov	r1, r5
 800e304:	f7f1 ffd0 	bl	80002a8 <__aeabi_dsub>
 800e308:	4602      	mov	r2, r0
 800e30a:	460b      	mov	r3, r1
 800e30c:	ec51 0b19 	vmov	r0, r1, d9
 800e310:	f7f2 faac 	bl	800086c <__aeabi_ddiv>
 800e314:	4632      	mov	r2, r6
 800e316:	4604      	mov	r4, r0
 800e318:	460d      	mov	r5, r1
 800e31a:	463b      	mov	r3, r7
 800e31c:	4640      	mov	r0, r8
 800e31e:	4649      	mov	r1, r9
 800e320:	f7f2 f97a 	bl	8000618 <__aeabi_dmul>
 800e324:	4632      	mov	r2, r6
 800e326:	463b      	mov	r3, r7
 800e328:	f7f1 ffc0 	bl	80002ac <__adddf3>
 800e32c:	4602      	mov	r2, r0
 800e32e:	460b      	mov	r3, r1
 800e330:	4620      	mov	r0, r4
 800e332:	4629      	mov	r1, r5
 800e334:	f7f1 ffb8 	bl	80002a8 <__aeabi_dsub>
 800e338:	4642      	mov	r2, r8
 800e33a:	464b      	mov	r3, r9
 800e33c:	f7f1 ffb4 	bl	80002a8 <__aeabi_dsub>
 800e340:	460b      	mov	r3, r1
 800e342:	4602      	mov	r2, r0
 800e344:	493a      	ldr	r1, [pc, #232]	; (800e430 <__ieee754_pow+0xa48>)
 800e346:	2000      	movs	r0, #0
 800e348:	f7f1 ffae 	bl	80002a8 <__aeabi_dsub>
 800e34c:	ec41 0b10 	vmov	d0, r0, r1
 800e350:	ee10 3a90 	vmov	r3, s1
 800e354:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800e358:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e35c:	da2b      	bge.n	800e3b6 <__ieee754_pow+0x9ce>
 800e35e:	4650      	mov	r0, sl
 800e360:	f000 f966 	bl	800e630 <scalbn>
 800e364:	ec51 0b10 	vmov	r0, r1, d0
 800e368:	ec53 2b18 	vmov	r2, r3, d8
 800e36c:	f7ff bbed 	b.w	800db4a <__ieee754_pow+0x162>
 800e370:	4b30      	ldr	r3, [pc, #192]	; (800e434 <__ieee754_pow+0xa4c>)
 800e372:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800e376:	429e      	cmp	r6, r3
 800e378:	f77f af0c 	ble.w	800e194 <__ieee754_pow+0x7ac>
 800e37c:	4b2e      	ldr	r3, [pc, #184]	; (800e438 <__ieee754_pow+0xa50>)
 800e37e:	440b      	add	r3, r1
 800e380:	4303      	orrs	r3, r0
 800e382:	d009      	beq.n	800e398 <__ieee754_pow+0x9b0>
 800e384:	ec51 0b18 	vmov	r0, r1, d8
 800e388:	2200      	movs	r2, #0
 800e38a:	2300      	movs	r3, #0
 800e38c:	f7f2 fbb6 	bl	8000afc <__aeabi_dcmplt>
 800e390:	3800      	subs	r0, #0
 800e392:	bf18      	it	ne
 800e394:	2001      	movne	r0, #1
 800e396:	e447      	b.n	800dc28 <__ieee754_pow+0x240>
 800e398:	4622      	mov	r2, r4
 800e39a:	462b      	mov	r3, r5
 800e39c:	f7f1 ff84 	bl	80002a8 <__aeabi_dsub>
 800e3a0:	4642      	mov	r2, r8
 800e3a2:	464b      	mov	r3, r9
 800e3a4:	f7f2 fbbe 	bl	8000b24 <__aeabi_dcmpge>
 800e3a8:	2800      	cmp	r0, #0
 800e3aa:	f43f aef3 	beq.w	800e194 <__ieee754_pow+0x7ac>
 800e3ae:	e7e9      	b.n	800e384 <__ieee754_pow+0x99c>
 800e3b0:	f04f 0a00 	mov.w	sl, #0
 800e3b4:	e71a      	b.n	800e1ec <__ieee754_pow+0x804>
 800e3b6:	ec51 0b10 	vmov	r0, r1, d0
 800e3ba:	4619      	mov	r1, r3
 800e3bc:	e7d4      	b.n	800e368 <__ieee754_pow+0x980>
 800e3be:	491c      	ldr	r1, [pc, #112]	; (800e430 <__ieee754_pow+0xa48>)
 800e3c0:	2000      	movs	r0, #0
 800e3c2:	f7ff bb30 	b.w	800da26 <__ieee754_pow+0x3e>
 800e3c6:	2000      	movs	r0, #0
 800e3c8:	2100      	movs	r1, #0
 800e3ca:	f7ff bb2c 	b.w	800da26 <__ieee754_pow+0x3e>
 800e3ce:	4630      	mov	r0, r6
 800e3d0:	4639      	mov	r1, r7
 800e3d2:	f7ff bb28 	b.w	800da26 <__ieee754_pow+0x3e>
 800e3d6:	9204      	str	r2, [sp, #16]
 800e3d8:	f7ff bb7a 	b.w	800dad0 <__ieee754_pow+0xe8>
 800e3dc:	2300      	movs	r3, #0
 800e3de:	f7ff bb64 	b.w	800daaa <__ieee754_pow+0xc2>
 800e3e2:	bf00      	nop
 800e3e4:	f3af 8000 	nop.w
 800e3e8:	00000000 	.word	0x00000000
 800e3ec:	3fe62e43 	.word	0x3fe62e43
 800e3f0:	fefa39ef 	.word	0xfefa39ef
 800e3f4:	3fe62e42 	.word	0x3fe62e42
 800e3f8:	0ca86c39 	.word	0x0ca86c39
 800e3fc:	be205c61 	.word	0xbe205c61
 800e400:	72bea4d0 	.word	0x72bea4d0
 800e404:	3e663769 	.word	0x3e663769
 800e408:	c5d26bf1 	.word	0xc5d26bf1
 800e40c:	3ebbbd41 	.word	0x3ebbbd41
 800e410:	af25de2c 	.word	0xaf25de2c
 800e414:	3f11566a 	.word	0x3f11566a
 800e418:	16bebd93 	.word	0x16bebd93
 800e41c:	3f66c16c 	.word	0x3f66c16c
 800e420:	5555553e 	.word	0x5555553e
 800e424:	3fc55555 	.word	0x3fc55555
 800e428:	3fe00000 	.word	0x3fe00000
 800e42c:	000fffff 	.word	0x000fffff
 800e430:	3ff00000 	.word	0x3ff00000
 800e434:	4090cbff 	.word	0x4090cbff
 800e438:	3f6f3400 	.word	0x3f6f3400
 800e43c:	652b82fe 	.word	0x652b82fe
 800e440:	3c971547 	.word	0x3c971547

0800e444 <__ieee754_sqrt>:
 800e444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e448:	ec55 4b10 	vmov	r4, r5, d0
 800e44c:	4e55      	ldr	r6, [pc, #340]	; (800e5a4 <__ieee754_sqrt+0x160>)
 800e44e:	43ae      	bics	r6, r5
 800e450:	ee10 0a10 	vmov	r0, s0
 800e454:	ee10 3a10 	vmov	r3, s0
 800e458:	462a      	mov	r2, r5
 800e45a:	4629      	mov	r1, r5
 800e45c:	d110      	bne.n	800e480 <__ieee754_sqrt+0x3c>
 800e45e:	ee10 2a10 	vmov	r2, s0
 800e462:	462b      	mov	r3, r5
 800e464:	f7f2 f8d8 	bl	8000618 <__aeabi_dmul>
 800e468:	4602      	mov	r2, r0
 800e46a:	460b      	mov	r3, r1
 800e46c:	4620      	mov	r0, r4
 800e46e:	4629      	mov	r1, r5
 800e470:	f7f1 ff1c 	bl	80002ac <__adddf3>
 800e474:	4604      	mov	r4, r0
 800e476:	460d      	mov	r5, r1
 800e478:	ec45 4b10 	vmov	d0, r4, r5
 800e47c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e480:	2d00      	cmp	r5, #0
 800e482:	dc10      	bgt.n	800e4a6 <__ieee754_sqrt+0x62>
 800e484:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e488:	4330      	orrs	r0, r6
 800e48a:	d0f5      	beq.n	800e478 <__ieee754_sqrt+0x34>
 800e48c:	b15d      	cbz	r5, 800e4a6 <__ieee754_sqrt+0x62>
 800e48e:	ee10 2a10 	vmov	r2, s0
 800e492:	462b      	mov	r3, r5
 800e494:	ee10 0a10 	vmov	r0, s0
 800e498:	f7f1 ff06 	bl	80002a8 <__aeabi_dsub>
 800e49c:	4602      	mov	r2, r0
 800e49e:	460b      	mov	r3, r1
 800e4a0:	f7f2 f9e4 	bl	800086c <__aeabi_ddiv>
 800e4a4:	e7e6      	b.n	800e474 <__ieee754_sqrt+0x30>
 800e4a6:	1512      	asrs	r2, r2, #20
 800e4a8:	d074      	beq.n	800e594 <__ieee754_sqrt+0x150>
 800e4aa:	07d4      	lsls	r4, r2, #31
 800e4ac:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800e4b0:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800e4b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800e4b8:	bf5e      	ittt	pl
 800e4ba:	0fda      	lsrpl	r2, r3, #31
 800e4bc:	005b      	lslpl	r3, r3, #1
 800e4be:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800e4c2:	2400      	movs	r4, #0
 800e4c4:	0fda      	lsrs	r2, r3, #31
 800e4c6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800e4ca:	107f      	asrs	r7, r7, #1
 800e4cc:	005b      	lsls	r3, r3, #1
 800e4ce:	2516      	movs	r5, #22
 800e4d0:	4620      	mov	r0, r4
 800e4d2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800e4d6:	1886      	adds	r6, r0, r2
 800e4d8:	428e      	cmp	r6, r1
 800e4da:	bfde      	ittt	le
 800e4dc:	1b89      	suble	r1, r1, r6
 800e4de:	18b0      	addle	r0, r6, r2
 800e4e0:	18a4      	addle	r4, r4, r2
 800e4e2:	0049      	lsls	r1, r1, #1
 800e4e4:	3d01      	subs	r5, #1
 800e4e6:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800e4ea:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800e4ee:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e4f2:	d1f0      	bne.n	800e4d6 <__ieee754_sqrt+0x92>
 800e4f4:	462a      	mov	r2, r5
 800e4f6:	f04f 0e20 	mov.w	lr, #32
 800e4fa:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800e4fe:	4281      	cmp	r1, r0
 800e500:	eb06 0c05 	add.w	ip, r6, r5
 800e504:	dc02      	bgt.n	800e50c <__ieee754_sqrt+0xc8>
 800e506:	d113      	bne.n	800e530 <__ieee754_sqrt+0xec>
 800e508:	459c      	cmp	ip, r3
 800e50a:	d811      	bhi.n	800e530 <__ieee754_sqrt+0xec>
 800e50c:	f1bc 0f00 	cmp.w	ip, #0
 800e510:	eb0c 0506 	add.w	r5, ip, r6
 800e514:	da43      	bge.n	800e59e <__ieee754_sqrt+0x15a>
 800e516:	2d00      	cmp	r5, #0
 800e518:	db41      	blt.n	800e59e <__ieee754_sqrt+0x15a>
 800e51a:	f100 0801 	add.w	r8, r0, #1
 800e51e:	1a09      	subs	r1, r1, r0
 800e520:	459c      	cmp	ip, r3
 800e522:	bf88      	it	hi
 800e524:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 800e528:	eba3 030c 	sub.w	r3, r3, ip
 800e52c:	4432      	add	r2, r6
 800e52e:	4640      	mov	r0, r8
 800e530:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800e534:	f1be 0e01 	subs.w	lr, lr, #1
 800e538:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800e53c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e540:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800e544:	d1db      	bne.n	800e4fe <__ieee754_sqrt+0xba>
 800e546:	430b      	orrs	r3, r1
 800e548:	d006      	beq.n	800e558 <__ieee754_sqrt+0x114>
 800e54a:	1c50      	adds	r0, r2, #1
 800e54c:	bf13      	iteet	ne
 800e54e:	3201      	addne	r2, #1
 800e550:	3401      	addeq	r4, #1
 800e552:	4672      	moveq	r2, lr
 800e554:	f022 0201 	bicne.w	r2, r2, #1
 800e558:	1063      	asrs	r3, r4, #1
 800e55a:	0852      	lsrs	r2, r2, #1
 800e55c:	07e1      	lsls	r1, r4, #31
 800e55e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800e562:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800e566:	bf48      	it	mi
 800e568:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800e56c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800e570:	4614      	mov	r4, r2
 800e572:	e781      	b.n	800e478 <__ieee754_sqrt+0x34>
 800e574:	0ad9      	lsrs	r1, r3, #11
 800e576:	3815      	subs	r0, #21
 800e578:	055b      	lsls	r3, r3, #21
 800e57a:	2900      	cmp	r1, #0
 800e57c:	d0fa      	beq.n	800e574 <__ieee754_sqrt+0x130>
 800e57e:	02cd      	lsls	r5, r1, #11
 800e580:	d50a      	bpl.n	800e598 <__ieee754_sqrt+0x154>
 800e582:	f1c2 0420 	rsb	r4, r2, #32
 800e586:	fa23 f404 	lsr.w	r4, r3, r4
 800e58a:	1e55      	subs	r5, r2, #1
 800e58c:	4093      	lsls	r3, r2
 800e58e:	4321      	orrs	r1, r4
 800e590:	1b42      	subs	r2, r0, r5
 800e592:	e78a      	b.n	800e4aa <__ieee754_sqrt+0x66>
 800e594:	4610      	mov	r0, r2
 800e596:	e7f0      	b.n	800e57a <__ieee754_sqrt+0x136>
 800e598:	0049      	lsls	r1, r1, #1
 800e59a:	3201      	adds	r2, #1
 800e59c:	e7ef      	b.n	800e57e <__ieee754_sqrt+0x13a>
 800e59e:	4680      	mov	r8, r0
 800e5a0:	e7bd      	b.n	800e51e <__ieee754_sqrt+0xda>
 800e5a2:	bf00      	nop
 800e5a4:	7ff00000 	.word	0x7ff00000

0800e5a8 <with_errno>:
 800e5a8:	b570      	push	{r4, r5, r6, lr}
 800e5aa:	4604      	mov	r4, r0
 800e5ac:	460d      	mov	r5, r1
 800e5ae:	4616      	mov	r6, r2
 800e5b0:	f7fa fd98 	bl	80090e4 <__errno>
 800e5b4:	4629      	mov	r1, r5
 800e5b6:	6006      	str	r6, [r0, #0]
 800e5b8:	4620      	mov	r0, r4
 800e5ba:	bd70      	pop	{r4, r5, r6, pc}

0800e5bc <xflow>:
 800e5bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e5be:	4614      	mov	r4, r2
 800e5c0:	461d      	mov	r5, r3
 800e5c2:	b108      	cbz	r0, 800e5c8 <xflow+0xc>
 800e5c4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e5c8:	e9cd 2300 	strd	r2, r3, [sp]
 800e5cc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e5d0:	4620      	mov	r0, r4
 800e5d2:	4629      	mov	r1, r5
 800e5d4:	f7f2 f820 	bl	8000618 <__aeabi_dmul>
 800e5d8:	2222      	movs	r2, #34	; 0x22
 800e5da:	b003      	add	sp, #12
 800e5dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e5e0:	f7ff bfe2 	b.w	800e5a8 <with_errno>

0800e5e4 <__math_uflow>:
 800e5e4:	b508      	push	{r3, lr}
 800e5e6:	2200      	movs	r2, #0
 800e5e8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e5ec:	f7ff ffe6 	bl	800e5bc <xflow>
 800e5f0:	ec41 0b10 	vmov	d0, r0, r1
 800e5f4:	bd08      	pop	{r3, pc}

0800e5f6 <__math_oflow>:
 800e5f6:	b508      	push	{r3, lr}
 800e5f8:	2200      	movs	r2, #0
 800e5fa:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800e5fe:	f7ff ffdd 	bl	800e5bc <xflow>
 800e602:	ec41 0b10 	vmov	d0, r0, r1
 800e606:	bd08      	pop	{r3, pc}

0800e608 <fabs>:
 800e608:	ec51 0b10 	vmov	r0, r1, d0
 800e60c:	ee10 2a10 	vmov	r2, s0
 800e610:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e614:	ec43 2b10 	vmov	d0, r2, r3
 800e618:	4770      	bx	lr

0800e61a <finite>:
 800e61a:	b082      	sub	sp, #8
 800e61c:	ed8d 0b00 	vstr	d0, [sp]
 800e620:	9801      	ldr	r0, [sp, #4]
 800e622:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800e626:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800e62a:	0fc0      	lsrs	r0, r0, #31
 800e62c:	b002      	add	sp, #8
 800e62e:	4770      	bx	lr

0800e630 <scalbn>:
 800e630:	b570      	push	{r4, r5, r6, lr}
 800e632:	ec55 4b10 	vmov	r4, r5, d0
 800e636:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800e63a:	4606      	mov	r6, r0
 800e63c:	462b      	mov	r3, r5
 800e63e:	b99a      	cbnz	r2, 800e668 <scalbn+0x38>
 800e640:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e644:	4323      	orrs	r3, r4
 800e646:	d036      	beq.n	800e6b6 <scalbn+0x86>
 800e648:	4b39      	ldr	r3, [pc, #228]	; (800e730 <scalbn+0x100>)
 800e64a:	4629      	mov	r1, r5
 800e64c:	ee10 0a10 	vmov	r0, s0
 800e650:	2200      	movs	r2, #0
 800e652:	f7f1 ffe1 	bl	8000618 <__aeabi_dmul>
 800e656:	4b37      	ldr	r3, [pc, #220]	; (800e734 <scalbn+0x104>)
 800e658:	429e      	cmp	r6, r3
 800e65a:	4604      	mov	r4, r0
 800e65c:	460d      	mov	r5, r1
 800e65e:	da10      	bge.n	800e682 <scalbn+0x52>
 800e660:	a32b      	add	r3, pc, #172	; (adr r3, 800e710 <scalbn+0xe0>)
 800e662:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e666:	e03a      	b.n	800e6de <scalbn+0xae>
 800e668:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800e66c:	428a      	cmp	r2, r1
 800e66e:	d10c      	bne.n	800e68a <scalbn+0x5a>
 800e670:	ee10 2a10 	vmov	r2, s0
 800e674:	4620      	mov	r0, r4
 800e676:	4629      	mov	r1, r5
 800e678:	f7f1 fe18 	bl	80002ac <__adddf3>
 800e67c:	4604      	mov	r4, r0
 800e67e:	460d      	mov	r5, r1
 800e680:	e019      	b.n	800e6b6 <scalbn+0x86>
 800e682:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e686:	460b      	mov	r3, r1
 800e688:	3a36      	subs	r2, #54	; 0x36
 800e68a:	4432      	add	r2, r6
 800e68c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800e690:	428a      	cmp	r2, r1
 800e692:	dd08      	ble.n	800e6a6 <scalbn+0x76>
 800e694:	2d00      	cmp	r5, #0
 800e696:	a120      	add	r1, pc, #128	; (adr r1, 800e718 <scalbn+0xe8>)
 800e698:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e69c:	da1c      	bge.n	800e6d8 <scalbn+0xa8>
 800e69e:	a120      	add	r1, pc, #128	; (adr r1, 800e720 <scalbn+0xf0>)
 800e6a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e6a4:	e018      	b.n	800e6d8 <scalbn+0xa8>
 800e6a6:	2a00      	cmp	r2, #0
 800e6a8:	dd08      	ble.n	800e6bc <scalbn+0x8c>
 800e6aa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e6ae:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e6b2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e6b6:	ec45 4b10 	vmov	d0, r4, r5
 800e6ba:	bd70      	pop	{r4, r5, r6, pc}
 800e6bc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800e6c0:	da19      	bge.n	800e6f6 <scalbn+0xc6>
 800e6c2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e6c6:	429e      	cmp	r6, r3
 800e6c8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800e6cc:	dd0a      	ble.n	800e6e4 <scalbn+0xb4>
 800e6ce:	a112      	add	r1, pc, #72	; (adr r1, 800e718 <scalbn+0xe8>)
 800e6d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d1e2      	bne.n	800e69e <scalbn+0x6e>
 800e6d8:	a30f      	add	r3, pc, #60	; (adr r3, 800e718 <scalbn+0xe8>)
 800e6da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6de:	f7f1 ff9b 	bl	8000618 <__aeabi_dmul>
 800e6e2:	e7cb      	b.n	800e67c <scalbn+0x4c>
 800e6e4:	a10a      	add	r1, pc, #40	; (adr r1, 800e710 <scalbn+0xe0>)
 800e6e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d0b8      	beq.n	800e660 <scalbn+0x30>
 800e6ee:	a10e      	add	r1, pc, #56	; (adr r1, 800e728 <scalbn+0xf8>)
 800e6f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e6f4:	e7b4      	b.n	800e660 <scalbn+0x30>
 800e6f6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e6fa:	3236      	adds	r2, #54	; 0x36
 800e6fc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e700:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800e704:	4620      	mov	r0, r4
 800e706:	4b0c      	ldr	r3, [pc, #48]	; (800e738 <scalbn+0x108>)
 800e708:	2200      	movs	r2, #0
 800e70a:	e7e8      	b.n	800e6de <scalbn+0xae>
 800e70c:	f3af 8000 	nop.w
 800e710:	c2f8f359 	.word	0xc2f8f359
 800e714:	01a56e1f 	.word	0x01a56e1f
 800e718:	8800759c 	.word	0x8800759c
 800e71c:	7e37e43c 	.word	0x7e37e43c
 800e720:	8800759c 	.word	0x8800759c
 800e724:	fe37e43c 	.word	0xfe37e43c
 800e728:	c2f8f359 	.word	0xc2f8f359
 800e72c:	81a56e1f 	.word	0x81a56e1f
 800e730:	43500000 	.word	0x43500000
 800e734:	ffff3cb0 	.word	0xffff3cb0
 800e738:	3c900000 	.word	0x3c900000

0800e73c <_init>:
 800e73c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e73e:	bf00      	nop
 800e740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e742:	bc08      	pop	{r3}
 800e744:	469e      	mov	lr, r3
 800e746:	4770      	bx	lr

0800e748 <_fini>:
 800e748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e74a:	bf00      	nop
 800e74c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e74e:	bc08      	pop	{r3}
 800e750:	469e      	mov	lr, r3
 800e752:	4770      	bx	lr
