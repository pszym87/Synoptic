
Synoptic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb44  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000046a8  0800bcd8  0800bcd8  0001bcd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010380  08010380  000301e4  2**0
                  CONTENTS
  4 .ARM          00000008  08010380  08010380  00020380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010388  08010388  000301e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010388  08010388  00020388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801038c  0801038c  0002038c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08010390  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a8  200001e4  08010574  000301e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000038c  08010574  0003038c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015920  00000000  00000000  00030214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003436  00000000  00000000  00045b34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c8  00000000  00000000  00048f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001030  00000000  00000000  0004a138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002960d  00000000  00000000  0004b168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000187be  00000000  00000000  00074775  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f0cfa  00000000  00000000  0008cf33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017dc2d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e8c  00000000  00000000  0017dc80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bcbc 	.word	0x0800bcbc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	0800bcbc 	.word	0x0800bcbc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <MX_GPIO_Init>:
        * EXTI
     PA2   ------> USART2_TX
     PA3   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b08a      	sub	sp, #40	; 0x28
 8000f50:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f52:	f107 0314 	add.w	r3, r7, #20
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
 8000f5a:	605a      	str	r2, [r3, #4]
 8000f5c:	609a      	str	r2, [r3, #8]
 8000f5e:	60da      	str	r2, [r3, #12]
 8000f60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f62:	4b41      	ldr	r3, [pc, #260]	; (8001068 <MX_GPIO_Init+0x11c>)
 8000f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f66:	4a40      	ldr	r2, [pc, #256]	; (8001068 <MX_GPIO_Init+0x11c>)
 8000f68:	f043 0304 	orr.w	r3, r3, #4
 8000f6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f6e:	4b3e      	ldr	r3, [pc, #248]	; (8001068 <MX_GPIO_Init+0x11c>)
 8000f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f72:	f003 0304 	and.w	r3, r3, #4
 8000f76:	613b      	str	r3, [r7, #16]
 8000f78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f7a:	4b3b      	ldr	r3, [pc, #236]	; (8001068 <MX_GPIO_Init+0x11c>)
 8000f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f7e:	4a3a      	ldr	r2, [pc, #232]	; (8001068 <MX_GPIO_Init+0x11c>)
 8000f80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f86:	4b38      	ldr	r3, [pc, #224]	; (8001068 <MX_GPIO_Init+0x11c>)
 8000f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f92:	4b35      	ldr	r3, [pc, #212]	; (8001068 <MX_GPIO_Init+0x11c>)
 8000f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f96:	4a34      	ldr	r2, [pc, #208]	; (8001068 <MX_GPIO_Init+0x11c>)
 8000f98:	f043 0301 	orr.w	r3, r3, #1
 8000f9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f9e:	4b32      	ldr	r3, [pc, #200]	; (8001068 <MX_GPIO_Init+0x11c>)
 8000fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa2:	f003 0301 	and.w	r3, r3, #1
 8000fa6:	60bb      	str	r3, [r7, #8]
 8000fa8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000faa:	4b2f      	ldr	r3, [pc, #188]	; (8001068 <MX_GPIO_Init+0x11c>)
 8000fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fae:	4a2e      	ldr	r2, [pc, #184]	; (8001068 <MX_GPIO_Init+0x11c>)
 8000fb0:	f043 0302 	orr.w	r3, r3, #2
 8000fb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fb6:	4b2c      	ldr	r3, [pc, #176]	; (8001068 <MX_GPIO_Init+0x11c>)
 8000fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fba:	f003 0302 	and.w	r3, r3, #2
 8000fbe:	607b      	str	r3, [r7, #4]
 8000fc0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	2120      	movs	r1, #32
 8000fc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fca:	f001 fcf3 	bl	80029b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RST_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	f640 0104 	movw	r1, #2052	; 0x804
 8000fd4:	4825      	ldr	r0, [pc, #148]	; (800106c <MX_GPIO_Init+0x120>)
 8000fd6:	f001 fced 	bl	80029b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000fda:	2201      	movs	r2, #1
 8000fdc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fe0:	4822      	ldr	r0, [pc, #136]	; (800106c <MX_GPIO_Init+0x120>)
 8000fe2:	f001 fce7 	bl	80029b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000fe6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fec:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000ff0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ff6:	f107 0314 	add.w	r3, r7, #20
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	481c      	ldr	r0, [pc, #112]	; (8001070 <MX_GPIO_Init+0x124>)
 8000ffe:	f001 fb2f 	bl	8002660 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001002:	230c      	movs	r3, #12
 8001004:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001006:	2302      	movs	r3, #2
 8001008:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100a:	2300      	movs	r3, #0
 800100c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800100e:	2303      	movs	r3, #3
 8001010:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001012:	2307      	movs	r3, #7
 8001014:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001016:	f107 0314 	add.w	r3, r7, #20
 800101a:	4619      	mov	r1, r3
 800101c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001020:	f001 fb1e 	bl	8002660 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001024:	2320      	movs	r3, #32
 8001026:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001028:	2301      	movs	r3, #1
 800102a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102c:	2300      	movs	r3, #0
 800102e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001030:	2300      	movs	r3, #0
 8001032:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001034:	f107 0314 	add.w	r3, r7, #20
 8001038:	4619      	mov	r1, r3
 800103a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800103e:	f001 fb0f 	bl	8002660 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_DC_Pin|LCD_CS_Pin;
 8001042:	f641 0304 	movw	r3, #6148	; 0x1804
 8001046:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001048:	2301      	movs	r3, #1
 800104a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104c:	2300      	movs	r3, #0
 800104e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001050:	2300      	movs	r3, #0
 8001052:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001054:	f107 0314 	add.w	r3, r7, #20
 8001058:	4619      	mov	r1, r3
 800105a:	4804      	ldr	r0, [pc, #16]	; (800106c <MX_GPIO_Init+0x120>)
 800105c:	f001 fb00 	bl	8002660 <HAL_GPIO_Init>

}
 8001060:	bf00      	nop
 8001062:	3728      	adds	r7, #40	; 0x28
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	40021000 	.word	0x40021000
 800106c:	48000400 	.word	0x48000400
 8001070:	48000800 	.word	0x48000800

08001074 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001078:	4b1b      	ldr	r3, [pc, #108]	; (80010e8 <MX_I2C1_Init+0x74>)
 800107a:	4a1c      	ldr	r2, [pc, #112]	; (80010ec <MX_I2C1_Init+0x78>)
 800107c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800107e:	4b1a      	ldr	r3, [pc, #104]	; (80010e8 <MX_I2C1_Init+0x74>)
 8001080:	4a1b      	ldr	r2, [pc, #108]	; (80010f0 <MX_I2C1_Init+0x7c>)
 8001082:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001084:	4b18      	ldr	r3, [pc, #96]	; (80010e8 <MX_I2C1_Init+0x74>)
 8001086:	2200      	movs	r2, #0
 8001088:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800108a:	4b17      	ldr	r3, [pc, #92]	; (80010e8 <MX_I2C1_Init+0x74>)
 800108c:	2201      	movs	r2, #1
 800108e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001090:	4b15      	ldr	r3, [pc, #84]	; (80010e8 <MX_I2C1_Init+0x74>)
 8001092:	2200      	movs	r2, #0
 8001094:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001096:	4b14      	ldr	r3, [pc, #80]	; (80010e8 <MX_I2C1_Init+0x74>)
 8001098:	2200      	movs	r2, #0
 800109a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800109c:	4b12      	ldr	r3, [pc, #72]	; (80010e8 <MX_I2C1_Init+0x74>)
 800109e:	2200      	movs	r2, #0
 80010a0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010a2:	4b11      	ldr	r3, [pc, #68]	; (80010e8 <MX_I2C1_Init+0x74>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010a8:	4b0f      	ldr	r3, [pc, #60]	; (80010e8 <MX_I2C1_Init+0x74>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010ae:	480e      	ldr	r0, [pc, #56]	; (80010e8 <MX_I2C1_Init+0x74>)
 80010b0:	f001 fc98 	bl	80029e4 <HAL_I2C_Init>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80010ba:	f000 feb5 	bl	8001e28 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010be:	2100      	movs	r1, #0
 80010c0:	4809      	ldr	r0, [pc, #36]	; (80010e8 <MX_I2C1_Init+0x74>)
 80010c2:	f002 fd5f 	bl	8003b84 <HAL_I2CEx_ConfigAnalogFilter>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80010cc:	f000 feac 	bl	8001e28 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80010d0:	2100      	movs	r1, #0
 80010d2:	4805      	ldr	r0, [pc, #20]	; (80010e8 <MX_I2C1_Init+0x74>)
 80010d4:	f002 fda1 	bl	8003c1a <HAL_I2CEx_ConfigDigitalFilter>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80010de:	f000 fea3 	bl	8001e28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	20000200 	.word	0x20000200
 80010ec:	40005400 	.word	0x40005400
 80010f0:	10909cec 	.word	0x10909cec

080010f4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b0ac      	sub	sp, #176	; 0xb0
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
 8001106:	609a      	str	r2, [r3, #8]
 8001108:	60da      	str	r2, [r3, #12]
 800110a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800110c:	f107 0314 	add.w	r3, r7, #20
 8001110:	2288      	movs	r2, #136	; 0x88
 8001112:	2100      	movs	r1, #0
 8001114:	4618      	mov	r0, r3
 8001116:	f006 fa47 	bl	80075a8 <memset>
  if(i2cHandle->Instance==I2C1)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a21      	ldr	r2, [pc, #132]	; (80011a4 <HAL_I2C_MspInit+0xb0>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d13a      	bne.n	800119a <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001124:	2340      	movs	r3, #64	; 0x40
 8001126:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001128:	2300      	movs	r3, #0
 800112a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800112c:	f107 0314 	add.w	r3, r7, #20
 8001130:	4618      	mov	r0, r3
 8001132:	f003 fc81 	bl	8004a38 <HAL_RCCEx_PeriphCLKConfig>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800113c:	f000 fe74 	bl	8001e28 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001140:	4b19      	ldr	r3, [pc, #100]	; (80011a8 <HAL_I2C_MspInit+0xb4>)
 8001142:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001144:	4a18      	ldr	r2, [pc, #96]	; (80011a8 <HAL_I2C_MspInit+0xb4>)
 8001146:	f043 0302 	orr.w	r3, r3, #2
 800114a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800114c:	4b16      	ldr	r3, [pc, #88]	; (80011a8 <HAL_I2C_MspInit+0xb4>)
 800114e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001150:	f003 0302 	and.w	r3, r3, #2
 8001154:	613b      	str	r3, [r7, #16]
 8001156:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001158:	23c0      	movs	r3, #192	; 0xc0
 800115a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800115e:	2312      	movs	r3, #18
 8001160:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001164:	2300      	movs	r3, #0
 8001166:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800116a:	2303      	movs	r3, #3
 800116c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001170:	2304      	movs	r3, #4
 8001172:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001176:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800117a:	4619      	mov	r1, r3
 800117c:	480b      	ldr	r0, [pc, #44]	; (80011ac <HAL_I2C_MspInit+0xb8>)
 800117e:	f001 fa6f 	bl	8002660 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001182:	4b09      	ldr	r3, [pc, #36]	; (80011a8 <HAL_I2C_MspInit+0xb4>)
 8001184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001186:	4a08      	ldr	r2, [pc, #32]	; (80011a8 <HAL_I2C_MspInit+0xb4>)
 8001188:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800118c:	6593      	str	r3, [r2, #88]	; 0x58
 800118e:	4b06      	ldr	r3, [pc, #24]	; (80011a8 <HAL_I2C_MspInit+0xb4>)
 8001190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001192:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800119a:	bf00      	nop
 800119c:	37b0      	adds	r7, #176	; 0xb0
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	40005400 	.word	0x40005400
 80011a8:	40021000 	.word	0x40021000
 80011ac:	48000400 	.word	0x48000400

080011b0 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80011b4:	4b0b      	ldr	r3, [pc, #44]	; (80011e4 <MX_IWDG_Init+0x34>)
 80011b6:	4a0c      	ldr	r2, [pc, #48]	; (80011e8 <MX_IWDG_Init+0x38>)
 80011b8:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 80011ba:	4b0a      	ldr	r3, [pc, #40]	; (80011e4 <MX_IWDG_Init+0x34>)
 80011bc:	2204      	movs	r2, #4
 80011be:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 80011c0:	4b08      	ldr	r3, [pc, #32]	; (80011e4 <MX_IWDG_Init+0x34>)
 80011c2:	f640 72ff 	movw	r2, #4095	; 0xfff
 80011c6:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 80011c8:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <MX_IWDG_Init+0x34>)
 80011ca:	f640 72ff 	movw	r2, #4095	; 0xfff
 80011ce:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80011d0:	4804      	ldr	r0, [pc, #16]	; (80011e4 <MX_IWDG_Init+0x34>)
 80011d2:	f002 fd6e 	bl	8003cb2 <HAL_IWDG_Init>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 80011dc:	f000 fe24 	bl	8001e28 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80011e0:	bf00      	nop
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	20000254 	.word	0x20000254
 80011e8:	40003000 	.word	0x40003000

080011ec <lcd_cmd>:
		CMD(0xf6), 0x00,
		CMD(ST7735S_COLMOD), 0x05,
		CMD(ST7735S_MADCTL), 0xa0
};

static void lcd_cmd(uint8_t cmd){
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 80011f6:	2200      	movs	r2, #0
 80011f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011fc:	480c      	ldr	r0, [pc, #48]	; (8001230 <lcd_cmd+0x44>)
 80011fe:	f001 fbd9 	bl	80029b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001202:	2200      	movs	r2, #0
 8001204:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001208:	4809      	ldr	r0, [pc, #36]	; (8001230 <lcd_cmd+0x44>)
 800120a:	f001 fbd3 	bl	80029b4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &cmd, 1, HAL_MAX_DELAY);
 800120e:	1df9      	adds	r1, r7, #7
 8001210:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001214:	2201      	movs	r2, #1
 8001216:	4807      	ldr	r0, [pc, #28]	; (8001234 <lcd_cmd+0x48>)
 8001218:	f004 f96d 	bl	80054f6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 800121c:	2201      	movs	r2, #1
 800121e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001222:	4803      	ldr	r0, [pc, #12]	; (8001230 <lcd_cmd+0x44>)
 8001224:	f001 fbc6 	bl	80029b4 <HAL_GPIO_WritePin>
}
 8001228:	bf00      	nop
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	48000400 	.word	0x48000400
 8001234:	2000028c 	.word	0x2000028c

08001238 <lcd_data>:

static void lcd_data(uint8_t data){
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8001242:	2201      	movs	r2, #1
 8001244:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001248:	480c      	ldr	r0, [pc, #48]	; (800127c <lcd_data+0x44>)
 800124a:	f001 fbb3 	bl	80029b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 800124e:	2200      	movs	r2, #0
 8001250:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001254:	4809      	ldr	r0, [pc, #36]	; (800127c <lcd_data+0x44>)
 8001256:	f001 fbad 	bl	80029b4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &data, 1, HAL_MAX_DELAY);
 800125a:	1df9      	adds	r1, r7, #7
 800125c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001260:	2201      	movs	r2, #1
 8001262:	4807      	ldr	r0, [pc, #28]	; (8001280 <lcd_data+0x48>)
 8001264:	f004 f947 	bl	80054f6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001268:	2201      	movs	r2, #1
 800126a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800126e:	4803      	ldr	r0, [pc, #12]	; (800127c <lcd_data+0x44>)
 8001270:	f001 fba0 	bl	80029b4 <HAL_GPIO_WritePin>
}
 8001274:	bf00      	nop
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	48000400 	.word	0x48000400
 8001280:	2000028c 	.word	0x2000028c

08001284 <lcd_send>:

static void lcd_send(uint16_t value){
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	80fb      	strh	r3, [r7, #6]
	if(value & 0x100){
 800128e:	88fb      	ldrh	r3, [r7, #6]
 8001290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001294:	2b00      	cmp	r3, #0
 8001296:	d005      	beq.n	80012a4 <lcd_send+0x20>
		lcd_cmd(value);
 8001298:	88fb      	ldrh	r3, [r7, #6]
 800129a:	b2db      	uxtb	r3, r3
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff ffa5 	bl	80011ec <lcd_cmd>
	} else{
		lcd_data(value);
	}
}
 80012a2:	e004      	b.n	80012ae <lcd_send+0x2a>
		lcd_data(value);
 80012a4:	88fb      	ldrh	r3, [r7, #6]
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff ffc5 	bl	8001238 <lcd_data>
}
 80012ae:	bf00      	nop
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <lcd_data16>:

static void lcd_data16(uint16_t value){
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b082      	sub	sp, #8
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	4603      	mov	r3, r0
 80012be:	80fb      	strh	r3, [r7, #6]
	lcd_data(value >> 8);
 80012c0:	88fb      	ldrh	r3, [r7, #6]
 80012c2:	0a1b      	lsrs	r3, r3, #8
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff ffb5 	bl	8001238 <lcd_data>
	lcd_data(value);
 80012ce:	88fb      	ldrh	r3, [r7, #6]
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff ffb0 	bl	8001238 <lcd_data>
}
 80012d8:	bf00      	nop
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}

080012e0 <lcd_set_window>:

static void lcd_set_window(int x, int y, int width, int height){
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	60b9      	str	r1, [r7, #8]
 80012ea:	607a      	str	r2, [r7, #4]
 80012ec:	603b      	str	r3, [r7, #0]
	lcd_cmd(ST7735S_CASET);
 80012ee:	202a      	movs	r0, #42	; 0x2a
 80012f0:	f7ff ff7c 	bl	80011ec <lcd_cmd>
	lcd_data16(LCD_OFFSET_X + x);
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	b29b      	uxth	r3, r3
 80012f8:	3301      	adds	r3, #1
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff ffda 	bl	80012b6 <lcd_data16>
	lcd_data16(LCD_OFFSET_X + x + width - 1);
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	b29a      	uxth	r2, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	b29b      	uxth	r3, r3
 800130a:	4413      	add	r3, r2
 800130c:	b29b      	uxth	r3, r3
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff ffd1 	bl	80012b6 <lcd_data16>

	lcd_cmd(ST7735S_RASET);
 8001314:	202b      	movs	r0, #43	; 0x2b
 8001316:	f7ff ff69 	bl	80011ec <lcd_cmd>
	lcd_data16(LCD_OFFSET_Y + y);
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	b29b      	uxth	r3, r3
 800131e:	3302      	adds	r3, #2
 8001320:	b29b      	uxth	r3, r3
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff ffc7 	bl	80012b6 <lcd_data16>
	lcd_data16(LCD_OFFSET_Y + y + height -1);
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	b29a      	uxth	r2, r3
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	b29b      	uxth	r3, r3
 8001330:	4413      	add	r3, r2
 8001332:	b29b      	uxth	r3, r3
 8001334:	3301      	adds	r3, #1
 8001336:	b29b      	uxth	r3, r3
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff ffbc 	bl	80012b6 <lcd_data16>

}
 800133e:	bf00      	nop
 8001340:	3710      	adds	r7, #16
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <lcd_fill_box>:

void lcd_fill_box(int x, int y, int width, int height, uint16_t color){
 8001346:	b580      	push	{r7, lr}
 8001348:	b086      	sub	sp, #24
 800134a:	af00      	add	r7, sp, #0
 800134c:	60f8      	str	r0, [r7, #12]
 800134e:	60b9      	str	r1, [r7, #8]
 8001350:	607a      	str	r2, [r7, #4]
 8001352:	603b      	str	r3, [r7, #0]
	lcd_set_window(x, y, width, height);
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	68b9      	ldr	r1, [r7, #8]
 800135a:	68f8      	ldr	r0, [r7, #12]
 800135c:	f7ff ffc0 	bl	80012e0 <lcd_set_window>

	lcd_cmd(ST7735S_RAMWR);
 8001360:	202c      	movs	r0, #44	; 0x2c
 8001362:	f7ff ff43 	bl	80011ec <lcd_cmd>
	for(int i=0; i< width * height; i++)
 8001366:	2300      	movs	r3, #0
 8001368:	617b      	str	r3, [r7, #20]
 800136a:	e006      	b.n	800137a <lcd_fill_box+0x34>
		lcd_data16(color);
 800136c:	8c3b      	ldrh	r3, [r7, #32]
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff ffa1 	bl	80012b6 <lcd_data16>
	for(int i=0; i< width * height; i++)
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	3301      	adds	r3, #1
 8001378:	617b      	str	r3, [r7, #20]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	683a      	ldr	r2, [r7, #0]
 800137e:	fb02 f303 	mul.w	r3, r2, r3
 8001382:	697a      	ldr	r2, [r7, #20]
 8001384:	429a      	cmp	r2, r3
 8001386:	dbf1      	blt.n	800136c <lcd_fill_box+0x26>
}
 8001388:	bf00      	nop
 800138a:	bf00      	nop
 800138c:	3718      	adds	r7, #24
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
	...

08001394 <lcd_init>:
	lcd_cmd(ST7735S_SLPOUT);
	HAL_Delay(120);
}


void lcd_init(void){
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
	int i;
	HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 800139a:	2200      	movs	r2, #0
 800139c:	2104      	movs	r1, #4
 800139e:	4817      	ldr	r0, [pc, #92]	; (80013fc <lcd_init+0x68>)
 80013a0:	f001 fb08 	bl	80029b4 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80013a4:	2064      	movs	r0, #100	; 0x64
 80013a6:	f001 f851 	bl	800244c <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 80013aa:	2201      	movs	r2, #1
 80013ac:	2104      	movs	r1, #4
 80013ae:	4813      	ldr	r0, [pc, #76]	; (80013fc <lcd_init+0x68>)
 80013b0:	f001 fb00 	bl	80029b4 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80013b4:	2064      	movs	r0, #100	; 0x64
 80013b6:	f001 f849 	bl	800244c <HAL_Delay>

	for(i=0; i< sizeof init_table / sizeof (uint16_t); i++){
 80013ba:	2300      	movs	r3, #0
 80013bc:	607b      	str	r3, [r7, #4]
 80013be:	e009      	b.n	80013d4 <lcd_init+0x40>
		lcd_send(init_table[i]);
 80013c0:	4a0f      	ldr	r2, [pc, #60]	; (8001400 <lcd_init+0x6c>)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff ff5b 	bl	8001284 <lcd_send>
	for(i=0; i< sizeof init_table / sizeof (uint16_t); i++){
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	3301      	adds	r3, #1
 80013d2:	607b      	str	r3, [r7, #4]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2b4b      	cmp	r3, #75	; 0x4b
 80013d8:	d9f2      	bls.n	80013c0 <lcd_init+0x2c>
	}

	HAL_Delay(200);
 80013da:	20c8      	movs	r0, #200	; 0xc8
 80013dc:	f001 f836 	bl	800244c <HAL_Delay>
	lcd_cmd(ST7735S_SLPOUT);
 80013e0:	2011      	movs	r0, #17
 80013e2:	f7ff ff03 	bl	80011ec <lcd_cmd>
	HAL_Delay(120);
 80013e6:	2078      	movs	r0, #120	; 0x78
 80013e8:	f001 f830 	bl	800244c <HAL_Delay>
	lcd_cmd(ST7735S_DISPON);
 80013ec:	2029      	movs	r0, #41	; 0x29
 80013ee:	f7ff fefd 	bl	80011ec <lcd_cmd>
}
 80013f2:	bf00      	nop
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	48000400 	.word	0x48000400
 8001400:	0800bf7c 	.word	0x0800bf7c

08001404 <lcd_draw_point>:
void lcd_invoff(){
	lcd_cmd(ST7735S_INVOFF);
}


void lcd_draw_point(int x, int y, uint16_t color){
 8001404:	b580      	push	{r7, lr}
 8001406:	b086      	sub	sp, #24
 8001408:	af02      	add	r7, sp, #8
 800140a:	60f8      	str	r0, [r7, #12]
 800140c:	60b9      	str	r1, [r7, #8]
 800140e:	4613      	mov	r3, r2
 8001410:	80fb      	strh	r3, [r7, #6]
	lcd_fill_box(x, y, 1, 1, color);
 8001412:	88fb      	ldrh	r3, [r7, #6]
 8001414:	9300      	str	r3, [sp, #0]
 8001416:	2301      	movs	r3, #1
 8001418:	2201      	movs	r2, #1
 800141a:	68b9      	ldr	r1, [r7, #8]
 800141c:	68f8      	ldr	r0, [r7, #12]
 800141e:	f7ff ff92 	bl	8001346 <lcd_fill_box>
}
 8001422:	bf00      	nop
 8001424:	3710      	adds	r7, #16
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
	...

0800142c <lcd_draw_image_fast>:
			array_counter++;
			lcd_colorize_pixel(ix, iy, mcolor);
		}
}

void lcd_draw_image_fast(int x, int y, int width, int height, uint8_t *data){
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	60f8      	str	r0, [r7, #12]
 8001434:	60b9      	str	r1, [r7, #8]
 8001436:	607a      	str	r2, [r7, #4]
 8001438:	603b      	str	r3, [r7, #0]

	lcd_cmd(ST7735S_CASET);
 800143a:	202a      	movs	r0, #42	; 0x2a
 800143c:	f7ff fed6 	bl	80011ec <lcd_cmd>
	lcd_data16(x);
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	b29b      	uxth	r3, r3
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff ff36 	bl	80012b6 <lcd_data16>
	lcd_data16(x+width-1);
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	b29a      	uxth	r2, r3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	b29b      	uxth	r3, r3
 8001452:	4413      	add	r3, r2
 8001454:	b29b      	uxth	r3, r3
 8001456:	3b01      	subs	r3, #1
 8001458:	b29b      	uxth	r3, r3
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff ff2b 	bl	80012b6 <lcd_data16>

	lcd_cmd(ST7735S_RASET);
 8001460:	202b      	movs	r0, #43	; 0x2b
 8001462:	f7ff fec3 	bl	80011ec <lcd_cmd>
	lcd_data16(y);
 8001466:	68bb      	ldr	r3, [r7, #8]
 8001468:	b29b      	uxth	r3, r3
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff ff23 	bl	80012b6 <lcd_data16>
	lcd_data16(y+height-1);
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	b29a      	uxth	r2, r3
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	b29b      	uxth	r3, r3
 8001478:	4413      	add	r3, r2
 800147a:	b29b      	uxth	r3, r3
 800147c:	3b01      	subs	r3, #1
 800147e:	b29b      	uxth	r3, r3
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff ff18 	bl	80012b6 <lcd_data16>

	lcd_cmd(ST7735S_RAMWR);
 8001486:	202c      	movs	r0, #44	; 0x2c
 8001488:	f7ff feb0 	bl	80011ec <lcd_cmd>
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 800148c:	2201      	movs	r2, #1
 800148e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001492:	4811      	ldr	r0, [pc, #68]	; (80014d8 <lcd_draw_image_fast+0xac>)
 8001494:	f001 fa8e 	bl	80029b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001498:	2200      	movs	r2, #0
 800149a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800149e:	480e      	ldr	r0, [pc, #56]	; (80014d8 <lcd_draw_image_fast+0xac>)
 80014a0:	f001 fa88 	bl	80029b4 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi2, data, width*height*2, HAL_MAX_DELAY);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	b29a      	uxth	r2, r3
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	b29b      	uxth	r3, r3
 80014ac:	fb12 f303 	smulbb	r3, r2, r3
 80014b0:	b29b      	uxth	r3, r3
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	b29a      	uxth	r2, r3
 80014b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014ba:	69b9      	ldr	r1, [r7, #24]
 80014bc:	4807      	ldr	r0, [pc, #28]	; (80014dc <lcd_draw_image_fast+0xb0>)
 80014be:	f004 f81a 	bl	80054f6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 80014c2:	2201      	movs	r2, #1
 80014c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014c8:	4803      	ldr	r0, [pc, #12]	; (80014d8 <lcd_draw_image_fast+0xac>)
 80014ca:	f001 fa73 	bl	80029b4 <HAL_GPIO_WritePin>
}
 80014ce:	bf00      	nop
 80014d0:	3710      	adds	r7, #16
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	48000400 	.word	0x48000400
 80014dc:	2000028c 	.word	0x2000028c

080014e0 <lps_write_to_reg>:
 * \param	reg adres rejestru
 * \param	data byte danych do zapisania
 * \return	status transmisji
 *
 */
static HAL_StatusTypeDef lps_write_to_reg(uint8_t reg, uint8_t data){
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b086      	sub	sp, #24
 80014e4:	af02      	add	r7, sp, #8
 80014e6:	4603      	mov	r3, r0
 80014e8:	460a      	mov	r2, r1
 80014ea:	71fb      	strb	r3, [r7, #7]
 80014ec:	4613      	mov	r3, r2
 80014ee:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef status;
	uint8_t buffer[2] = {reg, data};
 80014f0:	79fb      	ldrb	r3, [r7, #7]
 80014f2:	733b      	strb	r3, [r7, #12]
 80014f4:	79bb      	ldrb	r3, [r7, #6]
 80014f6:	737b      	strb	r3, [r7, #13]

    status = HAL_I2C_Master_Transmit(&hi2c1, LPS25HB_ADDR, buffer, sizeof buffer, HAL_MAX_DELAY);
 80014f8:	f107 020c 	add.w	r2, r7, #12
 80014fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001500:	9300      	str	r3, [sp, #0]
 8001502:	2302      	movs	r3, #2
 8001504:	21ba      	movs	r1, #186	; 0xba
 8001506:	4805      	ldr	r0, [pc, #20]	; (800151c <lps_write_to_reg+0x3c>)
 8001508:	f001 fafc 	bl	8002b04 <HAL_I2C_Master_Transmit>
 800150c:	4603      	mov	r3, r0
 800150e:	73fb      	strb	r3, [r7, #15]
	return status;
 8001510:	7bfb      	ldrb	r3, [r7, #15]
}
 8001512:	4618      	mov	r0, r3
 8001514:	3710      	adds	r7, #16
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	20000200 	.word	0x20000200

08001520 <lps_read_from_reg>:
 * \param	data odczyt zostanie zapisany pod wskazywanym adresem
 *
 * \return status transmisji (nie rozróżnia czy status dotyczy transmisji o dostep do rejestru, czy statusu odczytu z rejestru)
 *
 */
static HAL_StatusTypeDef lps_read_from_reg(uint8_t reg, uint8_t* data_ptr){
 8001520:	b580      	push	{r7, lr}
 8001522:	b086      	sub	sp, #24
 8001524:	af02      	add	r7, sp, #8
 8001526:	4603      	mov	r3, r0
 8001528:	6039      	str	r1, [r7, #0]
 800152a:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef status;
	if((status = HAL_I2C_Master_Transmit(&hi2c1, LPS25HB_ADDR, &reg, sizeof reg, HAL_MAX_DELAY))!=HAL_OK)
 800152c:	1dfa      	adds	r2, r7, #7
 800152e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001532:	9300      	str	r3, [sp, #0]
 8001534:	2301      	movs	r3, #1
 8001536:	21ba      	movs	r1, #186	; 0xba
 8001538:	480c      	ldr	r0, [pc, #48]	; (800156c <lps_read_from_reg+0x4c>)
 800153a:	f001 fae3 	bl	8002b04 <HAL_I2C_Master_Transmit>
 800153e:	4603      	mov	r3, r0
 8001540:	73fb      	strb	r3, [r7, #15]
 8001542:	7bfb      	ldrb	r3, [r7, #15]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <lps_read_from_reg+0x2c>
		return status;
 8001548:	7bfb      	ldrb	r3, [r7, #15]
 800154a:	e00b      	b.n	8001564 <lps_read_from_reg+0x44>
	status = HAL_I2C_Master_Receive(&hi2c1, LPS25HB_ADDR, data_ptr, sizeof data_ptr, HAL_MAX_DELAY);
 800154c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001550:	9300      	str	r3, [sp, #0]
 8001552:	2304      	movs	r3, #4
 8001554:	683a      	ldr	r2, [r7, #0]
 8001556:	21ba      	movs	r1, #186	; 0xba
 8001558:	4804      	ldr	r0, [pc, #16]	; (800156c <lps_read_from_reg+0x4c>)
 800155a:	f001 fbc7 	bl	8002cec <HAL_I2C_Master_Receive>
 800155e:	4603      	mov	r3, r0
 8001560:	73fb      	strb	r3, [r7, #15]
	return status;
 8001562:	7bfb      	ldrb	r3, [r7, #15]
}
 8001564:	4618      	mov	r0, r3
 8001566:	3710      	adds	r7, #16
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	20000200 	.word	0x20000200

08001570 <lps_init>:


void lps_init(){
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
	// wlacz urzadzenie i ustaw czestotliwosc pomiaru na 25Hz
	lps_write_to_reg(CTRL_REG1, SET_CTRL_REG1_PD|SET_CTRL_REG1_ODR2);
 8001574:	21c0      	movs	r1, #192	; 0xc0
 8001576:	2020      	movs	r0, #32
 8001578:	f7ff ffb2 	bl	80014e0 <lps_write_to_reg>

	// przy problemach z odczytem danych dodac oczekiwanie 100 ms

	// aktywacja i ustawienie fifo dla pomiarow
	lps_write_to_reg(CTRL_REG2,SET_CTRL_REG2_FIFO);
 800157c:	2140      	movs	r1, #64	; 0x40
 800157e:	2021      	movs	r0, #33	; 0x21
 8001580:	f7ff ffae 	bl	80014e0 <lps_write_to_reg>
	lps_write_to_reg(FIFO_CTRL, SET_FIFO_CTRL_MEAN_MODE|SET_FIFO_CTRL_WTM_32_SMPL);
 8001584:	21cf      	movs	r1, #207	; 0xcf
 8001586:	202e      	movs	r0, #46	; 0x2e
 8001588:	f7ff ffaa 	bl	80014e0 <lps_write_to_reg>

}
 800158c:	bf00      	nop
 800158e:	bd80      	pop	{r7, pc}

08001590 <lps_read_temperature>:

float lps_read_temperature(float temp_conv){
 8001590:	b580      	push	{r7, lr}
 8001592:	b086      	sub	sp, #24
 8001594:	af00      	add	r7, sp, #0
 8001596:	ed87 0a01 	vstr	s0, [r7, #4]
	uint8_t *ptr_lsb, *ptr_msb;
	ptr_lsb = malloc(sizeof(uint8_t));
 800159a:	2001      	movs	r0, #1
 800159c:	f005 ffe6 	bl	800756c <malloc>
 80015a0:	4603      	mov	r3, r0
 80015a2:	617b      	str	r3, [r7, #20]
	ptr_msb = malloc(sizeof(uint8_t));
 80015a4:	2001      	movs	r0, #1
 80015a6:	f005 ffe1 	bl	800756c <malloc>
 80015aa:	4603      	mov	r3, r0
 80015ac:	613b      	str	r3, [r7, #16]
	lps_read_from_reg(TEMP_OUT_L, ptr_lsb);
 80015ae:	6979      	ldr	r1, [r7, #20]
 80015b0:	202b      	movs	r0, #43	; 0x2b
 80015b2:	f7ff ffb5 	bl	8001520 <lps_read_from_reg>
	lps_read_from_reg(TEMP_OUT_H, ptr_msb);
 80015b6:	6939      	ldr	r1, [r7, #16]
 80015b8:	202c      	movs	r0, #44	; 0x2c
 80015ba:	f7ff ffb1 	bl	8001520 <lps_read_from_reg>
    int16_t val = *ptr_lsb + (*ptr_msb <<8);
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	b29a      	uxth	r2, r3
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	b29b      	uxth	r3, r3
 80015ca:	021b      	lsls	r3, r3, #8
 80015cc:	b29b      	uxth	r3, r3
 80015ce:	4413      	add	r3, r2
 80015d0:	b29b      	uxth	r3, r3
 80015d2:	81fb      	strh	r3, [r7, #14]

    free(ptr_lsb);
 80015d4:	6978      	ldr	r0, [r7, #20]
 80015d6:	f005 ffd1 	bl	800757c <free>
    free(ptr_msb);
 80015da:	6938      	ldr	r0, [r7, #16]
 80015dc:	f005 ffce 	bl	800757c <free>

	return 42.5f + val / 480.0f + temp_conv;
 80015e0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015e4:	ee07 3a90 	vmov	s15, r3
 80015e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015ec:	eddf 6a08 	vldr	s13, [pc, #32]	; 8001610 <lps_read_temperature+0x80>
 80015f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015f4:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001614 <lps_read_temperature+0x84>
 80015f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80015fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001600:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001604:	eeb0 0a67 	vmov.f32	s0, s15
 8001608:	3718      	adds	r7, #24
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	43f00000 	.word	0x43f00000
 8001614:	422a0000 	.word	0x422a0000

08001618 <lps_pressure_correction>:

void lps_pressure_correction(uint16_t offset){
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	4603      	mov	r3, r0
 8001620:	80fb      	strh	r3, [r7, #6]
	lps_write_to_reg(RPDS_L, offset);
 8001622:	88fb      	ldrh	r3, [r7, #6]
 8001624:	b2db      	uxtb	r3, r3
 8001626:	4619      	mov	r1, r3
 8001628:	2039      	movs	r0, #57	; 0x39
 800162a:	f7ff ff59 	bl	80014e0 <lps_write_to_reg>
	lps_write_to_reg(RPDS_H, offset >> 8);
 800162e:	88fb      	ldrh	r3, [r7, #6]
 8001630:	0a1b      	lsrs	r3, r3, #8
 8001632:	b29b      	uxth	r3, r3
 8001634:	b2db      	uxtb	r3, r3
 8001636:	4619      	mov	r1, r3
 8001638:	203a      	movs	r0, #58	; 0x3a
 800163a:	f7ff ff51 	bl	80014e0 <lps_write_to_reg>
}
 800163e:	bf00      	nop
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <lps_read_absolute_pressure>:


float lps_read_absolute_pressure(){
 8001646:	b580      	push	{r7, lr}
 8001648:	b082      	sub	sp, #8
 800164a:	af00      	add	r7, sp, #0
	uint8_t *pressure = malloc(sizeof(uint8_t)*3);
 800164c:	2003      	movs	r0, #3
 800164e:	f005 ff8d 	bl	800756c <malloc>
 8001652:	4603      	mov	r3, r0
 8001654:	607b      	str	r3, [r7, #4]
	lps_read_from_reg(PRESS_OUT_XL, pressure);
 8001656:	6879      	ldr	r1, [r7, #4]
 8001658:	2028      	movs	r0, #40	; 0x28
 800165a:	f7ff ff61 	bl	8001520 <lps_read_from_reg>
	lps_read_from_reg(PRESS_OUT_L, pressure+1);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	3301      	adds	r3, #1
 8001662:	4619      	mov	r1, r3
 8001664:	2029      	movs	r0, #41	; 0x29
 8001666:	f7ff ff5b 	bl	8001520 <lps_read_from_reg>
	lps_read_from_reg(PRESS_OUT_H, pressure+2);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	3302      	adds	r3, #2
 800166e:	4619      	mov	r1, r3
 8001670:	202a      	movs	r0, #42	; 0x2a
 8001672:	f7ff ff55 	bl	8001520 <lps_read_from_reg>

	int32_t val = (*pressure + (*(pressure+1)<<8) + (*(pressure+2)<<16))/4096;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	461a      	mov	r2, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	3301      	adds	r3, #1
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	021b      	lsls	r3, r3, #8
 8001684:	441a      	add	r2, r3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	3302      	adds	r3, #2
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	041b      	lsls	r3, r3, #16
 800168e:	4413      	add	r3, r2
 8001690:	2b00      	cmp	r3, #0
 8001692:	da01      	bge.n	8001698 <lps_read_absolute_pressure+0x52>
 8001694:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001698:	131b      	asrs	r3, r3, #12
 800169a:	603b      	str	r3, [r7, #0]
	free(pressure);
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	f005 ff6d 	bl	800757c <free>
	return val;
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	ee07 3a90 	vmov	s15, r3
 80016a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15

}
 80016ac:	eeb0 0a67 	vmov.f32	s0, s15
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
	...

080016b8 <lps_read_relative_pressure>:

float lps_read_relative_pressure(){
 80016b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80016bc:	b084      	sub	sp, #16
 80016be:	af00      	add	r7, sp, #0
	const float h = 93; // jesli inna wysokosc to zmienic;
 80016c0:	4b25      	ldr	r3, [pc, #148]	; (8001758 <lps_read_relative_pressure+0xa0>)
 80016c2:	60fb      	str	r3, [r7, #12]
	float temp_K = lps_read_temperature(U_KELVIN);
 80016c4:	ed9f 0a25 	vldr	s0, [pc, #148]	; 800175c <lps_read_relative_pressure+0xa4>
 80016c8:	f7ff ff62 	bl	8001590 <lps_read_temperature>
 80016cc:	ed87 0a02 	vstr	s0, [r7, #8]
	float abs_press = lps_read_absolute_pressure();
 80016d0:	f7ff ffb9 	bl	8001646 <lps_read_absolute_pressure>
 80016d4:	ed87 0a01 	vstr	s0, [r7, #4]

	return abs_press * exp(0.034162608734308*h / temp_K);
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f7fe ff35 	bl	8000548 <__aeabi_f2d>
 80016de:	4604      	mov	r4, r0
 80016e0:	460d      	mov	r5, r1
 80016e2:	68f8      	ldr	r0, [r7, #12]
 80016e4:	f7fe ff30 	bl	8000548 <__aeabi_f2d>
 80016e8:	a319      	add	r3, pc, #100	; (adr r3, 8001750 <lps_read_relative_pressure+0x98>)
 80016ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ee:	f7fe ff83 	bl	80005f8 <__aeabi_dmul>
 80016f2:	4602      	mov	r2, r0
 80016f4:	460b      	mov	r3, r1
 80016f6:	4690      	mov	r8, r2
 80016f8:	4699      	mov	r9, r3
 80016fa:	68b8      	ldr	r0, [r7, #8]
 80016fc:	f7fe ff24 	bl	8000548 <__aeabi_f2d>
 8001700:	4602      	mov	r2, r0
 8001702:	460b      	mov	r3, r1
 8001704:	4640      	mov	r0, r8
 8001706:	4649      	mov	r1, r9
 8001708:	f7ff f8a0 	bl	800084c <__aeabi_ddiv>
 800170c:	4602      	mov	r2, r0
 800170e:	460b      	mov	r3, r1
 8001710:	ec43 2b17 	vmov	d7, r2, r3
 8001714:	eeb0 0a47 	vmov.f32	s0, s14
 8001718:	eef0 0a67 	vmov.f32	s1, s15
 800171c:	f009 f9e8 	bl	800aaf0 <exp>
 8001720:	ec53 2b10 	vmov	r2, r3, d0
 8001724:	4620      	mov	r0, r4
 8001726:	4629      	mov	r1, r5
 8001728:	f7fe ff66 	bl	80005f8 <__aeabi_dmul>
 800172c:	4602      	mov	r2, r0
 800172e:	460b      	mov	r3, r1
 8001730:	4610      	mov	r0, r2
 8001732:	4619      	mov	r1, r3
 8001734:	f7ff fa38 	bl	8000ba8 <__aeabi_d2f>
 8001738:	4603      	mov	r3, r0
 800173a:	ee07 3a90 	vmov	s15, r3
}
 800173e:	eeb0 0a67 	vmov.f32	s0, s15
 8001742:	3710      	adds	r7, #16
 8001744:	46bd      	mov	sp, r7
 8001746:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800174a:	bf00      	nop
 800174c:	f3af 8000 	nop.w
 8001750:	ee851132 	.word	0xee851132
 8001754:	3fa17dc2 	.word	0x3fa17dc2
 8001758:	42ba0000 	.word	0x42ba0000
 800175c:	43889333 	.word	0x43889333

08001760 <lps_get_altitude_hyps_f>:

float lps_get_altitude_hyps_f(){
 8001760:	b5b0      	push	{r4, r5, r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0

	float p0 = lps_read_relative_pressure(); // sea-level pressure
 8001766:	f7ff ffa7 	bl	80016b8 <lps_read_relative_pressure>
 800176a:	ed87 0a03 	vstr	s0, [r7, #12]
    float p = lps_read_absolute_pressure(); // pressure at location
 800176e:	f7ff ff6a 	bl	8001646 <lps_read_absolute_pressure>
 8001772:	ed87 0a02 	vstr	s0, [r7, #8]
    float temp_K = lps_read_temperature(U_KELVIN);
 8001776:	ed9f 0a26 	vldr	s0, [pc, #152]	; 8001810 <lps_get_altitude_hyps_f+0xb0>
 800177a:	f7ff ff09 	bl	8001590 <lps_read_temperature>
 800177e:	ed87 0a01 	vstr	s0, [r7, #4]

    float h = (( pow(p0/p, 1/5.257) - 1)*( temp_K ))/0.0065;
 8001782:	ed97 7a03 	vldr	s14, [r7, #12]
 8001786:	edd7 7a02 	vldr	s15, [r7, #8]
 800178a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800178e:	ee16 0a90 	vmov	r0, s13
 8001792:	f7fe fed9 	bl	8000548 <__aeabi_f2d>
 8001796:	4602      	mov	r2, r0
 8001798:	460b      	mov	r3, r1
 800179a:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8001800 <lps_get_altitude_hyps_f+0xa0>
 800179e:	ec43 2b10 	vmov	d0, r2, r3
 80017a2:	f009 f9ed 	bl	800ab80 <pow>
 80017a6:	ec51 0b10 	vmov	r0, r1, d0
 80017aa:	f04f 0200 	mov.w	r2, #0
 80017ae:	4b19      	ldr	r3, [pc, #100]	; (8001814 <lps_get_altitude_hyps_f+0xb4>)
 80017b0:	f7fe fd6a 	bl	8000288 <__aeabi_dsub>
 80017b4:	4602      	mov	r2, r0
 80017b6:	460b      	mov	r3, r1
 80017b8:	4614      	mov	r4, r2
 80017ba:	461d      	mov	r5, r3
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f7fe fec3 	bl	8000548 <__aeabi_f2d>
 80017c2:	4602      	mov	r2, r0
 80017c4:	460b      	mov	r3, r1
 80017c6:	4620      	mov	r0, r4
 80017c8:	4629      	mov	r1, r5
 80017ca:	f7fe ff15 	bl	80005f8 <__aeabi_dmul>
 80017ce:	4602      	mov	r2, r0
 80017d0:	460b      	mov	r3, r1
 80017d2:	4610      	mov	r0, r2
 80017d4:	4619      	mov	r1, r3
 80017d6:	a30c      	add	r3, pc, #48	; (adr r3, 8001808 <lps_get_altitude_hyps_f+0xa8>)
 80017d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017dc:	f7ff f836 	bl	800084c <__aeabi_ddiv>
 80017e0:	4602      	mov	r2, r0
 80017e2:	460b      	mov	r3, r1
 80017e4:	4610      	mov	r0, r2
 80017e6:	4619      	mov	r1, r3
 80017e8:	f7ff f9de 	bl	8000ba8 <__aeabi_d2f>
 80017ec:	4603      	mov	r3, r0
 80017ee:	603b      	str	r3, [r7, #0]

   	return h;
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	ee07 3a90 	vmov	s15, r3

}
 80017f6:	eeb0 0a67 	vmov.f32	s0, s15
 80017fa:	3710      	adds	r7, #16
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bdb0      	pop	{r4, r5, r7, pc}
 8001800:	7dee2d4a 	.word	0x7dee2d4a
 8001804:	3fc85936 	.word	0x3fc85936
 8001808:	76c8b439 	.word	0x76c8b439
 800180c:	3f7a9fbe 	.word	0x3f7a9fbe
 8001810:	43889333 	.word	0x43889333
 8001814:	3ff00000 	.word	0x3ff00000

08001818 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001818:	b5b0      	push	{r4, r5, r7, lr}
 800181a:	b0a0      	sub	sp, #128	; 0x80
 800181c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  typedef enum prog_mode {live_mode, history_mode} prog_mode_t;
  prog_mode_t which_program = 1;
 800181e:	2301      	movs	r3, #1
 8001820:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001824:	f000 fd96 	bl	8002354 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001828:	f000 f8ba 	bl	80019a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800182c:	f7ff fb8e 	bl	8000f4c <MX_GPIO_Init>
  MX_I2C1_Init();
 8001830:	f7ff fc20 	bl	8001074 <MX_I2C1_Init>
  MX_SPI2_Init();
 8001834:	f000 fafe 	bl	8001e34 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8001838:	f000 fcc2 	bl	80021c0 <MX_USART1_UART_Init>
  MX_IWDG_Init();
 800183c:	f7ff fcb8 	bl	80011b0 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
  checkFlags();
 8001840:	f000 fad2 	bl	8001de8 <checkFlags>
  lps_init();
 8001844:	f7ff fe94 	bl	8001570 <lps_init>
  lps_pressure_correction(48);
 8001848:	2030      	movs	r0, #48	; 0x30
 800184a:	f7ff fee5 	bl	8001618 <lps_pressure_correction>
  printf("\r\n\n *** URUCHOMIENIE URZADZENIA *** \r\n\n");
 800184e:	4848      	ldr	r0, [pc, #288]	; (8001970 <main+0x158>)
 8001850:	f006 fc82 	bl	8008158 <puts>
  printf("UART pracuje poprawnie\r\n");
 8001854:	4847      	ldr	r0, [pc, #284]	; (8001974 <main+0x15c>)
 8001856:	f006 fc7f 	bl	8008158 <puts>
  printf("Testowy odczyt temperatury= %.2f\r\n", lps_read_temperature(U_CELSIUS));
 800185a:	ed9f 0a47 	vldr	s0, [pc, #284]	; 8001978 <main+0x160>
 800185e:	f7ff fe97 	bl	8001590 <lps_read_temperature>
 8001862:	ee10 3a10 	vmov	r3, s0
 8001866:	4618      	mov	r0, r3
 8001868:	f7fe fe6e 	bl	8000548 <__aeabi_f2d>
 800186c:	4602      	mov	r2, r0
 800186e:	460b      	mov	r3, r1
 8001870:	4842      	ldr	r0, [pc, #264]	; (800197c <main+0x164>)
 8001872:	f006 fbeb 	bl	800804c <iprintf>
  printf("Testowy odczyt cisnienia= %.2f\r\n", lps_read_relative_pressure());
 8001876:	f7ff ff1f 	bl	80016b8 <lps_read_relative_pressure>
 800187a:	ee10 3a10 	vmov	r3, s0
 800187e:	4618      	mov	r0, r3
 8001880:	f7fe fe62 	bl	8000548 <__aeabi_f2d>
 8001884:	4602      	mov	r2, r0
 8001886:	460b      	mov	r3, r1
 8001888:	483d      	ldr	r0, [pc, #244]	; (8001980 <main+0x168>)
 800188a:	f006 fbdf 	bl	800804c <iprintf>
  printf("Testowy odczyt wysokosci= %.2f\r\n", lps_get_altitude_hyps_f());
 800188e:	f7ff ff67 	bl	8001760 <lps_get_altitude_hyps_f>
 8001892:	ee10 3a10 	vmov	r3, s0
 8001896:	4618      	mov	r0, r3
 8001898:	f7fe fe56 	bl	8000548 <__aeabi_f2d>
 800189c:	4602      	mov	r2, r0
 800189e:	460b      	mov	r3, r1
 80018a0:	4838      	ldr	r0, [pc, #224]	; (8001984 <main+0x16c>)
 80018a2:	f006 fbd3 	bl	800804c <iprintf>
  lcd_init();
 80018a6:	f7ff fd75 	bl	8001394 <lcd_init>
  hagl_init();
 80018aa:	f005 fc0d 	bl	80070c8 <hagl_init>

  lcd_fill_box(0, 0, LCD_WIDTH, LCD_HEIGHT, BLACK);
 80018ae:	2300      	movs	r3, #0
 80018b0:	9300      	str	r3, [sp, #0]
 80018b2:	2380      	movs	r3, #128	; 0x80
 80018b4:	22a0      	movs	r2, #160	; 0xa0
 80018b6:	2100      	movs	r1, #0
 80018b8:	2000      	movs	r0, #0
 80018ba:	f7ff fd44 	bl	8001346 <lcd_fill_box>

  uint8_t tmp_mes[HISTORY_NUMS*HISTORY_ROW_SIZE] =
 80018be:	4b32      	ldr	r3, [pc, #200]	; (8001988 <main+0x170>)
 80018c0:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80018c4:	461d      	mov	r5, r3
 80018c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018ce:	682b      	ldr	r3, [r5, #0]
 80018d0:	461a      	mov	r2, r3
 80018d2:	8022      	strh	r2, [r4, #0]
 80018d4:	3402      	adds	r4, #2
 80018d6:	0c1b      	lsrs	r3, r3, #16
 80018d8:	7023      	strb	r3, [r4, #0]

  uint8_t tmp_mes2[HISTORY_NUMS*HISTORY_ROW_SIZE];

  // zapis do pamieci
  //write_all_history_to_eeprom(tmp_mes);
  HAL_Delay(200);
 80018da:	20c8      	movs	r0, #200	; 0xc8
 80018dc:	f000 fdb6 	bl	800244c <HAL_Delay>

  uint8_t tmp_da[7] = {99,98,97,95,94,93,92};
 80018e0:	4a2a      	ldr	r2, [pc, #168]	; (800198c <main+0x174>)
 80018e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018ea:	6018      	str	r0, [r3, #0]
 80018ec:	3304      	adds	r3, #4
 80018ee:	8019      	strh	r1, [r3, #0]
 80018f0:	3302      	adds	r3, #2
 80018f2:	0c0a      	lsrs	r2, r1, #16
 80018f4:	701a      	strb	r2, [r3, #0]
  uint8_t tmp_dg[7] = {1,2,3,4,5,6,7};
 80018f6:	4a26      	ldr	r2, [pc, #152]	; (8001990 <main+0x178>)
 80018f8:	f107 0320 	add.w	r3, r7, #32
 80018fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001900:	6018      	str	r0, [r3, #0]
 8001902:	3304      	adds	r3, #4
 8001904:	8019      	strh	r1, [r3, #0]
 8001906:	3302      	adds	r3, #2
 8001908:	0c0a      	lsrs	r2, r1, #16
 800190a:	701a      	strb	r2, [r3, #0]
  uint8_t tmp_dr[7] = {200,201,202,203,204,205,206};
 800190c:	4a21      	ldr	r2, [pc, #132]	; (8001994 <main+0x17c>)
 800190e:	f107 0318 	add.w	r3, r7, #24
 8001912:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001916:	6018      	str	r0, [r3, #0]
 8001918:	3304      	adds	r3, #4
 800191a:	8019      	strh	r1, [r3, #0]
 800191c:	3302      	adds	r3, #2
 800191e:	0c0a      	lsrs	r2, r1, #16
 8001920:	701a      	strb	r2, [r3, #0]
  while(HAL_I2C_IsDeviceReady(&hi2c1, 0xa0, 1, HAL_MAX_DELAY) != HAL_OK);


*/

  printf("STOP\r\n");
 8001922:	481d      	ldr	r0, [pc, #116]	; (8001998 <main+0x180>)
 8001924:	f006 fc18 	bl	8008158 <puts>
  save_history_to_eeprom(tmp_mes);
 8001928:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800192c:	4618      	mov	r0, r3
 800192e:	f000 f9c5 	bl	8001cbc <save_history_to_eeprom>
  load_history_from_eeprom(tmp_mes2);
 8001932:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001936:	4618      	mov	r0, r3
 8001938:	f000 f998 	bl	8001c6c <load_history_from_eeprom>
  printHistory(tmp_mes2);
 800193c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001940:	4618      	mov	r0, r3
 8001942:	f000 fa23 	bl	8001d8c <printHistory>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	switch(which_program){
 8001946:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800194a:	2b00      	cmp	r3, #0
 800194c:	d002      	beq.n	8001954 <main+0x13c>
 800194e:	2b01      	cmp	r3, #1
 8001950:	d003      	beq.n	800195a <main+0x142>
 8001952:	e005      	b.n	8001960 <main+0x148>

		case live_mode:
			live_mode_prog();
 8001954:	f000 f878 	bl	8001a48 <live_mode_prog>
			break;
 8001958:	e002      	b.n	8001960 <main+0x148>
		case history_mode:
			history_mode_prog();
 800195a:	f000 f8fd 	bl	8001b58 <history_mode_prog>
			break;
 800195e:	bf00      	nop

	}


	HAL_Delay(500);
 8001960:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001964:	f000 fd72 	bl	800244c <HAL_Delay>

	HAL_IWDG_Refresh(&hiwdg);
 8001968:	480c      	ldr	r0, [pc, #48]	; (800199c <main+0x184>)
 800196a:	f002 f9f1 	bl	8003d50 <HAL_IWDG_Refresh>
	switch(which_program){
 800196e:	e7ea      	b.n	8001946 <main+0x12e>
 8001970:	0800bcd8 	.word	0x0800bcd8
 8001974:	0800bd00 	.word	0x0800bd00
 8001978:	00000000 	.word	0x00000000
 800197c:	0800bd18 	.word	0x0800bd18
 8001980:	0800bd3c 	.word	0x0800bd3c
 8001984:	0800bd60 	.word	0x0800bd60
 8001988:	0800bd8c 	.word	0x0800bd8c
 800198c:	0800bdb0 	.word	0x0800bdb0
 8001990:	0800bdb8 	.word	0x0800bdb8
 8001994:	0800bdc0 	.word	0x0800bdc0
 8001998:	0800bd84 	.word	0x0800bd84
 800199c:	20000254 	.word	0x20000254

080019a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b096      	sub	sp, #88	; 0x58
 80019a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019a6:	f107 0314 	add.w	r3, r7, #20
 80019aa:	2244      	movs	r2, #68	; 0x44
 80019ac:	2100      	movs	r1, #0
 80019ae:	4618      	mov	r0, r3
 80019b0:	f005 fdfa 	bl	80075a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019b4:	463b      	mov	r3, r7
 80019b6:	2200      	movs	r2, #0
 80019b8:	601a      	str	r2, [r3, #0]
 80019ba:	605a      	str	r2, [r3, #4]
 80019bc:	609a      	str	r2, [r3, #8]
 80019be:	60da      	str	r2, [r3, #12]
 80019c0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80019c2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80019c6:	f002 f9e1 	bl	8003d8c <HAL_PWREx_ControlVoltageScaling>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80019d0:	f000 fa2a 	bl	8001e28 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80019d4:	230a      	movs	r3, #10
 80019d6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019dc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019de:	2310      	movs	r3, #16
 80019e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80019e2:	2301      	movs	r3, #1
 80019e4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019e6:	2302      	movs	r3, #2
 80019e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80019ea:	2302      	movs	r3, #2
 80019ec:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80019ee:	2301      	movs	r3, #1
 80019f0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80019f2:	230a      	movs	r3, #10
 80019f4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80019f6:	2307      	movs	r3, #7
 80019f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80019fa:	2302      	movs	r3, #2
 80019fc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80019fe:	2302      	movs	r3, #2
 8001a00:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a02:	f107 0314 	add.w	r3, r7, #20
 8001a06:	4618      	mov	r0, r3
 8001a08:	f002 fa16 	bl	8003e38 <HAL_RCC_OscConfig>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <SystemClock_Config+0x76>
  {
    Error_Handler();
 8001a12:	f000 fa09 	bl	8001e28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a16:	230f      	movs	r3, #15
 8001a18:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a22:	2300      	movs	r3, #0
 8001a24:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a26:	2300      	movs	r3, #0
 8001a28:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001a2a:	463b      	mov	r3, r7
 8001a2c:	2104      	movs	r1, #4
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f002 fdde 	bl	80045f0 <HAL_RCC_ClockConfig>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001a3a:	f000 f9f5 	bl	8001e28 <Error_Handler>
  }
}
 8001a3e:	bf00      	nop
 8001a40:	3758      	adds	r7, #88	; 0x58
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
	...

08001a48 <live_mode_prog>:

/* USER CODE BEGIN 4 */
void live_mode_prog(){
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	f5ad 6d97 	sub.w	sp, sp, #1208	; 0x4b8
 8001a4e:	af02      	add	r7, sp, #8

	// Konwersja tekstow do Wide Chara
	wchar_t text[MAXTXTLEN], text2[MAXTXTLEN], text3[MAXTXTLEN];
	swprintf(text, MAXTXTLEN, L"Temperatura: %.2f C", lps_read_temperature(U_CELSIUS));
 8001a50:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8001b34 <live_mode_prog+0xec>
 8001a54:	f7ff fd9c 	bl	8001590 <lps_read_temperature>
 8001a58:	ee10 3a10 	vmov	r3, s0
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7fe fd73 	bl	8000548 <__aeabi_f2d>
 8001a62:	4602      	mov	r2, r0
 8001a64:	460b      	mov	r3, r1
 8001a66:	f507 7048 	add.w	r0, r7, #800	; 0x320
 8001a6a:	e9cd 2300 	strd	r2, r3, [sp]
 8001a6e:	4a32      	ldr	r2, [pc, #200]	; (8001b38 <live_mode_prog+0xf0>)
 8001a70:	2164      	movs	r1, #100	; 0x64
 8001a72:	f006 fbcd 	bl	8008210 <swprintf>
	swprintf(text2, MAXTXTLEN, L"Cisnienie: %.2f Hpa", lps_read_relative_pressure());
 8001a76:	f7ff fe1f 	bl	80016b8 <lps_read_relative_pressure>
 8001a7a:	ee10 3a10 	vmov	r3, s0
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7fe fd62 	bl	8000548 <__aeabi_f2d>
 8001a84:	4602      	mov	r2, r0
 8001a86:	460b      	mov	r3, r1
 8001a88:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 8001a8c:	e9cd 2300 	strd	r2, r3, [sp]
 8001a90:	4a2a      	ldr	r2, [pc, #168]	; (8001b3c <live_mode_prog+0xf4>)
 8001a92:	2164      	movs	r1, #100	; 0x64
 8001a94:	f006 fbbc 	bl	8008210 <swprintf>
	swprintf(text3, MAXTXTLEN, L"Wysokosc: %.0f m.n.p.m.", lps_get_altitude_hyps_f());
 8001a98:	f7ff fe62 	bl	8001760 <lps_get_altitude_hyps_f>
 8001a9c:	ee10 3a10 	vmov	r3, s0
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7fe fd51 	bl	8000548 <__aeabi_f2d>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	4638      	mov	r0, r7
 8001aac:	e9cd 2300 	strd	r2, r3, [sp]
 8001ab0:	4a23      	ldr	r2, [pc, #140]	; (8001b40 <live_mode_prog+0xf8>)
 8001ab2:	2164      	movs	r1, #100	; 0x64
 8001ab4:	f006 fbac 	bl	8008210 <swprintf>

	hagl_put_text(text, 30, 17, RED, font6x9);
 8001ab8:	f507 7048 	add.w	r0, r7, #800	; 0x320
 8001abc:	4b21      	ldr	r3, [pc, #132]	; (8001b44 <live_mode_prog+0xfc>)
 8001abe:	9300      	str	r3, [sp, #0]
 8001ac0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001ac4:	2211      	movs	r2, #17
 8001ac6:	211e      	movs	r1, #30
 8001ac8:	f005 fa4b 	bl	8006f62 <hagl_put_text>
	hagl_put_text(text2, 30, 41, RED, font6x9);
 8001acc:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 8001ad0:	4b1c      	ldr	r3, [pc, #112]	; (8001b44 <live_mode_prog+0xfc>)
 8001ad2:	9300      	str	r3, [sp, #0]
 8001ad4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001ad8:	2229      	movs	r2, #41	; 0x29
 8001ada:	211e      	movs	r1, #30
 8001adc:	f005 fa41 	bl	8006f62 <hagl_put_text>
	hagl_put_text(text3, 30, 70, RED, font6x9);
 8001ae0:	4638      	mov	r0, r7
 8001ae2:	4b18      	ldr	r3, [pc, #96]	; (8001b44 <live_mode_prog+0xfc>)
 8001ae4:	9300      	str	r3, [sp, #0]
 8001ae6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001aea:	2246      	movs	r2, #70	; 0x46
 8001aec:	211e      	movs	r1, #30
 8001aee:	f005 fa38 	bl	8006f62 <hagl_put_text>

	// nie mam ikon?
	lcd_draw_image_fast(2,5,24,24,temp_icon);
 8001af2:	4b15      	ldr	r3, [pc, #84]	; (8001b48 <live_mode_prog+0x100>)
 8001af4:	9300      	str	r3, [sp, #0]
 8001af6:	2318      	movs	r3, #24
 8001af8:	2218      	movs	r2, #24
 8001afa:	2105      	movs	r1, #5
 8001afc:	2002      	movs	r0, #2
 8001afe:	f7ff fc95 	bl	800142c <lcd_draw_image_fast>
	lcd_draw_image_fast(2,34,24,24,press_icon);
 8001b02:	4b12      	ldr	r3, [pc, #72]	; (8001b4c <live_mode_prog+0x104>)
 8001b04:	9300      	str	r3, [sp, #0]
 8001b06:	2318      	movs	r3, #24
 8001b08:	2218      	movs	r2, #24
 8001b0a:	2122      	movs	r1, #34	; 0x22
 8001b0c:	2002      	movs	r0, #2
 8001b0e:	f7ff fc8d 	bl	800142c <lcd_draw_image_fast>
	lcd_draw_image_fast(2,63,24,24,alt_icon);
 8001b12:	4b0f      	ldr	r3, [pc, #60]	; (8001b50 <live_mode_prog+0x108>)
 8001b14:	9300      	str	r3, [sp, #0]
 8001b16:	2318      	movs	r3, #24
 8001b18:	2218      	movs	r2, #24
 8001b1a:	213f      	movs	r1, #63	; 0x3f
 8001b1c:	2002      	movs	r0, #2
 8001b1e:	f7ff fc85 	bl	800142c <lcd_draw_image_fast>



	printf("Live mode prog\r\n");
 8001b22:	480c      	ldr	r0, [pc, #48]	; (8001b54 <live_mode_prog+0x10c>)
 8001b24:	f006 fb18 	bl	8008158 <puts>
}
 8001b28:	bf00      	nop
 8001b2a:	f507 6796 	add.w	r7, r7, #1200	; 0x4b0
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	00000000 	.word	0x00000000
 8001b38:	0800bdc8 	.word	0x0800bdc8
 8001b3c:	0800be18 	.word	0x0800be18
 8001b40:	0800be68 	.word	0x0800be68
 8001b44:	0800c014 	.word	0x0800c014
 8001b48:	0800efcc 	.word	0x0800efcc
 8001b4c:	0800f44c 	.word	0x0800f44c
 8001b50:	0800f8cc 	.word	0x0800f8cc
 8001b54:	0800bec8 	.word	0x0800bec8

08001b58 <history_mode_prog>:
void history_mode_prog(){
 8001b58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b5a:	b0f1      	sub	sp, #452	; 0x1c4
 8001b5c:	af08      	add	r7, sp, #32

	static bool historyLoaded;
	static uint8_t msrm_history[HISTORY_NUMS*HISTORY_ROW_SIZE];

	if(!historyLoaded){
 8001b5e:	4b3f      	ldr	r3, [pc, #252]	; (8001c5c <history_mode_prog+0x104>)
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	f083 0301 	eor.w	r3, r3, #1
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d009      	beq.n	8001b80 <history_mode_prog+0x28>
		load_history_from_eeprom(msrm_history);
 8001b6c:	483c      	ldr	r0, [pc, #240]	; (8001c60 <history_mode_prog+0x108>)
 8001b6e:	f000 f87d 	bl	8001c6c <load_history_from_eeprom>

		printHistory(msrm_history);
 8001b72:	483b      	ldr	r0, [pc, #236]	; (8001c60 <history_mode_prog+0x108>)
 8001b74:	f000 f90a 	bl	8001d8c <printHistory>
		historyLoaded = true;
 8001b78:	4b38      	ldr	r3, [pc, #224]	; (8001c5c <history_mode_prog+0x104>)
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	701a      	strb	r2, [r3, #0]



	}
    //printf("History mode prog\r\n");
}
 8001b7e:	e068      	b.n	8001c52 <history_mode_prog+0xfa>
	} else if(historyLoaded){
 8001b80:	4b36      	ldr	r3, [pc, #216]	; (8001c5c <history_mode_prog+0x104>)
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d064      	beq.n	8001c52 <history_mode_prog+0xfa>
		for(int i=0; i<HISTORY_NUMS; i++){
 8001b88:	2300      	movs	r3, #0
 8001b8a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001b8e:	e05c      	b.n	8001c4a <history_mode_prog+0xf2>
			int c = HISTORY_ROW_SIZE * i;
 8001b90:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001b94:	4613      	mov	r3, r2
 8001b96:	00db      	lsls	r3, r3, #3
 8001b98:	1a9b      	subs	r3, r3, r2
 8001b9a:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
			swprintf(text, MAXTXTLEN, L"%d/%d/%d: %d,%d C", msrm_history[c],msrm_history[c+1], msrm_history[c+2], msrm_history[c+3],
 8001b9e:	4a30      	ldr	r2, [pc, #192]	; (8001c60 <history_mode_prog+0x108>)
 8001ba0:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8001ba4:	4413      	add	r3, r2
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	469c      	mov	ip, r3
 8001baa:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8001bae:	3301      	adds	r3, #1
 8001bb0:	4a2b      	ldr	r2, [pc, #172]	; (8001c60 <history_mode_prog+0x108>)
 8001bb2:	5cd3      	ldrb	r3, [r2, r3]
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8001bba:	3302      	adds	r3, #2
 8001bbc:	4a28      	ldr	r2, [pc, #160]	; (8001c60 <history_mode_prog+0x108>)
 8001bbe:	5cd3      	ldrb	r3, [r2, r3]
 8001bc0:	461c      	mov	r4, r3
 8001bc2:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8001bc6:	3303      	adds	r3, #3
 8001bc8:	4a25      	ldr	r2, [pc, #148]	; (8001c60 <history_mode_prog+0x108>)
 8001bca:	5cd3      	ldrb	r3, [r2, r3]
 8001bcc:	461d      	mov	r5, r3
																			 msrm_history[c+4], msrm_history[c+5], msrm_history[c+5],
 8001bce:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8001bd2:	3304      	adds	r3, #4
 8001bd4:	4a22      	ldr	r2, [pc, #136]	; (8001c60 <history_mode_prog+0x108>)
 8001bd6:	5cd3      	ldrb	r3, [r2, r3]
			swprintf(text, MAXTXTLEN, L"%d/%d/%d: %d,%d C", msrm_history[c],msrm_history[c+1], msrm_history[c+2], msrm_history[c+3],
 8001bd8:	461e      	mov	r6, r3
																			 msrm_history[c+4], msrm_history[c+5], msrm_history[c+5],
 8001bda:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8001bde:	3305      	adds	r3, #5
 8001be0:	4a1f      	ldr	r2, [pc, #124]	; (8001c60 <history_mode_prog+0x108>)
 8001be2:	5cd3      	ldrb	r3, [r2, r3]
			swprintf(text, MAXTXTLEN, L"%d/%d/%d: %d,%d C", msrm_history[c],msrm_history[c+1], msrm_history[c+2], msrm_history[c+3],
 8001be4:	607b      	str	r3, [r7, #4]
																			 msrm_history[c+4], msrm_history[c+5], msrm_history[c+5],
 8001be6:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8001bea:	3305      	adds	r3, #5
 8001bec:	4a1c      	ldr	r2, [pc, #112]	; (8001c60 <history_mode_prog+0x108>)
 8001bee:	5cd3      	ldrb	r3, [r2, r3]
			swprintf(text, MAXTXTLEN, L"%d/%d/%d: %d,%d C", msrm_history[c],msrm_history[c+1], msrm_history[c+2], msrm_history[c+3],
 8001bf0:	603b      	str	r3, [r7, #0]
																			 msrm_history[c+6]);
 8001bf2:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8001bf6:	3306      	adds	r3, #6
 8001bf8:	4a19      	ldr	r2, [pc, #100]	; (8001c60 <history_mode_prog+0x108>)
 8001bfa:	5cd3      	ldrb	r3, [r2, r3]
			swprintf(text, MAXTXTLEN, L"%d/%d/%d: %d,%d C", msrm_history[c],msrm_history[c+1], msrm_history[c+2], msrm_history[c+3],
 8001bfc:	f107 0008 	add.w	r0, r7, #8
 8001c00:	9306      	str	r3, [sp, #24]
 8001c02:	683a      	ldr	r2, [r7, #0]
 8001c04:	9205      	str	r2, [sp, #20]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	9304      	str	r3, [sp, #16]
 8001c0a:	9603      	str	r6, [sp, #12]
 8001c0c:	9502      	str	r5, [sp, #8]
 8001c0e:	9401      	str	r4, [sp, #4]
 8001c10:	9100      	str	r1, [sp, #0]
 8001c12:	4663      	mov	r3, ip
 8001c14:	4a13      	ldr	r2, [pc, #76]	; (8001c64 <history_mode_prog+0x10c>)
 8001c16:	2164      	movs	r1, #100	; 0x64
 8001c18:	f006 fafa 	bl	8008210 <swprintf>
			hagl_put_text(text, 5, i*20, RED, font6x9);
 8001c1c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	461a      	mov	r2, r3
 8001c24:	0092      	lsls	r2, r2, #2
 8001c26:	4413      	add	r3, r2
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	b21a      	sxth	r2, r3
 8001c2e:	f107 0008 	add.w	r0, r7, #8
 8001c32:	4b0d      	ldr	r3, [pc, #52]	; (8001c68 <history_mode_prog+0x110>)
 8001c34:	9300      	str	r3, [sp, #0]
 8001c36:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001c3a:	2105      	movs	r1, #5
 8001c3c:	f005 f991 	bl	8006f62 <hagl_put_text>
		for(int i=0; i<HISTORY_NUMS; i++){
 8001c40:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8001c44:	3301      	adds	r3, #1
 8001c46:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001c4a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8001c4e:	2b04      	cmp	r3, #4
 8001c50:	dd9e      	ble.n	8001b90 <history_mode_prog+0x38>
}
 8001c52:	bf00      	nop
 8001c54:	f507 77d2 	add.w	r7, r7, #420	; 0x1a4
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c5c:	20000264 	.word	0x20000264
 8001c60:	20000268 	.word	0x20000268
 8001c64:	0800bed8 	.word	0x0800bed8
 8001c68:	0800c014 	.word	0x0800c014

08001c6c <load_history_from_eeprom>:

void load_history_from_eeprom(uint8_t msrm_history[HISTORY_NUMS*EEPROM_PAGE_SIZE]){
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b086      	sub	sp, #24
 8001c70:	af04      	add	r7, sp, #16
 8001c72:	6078      	str	r0, [r7, #4]
	if(HAL_I2C_Mem_Read(&hi2c1, 0xa0, MEM_MSRM_START, I2C_MEMADD_SIZE_8BIT, msrm_history, HISTORY_NUMS*HISTORY_ROW_SIZE, HAL_MAX_DELAY) != HAL_OK)
 8001c74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c78:	9302      	str	r3, [sp, #8]
 8001c7a:	2323      	movs	r3, #35	; 0x23
 8001c7c:	9301      	str	r3, [sp, #4]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	9300      	str	r3, [sp, #0]
 8001c82:	2301      	movs	r3, #1
 8001c84:	2200      	movs	r2, #0
 8001c86:	21a0      	movs	r1, #160	; 0xa0
 8001c88:	480b      	ldr	r0, [pc, #44]	; (8001cb8 <load_history_from_eeprom+0x4c>)
 8001c8a:	f001 fa39 	bl	8003100 <HAL_I2C_Mem_Read>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <load_history_from_eeprom+0x2c>
							 Error_Handler();
 8001c94:	f000 f8c8 	bl	8001e28 <Error_Handler>
	while(HAL_I2C_IsDeviceReady(&hi2c1, 0xa0, 1, HAL_MAX_DELAY) != HAL_OK);
 8001c98:	bf00      	nop
 8001c9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	21a0      	movs	r1, #160	; 0xa0
 8001ca2:	4805      	ldr	r0, [pc, #20]	; (8001cb8 <load_history_from_eeprom+0x4c>)
 8001ca4:	f001 fb46 	bl	8003334 <HAL_I2C_IsDeviceReady>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d1f5      	bne.n	8001c9a <load_history_from_eeprom+0x2e>
}
 8001cae:	bf00      	nop
 8001cb0:	bf00      	nop
 8001cb2:	3708      	adds	r7, #8
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	20000200 	.word	0x20000200

08001cbc <save_history_to_eeprom>:


void save_history_to_eeprom(uint8_t msrm[HISTORY_NUMS*HISTORY_ROW_SIZE]){
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b08a      	sub	sp, #40	; 0x28
 8001cc0:	af04      	add	r7, sp, #16
 8001cc2:	6078      	str	r0, [r7, #4]

	// calculate number of full pages and size of the last page
	int full_pages = HISTORY_ROW_SIZE*HISTORY_NUMS/EEPROM_PAGE_SIZE;
 8001cc4:	2304      	movs	r3, #4
 8001cc6:	613b      	str	r3, [r7, #16]
	int last_page = HISTORY_ROW_SIZE*HISTORY_NUMS - full_pages*EEPROM_PAGE_SIZE;
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	00db      	lsls	r3, r3, #3
 8001ccc:	f1c3 0323 	rsb	r3, r3, #35	; 0x23
 8001cd0:	60fb      	str	r3, [r7, #12]

	// send full pages
	for(int i=0; i<full_pages; i++){
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	617b      	str	r3, [r7, #20]
 8001cd6:	e026      	b.n	8001d26 <save_history_to_eeprom+0x6a>

		if(HAL_I2C_Mem_Write(&hi2c1, 0xa0, MEM_MSRM_START+i*EEPROM_PAGE_SIZE, I2C_MEMADD_SIZE_8BIT, msrm+i*EEPROM_PAGE_SIZE, EEPROM_PAGE_SIZE, HAL_MAX_DELAY) != HAL_OK)
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	b29b      	uxth	r3, r3
 8001cdc:	00db      	lsls	r3, r3, #3
 8001cde:	b29a      	uxth	r2, r3
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	00db      	lsls	r3, r3, #3
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	440b      	add	r3, r1
 8001cea:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001cee:	9102      	str	r1, [sp, #8]
 8001cf0:	2108      	movs	r1, #8
 8001cf2:	9101      	str	r1, [sp, #4]
 8001cf4:	9300      	str	r3, [sp, #0]
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	21a0      	movs	r1, #160	; 0xa0
 8001cfa:	4823      	ldr	r0, [pc, #140]	; (8001d88 <save_history_to_eeprom+0xcc>)
 8001cfc:	f001 f8ec 	bl	8002ed8 <HAL_I2C_Mem_Write>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <save_history_to_eeprom+0x4e>
			Error_Handler();
 8001d06:	f000 f88f 	bl	8001e28 <Error_Handler>
		while(HAL_I2C_IsDeviceReady(&hi2c1, 0xa0, 1, HAL_MAX_DELAY) != HAL_OK);
 8001d0a:	bf00      	nop
 8001d0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d10:	2201      	movs	r2, #1
 8001d12:	21a0      	movs	r1, #160	; 0xa0
 8001d14:	481c      	ldr	r0, [pc, #112]	; (8001d88 <save_history_to_eeprom+0xcc>)
 8001d16:	f001 fb0d 	bl	8003334 <HAL_I2C_IsDeviceReady>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d1f5      	bne.n	8001d0c <save_history_to_eeprom+0x50>
	for(int i=0; i<full_pages; i++){
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	3301      	adds	r3, #1
 8001d24:	617b      	str	r3, [r7, #20]
 8001d26:	697a      	ldr	r2, [r7, #20]
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	dbd4      	blt.n	8001cd8 <save_history_to_eeprom+0x1c>

	}

	// send remaining page (not full)
	if(last_page >0){
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	dd25      	ble.n	8001d80 <save_history_to_eeprom+0xc4>
		if(HAL_I2C_Mem_Write(&hi2c1, 0xa0, MEM_MSRM_START+full_pages*EEPROM_PAGE_SIZE, I2C_MEMADD_SIZE_8BIT, msrm+full_pages*EEPROM_PAGE_SIZE, last_page, HAL_MAX_DELAY) != HAL_OK)
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	00db      	lsls	r3, r3, #3
 8001d3a:	b299      	uxth	r1, r3
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	00db      	lsls	r3, r3, #3
 8001d40:	461a      	mov	r2, r3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4413      	add	r3, r2
 8001d46:	68fa      	ldr	r2, [r7, #12]
 8001d48:	b292      	uxth	r2, r2
 8001d4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d4e:	9002      	str	r0, [sp, #8]
 8001d50:	9201      	str	r2, [sp, #4]
 8001d52:	9300      	str	r3, [sp, #0]
 8001d54:	2301      	movs	r3, #1
 8001d56:	460a      	mov	r2, r1
 8001d58:	21a0      	movs	r1, #160	; 0xa0
 8001d5a:	480b      	ldr	r0, [pc, #44]	; (8001d88 <save_history_to_eeprom+0xcc>)
 8001d5c:	f001 f8bc 	bl	8002ed8 <HAL_I2C_Mem_Write>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <save_history_to_eeprom+0xae>
			Error_Handler();
 8001d66:	f000 f85f 	bl	8001e28 <Error_Handler>
		while(HAL_I2C_IsDeviceReady(&hi2c1, 0xa0, 1, HAL_MAX_DELAY) != HAL_OK);
 8001d6a:	bf00      	nop
 8001d6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d70:	2201      	movs	r2, #1
 8001d72:	21a0      	movs	r1, #160	; 0xa0
 8001d74:	4804      	ldr	r0, [pc, #16]	; (8001d88 <save_history_to_eeprom+0xcc>)
 8001d76:	f001 fadd 	bl	8003334 <HAL_I2C_IsDeviceReady>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d1f5      	bne.n	8001d6c <save_history_to_eeprom+0xb0>
	}

}
 8001d80:	bf00      	nop
 8001d82:	3718      	adds	r7, #24
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	20000200 	.word	0x20000200

08001d8c <printHistory>:


void printHistory(uint8_t msrm_history[HISTORY_NUMS*EEPROM_PAGE_SIZE]){
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
	for(int i=0; i<HISTORY_NUMS; i++){
 8001d94:	2300      	movs	r3, #0
 8001d96:	60fb      	str	r3, [r7, #12]
 8001d98:	e019      	b.n	8001dce <printHistory+0x42>
		for(int j=0; j<HISTORY_ROW_SIZE; j++){
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	60bb      	str	r3, [r7, #8]
 8001d9e:	e00d      	b.n	8001dbc <printHistory+0x30>
			printf("%d ", msrm_history[i+j]);
 8001da0:	68fa      	ldr	r2, [r7, #12]
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	4413      	add	r3, r2
 8001da6:	461a      	mov	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	4413      	add	r3, r2
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	4619      	mov	r1, r3
 8001db0:	480b      	ldr	r0, [pc, #44]	; (8001de0 <printHistory+0x54>)
 8001db2:	f006 f94b 	bl	800804c <iprintf>
		for(int j=0; j<HISTORY_ROW_SIZE; j++){
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	3301      	adds	r3, #1
 8001dba:	60bb      	str	r3, [r7, #8]
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	2b06      	cmp	r3, #6
 8001dc0:	ddee      	ble.n	8001da0 <printHistory+0x14>
		}
		printf("\r\n");
 8001dc2:	4808      	ldr	r0, [pc, #32]	; (8001de4 <printHistory+0x58>)
 8001dc4:	f006 f9c8 	bl	8008158 <puts>
	for(int i=0; i<HISTORY_NUMS; i++){
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	3301      	adds	r3, #1
 8001dcc:	60fb      	str	r3, [r7, #12]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2b04      	cmp	r3, #4
 8001dd2:	dde2      	ble.n	8001d9a <printHistory+0xe>
	}
}
 8001dd4:	bf00      	nop
 8001dd6:	bf00      	nop
 8001dd8:	3710      	adds	r7, #16
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	0800bf20 	.word	0x0800bf20
 8001de4:	0800bf24 	.word	0x0800bf24

08001de8 <checkFlags>:

void checkFlags(){
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
	if(__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST)){
 8001dec:	4b0b      	ldr	r3, [pc, #44]	; (8001e1c <checkFlags+0x34>)
 8001dee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001df2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d00b      	beq.n	8001e12 <checkFlags+0x2a>
			printf("System zostal zresetowany przez Watchdoga\r\n");
 8001dfa:	4809      	ldr	r0, [pc, #36]	; (8001e20 <checkFlags+0x38>)
 8001dfc:	f006 f9ac 	bl	8008158 <puts>
			__HAL_RCC_CLEAR_RESET_FLAGS();
 8001e00:	4b06      	ldr	r3, [pc, #24]	; (8001e1c <checkFlags+0x34>)
 8001e02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e06:	4a05      	ldr	r2, [pc, #20]	; (8001e1c <checkFlags+0x34>)
 8001e08:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e0c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
		} else{
			printf("System zostal uruchomiony poprawnie\r\n");
		}
}
 8001e10:	e002      	b.n	8001e18 <checkFlags+0x30>
			printf("System zostal uruchomiony poprawnie\r\n");
 8001e12:	4804      	ldr	r0, [pc, #16]	; (8001e24 <checkFlags+0x3c>)
 8001e14:	f006 f9a0 	bl	8008158 <puts>
}
 8001e18:	bf00      	nop
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	40021000 	.word	0x40021000
 8001e20:	0800bf28 	.word	0x0800bf28
 8001e24:	0800bf54 	.word	0x0800bf54

08001e28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e2c:	b672      	cpsid	i
}
 8001e2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e30:	e7fe      	b.n	8001e30 <Error_Handler+0x8>
	...

08001e34 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001e38:	4b1b      	ldr	r3, [pc, #108]	; (8001ea8 <MX_SPI2_Init+0x74>)
 8001e3a:	4a1c      	ldr	r2, [pc, #112]	; (8001eac <MX_SPI2_Init+0x78>)
 8001e3c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001e3e:	4b1a      	ldr	r3, [pc, #104]	; (8001ea8 <MX_SPI2_Init+0x74>)
 8001e40:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e44:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001e46:	4b18      	ldr	r3, [pc, #96]	; (8001ea8 <MX_SPI2_Init+0x74>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e4c:	4b16      	ldr	r3, [pc, #88]	; (8001ea8 <MX_SPI2_Init+0x74>)
 8001e4e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001e52:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e54:	4b14      	ldr	r3, [pc, #80]	; (8001ea8 <MX_SPI2_Init+0x74>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e5a:	4b13      	ldr	r3, [pc, #76]	; (8001ea8 <MX_SPI2_Init+0x74>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001e60:	4b11      	ldr	r3, [pc, #68]	; (8001ea8 <MX_SPI2_Init+0x74>)
 8001e62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e66:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001e68:	4b0f      	ldr	r3, [pc, #60]	; (8001ea8 <MX_SPI2_Init+0x74>)
 8001e6a:	2210      	movs	r2, #16
 8001e6c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ea8 <MX_SPI2_Init+0x74>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e74:	4b0c      	ldr	r3, [pc, #48]	; (8001ea8 <MX_SPI2_Init+0x74>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e7a:	4b0b      	ldr	r3, [pc, #44]	; (8001ea8 <MX_SPI2_Init+0x74>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001e80:	4b09      	ldr	r3, [pc, #36]	; (8001ea8 <MX_SPI2_Init+0x74>)
 8001e82:	2207      	movs	r2, #7
 8001e84:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001e86:	4b08      	ldr	r3, [pc, #32]	; (8001ea8 <MX_SPI2_Init+0x74>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001e8c:	4b06      	ldr	r3, [pc, #24]	; (8001ea8 <MX_SPI2_Init+0x74>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001e92:	4805      	ldr	r0, [pc, #20]	; (8001ea8 <MX_SPI2_Init+0x74>)
 8001e94:	f003 fa8c 	bl	80053b0 <HAL_SPI_Init>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001e9e:	f7ff ffc3 	bl	8001e28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001ea2:	bf00      	nop
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	2000028c 	.word	0x2000028c
 8001eac:	40003800 	.word	0x40003800

08001eb0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b08a      	sub	sp, #40	; 0x28
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb8:	f107 0314 	add.w	r3, r7, #20
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]
 8001ec0:	605a      	str	r2, [r3, #4]
 8001ec2:	609a      	str	r2, [r3, #8]
 8001ec4:	60da      	str	r2, [r3, #12]
 8001ec6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a25      	ldr	r2, [pc, #148]	; (8001f64 <HAL_SPI_MspInit+0xb4>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d144      	bne.n	8001f5c <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001ed2:	4b25      	ldr	r3, [pc, #148]	; (8001f68 <HAL_SPI_MspInit+0xb8>)
 8001ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed6:	4a24      	ldr	r2, [pc, #144]	; (8001f68 <HAL_SPI_MspInit+0xb8>)
 8001ed8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001edc:	6593      	str	r3, [r2, #88]	; 0x58
 8001ede:	4b22      	ldr	r3, [pc, #136]	; (8001f68 <HAL_SPI_MspInit+0xb8>)
 8001ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ee6:	613b      	str	r3, [r7, #16]
 8001ee8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eea:	4b1f      	ldr	r3, [pc, #124]	; (8001f68 <HAL_SPI_MspInit+0xb8>)
 8001eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eee:	4a1e      	ldr	r2, [pc, #120]	; (8001f68 <HAL_SPI_MspInit+0xb8>)
 8001ef0:	f043 0304 	orr.w	r3, r3, #4
 8001ef4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ef6:	4b1c      	ldr	r3, [pc, #112]	; (8001f68 <HAL_SPI_MspInit+0xb8>)
 8001ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001efa:	f003 0304 	and.w	r3, r3, #4
 8001efe:	60fb      	str	r3, [r7, #12]
 8001f00:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f02:	4b19      	ldr	r3, [pc, #100]	; (8001f68 <HAL_SPI_MspInit+0xb8>)
 8001f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f06:	4a18      	ldr	r2, [pc, #96]	; (8001f68 <HAL_SPI_MspInit+0xb8>)
 8001f08:	f043 0302 	orr.w	r3, r3, #2
 8001f0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f0e:	4b16      	ldr	r3, [pc, #88]	; (8001f68 <HAL_SPI_MspInit+0xb8>)
 8001f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f12:	f003 0302 	and.w	r3, r3, #2
 8001f16:	60bb      	str	r3, [r7, #8]
 8001f18:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001f1a:	2308      	movs	r3, #8
 8001f1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f1e:	2302      	movs	r3, #2
 8001f20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f22:	2300      	movs	r3, #0
 8001f24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f26:	2303      	movs	r3, #3
 8001f28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f2a:	2305      	movs	r3, #5
 8001f2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f2e:	f107 0314 	add.w	r3, r7, #20
 8001f32:	4619      	mov	r1, r3
 8001f34:	480d      	ldr	r0, [pc, #52]	; (8001f6c <HAL_SPI_MspInit+0xbc>)
 8001f36:	f000 fb93 	bl	8002660 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001f3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f40:	2302      	movs	r3, #2
 8001f42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f44:	2300      	movs	r3, #0
 8001f46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f4c:	2305      	movs	r3, #5
 8001f4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f50:	f107 0314 	add.w	r3, r7, #20
 8001f54:	4619      	mov	r1, r3
 8001f56:	4806      	ldr	r0, [pc, #24]	; (8001f70 <HAL_SPI_MspInit+0xc0>)
 8001f58:	f000 fb82 	bl	8002660 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001f5c:	bf00      	nop
 8001f5e:	3728      	adds	r7, #40	; 0x28
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	40003800 	.word	0x40003800
 8001f68:	40021000 	.word	0x40021000
 8001f6c:	48000800 	.word	0x48000800
 8001f70:	48000400 	.word	0x48000400

08001f74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f7a:	4b0f      	ldr	r3, [pc, #60]	; (8001fb8 <HAL_MspInit+0x44>)
 8001f7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f7e:	4a0e      	ldr	r2, [pc, #56]	; (8001fb8 <HAL_MspInit+0x44>)
 8001f80:	f043 0301 	orr.w	r3, r3, #1
 8001f84:	6613      	str	r3, [r2, #96]	; 0x60
 8001f86:	4b0c      	ldr	r3, [pc, #48]	; (8001fb8 <HAL_MspInit+0x44>)
 8001f88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	607b      	str	r3, [r7, #4]
 8001f90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f92:	4b09      	ldr	r3, [pc, #36]	; (8001fb8 <HAL_MspInit+0x44>)
 8001f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f96:	4a08      	ldr	r2, [pc, #32]	; (8001fb8 <HAL_MspInit+0x44>)
 8001f98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f9c:	6593      	str	r3, [r2, #88]	; 0x58
 8001f9e:	4b06      	ldr	r3, [pc, #24]	; (8001fb8 <HAL_MspInit+0x44>)
 8001fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fa6:	603b      	str	r3, [r7, #0]
 8001fa8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001faa:	bf00      	nop
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	40021000 	.word	0x40021000

08001fbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fc0:	e7fe      	b.n	8001fc0 <NMI_Handler+0x4>

08001fc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fc6:	e7fe      	b.n	8001fc6 <HardFault_Handler+0x4>

08001fc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fcc:	e7fe      	b.n	8001fcc <MemManage_Handler+0x4>

08001fce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fce:	b480      	push	{r7}
 8001fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fd2:	e7fe      	b.n	8001fd2 <BusFault_Handler+0x4>

08001fd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fd8:	e7fe      	b.n	8001fd8 <UsageFault_Handler+0x4>

08001fda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fda:	b480      	push	{r7}
 8001fdc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fde:	bf00      	nop
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fec:	bf00      	nop
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr

08001ff6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ff6:	b480      	push	{r7}
 8001ff8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ffa:	bf00      	nop
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002008:	f000 fa00 	bl	800240c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800200c:	bf00      	nop
 800200e:	bd80      	pop	{r7, pc}

08002010 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
	return 1;
 8002014:	2301      	movs	r3, #1
}
 8002016:	4618      	mov	r0, r3
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <_kill>:

int _kill(int pid, int sig)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800202a:	f005 f855 	bl	80070d8 <__errno>
 800202e:	4603      	mov	r3, r0
 8002030:	2216      	movs	r2, #22
 8002032:	601a      	str	r2, [r3, #0]
	return -1;
 8002034:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002038:	4618      	mov	r0, r3
 800203a:	3708      	adds	r7, #8
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}

08002040 <_exit>:

void _exit (int status)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002048:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f7ff ffe7 	bl	8002020 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002052:	e7fe      	b.n	8002052 <_exit+0x12>

08002054 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b086      	sub	sp, #24
 8002058:	af00      	add	r7, sp, #0
 800205a:	60f8      	str	r0, [r7, #12]
 800205c:	60b9      	str	r1, [r7, #8]
 800205e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002060:	2300      	movs	r3, #0
 8002062:	617b      	str	r3, [r7, #20]
 8002064:	e00a      	b.n	800207c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002066:	f3af 8000 	nop.w
 800206a:	4601      	mov	r1, r0
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	1c5a      	adds	r2, r3, #1
 8002070:	60ba      	str	r2, [r7, #8]
 8002072:	b2ca      	uxtb	r2, r1
 8002074:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	3301      	adds	r3, #1
 800207a:	617b      	str	r3, [r7, #20]
 800207c:	697a      	ldr	r2, [r7, #20]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	429a      	cmp	r2, r3
 8002082:	dbf0      	blt.n	8002066 <_read+0x12>
	}

return len;
 8002084:	687b      	ldr	r3, [r7, #4]
}
 8002086:	4618      	mov	r0, r3
 8002088:	3718      	adds	r7, #24
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}

0800208e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800208e:	b580      	push	{r7, lr}
 8002090:	b086      	sub	sp, #24
 8002092:	af00      	add	r7, sp, #0
 8002094:	60f8      	str	r0, [r7, #12]
 8002096:	60b9      	str	r1, [r7, #8]
 8002098:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800209a:	2300      	movs	r3, #0
 800209c:	617b      	str	r3, [r7, #20]
 800209e:	e009      	b.n	80020b4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	1c5a      	adds	r2, r3, #1
 80020a4:	60ba      	str	r2, [r7, #8]
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	4618      	mov	r0, r3
 80020aa:	f000 f917 	bl	80022dc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	3301      	adds	r3, #1
 80020b2:	617b      	str	r3, [r7, #20]
 80020b4:	697a      	ldr	r2, [r7, #20]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	dbf1      	blt.n	80020a0 <_write+0x12>
	}
	return len;
 80020bc:	687b      	ldr	r3, [r7, #4]
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3718      	adds	r7, #24
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <_close>:

int _close(int file)
{
 80020c6:	b480      	push	{r7}
 80020c8:	b083      	sub	sp, #12
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
	return -1;
 80020ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr

080020de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020de:	b480      	push	{r7}
 80020e0:	b083      	sub	sp, #12
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
 80020e6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020ee:	605a      	str	r2, [r3, #4]
	return 0;
 80020f0:	2300      	movs	r3, #0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr

080020fe <_isatty>:

int _isatty(int file)
{
 80020fe:	b480      	push	{r7}
 8002100:	b083      	sub	sp, #12
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
	return 1;
 8002106:	2301      	movs	r3, #1
}
 8002108:	4618      	mov	r0, r3
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002114:	b480      	push	{r7}
 8002116:	b085      	sub	sp, #20
 8002118:	af00      	add	r7, sp, #0
 800211a:	60f8      	str	r0, [r7, #12]
 800211c:	60b9      	str	r1, [r7, #8]
 800211e:	607a      	str	r2, [r7, #4]
	return 0;
 8002120:	2300      	movs	r3, #0
}
 8002122:	4618      	mov	r0, r3
 8002124:	3714      	adds	r7, #20
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
	...

08002130 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b086      	sub	sp, #24
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002138:	4a14      	ldr	r2, [pc, #80]	; (800218c <_sbrk+0x5c>)
 800213a:	4b15      	ldr	r3, [pc, #84]	; (8002190 <_sbrk+0x60>)
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002144:	4b13      	ldr	r3, [pc, #76]	; (8002194 <_sbrk+0x64>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d102      	bne.n	8002152 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800214c:	4b11      	ldr	r3, [pc, #68]	; (8002194 <_sbrk+0x64>)
 800214e:	4a12      	ldr	r2, [pc, #72]	; (8002198 <_sbrk+0x68>)
 8002150:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002152:	4b10      	ldr	r3, [pc, #64]	; (8002194 <_sbrk+0x64>)
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4413      	add	r3, r2
 800215a:	693a      	ldr	r2, [r7, #16]
 800215c:	429a      	cmp	r2, r3
 800215e:	d207      	bcs.n	8002170 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002160:	f004 ffba 	bl	80070d8 <__errno>
 8002164:	4603      	mov	r3, r0
 8002166:	220c      	movs	r2, #12
 8002168:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800216a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800216e:	e009      	b.n	8002184 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002170:	4b08      	ldr	r3, [pc, #32]	; (8002194 <_sbrk+0x64>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002176:	4b07      	ldr	r3, [pc, #28]	; (8002194 <_sbrk+0x64>)
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4413      	add	r3, r2
 800217e:	4a05      	ldr	r2, [pc, #20]	; (8002194 <_sbrk+0x64>)
 8002180:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002182:	68fb      	ldr	r3, [r7, #12]
}
 8002184:	4618      	mov	r0, r3
 8002186:	3718      	adds	r7, #24
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	20018000 	.word	0x20018000
 8002190:	00000400 	.word	0x00000400
 8002194:	200002f0 	.word	0x200002f0
 8002198:	20000390 	.word	0x20000390

0800219c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80021a0:	4b06      	ldr	r3, [pc, #24]	; (80021bc <SystemInit+0x20>)
 80021a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021a6:	4a05      	ldr	r2, [pc, #20]	; (80021bc <SystemInit+0x20>)
 80021a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80021b0:	bf00      	nop
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	e000ed00 	.word	0xe000ed00

080021c0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80021c4:	4b14      	ldr	r3, [pc, #80]	; (8002218 <MX_USART1_UART_Init+0x58>)
 80021c6:	4a15      	ldr	r2, [pc, #84]	; (800221c <MX_USART1_UART_Init+0x5c>)
 80021c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80021ca:	4b13      	ldr	r3, [pc, #76]	; (8002218 <MX_USART1_UART_Init+0x58>)
 80021cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80021d2:	4b11      	ldr	r3, [pc, #68]	; (8002218 <MX_USART1_UART_Init+0x58>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80021d8:	4b0f      	ldr	r3, [pc, #60]	; (8002218 <MX_USART1_UART_Init+0x58>)
 80021da:	2200      	movs	r2, #0
 80021dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80021de:	4b0e      	ldr	r3, [pc, #56]	; (8002218 <MX_USART1_UART_Init+0x58>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80021e4:	4b0c      	ldr	r3, [pc, #48]	; (8002218 <MX_USART1_UART_Init+0x58>)
 80021e6:	220c      	movs	r2, #12
 80021e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021ea:	4b0b      	ldr	r3, [pc, #44]	; (8002218 <MX_USART1_UART_Init+0x58>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80021f0:	4b09      	ldr	r3, [pc, #36]	; (8002218 <MX_USART1_UART_Init+0x58>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021f6:	4b08      	ldr	r3, [pc, #32]	; (8002218 <MX_USART1_UART_Init+0x58>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021fc:	4b06      	ldr	r3, [pc, #24]	; (8002218 <MX_USART1_UART_Init+0x58>)
 80021fe:	2200      	movs	r2, #0
 8002200:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002202:	4805      	ldr	r0, [pc, #20]	; (8002218 <MX_USART1_UART_Init+0x58>)
 8002204:	f003 fc4a 	bl	8005a9c <HAL_UART_Init>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800220e:	f7ff fe0b 	bl	8001e28 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002212:	bf00      	nop
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	200002f4 	.word	0x200002f4
 800221c:	40013800 	.word	0x40013800

08002220 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b0ac      	sub	sp, #176	; 0xb0
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002228:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800222c:	2200      	movs	r2, #0
 800222e:	601a      	str	r2, [r3, #0]
 8002230:	605a      	str	r2, [r3, #4]
 8002232:	609a      	str	r2, [r3, #8]
 8002234:	60da      	str	r2, [r3, #12]
 8002236:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002238:	f107 0314 	add.w	r3, r7, #20
 800223c:	2288      	movs	r2, #136	; 0x88
 800223e:	2100      	movs	r1, #0
 8002240:	4618      	mov	r0, r3
 8002242:	f005 f9b1 	bl	80075a8 <memset>
  if(uartHandle->Instance==USART1)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a22      	ldr	r2, [pc, #136]	; (80022d4 <HAL_UART_MspInit+0xb4>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d13c      	bne.n	80022ca <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002250:	2301      	movs	r3, #1
 8002252:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002254:	2300      	movs	r3, #0
 8002256:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002258:	f107 0314 	add.w	r3, r7, #20
 800225c:	4618      	mov	r0, r3
 800225e:	f002 fbeb 	bl	8004a38 <HAL_RCCEx_PeriphCLKConfig>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d001      	beq.n	800226c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002268:	f7ff fdde 	bl	8001e28 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800226c:	4b1a      	ldr	r3, [pc, #104]	; (80022d8 <HAL_UART_MspInit+0xb8>)
 800226e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002270:	4a19      	ldr	r2, [pc, #100]	; (80022d8 <HAL_UART_MspInit+0xb8>)
 8002272:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002276:	6613      	str	r3, [r2, #96]	; 0x60
 8002278:	4b17      	ldr	r3, [pc, #92]	; (80022d8 <HAL_UART_MspInit+0xb8>)
 800227a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800227c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002280:	613b      	str	r3, [r7, #16]
 8002282:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002284:	4b14      	ldr	r3, [pc, #80]	; (80022d8 <HAL_UART_MspInit+0xb8>)
 8002286:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002288:	4a13      	ldr	r2, [pc, #76]	; (80022d8 <HAL_UART_MspInit+0xb8>)
 800228a:	f043 0301 	orr.w	r3, r3, #1
 800228e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002290:	4b11      	ldr	r3, [pc, #68]	; (80022d8 <HAL_UART_MspInit+0xb8>)
 8002292:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002294:	f003 0301 	and.w	r3, r3, #1
 8002298:	60fb      	str	r3, [r7, #12]
 800229a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800229c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80022a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a4:	2302      	movs	r3, #2
 80022a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022aa:	2300      	movs	r3, #0
 80022ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022b0:	2303      	movs	r3, #3
 80022b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80022b6:	2307      	movs	r3, #7
 80022b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022bc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80022c0:	4619      	mov	r1, r3
 80022c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022c6:	f000 f9cb 	bl	8002660 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80022ca:	bf00      	nop
 80022cc:	37b0      	adds	r7, #176	; 0xb0
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	40013800 	.word	0x40013800
 80022d8:	40021000 	.word	0x40021000

080022dc <__io_putchar>:
  }
}

/* USER CODE BEGIN 1 */
int __io_putchar(int ch)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]

  HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80022e4:	1d39      	adds	r1, r7, #4
 80022e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022ea:	2201      	movs	r2, #1
 80022ec:	4803      	ldr	r0, [pc, #12]	; (80022fc <__io_putchar+0x20>)
 80022ee:	f003 fc23 	bl	8005b38 <HAL_UART_Transmit>

  return 1;
 80022f2:	2301      	movs	r3, #1
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3708      	adds	r7, #8
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	200002f4 	.word	0x200002f4

08002300 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002300:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002338 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002304:	f7ff ff4a 	bl	800219c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002308:	480c      	ldr	r0, [pc, #48]	; (800233c <LoopForever+0x6>)
  ldr r1, =_edata
 800230a:	490d      	ldr	r1, [pc, #52]	; (8002340 <LoopForever+0xa>)
  ldr r2, =_sidata
 800230c:	4a0d      	ldr	r2, [pc, #52]	; (8002344 <LoopForever+0xe>)
  movs r3, #0
 800230e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002310:	e002      	b.n	8002318 <LoopCopyDataInit>

08002312 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002312:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002314:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002316:	3304      	adds	r3, #4

08002318 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002318:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800231a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800231c:	d3f9      	bcc.n	8002312 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800231e:	4a0a      	ldr	r2, [pc, #40]	; (8002348 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002320:	4c0a      	ldr	r4, [pc, #40]	; (800234c <LoopForever+0x16>)
  movs r3, #0
 8002322:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002324:	e001      	b.n	800232a <LoopFillZerobss>

08002326 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002326:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002328:	3204      	adds	r2, #4

0800232a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800232a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800232c:	d3fb      	bcc.n	8002326 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800232e:	f005 f891 	bl	8007454 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002332:	f7ff fa71 	bl	8001818 <main>

08002336 <LoopForever>:

LoopForever:
    b LoopForever
 8002336:	e7fe      	b.n	8002336 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002338:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800233c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002340:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002344:	08010390 	.word	0x08010390
  ldr r2, =_sbss
 8002348:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 800234c:	2000038c 	.word	0x2000038c

08002350 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002350:	e7fe      	b.n	8002350 <ADC1_2_IRQHandler>
	...

08002354 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800235a:	2300      	movs	r3, #0
 800235c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800235e:	4b0c      	ldr	r3, [pc, #48]	; (8002390 <HAL_Init+0x3c>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a0b      	ldr	r2, [pc, #44]	; (8002390 <HAL_Init+0x3c>)
 8002364:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002368:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800236a:	2003      	movs	r0, #3
 800236c:	f000 f944 	bl	80025f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002370:	2000      	movs	r0, #0
 8002372:	f000 f80f 	bl	8002394 <HAL_InitTick>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d002      	beq.n	8002382 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	71fb      	strb	r3, [r7, #7]
 8002380:	e001      	b.n	8002386 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002382:	f7ff fdf7 	bl	8001f74 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002386:	79fb      	ldrb	r3, [r7, #7]
}
 8002388:	4618      	mov	r0, r3
 800238a:	3708      	adds	r7, #8
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	40022000 	.word	0x40022000

08002394 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800239c:	2300      	movs	r3, #0
 800239e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80023a0:	4b17      	ldr	r3, [pc, #92]	; (8002400 <HAL_InitTick+0x6c>)
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d023      	beq.n	80023f0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80023a8:	4b16      	ldr	r3, [pc, #88]	; (8002404 <HAL_InitTick+0x70>)
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	4b14      	ldr	r3, [pc, #80]	; (8002400 <HAL_InitTick+0x6c>)
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	4619      	mov	r1, r3
 80023b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80023ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80023be:	4618      	mov	r0, r3
 80023c0:	f000 f941 	bl	8002646 <HAL_SYSTICK_Config>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d10f      	bne.n	80023ea <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2b0f      	cmp	r3, #15
 80023ce:	d809      	bhi.n	80023e4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023d0:	2200      	movs	r2, #0
 80023d2:	6879      	ldr	r1, [r7, #4]
 80023d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80023d8:	f000 f919 	bl	800260e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80023dc:	4a0a      	ldr	r2, [pc, #40]	; (8002408 <HAL_InitTick+0x74>)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6013      	str	r3, [r2, #0]
 80023e2:	e007      	b.n	80023f4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	73fb      	strb	r3, [r7, #15]
 80023e8:	e004      	b.n	80023f4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	73fb      	strb	r3, [r7, #15]
 80023ee:	e001      	b.n	80023f4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80023f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3710      	adds	r7, #16
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	20000008 	.word	0x20000008
 8002404:	20000000 	.word	0x20000000
 8002408:	20000004 	.word	0x20000004

0800240c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002410:	4b06      	ldr	r3, [pc, #24]	; (800242c <HAL_IncTick+0x20>)
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	461a      	mov	r2, r3
 8002416:	4b06      	ldr	r3, [pc, #24]	; (8002430 <HAL_IncTick+0x24>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4413      	add	r3, r2
 800241c:	4a04      	ldr	r2, [pc, #16]	; (8002430 <HAL_IncTick+0x24>)
 800241e:	6013      	str	r3, [r2, #0]
}
 8002420:	bf00      	nop
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	20000008 	.word	0x20000008
 8002430:	20000378 	.word	0x20000378

08002434 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  return uwTick;
 8002438:	4b03      	ldr	r3, [pc, #12]	; (8002448 <HAL_GetTick+0x14>)
 800243a:	681b      	ldr	r3, [r3, #0]
}
 800243c:	4618      	mov	r0, r3
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	20000378 	.word	0x20000378

0800244c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002454:	f7ff ffee 	bl	8002434 <HAL_GetTick>
 8002458:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002464:	d005      	beq.n	8002472 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002466:	4b0a      	ldr	r3, [pc, #40]	; (8002490 <HAL_Delay+0x44>)
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	461a      	mov	r2, r3
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	4413      	add	r3, r2
 8002470:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002472:	bf00      	nop
 8002474:	f7ff ffde 	bl	8002434 <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	68fa      	ldr	r2, [r7, #12]
 8002480:	429a      	cmp	r2, r3
 8002482:	d8f7      	bhi.n	8002474 <HAL_Delay+0x28>
  {
  }
}
 8002484:	bf00      	nop
 8002486:	bf00      	nop
 8002488:	3710      	adds	r7, #16
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	20000008 	.word	0x20000008

08002494 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002494:	b480      	push	{r7}
 8002496:	b085      	sub	sp, #20
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f003 0307 	and.w	r3, r3, #7
 80024a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024a4:	4b0c      	ldr	r3, [pc, #48]	; (80024d8 <__NVIC_SetPriorityGrouping+0x44>)
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024aa:	68ba      	ldr	r2, [r7, #8]
 80024ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024b0:	4013      	ands	r3, r2
 80024b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024c6:	4a04      	ldr	r2, [pc, #16]	; (80024d8 <__NVIC_SetPriorityGrouping+0x44>)
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	60d3      	str	r3, [r2, #12]
}
 80024cc:	bf00      	nop
 80024ce:	3714      	adds	r7, #20
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr
 80024d8:	e000ed00 	.word	0xe000ed00

080024dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024e0:	4b04      	ldr	r3, [pc, #16]	; (80024f4 <__NVIC_GetPriorityGrouping+0x18>)
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	0a1b      	lsrs	r3, r3, #8
 80024e6:	f003 0307 	and.w	r3, r3, #7
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr
 80024f4:	e000ed00 	.word	0xe000ed00

080024f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	4603      	mov	r3, r0
 8002500:	6039      	str	r1, [r7, #0]
 8002502:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002504:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002508:	2b00      	cmp	r3, #0
 800250a:	db0a      	blt.n	8002522 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	b2da      	uxtb	r2, r3
 8002510:	490c      	ldr	r1, [pc, #48]	; (8002544 <__NVIC_SetPriority+0x4c>)
 8002512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002516:	0112      	lsls	r2, r2, #4
 8002518:	b2d2      	uxtb	r2, r2
 800251a:	440b      	add	r3, r1
 800251c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002520:	e00a      	b.n	8002538 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	b2da      	uxtb	r2, r3
 8002526:	4908      	ldr	r1, [pc, #32]	; (8002548 <__NVIC_SetPriority+0x50>)
 8002528:	79fb      	ldrb	r3, [r7, #7]
 800252a:	f003 030f 	and.w	r3, r3, #15
 800252e:	3b04      	subs	r3, #4
 8002530:	0112      	lsls	r2, r2, #4
 8002532:	b2d2      	uxtb	r2, r2
 8002534:	440b      	add	r3, r1
 8002536:	761a      	strb	r2, [r3, #24]
}
 8002538:	bf00      	nop
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr
 8002544:	e000e100 	.word	0xe000e100
 8002548:	e000ed00 	.word	0xe000ed00

0800254c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800254c:	b480      	push	{r7}
 800254e:	b089      	sub	sp, #36	; 0x24
 8002550:	af00      	add	r7, sp, #0
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	60b9      	str	r1, [r7, #8]
 8002556:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	f003 0307 	and.w	r3, r3, #7
 800255e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	f1c3 0307 	rsb	r3, r3, #7
 8002566:	2b04      	cmp	r3, #4
 8002568:	bf28      	it	cs
 800256a:	2304      	movcs	r3, #4
 800256c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	3304      	adds	r3, #4
 8002572:	2b06      	cmp	r3, #6
 8002574:	d902      	bls.n	800257c <NVIC_EncodePriority+0x30>
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	3b03      	subs	r3, #3
 800257a:	e000      	b.n	800257e <NVIC_EncodePriority+0x32>
 800257c:	2300      	movs	r3, #0
 800257e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002580:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	fa02 f303 	lsl.w	r3, r2, r3
 800258a:	43da      	mvns	r2, r3
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	401a      	ands	r2, r3
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002594:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	fa01 f303 	lsl.w	r3, r1, r3
 800259e:	43d9      	mvns	r1, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025a4:	4313      	orrs	r3, r2
         );
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3724      	adds	r7, #36	; 0x24
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
	...

080025b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	3b01      	subs	r3, #1
 80025c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025c4:	d301      	bcc.n	80025ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025c6:	2301      	movs	r3, #1
 80025c8:	e00f      	b.n	80025ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025ca:	4a0a      	ldr	r2, [pc, #40]	; (80025f4 <SysTick_Config+0x40>)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	3b01      	subs	r3, #1
 80025d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025d2:	210f      	movs	r1, #15
 80025d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025d8:	f7ff ff8e 	bl	80024f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025dc:	4b05      	ldr	r3, [pc, #20]	; (80025f4 <SysTick_Config+0x40>)
 80025de:	2200      	movs	r2, #0
 80025e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025e2:	4b04      	ldr	r3, [pc, #16]	; (80025f4 <SysTick_Config+0x40>)
 80025e4:	2207      	movs	r2, #7
 80025e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3708      	adds	r7, #8
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	e000e010 	.word	0xe000e010

080025f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f7ff ff47 	bl	8002494 <__NVIC_SetPriorityGrouping>
}
 8002606:	bf00      	nop
 8002608:	3708      	adds	r7, #8
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}

0800260e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800260e:	b580      	push	{r7, lr}
 8002610:	b086      	sub	sp, #24
 8002612:	af00      	add	r7, sp, #0
 8002614:	4603      	mov	r3, r0
 8002616:	60b9      	str	r1, [r7, #8]
 8002618:	607a      	str	r2, [r7, #4]
 800261a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800261c:	2300      	movs	r3, #0
 800261e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002620:	f7ff ff5c 	bl	80024dc <__NVIC_GetPriorityGrouping>
 8002624:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	68b9      	ldr	r1, [r7, #8]
 800262a:	6978      	ldr	r0, [r7, #20]
 800262c:	f7ff ff8e 	bl	800254c <NVIC_EncodePriority>
 8002630:	4602      	mov	r2, r0
 8002632:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002636:	4611      	mov	r1, r2
 8002638:	4618      	mov	r0, r3
 800263a:	f7ff ff5d 	bl	80024f8 <__NVIC_SetPriority>
}
 800263e:	bf00      	nop
 8002640:	3718      	adds	r7, #24
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}

08002646 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002646:	b580      	push	{r7, lr}
 8002648:	b082      	sub	sp, #8
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f7ff ffb0 	bl	80025b4 <SysTick_Config>
 8002654:	4603      	mov	r3, r0
}
 8002656:	4618      	mov	r0, r3
 8002658:	3708      	adds	r7, #8
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
	...

08002660 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002660:	b480      	push	{r7}
 8002662:	b087      	sub	sp, #28
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800266a:	2300      	movs	r3, #0
 800266c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800266e:	e17f      	b.n	8002970 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	2101      	movs	r1, #1
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	fa01 f303 	lsl.w	r3, r1, r3
 800267c:	4013      	ands	r3, r2
 800267e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2b00      	cmp	r3, #0
 8002684:	f000 8171 	beq.w	800296a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f003 0303 	and.w	r3, r3, #3
 8002690:	2b01      	cmp	r3, #1
 8002692:	d005      	beq.n	80026a0 <HAL_GPIO_Init+0x40>
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f003 0303 	and.w	r3, r3, #3
 800269c:	2b02      	cmp	r3, #2
 800269e:	d130      	bne.n	8002702 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	2203      	movs	r2, #3
 80026ac:	fa02 f303 	lsl.w	r3, r2, r3
 80026b0:	43db      	mvns	r3, r3
 80026b2:	693a      	ldr	r2, [r7, #16]
 80026b4:	4013      	ands	r3, r2
 80026b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	68da      	ldr	r2, [r3, #12]
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	005b      	lsls	r3, r3, #1
 80026c0:	fa02 f303 	lsl.w	r3, r2, r3
 80026c4:	693a      	ldr	r2, [r7, #16]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	693a      	ldr	r2, [r7, #16]
 80026ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80026d6:	2201      	movs	r2, #1
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	fa02 f303 	lsl.w	r3, r2, r3
 80026de:	43db      	mvns	r3, r3
 80026e0:	693a      	ldr	r2, [r7, #16]
 80026e2:	4013      	ands	r3, r2
 80026e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	091b      	lsrs	r3, r3, #4
 80026ec:	f003 0201 	and.w	r2, r3, #1
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	fa02 f303 	lsl.w	r3, r2, r3
 80026f6:	693a      	ldr	r2, [r7, #16]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	693a      	ldr	r2, [r7, #16]
 8002700:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f003 0303 	and.w	r3, r3, #3
 800270a:	2b03      	cmp	r3, #3
 800270c:	d118      	bne.n	8002740 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002712:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002714:	2201      	movs	r2, #1
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	fa02 f303 	lsl.w	r3, r2, r3
 800271c:	43db      	mvns	r3, r3
 800271e:	693a      	ldr	r2, [r7, #16]
 8002720:	4013      	ands	r3, r2
 8002722:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	08db      	lsrs	r3, r3, #3
 800272a:	f003 0201 	and.w	r2, r3, #1
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	fa02 f303 	lsl.w	r3, r2, r3
 8002734:	693a      	ldr	r2, [r7, #16]
 8002736:	4313      	orrs	r3, r2
 8002738:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	693a      	ldr	r2, [r7, #16]
 800273e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f003 0303 	and.w	r3, r3, #3
 8002748:	2b03      	cmp	r3, #3
 800274a:	d017      	beq.n	800277c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	005b      	lsls	r3, r3, #1
 8002756:	2203      	movs	r2, #3
 8002758:	fa02 f303 	lsl.w	r3, r2, r3
 800275c:	43db      	mvns	r3, r3
 800275e:	693a      	ldr	r2, [r7, #16]
 8002760:	4013      	ands	r3, r2
 8002762:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	689a      	ldr	r2, [r3, #8]
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	005b      	lsls	r3, r3, #1
 800276c:	fa02 f303 	lsl.w	r3, r2, r3
 8002770:	693a      	ldr	r2, [r7, #16]
 8002772:	4313      	orrs	r3, r2
 8002774:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	693a      	ldr	r2, [r7, #16]
 800277a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f003 0303 	and.w	r3, r3, #3
 8002784:	2b02      	cmp	r3, #2
 8002786:	d123      	bne.n	80027d0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	08da      	lsrs	r2, r3, #3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	3208      	adds	r2, #8
 8002790:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002794:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	f003 0307 	and.w	r3, r3, #7
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	220f      	movs	r2, #15
 80027a0:	fa02 f303 	lsl.w	r3, r2, r3
 80027a4:	43db      	mvns	r3, r3
 80027a6:	693a      	ldr	r2, [r7, #16]
 80027a8:	4013      	ands	r3, r2
 80027aa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	691a      	ldr	r2, [r3, #16]
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	f003 0307 	and.w	r3, r3, #7
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	fa02 f303 	lsl.w	r3, r2, r3
 80027bc:	693a      	ldr	r2, [r7, #16]
 80027be:	4313      	orrs	r3, r2
 80027c0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	08da      	lsrs	r2, r3, #3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	3208      	adds	r2, #8
 80027ca:	6939      	ldr	r1, [r7, #16]
 80027cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	005b      	lsls	r3, r3, #1
 80027da:	2203      	movs	r2, #3
 80027dc:	fa02 f303 	lsl.w	r3, r2, r3
 80027e0:	43db      	mvns	r3, r3
 80027e2:	693a      	ldr	r2, [r7, #16]
 80027e4:	4013      	ands	r3, r2
 80027e6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f003 0203 	and.w	r2, r3, #3
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	005b      	lsls	r3, r3, #1
 80027f4:	fa02 f303 	lsl.w	r3, r2, r3
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	693a      	ldr	r2, [r7, #16]
 8002802:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800280c:	2b00      	cmp	r3, #0
 800280e:	f000 80ac 	beq.w	800296a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002812:	4b5f      	ldr	r3, [pc, #380]	; (8002990 <HAL_GPIO_Init+0x330>)
 8002814:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002816:	4a5e      	ldr	r2, [pc, #376]	; (8002990 <HAL_GPIO_Init+0x330>)
 8002818:	f043 0301 	orr.w	r3, r3, #1
 800281c:	6613      	str	r3, [r2, #96]	; 0x60
 800281e:	4b5c      	ldr	r3, [pc, #368]	; (8002990 <HAL_GPIO_Init+0x330>)
 8002820:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002822:	f003 0301 	and.w	r3, r3, #1
 8002826:	60bb      	str	r3, [r7, #8]
 8002828:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800282a:	4a5a      	ldr	r2, [pc, #360]	; (8002994 <HAL_GPIO_Init+0x334>)
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	089b      	lsrs	r3, r3, #2
 8002830:	3302      	adds	r3, #2
 8002832:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002836:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	f003 0303 	and.w	r3, r3, #3
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	220f      	movs	r2, #15
 8002842:	fa02 f303 	lsl.w	r3, r2, r3
 8002846:	43db      	mvns	r3, r3
 8002848:	693a      	ldr	r2, [r7, #16]
 800284a:	4013      	ands	r3, r2
 800284c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002854:	d025      	beq.n	80028a2 <HAL_GPIO_Init+0x242>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a4f      	ldr	r2, [pc, #316]	; (8002998 <HAL_GPIO_Init+0x338>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d01f      	beq.n	800289e <HAL_GPIO_Init+0x23e>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a4e      	ldr	r2, [pc, #312]	; (800299c <HAL_GPIO_Init+0x33c>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d019      	beq.n	800289a <HAL_GPIO_Init+0x23a>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a4d      	ldr	r2, [pc, #308]	; (80029a0 <HAL_GPIO_Init+0x340>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d013      	beq.n	8002896 <HAL_GPIO_Init+0x236>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a4c      	ldr	r2, [pc, #304]	; (80029a4 <HAL_GPIO_Init+0x344>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d00d      	beq.n	8002892 <HAL_GPIO_Init+0x232>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a4b      	ldr	r2, [pc, #300]	; (80029a8 <HAL_GPIO_Init+0x348>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d007      	beq.n	800288e <HAL_GPIO_Init+0x22e>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a4a      	ldr	r2, [pc, #296]	; (80029ac <HAL_GPIO_Init+0x34c>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d101      	bne.n	800288a <HAL_GPIO_Init+0x22a>
 8002886:	2306      	movs	r3, #6
 8002888:	e00c      	b.n	80028a4 <HAL_GPIO_Init+0x244>
 800288a:	2307      	movs	r3, #7
 800288c:	e00a      	b.n	80028a4 <HAL_GPIO_Init+0x244>
 800288e:	2305      	movs	r3, #5
 8002890:	e008      	b.n	80028a4 <HAL_GPIO_Init+0x244>
 8002892:	2304      	movs	r3, #4
 8002894:	e006      	b.n	80028a4 <HAL_GPIO_Init+0x244>
 8002896:	2303      	movs	r3, #3
 8002898:	e004      	b.n	80028a4 <HAL_GPIO_Init+0x244>
 800289a:	2302      	movs	r3, #2
 800289c:	e002      	b.n	80028a4 <HAL_GPIO_Init+0x244>
 800289e:	2301      	movs	r3, #1
 80028a0:	e000      	b.n	80028a4 <HAL_GPIO_Init+0x244>
 80028a2:	2300      	movs	r3, #0
 80028a4:	697a      	ldr	r2, [r7, #20]
 80028a6:	f002 0203 	and.w	r2, r2, #3
 80028aa:	0092      	lsls	r2, r2, #2
 80028ac:	4093      	lsls	r3, r2
 80028ae:	693a      	ldr	r2, [r7, #16]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80028b4:	4937      	ldr	r1, [pc, #220]	; (8002994 <HAL_GPIO_Init+0x334>)
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	089b      	lsrs	r3, r3, #2
 80028ba:	3302      	adds	r3, #2
 80028bc:	693a      	ldr	r2, [r7, #16]
 80028be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80028c2:	4b3b      	ldr	r3, [pc, #236]	; (80029b0 <HAL_GPIO_Init+0x350>)
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	43db      	mvns	r3, r3
 80028cc:	693a      	ldr	r2, [r7, #16]
 80028ce:	4013      	ands	r3, r2
 80028d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d003      	beq.n	80028e6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80028de:	693a      	ldr	r2, [r7, #16]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80028e6:	4a32      	ldr	r2, [pc, #200]	; (80029b0 <HAL_GPIO_Init+0x350>)
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80028ec:	4b30      	ldr	r3, [pc, #192]	; (80029b0 <HAL_GPIO_Init+0x350>)
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	43db      	mvns	r3, r3
 80028f6:	693a      	ldr	r2, [r7, #16]
 80028f8:	4013      	ands	r3, r2
 80028fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d003      	beq.n	8002910 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002908:	693a      	ldr	r2, [r7, #16]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	4313      	orrs	r3, r2
 800290e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002910:	4a27      	ldr	r2, [pc, #156]	; (80029b0 <HAL_GPIO_Init+0x350>)
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002916:	4b26      	ldr	r3, [pc, #152]	; (80029b0 <HAL_GPIO_Init+0x350>)
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	43db      	mvns	r3, r3
 8002920:	693a      	ldr	r2, [r7, #16]
 8002922:	4013      	ands	r3, r2
 8002924:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d003      	beq.n	800293a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002932:	693a      	ldr	r2, [r7, #16]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	4313      	orrs	r3, r2
 8002938:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800293a:	4a1d      	ldr	r2, [pc, #116]	; (80029b0 <HAL_GPIO_Init+0x350>)
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002940:	4b1b      	ldr	r3, [pc, #108]	; (80029b0 <HAL_GPIO_Init+0x350>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	43db      	mvns	r3, r3
 800294a:	693a      	ldr	r2, [r7, #16]
 800294c:	4013      	ands	r3, r2
 800294e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d003      	beq.n	8002964 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800295c:	693a      	ldr	r2, [r7, #16]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	4313      	orrs	r3, r2
 8002962:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002964:	4a12      	ldr	r2, [pc, #72]	; (80029b0 <HAL_GPIO_Init+0x350>)
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	3301      	adds	r3, #1
 800296e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	fa22 f303 	lsr.w	r3, r2, r3
 800297a:	2b00      	cmp	r3, #0
 800297c:	f47f ae78 	bne.w	8002670 <HAL_GPIO_Init+0x10>
  }
}
 8002980:	bf00      	nop
 8002982:	bf00      	nop
 8002984:	371c      	adds	r7, #28
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	40021000 	.word	0x40021000
 8002994:	40010000 	.word	0x40010000
 8002998:	48000400 	.word	0x48000400
 800299c:	48000800 	.word	0x48000800
 80029a0:	48000c00 	.word	0x48000c00
 80029a4:	48001000 	.word	0x48001000
 80029a8:	48001400 	.word	0x48001400
 80029ac:	48001800 	.word	0x48001800
 80029b0:	40010400 	.word	0x40010400

080029b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	460b      	mov	r3, r1
 80029be:	807b      	strh	r3, [r7, #2]
 80029c0:	4613      	mov	r3, r2
 80029c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029c4:	787b      	ldrb	r3, [r7, #1]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d003      	beq.n	80029d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80029ca:	887a      	ldrh	r2, [r7, #2]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80029d0:	e002      	b.n	80029d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80029d2:	887a      	ldrh	r2, [r7, #2]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80029d8:	bf00      	nop
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d101      	bne.n	80029f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e081      	b.n	8002afa <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d106      	bne.n	8002a10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f7fe fb72 	bl	80010f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2224      	movs	r2, #36	; 0x24
 8002a14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f022 0201 	bic.w	r2, r2, #1
 8002a26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	685a      	ldr	r2, [r3, #4]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a34:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	689a      	ldr	r2, [r3, #8]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a44:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d107      	bne.n	8002a5e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	689a      	ldr	r2, [r3, #8]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a5a:	609a      	str	r2, [r3, #8]
 8002a5c:	e006      	b.n	8002a6c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	689a      	ldr	r2, [r3, #8]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002a6a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d104      	bne.n	8002a7e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a7c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	6812      	ldr	r2, [r2, #0]
 8002a88:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a90:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	68da      	ldr	r2, [r3, #12]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002aa0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	691a      	ldr	r2, [r3, #16]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	695b      	ldr	r3, [r3, #20]
 8002aaa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	699b      	ldr	r3, [r3, #24]
 8002ab2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	69d9      	ldr	r1, [r3, #28]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6a1a      	ldr	r2, [r3, #32]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	430a      	orrs	r2, r1
 8002aca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f042 0201 	orr.w	r2, r2, #1
 8002ada:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2220      	movs	r2, #32
 8002ae6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3708      	adds	r7, #8
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
	...

08002b04 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b088      	sub	sp, #32
 8002b08:	af02      	add	r7, sp, #8
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	607a      	str	r2, [r7, #4]
 8002b0e:	461a      	mov	r2, r3
 8002b10:	460b      	mov	r3, r1
 8002b12:	817b      	strh	r3, [r7, #10]
 8002b14:	4613      	mov	r3, r2
 8002b16:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	2b20      	cmp	r3, #32
 8002b22:	f040 80da 	bne.w	8002cda <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d101      	bne.n	8002b34 <HAL_I2C_Master_Transmit+0x30>
 8002b30:	2302      	movs	r3, #2
 8002b32:	e0d3      	b.n	8002cdc <HAL_I2C_Master_Transmit+0x1d8>
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002b3c:	f7ff fc7a 	bl	8002434 <HAL_GetTick>
 8002b40:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	9300      	str	r3, [sp, #0]
 8002b46:	2319      	movs	r3, #25
 8002b48:	2201      	movs	r2, #1
 8002b4a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b4e:	68f8      	ldr	r0, [r7, #12]
 8002b50:	f000 fdc4 	bl	80036dc <I2C_WaitOnFlagUntilTimeout>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d001      	beq.n	8002b5e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e0be      	b.n	8002cdc <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2221      	movs	r2, #33	; 0x21
 8002b62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2210      	movs	r2, #16
 8002b6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2200      	movs	r2, #0
 8002b72:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	893a      	ldrh	r2, [r7, #8]
 8002b7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2200      	movs	r2, #0
 8002b84:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	2bff      	cmp	r3, #255	; 0xff
 8002b8e:	d90e      	bls.n	8002bae <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	22ff      	movs	r2, #255	; 0xff
 8002b94:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b9a:	b2da      	uxtb	r2, r3
 8002b9c:	8979      	ldrh	r1, [r7, #10]
 8002b9e:	4b51      	ldr	r3, [pc, #324]	; (8002ce4 <HAL_I2C_Master_Transmit+0x1e0>)
 8002ba0:	9300      	str	r3, [sp, #0]
 8002ba2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ba6:	68f8      	ldr	r0, [r7, #12]
 8002ba8:	f000 ffba 	bl	8003b20 <I2C_TransferConfig>
 8002bac:	e06c      	b.n	8002c88 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bb2:	b29a      	uxth	r2, r3
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bbc:	b2da      	uxtb	r2, r3
 8002bbe:	8979      	ldrh	r1, [r7, #10]
 8002bc0:	4b48      	ldr	r3, [pc, #288]	; (8002ce4 <HAL_I2C_Master_Transmit+0x1e0>)
 8002bc2:	9300      	str	r3, [sp, #0]
 8002bc4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bc8:	68f8      	ldr	r0, [r7, #12]
 8002bca:	f000 ffa9 	bl	8003b20 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002bce:	e05b      	b.n	8002c88 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bd0:	697a      	ldr	r2, [r7, #20]
 8002bd2:	6a39      	ldr	r1, [r7, #32]
 8002bd4:	68f8      	ldr	r0, [r7, #12]
 8002bd6:	f000 fdc1 	bl	800375c <I2C_WaitOnTXISFlagUntilTimeout>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d001      	beq.n	8002be4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e07b      	b.n	8002cdc <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be8:	781a      	ldrb	r2, [r3, #0]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf4:	1c5a      	adds	r2, r3, #1
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	3b01      	subs	r3, #1
 8002c02:	b29a      	uxth	r2, r3
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c0c:	3b01      	subs	r3, #1
 8002c0e:	b29a      	uxth	r2, r3
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d034      	beq.n	8002c88 <HAL_I2C_Master_Transmit+0x184>
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d130      	bne.n	8002c88 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	9300      	str	r3, [sp, #0]
 8002c2a:	6a3b      	ldr	r3, [r7, #32]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	2180      	movs	r1, #128	; 0x80
 8002c30:	68f8      	ldr	r0, [r7, #12]
 8002c32:	f000 fd53 	bl	80036dc <I2C_WaitOnFlagUntilTimeout>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d001      	beq.n	8002c40 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e04d      	b.n	8002cdc <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	2bff      	cmp	r3, #255	; 0xff
 8002c48:	d90e      	bls.n	8002c68 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	22ff      	movs	r2, #255	; 0xff
 8002c4e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c54:	b2da      	uxtb	r2, r3
 8002c56:	8979      	ldrh	r1, [r7, #10]
 8002c58:	2300      	movs	r3, #0
 8002c5a:	9300      	str	r3, [sp, #0]
 8002c5c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c60:	68f8      	ldr	r0, [r7, #12]
 8002c62:	f000 ff5d 	bl	8003b20 <I2C_TransferConfig>
 8002c66:	e00f      	b.n	8002c88 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c6c:	b29a      	uxth	r2, r3
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c76:	b2da      	uxtb	r2, r3
 8002c78:	8979      	ldrh	r1, [r7, #10]
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	9300      	str	r3, [sp, #0]
 8002c7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c82:	68f8      	ldr	r0, [r7, #12]
 8002c84:	f000 ff4c 	bl	8003b20 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d19e      	bne.n	8002bd0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c92:	697a      	ldr	r2, [r7, #20]
 8002c94:	6a39      	ldr	r1, [r7, #32]
 8002c96:	68f8      	ldr	r0, [r7, #12]
 8002c98:	f000 fda0 	bl	80037dc <I2C_WaitOnSTOPFlagUntilTimeout>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d001      	beq.n	8002ca6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e01a      	b.n	8002cdc <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	2220      	movs	r2, #32
 8002cac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	6859      	ldr	r1, [r3, #4]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	4b0b      	ldr	r3, [pc, #44]	; (8002ce8 <HAL_I2C_Master_Transmit+0x1e4>)
 8002cba:	400b      	ands	r3, r1
 8002cbc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2220      	movs	r2, #32
 8002cc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	e000      	b.n	8002cdc <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002cda:	2302      	movs	r3, #2
  }
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3718      	adds	r7, #24
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	80002000 	.word	0x80002000
 8002ce8:	fe00e800 	.word	0xfe00e800

08002cec <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b088      	sub	sp, #32
 8002cf0:	af02      	add	r7, sp, #8
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	607a      	str	r2, [r7, #4]
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	817b      	strh	r3, [r7, #10]
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	2b20      	cmp	r3, #32
 8002d0a:	f040 80db 	bne.w	8002ec4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d101      	bne.n	8002d1c <HAL_I2C_Master_Receive+0x30>
 8002d18:	2302      	movs	r3, #2
 8002d1a:	e0d4      	b.n	8002ec6 <HAL_I2C_Master_Receive+0x1da>
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002d24:	f7ff fb86 	bl	8002434 <HAL_GetTick>
 8002d28:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	9300      	str	r3, [sp, #0]
 8002d2e:	2319      	movs	r3, #25
 8002d30:	2201      	movs	r2, #1
 8002d32:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d36:	68f8      	ldr	r0, [r7, #12]
 8002d38:	f000 fcd0 	bl	80036dc <I2C_WaitOnFlagUntilTimeout>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d001      	beq.n	8002d46 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e0bf      	b.n	8002ec6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2222      	movs	r2, #34	; 0x22
 8002d4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2210      	movs	r2, #16
 8002d52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	893a      	ldrh	r2, [r7, #8]
 8002d66:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	2bff      	cmp	r3, #255	; 0xff
 8002d76:	d90e      	bls.n	8002d96 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	22ff      	movs	r2, #255	; 0xff
 8002d7c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d82:	b2da      	uxtb	r2, r3
 8002d84:	8979      	ldrh	r1, [r7, #10]
 8002d86:	4b52      	ldr	r3, [pc, #328]	; (8002ed0 <HAL_I2C_Master_Receive+0x1e4>)
 8002d88:	9300      	str	r3, [sp, #0]
 8002d8a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d8e:	68f8      	ldr	r0, [r7, #12]
 8002d90:	f000 fec6 	bl	8003b20 <I2C_TransferConfig>
 8002d94:	e06d      	b.n	8002e72 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d9a:	b29a      	uxth	r2, r3
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002da4:	b2da      	uxtb	r2, r3
 8002da6:	8979      	ldrh	r1, [r7, #10]
 8002da8:	4b49      	ldr	r3, [pc, #292]	; (8002ed0 <HAL_I2C_Master_Receive+0x1e4>)
 8002daa:	9300      	str	r3, [sp, #0]
 8002dac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002db0:	68f8      	ldr	r0, [r7, #12]
 8002db2:	f000 feb5 	bl	8003b20 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002db6:	e05c      	b.n	8002e72 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002db8:	697a      	ldr	r2, [r7, #20]
 8002dba:	6a39      	ldr	r1, [r7, #32]
 8002dbc:	68f8      	ldr	r0, [r7, #12]
 8002dbe:	f000 fd49 	bl	8003854 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d001      	beq.n	8002dcc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e07c      	b.n	8002ec6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd6:	b2d2      	uxtb	r2, r2
 8002dd8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dde:	1c5a      	adds	r2, r3, #1
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002de8:	3b01      	subs	r3, #1
 8002dea:	b29a      	uxth	r2, r3
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	3b01      	subs	r3, #1
 8002df8:	b29a      	uxth	r2, r3
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d034      	beq.n	8002e72 <HAL_I2C_Master_Receive+0x186>
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d130      	bne.n	8002e72 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	9300      	str	r3, [sp, #0]
 8002e14:	6a3b      	ldr	r3, [r7, #32]
 8002e16:	2200      	movs	r2, #0
 8002e18:	2180      	movs	r1, #128	; 0x80
 8002e1a:	68f8      	ldr	r0, [r7, #12]
 8002e1c:	f000 fc5e 	bl	80036dc <I2C_WaitOnFlagUntilTimeout>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d001      	beq.n	8002e2a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e04d      	b.n	8002ec6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	2bff      	cmp	r3, #255	; 0xff
 8002e32:	d90e      	bls.n	8002e52 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	22ff      	movs	r2, #255	; 0xff
 8002e38:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e3e:	b2da      	uxtb	r2, r3
 8002e40:	8979      	ldrh	r1, [r7, #10]
 8002e42:	2300      	movs	r3, #0
 8002e44:	9300      	str	r3, [sp, #0]
 8002e46:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e4a:	68f8      	ldr	r0, [r7, #12]
 8002e4c:	f000 fe68 	bl	8003b20 <I2C_TransferConfig>
 8002e50:	e00f      	b.n	8002e72 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e56:	b29a      	uxth	r2, r3
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e60:	b2da      	uxtb	r2, r3
 8002e62:	8979      	ldrh	r1, [r7, #10]
 8002e64:	2300      	movs	r3, #0
 8002e66:	9300      	str	r3, [sp, #0]
 8002e68:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e6c:	68f8      	ldr	r0, [r7, #12]
 8002e6e:	f000 fe57 	bl	8003b20 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d19d      	bne.n	8002db8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e7c:	697a      	ldr	r2, [r7, #20]
 8002e7e:	6a39      	ldr	r1, [r7, #32]
 8002e80:	68f8      	ldr	r0, [r7, #12]
 8002e82:	f000 fcab 	bl	80037dc <I2C_WaitOnSTOPFlagUntilTimeout>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d001      	beq.n	8002e90 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e01a      	b.n	8002ec6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2220      	movs	r2, #32
 8002e96:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	6859      	ldr	r1, [r3, #4]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	4b0c      	ldr	r3, [pc, #48]	; (8002ed4 <HAL_I2C_Master_Receive+0x1e8>)
 8002ea4:	400b      	ands	r3, r1
 8002ea6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2220      	movs	r2, #32
 8002eac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	e000      	b.n	8002ec6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002ec4:	2302      	movs	r3, #2
  }
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3718      	adds	r7, #24
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	80002400 	.word	0x80002400
 8002ed4:	fe00e800 	.word	0xfe00e800

08002ed8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b088      	sub	sp, #32
 8002edc:	af02      	add	r7, sp, #8
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	4608      	mov	r0, r1
 8002ee2:	4611      	mov	r1, r2
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	817b      	strh	r3, [r7, #10]
 8002eea:	460b      	mov	r3, r1
 8002eec:	813b      	strh	r3, [r7, #8]
 8002eee:	4613      	mov	r3, r2
 8002ef0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	2b20      	cmp	r3, #32
 8002efc:	f040 80f9 	bne.w	80030f2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f00:	6a3b      	ldr	r3, [r7, #32]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d002      	beq.n	8002f0c <HAL_I2C_Mem_Write+0x34>
 8002f06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d105      	bne.n	8002f18 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f12:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e0ed      	b.n	80030f4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d101      	bne.n	8002f26 <HAL_I2C_Mem_Write+0x4e>
 8002f22:	2302      	movs	r3, #2
 8002f24:	e0e6      	b.n	80030f4 <HAL_I2C_Mem_Write+0x21c>
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002f2e:	f7ff fa81 	bl	8002434 <HAL_GetTick>
 8002f32:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	9300      	str	r3, [sp, #0]
 8002f38:	2319      	movs	r3, #25
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f40:	68f8      	ldr	r0, [r7, #12]
 8002f42:	f000 fbcb 	bl	80036dc <I2C_WaitOnFlagUntilTimeout>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d001      	beq.n	8002f50 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e0d1      	b.n	80030f4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2221      	movs	r2, #33	; 0x21
 8002f54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2240      	movs	r2, #64	; 0x40
 8002f5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2200      	movs	r2, #0
 8002f64:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6a3a      	ldr	r2, [r7, #32]
 8002f6a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002f70:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2200      	movs	r2, #0
 8002f76:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f78:	88f8      	ldrh	r0, [r7, #6]
 8002f7a:	893a      	ldrh	r2, [r7, #8]
 8002f7c:	8979      	ldrh	r1, [r7, #10]
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	9301      	str	r3, [sp, #4]
 8002f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f84:	9300      	str	r3, [sp, #0]
 8002f86:	4603      	mov	r3, r0
 8002f88:	68f8      	ldr	r0, [r7, #12]
 8002f8a:	f000 fadb 	bl	8003544 <I2C_RequestMemoryWrite>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d005      	beq.n	8002fa0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e0a9      	b.n	80030f4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	2bff      	cmp	r3, #255	; 0xff
 8002fa8:	d90e      	bls.n	8002fc8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	22ff      	movs	r2, #255	; 0xff
 8002fae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fb4:	b2da      	uxtb	r2, r3
 8002fb6:	8979      	ldrh	r1, [r7, #10]
 8002fb8:	2300      	movs	r3, #0
 8002fba:	9300      	str	r3, [sp, #0]
 8002fbc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002fc0:	68f8      	ldr	r0, [r7, #12]
 8002fc2:	f000 fdad 	bl	8003b20 <I2C_TransferConfig>
 8002fc6:	e00f      	b.n	8002fe8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fcc:	b29a      	uxth	r2, r3
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fd6:	b2da      	uxtb	r2, r3
 8002fd8:	8979      	ldrh	r1, [r7, #10]
 8002fda:	2300      	movs	r3, #0
 8002fdc:	9300      	str	r3, [sp, #0]
 8002fde:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fe2:	68f8      	ldr	r0, [r7, #12]
 8002fe4:	f000 fd9c 	bl	8003b20 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fe8:	697a      	ldr	r2, [r7, #20]
 8002fea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002fec:	68f8      	ldr	r0, [r7, #12]
 8002fee:	f000 fbb5 	bl	800375c <I2C_WaitOnTXISFlagUntilTimeout>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d001      	beq.n	8002ffc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e07b      	b.n	80030f4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003000:	781a      	ldrb	r2, [r3, #0]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300c:	1c5a      	adds	r2, r3, #1
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003016:	b29b      	uxth	r3, r3
 8003018:	3b01      	subs	r3, #1
 800301a:	b29a      	uxth	r2, r3
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003024:	3b01      	subs	r3, #1
 8003026:	b29a      	uxth	r2, r3
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003030:	b29b      	uxth	r3, r3
 8003032:	2b00      	cmp	r3, #0
 8003034:	d034      	beq.n	80030a0 <HAL_I2C_Mem_Write+0x1c8>
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800303a:	2b00      	cmp	r3, #0
 800303c:	d130      	bne.n	80030a0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	9300      	str	r3, [sp, #0]
 8003042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003044:	2200      	movs	r2, #0
 8003046:	2180      	movs	r1, #128	; 0x80
 8003048:	68f8      	ldr	r0, [r7, #12]
 800304a:	f000 fb47 	bl	80036dc <I2C_WaitOnFlagUntilTimeout>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d001      	beq.n	8003058 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e04d      	b.n	80030f4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800305c:	b29b      	uxth	r3, r3
 800305e:	2bff      	cmp	r3, #255	; 0xff
 8003060:	d90e      	bls.n	8003080 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	22ff      	movs	r2, #255	; 0xff
 8003066:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800306c:	b2da      	uxtb	r2, r3
 800306e:	8979      	ldrh	r1, [r7, #10]
 8003070:	2300      	movs	r3, #0
 8003072:	9300      	str	r3, [sp, #0]
 8003074:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003078:	68f8      	ldr	r0, [r7, #12]
 800307a:	f000 fd51 	bl	8003b20 <I2C_TransferConfig>
 800307e:	e00f      	b.n	80030a0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003084:	b29a      	uxth	r2, r3
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800308e:	b2da      	uxtb	r2, r3
 8003090:	8979      	ldrh	r1, [r7, #10]
 8003092:	2300      	movs	r3, #0
 8003094:	9300      	str	r3, [sp, #0]
 8003096:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800309a:	68f8      	ldr	r0, [r7, #12]
 800309c:	f000 fd40 	bl	8003b20 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d19e      	bne.n	8002fe8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030aa:	697a      	ldr	r2, [r7, #20]
 80030ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030ae:	68f8      	ldr	r0, [r7, #12]
 80030b0:	f000 fb94 	bl	80037dc <I2C_WaitOnSTOPFlagUntilTimeout>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d001      	beq.n	80030be <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e01a      	b.n	80030f4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2220      	movs	r2, #32
 80030c4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	6859      	ldr	r1, [r3, #4]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	4b0a      	ldr	r3, [pc, #40]	; (80030fc <HAL_I2C_Mem_Write+0x224>)
 80030d2:	400b      	ands	r3, r1
 80030d4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2220      	movs	r2, #32
 80030da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80030ee:	2300      	movs	r3, #0
 80030f0:	e000      	b.n	80030f4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80030f2:	2302      	movs	r3, #2
  }
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3718      	adds	r7, #24
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	fe00e800 	.word	0xfe00e800

08003100 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b088      	sub	sp, #32
 8003104:	af02      	add	r7, sp, #8
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	4608      	mov	r0, r1
 800310a:	4611      	mov	r1, r2
 800310c:	461a      	mov	r2, r3
 800310e:	4603      	mov	r3, r0
 8003110:	817b      	strh	r3, [r7, #10]
 8003112:	460b      	mov	r3, r1
 8003114:	813b      	strh	r3, [r7, #8]
 8003116:	4613      	mov	r3, r2
 8003118:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003120:	b2db      	uxtb	r3, r3
 8003122:	2b20      	cmp	r3, #32
 8003124:	f040 80fd 	bne.w	8003322 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003128:	6a3b      	ldr	r3, [r7, #32]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d002      	beq.n	8003134 <HAL_I2C_Mem_Read+0x34>
 800312e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003130:	2b00      	cmp	r3, #0
 8003132:	d105      	bne.n	8003140 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f44f 7200 	mov.w	r2, #512	; 0x200
 800313a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e0f1      	b.n	8003324 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003146:	2b01      	cmp	r3, #1
 8003148:	d101      	bne.n	800314e <HAL_I2C_Mem_Read+0x4e>
 800314a:	2302      	movs	r3, #2
 800314c:	e0ea      	b.n	8003324 <HAL_I2C_Mem_Read+0x224>
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2201      	movs	r2, #1
 8003152:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003156:	f7ff f96d 	bl	8002434 <HAL_GetTick>
 800315a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	9300      	str	r3, [sp, #0]
 8003160:	2319      	movs	r3, #25
 8003162:	2201      	movs	r2, #1
 8003164:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003168:	68f8      	ldr	r0, [r7, #12]
 800316a:	f000 fab7 	bl	80036dc <I2C_WaitOnFlagUntilTimeout>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d001      	beq.n	8003178 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e0d5      	b.n	8003324 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2222      	movs	r2, #34	; 0x22
 800317c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2240      	movs	r2, #64	; 0x40
 8003184:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2200      	movs	r2, #0
 800318c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6a3a      	ldr	r2, [r7, #32]
 8003192:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003198:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2200      	movs	r2, #0
 800319e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80031a0:	88f8      	ldrh	r0, [r7, #6]
 80031a2:	893a      	ldrh	r2, [r7, #8]
 80031a4:	8979      	ldrh	r1, [r7, #10]
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	9301      	str	r3, [sp, #4]
 80031aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ac:	9300      	str	r3, [sp, #0]
 80031ae:	4603      	mov	r3, r0
 80031b0:	68f8      	ldr	r0, [r7, #12]
 80031b2:	f000 fa1b 	bl	80035ec <I2C_RequestMemoryRead>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d005      	beq.n	80031c8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e0ad      	b.n	8003324 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	2bff      	cmp	r3, #255	; 0xff
 80031d0:	d90e      	bls.n	80031f0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	22ff      	movs	r2, #255	; 0xff
 80031d6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031dc:	b2da      	uxtb	r2, r3
 80031de:	8979      	ldrh	r1, [r7, #10]
 80031e0:	4b52      	ldr	r3, [pc, #328]	; (800332c <HAL_I2C_Mem_Read+0x22c>)
 80031e2:	9300      	str	r3, [sp, #0]
 80031e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80031e8:	68f8      	ldr	r0, [r7, #12]
 80031ea:	f000 fc99 	bl	8003b20 <I2C_TransferConfig>
 80031ee:	e00f      	b.n	8003210 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031f4:	b29a      	uxth	r2, r3
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031fe:	b2da      	uxtb	r2, r3
 8003200:	8979      	ldrh	r1, [r7, #10]
 8003202:	4b4a      	ldr	r3, [pc, #296]	; (800332c <HAL_I2C_Mem_Read+0x22c>)
 8003204:	9300      	str	r3, [sp, #0]
 8003206:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800320a:	68f8      	ldr	r0, [r7, #12]
 800320c:	f000 fc88 	bl	8003b20 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	9300      	str	r3, [sp, #0]
 8003214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003216:	2200      	movs	r2, #0
 8003218:	2104      	movs	r1, #4
 800321a:	68f8      	ldr	r0, [r7, #12]
 800321c:	f000 fa5e 	bl	80036dc <I2C_WaitOnFlagUntilTimeout>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d001      	beq.n	800322a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e07c      	b.n	8003324 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003234:	b2d2      	uxtb	r2, r2
 8003236:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323c:	1c5a      	adds	r2, r3, #1
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003246:	3b01      	subs	r3, #1
 8003248:	b29a      	uxth	r2, r3
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003252:	b29b      	uxth	r3, r3
 8003254:	3b01      	subs	r3, #1
 8003256:	b29a      	uxth	r2, r3
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003260:	b29b      	uxth	r3, r3
 8003262:	2b00      	cmp	r3, #0
 8003264:	d034      	beq.n	80032d0 <HAL_I2C_Mem_Read+0x1d0>
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800326a:	2b00      	cmp	r3, #0
 800326c:	d130      	bne.n	80032d0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	9300      	str	r3, [sp, #0]
 8003272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003274:	2200      	movs	r2, #0
 8003276:	2180      	movs	r1, #128	; 0x80
 8003278:	68f8      	ldr	r0, [r7, #12]
 800327a:	f000 fa2f 	bl	80036dc <I2C_WaitOnFlagUntilTimeout>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d001      	beq.n	8003288 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e04d      	b.n	8003324 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800328c:	b29b      	uxth	r3, r3
 800328e:	2bff      	cmp	r3, #255	; 0xff
 8003290:	d90e      	bls.n	80032b0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	22ff      	movs	r2, #255	; 0xff
 8003296:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800329c:	b2da      	uxtb	r2, r3
 800329e:	8979      	ldrh	r1, [r7, #10]
 80032a0:	2300      	movs	r3, #0
 80032a2:	9300      	str	r3, [sp, #0]
 80032a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032a8:	68f8      	ldr	r0, [r7, #12]
 80032aa:	f000 fc39 	bl	8003b20 <I2C_TransferConfig>
 80032ae:	e00f      	b.n	80032d0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032b4:	b29a      	uxth	r2, r3
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032be:	b2da      	uxtb	r2, r3
 80032c0:	8979      	ldrh	r1, [r7, #10]
 80032c2:	2300      	movs	r3, #0
 80032c4:	9300      	str	r3, [sp, #0]
 80032c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032ca:	68f8      	ldr	r0, [r7, #12]
 80032cc:	f000 fc28 	bl	8003b20 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d19a      	bne.n	8003210 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032da:	697a      	ldr	r2, [r7, #20]
 80032dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032de:	68f8      	ldr	r0, [r7, #12]
 80032e0:	f000 fa7c 	bl	80037dc <I2C_WaitOnSTOPFlagUntilTimeout>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d001      	beq.n	80032ee <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e01a      	b.n	8003324 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2220      	movs	r2, #32
 80032f4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	6859      	ldr	r1, [r3, #4]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	4b0b      	ldr	r3, [pc, #44]	; (8003330 <HAL_I2C_Mem_Read+0x230>)
 8003302:	400b      	ands	r3, r1
 8003304:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2220      	movs	r2, #32
 800330a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800331e:	2300      	movs	r3, #0
 8003320:	e000      	b.n	8003324 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003322:	2302      	movs	r3, #2
  }
}
 8003324:	4618      	mov	r0, r3
 8003326:	3718      	adds	r7, #24
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	80002400 	.word	0x80002400
 8003330:	fe00e800 	.word	0xfe00e800

08003334 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b08a      	sub	sp, #40	; 0x28
 8003338:	af02      	add	r7, sp, #8
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	607a      	str	r2, [r7, #4]
 800333e:	603b      	str	r3, [r7, #0]
 8003340:	460b      	mov	r3, r1
 8003342:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8003344:	2300      	movs	r3, #0
 8003346:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800334e:	b2db      	uxtb	r3, r3
 8003350:	2b20      	cmp	r3, #32
 8003352:	f040 80f1 	bne.w	8003538 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	699b      	ldr	r3, [r3, #24]
 800335c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003360:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003364:	d101      	bne.n	800336a <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8003366:	2302      	movs	r3, #2
 8003368:	e0e7      	b.n	800353a <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003370:	2b01      	cmp	r3, #1
 8003372:	d101      	bne.n	8003378 <HAL_I2C_IsDeviceReady+0x44>
 8003374:	2302      	movs	r3, #2
 8003376:	e0e0      	b.n	800353a <HAL_I2C_IsDeviceReady+0x206>
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2224      	movs	r2, #36	; 0x24
 8003384:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2200      	movs	r2, #0
 800338c:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	2b01      	cmp	r3, #1
 8003394:	d107      	bne.n	80033a6 <HAL_I2C_IsDeviceReady+0x72>
 8003396:	897b      	ldrh	r3, [r7, #10]
 8003398:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800339c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80033a0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80033a4:	e004      	b.n	80033b0 <HAL_I2C_IsDeviceReady+0x7c>
 80033a6:	897b      	ldrh	r3, [r7, #10]
 80033a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033ac:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80033b0:	68fa      	ldr	r2, [r7, #12]
 80033b2:	6812      	ldr	r2, [r2, #0]
 80033b4:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80033b6:	f7ff f83d 	bl	8002434 <HAL_GetTick>
 80033ba:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	699b      	ldr	r3, [r3, #24]
 80033c2:	f003 0320 	and.w	r3, r3, #32
 80033c6:	2b20      	cmp	r3, #32
 80033c8:	bf0c      	ite	eq
 80033ca:	2301      	moveq	r3, #1
 80033cc:	2300      	movne	r3, #0
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	699b      	ldr	r3, [r3, #24]
 80033d8:	f003 0310 	and.w	r3, r3, #16
 80033dc:	2b10      	cmp	r3, #16
 80033de:	bf0c      	ite	eq
 80033e0:	2301      	moveq	r3, #1
 80033e2:	2300      	movne	r3, #0
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80033e8:	e034      	b.n	8003454 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033f0:	d01a      	beq.n	8003428 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80033f2:	f7ff f81f 	bl	8002434 <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	683a      	ldr	r2, [r7, #0]
 80033fe:	429a      	cmp	r2, r3
 8003400:	d302      	bcc.n	8003408 <HAL_I2C_IsDeviceReady+0xd4>
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d10f      	bne.n	8003428 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2220      	movs	r2, #32
 800340c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003414:	f043 0220 	orr.w	r2, r3, #32
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e088      	b.n	800353a <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	699b      	ldr	r3, [r3, #24]
 800342e:	f003 0320 	and.w	r3, r3, #32
 8003432:	2b20      	cmp	r3, #32
 8003434:	bf0c      	ite	eq
 8003436:	2301      	moveq	r3, #1
 8003438:	2300      	movne	r3, #0
 800343a:	b2db      	uxtb	r3, r3
 800343c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	699b      	ldr	r3, [r3, #24]
 8003444:	f003 0310 	and.w	r3, r3, #16
 8003448:	2b10      	cmp	r3, #16
 800344a:	bf0c      	ite	eq
 800344c:	2301      	moveq	r3, #1
 800344e:	2300      	movne	r3, #0
 8003450:	b2db      	uxtb	r3, r3
 8003452:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003454:	7ffb      	ldrb	r3, [r7, #31]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d102      	bne.n	8003460 <HAL_I2C_IsDeviceReady+0x12c>
 800345a:	7fbb      	ldrb	r3, [r7, #30]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d0c4      	beq.n	80033ea <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	699b      	ldr	r3, [r3, #24]
 8003466:	f003 0310 	and.w	r3, r3, #16
 800346a:	2b10      	cmp	r3, #16
 800346c:	d01a      	beq.n	80034a4 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	9300      	str	r3, [sp, #0]
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	2200      	movs	r2, #0
 8003476:	2120      	movs	r1, #32
 8003478:	68f8      	ldr	r0, [r7, #12]
 800347a:	f000 f92f 	bl	80036dc <I2C_WaitOnFlagUntilTimeout>
 800347e:	4603      	mov	r3, r0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d001      	beq.n	8003488 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e058      	b.n	800353a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2220      	movs	r2, #32
 800348e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2220      	movs	r2, #32
 8003494:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2200      	movs	r2, #0
 800349c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80034a0:	2300      	movs	r3, #0
 80034a2:	e04a      	b.n	800353a <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	9300      	str	r3, [sp, #0]
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	2200      	movs	r2, #0
 80034ac:	2120      	movs	r1, #32
 80034ae:	68f8      	ldr	r0, [r7, #12]
 80034b0:	f000 f914 	bl	80036dc <I2C_WaitOnFlagUntilTimeout>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d001      	beq.n	80034be <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e03d      	b.n	800353a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2210      	movs	r2, #16
 80034c4:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2220      	movs	r2, #32
 80034cc:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d118      	bne.n	8003508 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	685a      	ldr	r2, [r3, #4]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034e4:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	9300      	str	r3, [sp, #0]
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	2200      	movs	r2, #0
 80034ee:	2120      	movs	r1, #32
 80034f0:	68f8      	ldr	r0, [r7, #12]
 80034f2:	f000 f8f3 	bl	80036dc <I2C_WaitOnFlagUntilTimeout>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d001      	beq.n	8003500 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e01c      	b.n	800353a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2220      	movs	r2, #32
 8003506:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	3301      	adds	r3, #1
 800350c:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	429a      	cmp	r2, r3
 8003514:	f63f af3b 	bhi.w	800338e <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2220      	movs	r2, #32
 800351c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003524:	f043 0220 	orr.w	r2, r3, #32
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2200      	movs	r2, #0
 8003530:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e000      	b.n	800353a <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8003538:	2302      	movs	r3, #2
  }
}
 800353a:	4618      	mov	r0, r3
 800353c:	3720      	adds	r7, #32
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
	...

08003544 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b086      	sub	sp, #24
 8003548:	af02      	add	r7, sp, #8
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	4608      	mov	r0, r1
 800354e:	4611      	mov	r1, r2
 8003550:	461a      	mov	r2, r3
 8003552:	4603      	mov	r3, r0
 8003554:	817b      	strh	r3, [r7, #10]
 8003556:	460b      	mov	r3, r1
 8003558:	813b      	strh	r3, [r7, #8]
 800355a:	4613      	mov	r3, r2
 800355c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800355e:	88fb      	ldrh	r3, [r7, #6]
 8003560:	b2da      	uxtb	r2, r3
 8003562:	8979      	ldrh	r1, [r7, #10]
 8003564:	4b20      	ldr	r3, [pc, #128]	; (80035e8 <I2C_RequestMemoryWrite+0xa4>)
 8003566:	9300      	str	r3, [sp, #0]
 8003568:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800356c:	68f8      	ldr	r0, [r7, #12]
 800356e:	f000 fad7 	bl	8003b20 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003572:	69fa      	ldr	r2, [r7, #28]
 8003574:	69b9      	ldr	r1, [r7, #24]
 8003576:	68f8      	ldr	r0, [r7, #12]
 8003578:	f000 f8f0 	bl	800375c <I2C_WaitOnTXISFlagUntilTimeout>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d001      	beq.n	8003586 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e02c      	b.n	80035e0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003586:	88fb      	ldrh	r3, [r7, #6]
 8003588:	2b01      	cmp	r3, #1
 800358a:	d105      	bne.n	8003598 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800358c:	893b      	ldrh	r3, [r7, #8]
 800358e:	b2da      	uxtb	r2, r3
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	629a      	str	r2, [r3, #40]	; 0x28
 8003596:	e015      	b.n	80035c4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003598:	893b      	ldrh	r3, [r7, #8]
 800359a:	0a1b      	lsrs	r3, r3, #8
 800359c:	b29b      	uxth	r3, r3
 800359e:	b2da      	uxtb	r2, r3
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035a6:	69fa      	ldr	r2, [r7, #28]
 80035a8:	69b9      	ldr	r1, [r7, #24]
 80035aa:	68f8      	ldr	r0, [r7, #12]
 80035ac:	f000 f8d6 	bl	800375c <I2C_WaitOnTXISFlagUntilTimeout>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d001      	beq.n	80035ba <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e012      	b.n	80035e0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80035ba:	893b      	ldrh	r3, [r7, #8]
 80035bc:	b2da      	uxtb	r2, r3
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	9300      	str	r3, [sp, #0]
 80035c8:	69bb      	ldr	r3, [r7, #24]
 80035ca:	2200      	movs	r2, #0
 80035cc:	2180      	movs	r1, #128	; 0x80
 80035ce:	68f8      	ldr	r0, [r7, #12]
 80035d0:	f000 f884 	bl	80036dc <I2C_WaitOnFlagUntilTimeout>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d001      	beq.n	80035de <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e000      	b.n	80035e0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80035de:	2300      	movs	r3, #0
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3710      	adds	r7, #16
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	80002000 	.word	0x80002000

080035ec <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b086      	sub	sp, #24
 80035f0:	af02      	add	r7, sp, #8
 80035f2:	60f8      	str	r0, [r7, #12]
 80035f4:	4608      	mov	r0, r1
 80035f6:	4611      	mov	r1, r2
 80035f8:	461a      	mov	r2, r3
 80035fa:	4603      	mov	r3, r0
 80035fc:	817b      	strh	r3, [r7, #10]
 80035fe:	460b      	mov	r3, r1
 8003600:	813b      	strh	r3, [r7, #8]
 8003602:	4613      	mov	r3, r2
 8003604:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003606:	88fb      	ldrh	r3, [r7, #6]
 8003608:	b2da      	uxtb	r2, r3
 800360a:	8979      	ldrh	r1, [r7, #10]
 800360c:	4b20      	ldr	r3, [pc, #128]	; (8003690 <I2C_RequestMemoryRead+0xa4>)
 800360e:	9300      	str	r3, [sp, #0]
 8003610:	2300      	movs	r3, #0
 8003612:	68f8      	ldr	r0, [r7, #12]
 8003614:	f000 fa84 	bl	8003b20 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003618:	69fa      	ldr	r2, [r7, #28]
 800361a:	69b9      	ldr	r1, [r7, #24]
 800361c:	68f8      	ldr	r0, [r7, #12]
 800361e:	f000 f89d 	bl	800375c <I2C_WaitOnTXISFlagUntilTimeout>
 8003622:	4603      	mov	r3, r0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d001      	beq.n	800362c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e02c      	b.n	8003686 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800362c:	88fb      	ldrh	r3, [r7, #6]
 800362e:	2b01      	cmp	r3, #1
 8003630:	d105      	bne.n	800363e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003632:	893b      	ldrh	r3, [r7, #8]
 8003634:	b2da      	uxtb	r2, r3
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	629a      	str	r2, [r3, #40]	; 0x28
 800363c:	e015      	b.n	800366a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800363e:	893b      	ldrh	r3, [r7, #8]
 8003640:	0a1b      	lsrs	r3, r3, #8
 8003642:	b29b      	uxth	r3, r3
 8003644:	b2da      	uxtb	r2, r3
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800364c:	69fa      	ldr	r2, [r7, #28]
 800364e:	69b9      	ldr	r1, [r7, #24]
 8003650:	68f8      	ldr	r0, [r7, #12]
 8003652:	f000 f883 	bl	800375c <I2C_WaitOnTXISFlagUntilTimeout>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d001      	beq.n	8003660 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e012      	b.n	8003686 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003660:	893b      	ldrh	r3, [r7, #8]
 8003662:	b2da      	uxtb	r2, r3
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	9300      	str	r3, [sp, #0]
 800366e:	69bb      	ldr	r3, [r7, #24]
 8003670:	2200      	movs	r2, #0
 8003672:	2140      	movs	r1, #64	; 0x40
 8003674:	68f8      	ldr	r0, [r7, #12]
 8003676:	f000 f831 	bl	80036dc <I2C_WaitOnFlagUntilTimeout>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d001      	beq.n	8003684 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e000      	b.n	8003686 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003684:	2300      	movs	r3, #0
}
 8003686:	4618      	mov	r0, r3
 8003688:	3710      	adds	r7, #16
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	80002000 	.word	0x80002000

08003694 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	699b      	ldr	r3, [r3, #24]
 80036a2:	f003 0302 	and.w	r3, r3, #2
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d103      	bne.n	80036b2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	2200      	movs	r2, #0
 80036b0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	699b      	ldr	r3, [r3, #24]
 80036b8:	f003 0301 	and.w	r3, r3, #1
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d007      	beq.n	80036d0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	699a      	ldr	r2, [r3, #24]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f042 0201 	orr.w	r2, r2, #1
 80036ce:	619a      	str	r2, [r3, #24]
  }
}
 80036d0:	bf00      	nop
 80036d2:	370c      	adds	r7, #12
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr

080036dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	60b9      	str	r1, [r7, #8]
 80036e6:	603b      	str	r3, [r7, #0]
 80036e8:	4613      	mov	r3, r2
 80036ea:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036ec:	e022      	b.n	8003734 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036f4:	d01e      	beq.n	8003734 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036f6:	f7fe fe9d 	bl	8002434 <HAL_GetTick>
 80036fa:	4602      	mov	r2, r0
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	683a      	ldr	r2, [r7, #0]
 8003702:	429a      	cmp	r2, r3
 8003704:	d302      	bcc.n	800370c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d113      	bne.n	8003734 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003710:	f043 0220 	orr.w	r2, r3, #32
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2220      	movs	r2, #32
 800371c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2200      	movs	r2, #0
 8003724:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2200      	movs	r2, #0
 800372c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e00f      	b.n	8003754 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	699a      	ldr	r2, [r3, #24]
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	4013      	ands	r3, r2
 800373e:	68ba      	ldr	r2, [r7, #8]
 8003740:	429a      	cmp	r2, r3
 8003742:	bf0c      	ite	eq
 8003744:	2301      	moveq	r3, #1
 8003746:	2300      	movne	r3, #0
 8003748:	b2db      	uxtb	r3, r3
 800374a:	461a      	mov	r2, r3
 800374c:	79fb      	ldrb	r3, [r7, #7]
 800374e:	429a      	cmp	r2, r3
 8003750:	d0cd      	beq.n	80036ee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003752:	2300      	movs	r3, #0
}
 8003754:	4618      	mov	r0, r3
 8003756:	3710      	adds	r7, #16
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}

0800375c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	60f8      	str	r0, [r7, #12]
 8003764:	60b9      	str	r1, [r7, #8]
 8003766:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003768:	e02c      	b.n	80037c4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	68b9      	ldr	r1, [r7, #8]
 800376e:	68f8      	ldr	r0, [r7, #12]
 8003770:	f000 f8ea 	bl	8003948 <I2C_IsErrorOccurred>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d001      	beq.n	800377e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e02a      	b.n	80037d4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003784:	d01e      	beq.n	80037c4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003786:	f7fe fe55 	bl	8002434 <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	68ba      	ldr	r2, [r7, #8]
 8003792:	429a      	cmp	r2, r3
 8003794:	d302      	bcc.n	800379c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d113      	bne.n	80037c4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037a0:	f043 0220 	orr.w	r2, r3, #32
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2220      	movs	r2, #32
 80037ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2200      	movs	r2, #0
 80037b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e007      	b.n	80037d4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	699b      	ldr	r3, [r3, #24]
 80037ca:	f003 0302 	and.w	r3, r3, #2
 80037ce:	2b02      	cmp	r3, #2
 80037d0:	d1cb      	bne.n	800376a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037d2:	2300      	movs	r3, #0
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3710      	adds	r7, #16
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}

080037dc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037e8:	e028      	b.n	800383c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	68b9      	ldr	r1, [r7, #8]
 80037ee:	68f8      	ldr	r0, [r7, #12]
 80037f0:	f000 f8aa 	bl	8003948 <I2C_IsErrorOccurred>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d001      	beq.n	80037fe <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e026      	b.n	800384c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037fe:	f7fe fe19 	bl	8002434 <HAL_GetTick>
 8003802:	4602      	mov	r2, r0
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	68ba      	ldr	r2, [r7, #8]
 800380a:	429a      	cmp	r2, r3
 800380c:	d302      	bcc.n	8003814 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d113      	bne.n	800383c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003818:	f043 0220 	orr.w	r2, r3, #32
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2220      	movs	r2, #32
 8003824:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2200      	movs	r2, #0
 800382c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2200      	movs	r2, #0
 8003834:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e007      	b.n	800384c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	699b      	ldr	r3, [r3, #24]
 8003842:	f003 0320 	and.w	r3, r3, #32
 8003846:	2b20      	cmp	r3, #32
 8003848:	d1cf      	bne.n	80037ea <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800384a:	2300      	movs	r3, #0
}
 800384c:	4618      	mov	r0, r3
 800384e:	3710      	adds	r7, #16
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	60f8      	str	r0, [r7, #12]
 800385c:	60b9      	str	r1, [r7, #8]
 800385e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003860:	e064      	b.n	800392c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	68b9      	ldr	r1, [r7, #8]
 8003866:	68f8      	ldr	r0, [r7, #12]
 8003868:	f000 f86e 	bl	8003948 <I2C_IsErrorOccurred>
 800386c:	4603      	mov	r3, r0
 800386e:	2b00      	cmp	r3, #0
 8003870:	d001      	beq.n	8003876 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e062      	b.n	800393c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	699b      	ldr	r3, [r3, #24]
 800387c:	f003 0320 	and.w	r3, r3, #32
 8003880:	2b20      	cmp	r3, #32
 8003882:	d138      	bne.n	80038f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	699b      	ldr	r3, [r3, #24]
 800388a:	f003 0304 	and.w	r3, r3, #4
 800388e:	2b04      	cmp	r3, #4
 8003890:	d105      	bne.n	800389e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003896:	2b00      	cmp	r3, #0
 8003898:	d001      	beq.n	800389e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800389a:	2300      	movs	r3, #0
 800389c:	e04e      	b.n	800393c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	699b      	ldr	r3, [r3, #24]
 80038a4:	f003 0310 	and.w	r3, r3, #16
 80038a8:	2b10      	cmp	r3, #16
 80038aa:	d107      	bne.n	80038bc <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	2210      	movs	r2, #16
 80038b2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2204      	movs	r2, #4
 80038b8:	645a      	str	r2, [r3, #68]	; 0x44
 80038ba:	e002      	b.n	80038c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2200      	movs	r2, #0
 80038c0:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	2220      	movs	r2, #32
 80038c8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	6859      	ldr	r1, [r3, #4]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	4b1b      	ldr	r3, [pc, #108]	; (8003944 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80038d6:	400b      	ands	r3, r1
 80038d8:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2220      	movs	r2, #32
 80038de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e022      	b.n	800393c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038f6:	f7fe fd9d 	bl	8002434 <HAL_GetTick>
 80038fa:	4602      	mov	r2, r0
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	1ad3      	subs	r3, r2, r3
 8003900:	68ba      	ldr	r2, [r7, #8]
 8003902:	429a      	cmp	r2, r3
 8003904:	d302      	bcc.n	800390c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d10f      	bne.n	800392c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003910:	f043 0220 	orr.w	r2, r3, #32
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2220      	movs	r2, #32
 800391c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2200      	movs	r2, #0
 8003924:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e007      	b.n	800393c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	699b      	ldr	r3, [r3, #24]
 8003932:	f003 0304 	and.w	r3, r3, #4
 8003936:	2b04      	cmp	r3, #4
 8003938:	d193      	bne.n	8003862 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800393a:	2300      	movs	r3, #0
}
 800393c:	4618      	mov	r0, r3
 800393e:	3710      	adds	r7, #16
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}
 8003944:	fe00e800 	.word	0xfe00e800

08003948 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b08a      	sub	sp, #40	; 0x28
 800394c:	af00      	add	r7, sp, #0
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	60b9      	str	r1, [r7, #8]
 8003952:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003954:	2300      	movs	r3, #0
 8003956:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	699b      	ldr	r3, [r3, #24]
 8003960:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003962:	2300      	movs	r3, #0
 8003964:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	f003 0310 	and.w	r3, r3, #16
 8003970:	2b00      	cmp	r3, #0
 8003972:	d075      	beq.n	8003a60 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	2210      	movs	r2, #16
 800397a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800397c:	e056      	b.n	8003a2c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003984:	d052      	beq.n	8003a2c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003986:	f7fe fd55 	bl	8002434 <HAL_GetTick>
 800398a:	4602      	mov	r2, r0
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	1ad3      	subs	r3, r2, r3
 8003990:	68ba      	ldr	r2, [r7, #8]
 8003992:	429a      	cmp	r2, r3
 8003994:	d302      	bcc.n	800399c <I2C_IsErrorOccurred+0x54>
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d147      	bne.n	8003a2c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039a6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80039ae:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	699b      	ldr	r3, [r3, #24]
 80039b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039be:	d12e      	bne.n	8003a1e <I2C_IsErrorOccurred+0xd6>
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039c6:	d02a      	beq.n	8003a1e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80039c8:	7cfb      	ldrb	r3, [r7, #19]
 80039ca:	2b20      	cmp	r3, #32
 80039cc:	d027      	beq.n	8003a1e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	685a      	ldr	r2, [r3, #4]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80039dc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80039de:	f7fe fd29 	bl	8002434 <HAL_GetTick>
 80039e2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80039e4:	e01b      	b.n	8003a1e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80039e6:	f7fe fd25 	bl	8002434 <HAL_GetTick>
 80039ea:	4602      	mov	r2, r0
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	2b19      	cmp	r3, #25
 80039f2:	d914      	bls.n	8003a1e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039f8:	f043 0220 	orr.w	r2, r3, #32
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2220      	movs	r2, #32
 8003a04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2200      	movs	r2, #0
 8003a14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	699b      	ldr	r3, [r3, #24]
 8003a24:	f003 0320 	and.w	r3, r3, #32
 8003a28:	2b20      	cmp	r3, #32
 8003a2a:	d1dc      	bne.n	80039e6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	699b      	ldr	r3, [r3, #24]
 8003a32:	f003 0320 	and.w	r3, r3, #32
 8003a36:	2b20      	cmp	r3, #32
 8003a38:	d003      	beq.n	8003a42 <I2C_IsErrorOccurred+0xfa>
 8003a3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d09d      	beq.n	800397e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003a42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d103      	bne.n	8003a52 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	2220      	movs	r2, #32
 8003a50:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003a52:	6a3b      	ldr	r3, [r7, #32]
 8003a54:	f043 0304 	orr.w	r3, r3, #4
 8003a58:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	699b      	ldr	r3, [r3, #24]
 8003a66:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003a68:	69bb      	ldr	r3, [r7, #24]
 8003a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d00b      	beq.n	8003a8a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003a72:	6a3b      	ldr	r3, [r7, #32]
 8003a74:	f043 0301 	orr.w	r3, r3, #1
 8003a78:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a82:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003a8a:	69bb      	ldr	r3, [r7, #24]
 8003a8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d00b      	beq.n	8003aac <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003a94:	6a3b      	ldr	r3, [r7, #32]
 8003a96:	f043 0308 	orr.w	r3, r3, #8
 8003a9a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003aa4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d00b      	beq.n	8003ace <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003ab6:	6a3b      	ldr	r3, [r7, #32]
 8003ab8:	f043 0302 	orr.w	r3, r3, #2
 8003abc:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ac6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003ace:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d01c      	beq.n	8003b10 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003ad6:	68f8      	ldr	r0, [r7, #12]
 8003ad8:	f7ff fddc 	bl	8003694 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	6859      	ldr	r1, [r3, #4]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	4b0d      	ldr	r3, [pc, #52]	; (8003b1c <I2C_IsErrorOccurred+0x1d4>)
 8003ae8:	400b      	ands	r3, r1
 8003aea:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003af0:	6a3b      	ldr	r3, [r7, #32]
 8003af2:	431a      	orrs	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2220      	movs	r2, #32
 8003afc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003b10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3728      	adds	r7, #40	; 0x28
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	fe00e800 	.word	0xfe00e800

08003b20 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b087      	sub	sp, #28
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	60f8      	str	r0, [r7, #12]
 8003b28:	607b      	str	r3, [r7, #4]
 8003b2a:	460b      	mov	r3, r1
 8003b2c:	817b      	strh	r3, [r7, #10]
 8003b2e:	4613      	mov	r3, r2
 8003b30:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b32:	897b      	ldrh	r3, [r7, #10]
 8003b34:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003b38:	7a7b      	ldrb	r3, [r7, #9]
 8003b3a:	041b      	lsls	r3, r3, #16
 8003b3c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b40:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b46:	6a3b      	ldr	r3, [r7, #32]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003b4e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	685a      	ldr	r2, [r3, #4]
 8003b56:	6a3b      	ldr	r3, [r7, #32]
 8003b58:	0d5b      	lsrs	r3, r3, #21
 8003b5a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003b5e:	4b08      	ldr	r3, [pc, #32]	; (8003b80 <I2C_TransferConfig+0x60>)
 8003b60:	430b      	orrs	r3, r1
 8003b62:	43db      	mvns	r3, r3
 8003b64:	ea02 0103 	and.w	r1, r2, r3
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	697a      	ldr	r2, [r7, #20]
 8003b6e:	430a      	orrs	r2, r1
 8003b70:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003b72:	bf00      	nop
 8003b74:	371c      	adds	r7, #28
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr
 8003b7e:	bf00      	nop
 8003b80:	03ff63ff 	.word	0x03ff63ff

08003b84 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	2b20      	cmp	r3, #32
 8003b98:	d138      	bne.n	8003c0c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d101      	bne.n	8003ba8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003ba4:	2302      	movs	r3, #2
 8003ba6:	e032      	b.n	8003c0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2224      	movs	r2, #36	; 0x24
 8003bb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f022 0201 	bic.w	r2, r2, #1
 8003bc6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003bd6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	6819      	ldr	r1, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	683a      	ldr	r2, [r7, #0]
 8003be4:	430a      	orrs	r2, r1
 8003be6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f042 0201 	orr.w	r2, r2, #1
 8003bf6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2220      	movs	r2, #32
 8003bfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	e000      	b.n	8003c0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003c0c:	2302      	movs	r3, #2
  }
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	370c      	adds	r7, #12
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr

08003c1a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003c1a:	b480      	push	{r7}
 8003c1c:	b085      	sub	sp, #20
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	6078      	str	r0, [r7, #4]
 8003c22:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	2b20      	cmp	r3, #32
 8003c2e:	d139      	bne.n	8003ca4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d101      	bne.n	8003c3e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003c3a:	2302      	movs	r3, #2
 8003c3c:	e033      	b.n	8003ca6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2201      	movs	r2, #1
 8003c42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2224      	movs	r2, #36	; 0x24
 8003c4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f022 0201 	bic.w	r2, r2, #1
 8003c5c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003c6c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	021b      	lsls	r3, r3, #8
 8003c72:	68fa      	ldr	r2, [r7, #12]
 8003c74:	4313      	orrs	r3, r2
 8003c76:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68fa      	ldr	r2, [r7, #12]
 8003c7e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f042 0201 	orr.w	r2, r2, #1
 8003c8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2220      	movs	r2, #32
 8003c94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	e000      	b.n	8003ca6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003ca4:	2302      	movs	r3, #2
  }
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3714      	adds	r7, #20
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr

08003cb2 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8003cb2:	b580      	push	{r7, lr}
 8003cb4:	b084      	sub	sp, #16
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d101      	bne.n	8003cc4 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e041      	b.n	8003d48 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8003ccc:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f245 5255 	movw	r2, #21845	; 0x5555
 8003cd6:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	6852      	ldr	r2, [r2, #4]
 8003ce0:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	6892      	ldr	r2, [r2, #8]
 8003cea:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8003cec:	f7fe fba2 	bl	8002434 <HAL_GetTick>
 8003cf0:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003cf2:	e00f      	b.n	8003d14 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8003cf4:	f7fe fb9e 	bl	8002434 <HAL_GetTick>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	2b31      	cmp	r3, #49	; 0x31
 8003d00:	d908      	bls.n	8003d14 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	f003 0307 	and.w	r3, r3, #7
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d001      	beq.n	8003d14 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8003d10:	2303      	movs	r3, #3
 8003d12:	e019      	b.n	8003d48 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	f003 0307 	and.w	r3, r3, #7
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d1e8      	bne.n	8003cf4 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	691a      	ldr	r2, [r3, #16]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d005      	beq.n	8003d3c <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	68d2      	ldr	r2, [r2, #12]
 8003d38:	611a      	str	r2, [r3, #16]
 8003d3a:	e004      	b.n	8003d46 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8003d44:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d46:	2300      	movs	r3, #0
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3710      	adds	r7, #16
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8003d60:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003d62:	2300      	movs	r3, #0
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	370c      	adds	r7, #12
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr

08003d70 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003d70:	b480      	push	{r7}
 8003d72:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003d74:	4b04      	ldr	r3, [pc, #16]	; (8003d88 <HAL_PWREx_GetVoltageRange+0x18>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr
 8003d86:	bf00      	nop
 8003d88:	40007000 	.word	0x40007000

08003d8c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b085      	sub	sp, #20
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d9a:	d130      	bne.n	8003dfe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d9c:	4b23      	ldr	r3, [pc, #140]	; (8003e2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003da4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003da8:	d038      	beq.n	8003e1c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003daa:	4b20      	ldr	r3, [pc, #128]	; (8003e2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003db2:	4a1e      	ldr	r2, [pc, #120]	; (8003e2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003db4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003db8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003dba:	4b1d      	ldr	r3, [pc, #116]	; (8003e30 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	2232      	movs	r2, #50	; 0x32
 8003dc0:	fb02 f303 	mul.w	r3, r2, r3
 8003dc4:	4a1b      	ldr	r2, [pc, #108]	; (8003e34 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8003dca:	0c9b      	lsrs	r3, r3, #18
 8003dcc:	3301      	adds	r3, #1
 8003dce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003dd0:	e002      	b.n	8003dd8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	3b01      	subs	r3, #1
 8003dd6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003dd8:	4b14      	ldr	r3, [pc, #80]	; (8003e2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003dda:	695b      	ldr	r3, [r3, #20]
 8003ddc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003de0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003de4:	d102      	bne.n	8003dec <HAL_PWREx_ControlVoltageScaling+0x60>
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d1f2      	bne.n	8003dd2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003dec:	4b0f      	ldr	r3, [pc, #60]	; (8003e2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003dee:	695b      	ldr	r3, [r3, #20]
 8003df0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003df4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003df8:	d110      	bne.n	8003e1c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e00f      	b.n	8003e1e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003dfe:	4b0b      	ldr	r3, [pc, #44]	; (8003e2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003e06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e0a:	d007      	beq.n	8003e1c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003e0c:	4b07      	ldr	r3, [pc, #28]	; (8003e2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e14:	4a05      	ldr	r2, [pc, #20]	; (8003e2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e1a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3714      	adds	r7, #20
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr
 8003e2a:	bf00      	nop
 8003e2c:	40007000 	.word	0x40007000
 8003e30:	20000000 	.word	0x20000000
 8003e34:	431bde83 	.word	0x431bde83

08003e38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b088      	sub	sp, #32
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d101      	bne.n	8003e4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e3ca      	b.n	80045e0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e4a:	4b97      	ldr	r3, [pc, #604]	; (80040a8 <HAL_RCC_OscConfig+0x270>)
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	f003 030c 	and.w	r3, r3, #12
 8003e52:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e54:	4b94      	ldr	r3, [pc, #592]	; (80040a8 <HAL_RCC_OscConfig+0x270>)
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	f003 0303 	and.w	r3, r3, #3
 8003e5c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0310 	and.w	r3, r3, #16
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	f000 80e4 	beq.w	8004034 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003e6c:	69bb      	ldr	r3, [r7, #24]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d007      	beq.n	8003e82 <HAL_RCC_OscConfig+0x4a>
 8003e72:	69bb      	ldr	r3, [r7, #24]
 8003e74:	2b0c      	cmp	r3, #12
 8003e76:	f040 808b 	bne.w	8003f90 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	f040 8087 	bne.w	8003f90 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e82:	4b89      	ldr	r3, [pc, #548]	; (80040a8 <HAL_RCC_OscConfig+0x270>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0302 	and.w	r3, r3, #2
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d005      	beq.n	8003e9a <HAL_RCC_OscConfig+0x62>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	699b      	ldr	r3, [r3, #24]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d101      	bne.n	8003e9a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e3a2      	b.n	80045e0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a1a      	ldr	r2, [r3, #32]
 8003e9e:	4b82      	ldr	r3, [pc, #520]	; (80040a8 <HAL_RCC_OscConfig+0x270>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0308 	and.w	r3, r3, #8
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d004      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x7c>
 8003eaa:	4b7f      	ldr	r3, [pc, #508]	; (80040a8 <HAL_RCC_OscConfig+0x270>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003eb2:	e005      	b.n	8003ec0 <HAL_RCC_OscConfig+0x88>
 8003eb4:	4b7c      	ldr	r3, [pc, #496]	; (80040a8 <HAL_RCC_OscConfig+0x270>)
 8003eb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003eba:	091b      	lsrs	r3, r3, #4
 8003ebc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d223      	bcs.n	8003f0c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6a1b      	ldr	r3, [r3, #32]
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f000 fd55 	bl	8004978 <RCC_SetFlashLatencyFromMSIRange>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d001      	beq.n	8003ed8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e383      	b.n	80045e0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ed8:	4b73      	ldr	r3, [pc, #460]	; (80040a8 <HAL_RCC_OscConfig+0x270>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a72      	ldr	r2, [pc, #456]	; (80040a8 <HAL_RCC_OscConfig+0x270>)
 8003ede:	f043 0308 	orr.w	r3, r3, #8
 8003ee2:	6013      	str	r3, [r2, #0]
 8003ee4:	4b70      	ldr	r3, [pc, #448]	; (80040a8 <HAL_RCC_OscConfig+0x270>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6a1b      	ldr	r3, [r3, #32]
 8003ef0:	496d      	ldr	r1, [pc, #436]	; (80040a8 <HAL_RCC_OscConfig+0x270>)
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ef6:	4b6c      	ldr	r3, [pc, #432]	; (80040a8 <HAL_RCC_OscConfig+0x270>)
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	69db      	ldr	r3, [r3, #28]
 8003f02:	021b      	lsls	r3, r3, #8
 8003f04:	4968      	ldr	r1, [pc, #416]	; (80040a8 <HAL_RCC_OscConfig+0x270>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	604b      	str	r3, [r1, #4]
 8003f0a:	e025      	b.n	8003f58 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f0c:	4b66      	ldr	r3, [pc, #408]	; (80040a8 <HAL_RCC_OscConfig+0x270>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a65      	ldr	r2, [pc, #404]	; (80040a8 <HAL_RCC_OscConfig+0x270>)
 8003f12:	f043 0308 	orr.w	r3, r3, #8
 8003f16:	6013      	str	r3, [r2, #0]
 8003f18:	4b63      	ldr	r3, [pc, #396]	; (80040a8 <HAL_RCC_OscConfig+0x270>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6a1b      	ldr	r3, [r3, #32]
 8003f24:	4960      	ldr	r1, [pc, #384]	; (80040a8 <HAL_RCC_OscConfig+0x270>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f2a:	4b5f      	ldr	r3, [pc, #380]	; (80040a8 <HAL_RCC_OscConfig+0x270>)
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	69db      	ldr	r3, [r3, #28]
 8003f36:	021b      	lsls	r3, r3, #8
 8003f38:	495b      	ldr	r1, [pc, #364]	; (80040a8 <HAL_RCC_OscConfig+0x270>)
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f3e:	69bb      	ldr	r3, [r7, #24]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d109      	bne.n	8003f58 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6a1b      	ldr	r3, [r3, #32]
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f000 fd15 	bl	8004978 <RCC_SetFlashLatencyFromMSIRange>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d001      	beq.n	8003f58 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e343      	b.n	80045e0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f58:	f000 fc4a 	bl	80047f0 <HAL_RCC_GetSysClockFreq>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	4b52      	ldr	r3, [pc, #328]	; (80040a8 <HAL_RCC_OscConfig+0x270>)
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	091b      	lsrs	r3, r3, #4
 8003f64:	f003 030f 	and.w	r3, r3, #15
 8003f68:	4950      	ldr	r1, [pc, #320]	; (80040ac <HAL_RCC_OscConfig+0x274>)
 8003f6a:	5ccb      	ldrb	r3, [r1, r3]
 8003f6c:	f003 031f 	and.w	r3, r3, #31
 8003f70:	fa22 f303 	lsr.w	r3, r2, r3
 8003f74:	4a4e      	ldr	r2, [pc, #312]	; (80040b0 <HAL_RCC_OscConfig+0x278>)
 8003f76:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003f78:	4b4e      	ldr	r3, [pc, #312]	; (80040b4 <HAL_RCC_OscConfig+0x27c>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f7fe fa09 	bl	8002394 <HAL_InitTick>
 8003f82:	4603      	mov	r3, r0
 8003f84:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003f86:	7bfb      	ldrb	r3, [r7, #15]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d052      	beq.n	8004032 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003f8c:	7bfb      	ldrb	r3, [r7, #15]
 8003f8e:	e327      	b.n	80045e0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	699b      	ldr	r3, [r3, #24]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d032      	beq.n	8003ffe <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003f98:	4b43      	ldr	r3, [pc, #268]	; (80040a8 <HAL_RCC_OscConfig+0x270>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a42      	ldr	r2, [pc, #264]	; (80040a8 <HAL_RCC_OscConfig+0x270>)
 8003f9e:	f043 0301 	orr.w	r3, r3, #1
 8003fa2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003fa4:	f7fe fa46 	bl	8002434 <HAL_GetTick>
 8003fa8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003faa:	e008      	b.n	8003fbe <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003fac:	f7fe fa42 	bl	8002434 <HAL_GetTick>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	2b02      	cmp	r3, #2
 8003fb8:	d901      	bls.n	8003fbe <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	e310      	b.n	80045e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003fbe:	4b3a      	ldr	r3, [pc, #232]	; (80040a8 <HAL_RCC_OscConfig+0x270>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0302 	and.w	r3, r3, #2
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d0f0      	beq.n	8003fac <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003fca:	4b37      	ldr	r3, [pc, #220]	; (80040a8 <HAL_RCC_OscConfig+0x270>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a36      	ldr	r2, [pc, #216]	; (80040a8 <HAL_RCC_OscConfig+0x270>)
 8003fd0:	f043 0308 	orr.w	r3, r3, #8
 8003fd4:	6013      	str	r3, [r2, #0]
 8003fd6:	4b34      	ldr	r3, [pc, #208]	; (80040a8 <HAL_RCC_OscConfig+0x270>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a1b      	ldr	r3, [r3, #32]
 8003fe2:	4931      	ldr	r1, [pc, #196]	; (80040a8 <HAL_RCC_OscConfig+0x270>)
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003fe8:	4b2f      	ldr	r3, [pc, #188]	; (80040a8 <HAL_RCC_OscConfig+0x270>)
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	69db      	ldr	r3, [r3, #28]
 8003ff4:	021b      	lsls	r3, r3, #8
 8003ff6:	492c      	ldr	r1, [pc, #176]	; (80040a8 <HAL_RCC_OscConfig+0x270>)
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	604b      	str	r3, [r1, #4]
 8003ffc:	e01a      	b.n	8004034 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003ffe:	4b2a      	ldr	r3, [pc, #168]	; (80040a8 <HAL_RCC_OscConfig+0x270>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a29      	ldr	r2, [pc, #164]	; (80040a8 <HAL_RCC_OscConfig+0x270>)
 8004004:	f023 0301 	bic.w	r3, r3, #1
 8004008:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800400a:	f7fe fa13 	bl	8002434 <HAL_GetTick>
 800400e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004010:	e008      	b.n	8004024 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004012:	f7fe fa0f 	bl	8002434 <HAL_GetTick>
 8004016:	4602      	mov	r2, r0
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	2b02      	cmp	r3, #2
 800401e:	d901      	bls.n	8004024 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004020:	2303      	movs	r3, #3
 8004022:	e2dd      	b.n	80045e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004024:	4b20      	ldr	r3, [pc, #128]	; (80040a8 <HAL_RCC_OscConfig+0x270>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 0302 	and.w	r3, r3, #2
 800402c:	2b00      	cmp	r3, #0
 800402e:	d1f0      	bne.n	8004012 <HAL_RCC_OscConfig+0x1da>
 8004030:	e000      	b.n	8004034 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004032:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 0301 	and.w	r3, r3, #1
 800403c:	2b00      	cmp	r3, #0
 800403e:	d074      	beq.n	800412a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004040:	69bb      	ldr	r3, [r7, #24]
 8004042:	2b08      	cmp	r3, #8
 8004044:	d005      	beq.n	8004052 <HAL_RCC_OscConfig+0x21a>
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	2b0c      	cmp	r3, #12
 800404a:	d10e      	bne.n	800406a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	2b03      	cmp	r3, #3
 8004050:	d10b      	bne.n	800406a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004052:	4b15      	ldr	r3, [pc, #84]	; (80040a8 <HAL_RCC_OscConfig+0x270>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d064      	beq.n	8004128 <HAL_RCC_OscConfig+0x2f0>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d160      	bne.n	8004128 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e2ba      	b.n	80045e0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004072:	d106      	bne.n	8004082 <HAL_RCC_OscConfig+0x24a>
 8004074:	4b0c      	ldr	r3, [pc, #48]	; (80040a8 <HAL_RCC_OscConfig+0x270>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a0b      	ldr	r2, [pc, #44]	; (80040a8 <HAL_RCC_OscConfig+0x270>)
 800407a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800407e:	6013      	str	r3, [r2, #0]
 8004080:	e026      	b.n	80040d0 <HAL_RCC_OscConfig+0x298>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800408a:	d115      	bne.n	80040b8 <HAL_RCC_OscConfig+0x280>
 800408c:	4b06      	ldr	r3, [pc, #24]	; (80040a8 <HAL_RCC_OscConfig+0x270>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a05      	ldr	r2, [pc, #20]	; (80040a8 <HAL_RCC_OscConfig+0x270>)
 8004092:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004096:	6013      	str	r3, [r2, #0]
 8004098:	4b03      	ldr	r3, [pc, #12]	; (80040a8 <HAL_RCC_OscConfig+0x270>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a02      	ldr	r2, [pc, #8]	; (80040a8 <HAL_RCC_OscConfig+0x270>)
 800409e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040a2:	6013      	str	r3, [r2, #0]
 80040a4:	e014      	b.n	80040d0 <HAL_RCC_OscConfig+0x298>
 80040a6:	bf00      	nop
 80040a8:	40021000 	.word	0x40021000
 80040ac:	0800fd4c 	.word	0x0800fd4c
 80040b0:	20000000 	.word	0x20000000
 80040b4:	20000004 	.word	0x20000004
 80040b8:	4ba0      	ldr	r3, [pc, #640]	; (800433c <HAL_RCC_OscConfig+0x504>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a9f      	ldr	r2, [pc, #636]	; (800433c <HAL_RCC_OscConfig+0x504>)
 80040be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040c2:	6013      	str	r3, [r2, #0]
 80040c4:	4b9d      	ldr	r3, [pc, #628]	; (800433c <HAL_RCC_OscConfig+0x504>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a9c      	ldr	r2, [pc, #624]	; (800433c <HAL_RCC_OscConfig+0x504>)
 80040ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d013      	beq.n	8004100 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d8:	f7fe f9ac 	bl	8002434 <HAL_GetTick>
 80040dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040de:	e008      	b.n	80040f2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040e0:	f7fe f9a8 	bl	8002434 <HAL_GetTick>
 80040e4:	4602      	mov	r2, r0
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	2b64      	cmp	r3, #100	; 0x64
 80040ec:	d901      	bls.n	80040f2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	e276      	b.n	80045e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040f2:	4b92      	ldr	r3, [pc, #584]	; (800433c <HAL_RCC_OscConfig+0x504>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d0f0      	beq.n	80040e0 <HAL_RCC_OscConfig+0x2a8>
 80040fe:	e014      	b.n	800412a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004100:	f7fe f998 	bl	8002434 <HAL_GetTick>
 8004104:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004106:	e008      	b.n	800411a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004108:	f7fe f994 	bl	8002434 <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	2b64      	cmp	r3, #100	; 0x64
 8004114:	d901      	bls.n	800411a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e262      	b.n	80045e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800411a:	4b88      	ldr	r3, [pc, #544]	; (800433c <HAL_RCC_OscConfig+0x504>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d1f0      	bne.n	8004108 <HAL_RCC_OscConfig+0x2d0>
 8004126:	e000      	b.n	800412a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004128:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0302 	and.w	r3, r3, #2
 8004132:	2b00      	cmp	r3, #0
 8004134:	d060      	beq.n	80041f8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004136:	69bb      	ldr	r3, [r7, #24]
 8004138:	2b04      	cmp	r3, #4
 800413a:	d005      	beq.n	8004148 <HAL_RCC_OscConfig+0x310>
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	2b0c      	cmp	r3, #12
 8004140:	d119      	bne.n	8004176 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	2b02      	cmp	r3, #2
 8004146:	d116      	bne.n	8004176 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004148:	4b7c      	ldr	r3, [pc, #496]	; (800433c <HAL_RCC_OscConfig+0x504>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004150:	2b00      	cmp	r3, #0
 8004152:	d005      	beq.n	8004160 <HAL_RCC_OscConfig+0x328>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d101      	bne.n	8004160 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e23f      	b.n	80045e0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004160:	4b76      	ldr	r3, [pc, #472]	; (800433c <HAL_RCC_OscConfig+0x504>)
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	691b      	ldr	r3, [r3, #16]
 800416c:	061b      	lsls	r3, r3, #24
 800416e:	4973      	ldr	r1, [pc, #460]	; (800433c <HAL_RCC_OscConfig+0x504>)
 8004170:	4313      	orrs	r3, r2
 8004172:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004174:	e040      	b.n	80041f8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d023      	beq.n	80041c6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800417e:	4b6f      	ldr	r3, [pc, #444]	; (800433c <HAL_RCC_OscConfig+0x504>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a6e      	ldr	r2, [pc, #440]	; (800433c <HAL_RCC_OscConfig+0x504>)
 8004184:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004188:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800418a:	f7fe f953 	bl	8002434 <HAL_GetTick>
 800418e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004190:	e008      	b.n	80041a4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004192:	f7fe f94f 	bl	8002434 <HAL_GetTick>
 8004196:	4602      	mov	r2, r0
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	2b02      	cmp	r3, #2
 800419e:	d901      	bls.n	80041a4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80041a0:	2303      	movs	r3, #3
 80041a2:	e21d      	b.n	80045e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041a4:	4b65      	ldr	r3, [pc, #404]	; (800433c <HAL_RCC_OscConfig+0x504>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d0f0      	beq.n	8004192 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041b0:	4b62      	ldr	r3, [pc, #392]	; (800433c <HAL_RCC_OscConfig+0x504>)
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	691b      	ldr	r3, [r3, #16]
 80041bc:	061b      	lsls	r3, r3, #24
 80041be:	495f      	ldr	r1, [pc, #380]	; (800433c <HAL_RCC_OscConfig+0x504>)
 80041c0:	4313      	orrs	r3, r2
 80041c2:	604b      	str	r3, [r1, #4]
 80041c4:	e018      	b.n	80041f8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041c6:	4b5d      	ldr	r3, [pc, #372]	; (800433c <HAL_RCC_OscConfig+0x504>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a5c      	ldr	r2, [pc, #368]	; (800433c <HAL_RCC_OscConfig+0x504>)
 80041cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041d2:	f7fe f92f 	bl	8002434 <HAL_GetTick>
 80041d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041d8:	e008      	b.n	80041ec <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041da:	f7fe f92b 	bl	8002434 <HAL_GetTick>
 80041de:	4602      	mov	r2, r0
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	2b02      	cmp	r3, #2
 80041e6:	d901      	bls.n	80041ec <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80041e8:	2303      	movs	r3, #3
 80041ea:	e1f9      	b.n	80045e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041ec:	4b53      	ldr	r3, [pc, #332]	; (800433c <HAL_RCC_OscConfig+0x504>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d1f0      	bne.n	80041da <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0308 	and.w	r3, r3, #8
 8004200:	2b00      	cmp	r3, #0
 8004202:	d03c      	beq.n	800427e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	695b      	ldr	r3, [r3, #20]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d01c      	beq.n	8004246 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800420c:	4b4b      	ldr	r3, [pc, #300]	; (800433c <HAL_RCC_OscConfig+0x504>)
 800420e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004212:	4a4a      	ldr	r2, [pc, #296]	; (800433c <HAL_RCC_OscConfig+0x504>)
 8004214:	f043 0301 	orr.w	r3, r3, #1
 8004218:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800421c:	f7fe f90a 	bl	8002434 <HAL_GetTick>
 8004220:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004222:	e008      	b.n	8004236 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004224:	f7fe f906 	bl	8002434 <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	2b02      	cmp	r3, #2
 8004230:	d901      	bls.n	8004236 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e1d4      	b.n	80045e0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004236:	4b41      	ldr	r3, [pc, #260]	; (800433c <HAL_RCC_OscConfig+0x504>)
 8004238:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800423c:	f003 0302 	and.w	r3, r3, #2
 8004240:	2b00      	cmp	r3, #0
 8004242:	d0ef      	beq.n	8004224 <HAL_RCC_OscConfig+0x3ec>
 8004244:	e01b      	b.n	800427e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004246:	4b3d      	ldr	r3, [pc, #244]	; (800433c <HAL_RCC_OscConfig+0x504>)
 8004248:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800424c:	4a3b      	ldr	r2, [pc, #236]	; (800433c <HAL_RCC_OscConfig+0x504>)
 800424e:	f023 0301 	bic.w	r3, r3, #1
 8004252:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004256:	f7fe f8ed 	bl	8002434 <HAL_GetTick>
 800425a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800425c:	e008      	b.n	8004270 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800425e:	f7fe f8e9 	bl	8002434 <HAL_GetTick>
 8004262:	4602      	mov	r2, r0
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	1ad3      	subs	r3, r2, r3
 8004268:	2b02      	cmp	r3, #2
 800426a:	d901      	bls.n	8004270 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800426c:	2303      	movs	r3, #3
 800426e:	e1b7      	b.n	80045e0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004270:	4b32      	ldr	r3, [pc, #200]	; (800433c <HAL_RCC_OscConfig+0x504>)
 8004272:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004276:	f003 0302 	and.w	r3, r3, #2
 800427a:	2b00      	cmp	r3, #0
 800427c:	d1ef      	bne.n	800425e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0304 	and.w	r3, r3, #4
 8004286:	2b00      	cmp	r3, #0
 8004288:	f000 80a6 	beq.w	80043d8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800428c:	2300      	movs	r3, #0
 800428e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004290:	4b2a      	ldr	r3, [pc, #168]	; (800433c <HAL_RCC_OscConfig+0x504>)
 8004292:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004294:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004298:	2b00      	cmp	r3, #0
 800429a:	d10d      	bne.n	80042b8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800429c:	4b27      	ldr	r3, [pc, #156]	; (800433c <HAL_RCC_OscConfig+0x504>)
 800429e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042a0:	4a26      	ldr	r2, [pc, #152]	; (800433c <HAL_RCC_OscConfig+0x504>)
 80042a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042a6:	6593      	str	r3, [r2, #88]	; 0x58
 80042a8:	4b24      	ldr	r3, [pc, #144]	; (800433c <HAL_RCC_OscConfig+0x504>)
 80042aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042b0:	60bb      	str	r3, [r7, #8]
 80042b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042b4:	2301      	movs	r3, #1
 80042b6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042b8:	4b21      	ldr	r3, [pc, #132]	; (8004340 <HAL_RCC_OscConfig+0x508>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d118      	bne.n	80042f6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042c4:	4b1e      	ldr	r3, [pc, #120]	; (8004340 <HAL_RCC_OscConfig+0x508>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a1d      	ldr	r2, [pc, #116]	; (8004340 <HAL_RCC_OscConfig+0x508>)
 80042ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042d0:	f7fe f8b0 	bl	8002434 <HAL_GetTick>
 80042d4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042d6:	e008      	b.n	80042ea <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042d8:	f7fe f8ac 	bl	8002434 <HAL_GetTick>
 80042dc:	4602      	mov	r2, r0
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	2b02      	cmp	r3, #2
 80042e4:	d901      	bls.n	80042ea <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e17a      	b.n	80045e0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042ea:	4b15      	ldr	r3, [pc, #84]	; (8004340 <HAL_RCC_OscConfig+0x508>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d0f0      	beq.n	80042d8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d108      	bne.n	8004310 <HAL_RCC_OscConfig+0x4d8>
 80042fe:	4b0f      	ldr	r3, [pc, #60]	; (800433c <HAL_RCC_OscConfig+0x504>)
 8004300:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004304:	4a0d      	ldr	r2, [pc, #52]	; (800433c <HAL_RCC_OscConfig+0x504>)
 8004306:	f043 0301 	orr.w	r3, r3, #1
 800430a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800430e:	e029      	b.n	8004364 <HAL_RCC_OscConfig+0x52c>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	2b05      	cmp	r3, #5
 8004316:	d115      	bne.n	8004344 <HAL_RCC_OscConfig+0x50c>
 8004318:	4b08      	ldr	r3, [pc, #32]	; (800433c <HAL_RCC_OscConfig+0x504>)
 800431a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800431e:	4a07      	ldr	r2, [pc, #28]	; (800433c <HAL_RCC_OscConfig+0x504>)
 8004320:	f043 0304 	orr.w	r3, r3, #4
 8004324:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004328:	4b04      	ldr	r3, [pc, #16]	; (800433c <HAL_RCC_OscConfig+0x504>)
 800432a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800432e:	4a03      	ldr	r2, [pc, #12]	; (800433c <HAL_RCC_OscConfig+0x504>)
 8004330:	f043 0301 	orr.w	r3, r3, #1
 8004334:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004338:	e014      	b.n	8004364 <HAL_RCC_OscConfig+0x52c>
 800433a:	bf00      	nop
 800433c:	40021000 	.word	0x40021000
 8004340:	40007000 	.word	0x40007000
 8004344:	4b9c      	ldr	r3, [pc, #624]	; (80045b8 <HAL_RCC_OscConfig+0x780>)
 8004346:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800434a:	4a9b      	ldr	r2, [pc, #620]	; (80045b8 <HAL_RCC_OscConfig+0x780>)
 800434c:	f023 0301 	bic.w	r3, r3, #1
 8004350:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004354:	4b98      	ldr	r3, [pc, #608]	; (80045b8 <HAL_RCC_OscConfig+0x780>)
 8004356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800435a:	4a97      	ldr	r2, [pc, #604]	; (80045b8 <HAL_RCC_OscConfig+0x780>)
 800435c:	f023 0304 	bic.w	r3, r3, #4
 8004360:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d016      	beq.n	800439a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800436c:	f7fe f862 	bl	8002434 <HAL_GetTick>
 8004370:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004372:	e00a      	b.n	800438a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004374:	f7fe f85e 	bl	8002434 <HAL_GetTick>
 8004378:	4602      	mov	r2, r0
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004382:	4293      	cmp	r3, r2
 8004384:	d901      	bls.n	800438a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e12a      	b.n	80045e0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800438a:	4b8b      	ldr	r3, [pc, #556]	; (80045b8 <HAL_RCC_OscConfig+0x780>)
 800438c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004390:	f003 0302 	and.w	r3, r3, #2
 8004394:	2b00      	cmp	r3, #0
 8004396:	d0ed      	beq.n	8004374 <HAL_RCC_OscConfig+0x53c>
 8004398:	e015      	b.n	80043c6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800439a:	f7fe f84b 	bl	8002434 <HAL_GetTick>
 800439e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80043a0:	e00a      	b.n	80043b8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043a2:	f7fe f847 	bl	8002434 <HAL_GetTick>
 80043a6:	4602      	mov	r2, r0
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	1ad3      	subs	r3, r2, r3
 80043ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d901      	bls.n	80043b8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80043b4:	2303      	movs	r3, #3
 80043b6:	e113      	b.n	80045e0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80043b8:	4b7f      	ldr	r3, [pc, #508]	; (80045b8 <HAL_RCC_OscConfig+0x780>)
 80043ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043be:	f003 0302 	and.w	r3, r3, #2
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d1ed      	bne.n	80043a2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043c6:	7ffb      	ldrb	r3, [r7, #31]
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d105      	bne.n	80043d8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043cc:	4b7a      	ldr	r3, [pc, #488]	; (80045b8 <HAL_RCC_OscConfig+0x780>)
 80043ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043d0:	4a79      	ldr	r2, [pc, #484]	; (80045b8 <HAL_RCC_OscConfig+0x780>)
 80043d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043d6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043dc:	2b00      	cmp	r3, #0
 80043de:	f000 80fe 	beq.w	80045de <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e6:	2b02      	cmp	r3, #2
 80043e8:	f040 80d0 	bne.w	800458c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80043ec:	4b72      	ldr	r3, [pc, #456]	; (80045b8 <HAL_RCC_OscConfig+0x780>)
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	f003 0203 	and.w	r2, r3, #3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d130      	bne.n	8004462 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440a:	3b01      	subs	r3, #1
 800440c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800440e:	429a      	cmp	r2, r3
 8004410:	d127      	bne.n	8004462 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800441c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800441e:	429a      	cmp	r2, r3
 8004420:	d11f      	bne.n	8004462 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800442c:	2a07      	cmp	r2, #7
 800442e:	bf14      	ite	ne
 8004430:	2201      	movne	r2, #1
 8004432:	2200      	moveq	r2, #0
 8004434:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004436:	4293      	cmp	r3, r2
 8004438:	d113      	bne.n	8004462 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004444:	085b      	lsrs	r3, r3, #1
 8004446:	3b01      	subs	r3, #1
 8004448:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800444a:	429a      	cmp	r2, r3
 800444c:	d109      	bne.n	8004462 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004458:	085b      	lsrs	r3, r3, #1
 800445a:	3b01      	subs	r3, #1
 800445c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800445e:	429a      	cmp	r2, r3
 8004460:	d06e      	beq.n	8004540 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004462:	69bb      	ldr	r3, [r7, #24]
 8004464:	2b0c      	cmp	r3, #12
 8004466:	d069      	beq.n	800453c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004468:	4b53      	ldr	r3, [pc, #332]	; (80045b8 <HAL_RCC_OscConfig+0x780>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004470:	2b00      	cmp	r3, #0
 8004472:	d105      	bne.n	8004480 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004474:	4b50      	ldr	r3, [pc, #320]	; (80045b8 <HAL_RCC_OscConfig+0x780>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d001      	beq.n	8004484 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e0ad      	b.n	80045e0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004484:	4b4c      	ldr	r3, [pc, #304]	; (80045b8 <HAL_RCC_OscConfig+0x780>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a4b      	ldr	r2, [pc, #300]	; (80045b8 <HAL_RCC_OscConfig+0x780>)
 800448a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800448e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004490:	f7fd ffd0 	bl	8002434 <HAL_GetTick>
 8004494:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004496:	e008      	b.n	80044aa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004498:	f7fd ffcc 	bl	8002434 <HAL_GetTick>
 800449c:	4602      	mov	r2, r0
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	d901      	bls.n	80044aa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80044a6:	2303      	movs	r3, #3
 80044a8:	e09a      	b.n	80045e0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044aa:	4b43      	ldr	r3, [pc, #268]	; (80045b8 <HAL_RCC_OscConfig+0x780>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d1f0      	bne.n	8004498 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044b6:	4b40      	ldr	r3, [pc, #256]	; (80045b8 <HAL_RCC_OscConfig+0x780>)
 80044b8:	68da      	ldr	r2, [r3, #12]
 80044ba:	4b40      	ldr	r3, [pc, #256]	; (80045bc <HAL_RCC_OscConfig+0x784>)
 80044bc:	4013      	ands	r3, r2
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80044c6:	3a01      	subs	r2, #1
 80044c8:	0112      	lsls	r2, r2, #4
 80044ca:	4311      	orrs	r1, r2
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80044d0:	0212      	lsls	r2, r2, #8
 80044d2:	4311      	orrs	r1, r2
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80044d8:	0852      	lsrs	r2, r2, #1
 80044da:	3a01      	subs	r2, #1
 80044dc:	0552      	lsls	r2, r2, #21
 80044de:	4311      	orrs	r1, r2
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80044e4:	0852      	lsrs	r2, r2, #1
 80044e6:	3a01      	subs	r2, #1
 80044e8:	0652      	lsls	r2, r2, #25
 80044ea:	4311      	orrs	r1, r2
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80044f0:	0912      	lsrs	r2, r2, #4
 80044f2:	0452      	lsls	r2, r2, #17
 80044f4:	430a      	orrs	r2, r1
 80044f6:	4930      	ldr	r1, [pc, #192]	; (80045b8 <HAL_RCC_OscConfig+0x780>)
 80044f8:	4313      	orrs	r3, r2
 80044fa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80044fc:	4b2e      	ldr	r3, [pc, #184]	; (80045b8 <HAL_RCC_OscConfig+0x780>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a2d      	ldr	r2, [pc, #180]	; (80045b8 <HAL_RCC_OscConfig+0x780>)
 8004502:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004506:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004508:	4b2b      	ldr	r3, [pc, #172]	; (80045b8 <HAL_RCC_OscConfig+0x780>)
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	4a2a      	ldr	r2, [pc, #168]	; (80045b8 <HAL_RCC_OscConfig+0x780>)
 800450e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004512:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004514:	f7fd ff8e 	bl	8002434 <HAL_GetTick>
 8004518:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800451a:	e008      	b.n	800452e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800451c:	f7fd ff8a 	bl	8002434 <HAL_GetTick>
 8004520:	4602      	mov	r2, r0
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	2b02      	cmp	r3, #2
 8004528:	d901      	bls.n	800452e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	e058      	b.n	80045e0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800452e:	4b22      	ldr	r3, [pc, #136]	; (80045b8 <HAL_RCC_OscConfig+0x780>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004536:	2b00      	cmp	r3, #0
 8004538:	d0f0      	beq.n	800451c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800453a:	e050      	b.n	80045de <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e04f      	b.n	80045e0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004540:	4b1d      	ldr	r3, [pc, #116]	; (80045b8 <HAL_RCC_OscConfig+0x780>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004548:	2b00      	cmp	r3, #0
 800454a:	d148      	bne.n	80045de <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800454c:	4b1a      	ldr	r3, [pc, #104]	; (80045b8 <HAL_RCC_OscConfig+0x780>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a19      	ldr	r2, [pc, #100]	; (80045b8 <HAL_RCC_OscConfig+0x780>)
 8004552:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004556:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004558:	4b17      	ldr	r3, [pc, #92]	; (80045b8 <HAL_RCC_OscConfig+0x780>)
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	4a16      	ldr	r2, [pc, #88]	; (80045b8 <HAL_RCC_OscConfig+0x780>)
 800455e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004562:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004564:	f7fd ff66 	bl	8002434 <HAL_GetTick>
 8004568:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800456a:	e008      	b.n	800457e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800456c:	f7fd ff62 	bl	8002434 <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	2b02      	cmp	r3, #2
 8004578:	d901      	bls.n	800457e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	e030      	b.n	80045e0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800457e:	4b0e      	ldr	r3, [pc, #56]	; (80045b8 <HAL_RCC_OscConfig+0x780>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004586:	2b00      	cmp	r3, #0
 8004588:	d0f0      	beq.n	800456c <HAL_RCC_OscConfig+0x734>
 800458a:	e028      	b.n	80045de <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800458c:	69bb      	ldr	r3, [r7, #24]
 800458e:	2b0c      	cmp	r3, #12
 8004590:	d023      	beq.n	80045da <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004592:	4b09      	ldr	r3, [pc, #36]	; (80045b8 <HAL_RCC_OscConfig+0x780>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a08      	ldr	r2, [pc, #32]	; (80045b8 <HAL_RCC_OscConfig+0x780>)
 8004598:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800459c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800459e:	f7fd ff49 	bl	8002434 <HAL_GetTick>
 80045a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045a4:	e00c      	b.n	80045c0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045a6:	f7fd ff45 	bl	8002434 <HAL_GetTick>
 80045aa:	4602      	mov	r2, r0
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	1ad3      	subs	r3, r2, r3
 80045b0:	2b02      	cmp	r3, #2
 80045b2:	d905      	bls.n	80045c0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80045b4:	2303      	movs	r3, #3
 80045b6:	e013      	b.n	80045e0 <HAL_RCC_OscConfig+0x7a8>
 80045b8:	40021000 	.word	0x40021000
 80045bc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045c0:	4b09      	ldr	r3, [pc, #36]	; (80045e8 <HAL_RCC_OscConfig+0x7b0>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d1ec      	bne.n	80045a6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80045cc:	4b06      	ldr	r3, [pc, #24]	; (80045e8 <HAL_RCC_OscConfig+0x7b0>)
 80045ce:	68da      	ldr	r2, [r3, #12]
 80045d0:	4905      	ldr	r1, [pc, #20]	; (80045e8 <HAL_RCC_OscConfig+0x7b0>)
 80045d2:	4b06      	ldr	r3, [pc, #24]	; (80045ec <HAL_RCC_OscConfig+0x7b4>)
 80045d4:	4013      	ands	r3, r2
 80045d6:	60cb      	str	r3, [r1, #12]
 80045d8:	e001      	b.n	80045de <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e000      	b.n	80045e0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80045de:	2300      	movs	r3, #0
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3720      	adds	r7, #32
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}
 80045e8:	40021000 	.word	0x40021000
 80045ec:	feeefffc 	.word	0xfeeefffc

080045f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b084      	sub	sp, #16
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d101      	bne.n	8004604 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e0e7      	b.n	80047d4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004604:	4b75      	ldr	r3, [pc, #468]	; (80047dc <HAL_RCC_ClockConfig+0x1ec>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 0307 	and.w	r3, r3, #7
 800460c:	683a      	ldr	r2, [r7, #0]
 800460e:	429a      	cmp	r2, r3
 8004610:	d910      	bls.n	8004634 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004612:	4b72      	ldr	r3, [pc, #456]	; (80047dc <HAL_RCC_ClockConfig+0x1ec>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f023 0207 	bic.w	r2, r3, #7
 800461a:	4970      	ldr	r1, [pc, #448]	; (80047dc <HAL_RCC_ClockConfig+0x1ec>)
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	4313      	orrs	r3, r2
 8004620:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004622:	4b6e      	ldr	r3, [pc, #440]	; (80047dc <HAL_RCC_ClockConfig+0x1ec>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 0307 	and.w	r3, r3, #7
 800462a:	683a      	ldr	r2, [r7, #0]
 800462c:	429a      	cmp	r2, r3
 800462e:	d001      	beq.n	8004634 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e0cf      	b.n	80047d4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0302 	and.w	r3, r3, #2
 800463c:	2b00      	cmp	r3, #0
 800463e:	d010      	beq.n	8004662 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	689a      	ldr	r2, [r3, #8]
 8004644:	4b66      	ldr	r3, [pc, #408]	; (80047e0 <HAL_RCC_ClockConfig+0x1f0>)
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800464c:	429a      	cmp	r2, r3
 800464e:	d908      	bls.n	8004662 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004650:	4b63      	ldr	r3, [pc, #396]	; (80047e0 <HAL_RCC_ClockConfig+0x1f0>)
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	4960      	ldr	r1, [pc, #384]	; (80047e0 <HAL_RCC_ClockConfig+0x1f0>)
 800465e:	4313      	orrs	r3, r2
 8004660:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 0301 	and.w	r3, r3, #1
 800466a:	2b00      	cmp	r3, #0
 800466c:	d04c      	beq.n	8004708 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	2b03      	cmp	r3, #3
 8004674:	d107      	bne.n	8004686 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004676:	4b5a      	ldr	r3, [pc, #360]	; (80047e0 <HAL_RCC_ClockConfig+0x1f0>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d121      	bne.n	80046c6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e0a6      	b.n	80047d4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	2b02      	cmp	r3, #2
 800468c:	d107      	bne.n	800469e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800468e:	4b54      	ldr	r3, [pc, #336]	; (80047e0 <HAL_RCC_ClockConfig+0x1f0>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004696:	2b00      	cmp	r3, #0
 8004698:	d115      	bne.n	80046c6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e09a      	b.n	80047d4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d107      	bne.n	80046b6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80046a6:	4b4e      	ldr	r3, [pc, #312]	; (80047e0 <HAL_RCC_ClockConfig+0x1f0>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 0302 	and.w	r3, r3, #2
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d109      	bne.n	80046c6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e08e      	b.n	80047d4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046b6:	4b4a      	ldr	r3, [pc, #296]	; (80047e0 <HAL_RCC_ClockConfig+0x1f0>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d101      	bne.n	80046c6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e086      	b.n	80047d4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80046c6:	4b46      	ldr	r3, [pc, #280]	; (80047e0 <HAL_RCC_ClockConfig+0x1f0>)
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	f023 0203 	bic.w	r2, r3, #3
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	4943      	ldr	r1, [pc, #268]	; (80047e0 <HAL_RCC_ClockConfig+0x1f0>)
 80046d4:	4313      	orrs	r3, r2
 80046d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046d8:	f7fd feac 	bl	8002434 <HAL_GetTick>
 80046dc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046de:	e00a      	b.n	80046f6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046e0:	f7fd fea8 	bl	8002434 <HAL_GetTick>
 80046e4:	4602      	mov	r2, r0
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d901      	bls.n	80046f6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e06e      	b.n	80047d4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046f6:	4b3a      	ldr	r3, [pc, #232]	; (80047e0 <HAL_RCC_ClockConfig+0x1f0>)
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	f003 020c 	and.w	r2, r3, #12
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	429a      	cmp	r2, r3
 8004706:	d1eb      	bne.n	80046e0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 0302 	and.w	r3, r3, #2
 8004710:	2b00      	cmp	r3, #0
 8004712:	d010      	beq.n	8004736 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	689a      	ldr	r2, [r3, #8]
 8004718:	4b31      	ldr	r3, [pc, #196]	; (80047e0 <HAL_RCC_ClockConfig+0x1f0>)
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004720:	429a      	cmp	r2, r3
 8004722:	d208      	bcs.n	8004736 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004724:	4b2e      	ldr	r3, [pc, #184]	; (80047e0 <HAL_RCC_ClockConfig+0x1f0>)
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	492b      	ldr	r1, [pc, #172]	; (80047e0 <HAL_RCC_ClockConfig+0x1f0>)
 8004732:	4313      	orrs	r3, r2
 8004734:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004736:	4b29      	ldr	r3, [pc, #164]	; (80047dc <HAL_RCC_ClockConfig+0x1ec>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 0307 	and.w	r3, r3, #7
 800473e:	683a      	ldr	r2, [r7, #0]
 8004740:	429a      	cmp	r2, r3
 8004742:	d210      	bcs.n	8004766 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004744:	4b25      	ldr	r3, [pc, #148]	; (80047dc <HAL_RCC_ClockConfig+0x1ec>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f023 0207 	bic.w	r2, r3, #7
 800474c:	4923      	ldr	r1, [pc, #140]	; (80047dc <HAL_RCC_ClockConfig+0x1ec>)
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	4313      	orrs	r3, r2
 8004752:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004754:	4b21      	ldr	r3, [pc, #132]	; (80047dc <HAL_RCC_ClockConfig+0x1ec>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 0307 	and.w	r3, r3, #7
 800475c:	683a      	ldr	r2, [r7, #0]
 800475e:	429a      	cmp	r2, r3
 8004760:	d001      	beq.n	8004766 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e036      	b.n	80047d4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 0304 	and.w	r3, r3, #4
 800476e:	2b00      	cmp	r3, #0
 8004770:	d008      	beq.n	8004784 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004772:	4b1b      	ldr	r3, [pc, #108]	; (80047e0 <HAL_RCC_ClockConfig+0x1f0>)
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	4918      	ldr	r1, [pc, #96]	; (80047e0 <HAL_RCC_ClockConfig+0x1f0>)
 8004780:	4313      	orrs	r3, r2
 8004782:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0308 	and.w	r3, r3, #8
 800478c:	2b00      	cmp	r3, #0
 800478e:	d009      	beq.n	80047a4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004790:	4b13      	ldr	r3, [pc, #76]	; (80047e0 <HAL_RCC_ClockConfig+0x1f0>)
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	691b      	ldr	r3, [r3, #16]
 800479c:	00db      	lsls	r3, r3, #3
 800479e:	4910      	ldr	r1, [pc, #64]	; (80047e0 <HAL_RCC_ClockConfig+0x1f0>)
 80047a0:	4313      	orrs	r3, r2
 80047a2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80047a4:	f000 f824 	bl	80047f0 <HAL_RCC_GetSysClockFreq>
 80047a8:	4602      	mov	r2, r0
 80047aa:	4b0d      	ldr	r3, [pc, #52]	; (80047e0 <HAL_RCC_ClockConfig+0x1f0>)
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	091b      	lsrs	r3, r3, #4
 80047b0:	f003 030f 	and.w	r3, r3, #15
 80047b4:	490b      	ldr	r1, [pc, #44]	; (80047e4 <HAL_RCC_ClockConfig+0x1f4>)
 80047b6:	5ccb      	ldrb	r3, [r1, r3]
 80047b8:	f003 031f 	and.w	r3, r3, #31
 80047bc:	fa22 f303 	lsr.w	r3, r2, r3
 80047c0:	4a09      	ldr	r2, [pc, #36]	; (80047e8 <HAL_RCC_ClockConfig+0x1f8>)
 80047c2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80047c4:	4b09      	ldr	r3, [pc, #36]	; (80047ec <HAL_RCC_ClockConfig+0x1fc>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4618      	mov	r0, r3
 80047ca:	f7fd fde3 	bl	8002394 <HAL_InitTick>
 80047ce:	4603      	mov	r3, r0
 80047d0:	72fb      	strb	r3, [r7, #11]

  return status;
 80047d2:	7afb      	ldrb	r3, [r7, #11]
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3710      	adds	r7, #16
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	40022000 	.word	0x40022000
 80047e0:	40021000 	.word	0x40021000
 80047e4:	0800fd4c 	.word	0x0800fd4c
 80047e8:	20000000 	.word	0x20000000
 80047ec:	20000004 	.word	0x20000004

080047f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b089      	sub	sp, #36	; 0x24
 80047f4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80047f6:	2300      	movs	r3, #0
 80047f8:	61fb      	str	r3, [r7, #28]
 80047fa:	2300      	movs	r3, #0
 80047fc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047fe:	4b3e      	ldr	r3, [pc, #248]	; (80048f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	f003 030c 	and.w	r3, r3, #12
 8004806:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004808:	4b3b      	ldr	r3, [pc, #236]	; (80048f8 <HAL_RCC_GetSysClockFreq+0x108>)
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	f003 0303 	and.w	r3, r3, #3
 8004810:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d005      	beq.n	8004824 <HAL_RCC_GetSysClockFreq+0x34>
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	2b0c      	cmp	r3, #12
 800481c:	d121      	bne.n	8004862 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2b01      	cmp	r3, #1
 8004822:	d11e      	bne.n	8004862 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004824:	4b34      	ldr	r3, [pc, #208]	; (80048f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 0308 	and.w	r3, r3, #8
 800482c:	2b00      	cmp	r3, #0
 800482e:	d107      	bne.n	8004840 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004830:	4b31      	ldr	r3, [pc, #196]	; (80048f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004832:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004836:	0a1b      	lsrs	r3, r3, #8
 8004838:	f003 030f 	and.w	r3, r3, #15
 800483c:	61fb      	str	r3, [r7, #28]
 800483e:	e005      	b.n	800484c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004840:	4b2d      	ldr	r3, [pc, #180]	; (80048f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	091b      	lsrs	r3, r3, #4
 8004846:	f003 030f 	and.w	r3, r3, #15
 800484a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800484c:	4a2b      	ldr	r2, [pc, #172]	; (80048fc <HAL_RCC_GetSysClockFreq+0x10c>)
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004854:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d10d      	bne.n	8004878 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004860:	e00a      	b.n	8004878 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	2b04      	cmp	r3, #4
 8004866:	d102      	bne.n	800486e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004868:	4b25      	ldr	r3, [pc, #148]	; (8004900 <HAL_RCC_GetSysClockFreq+0x110>)
 800486a:	61bb      	str	r3, [r7, #24]
 800486c:	e004      	b.n	8004878 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	2b08      	cmp	r3, #8
 8004872:	d101      	bne.n	8004878 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004874:	4b23      	ldr	r3, [pc, #140]	; (8004904 <HAL_RCC_GetSysClockFreq+0x114>)
 8004876:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	2b0c      	cmp	r3, #12
 800487c:	d134      	bne.n	80048e8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800487e:	4b1e      	ldr	r3, [pc, #120]	; (80048f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	f003 0303 	and.w	r3, r3, #3
 8004886:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	2b02      	cmp	r3, #2
 800488c:	d003      	beq.n	8004896 <HAL_RCC_GetSysClockFreq+0xa6>
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	2b03      	cmp	r3, #3
 8004892:	d003      	beq.n	800489c <HAL_RCC_GetSysClockFreq+0xac>
 8004894:	e005      	b.n	80048a2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004896:	4b1a      	ldr	r3, [pc, #104]	; (8004900 <HAL_RCC_GetSysClockFreq+0x110>)
 8004898:	617b      	str	r3, [r7, #20]
      break;
 800489a:	e005      	b.n	80048a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800489c:	4b19      	ldr	r3, [pc, #100]	; (8004904 <HAL_RCC_GetSysClockFreq+0x114>)
 800489e:	617b      	str	r3, [r7, #20]
      break;
 80048a0:	e002      	b.n	80048a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	617b      	str	r3, [r7, #20]
      break;
 80048a6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80048a8:	4b13      	ldr	r3, [pc, #76]	; (80048f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	091b      	lsrs	r3, r3, #4
 80048ae:	f003 0307 	and.w	r3, r3, #7
 80048b2:	3301      	adds	r3, #1
 80048b4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80048b6:	4b10      	ldr	r3, [pc, #64]	; (80048f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	0a1b      	lsrs	r3, r3, #8
 80048bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048c0:	697a      	ldr	r2, [r7, #20]
 80048c2:	fb03 f202 	mul.w	r2, r3, r2
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048cc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80048ce:	4b0a      	ldr	r3, [pc, #40]	; (80048f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	0e5b      	lsrs	r3, r3, #25
 80048d4:	f003 0303 	and.w	r3, r3, #3
 80048d8:	3301      	adds	r3, #1
 80048da:	005b      	lsls	r3, r3, #1
 80048dc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80048de:	697a      	ldr	r2, [r7, #20]
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80048e6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80048e8:	69bb      	ldr	r3, [r7, #24]
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3724      	adds	r7, #36	; 0x24
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr
 80048f6:	bf00      	nop
 80048f8:	40021000 	.word	0x40021000
 80048fc:	0800fd64 	.word	0x0800fd64
 8004900:	00f42400 	.word	0x00f42400
 8004904:	007a1200 	.word	0x007a1200

08004908 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004908:	b480      	push	{r7}
 800490a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800490c:	4b03      	ldr	r3, [pc, #12]	; (800491c <HAL_RCC_GetHCLKFreq+0x14>)
 800490e:	681b      	ldr	r3, [r3, #0]
}
 8004910:	4618      	mov	r0, r3
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr
 800491a:	bf00      	nop
 800491c:	20000000 	.word	0x20000000

08004920 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004924:	f7ff fff0 	bl	8004908 <HAL_RCC_GetHCLKFreq>
 8004928:	4602      	mov	r2, r0
 800492a:	4b06      	ldr	r3, [pc, #24]	; (8004944 <HAL_RCC_GetPCLK1Freq+0x24>)
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	0a1b      	lsrs	r3, r3, #8
 8004930:	f003 0307 	and.w	r3, r3, #7
 8004934:	4904      	ldr	r1, [pc, #16]	; (8004948 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004936:	5ccb      	ldrb	r3, [r1, r3]
 8004938:	f003 031f 	and.w	r3, r3, #31
 800493c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004940:	4618      	mov	r0, r3
 8004942:	bd80      	pop	{r7, pc}
 8004944:	40021000 	.word	0x40021000
 8004948:	0800fd5c 	.word	0x0800fd5c

0800494c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004950:	f7ff ffda 	bl	8004908 <HAL_RCC_GetHCLKFreq>
 8004954:	4602      	mov	r2, r0
 8004956:	4b06      	ldr	r3, [pc, #24]	; (8004970 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	0adb      	lsrs	r3, r3, #11
 800495c:	f003 0307 	and.w	r3, r3, #7
 8004960:	4904      	ldr	r1, [pc, #16]	; (8004974 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004962:	5ccb      	ldrb	r3, [r1, r3]
 8004964:	f003 031f 	and.w	r3, r3, #31
 8004968:	fa22 f303 	lsr.w	r3, r2, r3
}
 800496c:	4618      	mov	r0, r3
 800496e:	bd80      	pop	{r7, pc}
 8004970:	40021000 	.word	0x40021000
 8004974:	0800fd5c 	.word	0x0800fd5c

08004978 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b086      	sub	sp, #24
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004980:	2300      	movs	r3, #0
 8004982:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004984:	4b2a      	ldr	r3, [pc, #168]	; (8004a30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004988:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800498c:	2b00      	cmp	r3, #0
 800498e:	d003      	beq.n	8004998 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004990:	f7ff f9ee 	bl	8003d70 <HAL_PWREx_GetVoltageRange>
 8004994:	6178      	str	r0, [r7, #20]
 8004996:	e014      	b.n	80049c2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004998:	4b25      	ldr	r3, [pc, #148]	; (8004a30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800499a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800499c:	4a24      	ldr	r2, [pc, #144]	; (8004a30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800499e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049a2:	6593      	str	r3, [r2, #88]	; 0x58
 80049a4:	4b22      	ldr	r3, [pc, #136]	; (8004a30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049ac:	60fb      	str	r3, [r7, #12]
 80049ae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80049b0:	f7ff f9de 	bl	8003d70 <HAL_PWREx_GetVoltageRange>
 80049b4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80049b6:	4b1e      	ldr	r3, [pc, #120]	; (8004a30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049ba:	4a1d      	ldr	r2, [pc, #116]	; (8004a30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049c0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049c8:	d10b      	bne.n	80049e2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2b80      	cmp	r3, #128	; 0x80
 80049ce:	d919      	bls.n	8004a04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2ba0      	cmp	r3, #160	; 0xa0
 80049d4:	d902      	bls.n	80049dc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80049d6:	2302      	movs	r3, #2
 80049d8:	613b      	str	r3, [r7, #16]
 80049da:	e013      	b.n	8004a04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80049dc:	2301      	movs	r3, #1
 80049de:	613b      	str	r3, [r7, #16]
 80049e0:	e010      	b.n	8004a04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2b80      	cmp	r3, #128	; 0x80
 80049e6:	d902      	bls.n	80049ee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80049e8:	2303      	movs	r3, #3
 80049ea:	613b      	str	r3, [r7, #16]
 80049ec:	e00a      	b.n	8004a04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2b80      	cmp	r3, #128	; 0x80
 80049f2:	d102      	bne.n	80049fa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80049f4:	2302      	movs	r3, #2
 80049f6:	613b      	str	r3, [r7, #16]
 80049f8:	e004      	b.n	8004a04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2b70      	cmp	r3, #112	; 0x70
 80049fe:	d101      	bne.n	8004a04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004a00:	2301      	movs	r3, #1
 8004a02:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004a04:	4b0b      	ldr	r3, [pc, #44]	; (8004a34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f023 0207 	bic.w	r2, r3, #7
 8004a0c:	4909      	ldr	r1, [pc, #36]	; (8004a34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	4313      	orrs	r3, r2
 8004a12:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004a14:	4b07      	ldr	r3, [pc, #28]	; (8004a34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 0307 	and.w	r3, r3, #7
 8004a1c:	693a      	ldr	r2, [r7, #16]
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d001      	beq.n	8004a26 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e000      	b.n	8004a28 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004a26:	2300      	movs	r3, #0
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3718      	adds	r7, #24
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}
 8004a30:	40021000 	.word	0x40021000
 8004a34:	40022000 	.word	0x40022000

08004a38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b086      	sub	sp, #24
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004a40:	2300      	movs	r3, #0
 8004a42:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004a44:	2300      	movs	r3, #0
 8004a46:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d041      	beq.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a58:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004a5c:	d02a      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004a5e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004a62:	d824      	bhi.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004a64:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004a68:	d008      	beq.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004a6a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004a6e:	d81e      	bhi.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d00a      	beq.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004a74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a78:	d010      	beq.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004a7a:	e018      	b.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004a7c:	4b86      	ldr	r3, [pc, #536]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	4a85      	ldr	r2, [pc, #532]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a86:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a88:	e015      	b.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	3304      	adds	r3, #4
 8004a8e:	2100      	movs	r1, #0
 8004a90:	4618      	mov	r0, r3
 8004a92:	f000 fabb 	bl	800500c <RCCEx_PLLSAI1_Config>
 8004a96:	4603      	mov	r3, r0
 8004a98:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a9a:	e00c      	b.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	3320      	adds	r3, #32
 8004aa0:	2100      	movs	r1, #0
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f000 fba6 	bl	80051f4 <RCCEx_PLLSAI2_Config>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004aac:	e003      	b.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	74fb      	strb	r3, [r7, #19]
      break;
 8004ab2:	e000      	b.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004ab4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ab6:	7cfb      	ldrb	r3, [r7, #19]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d10b      	bne.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004abc:	4b76      	ldr	r3, [pc, #472]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ac2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004aca:	4973      	ldr	r1, [pc, #460]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004acc:	4313      	orrs	r3, r2
 8004ace:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004ad2:	e001      	b.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ad4:	7cfb      	ldrb	r3, [r7, #19]
 8004ad6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d041      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ae8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004aec:	d02a      	beq.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004aee:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004af2:	d824      	bhi.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004af4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004af8:	d008      	beq.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004afa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004afe:	d81e      	bhi.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d00a      	beq.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004b04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b08:	d010      	beq.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004b0a:	e018      	b.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004b0c:	4b62      	ldr	r3, [pc, #392]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	4a61      	ldr	r2, [pc, #388]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b16:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004b18:	e015      	b.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	3304      	adds	r3, #4
 8004b1e:	2100      	movs	r1, #0
 8004b20:	4618      	mov	r0, r3
 8004b22:	f000 fa73 	bl	800500c <RCCEx_PLLSAI1_Config>
 8004b26:	4603      	mov	r3, r0
 8004b28:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004b2a:	e00c      	b.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	3320      	adds	r3, #32
 8004b30:	2100      	movs	r1, #0
 8004b32:	4618      	mov	r0, r3
 8004b34:	f000 fb5e 	bl	80051f4 <RCCEx_PLLSAI2_Config>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004b3c:	e003      	b.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	74fb      	strb	r3, [r7, #19]
      break;
 8004b42:	e000      	b.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004b44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b46:	7cfb      	ldrb	r3, [r7, #19]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d10b      	bne.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004b4c:	4b52      	ldr	r3, [pc, #328]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b52:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b5a:	494f      	ldr	r1, [pc, #316]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004b62:	e001      	b.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b64:	7cfb      	ldrb	r3, [r7, #19]
 8004b66:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	f000 80a0 	beq.w	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b76:	2300      	movs	r3, #0
 8004b78:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004b7a:	4b47      	ldr	r3, [pc, #284]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d101      	bne.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004b86:	2301      	movs	r3, #1
 8004b88:	e000      	b.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d00d      	beq.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b90:	4b41      	ldr	r3, [pc, #260]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b94:	4a40      	ldr	r2, [pc, #256]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b9a:	6593      	str	r3, [r2, #88]	; 0x58
 8004b9c:	4b3e      	ldr	r3, [pc, #248]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ba0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ba4:	60bb      	str	r3, [r7, #8]
 8004ba6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004bac:	4b3b      	ldr	r3, [pc, #236]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a3a      	ldr	r2, [pc, #232]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004bb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bb6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004bb8:	f7fd fc3c 	bl	8002434 <HAL_GetTick>
 8004bbc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004bbe:	e009      	b.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bc0:	f7fd fc38 	bl	8002434 <HAL_GetTick>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	d902      	bls.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	74fb      	strb	r3, [r7, #19]
        break;
 8004bd2:	e005      	b.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004bd4:	4b31      	ldr	r3, [pc, #196]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d0ef      	beq.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004be0:	7cfb      	ldrb	r3, [r7, #19]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d15c      	bne.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004be6:	4b2c      	ldr	r3, [pc, #176]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bf0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d01f      	beq.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bfe:	697a      	ldr	r2, [r7, #20]
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d019      	beq.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004c04:	4b24      	ldr	r3, [pc, #144]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c0e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c10:	4b21      	ldr	r3, [pc, #132]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c16:	4a20      	ldr	r2, [pc, #128]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004c20:	4b1d      	ldr	r3, [pc, #116]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c26:	4a1c      	ldr	r2, [pc, #112]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004c30:	4a19      	ldr	r2, [pc, #100]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	f003 0301 	and.w	r3, r3, #1
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d016      	beq.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c42:	f7fd fbf7 	bl	8002434 <HAL_GetTick>
 8004c46:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c48:	e00b      	b.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c4a:	f7fd fbf3 	bl	8002434 <HAL_GetTick>
 8004c4e:	4602      	mov	r2, r0
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	1ad3      	subs	r3, r2, r3
 8004c54:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d902      	bls.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004c5c:	2303      	movs	r3, #3
 8004c5e:	74fb      	strb	r3, [r7, #19]
            break;
 8004c60:	e006      	b.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c62:	4b0d      	ldr	r3, [pc, #52]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c68:	f003 0302 	and.w	r3, r3, #2
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d0ec      	beq.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004c70:	7cfb      	ldrb	r3, [r7, #19]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d10c      	bne.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c76:	4b08      	ldr	r3, [pc, #32]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c86:	4904      	ldr	r1, [pc, #16]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004c8e:	e009      	b.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004c90:	7cfb      	ldrb	r3, [r7, #19]
 8004c92:	74bb      	strb	r3, [r7, #18]
 8004c94:	e006      	b.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004c96:	bf00      	nop
 8004c98:	40021000 	.word	0x40021000
 8004c9c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ca0:	7cfb      	ldrb	r3, [r7, #19]
 8004ca2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ca4:	7c7b      	ldrb	r3, [r7, #17]
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d105      	bne.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004caa:	4b9e      	ldr	r3, [pc, #632]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cae:	4a9d      	ldr	r2, [pc, #628]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cb4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 0301 	and.w	r3, r3, #1
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d00a      	beq.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004cc2:	4b98      	ldr	r3, [pc, #608]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cc8:	f023 0203 	bic.w	r2, r3, #3
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd0:	4994      	ldr	r1, [pc, #592]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 0302 	and.w	r3, r3, #2
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d00a      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ce4:	4b8f      	ldr	r3, [pc, #572]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cea:	f023 020c 	bic.w	r2, r3, #12
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cf2:	498c      	ldr	r1, [pc, #560]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0304 	and.w	r3, r3, #4
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d00a      	beq.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004d06:	4b87      	ldr	r3, [pc, #540]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d0c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d14:	4983      	ldr	r1, [pc, #524]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d16:	4313      	orrs	r3, r2
 8004d18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 0308 	and.w	r3, r3, #8
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d00a      	beq.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004d28:	4b7e      	ldr	r3, [pc, #504]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d2e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d36:	497b      	ldr	r1, [pc, #492]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 0310 	and.w	r3, r3, #16
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d00a      	beq.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004d4a:	4b76      	ldr	r3, [pc, #472]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d58:	4972      	ldr	r1, [pc, #456]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f003 0320 	and.w	r3, r3, #32
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d00a      	beq.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d6c:	4b6d      	ldr	r3, [pc, #436]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d72:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d7a:	496a      	ldr	r1, [pc, #424]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d00a      	beq.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d8e:	4b65      	ldr	r3, [pc, #404]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d94:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d9c:	4961      	ldr	r1, [pc, #388]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d00a      	beq.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004db0:	4b5c      	ldr	r3, [pc, #368]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004db6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dbe:	4959      	ldr	r1, [pc, #356]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d00a      	beq.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004dd2:	4b54      	ldr	r3, [pc, #336]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dd8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004de0:	4950      	ldr	r1, [pc, #320]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004de2:	4313      	orrs	r3, r2
 8004de4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d00a      	beq.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004df4:	4b4b      	ldr	r3, [pc, #300]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dfa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e02:	4948      	ldr	r1, [pc, #288]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e04:	4313      	orrs	r3, r2
 8004e06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d00a      	beq.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e16:	4b43      	ldr	r3, [pc, #268]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e1c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e24:	493f      	ldr	r1, [pc, #252]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e26:	4313      	orrs	r3, r2
 8004e28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d028      	beq.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e38:	4b3a      	ldr	r3, [pc, #232]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e3e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e46:	4937      	ldr	r1, [pc, #220]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e56:	d106      	bne.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e58:	4b32      	ldr	r3, [pc, #200]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	4a31      	ldr	r2, [pc, #196]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e62:	60d3      	str	r3, [r2, #12]
 8004e64:	e011      	b.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e6a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e6e:	d10c      	bne.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	3304      	adds	r3, #4
 8004e74:	2101      	movs	r1, #1
 8004e76:	4618      	mov	r0, r3
 8004e78:	f000 f8c8 	bl	800500c <RCCEx_PLLSAI1_Config>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004e80:	7cfb      	ldrb	r3, [r7, #19]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d001      	beq.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004e86:	7cfb      	ldrb	r3, [r7, #19]
 8004e88:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d028      	beq.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004e96:	4b23      	ldr	r3, [pc, #140]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e9c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ea4:	491f      	ldr	r1, [pc, #124]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eb0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004eb4:	d106      	bne.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004eb6:	4b1b      	ldr	r3, [pc, #108]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004eb8:	68db      	ldr	r3, [r3, #12]
 8004eba:	4a1a      	ldr	r2, [pc, #104]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ebc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ec0:	60d3      	str	r3, [r2, #12]
 8004ec2:	e011      	b.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ec8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ecc:	d10c      	bne.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	3304      	adds	r3, #4
 8004ed2:	2101      	movs	r1, #1
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f000 f899 	bl	800500c <RCCEx_PLLSAI1_Config>
 8004eda:	4603      	mov	r3, r0
 8004edc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ede:	7cfb      	ldrb	r3, [r7, #19]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d001      	beq.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004ee4:	7cfb      	ldrb	r3, [r7, #19]
 8004ee6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d02b      	beq.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ef4:	4b0b      	ldr	r3, [pc, #44]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004efa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f02:	4908      	ldr	r1, [pc, #32]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f04:	4313      	orrs	r3, r2
 8004f06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f0e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f12:	d109      	bne.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f14:	4b03      	ldr	r3, [pc, #12]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	4a02      	ldr	r2, [pc, #8]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f1e:	60d3      	str	r3, [r2, #12]
 8004f20:	e014      	b.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004f22:	bf00      	nop
 8004f24:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f2c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f30:	d10c      	bne.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	3304      	adds	r3, #4
 8004f36:	2101      	movs	r1, #1
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f000 f867 	bl	800500c <RCCEx_PLLSAI1_Config>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f42:	7cfb      	ldrb	r3, [r7, #19]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d001      	beq.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004f48:	7cfb      	ldrb	r3, [r7, #19]
 8004f4a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d02f      	beq.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f58:	4b2b      	ldr	r3, [pc, #172]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f5e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f66:	4928      	ldr	r1, [pc, #160]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f76:	d10d      	bne.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	3304      	adds	r3, #4
 8004f7c:	2102      	movs	r1, #2
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f000 f844 	bl	800500c <RCCEx_PLLSAI1_Config>
 8004f84:	4603      	mov	r3, r0
 8004f86:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f88:	7cfb      	ldrb	r3, [r7, #19]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d014      	beq.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004f8e:	7cfb      	ldrb	r3, [r7, #19]
 8004f90:	74bb      	strb	r3, [r7, #18]
 8004f92:	e011      	b.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f9c:	d10c      	bne.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	3320      	adds	r3, #32
 8004fa2:	2102      	movs	r1, #2
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f000 f925 	bl	80051f4 <RCCEx_PLLSAI2_Config>
 8004faa:	4603      	mov	r3, r0
 8004fac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004fae:	7cfb      	ldrb	r3, [r7, #19]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d001      	beq.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004fb4:	7cfb      	ldrb	r3, [r7, #19]
 8004fb6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d00a      	beq.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004fc4:	4b10      	ldr	r3, [pc, #64]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fca:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fd2:	490d      	ldr	r1, [pc, #52]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d00b      	beq.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004fe6:	4b08      	ldr	r3, [pc, #32]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ff6:	4904      	ldr	r1, [pc, #16]	; (8005008 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004ffe:	7cbb      	ldrb	r3, [r7, #18]
}
 8005000:	4618      	mov	r0, r3
 8005002:	3718      	adds	r7, #24
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}
 8005008:	40021000 	.word	0x40021000

0800500c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b084      	sub	sp, #16
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005016:	2300      	movs	r3, #0
 8005018:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800501a:	4b75      	ldr	r3, [pc, #468]	; (80051f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800501c:	68db      	ldr	r3, [r3, #12]
 800501e:	f003 0303 	and.w	r3, r3, #3
 8005022:	2b00      	cmp	r3, #0
 8005024:	d018      	beq.n	8005058 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005026:	4b72      	ldr	r3, [pc, #456]	; (80051f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005028:	68db      	ldr	r3, [r3, #12]
 800502a:	f003 0203 	and.w	r2, r3, #3
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	429a      	cmp	r2, r3
 8005034:	d10d      	bne.n	8005052 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
       ||
 800503a:	2b00      	cmp	r3, #0
 800503c:	d009      	beq.n	8005052 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800503e:	4b6c      	ldr	r3, [pc, #432]	; (80051f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005040:	68db      	ldr	r3, [r3, #12]
 8005042:	091b      	lsrs	r3, r3, #4
 8005044:	f003 0307 	and.w	r3, r3, #7
 8005048:	1c5a      	adds	r2, r3, #1
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	685b      	ldr	r3, [r3, #4]
       ||
 800504e:	429a      	cmp	r2, r3
 8005050:	d047      	beq.n	80050e2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	73fb      	strb	r3, [r7, #15]
 8005056:	e044      	b.n	80050e2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	2b03      	cmp	r3, #3
 800505e:	d018      	beq.n	8005092 <RCCEx_PLLSAI1_Config+0x86>
 8005060:	2b03      	cmp	r3, #3
 8005062:	d825      	bhi.n	80050b0 <RCCEx_PLLSAI1_Config+0xa4>
 8005064:	2b01      	cmp	r3, #1
 8005066:	d002      	beq.n	800506e <RCCEx_PLLSAI1_Config+0x62>
 8005068:	2b02      	cmp	r3, #2
 800506a:	d009      	beq.n	8005080 <RCCEx_PLLSAI1_Config+0x74>
 800506c:	e020      	b.n	80050b0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800506e:	4b60      	ldr	r3, [pc, #384]	; (80051f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 0302 	and.w	r3, r3, #2
 8005076:	2b00      	cmp	r3, #0
 8005078:	d11d      	bne.n	80050b6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800507e:	e01a      	b.n	80050b6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005080:	4b5b      	ldr	r3, [pc, #364]	; (80051f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005088:	2b00      	cmp	r3, #0
 800508a:	d116      	bne.n	80050ba <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005090:	e013      	b.n	80050ba <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005092:	4b57      	ldr	r3, [pc, #348]	; (80051f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800509a:	2b00      	cmp	r3, #0
 800509c:	d10f      	bne.n	80050be <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800509e:	4b54      	ldr	r3, [pc, #336]	; (80051f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d109      	bne.n	80050be <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80050ae:	e006      	b.n	80050be <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	73fb      	strb	r3, [r7, #15]
      break;
 80050b4:	e004      	b.n	80050c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80050b6:	bf00      	nop
 80050b8:	e002      	b.n	80050c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80050ba:	bf00      	nop
 80050bc:	e000      	b.n	80050c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80050be:	bf00      	nop
    }

    if(status == HAL_OK)
 80050c0:	7bfb      	ldrb	r3, [r7, #15]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d10d      	bne.n	80050e2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80050c6:	4b4a      	ldr	r3, [pc, #296]	; (80051f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050c8:	68db      	ldr	r3, [r3, #12]
 80050ca:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6819      	ldr	r1, [r3, #0]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	3b01      	subs	r3, #1
 80050d8:	011b      	lsls	r3, r3, #4
 80050da:	430b      	orrs	r3, r1
 80050dc:	4944      	ldr	r1, [pc, #272]	; (80051f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050de:	4313      	orrs	r3, r2
 80050e0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80050e2:	7bfb      	ldrb	r3, [r7, #15]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d17d      	bne.n	80051e4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80050e8:	4b41      	ldr	r3, [pc, #260]	; (80051f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a40      	ldr	r2, [pc, #256]	; (80051f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050ee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80050f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050f4:	f7fd f99e 	bl	8002434 <HAL_GetTick>
 80050f8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80050fa:	e009      	b.n	8005110 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80050fc:	f7fd f99a 	bl	8002434 <HAL_GetTick>
 8005100:	4602      	mov	r2, r0
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	1ad3      	subs	r3, r2, r3
 8005106:	2b02      	cmp	r3, #2
 8005108:	d902      	bls.n	8005110 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800510a:	2303      	movs	r3, #3
 800510c:	73fb      	strb	r3, [r7, #15]
        break;
 800510e:	e005      	b.n	800511c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005110:	4b37      	ldr	r3, [pc, #220]	; (80051f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005118:	2b00      	cmp	r3, #0
 800511a:	d1ef      	bne.n	80050fc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800511c:	7bfb      	ldrb	r3, [r7, #15]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d160      	bne.n	80051e4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d111      	bne.n	800514c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005128:	4b31      	ldr	r3, [pc, #196]	; (80051f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800512a:	691b      	ldr	r3, [r3, #16]
 800512c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005130:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005134:	687a      	ldr	r2, [r7, #4]
 8005136:	6892      	ldr	r2, [r2, #8]
 8005138:	0211      	lsls	r1, r2, #8
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	68d2      	ldr	r2, [r2, #12]
 800513e:	0912      	lsrs	r2, r2, #4
 8005140:	0452      	lsls	r2, r2, #17
 8005142:	430a      	orrs	r2, r1
 8005144:	492a      	ldr	r1, [pc, #168]	; (80051f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005146:	4313      	orrs	r3, r2
 8005148:	610b      	str	r3, [r1, #16]
 800514a:	e027      	b.n	800519c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	2b01      	cmp	r3, #1
 8005150:	d112      	bne.n	8005178 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005152:	4b27      	ldr	r3, [pc, #156]	; (80051f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005154:	691b      	ldr	r3, [r3, #16]
 8005156:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800515a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800515e:	687a      	ldr	r2, [r7, #4]
 8005160:	6892      	ldr	r2, [r2, #8]
 8005162:	0211      	lsls	r1, r2, #8
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	6912      	ldr	r2, [r2, #16]
 8005168:	0852      	lsrs	r2, r2, #1
 800516a:	3a01      	subs	r2, #1
 800516c:	0552      	lsls	r2, r2, #21
 800516e:	430a      	orrs	r2, r1
 8005170:	491f      	ldr	r1, [pc, #124]	; (80051f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005172:	4313      	orrs	r3, r2
 8005174:	610b      	str	r3, [r1, #16]
 8005176:	e011      	b.n	800519c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005178:	4b1d      	ldr	r3, [pc, #116]	; (80051f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800517a:	691b      	ldr	r3, [r3, #16]
 800517c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005180:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	6892      	ldr	r2, [r2, #8]
 8005188:	0211      	lsls	r1, r2, #8
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	6952      	ldr	r2, [r2, #20]
 800518e:	0852      	lsrs	r2, r2, #1
 8005190:	3a01      	subs	r2, #1
 8005192:	0652      	lsls	r2, r2, #25
 8005194:	430a      	orrs	r2, r1
 8005196:	4916      	ldr	r1, [pc, #88]	; (80051f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005198:	4313      	orrs	r3, r2
 800519a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800519c:	4b14      	ldr	r3, [pc, #80]	; (80051f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a13      	ldr	r2, [pc, #76]	; (80051f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80051a6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051a8:	f7fd f944 	bl	8002434 <HAL_GetTick>
 80051ac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80051ae:	e009      	b.n	80051c4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80051b0:	f7fd f940 	bl	8002434 <HAL_GetTick>
 80051b4:	4602      	mov	r2, r0
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	1ad3      	subs	r3, r2, r3
 80051ba:	2b02      	cmp	r3, #2
 80051bc:	d902      	bls.n	80051c4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80051be:	2303      	movs	r3, #3
 80051c0:	73fb      	strb	r3, [r7, #15]
          break;
 80051c2:	e005      	b.n	80051d0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80051c4:	4b0a      	ldr	r3, [pc, #40]	; (80051f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d0ef      	beq.n	80051b0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80051d0:	7bfb      	ldrb	r3, [r7, #15]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d106      	bne.n	80051e4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80051d6:	4b06      	ldr	r3, [pc, #24]	; (80051f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051d8:	691a      	ldr	r2, [r3, #16]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	699b      	ldr	r3, [r3, #24]
 80051de:	4904      	ldr	r1, [pc, #16]	; (80051f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051e0:	4313      	orrs	r3, r2
 80051e2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80051e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3710      	adds	r7, #16
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	bf00      	nop
 80051f0:	40021000 	.word	0x40021000

080051f4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b084      	sub	sp, #16
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80051fe:	2300      	movs	r3, #0
 8005200:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005202:	4b6a      	ldr	r3, [pc, #424]	; (80053ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8005204:	68db      	ldr	r3, [r3, #12]
 8005206:	f003 0303 	and.w	r3, r3, #3
 800520a:	2b00      	cmp	r3, #0
 800520c:	d018      	beq.n	8005240 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800520e:	4b67      	ldr	r3, [pc, #412]	; (80053ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	f003 0203 	and.w	r2, r3, #3
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	429a      	cmp	r2, r3
 800521c:	d10d      	bne.n	800523a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
       ||
 8005222:	2b00      	cmp	r3, #0
 8005224:	d009      	beq.n	800523a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005226:	4b61      	ldr	r3, [pc, #388]	; (80053ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8005228:	68db      	ldr	r3, [r3, #12]
 800522a:	091b      	lsrs	r3, r3, #4
 800522c:	f003 0307 	and.w	r3, r3, #7
 8005230:	1c5a      	adds	r2, r3, #1
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	685b      	ldr	r3, [r3, #4]
       ||
 8005236:	429a      	cmp	r2, r3
 8005238:	d047      	beq.n	80052ca <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	73fb      	strb	r3, [r7, #15]
 800523e:	e044      	b.n	80052ca <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	2b03      	cmp	r3, #3
 8005246:	d018      	beq.n	800527a <RCCEx_PLLSAI2_Config+0x86>
 8005248:	2b03      	cmp	r3, #3
 800524a:	d825      	bhi.n	8005298 <RCCEx_PLLSAI2_Config+0xa4>
 800524c:	2b01      	cmp	r3, #1
 800524e:	d002      	beq.n	8005256 <RCCEx_PLLSAI2_Config+0x62>
 8005250:	2b02      	cmp	r3, #2
 8005252:	d009      	beq.n	8005268 <RCCEx_PLLSAI2_Config+0x74>
 8005254:	e020      	b.n	8005298 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005256:	4b55      	ldr	r3, [pc, #340]	; (80053ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 0302 	and.w	r3, r3, #2
 800525e:	2b00      	cmp	r3, #0
 8005260:	d11d      	bne.n	800529e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005266:	e01a      	b.n	800529e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005268:	4b50      	ldr	r3, [pc, #320]	; (80053ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005270:	2b00      	cmp	r3, #0
 8005272:	d116      	bne.n	80052a2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005278:	e013      	b.n	80052a2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800527a:	4b4c      	ldr	r3, [pc, #304]	; (80053ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005282:	2b00      	cmp	r3, #0
 8005284:	d10f      	bne.n	80052a6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005286:	4b49      	ldr	r3, [pc, #292]	; (80053ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800528e:	2b00      	cmp	r3, #0
 8005290:	d109      	bne.n	80052a6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005296:	e006      	b.n	80052a6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	73fb      	strb	r3, [r7, #15]
      break;
 800529c:	e004      	b.n	80052a8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800529e:	bf00      	nop
 80052a0:	e002      	b.n	80052a8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80052a2:	bf00      	nop
 80052a4:	e000      	b.n	80052a8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80052a6:	bf00      	nop
    }

    if(status == HAL_OK)
 80052a8:	7bfb      	ldrb	r3, [r7, #15]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d10d      	bne.n	80052ca <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80052ae:	4b3f      	ldr	r3, [pc, #252]	; (80053ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80052b0:	68db      	ldr	r3, [r3, #12]
 80052b2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6819      	ldr	r1, [r3, #0]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	3b01      	subs	r3, #1
 80052c0:	011b      	lsls	r3, r3, #4
 80052c2:	430b      	orrs	r3, r1
 80052c4:	4939      	ldr	r1, [pc, #228]	; (80053ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80052c6:	4313      	orrs	r3, r2
 80052c8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80052ca:	7bfb      	ldrb	r3, [r7, #15]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d167      	bne.n	80053a0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80052d0:	4b36      	ldr	r3, [pc, #216]	; (80053ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a35      	ldr	r2, [pc, #212]	; (80053ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80052d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052dc:	f7fd f8aa 	bl	8002434 <HAL_GetTick>
 80052e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80052e2:	e009      	b.n	80052f8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80052e4:	f7fd f8a6 	bl	8002434 <HAL_GetTick>
 80052e8:	4602      	mov	r2, r0
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	1ad3      	subs	r3, r2, r3
 80052ee:	2b02      	cmp	r3, #2
 80052f0:	d902      	bls.n	80052f8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80052f2:	2303      	movs	r3, #3
 80052f4:	73fb      	strb	r3, [r7, #15]
        break;
 80052f6:	e005      	b.n	8005304 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80052f8:	4b2c      	ldr	r3, [pc, #176]	; (80053ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005300:	2b00      	cmp	r3, #0
 8005302:	d1ef      	bne.n	80052e4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005304:	7bfb      	ldrb	r3, [r7, #15]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d14a      	bne.n	80053a0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d111      	bne.n	8005334 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005310:	4b26      	ldr	r3, [pc, #152]	; (80053ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8005312:	695b      	ldr	r3, [r3, #20]
 8005314:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005318:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	6892      	ldr	r2, [r2, #8]
 8005320:	0211      	lsls	r1, r2, #8
 8005322:	687a      	ldr	r2, [r7, #4]
 8005324:	68d2      	ldr	r2, [r2, #12]
 8005326:	0912      	lsrs	r2, r2, #4
 8005328:	0452      	lsls	r2, r2, #17
 800532a:	430a      	orrs	r2, r1
 800532c:	491f      	ldr	r1, [pc, #124]	; (80053ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800532e:	4313      	orrs	r3, r2
 8005330:	614b      	str	r3, [r1, #20]
 8005332:	e011      	b.n	8005358 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005334:	4b1d      	ldr	r3, [pc, #116]	; (80053ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8005336:	695b      	ldr	r3, [r3, #20]
 8005338:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800533c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005340:	687a      	ldr	r2, [r7, #4]
 8005342:	6892      	ldr	r2, [r2, #8]
 8005344:	0211      	lsls	r1, r2, #8
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	6912      	ldr	r2, [r2, #16]
 800534a:	0852      	lsrs	r2, r2, #1
 800534c:	3a01      	subs	r2, #1
 800534e:	0652      	lsls	r2, r2, #25
 8005350:	430a      	orrs	r2, r1
 8005352:	4916      	ldr	r1, [pc, #88]	; (80053ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8005354:	4313      	orrs	r3, r2
 8005356:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005358:	4b14      	ldr	r3, [pc, #80]	; (80053ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a13      	ldr	r2, [pc, #76]	; (80053ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800535e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005362:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005364:	f7fd f866 	bl	8002434 <HAL_GetTick>
 8005368:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800536a:	e009      	b.n	8005380 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800536c:	f7fd f862 	bl	8002434 <HAL_GetTick>
 8005370:	4602      	mov	r2, r0
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	1ad3      	subs	r3, r2, r3
 8005376:	2b02      	cmp	r3, #2
 8005378:	d902      	bls.n	8005380 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800537a:	2303      	movs	r3, #3
 800537c:	73fb      	strb	r3, [r7, #15]
          break;
 800537e:	e005      	b.n	800538c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005380:	4b0a      	ldr	r3, [pc, #40]	; (80053ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005388:	2b00      	cmp	r3, #0
 800538a:	d0ef      	beq.n	800536c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800538c:	7bfb      	ldrb	r3, [r7, #15]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d106      	bne.n	80053a0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005392:	4b06      	ldr	r3, [pc, #24]	; (80053ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8005394:	695a      	ldr	r2, [r3, #20]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	695b      	ldr	r3, [r3, #20]
 800539a:	4904      	ldr	r1, [pc, #16]	; (80053ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800539c:	4313      	orrs	r3, r2
 800539e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80053a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3710      	adds	r7, #16
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	bf00      	nop
 80053ac:	40021000 	.word	0x40021000

080053b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b084      	sub	sp, #16
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d101      	bne.n	80053c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e095      	b.n	80054ee <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d108      	bne.n	80053dc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053d2:	d009      	beq.n	80053e8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2200      	movs	r2, #0
 80053d8:	61da      	str	r2, [r3, #28]
 80053da:	e005      	b.n	80053e8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2200      	movs	r2, #0
 80053e0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2200      	movs	r2, #0
 80053e6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2200      	movs	r2, #0
 80053ec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d106      	bne.n	8005408 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f7fc fd54 	bl	8001eb0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2202      	movs	r2, #2
 800540c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800541e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	68db      	ldr	r3, [r3, #12]
 8005424:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005428:	d902      	bls.n	8005430 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800542a:	2300      	movs	r3, #0
 800542c:	60fb      	str	r3, [r7, #12]
 800542e:	e002      	b.n	8005436 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005430:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005434:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	68db      	ldr	r3, [r3, #12]
 800543a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800543e:	d007      	beq.n	8005450 <HAL_SPI_Init+0xa0>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005448:	d002      	beq.n	8005450 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2200      	movs	r2, #0
 800544e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005460:	431a      	orrs	r2, r3
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	691b      	ldr	r3, [r3, #16]
 8005466:	f003 0302 	and.w	r3, r3, #2
 800546a:	431a      	orrs	r2, r3
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	695b      	ldr	r3, [r3, #20]
 8005470:	f003 0301 	and.w	r3, r3, #1
 8005474:	431a      	orrs	r2, r3
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	699b      	ldr	r3, [r3, #24]
 800547a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800547e:	431a      	orrs	r2, r3
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	69db      	ldr	r3, [r3, #28]
 8005484:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005488:	431a      	orrs	r2, r3
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a1b      	ldr	r3, [r3, #32]
 800548e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005492:	ea42 0103 	orr.w	r1, r2, r3
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800549a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	430a      	orrs	r2, r1
 80054a4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	699b      	ldr	r3, [r3, #24]
 80054aa:	0c1b      	lsrs	r3, r3, #16
 80054ac:	f003 0204 	and.w	r2, r3, #4
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b4:	f003 0310 	and.w	r3, r3, #16
 80054b8:	431a      	orrs	r2, r3
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054be:	f003 0308 	and.w	r3, r3, #8
 80054c2:	431a      	orrs	r2, r3
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	68db      	ldr	r3, [r3, #12]
 80054c8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80054cc:	ea42 0103 	orr.w	r1, r2, r3
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	430a      	orrs	r2, r1
 80054dc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2201      	movs	r2, #1
 80054e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80054ec:	2300      	movs	r3, #0
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3710      	adds	r7, #16
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}

080054f6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054f6:	b580      	push	{r7, lr}
 80054f8:	b088      	sub	sp, #32
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	60f8      	str	r0, [r7, #12]
 80054fe:	60b9      	str	r1, [r7, #8]
 8005500:	603b      	str	r3, [r7, #0]
 8005502:	4613      	mov	r3, r2
 8005504:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005506:	2300      	movs	r3, #0
 8005508:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005510:	2b01      	cmp	r3, #1
 8005512:	d101      	bne.n	8005518 <HAL_SPI_Transmit+0x22>
 8005514:	2302      	movs	r3, #2
 8005516:	e158      	b.n	80057ca <HAL_SPI_Transmit+0x2d4>
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005520:	f7fc ff88 	bl	8002434 <HAL_GetTick>
 8005524:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005526:	88fb      	ldrh	r3, [r7, #6]
 8005528:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005530:	b2db      	uxtb	r3, r3
 8005532:	2b01      	cmp	r3, #1
 8005534:	d002      	beq.n	800553c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005536:	2302      	movs	r3, #2
 8005538:	77fb      	strb	r3, [r7, #31]
    goto error;
 800553a:	e13d      	b.n	80057b8 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d002      	beq.n	8005548 <HAL_SPI_Transmit+0x52>
 8005542:	88fb      	ldrh	r3, [r7, #6]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d102      	bne.n	800554e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800554c:	e134      	b.n	80057b8 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2203      	movs	r2, #3
 8005552:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2200      	movs	r2, #0
 800555a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	68ba      	ldr	r2, [r7, #8]
 8005560:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	88fa      	ldrh	r2, [r7, #6]
 8005566:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	88fa      	ldrh	r2, [r7, #6]
 800556c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2200      	movs	r2, #0
 8005572:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2200      	movs	r2, #0
 8005578:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2200      	movs	r2, #0
 8005580:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2200      	movs	r2, #0
 8005588:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2200      	movs	r2, #0
 800558e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005598:	d10f      	bne.n	80055ba <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055a8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80055b8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055c4:	2b40      	cmp	r3, #64	; 0x40
 80055c6:	d007      	beq.n	80055d8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80055e0:	d94b      	bls.n	800567a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d002      	beq.n	80055f0 <HAL_SPI_Transmit+0xfa>
 80055ea:	8afb      	ldrh	r3, [r7, #22]
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d13e      	bne.n	800566e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f4:	881a      	ldrh	r2, [r3, #0]
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005600:	1c9a      	adds	r2, r3, #2
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800560a:	b29b      	uxth	r3, r3
 800560c:	3b01      	subs	r3, #1
 800560e:	b29a      	uxth	r2, r3
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005614:	e02b      	b.n	800566e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	f003 0302 	and.w	r3, r3, #2
 8005620:	2b02      	cmp	r3, #2
 8005622:	d112      	bne.n	800564a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005628:	881a      	ldrh	r2, [r3, #0]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005634:	1c9a      	adds	r2, r3, #2
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800563e:	b29b      	uxth	r3, r3
 8005640:	3b01      	subs	r3, #1
 8005642:	b29a      	uxth	r2, r3
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005648:	e011      	b.n	800566e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800564a:	f7fc fef3 	bl	8002434 <HAL_GetTick>
 800564e:	4602      	mov	r2, r0
 8005650:	69bb      	ldr	r3, [r7, #24]
 8005652:	1ad3      	subs	r3, r2, r3
 8005654:	683a      	ldr	r2, [r7, #0]
 8005656:	429a      	cmp	r2, r3
 8005658:	d803      	bhi.n	8005662 <HAL_SPI_Transmit+0x16c>
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005660:	d102      	bne.n	8005668 <HAL_SPI_Transmit+0x172>
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d102      	bne.n	800566e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005668:	2303      	movs	r3, #3
 800566a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800566c:	e0a4      	b.n	80057b8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005672:	b29b      	uxth	r3, r3
 8005674:	2b00      	cmp	r3, #0
 8005676:	d1ce      	bne.n	8005616 <HAL_SPI_Transmit+0x120>
 8005678:	e07c      	b.n	8005774 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d002      	beq.n	8005688 <HAL_SPI_Transmit+0x192>
 8005682:	8afb      	ldrh	r3, [r7, #22]
 8005684:	2b01      	cmp	r3, #1
 8005686:	d170      	bne.n	800576a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800568c:	b29b      	uxth	r3, r3
 800568e:	2b01      	cmp	r3, #1
 8005690:	d912      	bls.n	80056b8 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005696:	881a      	ldrh	r2, [r3, #0]
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a2:	1c9a      	adds	r2, r3, #2
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	3b02      	subs	r3, #2
 80056b0:	b29a      	uxth	r2, r3
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80056b6:	e058      	b.n	800576a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	330c      	adds	r3, #12
 80056c2:	7812      	ldrb	r2, [r2, #0]
 80056c4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ca:	1c5a      	adds	r2, r3, #1
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	3b01      	subs	r3, #1
 80056d8:	b29a      	uxth	r2, r3
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80056de:	e044      	b.n	800576a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	f003 0302 	and.w	r3, r3, #2
 80056ea:	2b02      	cmp	r3, #2
 80056ec:	d12b      	bne.n	8005746 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d912      	bls.n	800571e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056fc:	881a      	ldrh	r2, [r3, #0]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005708:	1c9a      	adds	r2, r3, #2
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005712:	b29b      	uxth	r3, r3
 8005714:	3b02      	subs	r3, #2
 8005716:	b29a      	uxth	r2, r3
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800571c:	e025      	b.n	800576a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	330c      	adds	r3, #12
 8005728:	7812      	ldrb	r2, [r2, #0]
 800572a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005730:	1c5a      	adds	r2, r3, #1
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800573a:	b29b      	uxth	r3, r3
 800573c:	3b01      	subs	r3, #1
 800573e:	b29a      	uxth	r2, r3
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005744:	e011      	b.n	800576a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005746:	f7fc fe75 	bl	8002434 <HAL_GetTick>
 800574a:	4602      	mov	r2, r0
 800574c:	69bb      	ldr	r3, [r7, #24]
 800574e:	1ad3      	subs	r3, r2, r3
 8005750:	683a      	ldr	r2, [r7, #0]
 8005752:	429a      	cmp	r2, r3
 8005754:	d803      	bhi.n	800575e <HAL_SPI_Transmit+0x268>
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800575c:	d102      	bne.n	8005764 <HAL_SPI_Transmit+0x26e>
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d102      	bne.n	800576a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005764:	2303      	movs	r3, #3
 8005766:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005768:	e026      	b.n	80057b8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800576e:	b29b      	uxth	r3, r3
 8005770:	2b00      	cmp	r3, #0
 8005772:	d1b5      	bne.n	80056e0 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005774:	69ba      	ldr	r2, [r7, #24]
 8005776:	6839      	ldr	r1, [r7, #0]
 8005778:	68f8      	ldr	r0, [r7, #12]
 800577a:	f000 f949 	bl	8005a10 <SPI_EndRxTxTransaction>
 800577e:	4603      	mov	r3, r0
 8005780:	2b00      	cmp	r3, #0
 8005782:	d002      	beq.n	800578a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2220      	movs	r2, #32
 8005788:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d10a      	bne.n	80057a8 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005792:	2300      	movs	r3, #0
 8005794:	613b      	str	r3, [r7, #16]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	68db      	ldr	r3, [r3, #12]
 800579c:	613b      	str	r3, [r7, #16]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	613b      	str	r3, [r7, #16]
 80057a6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d002      	beq.n	80057b6 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80057b0:	2301      	movs	r3, #1
 80057b2:	77fb      	strb	r3, [r7, #31]
 80057b4:	e000      	b.n	80057b8 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80057b6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2200      	movs	r2, #0
 80057c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80057c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3720      	adds	r7, #32
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}
	...

080057d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b088      	sub	sp, #32
 80057d8:	af00      	add	r7, sp, #0
 80057da:	60f8      	str	r0, [r7, #12]
 80057dc:	60b9      	str	r1, [r7, #8]
 80057de:	603b      	str	r3, [r7, #0]
 80057e0:	4613      	mov	r3, r2
 80057e2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80057e4:	f7fc fe26 	bl	8002434 <HAL_GetTick>
 80057e8:	4602      	mov	r2, r0
 80057ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ec:	1a9b      	subs	r3, r3, r2
 80057ee:	683a      	ldr	r2, [r7, #0]
 80057f0:	4413      	add	r3, r2
 80057f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80057f4:	f7fc fe1e 	bl	8002434 <HAL_GetTick>
 80057f8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80057fa:	4b39      	ldr	r3, [pc, #228]	; (80058e0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	015b      	lsls	r3, r3, #5
 8005800:	0d1b      	lsrs	r3, r3, #20
 8005802:	69fa      	ldr	r2, [r7, #28]
 8005804:	fb02 f303 	mul.w	r3, r2, r3
 8005808:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800580a:	e054      	b.n	80058b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005812:	d050      	beq.n	80058b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005814:	f7fc fe0e 	bl	8002434 <HAL_GetTick>
 8005818:	4602      	mov	r2, r0
 800581a:	69bb      	ldr	r3, [r7, #24]
 800581c:	1ad3      	subs	r3, r2, r3
 800581e:	69fa      	ldr	r2, [r7, #28]
 8005820:	429a      	cmp	r2, r3
 8005822:	d902      	bls.n	800582a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005824:	69fb      	ldr	r3, [r7, #28]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d13d      	bne.n	80058a6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	685a      	ldr	r2, [r3, #4]
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005838:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005842:	d111      	bne.n	8005868 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800584c:	d004      	beq.n	8005858 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005856:	d107      	bne.n	8005868 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005866:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800586c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005870:	d10f      	bne.n	8005892 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005880:	601a      	str	r2, [r3, #0]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005890:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2201      	movs	r2, #1
 8005896:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2200      	movs	r2, #0
 800589e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80058a2:	2303      	movs	r3, #3
 80058a4:	e017      	b.n	80058d6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d101      	bne.n	80058b0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80058ac:	2300      	movs	r3, #0
 80058ae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	3b01      	subs	r3, #1
 80058b4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	689a      	ldr	r2, [r3, #8]
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	4013      	ands	r3, r2
 80058c0:	68ba      	ldr	r2, [r7, #8]
 80058c2:	429a      	cmp	r2, r3
 80058c4:	bf0c      	ite	eq
 80058c6:	2301      	moveq	r3, #1
 80058c8:	2300      	movne	r3, #0
 80058ca:	b2db      	uxtb	r3, r3
 80058cc:	461a      	mov	r2, r3
 80058ce:	79fb      	ldrb	r3, [r7, #7]
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d19b      	bne.n	800580c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80058d4:	2300      	movs	r3, #0
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3720      	adds	r7, #32
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}
 80058de:	bf00      	nop
 80058e0:	20000000 	.word	0x20000000

080058e4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b08a      	sub	sp, #40	; 0x28
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	60f8      	str	r0, [r7, #12]
 80058ec:	60b9      	str	r1, [r7, #8]
 80058ee:	607a      	str	r2, [r7, #4]
 80058f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80058f2:	2300      	movs	r3, #0
 80058f4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80058f6:	f7fc fd9d 	bl	8002434 <HAL_GetTick>
 80058fa:	4602      	mov	r2, r0
 80058fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058fe:	1a9b      	subs	r3, r3, r2
 8005900:	683a      	ldr	r2, [r7, #0]
 8005902:	4413      	add	r3, r2
 8005904:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005906:	f7fc fd95 	bl	8002434 <HAL_GetTick>
 800590a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	330c      	adds	r3, #12
 8005912:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005914:	4b3d      	ldr	r3, [pc, #244]	; (8005a0c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	4613      	mov	r3, r2
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	4413      	add	r3, r2
 800591e:	00da      	lsls	r2, r3, #3
 8005920:	1ad3      	subs	r3, r2, r3
 8005922:	0d1b      	lsrs	r3, r3, #20
 8005924:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005926:	fb02 f303 	mul.w	r3, r2, r3
 800592a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800592c:	e060      	b.n	80059f0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005934:	d107      	bne.n	8005946 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d104      	bne.n	8005946 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800593c:	69fb      	ldr	r3, [r7, #28]
 800593e:	781b      	ldrb	r3, [r3, #0]
 8005940:	b2db      	uxtb	r3, r3
 8005942:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005944:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800594c:	d050      	beq.n	80059f0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800594e:	f7fc fd71 	bl	8002434 <HAL_GetTick>
 8005952:	4602      	mov	r2, r0
 8005954:	6a3b      	ldr	r3, [r7, #32]
 8005956:	1ad3      	subs	r3, r2, r3
 8005958:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800595a:	429a      	cmp	r2, r3
 800595c:	d902      	bls.n	8005964 <SPI_WaitFifoStateUntilTimeout+0x80>
 800595e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005960:	2b00      	cmp	r3, #0
 8005962:	d13d      	bne.n	80059e0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	685a      	ldr	r2, [r3, #4]
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005972:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800597c:	d111      	bne.n	80059a2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005986:	d004      	beq.n	8005992 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005990:	d107      	bne.n	80059a2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059a0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059aa:	d10f      	bne.n	80059cc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80059ba:	601a      	str	r2, [r3, #0]
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	681a      	ldr	r2, [r3, #0]
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80059ca:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2200      	movs	r2, #0
 80059d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80059dc:	2303      	movs	r3, #3
 80059de:	e010      	b.n	8005a02 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80059e0:	69bb      	ldr	r3, [r7, #24]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d101      	bne.n	80059ea <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80059e6:	2300      	movs	r3, #0
 80059e8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80059ea:	69bb      	ldr	r3, [r7, #24]
 80059ec:	3b01      	subs	r3, #1
 80059ee:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	689a      	ldr	r2, [r3, #8]
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	4013      	ands	r3, r2
 80059fa:	687a      	ldr	r2, [r7, #4]
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d196      	bne.n	800592e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005a00:	2300      	movs	r3, #0
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3728      	adds	r7, #40	; 0x28
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}
 8005a0a:	bf00      	nop
 8005a0c:	20000000 	.word	0x20000000

08005a10 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b086      	sub	sp, #24
 8005a14:	af02      	add	r7, sp, #8
 8005a16:	60f8      	str	r0, [r7, #12]
 8005a18:	60b9      	str	r1, [r7, #8]
 8005a1a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	9300      	str	r3, [sp, #0]
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	2200      	movs	r2, #0
 8005a24:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005a28:	68f8      	ldr	r0, [r7, #12]
 8005a2a:	f7ff ff5b 	bl	80058e4 <SPI_WaitFifoStateUntilTimeout>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d007      	beq.n	8005a44 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a38:	f043 0220 	orr.w	r2, r3, #32
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005a40:	2303      	movs	r3, #3
 8005a42:	e027      	b.n	8005a94 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	9300      	str	r3, [sp, #0]
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	2180      	movs	r1, #128	; 0x80
 8005a4e:	68f8      	ldr	r0, [r7, #12]
 8005a50:	f7ff fec0 	bl	80057d4 <SPI_WaitFlagStateUntilTimeout>
 8005a54:	4603      	mov	r3, r0
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d007      	beq.n	8005a6a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a5e:	f043 0220 	orr.w	r2, r3, #32
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005a66:	2303      	movs	r3, #3
 8005a68:	e014      	b.n	8005a94 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	9300      	str	r3, [sp, #0]
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	2200      	movs	r2, #0
 8005a72:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005a76:	68f8      	ldr	r0, [r7, #12]
 8005a78:	f7ff ff34 	bl	80058e4 <SPI_WaitFifoStateUntilTimeout>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d007      	beq.n	8005a92 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a86:	f043 0220 	orr.w	r2, r3, #32
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005a8e:	2303      	movs	r3, #3
 8005a90:	e000      	b.n	8005a94 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005a92:	2300      	movs	r3, #0
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3710      	adds	r7, #16
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}

08005a9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b082      	sub	sp, #8
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d101      	bne.n	8005aae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e040      	b.n	8005b30 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d106      	bne.n	8005ac4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f7fc fbae 	bl	8002220 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2224      	movs	r2, #36	; 0x24
 8005ac8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f022 0201 	bic.w	r2, r2, #1
 8005ad8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f000 f8c0 	bl	8005c60 <UART_SetConfig>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	d101      	bne.n	8005aea <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	e022      	b.n	8005b30 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d002      	beq.n	8005af8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f000 fb6c 	bl	80061d0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	685a      	ldr	r2, [r3, #4]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	689a      	ldr	r2, [r3, #8]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b16:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f042 0201 	orr.w	r2, r2, #1
 8005b26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f000 fbf3 	bl	8006314 <UART_CheckIdleState>
 8005b2e:	4603      	mov	r3, r0
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3708      	adds	r7, #8
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}

08005b38 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b08a      	sub	sp, #40	; 0x28
 8005b3c:	af02      	add	r7, sp, #8
 8005b3e:	60f8      	str	r0, [r7, #12]
 8005b40:	60b9      	str	r1, [r7, #8]
 8005b42:	603b      	str	r3, [r7, #0]
 8005b44:	4613      	mov	r3, r2
 8005b46:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b4c:	2b20      	cmp	r3, #32
 8005b4e:	f040 8082 	bne.w	8005c56 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d002      	beq.n	8005b5e <HAL_UART_Transmit+0x26>
 8005b58:	88fb      	ldrh	r3, [r7, #6]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d101      	bne.n	8005b62 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	e07a      	b.n	8005c58 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d101      	bne.n	8005b70 <HAL_UART_Transmit+0x38>
 8005b6c:	2302      	movs	r3, #2
 8005b6e:	e073      	b.n	8005c58 <HAL_UART_Transmit+0x120>
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2201      	movs	r2, #1
 8005b74:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2221      	movs	r2, #33	; 0x21
 8005b84:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b86:	f7fc fc55 	bl	8002434 <HAL_GetTick>
 8005b8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	88fa      	ldrh	r2, [r7, #6]
 8005b90:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	88fa      	ldrh	r2, [r7, #6]
 8005b98:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ba4:	d108      	bne.n	8005bb8 <HAL_UART_Transmit+0x80>
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	691b      	ldr	r3, [r3, #16]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d104      	bne.n	8005bb8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	61bb      	str	r3, [r7, #24]
 8005bb6:	e003      	b.n	8005bc0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005bc8:	e02d      	b.n	8005c26 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	9300      	str	r3, [sp, #0]
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	2180      	movs	r1, #128	; 0x80
 8005bd4:	68f8      	ldr	r0, [r7, #12]
 8005bd6:	f000 fbe6 	bl	80063a6 <UART_WaitOnFlagUntilTimeout>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d001      	beq.n	8005be4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005be0:	2303      	movs	r3, #3
 8005be2:	e039      	b.n	8005c58 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005be4:	69fb      	ldr	r3, [r7, #28]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d10b      	bne.n	8005c02 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005bea:	69bb      	ldr	r3, [r7, #24]
 8005bec:	881a      	ldrh	r2, [r3, #0]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005bf6:	b292      	uxth	r2, r2
 8005bf8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005bfa:	69bb      	ldr	r3, [r7, #24]
 8005bfc:	3302      	adds	r3, #2
 8005bfe:	61bb      	str	r3, [r7, #24]
 8005c00:	e008      	b.n	8005c14 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c02:	69fb      	ldr	r3, [r7, #28]
 8005c04:	781a      	ldrb	r2, [r3, #0]
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	b292      	uxth	r2, r2
 8005c0c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005c0e:	69fb      	ldr	r3, [r7, #28]
 8005c10:	3301      	adds	r3, #1
 8005c12:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	3b01      	subs	r3, #1
 8005c1e:	b29a      	uxth	r2, r3
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005c2c:	b29b      	uxth	r3, r3
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d1cb      	bne.n	8005bca <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	9300      	str	r3, [sp, #0]
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	2140      	movs	r1, #64	; 0x40
 8005c3c:	68f8      	ldr	r0, [r7, #12]
 8005c3e:	f000 fbb2 	bl	80063a6 <UART_WaitOnFlagUntilTimeout>
 8005c42:	4603      	mov	r3, r0
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d001      	beq.n	8005c4c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005c48:	2303      	movs	r3, #3
 8005c4a:	e005      	b.n	8005c58 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2220      	movs	r2, #32
 8005c50:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005c52:	2300      	movs	r3, #0
 8005c54:	e000      	b.n	8005c58 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005c56:	2302      	movs	r3, #2
  }
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3720      	adds	r7, #32
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}

08005c60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c64:	b08a      	sub	sp, #40	; 0x28
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	689a      	ldr	r2, [r3, #8]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	691b      	ldr	r3, [r3, #16]
 8005c78:	431a      	orrs	r2, r3
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	695b      	ldr	r3, [r3, #20]
 8005c7e:	431a      	orrs	r2, r3
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	69db      	ldr	r3, [r3, #28]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	4ba4      	ldr	r3, [pc, #656]	; (8005f20 <UART_SetConfig+0x2c0>)
 8005c90:	4013      	ands	r3, r2
 8005c92:	68fa      	ldr	r2, [r7, #12]
 8005c94:	6812      	ldr	r2, [r2, #0]
 8005c96:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005c98:	430b      	orrs	r3, r1
 8005c9a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	68da      	ldr	r2, [r3, #12]
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	430a      	orrs	r2, r1
 8005cb0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	699b      	ldr	r3, [r3, #24]
 8005cb6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a99      	ldr	r2, [pc, #612]	; (8005f24 <UART_SetConfig+0x2c4>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d004      	beq.n	8005ccc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	6a1b      	ldr	r3, [r3, #32]
 8005cc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cdc:	430a      	orrs	r2, r1
 8005cde:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a90      	ldr	r2, [pc, #576]	; (8005f28 <UART_SetConfig+0x2c8>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d126      	bne.n	8005d38 <UART_SetConfig+0xd8>
 8005cea:	4b90      	ldr	r3, [pc, #576]	; (8005f2c <UART_SetConfig+0x2cc>)
 8005cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cf0:	f003 0303 	and.w	r3, r3, #3
 8005cf4:	2b03      	cmp	r3, #3
 8005cf6:	d81b      	bhi.n	8005d30 <UART_SetConfig+0xd0>
 8005cf8:	a201      	add	r2, pc, #4	; (adr r2, 8005d00 <UART_SetConfig+0xa0>)
 8005cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cfe:	bf00      	nop
 8005d00:	08005d11 	.word	0x08005d11
 8005d04:	08005d21 	.word	0x08005d21
 8005d08:	08005d19 	.word	0x08005d19
 8005d0c:	08005d29 	.word	0x08005d29
 8005d10:	2301      	movs	r3, #1
 8005d12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d16:	e116      	b.n	8005f46 <UART_SetConfig+0x2e6>
 8005d18:	2302      	movs	r3, #2
 8005d1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d1e:	e112      	b.n	8005f46 <UART_SetConfig+0x2e6>
 8005d20:	2304      	movs	r3, #4
 8005d22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d26:	e10e      	b.n	8005f46 <UART_SetConfig+0x2e6>
 8005d28:	2308      	movs	r3, #8
 8005d2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d2e:	e10a      	b.n	8005f46 <UART_SetConfig+0x2e6>
 8005d30:	2310      	movs	r3, #16
 8005d32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d36:	e106      	b.n	8005f46 <UART_SetConfig+0x2e6>
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a7c      	ldr	r2, [pc, #496]	; (8005f30 <UART_SetConfig+0x2d0>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d138      	bne.n	8005db4 <UART_SetConfig+0x154>
 8005d42:	4b7a      	ldr	r3, [pc, #488]	; (8005f2c <UART_SetConfig+0x2cc>)
 8005d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d48:	f003 030c 	and.w	r3, r3, #12
 8005d4c:	2b0c      	cmp	r3, #12
 8005d4e:	d82d      	bhi.n	8005dac <UART_SetConfig+0x14c>
 8005d50:	a201      	add	r2, pc, #4	; (adr r2, 8005d58 <UART_SetConfig+0xf8>)
 8005d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d56:	bf00      	nop
 8005d58:	08005d8d 	.word	0x08005d8d
 8005d5c:	08005dad 	.word	0x08005dad
 8005d60:	08005dad 	.word	0x08005dad
 8005d64:	08005dad 	.word	0x08005dad
 8005d68:	08005d9d 	.word	0x08005d9d
 8005d6c:	08005dad 	.word	0x08005dad
 8005d70:	08005dad 	.word	0x08005dad
 8005d74:	08005dad 	.word	0x08005dad
 8005d78:	08005d95 	.word	0x08005d95
 8005d7c:	08005dad 	.word	0x08005dad
 8005d80:	08005dad 	.word	0x08005dad
 8005d84:	08005dad 	.word	0x08005dad
 8005d88:	08005da5 	.word	0x08005da5
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d92:	e0d8      	b.n	8005f46 <UART_SetConfig+0x2e6>
 8005d94:	2302      	movs	r3, #2
 8005d96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d9a:	e0d4      	b.n	8005f46 <UART_SetConfig+0x2e6>
 8005d9c:	2304      	movs	r3, #4
 8005d9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005da2:	e0d0      	b.n	8005f46 <UART_SetConfig+0x2e6>
 8005da4:	2308      	movs	r3, #8
 8005da6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005daa:	e0cc      	b.n	8005f46 <UART_SetConfig+0x2e6>
 8005dac:	2310      	movs	r3, #16
 8005dae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005db2:	e0c8      	b.n	8005f46 <UART_SetConfig+0x2e6>
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a5e      	ldr	r2, [pc, #376]	; (8005f34 <UART_SetConfig+0x2d4>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d125      	bne.n	8005e0a <UART_SetConfig+0x1aa>
 8005dbe:	4b5b      	ldr	r3, [pc, #364]	; (8005f2c <UART_SetConfig+0x2cc>)
 8005dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dc4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005dc8:	2b30      	cmp	r3, #48	; 0x30
 8005dca:	d016      	beq.n	8005dfa <UART_SetConfig+0x19a>
 8005dcc:	2b30      	cmp	r3, #48	; 0x30
 8005dce:	d818      	bhi.n	8005e02 <UART_SetConfig+0x1a2>
 8005dd0:	2b20      	cmp	r3, #32
 8005dd2:	d00a      	beq.n	8005dea <UART_SetConfig+0x18a>
 8005dd4:	2b20      	cmp	r3, #32
 8005dd6:	d814      	bhi.n	8005e02 <UART_SetConfig+0x1a2>
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d002      	beq.n	8005de2 <UART_SetConfig+0x182>
 8005ddc:	2b10      	cmp	r3, #16
 8005dde:	d008      	beq.n	8005df2 <UART_SetConfig+0x192>
 8005de0:	e00f      	b.n	8005e02 <UART_SetConfig+0x1a2>
 8005de2:	2300      	movs	r3, #0
 8005de4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005de8:	e0ad      	b.n	8005f46 <UART_SetConfig+0x2e6>
 8005dea:	2302      	movs	r3, #2
 8005dec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005df0:	e0a9      	b.n	8005f46 <UART_SetConfig+0x2e6>
 8005df2:	2304      	movs	r3, #4
 8005df4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005df8:	e0a5      	b.n	8005f46 <UART_SetConfig+0x2e6>
 8005dfa:	2308      	movs	r3, #8
 8005dfc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e00:	e0a1      	b.n	8005f46 <UART_SetConfig+0x2e6>
 8005e02:	2310      	movs	r3, #16
 8005e04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e08:	e09d      	b.n	8005f46 <UART_SetConfig+0x2e6>
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a4a      	ldr	r2, [pc, #296]	; (8005f38 <UART_SetConfig+0x2d8>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d125      	bne.n	8005e60 <UART_SetConfig+0x200>
 8005e14:	4b45      	ldr	r3, [pc, #276]	; (8005f2c <UART_SetConfig+0x2cc>)
 8005e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e1a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005e1e:	2bc0      	cmp	r3, #192	; 0xc0
 8005e20:	d016      	beq.n	8005e50 <UART_SetConfig+0x1f0>
 8005e22:	2bc0      	cmp	r3, #192	; 0xc0
 8005e24:	d818      	bhi.n	8005e58 <UART_SetConfig+0x1f8>
 8005e26:	2b80      	cmp	r3, #128	; 0x80
 8005e28:	d00a      	beq.n	8005e40 <UART_SetConfig+0x1e0>
 8005e2a:	2b80      	cmp	r3, #128	; 0x80
 8005e2c:	d814      	bhi.n	8005e58 <UART_SetConfig+0x1f8>
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d002      	beq.n	8005e38 <UART_SetConfig+0x1d8>
 8005e32:	2b40      	cmp	r3, #64	; 0x40
 8005e34:	d008      	beq.n	8005e48 <UART_SetConfig+0x1e8>
 8005e36:	e00f      	b.n	8005e58 <UART_SetConfig+0x1f8>
 8005e38:	2300      	movs	r3, #0
 8005e3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e3e:	e082      	b.n	8005f46 <UART_SetConfig+0x2e6>
 8005e40:	2302      	movs	r3, #2
 8005e42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e46:	e07e      	b.n	8005f46 <UART_SetConfig+0x2e6>
 8005e48:	2304      	movs	r3, #4
 8005e4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e4e:	e07a      	b.n	8005f46 <UART_SetConfig+0x2e6>
 8005e50:	2308      	movs	r3, #8
 8005e52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e56:	e076      	b.n	8005f46 <UART_SetConfig+0x2e6>
 8005e58:	2310      	movs	r3, #16
 8005e5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e5e:	e072      	b.n	8005f46 <UART_SetConfig+0x2e6>
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a35      	ldr	r2, [pc, #212]	; (8005f3c <UART_SetConfig+0x2dc>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d12a      	bne.n	8005ec0 <UART_SetConfig+0x260>
 8005e6a:	4b30      	ldr	r3, [pc, #192]	; (8005f2c <UART_SetConfig+0x2cc>)
 8005e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e74:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e78:	d01a      	beq.n	8005eb0 <UART_SetConfig+0x250>
 8005e7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e7e:	d81b      	bhi.n	8005eb8 <UART_SetConfig+0x258>
 8005e80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e84:	d00c      	beq.n	8005ea0 <UART_SetConfig+0x240>
 8005e86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e8a:	d815      	bhi.n	8005eb8 <UART_SetConfig+0x258>
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d003      	beq.n	8005e98 <UART_SetConfig+0x238>
 8005e90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e94:	d008      	beq.n	8005ea8 <UART_SetConfig+0x248>
 8005e96:	e00f      	b.n	8005eb8 <UART_SetConfig+0x258>
 8005e98:	2300      	movs	r3, #0
 8005e9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e9e:	e052      	b.n	8005f46 <UART_SetConfig+0x2e6>
 8005ea0:	2302      	movs	r3, #2
 8005ea2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ea6:	e04e      	b.n	8005f46 <UART_SetConfig+0x2e6>
 8005ea8:	2304      	movs	r3, #4
 8005eaa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005eae:	e04a      	b.n	8005f46 <UART_SetConfig+0x2e6>
 8005eb0:	2308      	movs	r3, #8
 8005eb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005eb6:	e046      	b.n	8005f46 <UART_SetConfig+0x2e6>
 8005eb8:	2310      	movs	r3, #16
 8005eba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ebe:	e042      	b.n	8005f46 <UART_SetConfig+0x2e6>
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a17      	ldr	r2, [pc, #92]	; (8005f24 <UART_SetConfig+0x2c4>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d13a      	bne.n	8005f40 <UART_SetConfig+0x2e0>
 8005eca:	4b18      	ldr	r3, [pc, #96]	; (8005f2c <UART_SetConfig+0x2cc>)
 8005ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ed0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005ed4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ed8:	d01a      	beq.n	8005f10 <UART_SetConfig+0x2b0>
 8005eda:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ede:	d81b      	bhi.n	8005f18 <UART_SetConfig+0x2b8>
 8005ee0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ee4:	d00c      	beq.n	8005f00 <UART_SetConfig+0x2a0>
 8005ee6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005eea:	d815      	bhi.n	8005f18 <UART_SetConfig+0x2b8>
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d003      	beq.n	8005ef8 <UART_SetConfig+0x298>
 8005ef0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ef4:	d008      	beq.n	8005f08 <UART_SetConfig+0x2a8>
 8005ef6:	e00f      	b.n	8005f18 <UART_SetConfig+0x2b8>
 8005ef8:	2300      	movs	r3, #0
 8005efa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005efe:	e022      	b.n	8005f46 <UART_SetConfig+0x2e6>
 8005f00:	2302      	movs	r3, #2
 8005f02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f06:	e01e      	b.n	8005f46 <UART_SetConfig+0x2e6>
 8005f08:	2304      	movs	r3, #4
 8005f0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f0e:	e01a      	b.n	8005f46 <UART_SetConfig+0x2e6>
 8005f10:	2308      	movs	r3, #8
 8005f12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f16:	e016      	b.n	8005f46 <UART_SetConfig+0x2e6>
 8005f18:	2310      	movs	r3, #16
 8005f1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f1e:	e012      	b.n	8005f46 <UART_SetConfig+0x2e6>
 8005f20:	efff69f3 	.word	0xefff69f3
 8005f24:	40008000 	.word	0x40008000
 8005f28:	40013800 	.word	0x40013800
 8005f2c:	40021000 	.word	0x40021000
 8005f30:	40004400 	.word	0x40004400
 8005f34:	40004800 	.word	0x40004800
 8005f38:	40004c00 	.word	0x40004c00
 8005f3c:	40005000 	.word	0x40005000
 8005f40:	2310      	movs	r3, #16
 8005f42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a9f      	ldr	r2, [pc, #636]	; (80061c8 <UART_SetConfig+0x568>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d17a      	bne.n	8006046 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005f50:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005f54:	2b08      	cmp	r3, #8
 8005f56:	d824      	bhi.n	8005fa2 <UART_SetConfig+0x342>
 8005f58:	a201      	add	r2, pc, #4	; (adr r2, 8005f60 <UART_SetConfig+0x300>)
 8005f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f5e:	bf00      	nop
 8005f60:	08005f85 	.word	0x08005f85
 8005f64:	08005fa3 	.word	0x08005fa3
 8005f68:	08005f8d 	.word	0x08005f8d
 8005f6c:	08005fa3 	.word	0x08005fa3
 8005f70:	08005f93 	.word	0x08005f93
 8005f74:	08005fa3 	.word	0x08005fa3
 8005f78:	08005fa3 	.word	0x08005fa3
 8005f7c:	08005fa3 	.word	0x08005fa3
 8005f80:	08005f9b 	.word	0x08005f9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f84:	f7fe fccc 	bl	8004920 <HAL_RCC_GetPCLK1Freq>
 8005f88:	61f8      	str	r0, [r7, #28]
        break;
 8005f8a:	e010      	b.n	8005fae <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f8c:	4b8f      	ldr	r3, [pc, #572]	; (80061cc <UART_SetConfig+0x56c>)
 8005f8e:	61fb      	str	r3, [r7, #28]
        break;
 8005f90:	e00d      	b.n	8005fae <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f92:	f7fe fc2d 	bl	80047f0 <HAL_RCC_GetSysClockFreq>
 8005f96:	61f8      	str	r0, [r7, #28]
        break;
 8005f98:	e009      	b.n	8005fae <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f9e:	61fb      	str	r3, [r7, #28]
        break;
 8005fa0:	e005      	b.n	8005fae <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005fac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005fae:	69fb      	ldr	r3, [r7, #28]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	f000 80fb 	beq.w	80061ac <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	685a      	ldr	r2, [r3, #4]
 8005fba:	4613      	mov	r3, r2
 8005fbc:	005b      	lsls	r3, r3, #1
 8005fbe:	4413      	add	r3, r2
 8005fc0:	69fa      	ldr	r2, [r7, #28]
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d305      	bcc.n	8005fd2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005fcc:	69fa      	ldr	r2, [r7, #28]
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d903      	bls.n	8005fda <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005fd8:	e0e8      	b.n	80061ac <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005fda:	69fb      	ldr	r3, [r7, #28]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	461c      	mov	r4, r3
 8005fe0:	4615      	mov	r5, r2
 8005fe2:	f04f 0200 	mov.w	r2, #0
 8005fe6:	f04f 0300 	mov.w	r3, #0
 8005fea:	022b      	lsls	r3, r5, #8
 8005fec:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005ff0:	0222      	lsls	r2, r4, #8
 8005ff2:	68f9      	ldr	r1, [r7, #12]
 8005ff4:	6849      	ldr	r1, [r1, #4]
 8005ff6:	0849      	lsrs	r1, r1, #1
 8005ff8:	2000      	movs	r0, #0
 8005ffa:	4688      	mov	r8, r1
 8005ffc:	4681      	mov	r9, r0
 8005ffe:	eb12 0a08 	adds.w	sl, r2, r8
 8006002:	eb43 0b09 	adc.w	fp, r3, r9
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	2200      	movs	r2, #0
 800600c:	603b      	str	r3, [r7, #0]
 800600e:	607a      	str	r2, [r7, #4]
 8006010:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006014:	4650      	mov	r0, sl
 8006016:	4659      	mov	r1, fp
 8006018:	f7fa fe16 	bl	8000c48 <__aeabi_uldivmod>
 800601c:	4602      	mov	r2, r0
 800601e:	460b      	mov	r3, r1
 8006020:	4613      	mov	r3, r2
 8006022:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006024:	69bb      	ldr	r3, [r7, #24]
 8006026:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800602a:	d308      	bcc.n	800603e <UART_SetConfig+0x3de>
 800602c:	69bb      	ldr	r3, [r7, #24]
 800602e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006032:	d204      	bcs.n	800603e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	69ba      	ldr	r2, [r7, #24]
 800603a:	60da      	str	r2, [r3, #12]
 800603c:	e0b6      	b.n	80061ac <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006044:	e0b2      	b.n	80061ac <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	69db      	ldr	r3, [r3, #28]
 800604a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800604e:	d15e      	bne.n	800610e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006050:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006054:	2b08      	cmp	r3, #8
 8006056:	d828      	bhi.n	80060aa <UART_SetConfig+0x44a>
 8006058:	a201      	add	r2, pc, #4	; (adr r2, 8006060 <UART_SetConfig+0x400>)
 800605a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800605e:	bf00      	nop
 8006060:	08006085 	.word	0x08006085
 8006064:	0800608d 	.word	0x0800608d
 8006068:	08006095 	.word	0x08006095
 800606c:	080060ab 	.word	0x080060ab
 8006070:	0800609b 	.word	0x0800609b
 8006074:	080060ab 	.word	0x080060ab
 8006078:	080060ab 	.word	0x080060ab
 800607c:	080060ab 	.word	0x080060ab
 8006080:	080060a3 	.word	0x080060a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006084:	f7fe fc4c 	bl	8004920 <HAL_RCC_GetPCLK1Freq>
 8006088:	61f8      	str	r0, [r7, #28]
        break;
 800608a:	e014      	b.n	80060b6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800608c:	f7fe fc5e 	bl	800494c <HAL_RCC_GetPCLK2Freq>
 8006090:	61f8      	str	r0, [r7, #28]
        break;
 8006092:	e010      	b.n	80060b6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006094:	4b4d      	ldr	r3, [pc, #308]	; (80061cc <UART_SetConfig+0x56c>)
 8006096:	61fb      	str	r3, [r7, #28]
        break;
 8006098:	e00d      	b.n	80060b6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800609a:	f7fe fba9 	bl	80047f0 <HAL_RCC_GetSysClockFreq>
 800609e:	61f8      	str	r0, [r7, #28]
        break;
 80060a0:	e009      	b.n	80060b6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060a6:	61fb      	str	r3, [r7, #28]
        break;
 80060a8:	e005      	b.n	80060b6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80060aa:	2300      	movs	r3, #0
 80060ac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80060ae:	2301      	movs	r3, #1
 80060b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80060b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80060b6:	69fb      	ldr	r3, [r7, #28]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d077      	beq.n	80061ac <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80060bc:	69fb      	ldr	r3, [r7, #28]
 80060be:	005a      	lsls	r2, r3, #1
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	085b      	lsrs	r3, r3, #1
 80060c6:	441a      	add	r2, r3
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80060d0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060d2:	69bb      	ldr	r3, [r7, #24]
 80060d4:	2b0f      	cmp	r3, #15
 80060d6:	d916      	bls.n	8006106 <UART_SetConfig+0x4a6>
 80060d8:	69bb      	ldr	r3, [r7, #24]
 80060da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060de:	d212      	bcs.n	8006106 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80060e0:	69bb      	ldr	r3, [r7, #24]
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	f023 030f 	bic.w	r3, r3, #15
 80060e8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80060ea:	69bb      	ldr	r3, [r7, #24]
 80060ec:	085b      	lsrs	r3, r3, #1
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	f003 0307 	and.w	r3, r3, #7
 80060f4:	b29a      	uxth	r2, r3
 80060f6:	8afb      	ldrh	r3, [r7, #22]
 80060f8:	4313      	orrs	r3, r2
 80060fa:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	8afa      	ldrh	r2, [r7, #22]
 8006102:	60da      	str	r2, [r3, #12]
 8006104:	e052      	b.n	80061ac <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006106:	2301      	movs	r3, #1
 8006108:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800610c:	e04e      	b.n	80061ac <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800610e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006112:	2b08      	cmp	r3, #8
 8006114:	d827      	bhi.n	8006166 <UART_SetConfig+0x506>
 8006116:	a201      	add	r2, pc, #4	; (adr r2, 800611c <UART_SetConfig+0x4bc>)
 8006118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800611c:	08006141 	.word	0x08006141
 8006120:	08006149 	.word	0x08006149
 8006124:	08006151 	.word	0x08006151
 8006128:	08006167 	.word	0x08006167
 800612c:	08006157 	.word	0x08006157
 8006130:	08006167 	.word	0x08006167
 8006134:	08006167 	.word	0x08006167
 8006138:	08006167 	.word	0x08006167
 800613c:	0800615f 	.word	0x0800615f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006140:	f7fe fbee 	bl	8004920 <HAL_RCC_GetPCLK1Freq>
 8006144:	61f8      	str	r0, [r7, #28]
        break;
 8006146:	e014      	b.n	8006172 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006148:	f7fe fc00 	bl	800494c <HAL_RCC_GetPCLK2Freq>
 800614c:	61f8      	str	r0, [r7, #28]
        break;
 800614e:	e010      	b.n	8006172 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006150:	4b1e      	ldr	r3, [pc, #120]	; (80061cc <UART_SetConfig+0x56c>)
 8006152:	61fb      	str	r3, [r7, #28]
        break;
 8006154:	e00d      	b.n	8006172 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006156:	f7fe fb4b 	bl	80047f0 <HAL_RCC_GetSysClockFreq>
 800615a:	61f8      	str	r0, [r7, #28]
        break;
 800615c:	e009      	b.n	8006172 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800615e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006162:	61fb      	str	r3, [r7, #28]
        break;
 8006164:	e005      	b.n	8006172 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006166:	2300      	movs	r3, #0
 8006168:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800616a:	2301      	movs	r3, #1
 800616c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006170:	bf00      	nop
    }

    if (pclk != 0U)
 8006172:	69fb      	ldr	r3, [r7, #28]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d019      	beq.n	80061ac <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	085a      	lsrs	r2, r3, #1
 800617e:	69fb      	ldr	r3, [r7, #28]
 8006180:	441a      	add	r2, r3
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	fbb2 f3f3 	udiv	r3, r2, r3
 800618a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800618c:	69bb      	ldr	r3, [r7, #24]
 800618e:	2b0f      	cmp	r3, #15
 8006190:	d909      	bls.n	80061a6 <UART_SetConfig+0x546>
 8006192:	69bb      	ldr	r3, [r7, #24]
 8006194:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006198:	d205      	bcs.n	80061a6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800619a:	69bb      	ldr	r3, [r7, #24]
 800619c:	b29a      	uxth	r2, r3
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	60da      	str	r2, [r3, #12]
 80061a4:	e002      	b.n	80061ac <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80061a6:	2301      	movs	r3, #1
 80061a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2200      	movs	r2, #0
 80061b0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2200      	movs	r2, #0
 80061b6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80061b8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3728      	adds	r7, #40	; 0x28
 80061c0:	46bd      	mov	sp, r7
 80061c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80061c6:	bf00      	nop
 80061c8:	40008000 	.word	0x40008000
 80061cc:	00f42400 	.word	0x00f42400

080061d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b083      	sub	sp, #12
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061dc:	f003 0301 	and.w	r3, r3, #1
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d00a      	beq.n	80061fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	430a      	orrs	r2, r1
 80061f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061fe:	f003 0302 	and.w	r3, r3, #2
 8006202:	2b00      	cmp	r3, #0
 8006204:	d00a      	beq.n	800621c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	430a      	orrs	r2, r1
 800621a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006220:	f003 0304 	and.w	r3, r3, #4
 8006224:	2b00      	cmp	r3, #0
 8006226:	d00a      	beq.n	800623e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	430a      	orrs	r2, r1
 800623c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006242:	f003 0308 	and.w	r3, r3, #8
 8006246:	2b00      	cmp	r3, #0
 8006248:	d00a      	beq.n	8006260 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	430a      	orrs	r2, r1
 800625e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006264:	f003 0310 	and.w	r3, r3, #16
 8006268:	2b00      	cmp	r3, #0
 800626a:	d00a      	beq.n	8006282 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	689b      	ldr	r3, [r3, #8]
 8006272:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	430a      	orrs	r2, r1
 8006280:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006286:	f003 0320 	and.w	r3, r3, #32
 800628a:	2b00      	cmp	r3, #0
 800628c:	d00a      	beq.n	80062a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	430a      	orrs	r2, r1
 80062a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d01a      	beq.n	80062e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	430a      	orrs	r2, r1
 80062c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062ce:	d10a      	bne.n	80062e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	430a      	orrs	r2, r1
 80062e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d00a      	beq.n	8006308 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	430a      	orrs	r2, r1
 8006306:	605a      	str	r2, [r3, #4]
  }
}
 8006308:	bf00      	nop
 800630a:	370c      	adds	r7, #12
 800630c:	46bd      	mov	sp, r7
 800630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006312:	4770      	bx	lr

08006314 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b086      	sub	sp, #24
 8006318:	af02      	add	r7, sp, #8
 800631a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2200      	movs	r2, #0
 8006320:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006324:	f7fc f886 	bl	8002434 <HAL_GetTick>
 8006328:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f003 0308 	and.w	r3, r3, #8
 8006334:	2b08      	cmp	r3, #8
 8006336:	d10e      	bne.n	8006356 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006338:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800633c:	9300      	str	r3, [sp, #0]
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2200      	movs	r2, #0
 8006342:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f000 f82d 	bl	80063a6 <UART_WaitOnFlagUntilTimeout>
 800634c:	4603      	mov	r3, r0
 800634e:	2b00      	cmp	r3, #0
 8006350:	d001      	beq.n	8006356 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006352:	2303      	movs	r3, #3
 8006354:	e023      	b.n	800639e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f003 0304 	and.w	r3, r3, #4
 8006360:	2b04      	cmp	r3, #4
 8006362:	d10e      	bne.n	8006382 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006364:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006368:	9300      	str	r3, [sp, #0]
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2200      	movs	r2, #0
 800636e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f000 f817 	bl	80063a6 <UART_WaitOnFlagUntilTimeout>
 8006378:	4603      	mov	r3, r0
 800637a:	2b00      	cmp	r3, #0
 800637c:	d001      	beq.n	8006382 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800637e:	2303      	movs	r3, #3
 8006380:	e00d      	b.n	800639e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2220      	movs	r2, #32
 8006386:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2220      	movs	r2, #32
 800638c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2200      	movs	r2, #0
 8006392:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2200      	movs	r2, #0
 8006398:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800639c:	2300      	movs	r3, #0
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3710      	adds	r7, #16
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}

080063a6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80063a6:	b580      	push	{r7, lr}
 80063a8:	b09c      	sub	sp, #112	; 0x70
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	60f8      	str	r0, [r7, #12]
 80063ae:	60b9      	str	r1, [r7, #8]
 80063b0:	603b      	str	r3, [r7, #0]
 80063b2:	4613      	mov	r3, r2
 80063b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063b6:	e0a5      	b.n	8006504 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80063ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063be:	f000 80a1 	beq.w	8006504 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063c2:	f7fc f837 	bl	8002434 <HAL_GetTick>
 80063c6:	4602      	mov	r2, r0
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	1ad3      	subs	r3, r2, r3
 80063cc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80063ce:	429a      	cmp	r2, r3
 80063d0:	d302      	bcc.n	80063d8 <UART_WaitOnFlagUntilTimeout+0x32>
 80063d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d13e      	bne.n	8006456 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063e0:	e853 3f00 	ldrex	r3, [r3]
 80063e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80063e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063e8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80063ec:	667b      	str	r3, [r7, #100]	; 0x64
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	461a      	mov	r2, r3
 80063f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80063f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80063f8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063fa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80063fc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80063fe:	e841 2300 	strex	r3, r2, [r1]
 8006402:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006404:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006406:	2b00      	cmp	r3, #0
 8006408:	d1e6      	bne.n	80063d8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	3308      	adds	r3, #8
 8006410:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006412:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006414:	e853 3f00 	ldrex	r3, [r3]
 8006418:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800641a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800641c:	f023 0301 	bic.w	r3, r3, #1
 8006420:	663b      	str	r3, [r7, #96]	; 0x60
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	3308      	adds	r3, #8
 8006428:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800642a:	64ba      	str	r2, [r7, #72]	; 0x48
 800642c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800642e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006430:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006432:	e841 2300 	strex	r3, r2, [r1]
 8006436:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006438:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800643a:	2b00      	cmp	r3, #0
 800643c:	d1e5      	bne.n	800640a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2220      	movs	r2, #32
 8006442:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2220      	movs	r2, #32
 8006448:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2200      	movs	r2, #0
 800644e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006452:	2303      	movs	r3, #3
 8006454:	e067      	b.n	8006526 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f003 0304 	and.w	r3, r3, #4
 8006460:	2b00      	cmp	r3, #0
 8006462:	d04f      	beq.n	8006504 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	69db      	ldr	r3, [r3, #28]
 800646a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800646e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006472:	d147      	bne.n	8006504 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800647c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006486:	e853 3f00 	ldrex	r3, [r3]
 800648a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800648c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006492:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	461a      	mov	r2, r3
 800649a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800649c:	637b      	str	r3, [r7, #52]	; 0x34
 800649e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80064a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80064a4:	e841 2300 	strex	r3, r2, [r1]
 80064a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80064aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d1e6      	bne.n	800647e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	3308      	adds	r3, #8
 80064b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	e853 3f00 	ldrex	r3, [r3]
 80064be:	613b      	str	r3, [r7, #16]
   return(result);
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	f023 0301 	bic.w	r3, r3, #1
 80064c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	3308      	adds	r3, #8
 80064ce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80064d0:	623a      	str	r2, [r7, #32]
 80064d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d4:	69f9      	ldr	r1, [r7, #28]
 80064d6:	6a3a      	ldr	r2, [r7, #32]
 80064d8:	e841 2300 	strex	r3, r2, [r1]
 80064dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80064de:	69bb      	ldr	r3, [r7, #24]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d1e5      	bne.n	80064b0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2220      	movs	r2, #32
 80064e8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2220      	movs	r2, #32
 80064ee:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2220      	movs	r2, #32
 80064f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2200      	movs	r2, #0
 80064fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006500:	2303      	movs	r3, #3
 8006502:	e010      	b.n	8006526 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	69da      	ldr	r2, [r3, #28]
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	4013      	ands	r3, r2
 800650e:	68ba      	ldr	r2, [r7, #8]
 8006510:	429a      	cmp	r2, r3
 8006512:	bf0c      	ite	eq
 8006514:	2301      	moveq	r3, #1
 8006516:	2300      	movne	r3, #0
 8006518:	b2db      	uxtb	r3, r3
 800651a:	461a      	mov	r2, r3
 800651c:	79fb      	ldrb	r3, [r7, #7]
 800651e:	429a      	cmp	r2, r3
 8006520:	f43f af4a 	beq.w	80063b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006524:	2300      	movs	r3, #0
}
 8006526:	4618      	mov	r0, r3
 8006528:	3770      	adds	r7, #112	; 0x70
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}

0800652e <bitmap_init>:
    return bitmap->width * (bitmap->depth / 8) * bitmap->height;
};

/* Initialise bitmap with given buffer. */
void bitmap_init(bitmap_t *bitmap, uint8_t *buffer)
{
 800652e:	b480      	push	{r7}
 8006530:	b083      	sub	sp, #12
 8006532:	af00      	add	r7, sp, #0
 8006534:	6078      	str	r0, [r7, #4]
 8006536:	6039      	str	r1, [r7, #0]
    bitmap->pitch = bitmap->width * (bitmap->depth / 8);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	881a      	ldrh	r2, [r3, #0]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	799b      	ldrb	r3, [r3, #6]
 8006540:	08db      	lsrs	r3, r3, #3
 8006542:	b2db      	uxtb	r3, r3
 8006544:	b29b      	uxth	r3, r3
 8006546:	fb12 f303 	smulbb	r3, r2, r3
 800654a:	b29a      	uxth	r2, r3
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	809a      	strh	r2, [r3, #4]
    bitmap->size = bitmap->pitch * bitmap->height;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	889b      	ldrh	r3, [r3, #4]
 8006554:	461a      	mov	r2, r3
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	885b      	ldrh	r3, [r3, #2]
 800655a:	fb02 f303 	mul.w	r3, r2, r3
 800655e:	461a      	mov	r2, r3
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	609a      	str	r2, [r3, #8]
    bitmap->buffer = buffer;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	683a      	ldr	r2, [r7, #0]
 8006568:	60da      	str	r2, [r3, #12]
}
 800656a:	bf00      	nop
 800656c:	370c      	adds	r7, #12
 800656e:	46bd      	mov	sp, r7
 8006570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006574:	4770      	bx	lr

08006576 <code>:
static const uint8_t RIGHT = 0b0010;
static const uint8_t BOTTOM = 0b0100;
static const uint8_t TOP = 0b1000;

static uint8_t code(int16_t x0, int16_t y0, window_t window)
{
 8006576:	b490      	push	{r4, r7}
 8006578:	b086      	sub	sp, #24
 800657a:	af00      	add	r7, sp, #0
 800657c:	4604      	mov	r4, r0
 800657e:	4608      	mov	r0, r1
 8006580:	1d39      	adds	r1, r7, #4
 8006582:	e881 000c 	stmia.w	r1, {r2, r3}
 8006586:	4623      	mov	r3, r4
 8006588:	81fb      	strh	r3, [r7, #14]
 800658a:	4603      	mov	r3, r0
 800658c:	81bb      	strh	r3, [r7, #12]
    uint8_t code = INSIDE;
 800658e:	2300      	movs	r3, #0
 8006590:	75fb      	strb	r3, [r7, #23]

    if (x0 < window.x0) {
 8006592:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006596:	88ba      	ldrh	r2, [r7, #4]
 8006598:	4293      	cmp	r3, r2
 800659a:	da04      	bge.n	80065a6 <code+0x30>
        code |= LEFT;
 800659c:	2201      	movs	r2, #1
 800659e:	7dfb      	ldrb	r3, [r7, #23]
 80065a0:	4313      	orrs	r3, r2
 80065a2:	75fb      	strb	r3, [r7, #23]
 80065a4:	e008      	b.n	80065b8 <code+0x42>
    } else if (x0 > window.x1) {
 80065a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80065aa:	893a      	ldrh	r2, [r7, #8]
 80065ac:	4293      	cmp	r3, r2
 80065ae:	dd03      	ble.n	80065b8 <code+0x42>
        code |= RIGHT;
 80065b0:	2202      	movs	r2, #2
 80065b2:	7dfb      	ldrb	r3, [r7, #23]
 80065b4:	4313      	orrs	r3, r2
 80065b6:	75fb      	strb	r3, [r7, #23]
    } if (y0 < window.y0) {
 80065b8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80065bc:	88fa      	ldrh	r2, [r7, #6]
 80065be:	4293      	cmp	r3, r2
 80065c0:	da04      	bge.n	80065cc <code+0x56>
        code |= BOTTOM;
 80065c2:	2204      	movs	r2, #4
 80065c4:	7dfb      	ldrb	r3, [r7, #23]
 80065c6:	4313      	orrs	r3, r2
 80065c8:	75fb      	strb	r3, [r7, #23]
 80065ca:	e008      	b.n	80065de <code+0x68>
    } else if (y0 > window.y1) {
 80065cc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80065d0:	897a      	ldrh	r2, [r7, #10]
 80065d2:	4293      	cmp	r3, r2
 80065d4:	dd03      	ble.n	80065de <code+0x68>
        code |= TOP;
 80065d6:	2208      	movs	r2, #8
 80065d8:	7dfb      	ldrb	r3, [r7, #23]
 80065da:	4313      	orrs	r3, r2
 80065dc:	75fb      	strb	r3, [r7, #23]
    }

    return code;
 80065de:	7dfb      	ldrb	r3, [r7, #23]
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3718      	adds	r7, #24
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bc90      	pop	{r4, r7}
 80065e8:	4770      	bx	lr

080065ea <clip_line>:

bool clip_line(int16_t *x0, int16_t *y0, int16_t *x1, int16_t *y1, window_t window)
{
 80065ea:	b580      	push	{r7, lr}
 80065ec:	b088      	sub	sp, #32
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	60f8      	str	r0, [r7, #12]
 80065f2:	60b9      	str	r1, [r7, #8]
 80065f4:	607a      	str	r2, [r7, #4]
 80065f6:	603b      	str	r3, [r7, #0]
    uint8_t code0 = code(*x0, *y0, window);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f9b3 0000 	ldrsh.w	r0, [r3]
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	f9b3 1000 	ldrsh.w	r1, [r3]
 8006604:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006608:	cb0c      	ldmia	r3, {r2, r3}
 800660a:	f7ff ffb4 	bl	8006576 <code>
 800660e:	4603      	mov	r3, r0
 8006610:	77fb      	strb	r3, [r7, #31]
    uint8_t code1 = code(*x1, *y1, window);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f9b3 0000 	ldrsh.w	r0, [r3]
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	f9b3 1000 	ldrsh.w	r1, [r3]
 800661e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006622:	cb0c      	ldmia	r3, {r2, r3}
 8006624:	f7ff ffa7 	bl	8006576 <code>
 8006628:	4603      	mov	r3, r0
 800662a:	77bb      	strb	r3, [r7, #30]

    bool accept = false;
 800662c:	2300      	movs	r3, #0
 800662e:	777b      	strb	r3, [r7, #29]

    while (true) {
        if (!(code0 | code1)) {
 8006630:	7ffa      	ldrb	r2, [r7, #31]
 8006632:	7fbb      	ldrb	r3, [r7, #30]
 8006634:	4313      	orrs	r3, r2
 8006636:	b2db      	uxtb	r3, r3
 8006638:	2b00      	cmp	r3, #0
 800663a:	d102      	bne.n	8006642 <clip_line+0x58>
            /* Both endpoints inside clipping window, trivial accept. */
            accept = true;
 800663c:	2301      	movs	r3, #1
 800663e:	777b      	strb	r3, [r7, #29]
            break;
 8006640:	e0e9      	b.n	8006816 <clip_line+0x22c>
        } else if (code0 & code1) {
 8006642:	7ffa      	ldrb	r2, [r7, #31]
 8006644:	7fbb      	ldrb	r3, [r7, #30]
 8006646:	4013      	ands	r3, r2
 8006648:	b2db      	uxtb	r3, r3
 800664a:	2b00      	cmp	r3, #0
 800664c:	f040 80e2 	bne.w	8006814 <clip_line+0x22a>
            /* Both endpoints outside clipping window, trivial reject. */
            break;
        } else {
            /* Part of line inside clipping window, nontrivial situation. */

            int16_t x = 0;
 8006650:	2300      	movs	r3, #0
 8006652:	837b      	strh	r3, [r7, #26]
            int16_t y = 0;
 8006654:	2300      	movs	r3, #0
 8006656:	833b      	strh	r3, [r7, #24]
            uint8_t code3 = code0 ? code0 : code1;
 8006658:	7ffb      	ldrb	r3, [r7, #31]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d001      	beq.n	8006662 <clip_line+0x78>
 800665e:	7ffb      	ldrb	r3, [r7, #31]
 8006660:	e000      	b.n	8006664 <clip_line+0x7a>
 8006662:	7fbb      	ldrb	r3, [r7, #30]
 8006664:	75fb      	strb	r3, [r7, #23]

            /* Find intersection point. */
            /* slope = (y1 - y0) / (x1 - x0) */
            /* x = x0 + (1 / slope) * (ym - y0), where ym is ymin or ymax */
            /* y = y0 + slope * (xm - x0), where xm is xmin or xmax */
            if (code3 & TOP) {
 8006666:	2208      	movs	r2, #8
 8006668:	7dfb      	ldrb	r3, [r7, #23]
 800666a:	4013      	ands	r3, r2
 800666c:	b2db      	uxtb	r3, r3
 800666e:	2b00      	cmp	r3, #0
 8006670:	d024      	beq.n	80066bc <clip_line+0xd2>
                x = *x0 + (*x1 - *x0) * (window.y1 - *y0) / (*y1 - *y0);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006678:	b29a      	uxth	r2, r3
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006680:	4619      	mov	r1, r3
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006688:	1acb      	subs	r3, r1, r3
 800668a:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 800668c:	4608      	mov	r0, r1
 800668e:	68b9      	ldr	r1, [r7, #8]
 8006690:	f9b1 1000 	ldrsh.w	r1, [r1]
 8006694:	1a41      	subs	r1, r0, r1
 8006696:	fb03 f101 	mul.w	r1, r3, r1
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80066a0:	4618      	mov	r0, r3
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80066a8:	1ac3      	subs	r3, r0, r3
 80066aa:	fb91 f3f3 	sdiv	r3, r1, r3
 80066ae:	b29b      	uxth	r3, r3
 80066b0:	4413      	add	r3, r2
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	837b      	strh	r3, [r7, #26]
                y = window.y1;
 80066b6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80066b8:	833b      	strh	r3, [r7, #24]
 80066ba:	e07f      	b.n	80067bc <clip_line+0x1d2>
            } else if (code3 & BOTTOM) {
 80066bc:	2204      	movs	r2, #4
 80066be:	7dfb      	ldrb	r3, [r7, #23]
 80066c0:	4013      	ands	r3, r2
 80066c2:	b2db      	uxtb	r3, r3
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d024      	beq.n	8006712 <clip_line+0x128>
                x = *x0 + (*x1 - *x0) * (window.y0 - *y0) / (*y1 - *y0);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80066ce:	b29a      	uxth	r2, r3
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80066d6:	4619      	mov	r1, r3
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80066de:	1acb      	subs	r3, r1, r3
 80066e0:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 80066e2:	4608      	mov	r0, r1
 80066e4:	68b9      	ldr	r1, [r7, #8]
 80066e6:	f9b1 1000 	ldrsh.w	r1, [r1]
 80066ea:	1a41      	subs	r1, r0, r1
 80066ec:	fb03 f101 	mul.w	r1, r3, r1
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80066f6:	4618      	mov	r0, r3
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80066fe:	1ac3      	subs	r3, r0, r3
 8006700:	fb91 f3f3 	sdiv	r3, r1, r3
 8006704:	b29b      	uxth	r3, r3
 8006706:	4413      	add	r3, r2
 8006708:	b29b      	uxth	r3, r3
 800670a:	837b      	strh	r3, [r7, #26]
                y = window.y0;
 800670c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800670e:	833b      	strh	r3, [r7, #24]
 8006710:	e054      	b.n	80067bc <clip_line+0x1d2>
            } else if (code3 & RIGHT) {
 8006712:	2202      	movs	r2, #2
 8006714:	7dfb      	ldrb	r3, [r7, #23]
 8006716:	4013      	ands	r3, r2
 8006718:	b2db      	uxtb	r3, r3
 800671a:	2b00      	cmp	r3, #0
 800671c:	d024      	beq.n	8006768 <clip_line+0x17e>
                y = *y0 + (*y1 - *y0) * (window.x1 - *x0) / (*x1 - *x0);
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006724:	b29a      	uxth	r2, r3
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	f9b3 3000 	ldrsh.w	r3, [r3]
 800672c:	4619      	mov	r1, r3
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006734:	1acb      	subs	r3, r1, r3
 8006736:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8006738:	4608      	mov	r0, r1
 800673a:	68f9      	ldr	r1, [r7, #12]
 800673c:	f9b1 1000 	ldrsh.w	r1, [r1]
 8006740:	1a41      	subs	r1, r0, r1
 8006742:	fb03 f101 	mul.w	r1, r3, r1
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f9b3 3000 	ldrsh.w	r3, [r3]
 800674c:	4618      	mov	r0, r3
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006754:	1ac3      	subs	r3, r0, r3
 8006756:	fb91 f3f3 	sdiv	r3, r1, r3
 800675a:	b29b      	uxth	r3, r3
 800675c:	4413      	add	r3, r2
 800675e:	b29b      	uxth	r3, r3
 8006760:	833b      	strh	r3, [r7, #24]
                x = window.x1;
 8006762:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006764:	837b      	strh	r3, [r7, #26]
 8006766:	e029      	b.n	80067bc <clip_line+0x1d2>
            }  else if (code3 & LEFT) {
 8006768:	2201      	movs	r2, #1
 800676a:	7dfb      	ldrb	r3, [r7, #23]
 800676c:	4013      	ands	r3, r2
 800676e:	b2db      	uxtb	r3, r3
 8006770:	2b00      	cmp	r3, #0
 8006772:	d023      	beq.n	80067bc <clip_line+0x1d2>
                y = *y0 + (*y1 - *y0) * (window.x0 - *x0) / (*x1 - *x0);
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	f9b3 3000 	ldrsh.w	r3, [r3]
 800677a:	b29a      	uxth	r2, r3
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006782:	4619      	mov	r1, r3
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	f9b3 3000 	ldrsh.w	r3, [r3]
 800678a:	1acb      	subs	r3, r1, r3
 800678c:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 800678e:	4608      	mov	r0, r1
 8006790:	68f9      	ldr	r1, [r7, #12]
 8006792:	f9b1 1000 	ldrsh.w	r1, [r1]
 8006796:	1a41      	subs	r1, r0, r1
 8006798:	fb03 f101 	mul.w	r1, r3, r1
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80067a2:	4618      	mov	r0, r3
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80067aa:	1ac3      	subs	r3, r0, r3
 80067ac:	fb91 f3f3 	sdiv	r3, r1, r3
 80067b0:	b29b      	uxth	r3, r3
 80067b2:	4413      	add	r3, r2
 80067b4:	b29b      	uxth	r3, r3
 80067b6:	833b      	strh	r3, [r7, #24]
                x = window.x0;
 80067b8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80067ba:	837b      	strh	r3, [r7, #26]
            }

            /* Replace the outside point with the intersection point. */
            if (code3 == code0) {
 80067bc:	7dfa      	ldrb	r2, [r7, #23]
 80067be:	7ffb      	ldrb	r3, [r7, #31]
 80067c0:	429a      	cmp	r2, r3
 80067c2:	d113      	bne.n	80067ec <clip_line+0x202>
                *x0 = x;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	8b7a      	ldrh	r2, [r7, #26]
 80067c8:	801a      	strh	r2, [r3, #0]
                *y0 = y;
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	8b3a      	ldrh	r2, [r7, #24]
 80067ce:	801a      	strh	r2, [r3, #0]
                code0 = code(*x0, *y0, window);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	f9b3 0000 	ldrsh.w	r0, [r3]
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	f9b3 1000 	ldrsh.w	r1, [r3]
 80067dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80067e0:	cb0c      	ldmia	r3, {r2, r3}
 80067e2:	f7ff fec8 	bl	8006576 <code>
 80067e6:	4603      	mov	r3, r0
 80067e8:	77fb      	strb	r3, [r7, #31]
 80067ea:	e721      	b.n	8006630 <clip_line+0x46>
            } else {
                *x1 = x;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	8b7a      	ldrh	r2, [r7, #26]
 80067f0:	801a      	strh	r2, [r3, #0]
                *y1 = y;
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	8b3a      	ldrh	r2, [r7, #24]
 80067f6:	801a      	strh	r2, [r3, #0]
                code1 = code(*x1, *y1, window);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f9b3 0000 	ldrsh.w	r0, [r3]
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	f9b3 1000 	ldrsh.w	r1, [r3]
 8006804:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006808:	cb0c      	ldmia	r3, {r2, r3}
 800680a:	f7ff feb4 	bl	8006576 <code>
 800680e:	4603      	mov	r3, r0
 8006810:	77bb      	strb	r3, [r7, #30]
        if (!(code0 | code1)) {
 8006812:	e70d      	b.n	8006630 <clip_line+0x46>
            break;
 8006814:	bf00      	nop
            }
        }
    }

    return accept;
 8006816:	7f7b      	ldrb	r3, [r7, #29]
 8006818:	4618      	mov	r0, r3
 800681a:	3720      	adds	r7, #32
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}

08006820 <fontx_meta>:
#include <stddef.h>
#include <string.h>

#include "fontx.h"

uint8_t fontx_meta(fontx_meta_t *meta, const uint8_t *font) {
 8006820:	b580      	push	{r7, lr}
 8006822:	b082      	sub	sp, #8
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	6039      	str	r1, [r7, #0]

    memcpy(meta->name, &font[FONTX_NAME], 8);
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	3306      	adds	r3, #6
 8006830:	2208      	movs	r2, #8
 8006832:	4619      	mov	r1, r3
 8006834:	f000 feaa 	bl	800758c <memcpy>
    meta->width = font[FONTX_WIDTH];
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	7b9a      	ldrb	r2, [r3, #14]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	725a      	strb	r2, [r3, #9]
    meta->height = font[FONTX_HEIGHT];
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	7bda      	ldrb	r2, [r3, #15]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	729a      	strb	r2, [r3, #10]
    meta->type = font[FONTX_TYPE];
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	7c1a      	ldrb	r2, [r3, #16]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	72da      	strb	r2, [r3, #11]

    return 0;
 8006850:	2300      	movs	r3, #0
}
 8006852:	4618      	mov	r0, r3
 8006854:	3708      	adds	r7, #8
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}

0800685a <fontx_glyph>:


uint8_t fontx_glyph(fontx_glyph_t *glyph, wchar_t code, const uint8_t* font) {
 800685a:	b580      	push	{r7, lr}
 800685c:	b08e      	sub	sp, #56	; 0x38
 800685e:	af00      	add	r7, sp, #0
 8006860:	60f8      	str	r0, [r7, #12]
 8006862:	60b9      	str	r1, [r7, #8]
 8006864:	607a      	str	r2, [r7, #4]
    uint32_t nc, bc, sb, eb;
    uint8_t status;
    const uint8_t *block_table;
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 8006866:	f107 0314 	add.w	r3, r7, #20
 800686a:	6879      	ldr	r1, [r7, #4]
 800686c:	4618      	mov	r0, r3
 800686e:	f7ff ffd7 	bl	8006820 <fontx_meta>
 8006872:	4603      	mov	r3, r0
 8006874:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (0 != status) {
 8006878:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800687c:	2b00      	cmp	r3, #0
 800687e:	d002      	beq.n	8006886 <fontx_glyph+0x2c>
        return status;
 8006880:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006884:	e077      	b.n	8006976 <fontx_glyph+0x11c>
    }

    glyph->width = meta.width;
 8006886:	7f7a      	ldrb	r2, [r7, #29]
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	701a      	strb	r2, [r3, #0]
    glyph->height = meta.height;
 800688c:	7fba      	ldrb	r2, [r7, #30]
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	705a      	strb	r2, [r3, #1]
    glyph->pitch = (meta.width + 7) / 8;
 8006892:	7f7b      	ldrb	r3, [r7, #29]
 8006894:	3307      	adds	r3, #7
 8006896:	2b00      	cmp	r3, #0
 8006898:	da00      	bge.n	800689c <fontx_glyph+0x42>
 800689a:	3307      	adds	r3, #7
 800689c:	10db      	asrs	r3, r3, #3
 800689e:	b2da      	uxtb	r2, r3
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	70da      	strb	r2, [r3, #3]
    glyph->size = glyph->pitch * meta.height;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	78da      	ldrb	r2, [r3, #3]
 80068a8:	7fbb      	ldrb	r3, [r7, #30]
 80068aa:	fb12 f303 	smulbb	r3, r2, r3
 80068ae:	b2da      	uxtb	r2, r3
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	709a      	strb	r2, [r3, #2]

    if (FONTX_TYPE_SBCS == meta.type) {
 80068b4:	7ffb      	ldrb	r3, [r7, #31]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d10f      	bne.n	80068da <fontx_glyph+0x80>
        if (code < 0x100) {
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	2bff      	cmp	r3, #255	; 0xff
 80068be:	d859      	bhi.n	8006974 <fontx_glyph+0x11a>
            glyph->buffer = &font[FONTX_GLYPH_DATA_START + code * glyph->size];
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	789b      	ldrb	r3, [r3, #2]
 80068c4:	461a      	mov	r2, r3
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	fb02 f303 	mul.w	r3, r2, r3
 80068cc:	3311      	adds	r3, #17
 80068ce:	687a      	ldr	r2, [r7, #4]
 80068d0:	441a      	add	r2, r3
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	605a      	str	r2, [r3, #4]
            return FONTX_OK;
 80068d6:	2300      	movs	r3, #0
 80068d8:	e04d      	b.n	8006976 <fontx_glyph+0x11c>
        }
    } else {
        block_table = &font[FONTX_BLOCK_TABLE_START];
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	3312      	adds	r3, #18
 80068de:	62fb      	str	r3, [r7, #44]	; 0x2c
        nc = 0;
 80068e0:	2300      	movs	r3, #0
 80068e2:	637b      	str	r3, [r7, #52]	; 0x34
        bc = font[FONTX_BLOCK_TABLE_SIZE];
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	3311      	adds	r3, #17
 80068e8:	781b      	ldrb	r3, [r3, #0]
 80068ea:	633b      	str	r3, [r7, #48]	; 0x30
        while (bc--) {
 80068ec:	e03d      	b.n	800696a <fontx_glyph+0x110>
            /* Get range of the code block_table. */
            sb = block_table[0] + block_table[1] * 0x100;
 80068ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068f0:	781b      	ldrb	r3, [r3, #0]
 80068f2:	461a      	mov	r2, r3
 80068f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068f6:	3301      	adds	r3, #1
 80068f8:	781b      	ldrb	r3, [r3, #0]
 80068fa:	021b      	lsls	r3, r3, #8
 80068fc:	4413      	add	r3, r2
 80068fe:	627b      	str	r3, [r7, #36]	; 0x24
            eb = block_table[2] + block_table[3] * 0x100;
 8006900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006902:	3302      	adds	r3, #2
 8006904:	781b      	ldrb	r3, [r3, #0]
 8006906:	461a      	mov	r2, r3
 8006908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800690a:	3303      	adds	r3, #3
 800690c:	781b      	ldrb	r3, [r3, #0]
 800690e:	021b      	lsls	r3, r3, #8
 8006910:	4413      	add	r3, r2
 8006912:	623b      	str	r3, [r7, #32]

             /* Check if in the code block_table. */
            if (code >= sb && code <= eb) {
 8006914:	68ba      	ldr	r2, [r7, #8]
 8006916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006918:	429a      	cmp	r2, r3
 800691a:	d31c      	bcc.n	8006956 <fontx_glyph+0xfc>
 800691c:	68ba      	ldr	r2, [r7, #8]
 800691e:	6a3b      	ldr	r3, [r7, #32]
 8006920:	429a      	cmp	r2, r3
 8006922:	d818      	bhi.n	8006956 <fontx_glyph+0xfc>
                /* Number of codes from top of the block_table. */
                nc += code - sb;
 8006924:	68ba      	ldr	r2, [r7, #8]
 8006926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006928:	1ad3      	subs	r3, r2, r3
 800692a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800692c:	4413      	add	r3, r2
 800692e:	637b      	str	r3, [r7, #52]	; 0x34
                glyph->buffer = &font[
                    FONTX_BLOCK_TABLE_START +
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	3311      	adds	r3, #17
 8006934:	781b      	ldrb	r3, [r3, #0]
 8006936:	009b      	lsls	r3, r3, #2
 8006938:	461a      	mov	r2, r3
                    nc * glyph->size
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	789b      	ldrb	r3, [r3, #2]
 800693e:	4619      	mov	r1, r3
 8006940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006942:	fb01 f303 	mul.w	r3, r1, r3
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 8006946:	4413      	add	r3, r2
 8006948:	3312      	adds	r3, #18
                glyph->buffer = &font[
 800694a:	687a      	ldr	r2, [r7, #4]
 800694c:	441a      	add	r2, r3
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	605a      	str	r2, [r3, #4]
                ];
                return FONTX_OK;
 8006952:	2300      	movs	r3, #0
 8006954:	e00f      	b.n	8006976 <fontx_glyph+0x11c>
            }
            /* Number of codes in the previous block_tables. */
            nc += eb - sb + 1;
 8006956:	6a3a      	ldr	r2, [r7, #32]
 8006958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800695a:	1ad2      	subs	r2, r2, r3
 800695c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800695e:	4413      	add	r3, r2
 8006960:	3301      	adds	r3, #1
 8006962:	637b      	str	r3, [r7, #52]	; 0x34
            /* Next code block_table. */
            block_table += 4;
 8006964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006966:	3304      	adds	r3, #4
 8006968:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (bc--) {
 800696a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800696c:	1e5a      	subs	r2, r3, #1
 800696e:	633a      	str	r2, [r7, #48]	; 0x30
 8006970:	2b00      	cmp	r3, #0
 8006972:	d1bc      	bne.n	80068ee <fontx_glyph+0x94>
        }
    }

    return FONTX_ERR_GLYPH_NOT_FOUND;
 8006974:	2301      	movs	r3, #1
 8006976:	4618      	mov	r0, r3
 8006978:	3738      	adds	r7, #56	; 0x38
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}

0800697e <min>:
#include "hsl.h"

hsl_t rgb888_to_hsl(rgb_t *rgb);
uint16_t rgb888_to_rgb565(rgb_t *input);

static inline int min(int a, int b) {
 800697e:	b480      	push	{r7}
 8006980:	b083      	sub	sp, #12
 8006982:	af00      	add	r7, sp, #0
 8006984:	6078      	str	r0, [r7, #4]
 8006986:	6039      	str	r1, [r7, #0]
    if (a > b) {
 8006988:	687a      	ldr	r2, [r7, #4]
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	429a      	cmp	r2, r3
 800698e:	dd01      	ble.n	8006994 <min+0x16>
        return b;
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	e000      	b.n	8006996 <min+0x18>
    };
    return a;
 8006994:	687b      	ldr	r3, [r7, #4]
}
 8006996:	4618      	mov	r0, r3
 8006998:	370c      	adds	r7, #12
 800699a:	46bd      	mov	sp, r7
 800699c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a0:	4770      	bx	lr

080069a2 <max>:

static inline int max(int a, int b) {
 80069a2:	b480      	push	{r7}
 80069a4:	b083      	sub	sp, #12
 80069a6:	af00      	add	r7, sp, #0
 80069a8:	6078      	str	r0, [r7, #4]
 80069aa:	6039      	str	r1, [r7, #0]
    if (a > b) {
 80069ac:	687a      	ldr	r2, [r7, #4]
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	429a      	cmp	r2, r3
 80069b2:	dd01      	ble.n	80069b8 <max+0x16>
        return a;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	e000      	b.n	80069ba <max+0x18>
    }
    return b;
 80069b8:	683b      	ldr	r3, [r7, #0]
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	370c      	adds	r7, #12
 80069be:	46bd      	mov	sp, r7
 80069c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c4:	4770      	bx	lr
	...

080069c8 <hagl_set_clip_window>:
    .y0 = 0,
    .x1 = DISPLAY_WIDTH - 1,
    .y1 = DISPLAY_HEIGHT - 1,
};

void hagl_set_clip_window(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 80069c8:	b490      	push	{r4, r7}
 80069ca:	b082      	sub	sp, #8
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	4604      	mov	r4, r0
 80069d0:	4608      	mov	r0, r1
 80069d2:	4611      	mov	r1, r2
 80069d4:	461a      	mov	r2, r3
 80069d6:	4623      	mov	r3, r4
 80069d8:	80fb      	strh	r3, [r7, #6]
 80069da:	4603      	mov	r3, r0
 80069dc:	80bb      	strh	r3, [r7, #4]
 80069de:	460b      	mov	r3, r1
 80069e0:	807b      	strh	r3, [r7, #2]
 80069e2:	4613      	mov	r3, r2
 80069e4:	803b      	strh	r3, [r7, #0]
    clip_window.x0 = x0;
 80069e6:	4a08      	ldr	r2, [pc, #32]	; (8006a08 <hagl_set_clip_window+0x40>)
 80069e8:	88fb      	ldrh	r3, [r7, #6]
 80069ea:	8013      	strh	r3, [r2, #0]
    clip_window.y0 = y0;
 80069ec:	4a06      	ldr	r2, [pc, #24]	; (8006a08 <hagl_set_clip_window+0x40>)
 80069ee:	88bb      	ldrh	r3, [r7, #4]
 80069f0:	8053      	strh	r3, [r2, #2]
    clip_window.x1 = x1;
 80069f2:	4a05      	ldr	r2, [pc, #20]	; (8006a08 <hagl_set_clip_window+0x40>)
 80069f4:	887b      	ldrh	r3, [r7, #2]
 80069f6:	8093      	strh	r3, [r2, #4]
    clip_window.y1 = y1;
 80069f8:	4a03      	ldr	r2, [pc, #12]	; (8006a08 <hagl_set_clip_window+0x40>)
 80069fa:	883b      	ldrh	r3, [r7, #0]
 80069fc:	80d3      	strh	r3, [r2, #6]
}
 80069fe:	bf00      	nop
 8006a00:	3708      	adds	r7, #8
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bc90      	pop	{r4, r7}
 8006a06:	4770      	bx	lr
 8006a08:	2000000c 	.word	0x2000000c

08006a0c <hagl_put_pixel>:

void hagl_put_pixel(int16_t x0, int16_t y0, color_t color)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b082      	sub	sp, #8
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	4603      	mov	r3, r0
 8006a14:	80fb      	strh	r3, [r7, #6]
 8006a16:	460b      	mov	r3, r1
 8006a18:	80bb      	strh	r3, [r7, #4]
 8006a1a:	4613      	mov	r3, r2
 8006a1c:	807b      	strh	r3, [r7, #2]
    /* x0 or y0 is before the edge, nothing to do. */
    if ((x0 < clip_window.x0) || (y0 < clip_window.y0))  {
 8006a1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006a22:	4a12      	ldr	r2, [pc, #72]	; (8006a6c <hagl_put_pixel+0x60>)
 8006a24:	8812      	ldrh	r2, [r2, #0]
 8006a26:	4293      	cmp	r3, r2
 8006a28:	db1a      	blt.n	8006a60 <hagl_put_pixel+0x54>
 8006a2a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006a2e:	4a0f      	ldr	r2, [pc, #60]	; (8006a6c <hagl_put_pixel+0x60>)
 8006a30:	8852      	ldrh	r2, [r2, #2]
 8006a32:	4293      	cmp	r3, r2
 8006a34:	db14      	blt.n	8006a60 <hagl_put_pixel+0x54>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 8006a36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006a3a:	4a0c      	ldr	r2, [pc, #48]	; (8006a6c <hagl_put_pixel+0x60>)
 8006a3c:	8892      	ldrh	r2, [r2, #4]
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	dc10      	bgt.n	8006a64 <hagl_put_pixel+0x58>
 8006a42:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006a46:	4a09      	ldr	r2, [pc, #36]	; (8006a6c <hagl_put_pixel+0x60>)
 8006a48:	88d2      	ldrh	r2, [r2, #6]
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	dc0a      	bgt.n	8006a64 <hagl_put_pixel+0x58>
        return;
    }

    /* If still in bounds set the pixel. */
    hagl_hal_put_pixel(x0, y0, color);
 8006a4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006a52:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006a56:	887a      	ldrh	r2, [r7, #2]
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f7fa fcd3 	bl	8001404 <lcd_draw_point>
 8006a5e:	e002      	b.n	8006a66 <hagl_put_pixel+0x5a>
        return;
 8006a60:	bf00      	nop
 8006a62:	e000      	b.n	8006a66 <hagl_put_pixel+0x5a>
        return;
 8006a64:	bf00      	nop
}
 8006a66:	3708      	adds	r7, #8
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}
 8006a6c:	2000000c 	.word	0x2000000c

08006a70 <hagl_draw_hline>:
#else
    return hagl_color(0, 0, 0);
#endif /* HAGL_HAS_HAL_GET_PIXEL */
}

void hagl_draw_hline(int16_t x0, int16_t y0, uint16_t w, color_t color) {
 8006a70:	b590      	push	{r4, r7, lr}
 8006a72:	b085      	sub	sp, #20
 8006a74:	af02      	add	r7, sp, #8
 8006a76:	4604      	mov	r4, r0
 8006a78:	4608      	mov	r0, r1
 8006a7a:	4611      	mov	r1, r2
 8006a7c:	461a      	mov	r2, r3
 8006a7e:	4623      	mov	r3, r4
 8006a80:	80fb      	strh	r3, [r7, #6]
 8006a82:	4603      	mov	r3, r0
 8006a84:	80bb      	strh	r3, [r7, #4]
 8006a86:	460b      	mov	r3, r1
 8006a88:	807b      	strh	r3, [r7, #2]
 8006a8a:	4613      	mov	r3, r2
 8006a8c:	803b      	strh	r3, [r7, #0]
        width = width - (x0 + width - clip_window.x1);
    }

    hagl_hal_hline(x0, y0, width, color);
#else
    hagl_draw_line(x0, y0, x0 + w, y0, color);
 8006a8e:	88fa      	ldrh	r2, [r7, #6]
 8006a90:	887b      	ldrh	r3, [r7, #2]
 8006a92:	4413      	add	r3, r2
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	b21a      	sxth	r2, r3
 8006a98:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8006a9c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006aa0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8006aa4:	883b      	ldrh	r3, [r7, #0]
 8006aa6:	9300      	str	r3, [sp, #0]
 8006aa8:	4623      	mov	r3, r4
 8006aaa:	f000 f805 	bl	8006ab8 <hagl_draw_line>
#endif
}
 8006aae:	bf00      	nop
 8006ab0:	370c      	adds	r7, #12
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd90      	pop	{r4, r7, pc}
	...

08006ab8 <hagl_draw_line>:

/*
 * Draw a line using Bresenham's algorithm with given color.
 */
void hagl_draw_line(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 8006ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006aba:	b089      	sub	sp, #36	; 0x24
 8006abc:	af02      	add	r7, sp, #8
 8006abe:	4604      	mov	r4, r0
 8006ac0:	4608      	mov	r0, r1
 8006ac2:	4611      	mov	r1, r2
 8006ac4:	461a      	mov	r2, r3
 8006ac6:	4623      	mov	r3, r4
 8006ac8:	80fb      	strh	r3, [r7, #6]
 8006aca:	4603      	mov	r3, r0
 8006acc:	80bb      	strh	r3, [r7, #4]
 8006ace:	460b      	mov	r3, r1
 8006ad0:	807b      	strh	r3, [r7, #2]
 8006ad2:	4613      	mov	r3, r2
 8006ad4:	803b      	strh	r3, [r7, #0]
    /* Clip coordinates to fit clip window. */
    if (false == clip_line(&x0, &y0, &x1, &y1, clip_window)) {
 8006ad6:	463b      	mov	r3, r7
 8006ad8:	1cba      	adds	r2, r7, #2
 8006ada:	1d3d      	adds	r5, r7, #4
 8006adc:	1dbc      	adds	r4, r7, #6
 8006ade:	494a      	ldr	r1, [pc, #296]	; (8006c08 <hagl_draw_line+0x150>)
 8006ae0:	466e      	mov	r6, sp
 8006ae2:	c903      	ldmia	r1, {r0, r1}
 8006ae4:	e886 0003 	stmia.w	r6, {r0, r1}
 8006ae8:	4629      	mov	r1, r5
 8006aea:	4620      	mov	r0, r4
 8006aec:	f7ff fd7d 	bl	80065ea <clip_line>
 8006af0:	4603      	mov	r3, r0
 8006af2:	f083 0301 	eor.w	r3, r3, #1
 8006af6:	b2db      	uxtb	r3, r3
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d17e      	bne.n	8006bfa <hagl_draw_line+0x142>
    int16_t dy;
    int16_t sy;
    int16_t err;
    int16_t e2;

    dx = ABS(x1 - x0);
 8006afc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006b00:	461a      	mov	r2, r3
 8006b02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006b06:	1ad3      	subs	r3, r2, r3
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	bfb8      	it	lt
 8006b0c:	425b      	neglt	r3, r3
 8006b0e:	82bb      	strh	r3, [r7, #20]
    sx = x0 < x1 ? 1 : -1;
 8006b10:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006b14:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	da01      	bge.n	8006b20 <hagl_draw_line+0x68>
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	e001      	b.n	8006b24 <hagl_draw_line+0x6c>
 8006b20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b24:	827b      	strh	r3, [r7, #18]
    dy = ABS(y1 - y0);
 8006b26:	f9b7 3000 	ldrsh.w	r3, [r7]
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006b30:	1ad3      	subs	r3, r2, r3
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	bfb8      	it	lt
 8006b36:	425b      	neglt	r3, r3
 8006b38:	823b      	strh	r3, [r7, #16]
    sy = y0 < y1 ? 1 : -1;
 8006b3a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8006b3e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8006b42:	429a      	cmp	r2, r3
 8006b44:	da01      	bge.n	8006b4a <hagl_draw_line+0x92>
 8006b46:	2301      	movs	r3, #1
 8006b48:	e001      	b.n	8006b4e <hagl_draw_line+0x96>
 8006b4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b4e:	81fb      	strh	r3, [r7, #14]
    err = (dx > dy ? dx : -dy) / 2;
 8006b50:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8006b54:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	dd06      	ble.n	8006b6a <hagl_draw_line+0xb2>
 8006b5c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006b60:	0fda      	lsrs	r2, r3, #31
 8006b62:	4413      	add	r3, r2
 8006b64:	105b      	asrs	r3, r3, #1
 8006b66:	b21b      	sxth	r3, r3
 8006b68:	e006      	b.n	8006b78 <hagl_draw_line+0xc0>
 8006b6a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006b6e:	0fda      	lsrs	r2, r3, #31
 8006b70:	4413      	add	r3, r2
 8006b72:	105b      	asrs	r3, r3, #1
 8006b74:	425b      	negs	r3, r3
 8006b76:	b21b      	sxth	r3, r3
 8006b78:	82fb      	strh	r3, [r7, #22]

    while (1) {
        hagl_put_pixel(x0, y0, color);
 8006b7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006b7e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006b82:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8006b84:	4618      	mov	r0, r3
 8006b86:	f7ff ff41 	bl	8006a0c <hagl_put_pixel>

        if (x0 == x1 && y0 == y1) {
 8006b8a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006b8e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006b92:	429a      	cmp	r2, r3
 8006b94:	d105      	bne.n	8006ba2 <hagl_draw_line+0xea>
 8006b96:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8006b9a:	f9b7 3000 	ldrsh.w	r3, [r7]
 8006b9e:	429a      	cmp	r2, r3
 8006ba0:	d02d      	beq.n	8006bfe <hagl_draw_line+0x146>
            break;
        };

        e2 = err + err;
 8006ba2:	8afb      	ldrh	r3, [r7, #22]
 8006ba4:	005b      	lsls	r3, r3, #1
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	81bb      	strh	r3, [r7, #12]

        if (e2 > -dx) {
 8006baa:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8006bae:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006bb2:	425b      	negs	r3, r3
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	dd0c      	ble.n	8006bd2 <hagl_draw_line+0x11a>
            err -= dy;
 8006bb8:	8afa      	ldrh	r2, [r7, #22]
 8006bba:	8a3b      	ldrh	r3, [r7, #16]
 8006bbc:	1ad3      	subs	r3, r2, r3
 8006bbe:	b29b      	uxth	r3, r3
 8006bc0:	82fb      	strh	r3, [r7, #22]
            x0 += sx;
 8006bc2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006bc6:	b29a      	uxth	r2, r3
 8006bc8:	8a7b      	ldrh	r3, [r7, #18]
 8006bca:	4413      	add	r3, r2
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	b21b      	sxth	r3, r3
 8006bd0:	80fb      	strh	r3, [r7, #6]
        }

        if (e2 < dy) {
 8006bd2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8006bd6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006bda:	429a      	cmp	r2, r3
 8006bdc:	dacd      	bge.n	8006b7a <hagl_draw_line+0xc2>
            err += dx;
 8006bde:	8afa      	ldrh	r2, [r7, #22]
 8006be0:	8abb      	ldrh	r3, [r7, #20]
 8006be2:	4413      	add	r3, r2
 8006be4:	b29b      	uxth	r3, r3
 8006be6:	82fb      	strh	r3, [r7, #22]
            y0 += sy;
 8006be8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006bec:	b29a      	uxth	r2, r3
 8006bee:	89fb      	ldrh	r3, [r7, #14]
 8006bf0:	4413      	add	r3, r2
 8006bf2:	b29b      	uxth	r3, r3
 8006bf4:	b21b      	sxth	r3, r3
 8006bf6:	80bb      	strh	r3, [r7, #4]
        hagl_put_pixel(x0, y0, color);
 8006bf8:	e7bf      	b.n	8006b7a <hagl_draw_line+0xc2>
        return;
 8006bfa:	bf00      	nop
 8006bfc:	e000      	b.n	8006c00 <hagl_draw_line+0x148>
            break;
 8006bfe:	bf00      	nop
        }
    }
}
 8006c00:	371c      	adds	r7, #28
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c06:	bf00      	nop
 8006c08:	2000000c 	.word	0x2000000c

08006c0c <hagl_fill_rectangle>:

/*
 * Draw a filled rectangle with given color.
 */
void hagl_fill_rectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 8006c0c:	b590      	push	{r4, r7, lr}
 8006c0e:	b085      	sub	sp, #20
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	4604      	mov	r4, r0
 8006c14:	4608      	mov	r0, r1
 8006c16:	4611      	mov	r1, r2
 8006c18:	461a      	mov	r2, r3
 8006c1a:	4623      	mov	r3, r4
 8006c1c:	80fb      	strh	r3, [r7, #6]
 8006c1e:	4603      	mov	r3, r0
 8006c20:	80bb      	strh	r3, [r7, #4]
 8006c22:	460b      	mov	r3, r1
 8006c24:	807b      	strh	r3, [r7, #2]
 8006c26:	4613      	mov	r3, r2
 8006c28:	803b      	strh	r3, [r7, #0]
    /* Make sure x0 is smaller than x1. */
    if (x0 > x1) {
 8006c2a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006c2e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006c32:	429a      	cmp	r2, r3
 8006c34:	dd0e      	ble.n	8006c54 <hagl_fill_rectangle+0x48>
        x0 = x0 + x1;
 8006c36:	88fa      	ldrh	r2, [r7, #6]
 8006c38:	887b      	ldrh	r3, [r7, #2]
 8006c3a:	4413      	add	r3, r2
 8006c3c:	b29b      	uxth	r3, r3
 8006c3e:	80fb      	strh	r3, [r7, #6]
        x1 = x0 - x1;
 8006c40:	88fa      	ldrh	r2, [r7, #6]
 8006c42:	887b      	ldrh	r3, [r7, #2]
 8006c44:	1ad3      	subs	r3, r2, r3
 8006c46:	b29b      	uxth	r3, r3
 8006c48:	807b      	strh	r3, [r7, #2]
        x0 = x0 - x1;
 8006c4a:	88fa      	ldrh	r2, [r7, #6]
 8006c4c:	887b      	ldrh	r3, [r7, #2]
 8006c4e:	1ad3      	subs	r3, r2, r3
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	80fb      	strh	r3, [r7, #6]
    }

    /* Make sure y0 is smaller than y1. */
    if (y0 > y1) {
 8006c54:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8006c58:	f9b7 3000 	ldrsh.w	r3, [r7]
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	dd0e      	ble.n	8006c7e <hagl_fill_rectangle+0x72>
        y0 = y0 + y1;
 8006c60:	88ba      	ldrh	r2, [r7, #4]
 8006c62:	883b      	ldrh	r3, [r7, #0]
 8006c64:	4413      	add	r3, r2
 8006c66:	b29b      	uxth	r3, r3
 8006c68:	80bb      	strh	r3, [r7, #4]
        y1 = y0 - y1;
 8006c6a:	88ba      	ldrh	r2, [r7, #4]
 8006c6c:	883b      	ldrh	r3, [r7, #0]
 8006c6e:	1ad3      	subs	r3, r2, r3
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	803b      	strh	r3, [r7, #0]
        y0 = y0 - y1;
 8006c74:	88ba      	ldrh	r2, [r7, #4]
 8006c76:	883b      	ldrh	r3, [r7, #0]
 8006c78:	1ad3      	subs	r3, r2, r3
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	80bb      	strh	r3, [r7, #4]
    }

    /* x1 or y1 is before the edge, nothing to do. */
    if ((x1 < clip_window.x0) || (y1 < clip_window.y0))  {
 8006c7e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006c82:	4a33      	ldr	r2, [pc, #204]	; (8006d50 <hagl_fill_rectangle+0x144>)
 8006c84:	8812      	ldrh	r2, [r2, #0]
 8006c86:	4293      	cmp	r3, r2
 8006c88:	db5b      	blt.n	8006d42 <hagl_fill_rectangle+0x136>
 8006c8a:	f9b7 3000 	ldrsh.w	r3, [r7]
 8006c8e:	4a30      	ldr	r2, [pc, #192]	; (8006d50 <hagl_fill_rectangle+0x144>)
 8006c90:	8852      	ldrh	r2, [r2, #2]
 8006c92:	4293      	cmp	r3, r2
 8006c94:	db55      	blt.n	8006d42 <hagl_fill_rectangle+0x136>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 8006c96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006c9a:	4a2d      	ldr	r2, [pc, #180]	; (8006d50 <hagl_fill_rectangle+0x144>)
 8006c9c:	8892      	ldrh	r2, [r2, #4]
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	dc51      	bgt.n	8006d46 <hagl_fill_rectangle+0x13a>
 8006ca2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006ca6:	4a2a      	ldr	r2, [pc, #168]	; (8006d50 <hagl_fill_rectangle+0x144>)
 8006ca8:	88d2      	ldrh	r2, [r2, #6]
 8006caa:	4293      	cmp	r3, r2
 8006cac:	dc4b      	bgt.n	8006d46 <hagl_fill_rectangle+0x13a>
        return;
    }

    x0 = max(x0, clip_window.x0);
 8006cae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006cb2:	4a27      	ldr	r2, [pc, #156]	; (8006d50 <hagl_fill_rectangle+0x144>)
 8006cb4:	8812      	ldrh	r2, [r2, #0]
 8006cb6:	4611      	mov	r1, r2
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f7ff fe72 	bl	80069a2 <max>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	80fb      	strh	r3, [r7, #6]
    y0 = max(y0, clip_window.y0);
 8006cc2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006cc6:	4a22      	ldr	r2, [pc, #136]	; (8006d50 <hagl_fill_rectangle+0x144>)
 8006cc8:	8852      	ldrh	r2, [r2, #2]
 8006cca:	4611      	mov	r1, r2
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f7ff fe68 	bl	80069a2 <max>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	80bb      	strh	r3, [r7, #4]
    x1 = min(x1, clip_window.x1);
 8006cd6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006cda:	4a1d      	ldr	r2, [pc, #116]	; (8006d50 <hagl_fill_rectangle+0x144>)
 8006cdc:	8892      	ldrh	r2, [r2, #4]
 8006cde:	4611      	mov	r1, r2
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	f7ff fe4c 	bl	800697e <min>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	807b      	strh	r3, [r7, #2]
    y1 = min(y1, clip_window.y1);
 8006cea:	f9b7 3000 	ldrsh.w	r3, [r7]
 8006cee:	4a18      	ldr	r2, [pc, #96]	; (8006d50 <hagl_fill_rectangle+0x144>)
 8006cf0:	88d2      	ldrh	r2, [r2, #6]
 8006cf2:	4611      	mov	r1, r2
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f7ff fe42 	bl	800697e <min>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	803b      	strh	r3, [r7, #0]

    uint16_t width = x1 - x0 + 1;
 8006cfe:	887a      	ldrh	r2, [r7, #2]
 8006d00:	88fb      	ldrh	r3, [r7, #6]
 8006d02:	1ad3      	subs	r3, r2, r3
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	3301      	adds	r3, #1
 8006d08:	81bb      	strh	r3, [r7, #12]
    uint16_t height = y1 - y0 + 1;
 8006d0a:	883a      	ldrh	r2, [r7, #0]
 8006d0c:	88bb      	ldrh	r3, [r7, #4]
 8006d0e:	1ad3      	subs	r3, r2, r3
 8006d10:	b29b      	uxth	r3, r3
 8006d12:	3301      	adds	r3, #1
 8006d14:	817b      	strh	r3, [r7, #10]

    for (uint16_t i = 0; i < height; i++) {
 8006d16:	2300      	movs	r3, #0
 8006d18:	81fb      	strh	r3, [r7, #14]
 8006d1a:	e00d      	b.n	8006d38 <hagl_fill_rectangle+0x12c>
#ifdef HAGL_HAS_HAL_HLINE
        /* Already clipped so can call HAL directly. */
        hagl_hal_hline(x0, y0 + i, width, color);
#else
        hagl_draw_hline(x0, y0 + i, width, color);
 8006d1c:	88ba      	ldrh	r2, [r7, #4]
 8006d1e:	89fb      	ldrh	r3, [r7, #14]
 8006d20:	4413      	add	r3, r2
 8006d22:	b29b      	uxth	r3, r3
 8006d24:	b219      	sxth	r1, r3
 8006d26:	8c3b      	ldrh	r3, [r7, #32]
 8006d28:	89ba      	ldrh	r2, [r7, #12]
 8006d2a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8006d2e:	f7ff fe9f 	bl	8006a70 <hagl_draw_hline>
    for (uint16_t i = 0; i < height; i++) {
 8006d32:	89fb      	ldrh	r3, [r7, #14]
 8006d34:	3301      	adds	r3, #1
 8006d36:	81fb      	strh	r3, [r7, #14]
 8006d38:	89fa      	ldrh	r2, [r7, #14]
 8006d3a:	897b      	ldrh	r3, [r7, #10]
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	d3ed      	bcc.n	8006d1c <hagl_fill_rectangle+0x110>
 8006d40:	e002      	b.n	8006d48 <hagl_fill_rectangle+0x13c>
        return;
 8006d42:	bf00      	nop
 8006d44:	e000      	b.n	8006d48 <hagl_fill_rectangle+0x13c>
        return;
 8006d46:	bf00      	nop
#endif
    }
}
 8006d48:	3714      	adds	r7, #20
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd90      	pop	{r4, r7, pc}
 8006d4e:	bf00      	nop
 8006d50:	2000000c 	.word	0x2000000c

08006d54 <hagl_put_char>:

    return 0;
}

uint8_t hagl_put_char(wchar_t code, int16_t x0, int16_t y0, color_t color, const uint8_t *font)
{
 8006d54:	b590      	push	{r4, r7, lr}
 8006d56:	f5ad 5d81 	sub.w	sp, sp, #4128	; 0x1020
 8006d5a:	b085      	sub	sp, #20
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8006d62:	f844 0c24 	str.w	r0, [r4, #-36]
 8006d66:	460c      	mov	r4, r1
 8006d68:	4610      	mov	r0, r2
 8006d6a:	4619      	mov	r1, r3
 8006d6c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006d70:	4622      	mov	r2, r4
 8006d72:	f823 2c26 	strh.w	r2, [r3, #-38]
 8006d76:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006d7a:	4602      	mov	r2, r0
 8006d7c:	f823 2c28 	strh.w	r2, [r3, #-40]
 8006d80:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006d84:	460a      	mov	r2, r1
 8006d86:	f823 2c2a 	strh.w	r2, [r3, #-42]
    uint8_t set, status;
    color_t buffer[HAGL_CHAR_BUFFER_SIZE];
    bitmap_t bitmap;
    fontx_glyph_t glyph;

    status = fontx_glyph(&glyph, code, font);
 8006d8a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006d8e:	4619      	mov	r1, r3
 8006d90:	f107 0310 	add.w	r3, r7, #16
 8006d94:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006d98:	6812      	ldr	r2, [r2, #0]
 8006d9a:	f851 1c24 	ldr.w	r1, [r1, #-36]
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f7ff fd5b 	bl	800685a <fontx_glyph>
 8006da4:	4603      	mov	r3, r0
 8006da6:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8006daa:	f102 0209 	add.w	r2, r2, #9
 8006dae:	7013      	strb	r3, [r2, #0]

    if (0 != status) {
 8006db0:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8006db4:	f103 0309 	add.w	r3, r3, #9
 8006db8:	781b      	ldrb	r3, [r3, #0]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d001      	beq.n	8006dc2 <hagl_put_char+0x6e>
        return 0;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	e0c9      	b.n	8006f56 <hagl_put_char+0x202>
    }

    bitmap.width = glyph.width,
 8006dc2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006dc6:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8006dca:	b29a      	uxth	r2, r3
 8006dcc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006dd0:	f823 2c18 	strh.w	r2, [r3, #-24]
    bitmap.height = glyph.height,
 8006dd4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006dd8:	f813 3c1f 	ldrb.w	r3, [r3, #-31]
 8006ddc:	b29a      	uxth	r2, r3
 8006dde:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006de2:	f823 2c16 	strh.w	r2, [r3, #-22]
    bitmap.depth = DISPLAY_DEPTH,
 8006de6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006dea:	2210      	movs	r2, #16
 8006dec:	f803 2c12 	strb.w	r2, [r3, #-18]

    bitmap_init(&bitmap, (uint8_t *)buffer);
 8006df0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006df4:	3a08      	subs	r2, #8
 8006df6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006dfa:	3b18      	subs	r3, #24
 8006dfc:	4611      	mov	r1, r2
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f7ff fb95 	bl	800652e <bitmap_init>

    color_t *ptr = (color_t *) bitmap.buffer;
 8006e04:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006e08:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 8006e0c:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8006e10:	f102 020c 	add.w	r2, r2, #12
 8006e14:	6013      	str	r3, [r2, #0]

    for (uint8_t y = 0; y < glyph.height; y++) {
 8006e16:	2300      	movs	r3, #0
 8006e18:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8006e1c:	f102 020b 	add.w	r2, r2, #11
 8006e20:	7013      	strb	r3, [r2, #0]
 8006e22:	e079      	b.n	8006f18 <hagl_put_char+0x1c4>
        for (uint8_t x = 0; x < glyph.width; x++) {
 8006e24:	2300      	movs	r3, #0
 8006e26:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8006e2a:	f102 020a 	add.w	r2, r2, #10
 8006e2e:	7013      	strb	r3, [r2, #0]
 8006e30:	e04f      	b.n	8006ed2 <hagl_put_char+0x17e>
            set = *(glyph.buffer + x / 8) & (0x80 >> (x % 8));
 8006e32:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006e36:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8006e3a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8006e3e:	f102 020a 	add.w	r2, r2, #10
 8006e42:	7812      	ldrb	r2, [r2, #0]
 8006e44:	08d2      	lsrs	r2, r2, #3
 8006e46:	b2d2      	uxtb	r2, r2
 8006e48:	4413      	add	r3, r2
 8006e4a:	781b      	ldrb	r3, [r3, #0]
 8006e4c:	b25a      	sxtb	r2, r3
 8006e4e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8006e52:	f103 030a 	add.w	r3, r3, #10
 8006e56:	781b      	ldrb	r3, [r3, #0]
 8006e58:	f003 0307 	and.w	r3, r3, #7
 8006e5c:	2180      	movs	r1, #128	; 0x80
 8006e5e:	fa41 f303 	asr.w	r3, r1, r3
 8006e62:	b25b      	sxtb	r3, r3
 8006e64:	4013      	ands	r3, r2
 8006e66:	b25b      	sxtb	r3, r3
 8006e68:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8006e6c:	f102 0208 	add.w	r2, r2, #8
 8006e70:	7013      	strb	r3, [r2, #0]
            if (set) {
 8006e72:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8006e76:	f103 0308 	add.w	r3, r3, #8
 8006e7a:	781b      	ldrb	r3, [r3, #0]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d010      	beq.n	8006ea2 <hagl_put_char+0x14e>
                *(ptr++) = color;
 8006e80:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8006e84:	f103 030c 	add.w	r3, r3, #12
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	1c9a      	adds	r2, r3, #2
 8006e8c:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 8006e90:	f101 010c 	add.w	r1, r1, #12
 8006e94:	600a      	str	r2, [r1, #0]
 8006e96:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006e9a:	f832 2c2a 	ldrh.w	r2, [r2, #-42]
 8006e9e:	801a      	strh	r2, [r3, #0]
 8006ea0:	e00c      	b.n	8006ebc <hagl_put_char+0x168>
            } else {
                *(ptr++) = 0x0000;
 8006ea2:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8006ea6:	f103 030c 	add.w	r3, r3, #12
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	1c9a      	adds	r2, r3, #2
 8006eae:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 8006eb2:	f101 010c 	add.w	r1, r1, #12
 8006eb6:	600a      	str	r2, [r1, #0]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	801a      	strh	r2, [r3, #0]
        for (uint8_t x = 0; x < glyph.width; x++) {
 8006ebc:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8006ec0:	f103 030a 	add.w	r3, r3, #10
 8006ec4:	781b      	ldrb	r3, [r3, #0]
 8006ec6:	3301      	adds	r3, #1
 8006ec8:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8006ecc:	f102 020a 	add.w	r2, r2, #10
 8006ed0:	7013      	strb	r3, [r2, #0]
 8006ed2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006ed6:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8006eda:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8006ede:	f102 020a 	add.w	r2, r2, #10
 8006ee2:	7812      	ldrb	r2, [r2, #0]
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	d3a4      	bcc.n	8006e32 <hagl_put_char+0xde>
            }
        }
        glyph.buffer += glyph.pitch;
 8006ee8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006eec:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8006ef0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006ef4:	f812 2c1d 	ldrb.w	r2, [r2, #-29]
 8006ef8:	4413      	add	r3, r2
 8006efa:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006efe:	f842 3c1c 	str.w	r3, [r2, #-28]
    for (uint8_t y = 0; y < glyph.height; y++) {
 8006f02:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8006f06:	f103 030b 	add.w	r3, r3, #11
 8006f0a:	781b      	ldrb	r3, [r3, #0]
 8006f0c:	3301      	adds	r3, #1
 8006f0e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8006f12:	f102 020b 	add.w	r2, r2, #11
 8006f16:	7013      	strb	r3, [r2, #0]
 8006f18:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006f1c:	f813 3c1f 	ldrb.w	r3, [r3, #-31]
 8006f20:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8006f24:	f102 020b 	add.w	r2, r2, #11
 8006f28:	7812      	ldrb	r2, [r2, #0]
 8006f2a:	429a      	cmp	r2, r3
 8006f2c:	f4ff af7a 	bcc.w	8006e24 <hagl_put_char+0xd0>
    }

    hagl_blit(x0, y0, &bitmap);
 8006f30:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006f34:	3b18      	subs	r3, #24
 8006f36:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006f3a:	f932 1c28 	ldrsh.w	r1, [r2, #-40]
 8006f3e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006f42:	f932 0c26 	ldrsh.w	r0, [r2, #-38]
 8006f46:	461a      	mov	r2, r3
 8006f48:	f000 f85a 	bl	8007000 <hagl_blit>

    return bitmap.width;
 8006f4c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006f50:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8006f54:	b2db      	uxtb	r3, r3
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	f507 5781 	add.w	r7, r7, #4128	; 0x1020
 8006f5c:	3714      	adds	r7, #20
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd90      	pop	{r4, r7, pc}

08006f62 <hagl_put_text>:
 * Write a string of text by calling hagl_put_char() repeadetly. CR and LF
 * continue from the next line.
 */

uint16_t hagl_put_text(const wchar_t *str, int16_t x0, int16_t y0, color_t color, const unsigned char *font)
{
 8006f62:	b580      	push	{r7, lr}
 8006f64:	b08c      	sub	sp, #48	; 0x30
 8006f66:	af02      	add	r7, sp, #8
 8006f68:	60f8      	str	r0, [r7, #12]
 8006f6a:	4608      	mov	r0, r1
 8006f6c:	4611      	mov	r1, r2
 8006f6e:	461a      	mov	r2, r3
 8006f70:	4603      	mov	r3, r0
 8006f72:	817b      	strh	r3, [r7, #10]
 8006f74:	460b      	mov	r3, r1
 8006f76:	813b      	strh	r3, [r7, #8]
 8006f78:	4613      	mov	r3, r2
 8006f7a:	80fb      	strh	r3, [r7, #6]
    wchar_t temp;
    uint8_t status;
    uint16_t original = x0;
 8006f7c:	897b      	ldrh	r3, [r7, #10]
 8006f7e:	84fb      	strh	r3, [r7, #38]	; 0x26
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 8006f80:	f107 0314 	add.w	r3, r7, #20
 8006f84:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006f86:	4618      	mov	r0, r3
 8006f88:	f7ff fc4a 	bl	8006820 <fontx_meta>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    if (0 != status) {
 8006f92:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d001      	beq.n	8006f9e <hagl_put_text+0x3c>
        return 0;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	e02c      	b.n	8006ff8 <hagl_put_text+0x96>
    }

    do {
        temp = *str++;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	1d1a      	adds	r2, r3, #4
 8006fa2:	60fa      	str	r2, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	623b      	str	r3, [r7, #32]
        if (13 == temp || 10 == temp) {
 8006fa8:	6a3b      	ldr	r3, [r7, #32]
 8006faa:	2b0d      	cmp	r3, #13
 8006fac:	d002      	beq.n	8006fb4 <hagl_put_text+0x52>
 8006fae:	6a3b      	ldr	r3, [r7, #32]
 8006fb0:	2b0a      	cmp	r3, #10
 8006fb2:	d108      	bne.n	8006fc6 <hagl_put_text+0x64>
            x0 = 0;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	817b      	strh	r3, [r7, #10]
            y0 += meta.height;
 8006fb8:	7fbb      	ldrb	r3, [r7, #30]
 8006fba:	b29a      	uxth	r2, r3
 8006fbc:	893b      	ldrh	r3, [r7, #8]
 8006fbe:	4413      	add	r3, r2
 8006fc0:	b29b      	uxth	r3, r3
 8006fc2:	813b      	strh	r3, [r7, #8]
 8006fc4:	e010      	b.n	8006fe8 <hagl_put_text+0x86>
        } else {
            x0 += hagl_put_char(temp, x0, y0, color, font);
 8006fc6:	88f8      	ldrh	r0, [r7, #6]
 8006fc8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8006fcc:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8006fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fd2:	9300      	str	r3, [sp, #0]
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	6a38      	ldr	r0, [r7, #32]
 8006fd8:	f7ff febc 	bl	8006d54 <hagl_put_char>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	b29a      	uxth	r2, r3
 8006fe0:	897b      	ldrh	r3, [r7, #10]
 8006fe2:	4413      	add	r3, r2
 8006fe4:	b29b      	uxth	r3, r3
 8006fe6:	817b      	strh	r3, [r7, #10]
        }
    } while (*str != 0);
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d1d6      	bne.n	8006f9e <hagl_put_text+0x3c>

    return x0 - original;
 8006ff0:	897a      	ldrh	r2, [r7, #10]
 8006ff2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006ff4:	1ad3      	subs	r3, r2, r3
 8006ff6:	b29b      	uxth	r3, r3
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	3728      	adds	r7, #40	; 0x28
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}

08007000 <hagl_blit>:
 * configurable source and destination see the file blit.c.
 *
 * TODO: Handle transparency.
 */

void hagl_blit(int16_t x0, int16_t y0, bitmap_t *source) {
 8007000:	b580      	push	{r7, lr}
 8007002:	b086      	sub	sp, #24
 8007004:	af00      	add	r7, sp, #0
 8007006:	4603      	mov	r3, r0
 8007008:	603a      	str	r2, [r7, #0]
 800700a:	80fb      	strh	r3, [r7, #6]
 800700c:	460b      	mov	r3, r1
 800700e:	80bb      	strh	r3, [r7, #4]
        /* Inside of bounds, can use HAL provided blit. */
        hagl_hal_blit(x0, y0, source);
    }
#else
    color_t color;
    color_t *ptr = (color_t *) source->buffer;
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	68db      	ldr	r3, [r3, #12]
 8007014:	617b      	str	r3, [r7, #20]

    for (uint16_t y = 0; y < source->height; y++) {
 8007016:	2300      	movs	r3, #0
 8007018:	827b      	strh	r3, [r7, #18]
 800701a:	e020      	b.n	800705e <hagl_blit+0x5e>
        for (uint16_t x = 0; x < source->width; x++) {
 800701c:	2300      	movs	r3, #0
 800701e:	823b      	strh	r3, [r7, #16]
 8007020:	e015      	b.n	800704e <hagl_blit+0x4e>
            color = *(ptr++);
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	1c9a      	adds	r2, r3, #2
 8007026:	617a      	str	r2, [r7, #20]
 8007028:	881b      	ldrh	r3, [r3, #0]
 800702a:	81fb      	strh	r3, [r7, #14]
            hagl_put_pixel(x0 + x, y0 + y, color);
 800702c:	88fa      	ldrh	r2, [r7, #6]
 800702e:	8a3b      	ldrh	r3, [r7, #16]
 8007030:	4413      	add	r3, r2
 8007032:	b29b      	uxth	r3, r3
 8007034:	b218      	sxth	r0, r3
 8007036:	88ba      	ldrh	r2, [r7, #4]
 8007038:	8a7b      	ldrh	r3, [r7, #18]
 800703a:	4413      	add	r3, r2
 800703c:	b29b      	uxth	r3, r3
 800703e:	b21b      	sxth	r3, r3
 8007040:	89fa      	ldrh	r2, [r7, #14]
 8007042:	4619      	mov	r1, r3
 8007044:	f7ff fce2 	bl	8006a0c <hagl_put_pixel>
        for (uint16_t x = 0; x < source->width; x++) {
 8007048:	8a3b      	ldrh	r3, [r7, #16]
 800704a:	3301      	adds	r3, #1
 800704c:	823b      	strh	r3, [r7, #16]
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	881b      	ldrh	r3, [r3, #0]
 8007052:	8a3a      	ldrh	r2, [r7, #16]
 8007054:	429a      	cmp	r2, r3
 8007056:	d3e4      	bcc.n	8007022 <hagl_blit+0x22>
    for (uint16_t y = 0; y < source->height; y++) {
 8007058:	8a7b      	ldrh	r3, [r7, #18]
 800705a:	3301      	adds	r3, #1
 800705c:	827b      	strh	r3, [r7, #18]
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	885b      	ldrh	r3, [r3, #2]
 8007062:	8a7a      	ldrh	r2, [r7, #18]
 8007064:	429a      	cmp	r2, r3
 8007066:	d3d9      	bcc.n	800701c <hagl_blit+0x1c>
        }
    }
#endif
};
 8007068:	bf00      	nop
 800706a:	bf00      	nop
 800706c:	3718      	adds	r7, #24
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}
	...

08007074 <hagl_clear_screen>:
        }
    }
#endif
};

void hagl_clear_screen() {
 8007074:	b580      	push	{r7, lr}
 8007076:	b084      	sub	sp, #16
 8007078:	af02      	add	r7, sp, #8
#ifdef HAGL_HAS_HAL_CLEAR_SCREEN
    hagl_hal_clear_screen();
#else
    uint16_t x0 = clip_window.x0;
 800707a:	4b12      	ldr	r3, [pc, #72]	; (80070c4 <hagl_clear_screen+0x50>)
 800707c:	881b      	ldrh	r3, [r3, #0]
 800707e:	80fb      	strh	r3, [r7, #6]
    uint16_t y0 = clip_window.y0;
 8007080:	4b10      	ldr	r3, [pc, #64]	; (80070c4 <hagl_clear_screen+0x50>)
 8007082:	885b      	ldrh	r3, [r3, #2]
 8007084:	80bb      	strh	r3, [r7, #4]
    uint16_t x1 = clip_window.x1;
 8007086:	4b0f      	ldr	r3, [pc, #60]	; (80070c4 <hagl_clear_screen+0x50>)
 8007088:	889b      	ldrh	r3, [r3, #4]
 800708a:	807b      	strh	r3, [r7, #2]
    uint16_t y1 = clip_window.y1;
 800708c:	4b0d      	ldr	r3, [pc, #52]	; (80070c4 <hagl_clear_screen+0x50>)
 800708e:	88db      	ldrh	r3, [r3, #6]
 8007090:	803b      	strh	r3, [r7, #0]

    hagl_set_clip_window(0, 0, DISPLAY_WIDTH - 1, DISPLAY_HEIGHT -1);
 8007092:	237f      	movs	r3, #127	; 0x7f
 8007094:	229f      	movs	r2, #159	; 0x9f
 8007096:	2100      	movs	r1, #0
 8007098:	2000      	movs	r0, #0
 800709a:	f7ff fc95 	bl	80069c8 <hagl_set_clip_window>
    hagl_fill_rectangle(0, 0, DISPLAY_WIDTH - 1, DISPLAY_HEIGHT -1, 0x00);
 800709e:	2300      	movs	r3, #0
 80070a0:	9300      	str	r3, [sp, #0]
 80070a2:	237f      	movs	r3, #127	; 0x7f
 80070a4:	229f      	movs	r2, #159	; 0x9f
 80070a6:	2100      	movs	r1, #0
 80070a8:	2000      	movs	r0, #0
 80070aa:	f7ff fdaf 	bl	8006c0c <hagl_fill_rectangle>
    hagl_set_clip_window(x0, y0, x1, y1);
 80070ae:	883b      	ldrh	r3, [r7, #0]
 80070b0:	887a      	ldrh	r2, [r7, #2]
 80070b2:	88b9      	ldrh	r1, [r7, #4]
 80070b4:	88f8      	ldrh	r0, [r7, #6]
 80070b6:	f7ff fc87 	bl	80069c8 <hagl_set_clip_window>
#endif
}
 80070ba:	bf00      	nop
 80070bc:	3708      	adds	r7, #8
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}
 80070c2:	bf00      	nop
 80070c4:	2000000c 	.word	0x2000000c

080070c8 <hagl_init>:
#else
    return rgb565(r, g, b);
#endif
}

bitmap_t *hagl_init() {
 80070c8:	b580      	push	{r7, lr}
 80070ca:	af00      	add	r7, sp, #0
#ifdef HAGL_HAS_HAL_INIT
    bitmap_t *bb = hagl_hal_init();
    hagl_clear_screen();
    return bb;
#else
    hagl_clear_screen();
 80070cc:	f7ff ffd2 	bl	8007074 <hagl_clear_screen>
    return NULL;
 80070d0:	2300      	movs	r3, #0
#endif
};
 80070d2:	4618      	mov	r0, r3
 80070d4:	bd80      	pop	{r7, pc}
	...

080070d8 <__errno>:
 80070d8:	4b01      	ldr	r3, [pc, #4]	; (80070e0 <__errno+0x8>)
 80070da:	6818      	ldr	r0, [r3, #0]
 80070dc:	4770      	bx	lr
 80070de:	bf00      	nop
 80070e0:	20000014 	.word	0x20000014

080070e4 <__sflush_r>:
 80070e4:	898a      	ldrh	r2, [r1, #12]
 80070e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070ea:	4605      	mov	r5, r0
 80070ec:	0710      	lsls	r0, r2, #28
 80070ee:	460c      	mov	r4, r1
 80070f0:	d458      	bmi.n	80071a4 <__sflush_r+0xc0>
 80070f2:	684b      	ldr	r3, [r1, #4]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	dc05      	bgt.n	8007104 <__sflush_r+0x20>
 80070f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	dc02      	bgt.n	8007104 <__sflush_r+0x20>
 80070fe:	2000      	movs	r0, #0
 8007100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007104:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007106:	2e00      	cmp	r6, #0
 8007108:	d0f9      	beq.n	80070fe <__sflush_r+0x1a>
 800710a:	2300      	movs	r3, #0
 800710c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007110:	682f      	ldr	r7, [r5, #0]
 8007112:	602b      	str	r3, [r5, #0]
 8007114:	d032      	beq.n	800717c <__sflush_r+0x98>
 8007116:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007118:	89a3      	ldrh	r3, [r4, #12]
 800711a:	075a      	lsls	r2, r3, #29
 800711c:	d505      	bpl.n	800712a <__sflush_r+0x46>
 800711e:	6863      	ldr	r3, [r4, #4]
 8007120:	1ac0      	subs	r0, r0, r3
 8007122:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007124:	b10b      	cbz	r3, 800712a <__sflush_r+0x46>
 8007126:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007128:	1ac0      	subs	r0, r0, r3
 800712a:	2300      	movs	r3, #0
 800712c:	4602      	mov	r2, r0
 800712e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007130:	6a21      	ldr	r1, [r4, #32]
 8007132:	4628      	mov	r0, r5
 8007134:	47b0      	blx	r6
 8007136:	1c43      	adds	r3, r0, #1
 8007138:	89a3      	ldrh	r3, [r4, #12]
 800713a:	d106      	bne.n	800714a <__sflush_r+0x66>
 800713c:	6829      	ldr	r1, [r5, #0]
 800713e:	291d      	cmp	r1, #29
 8007140:	d82c      	bhi.n	800719c <__sflush_r+0xb8>
 8007142:	4a2a      	ldr	r2, [pc, #168]	; (80071ec <__sflush_r+0x108>)
 8007144:	40ca      	lsrs	r2, r1
 8007146:	07d6      	lsls	r6, r2, #31
 8007148:	d528      	bpl.n	800719c <__sflush_r+0xb8>
 800714a:	2200      	movs	r2, #0
 800714c:	6062      	str	r2, [r4, #4]
 800714e:	04d9      	lsls	r1, r3, #19
 8007150:	6922      	ldr	r2, [r4, #16]
 8007152:	6022      	str	r2, [r4, #0]
 8007154:	d504      	bpl.n	8007160 <__sflush_r+0x7c>
 8007156:	1c42      	adds	r2, r0, #1
 8007158:	d101      	bne.n	800715e <__sflush_r+0x7a>
 800715a:	682b      	ldr	r3, [r5, #0]
 800715c:	b903      	cbnz	r3, 8007160 <__sflush_r+0x7c>
 800715e:	6560      	str	r0, [r4, #84]	; 0x54
 8007160:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007162:	602f      	str	r7, [r5, #0]
 8007164:	2900      	cmp	r1, #0
 8007166:	d0ca      	beq.n	80070fe <__sflush_r+0x1a>
 8007168:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800716c:	4299      	cmp	r1, r3
 800716e:	d002      	beq.n	8007176 <__sflush_r+0x92>
 8007170:	4628      	mov	r0, r5
 8007172:	f000 fa21 	bl	80075b8 <_free_r>
 8007176:	2000      	movs	r0, #0
 8007178:	6360      	str	r0, [r4, #52]	; 0x34
 800717a:	e7c1      	b.n	8007100 <__sflush_r+0x1c>
 800717c:	6a21      	ldr	r1, [r4, #32]
 800717e:	2301      	movs	r3, #1
 8007180:	4628      	mov	r0, r5
 8007182:	47b0      	blx	r6
 8007184:	1c41      	adds	r1, r0, #1
 8007186:	d1c7      	bne.n	8007118 <__sflush_r+0x34>
 8007188:	682b      	ldr	r3, [r5, #0]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d0c4      	beq.n	8007118 <__sflush_r+0x34>
 800718e:	2b1d      	cmp	r3, #29
 8007190:	d001      	beq.n	8007196 <__sflush_r+0xb2>
 8007192:	2b16      	cmp	r3, #22
 8007194:	d101      	bne.n	800719a <__sflush_r+0xb6>
 8007196:	602f      	str	r7, [r5, #0]
 8007198:	e7b1      	b.n	80070fe <__sflush_r+0x1a>
 800719a:	89a3      	ldrh	r3, [r4, #12]
 800719c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071a0:	81a3      	strh	r3, [r4, #12]
 80071a2:	e7ad      	b.n	8007100 <__sflush_r+0x1c>
 80071a4:	690f      	ldr	r7, [r1, #16]
 80071a6:	2f00      	cmp	r7, #0
 80071a8:	d0a9      	beq.n	80070fe <__sflush_r+0x1a>
 80071aa:	0793      	lsls	r3, r2, #30
 80071ac:	680e      	ldr	r6, [r1, #0]
 80071ae:	bf08      	it	eq
 80071b0:	694b      	ldreq	r3, [r1, #20]
 80071b2:	600f      	str	r7, [r1, #0]
 80071b4:	bf18      	it	ne
 80071b6:	2300      	movne	r3, #0
 80071b8:	eba6 0807 	sub.w	r8, r6, r7
 80071bc:	608b      	str	r3, [r1, #8]
 80071be:	f1b8 0f00 	cmp.w	r8, #0
 80071c2:	dd9c      	ble.n	80070fe <__sflush_r+0x1a>
 80071c4:	6a21      	ldr	r1, [r4, #32]
 80071c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80071c8:	4643      	mov	r3, r8
 80071ca:	463a      	mov	r2, r7
 80071cc:	4628      	mov	r0, r5
 80071ce:	47b0      	blx	r6
 80071d0:	2800      	cmp	r0, #0
 80071d2:	dc06      	bgt.n	80071e2 <__sflush_r+0xfe>
 80071d4:	89a3      	ldrh	r3, [r4, #12]
 80071d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071da:	81a3      	strh	r3, [r4, #12]
 80071dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80071e0:	e78e      	b.n	8007100 <__sflush_r+0x1c>
 80071e2:	4407      	add	r7, r0
 80071e4:	eba8 0800 	sub.w	r8, r8, r0
 80071e8:	e7e9      	b.n	80071be <__sflush_r+0xda>
 80071ea:	bf00      	nop
 80071ec:	20400001 	.word	0x20400001

080071f0 <_fflush_r>:
 80071f0:	b538      	push	{r3, r4, r5, lr}
 80071f2:	690b      	ldr	r3, [r1, #16]
 80071f4:	4605      	mov	r5, r0
 80071f6:	460c      	mov	r4, r1
 80071f8:	b913      	cbnz	r3, 8007200 <_fflush_r+0x10>
 80071fa:	2500      	movs	r5, #0
 80071fc:	4628      	mov	r0, r5
 80071fe:	bd38      	pop	{r3, r4, r5, pc}
 8007200:	b118      	cbz	r0, 800720a <_fflush_r+0x1a>
 8007202:	6983      	ldr	r3, [r0, #24]
 8007204:	b90b      	cbnz	r3, 800720a <_fflush_r+0x1a>
 8007206:	f000 f887 	bl	8007318 <__sinit>
 800720a:	4b14      	ldr	r3, [pc, #80]	; (800725c <_fflush_r+0x6c>)
 800720c:	429c      	cmp	r4, r3
 800720e:	d11b      	bne.n	8007248 <_fflush_r+0x58>
 8007210:	686c      	ldr	r4, [r5, #4]
 8007212:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d0ef      	beq.n	80071fa <_fflush_r+0xa>
 800721a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800721c:	07d0      	lsls	r0, r2, #31
 800721e:	d404      	bmi.n	800722a <_fflush_r+0x3a>
 8007220:	0599      	lsls	r1, r3, #22
 8007222:	d402      	bmi.n	800722a <_fflush_r+0x3a>
 8007224:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007226:	f000 f93a 	bl	800749e <__retarget_lock_acquire_recursive>
 800722a:	4628      	mov	r0, r5
 800722c:	4621      	mov	r1, r4
 800722e:	f7ff ff59 	bl	80070e4 <__sflush_r>
 8007232:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007234:	07da      	lsls	r2, r3, #31
 8007236:	4605      	mov	r5, r0
 8007238:	d4e0      	bmi.n	80071fc <_fflush_r+0xc>
 800723a:	89a3      	ldrh	r3, [r4, #12]
 800723c:	059b      	lsls	r3, r3, #22
 800723e:	d4dd      	bmi.n	80071fc <_fflush_r+0xc>
 8007240:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007242:	f000 f92d 	bl	80074a0 <__retarget_lock_release_recursive>
 8007246:	e7d9      	b.n	80071fc <_fflush_r+0xc>
 8007248:	4b05      	ldr	r3, [pc, #20]	; (8007260 <_fflush_r+0x70>)
 800724a:	429c      	cmp	r4, r3
 800724c:	d101      	bne.n	8007252 <_fflush_r+0x62>
 800724e:	68ac      	ldr	r4, [r5, #8]
 8007250:	e7df      	b.n	8007212 <_fflush_r+0x22>
 8007252:	4b04      	ldr	r3, [pc, #16]	; (8007264 <_fflush_r+0x74>)
 8007254:	429c      	cmp	r4, r3
 8007256:	bf08      	it	eq
 8007258:	68ec      	ldreq	r4, [r5, #12]
 800725a:	e7da      	b.n	8007212 <_fflush_r+0x22>
 800725c:	0800fdb4 	.word	0x0800fdb4
 8007260:	0800fdd4 	.word	0x0800fdd4
 8007264:	0800fd94 	.word	0x0800fd94

08007268 <std>:
 8007268:	2300      	movs	r3, #0
 800726a:	b510      	push	{r4, lr}
 800726c:	4604      	mov	r4, r0
 800726e:	e9c0 3300 	strd	r3, r3, [r0]
 8007272:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007276:	6083      	str	r3, [r0, #8]
 8007278:	8181      	strh	r1, [r0, #12]
 800727a:	6643      	str	r3, [r0, #100]	; 0x64
 800727c:	81c2      	strh	r2, [r0, #14]
 800727e:	6183      	str	r3, [r0, #24]
 8007280:	4619      	mov	r1, r3
 8007282:	2208      	movs	r2, #8
 8007284:	305c      	adds	r0, #92	; 0x5c
 8007286:	f000 f98f 	bl	80075a8 <memset>
 800728a:	4b05      	ldr	r3, [pc, #20]	; (80072a0 <std+0x38>)
 800728c:	6263      	str	r3, [r4, #36]	; 0x24
 800728e:	4b05      	ldr	r3, [pc, #20]	; (80072a4 <std+0x3c>)
 8007290:	62a3      	str	r3, [r4, #40]	; 0x28
 8007292:	4b05      	ldr	r3, [pc, #20]	; (80072a8 <std+0x40>)
 8007294:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007296:	4b05      	ldr	r3, [pc, #20]	; (80072ac <std+0x44>)
 8007298:	6224      	str	r4, [r4, #32]
 800729a:	6323      	str	r3, [r4, #48]	; 0x30
 800729c:	bd10      	pop	{r4, pc}
 800729e:	bf00      	nop
 80072a0:	08008189 	.word	0x08008189
 80072a4:	080081ab 	.word	0x080081ab
 80072a8:	080081e3 	.word	0x080081e3
 80072ac:	08008207 	.word	0x08008207

080072b0 <_cleanup_r>:
 80072b0:	4901      	ldr	r1, [pc, #4]	; (80072b8 <_cleanup_r+0x8>)
 80072b2:	f000 b8af 	b.w	8007414 <_fwalk_reent>
 80072b6:	bf00      	nop
 80072b8:	080071f1 	.word	0x080071f1

080072bc <__sfmoreglue>:
 80072bc:	b570      	push	{r4, r5, r6, lr}
 80072be:	2268      	movs	r2, #104	; 0x68
 80072c0:	1e4d      	subs	r5, r1, #1
 80072c2:	4355      	muls	r5, r2
 80072c4:	460e      	mov	r6, r1
 80072c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80072ca:	f000 f9e1 	bl	8007690 <_malloc_r>
 80072ce:	4604      	mov	r4, r0
 80072d0:	b140      	cbz	r0, 80072e4 <__sfmoreglue+0x28>
 80072d2:	2100      	movs	r1, #0
 80072d4:	e9c0 1600 	strd	r1, r6, [r0]
 80072d8:	300c      	adds	r0, #12
 80072da:	60a0      	str	r0, [r4, #8]
 80072dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80072e0:	f000 f962 	bl	80075a8 <memset>
 80072e4:	4620      	mov	r0, r4
 80072e6:	bd70      	pop	{r4, r5, r6, pc}

080072e8 <__sfp_lock_acquire>:
 80072e8:	4801      	ldr	r0, [pc, #4]	; (80072f0 <__sfp_lock_acquire+0x8>)
 80072ea:	f000 b8d8 	b.w	800749e <__retarget_lock_acquire_recursive>
 80072ee:	bf00      	nop
 80072f0:	2000037d 	.word	0x2000037d

080072f4 <__sfp_lock_release>:
 80072f4:	4801      	ldr	r0, [pc, #4]	; (80072fc <__sfp_lock_release+0x8>)
 80072f6:	f000 b8d3 	b.w	80074a0 <__retarget_lock_release_recursive>
 80072fa:	bf00      	nop
 80072fc:	2000037d 	.word	0x2000037d

08007300 <__sinit_lock_acquire>:
 8007300:	4801      	ldr	r0, [pc, #4]	; (8007308 <__sinit_lock_acquire+0x8>)
 8007302:	f000 b8cc 	b.w	800749e <__retarget_lock_acquire_recursive>
 8007306:	bf00      	nop
 8007308:	2000037e 	.word	0x2000037e

0800730c <__sinit_lock_release>:
 800730c:	4801      	ldr	r0, [pc, #4]	; (8007314 <__sinit_lock_release+0x8>)
 800730e:	f000 b8c7 	b.w	80074a0 <__retarget_lock_release_recursive>
 8007312:	bf00      	nop
 8007314:	2000037e 	.word	0x2000037e

08007318 <__sinit>:
 8007318:	b510      	push	{r4, lr}
 800731a:	4604      	mov	r4, r0
 800731c:	f7ff fff0 	bl	8007300 <__sinit_lock_acquire>
 8007320:	69a3      	ldr	r3, [r4, #24]
 8007322:	b11b      	cbz	r3, 800732c <__sinit+0x14>
 8007324:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007328:	f7ff bff0 	b.w	800730c <__sinit_lock_release>
 800732c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007330:	6523      	str	r3, [r4, #80]	; 0x50
 8007332:	4b13      	ldr	r3, [pc, #76]	; (8007380 <__sinit+0x68>)
 8007334:	4a13      	ldr	r2, [pc, #76]	; (8007384 <__sinit+0x6c>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	62a2      	str	r2, [r4, #40]	; 0x28
 800733a:	42a3      	cmp	r3, r4
 800733c:	bf04      	itt	eq
 800733e:	2301      	moveq	r3, #1
 8007340:	61a3      	streq	r3, [r4, #24]
 8007342:	4620      	mov	r0, r4
 8007344:	f000 f820 	bl	8007388 <__sfp>
 8007348:	6060      	str	r0, [r4, #4]
 800734a:	4620      	mov	r0, r4
 800734c:	f000 f81c 	bl	8007388 <__sfp>
 8007350:	60a0      	str	r0, [r4, #8]
 8007352:	4620      	mov	r0, r4
 8007354:	f000 f818 	bl	8007388 <__sfp>
 8007358:	2200      	movs	r2, #0
 800735a:	60e0      	str	r0, [r4, #12]
 800735c:	2104      	movs	r1, #4
 800735e:	6860      	ldr	r0, [r4, #4]
 8007360:	f7ff ff82 	bl	8007268 <std>
 8007364:	68a0      	ldr	r0, [r4, #8]
 8007366:	2201      	movs	r2, #1
 8007368:	2109      	movs	r1, #9
 800736a:	f7ff ff7d 	bl	8007268 <std>
 800736e:	68e0      	ldr	r0, [r4, #12]
 8007370:	2202      	movs	r2, #2
 8007372:	2112      	movs	r1, #18
 8007374:	f7ff ff78 	bl	8007268 <std>
 8007378:	2301      	movs	r3, #1
 800737a:	61a3      	str	r3, [r4, #24]
 800737c:	e7d2      	b.n	8007324 <__sinit+0xc>
 800737e:	bf00      	nop
 8007380:	0800fdf4 	.word	0x0800fdf4
 8007384:	080072b1 	.word	0x080072b1

08007388 <__sfp>:
 8007388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800738a:	4607      	mov	r7, r0
 800738c:	f7ff ffac 	bl	80072e8 <__sfp_lock_acquire>
 8007390:	4b1e      	ldr	r3, [pc, #120]	; (800740c <__sfp+0x84>)
 8007392:	681e      	ldr	r6, [r3, #0]
 8007394:	69b3      	ldr	r3, [r6, #24]
 8007396:	b913      	cbnz	r3, 800739e <__sfp+0x16>
 8007398:	4630      	mov	r0, r6
 800739a:	f7ff ffbd 	bl	8007318 <__sinit>
 800739e:	3648      	adds	r6, #72	; 0x48
 80073a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80073a4:	3b01      	subs	r3, #1
 80073a6:	d503      	bpl.n	80073b0 <__sfp+0x28>
 80073a8:	6833      	ldr	r3, [r6, #0]
 80073aa:	b30b      	cbz	r3, 80073f0 <__sfp+0x68>
 80073ac:	6836      	ldr	r6, [r6, #0]
 80073ae:	e7f7      	b.n	80073a0 <__sfp+0x18>
 80073b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80073b4:	b9d5      	cbnz	r5, 80073ec <__sfp+0x64>
 80073b6:	4b16      	ldr	r3, [pc, #88]	; (8007410 <__sfp+0x88>)
 80073b8:	60e3      	str	r3, [r4, #12]
 80073ba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80073be:	6665      	str	r5, [r4, #100]	; 0x64
 80073c0:	f000 f86c 	bl	800749c <__retarget_lock_init_recursive>
 80073c4:	f7ff ff96 	bl	80072f4 <__sfp_lock_release>
 80073c8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80073cc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80073d0:	6025      	str	r5, [r4, #0]
 80073d2:	61a5      	str	r5, [r4, #24]
 80073d4:	2208      	movs	r2, #8
 80073d6:	4629      	mov	r1, r5
 80073d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80073dc:	f000 f8e4 	bl	80075a8 <memset>
 80073e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80073e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80073e8:	4620      	mov	r0, r4
 80073ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073ec:	3468      	adds	r4, #104	; 0x68
 80073ee:	e7d9      	b.n	80073a4 <__sfp+0x1c>
 80073f0:	2104      	movs	r1, #4
 80073f2:	4638      	mov	r0, r7
 80073f4:	f7ff ff62 	bl	80072bc <__sfmoreglue>
 80073f8:	4604      	mov	r4, r0
 80073fa:	6030      	str	r0, [r6, #0]
 80073fc:	2800      	cmp	r0, #0
 80073fe:	d1d5      	bne.n	80073ac <__sfp+0x24>
 8007400:	f7ff ff78 	bl	80072f4 <__sfp_lock_release>
 8007404:	230c      	movs	r3, #12
 8007406:	603b      	str	r3, [r7, #0]
 8007408:	e7ee      	b.n	80073e8 <__sfp+0x60>
 800740a:	bf00      	nop
 800740c:	0800fdf4 	.word	0x0800fdf4
 8007410:	ffff0001 	.word	0xffff0001

08007414 <_fwalk_reent>:
 8007414:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007418:	4606      	mov	r6, r0
 800741a:	4688      	mov	r8, r1
 800741c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007420:	2700      	movs	r7, #0
 8007422:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007426:	f1b9 0901 	subs.w	r9, r9, #1
 800742a:	d505      	bpl.n	8007438 <_fwalk_reent+0x24>
 800742c:	6824      	ldr	r4, [r4, #0]
 800742e:	2c00      	cmp	r4, #0
 8007430:	d1f7      	bne.n	8007422 <_fwalk_reent+0xe>
 8007432:	4638      	mov	r0, r7
 8007434:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007438:	89ab      	ldrh	r3, [r5, #12]
 800743a:	2b01      	cmp	r3, #1
 800743c:	d907      	bls.n	800744e <_fwalk_reent+0x3a>
 800743e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007442:	3301      	adds	r3, #1
 8007444:	d003      	beq.n	800744e <_fwalk_reent+0x3a>
 8007446:	4629      	mov	r1, r5
 8007448:	4630      	mov	r0, r6
 800744a:	47c0      	blx	r8
 800744c:	4307      	orrs	r7, r0
 800744e:	3568      	adds	r5, #104	; 0x68
 8007450:	e7e9      	b.n	8007426 <_fwalk_reent+0x12>
	...

08007454 <__libc_init_array>:
 8007454:	b570      	push	{r4, r5, r6, lr}
 8007456:	4d0d      	ldr	r5, [pc, #52]	; (800748c <__libc_init_array+0x38>)
 8007458:	4c0d      	ldr	r4, [pc, #52]	; (8007490 <__libc_init_array+0x3c>)
 800745a:	1b64      	subs	r4, r4, r5
 800745c:	10a4      	asrs	r4, r4, #2
 800745e:	2600      	movs	r6, #0
 8007460:	42a6      	cmp	r6, r4
 8007462:	d109      	bne.n	8007478 <__libc_init_array+0x24>
 8007464:	4d0b      	ldr	r5, [pc, #44]	; (8007494 <__libc_init_array+0x40>)
 8007466:	4c0c      	ldr	r4, [pc, #48]	; (8007498 <__libc_init_array+0x44>)
 8007468:	f004 fc28 	bl	800bcbc <_init>
 800746c:	1b64      	subs	r4, r4, r5
 800746e:	10a4      	asrs	r4, r4, #2
 8007470:	2600      	movs	r6, #0
 8007472:	42a6      	cmp	r6, r4
 8007474:	d105      	bne.n	8007482 <__libc_init_array+0x2e>
 8007476:	bd70      	pop	{r4, r5, r6, pc}
 8007478:	f855 3b04 	ldr.w	r3, [r5], #4
 800747c:	4798      	blx	r3
 800747e:	3601      	adds	r6, #1
 8007480:	e7ee      	b.n	8007460 <__libc_init_array+0xc>
 8007482:	f855 3b04 	ldr.w	r3, [r5], #4
 8007486:	4798      	blx	r3
 8007488:	3601      	adds	r6, #1
 800748a:	e7f2      	b.n	8007472 <__libc_init_array+0x1e>
 800748c:	08010388 	.word	0x08010388
 8007490:	08010388 	.word	0x08010388
 8007494:	08010388 	.word	0x08010388
 8007498:	0801038c 	.word	0x0801038c

0800749c <__retarget_lock_init_recursive>:
 800749c:	4770      	bx	lr

0800749e <__retarget_lock_acquire_recursive>:
 800749e:	4770      	bx	lr

080074a0 <__retarget_lock_release_recursive>:
 80074a0:	4770      	bx	lr

080074a2 <__swhatbuf_r>:
 80074a2:	b570      	push	{r4, r5, r6, lr}
 80074a4:	460e      	mov	r6, r1
 80074a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074aa:	2900      	cmp	r1, #0
 80074ac:	b096      	sub	sp, #88	; 0x58
 80074ae:	4614      	mov	r4, r2
 80074b0:	461d      	mov	r5, r3
 80074b2:	da08      	bge.n	80074c6 <__swhatbuf_r+0x24>
 80074b4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80074b8:	2200      	movs	r2, #0
 80074ba:	602a      	str	r2, [r5, #0]
 80074bc:	061a      	lsls	r2, r3, #24
 80074be:	d410      	bmi.n	80074e2 <__swhatbuf_r+0x40>
 80074c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80074c4:	e00e      	b.n	80074e4 <__swhatbuf_r+0x42>
 80074c6:	466a      	mov	r2, sp
 80074c8:	f001 fe34 	bl	8009134 <_fstat_r>
 80074cc:	2800      	cmp	r0, #0
 80074ce:	dbf1      	blt.n	80074b4 <__swhatbuf_r+0x12>
 80074d0:	9a01      	ldr	r2, [sp, #4]
 80074d2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80074d6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80074da:	425a      	negs	r2, r3
 80074dc:	415a      	adcs	r2, r3
 80074de:	602a      	str	r2, [r5, #0]
 80074e0:	e7ee      	b.n	80074c0 <__swhatbuf_r+0x1e>
 80074e2:	2340      	movs	r3, #64	; 0x40
 80074e4:	2000      	movs	r0, #0
 80074e6:	6023      	str	r3, [r4, #0]
 80074e8:	b016      	add	sp, #88	; 0x58
 80074ea:	bd70      	pop	{r4, r5, r6, pc}

080074ec <__smakebuf_r>:
 80074ec:	898b      	ldrh	r3, [r1, #12]
 80074ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80074f0:	079d      	lsls	r5, r3, #30
 80074f2:	4606      	mov	r6, r0
 80074f4:	460c      	mov	r4, r1
 80074f6:	d507      	bpl.n	8007508 <__smakebuf_r+0x1c>
 80074f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80074fc:	6023      	str	r3, [r4, #0]
 80074fe:	6123      	str	r3, [r4, #16]
 8007500:	2301      	movs	r3, #1
 8007502:	6163      	str	r3, [r4, #20]
 8007504:	b002      	add	sp, #8
 8007506:	bd70      	pop	{r4, r5, r6, pc}
 8007508:	ab01      	add	r3, sp, #4
 800750a:	466a      	mov	r2, sp
 800750c:	f7ff ffc9 	bl	80074a2 <__swhatbuf_r>
 8007510:	9900      	ldr	r1, [sp, #0]
 8007512:	4605      	mov	r5, r0
 8007514:	4630      	mov	r0, r6
 8007516:	f000 f8bb 	bl	8007690 <_malloc_r>
 800751a:	b948      	cbnz	r0, 8007530 <__smakebuf_r+0x44>
 800751c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007520:	059a      	lsls	r2, r3, #22
 8007522:	d4ef      	bmi.n	8007504 <__smakebuf_r+0x18>
 8007524:	f023 0303 	bic.w	r3, r3, #3
 8007528:	f043 0302 	orr.w	r3, r3, #2
 800752c:	81a3      	strh	r3, [r4, #12]
 800752e:	e7e3      	b.n	80074f8 <__smakebuf_r+0xc>
 8007530:	4b0d      	ldr	r3, [pc, #52]	; (8007568 <__smakebuf_r+0x7c>)
 8007532:	62b3      	str	r3, [r6, #40]	; 0x28
 8007534:	89a3      	ldrh	r3, [r4, #12]
 8007536:	6020      	str	r0, [r4, #0]
 8007538:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800753c:	81a3      	strh	r3, [r4, #12]
 800753e:	9b00      	ldr	r3, [sp, #0]
 8007540:	6163      	str	r3, [r4, #20]
 8007542:	9b01      	ldr	r3, [sp, #4]
 8007544:	6120      	str	r0, [r4, #16]
 8007546:	b15b      	cbz	r3, 8007560 <__smakebuf_r+0x74>
 8007548:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800754c:	4630      	mov	r0, r6
 800754e:	f001 fe03 	bl	8009158 <_isatty_r>
 8007552:	b128      	cbz	r0, 8007560 <__smakebuf_r+0x74>
 8007554:	89a3      	ldrh	r3, [r4, #12]
 8007556:	f023 0303 	bic.w	r3, r3, #3
 800755a:	f043 0301 	orr.w	r3, r3, #1
 800755e:	81a3      	strh	r3, [r4, #12]
 8007560:	89a0      	ldrh	r0, [r4, #12]
 8007562:	4305      	orrs	r5, r0
 8007564:	81a5      	strh	r5, [r4, #12]
 8007566:	e7cd      	b.n	8007504 <__smakebuf_r+0x18>
 8007568:	080072b1 	.word	0x080072b1

0800756c <malloc>:
 800756c:	4b02      	ldr	r3, [pc, #8]	; (8007578 <malloc+0xc>)
 800756e:	4601      	mov	r1, r0
 8007570:	6818      	ldr	r0, [r3, #0]
 8007572:	f000 b88d 	b.w	8007690 <_malloc_r>
 8007576:	bf00      	nop
 8007578:	20000014 	.word	0x20000014

0800757c <free>:
 800757c:	4b02      	ldr	r3, [pc, #8]	; (8007588 <free+0xc>)
 800757e:	4601      	mov	r1, r0
 8007580:	6818      	ldr	r0, [r3, #0]
 8007582:	f000 b819 	b.w	80075b8 <_free_r>
 8007586:	bf00      	nop
 8007588:	20000014 	.word	0x20000014

0800758c <memcpy>:
 800758c:	440a      	add	r2, r1
 800758e:	4291      	cmp	r1, r2
 8007590:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007594:	d100      	bne.n	8007598 <memcpy+0xc>
 8007596:	4770      	bx	lr
 8007598:	b510      	push	{r4, lr}
 800759a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800759e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80075a2:	4291      	cmp	r1, r2
 80075a4:	d1f9      	bne.n	800759a <memcpy+0xe>
 80075a6:	bd10      	pop	{r4, pc}

080075a8 <memset>:
 80075a8:	4402      	add	r2, r0
 80075aa:	4603      	mov	r3, r0
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d100      	bne.n	80075b2 <memset+0xa>
 80075b0:	4770      	bx	lr
 80075b2:	f803 1b01 	strb.w	r1, [r3], #1
 80075b6:	e7f9      	b.n	80075ac <memset+0x4>

080075b8 <_free_r>:
 80075b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80075ba:	2900      	cmp	r1, #0
 80075bc:	d044      	beq.n	8007648 <_free_r+0x90>
 80075be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075c2:	9001      	str	r0, [sp, #4]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	f1a1 0404 	sub.w	r4, r1, #4
 80075ca:	bfb8      	it	lt
 80075cc:	18e4      	addlt	r4, r4, r3
 80075ce:	f001 fde9 	bl	80091a4 <__malloc_lock>
 80075d2:	4a1e      	ldr	r2, [pc, #120]	; (800764c <_free_r+0x94>)
 80075d4:	9801      	ldr	r0, [sp, #4]
 80075d6:	6813      	ldr	r3, [r2, #0]
 80075d8:	b933      	cbnz	r3, 80075e8 <_free_r+0x30>
 80075da:	6063      	str	r3, [r4, #4]
 80075dc:	6014      	str	r4, [r2, #0]
 80075de:	b003      	add	sp, #12
 80075e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80075e4:	f001 bde4 	b.w	80091b0 <__malloc_unlock>
 80075e8:	42a3      	cmp	r3, r4
 80075ea:	d908      	bls.n	80075fe <_free_r+0x46>
 80075ec:	6825      	ldr	r5, [r4, #0]
 80075ee:	1961      	adds	r1, r4, r5
 80075f0:	428b      	cmp	r3, r1
 80075f2:	bf01      	itttt	eq
 80075f4:	6819      	ldreq	r1, [r3, #0]
 80075f6:	685b      	ldreq	r3, [r3, #4]
 80075f8:	1949      	addeq	r1, r1, r5
 80075fa:	6021      	streq	r1, [r4, #0]
 80075fc:	e7ed      	b.n	80075da <_free_r+0x22>
 80075fe:	461a      	mov	r2, r3
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	b10b      	cbz	r3, 8007608 <_free_r+0x50>
 8007604:	42a3      	cmp	r3, r4
 8007606:	d9fa      	bls.n	80075fe <_free_r+0x46>
 8007608:	6811      	ldr	r1, [r2, #0]
 800760a:	1855      	adds	r5, r2, r1
 800760c:	42a5      	cmp	r5, r4
 800760e:	d10b      	bne.n	8007628 <_free_r+0x70>
 8007610:	6824      	ldr	r4, [r4, #0]
 8007612:	4421      	add	r1, r4
 8007614:	1854      	adds	r4, r2, r1
 8007616:	42a3      	cmp	r3, r4
 8007618:	6011      	str	r1, [r2, #0]
 800761a:	d1e0      	bne.n	80075de <_free_r+0x26>
 800761c:	681c      	ldr	r4, [r3, #0]
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	6053      	str	r3, [r2, #4]
 8007622:	4421      	add	r1, r4
 8007624:	6011      	str	r1, [r2, #0]
 8007626:	e7da      	b.n	80075de <_free_r+0x26>
 8007628:	d902      	bls.n	8007630 <_free_r+0x78>
 800762a:	230c      	movs	r3, #12
 800762c:	6003      	str	r3, [r0, #0]
 800762e:	e7d6      	b.n	80075de <_free_r+0x26>
 8007630:	6825      	ldr	r5, [r4, #0]
 8007632:	1961      	adds	r1, r4, r5
 8007634:	428b      	cmp	r3, r1
 8007636:	bf04      	itt	eq
 8007638:	6819      	ldreq	r1, [r3, #0]
 800763a:	685b      	ldreq	r3, [r3, #4]
 800763c:	6063      	str	r3, [r4, #4]
 800763e:	bf04      	itt	eq
 8007640:	1949      	addeq	r1, r1, r5
 8007642:	6021      	streq	r1, [r4, #0]
 8007644:	6054      	str	r4, [r2, #4]
 8007646:	e7ca      	b.n	80075de <_free_r+0x26>
 8007648:	b003      	add	sp, #12
 800764a:	bd30      	pop	{r4, r5, pc}
 800764c:	20000380 	.word	0x20000380

08007650 <sbrk_aligned>:
 8007650:	b570      	push	{r4, r5, r6, lr}
 8007652:	4e0e      	ldr	r6, [pc, #56]	; (800768c <sbrk_aligned+0x3c>)
 8007654:	460c      	mov	r4, r1
 8007656:	6831      	ldr	r1, [r6, #0]
 8007658:	4605      	mov	r5, r0
 800765a:	b911      	cbnz	r1, 8007662 <sbrk_aligned+0x12>
 800765c:	f000 fd84 	bl	8008168 <_sbrk_r>
 8007660:	6030      	str	r0, [r6, #0]
 8007662:	4621      	mov	r1, r4
 8007664:	4628      	mov	r0, r5
 8007666:	f000 fd7f 	bl	8008168 <_sbrk_r>
 800766a:	1c43      	adds	r3, r0, #1
 800766c:	d00a      	beq.n	8007684 <sbrk_aligned+0x34>
 800766e:	1cc4      	adds	r4, r0, #3
 8007670:	f024 0403 	bic.w	r4, r4, #3
 8007674:	42a0      	cmp	r0, r4
 8007676:	d007      	beq.n	8007688 <sbrk_aligned+0x38>
 8007678:	1a21      	subs	r1, r4, r0
 800767a:	4628      	mov	r0, r5
 800767c:	f000 fd74 	bl	8008168 <_sbrk_r>
 8007680:	3001      	adds	r0, #1
 8007682:	d101      	bne.n	8007688 <sbrk_aligned+0x38>
 8007684:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007688:	4620      	mov	r0, r4
 800768a:	bd70      	pop	{r4, r5, r6, pc}
 800768c:	20000384 	.word	0x20000384

08007690 <_malloc_r>:
 8007690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007694:	1ccd      	adds	r5, r1, #3
 8007696:	f025 0503 	bic.w	r5, r5, #3
 800769a:	3508      	adds	r5, #8
 800769c:	2d0c      	cmp	r5, #12
 800769e:	bf38      	it	cc
 80076a0:	250c      	movcc	r5, #12
 80076a2:	2d00      	cmp	r5, #0
 80076a4:	4607      	mov	r7, r0
 80076a6:	db01      	blt.n	80076ac <_malloc_r+0x1c>
 80076a8:	42a9      	cmp	r1, r5
 80076aa:	d905      	bls.n	80076b8 <_malloc_r+0x28>
 80076ac:	230c      	movs	r3, #12
 80076ae:	603b      	str	r3, [r7, #0]
 80076b0:	2600      	movs	r6, #0
 80076b2:	4630      	mov	r0, r6
 80076b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076b8:	4e2e      	ldr	r6, [pc, #184]	; (8007774 <_malloc_r+0xe4>)
 80076ba:	f001 fd73 	bl	80091a4 <__malloc_lock>
 80076be:	6833      	ldr	r3, [r6, #0]
 80076c0:	461c      	mov	r4, r3
 80076c2:	bb34      	cbnz	r4, 8007712 <_malloc_r+0x82>
 80076c4:	4629      	mov	r1, r5
 80076c6:	4638      	mov	r0, r7
 80076c8:	f7ff ffc2 	bl	8007650 <sbrk_aligned>
 80076cc:	1c43      	adds	r3, r0, #1
 80076ce:	4604      	mov	r4, r0
 80076d0:	d14d      	bne.n	800776e <_malloc_r+0xde>
 80076d2:	6834      	ldr	r4, [r6, #0]
 80076d4:	4626      	mov	r6, r4
 80076d6:	2e00      	cmp	r6, #0
 80076d8:	d140      	bne.n	800775c <_malloc_r+0xcc>
 80076da:	6823      	ldr	r3, [r4, #0]
 80076dc:	4631      	mov	r1, r6
 80076de:	4638      	mov	r0, r7
 80076e0:	eb04 0803 	add.w	r8, r4, r3
 80076e4:	f000 fd40 	bl	8008168 <_sbrk_r>
 80076e8:	4580      	cmp	r8, r0
 80076ea:	d13a      	bne.n	8007762 <_malloc_r+0xd2>
 80076ec:	6821      	ldr	r1, [r4, #0]
 80076ee:	3503      	adds	r5, #3
 80076f0:	1a6d      	subs	r5, r5, r1
 80076f2:	f025 0503 	bic.w	r5, r5, #3
 80076f6:	3508      	adds	r5, #8
 80076f8:	2d0c      	cmp	r5, #12
 80076fa:	bf38      	it	cc
 80076fc:	250c      	movcc	r5, #12
 80076fe:	4629      	mov	r1, r5
 8007700:	4638      	mov	r0, r7
 8007702:	f7ff ffa5 	bl	8007650 <sbrk_aligned>
 8007706:	3001      	adds	r0, #1
 8007708:	d02b      	beq.n	8007762 <_malloc_r+0xd2>
 800770a:	6823      	ldr	r3, [r4, #0]
 800770c:	442b      	add	r3, r5
 800770e:	6023      	str	r3, [r4, #0]
 8007710:	e00e      	b.n	8007730 <_malloc_r+0xa0>
 8007712:	6822      	ldr	r2, [r4, #0]
 8007714:	1b52      	subs	r2, r2, r5
 8007716:	d41e      	bmi.n	8007756 <_malloc_r+0xc6>
 8007718:	2a0b      	cmp	r2, #11
 800771a:	d916      	bls.n	800774a <_malloc_r+0xba>
 800771c:	1961      	adds	r1, r4, r5
 800771e:	42a3      	cmp	r3, r4
 8007720:	6025      	str	r5, [r4, #0]
 8007722:	bf18      	it	ne
 8007724:	6059      	strne	r1, [r3, #4]
 8007726:	6863      	ldr	r3, [r4, #4]
 8007728:	bf08      	it	eq
 800772a:	6031      	streq	r1, [r6, #0]
 800772c:	5162      	str	r2, [r4, r5]
 800772e:	604b      	str	r3, [r1, #4]
 8007730:	4638      	mov	r0, r7
 8007732:	f104 060b 	add.w	r6, r4, #11
 8007736:	f001 fd3b 	bl	80091b0 <__malloc_unlock>
 800773a:	f026 0607 	bic.w	r6, r6, #7
 800773e:	1d23      	adds	r3, r4, #4
 8007740:	1af2      	subs	r2, r6, r3
 8007742:	d0b6      	beq.n	80076b2 <_malloc_r+0x22>
 8007744:	1b9b      	subs	r3, r3, r6
 8007746:	50a3      	str	r3, [r4, r2]
 8007748:	e7b3      	b.n	80076b2 <_malloc_r+0x22>
 800774a:	6862      	ldr	r2, [r4, #4]
 800774c:	42a3      	cmp	r3, r4
 800774e:	bf0c      	ite	eq
 8007750:	6032      	streq	r2, [r6, #0]
 8007752:	605a      	strne	r2, [r3, #4]
 8007754:	e7ec      	b.n	8007730 <_malloc_r+0xa0>
 8007756:	4623      	mov	r3, r4
 8007758:	6864      	ldr	r4, [r4, #4]
 800775a:	e7b2      	b.n	80076c2 <_malloc_r+0x32>
 800775c:	4634      	mov	r4, r6
 800775e:	6876      	ldr	r6, [r6, #4]
 8007760:	e7b9      	b.n	80076d6 <_malloc_r+0x46>
 8007762:	230c      	movs	r3, #12
 8007764:	603b      	str	r3, [r7, #0]
 8007766:	4638      	mov	r0, r7
 8007768:	f001 fd22 	bl	80091b0 <__malloc_unlock>
 800776c:	e7a1      	b.n	80076b2 <_malloc_r+0x22>
 800776e:	6025      	str	r5, [r4, #0]
 8007770:	e7de      	b.n	8007730 <_malloc_r+0xa0>
 8007772:	bf00      	nop
 8007774:	20000380 	.word	0x20000380

08007778 <__cvt>:
 8007778:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800777c:	ec55 4b10 	vmov	r4, r5, d0
 8007780:	2d00      	cmp	r5, #0
 8007782:	460e      	mov	r6, r1
 8007784:	4619      	mov	r1, r3
 8007786:	462b      	mov	r3, r5
 8007788:	bfbb      	ittet	lt
 800778a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800778e:	461d      	movlt	r5, r3
 8007790:	2300      	movge	r3, #0
 8007792:	232d      	movlt	r3, #45	; 0x2d
 8007794:	700b      	strb	r3, [r1, #0]
 8007796:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007798:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800779c:	4691      	mov	r9, r2
 800779e:	f023 0820 	bic.w	r8, r3, #32
 80077a2:	bfbc      	itt	lt
 80077a4:	4622      	movlt	r2, r4
 80077a6:	4614      	movlt	r4, r2
 80077a8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80077ac:	d005      	beq.n	80077ba <__cvt+0x42>
 80077ae:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80077b2:	d100      	bne.n	80077b6 <__cvt+0x3e>
 80077b4:	3601      	adds	r6, #1
 80077b6:	2102      	movs	r1, #2
 80077b8:	e000      	b.n	80077bc <__cvt+0x44>
 80077ba:	2103      	movs	r1, #3
 80077bc:	ab03      	add	r3, sp, #12
 80077be:	9301      	str	r3, [sp, #4]
 80077c0:	ab02      	add	r3, sp, #8
 80077c2:	9300      	str	r3, [sp, #0]
 80077c4:	ec45 4b10 	vmov	d0, r4, r5
 80077c8:	4653      	mov	r3, sl
 80077ca:	4632      	mov	r2, r6
 80077cc:	f000 fec4 	bl	8008558 <_dtoa_r>
 80077d0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80077d4:	4607      	mov	r7, r0
 80077d6:	d102      	bne.n	80077de <__cvt+0x66>
 80077d8:	f019 0f01 	tst.w	r9, #1
 80077dc:	d022      	beq.n	8007824 <__cvt+0xac>
 80077de:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80077e2:	eb07 0906 	add.w	r9, r7, r6
 80077e6:	d110      	bne.n	800780a <__cvt+0x92>
 80077e8:	783b      	ldrb	r3, [r7, #0]
 80077ea:	2b30      	cmp	r3, #48	; 0x30
 80077ec:	d10a      	bne.n	8007804 <__cvt+0x8c>
 80077ee:	2200      	movs	r2, #0
 80077f0:	2300      	movs	r3, #0
 80077f2:	4620      	mov	r0, r4
 80077f4:	4629      	mov	r1, r5
 80077f6:	f7f9 f967 	bl	8000ac8 <__aeabi_dcmpeq>
 80077fa:	b918      	cbnz	r0, 8007804 <__cvt+0x8c>
 80077fc:	f1c6 0601 	rsb	r6, r6, #1
 8007800:	f8ca 6000 	str.w	r6, [sl]
 8007804:	f8da 3000 	ldr.w	r3, [sl]
 8007808:	4499      	add	r9, r3
 800780a:	2200      	movs	r2, #0
 800780c:	2300      	movs	r3, #0
 800780e:	4620      	mov	r0, r4
 8007810:	4629      	mov	r1, r5
 8007812:	f7f9 f959 	bl	8000ac8 <__aeabi_dcmpeq>
 8007816:	b108      	cbz	r0, 800781c <__cvt+0xa4>
 8007818:	f8cd 900c 	str.w	r9, [sp, #12]
 800781c:	2230      	movs	r2, #48	; 0x30
 800781e:	9b03      	ldr	r3, [sp, #12]
 8007820:	454b      	cmp	r3, r9
 8007822:	d307      	bcc.n	8007834 <__cvt+0xbc>
 8007824:	9b03      	ldr	r3, [sp, #12]
 8007826:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007828:	1bdb      	subs	r3, r3, r7
 800782a:	4638      	mov	r0, r7
 800782c:	6013      	str	r3, [r2, #0]
 800782e:	b004      	add	sp, #16
 8007830:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007834:	1c59      	adds	r1, r3, #1
 8007836:	9103      	str	r1, [sp, #12]
 8007838:	701a      	strb	r2, [r3, #0]
 800783a:	e7f0      	b.n	800781e <__cvt+0xa6>

0800783c <__exponent>:
 800783c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800783e:	4603      	mov	r3, r0
 8007840:	2900      	cmp	r1, #0
 8007842:	bfb8      	it	lt
 8007844:	4249      	neglt	r1, r1
 8007846:	f803 2b02 	strb.w	r2, [r3], #2
 800784a:	bfb4      	ite	lt
 800784c:	222d      	movlt	r2, #45	; 0x2d
 800784e:	222b      	movge	r2, #43	; 0x2b
 8007850:	2909      	cmp	r1, #9
 8007852:	7042      	strb	r2, [r0, #1]
 8007854:	dd2a      	ble.n	80078ac <__exponent+0x70>
 8007856:	f10d 0407 	add.w	r4, sp, #7
 800785a:	46a4      	mov	ip, r4
 800785c:	270a      	movs	r7, #10
 800785e:	46a6      	mov	lr, r4
 8007860:	460a      	mov	r2, r1
 8007862:	fb91 f6f7 	sdiv	r6, r1, r7
 8007866:	fb07 1516 	mls	r5, r7, r6, r1
 800786a:	3530      	adds	r5, #48	; 0x30
 800786c:	2a63      	cmp	r2, #99	; 0x63
 800786e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8007872:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007876:	4631      	mov	r1, r6
 8007878:	dcf1      	bgt.n	800785e <__exponent+0x22>
 800787a:	3130      	adds	r1, #48	; 0x30
 800787c:	f1ae 0502 	sub.w	r5, lr, #2
 8007880:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007884:	1c44      	adds	r4, r0, #1
 8007886:	4629      	mov	r1, r5
 8007888:	4561      	cmp	r1, ip
 800788a:	d30a      	bcc.n	80078a2 <__exponent+0x66>
 800788c:	f10d 0209 	add.w	r2, sp, #9
 8007890:	eba2 020e 	sub.w	r2, r2, lr
 8007894:	4565      	cmp	r5, ip
 8007896:	bf88      	it	hi
 8007898:	2200      	movhi	r2, #0
 800789a:	4413      	add	r3, r2
 800789c:	1a18      	subs	r0, r3, r0
 800789e:	b003      	add	sp, #12
 80078a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80078a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80078a6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80078aa:	e7ed      	b.n	8007888 <__exponent+0x4c>
 80078ac:	2330      	movs	r3, #48	; 0x30
 80078ae:	3130      	adds	r1, #48	; 0x30
 80078b0:	7083      	strb	r3, [r0, #2]
 80078b2:	70c1      	strb	r1, [r0, #3]
 80078b4:	1d03      	adds	r3, r0, #4
 80078b6:	e7f1      	b.n	800789c <__exponent+0x60>

080078b8 <_printf_float>:
 80078b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078bc:	ed2d 8b02 	vpush	{d8}
 80078c0:	b08d      	sub	sp, #52	; 0x34
 80078c2:	460c      	mov	r4, r1
 80078c4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80078c8:	4616      	mov	r6, r2
 80078ca:	461f      	mov	r7, r3
 80078cc:	4605      	mov	r5, r0
 80078ce:	f001 fc53 	bl	8009178 <_localeconv_r>
 80078d2:	f8d0 a000 	ldr.w	sl, [r0]
 80078d6:	4650      	mov	r0, sl
 80078d8:	f7f8 fc7a 	bl	80001d0 <strlen>
 80078dc:	2300      	movs	r3, #0
 80078de:	930a      	str	r3, [sp, #40]	; 0x28
 80078e0:	6823      	ldr	r3, [r4, #0]
 80078e2:	9305      	str	r3, [sp, #20]
 80078e4:	f8d8 3000 	ldr.w	r3, [r8]
 80078e8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80078ec:	3307      	adds	r3, #7
 80078ee:	f023 0307 	bic.w	r3, r3, #7
 80078f2:	f103 0208 	add.w	r2, r3, #8
 80078f6:	f8c8 2000 	str.w	r2, [r8]
 80078fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078fe:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007902:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007906:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800790a:	9307      	str	r3, [sp, #28]
 800790c:	f8cd 8018 	str.w	r8, [sp, #24]
 8007910:	ee08 0a10 	vmov	s16, r0
 8007914:	4b9f      	ldr	r3, [pc, #636]	; (8007b94 <_printf_float+0x2dc>)
 8007916:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800791a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800791e:	f7f9 f905 	bl	8000b2c <__aeabi_dcmpun>
 8007922:	bb88      	cbnz	r0, 8007988 <_printf_float+0xd0>
 8007924:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007928:	4b9a      	ldr	r3, [pc, #616]	; (8007b94 <_printf_float+0x2dc>)
 800792a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800792e:	f7f9 f8df 	bl	8000af0 <__aeabi_dcmple>
 8007932:	bb48      	cbnz	r0, 8007988 <_printf_float+0xd0>
 8007934:	2200      	movs	r2, #0
 8007936:	2300      	movs	r3, #0
 8007938:	4640      	mov	r0, r8
 800793a:	4649      	mov	r1, r9
 800793c:	f7f9 f8ce 	bl	8000adc <__aeabi_dcmplt>
 8007940:	b110      	cbz	r0, 8007948 <_printf_float+0x90>
 8007942:	232d      	movs	r3, #45	; 0x2d
 8007944:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007948:	4b93      	ldr	r3, [pc, #588]	; (8007b98 <_printf_float+0x2e0>)
 800794a:	4894      	ldr	r0, [pc, #592]	; (8007b9c <_printf_float+0x2e4>)
 800794c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007950:	bf94      	ite	ls
 8007952:	4698      	movls	r8, r3
 8007954:	4680      	movhi	r8, r0
 8007956:	2303      	movs	r3, #3
 8007958:	6123      	str	r3, [r4, #16]
 800795a:	9b05      	ldr	r3, [sp, #20]
 800795c:	f023 0204 	bic.w	r2, r3, #4
 8007960:	6022      	str	r2, [r4, #0]
 8007962:	f04f 0900 	mov.w	r9, #0
 8007966:	9700      	str	r7, [sp, #0]
 8007968:	4633      	mov	r3, r6
 800796a:	aa0b      	add	r2, sp, #44	; 0x2c
 800796c:	4621      	mov	r1, r4
 800796e:	4628      	mov	r0, r5
 8007970:	f000 f9d8 	bl	8007d24 <_printf_common>
 8007974:	3001      	adds	r0, #1
 8007976:	f040 8090 	bne.w	8007a9a <_printf_float+0x1e2>
 800797a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800797e:	b00d      	add	sp, #52	; 0x34
 8007980:	ecbd 8b02 	vpop	{d8}
 8007984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007988:	4642      	mov	r2, r8
 800798a:	464b      	mov	r3, r9
 800798c:	4640      	mov	r0, r8
 800798e:	4649      	mov	r1, r9
 8007990:	f7f9 f8cc 	bl	8000b2c <__aeabi_dcmpun>
 8007994:	b140      	cbz	r0, 80079a8 <_printf_float+0xf0>
 8007996:	464b      	mov	r3, r9
 8007998:	2b00      	cmp	r3, #0
 800799a:	bfbc      	itt	lt
 800799c:	232d      	movlt	r3, #45	; 0x2d
 800799e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80079a2:	487f      	ldr	r0, [pc, #508]	; (8007ba0 <_printf_float+0x2e8>)
 80079a4:	4b7f      	ldr	r3, [pc, #508]	; (8007ba4 <_printf_float+0x2ec>)
 80079a6:	e7d1      	b.n	800794c <_printf_float+0x94>
 80079a8:	6863      	ldr	r3, [r4, #4]
 80079aa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80079ae:	9206      	str	r2, [sp, #24]
 80079b0:	1c5a      	adds	r2, r3, #1
 80079b2:	d13f      	bne.n	8007a34 <_printf_float+0x17c>
 80079b4:	2306      	movs	r3, #6
 80079b6:	6063      	str	r3, [r4, #4]
 80079b8:	9b05      	ldr	r3, [sp, #20]
 80079ba:	6861      	ldr	r1, [r4, #4]
 80079bc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80079c0:	2300      	movs	r3, #0
 80079c2:	9303      	str	r3, [sp, #12]
 80079c4:	ab0a      	add	r3, sp, #40	; 0x28
 80079c6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80079ca:	ab09      	add	r3, sp, #36	; 0x24
 80079cc:	ec49 8b10 	vmov	d0, r8, r9
 80079d0:	9300      	str	r3, [sp, #0]
 80079d2:	6022      	str	r2, [r4, #0]
 80079d4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80079d8:	4628      	mov	r0, r5
 80079da:	f7ff fecd 	bl	8007778 <__cvt>
 80079de:	9b06      	ldr	r3, [sp, #24]
 80079e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80079e2:	2b47      	cmp	r3, #71	; 0x47
 80079e4:	4680      	mov	r8, r0
 80079e6:	d108      	bne.n	80079fa <_printf_float+0x142>
 80079e8:	1cc8      	adds	r0, r1, #3
 80079ea:	db02      	blt.n	80079f2 <_printf_float+0x13a>
 80079ec:	6863      	ldr	r3, [r4, #4]
 80079ee:	4299      	cmp	r1, r3
 80079f0:	dd41      	ble.n	8007a76 <_printf_float+0x1be>
 80079f2:	f1ab 0b02 	sub.w	fp, fp, #2
 80079f6:	fa5f fb8b 	uxtb.w	fp, fp
 80079fa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80079fe:	d820      	bhi.n	8007a42 <_printf_float+0x18a>
 8007a00:	3901      	subs	r1, #1
 8007a02:	465a      	mov	r2, fp
 8007a04:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007a08:	9109      	str	r1, [sp, #36]	; 0x24
 8007a0a:	f7ff ff17 	bl	800783c <__exponent>
 8007a0e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a10:	1813      	adds	r3, r2, r0
 8007a12:	2a01      	cmp	r2, #1
 8007a14:	4681      	mov	r9, r0
 8007a16:	6123      	str	r3, [r4, #16]
 8007a18:	dc02      	bgt.n	8007a20 <_printf_float+0x168>
 8007a1a:	6822      	ldr	r2, [r4, #0]
 8007a1c:	07d2      	lsls	r2, r2, #31
 8007a1e:	d501      	bpl.n	8007a24 <_printf_float+0x16c>
 8007a20:	3301      	adds	r3, #1
 8007a22:	6123      	str	r3, [r4, #16]
 8007a24:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d09c      	beq.n	8007966 <_printf_float+0xae>
 8007a2c:	232d      	movs	r3, #45	; 0x2d
 8007a2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a32:	e798      	b.n	8007966 <_printf_float+0xae>
 8007a34:	9a06      	ldr	r2, [sp, #24]
 8007a36:	2a47      	cmp	r2, #71	; 0x47
 8007a38:	d1be      	bne.n	80079b8 <_printf_float+0x100>
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d1bc      	bne.n	80079b8 <_printf_float+0x100>
 8007a3e:	2301      	movs	r3, #1
 8007a40:	e7b9      	b.n	80079b6 <_printf_float+0xfe>
 8007a42:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007a46:	d118      	bne.n	8007a7a <_printf_float+0x1c2>
 8007a48:	2900      	cmp	r1, #0
 8007a4a:	6863      	ldr	r3, [r4, #4]
 8007a4c:	dd0b      	ble.n	8007a66 <_printf_float+0x1ae>
 8007a4e:	6121      	str	r1, [r4, #16]
 8007a50:	b913      	cbnz	r3, 8007a58 <_printf_float+0x1a0>
 8007a52:	6822      	ldr	r2, [r4, #0]
 8007a54:	07d0      	lsls	r0, r2, #31
 8007a56:	d502      	bpl.n	8007a5e <_printf_float+0x1a6>
 8007a58:	3301      	adds	r3, #1
 8007a5a:	440b      	add	r3, r1
 8007a5c:	6123      	str	r3, [r4, #16]
 8007a5e:	65a1      	str	r1, [r4, #88]	; 0x58
 8007a60:	f04f 0900 	mov.w	r9, #0
 8007a64:	e7de      	b.n	8007a24 <_printf_float+0x16c>
 8007a66:	b913      	cbnz	r3, 8007a6e <_printf_float+0x1b6>
 8007a68:	6822      	ldr	r2, [r4, #0]
 8007a6a:	07d2      	lsls	r2, r2, #31
 8007a6c:	d501      	bpl.n	8007a72 <_printf_float+0x1ba>
 8007a6e:	3302      	adds	r3, #2
 8007a70:	e7f4      	b.n	8007a5c <_printf_float+0x1a4>
 8007a72:	2301      	movs	r3, #1
 8007a74:	e7f2      	b.n	8007a5c <_printf_float+0x1a4>
 8007a76:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007a7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a7c:	4299      	cmp	r1, r3
 8007a7e:	db05      	blt.n	8007a8c <_printf_float+0x1d4>
 8007a80:	6823      	ldr	r3, [r4, #0]
 8007a82:	6121      	str	r1, [r4, #16]
 8007a84:	07d8      	lsls	r0, r3, #31
 8007a86:	d5ea      	bpl.n	8007a5e <_printf_float+0x1a6>
 8007a88:	1c4b      	adds	r3, r1, #1
 8007a8a:	e7e7      	b.n	8007a5c <_printf_float+0x1a4>
 8007a8c:	2900      	cmp	r1, #0
 8007a8e:	bfd4      	ite	le
 8007a90:	f1c1 0202 	rsble	r2, r1, #2
 8007a94:	2201      	movgt	r2, #1
 8007a96:	4413      	add	r3, r2
 8007a98:	e7e0      	b.n	8007a5c <_printf_float+0x1a4>
 8007a9a:	6823      	ldr	r3, [r4, #0]
 8007a9c:	055a      	lsls	r2, r3, #21
 8007a9e:	d407      	bmi.n	8007ab0 <_printf_float+0x1f8>
 8007aa0:	6923      	ldr	r3, [r4, #16]
 8007aa2:	4642      	mov	r2, r8
 8007aa4:	4631      	mov	r1, r6
 8007aa6:	4628      	mov	r0, r5
 8007aa8:	47b8      	blx	r7
 8007aaa:	3001      	adds	r0, #1
 8007aac:	d12c      	bne.n	8007b08 <_printf_float+0x250>
 8007aae:	e764      	b.n	800797a <_printf_float+0xc2>
 8007ab0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007ab4:	f240 80e0 	bls.w	8007c78 <_printf_float+0x3c0>
 8007ab8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007abc:	2200      	movs	r2, #0
 8007abe:	2300      	movs	r3, #0
 8007ac0:	f7f9 f802 	bl	8000ac8 <__aeabi_dcmpeq>
 8007ac4:	2800      	cmp	r0, #0
 8007ac6:	d034      	beq.n	8007b32 <_printf_float+0x27a>
 8007ac8:	4a37      	ldr	r2, [pc, #220]	; (8007ba8 <_printf_float+0x2f0>)
 8007aca:	2301      	movs	r3, #1
 8007acc:	4631      	mov	r1, r6
 8007ace:	4628      	mov	r0, r5
 8007ad0:	47b8      	blx	r7
 8007ad2:	3001      	adds	r0, #1
 8007ad4:	f43f af51 	beq.w	800797a <_printf_float+0xc2>
 8007ad8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007adc:	429a      	cmp	r2, r3
 8007ade:	db02      	blt.n	8007ae6 <_printf_float+0x22e>
 8007ae0:	6823      	ldr	r3, [r4, #0]
 8007ae2:	07d8      	lsls	r0, r3, #31
 8007ae4:	d510      	bpl.n	8007b08 <_printf_float+0x250>
 8007ae6:	ee18 3a10 	vmov	r3, s16
 8007aea:	4652      	mov	r2, sl
 8007aec:	4631      	mov	r1, r6
 8007aee:	4628      	mov	r0, r5
 8007af0:	47b8      	blx	r7
 8007af2:	3001      	adds	r0, #1
 8007af4:	f43f af41 	beq.w	800797a <_printf_float+0xc2>
 8007af8:	f04f 0800 	mov.w	r8, #0
 8007afc:	f104 091a 	add.w	r9, r4, #26
 8007b00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b02:	3b01      	subs	r3, #1
 8007b04:	4543      	cmp	r3, r8
 8007b06:	dc09      	bgt.n	8007b1c <_printf_float+0x264>
 8007b08:	6823      	ldr	r3, [r4, #0]
 8007b0a:	079b      	lsls	r3, r3, #30
 8007b0c:	f100 8105 	bmi.w	8007d1a <_printf_float+0x462>
 8007b10:	68e0      	ldr	r0, [r4, #12]
 8007b12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b14:	4298      	cmp	r0, r3
 8007b16:	bfb8      	it	lt
 8007b18:	4618      	movlt	r0, r3
 8007b1a:	e730      	b.n	800797e <_printf_float+0xc6>
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	464a      	mov	r2, r9
 8007b20:	4631      	mov	r1, r6
 8007b22:	4628      	mov	r0, r5
 8007b24:	47b8      	blx	r7
 8007b26:	3001      	adds	r0, #1
 8007b28:	f43f af27 	beq.w	800797a <_printf_float+0xc2>
 8007b2c:	f108 0801 	add.w	r8, r8, #1
 8007b30:	e7e6      	b.n	8007b00 <_printf_float+0x248>
 8007b32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	dc39      	bgt.n	8007bac <_printf_float+0x2f4>
 8007b38:	4a1b      	ldr	r2, [pc, #108]	; (8007ba8 <_printf_float+0x2f0>)
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	4631      	mov	r1, r6
 8007b3e:	4628      	mov	r0, r5
 8007b40:	47b8      	blx	r7
 8007b42:	3001      	adds	r0, #1
 8007b44:	f43f af19 	beq.w	800797a <_printf_float+0xc2>
 8007b48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	d102      	bne.n	8007b56 <_printf_float+0x29e>
 8007b50:	6823      	ldr	r3, [r4, #0]
 8007b52:	07d9      	lsls	r1, r3, #31
 8007b54:	d5d8      	bpl.n	8007b08 <_printf_float+0x250>
 8007b56:	ee18 3a10 	vmov	r3, s16
 8007b5a:	4652      	mov	r2, sl
 8007b5c:	4631      	mov	r1, r6
 8007b5e:	4628      	mov	r0, r5
 8007b60:	47b8      	blx	r7
 8007b62:	3001      	adds	r0, #1
 8007b64:	f43f af09 	beq.w	800797a <_printf_float+0xc2>
 8007b68:	f04f 0900 	mov.w	r9, #0
 8007b6c:	f104 0a1a 	add.w	sl, r4, #26
 8007b70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b72:	425b      	negs	r3, r3
 8007b74:	454b      	cmp	r3, r9
 8007b76:	dc01      	bgt.n	8007b7c <_printf_float+0x2c4>
 8007b78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b7a:	e792      	b.n	8007aa2 <_printf_float+0x1ea>
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	4652      	mov	r2, sl
 8007b80:	4631      	mov	r1, r6
 8007b82:	4628      	mov	r0, r5
 8007b84:	47b8      	blx	r7
 8007b86:	3001      	adds	r0, #1
 8007b88:	f43f aef7 	beq.w	800797a <_printf_float+0xc2>
 8007b8c:	f109 0901 	add.w	r9, r9, #1
 8007b90:	e7ee      	b.n	8007b70 <_printf_float+0x2b8>
 8007b92:	bf00      	nop
 8007b94:	7fefffff 	.word	0x7fefffff
 8007b98:	0800fdf8 	.word	0x0800fdf8
 8007b9c:	0800fdfc 	.word	0x0800fdfc
 8007ba0:	0800fe04 	.word	0x0800fe04
 8007ba4:	0800fe00 	.word	0x0800fe00
 8007ba8:	0800fe08 	.word	0x0800fe08
 8007bac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007bae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007bb0:	429a      	cmp	r2, r3
 8007bb2:	bfa8      	it	ge
 8007bb4:	461a      	movge	r2, r3
 8007bb6:	2a00      	cmp	r2, #0
 8007bb8:	4691      	mov	r9, r2
 8007bba:	dc37      	bgt.n	8007c2c <_printf_float+0x374>
 8007bbc:	f04f 0b00 	mov.w	fp, #0
 8007bc0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007bc4:	f104 021a 	add.w	r2, r4, #26
 8007bc8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007bca:	9305      	str	r3, [sp, #20]
 8007bcc:	eba3 0309 	sub.w	r3, r3, r9
 8007bd0:	455b      	cmp	r3, fp
 8007bd2:	dc33      	bgt.n	8007c3c <_printf_float+0x384>
 8007bd4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007bd8:	429a      	cmp	r2, r3
 8007bda:	db3b      	blt.n	8007c54 <_printf_float+0x39c>
 8007bdc:	6823      	ldr	r3, [r4, #0]
 8007bde:	07da      	lsls	r2, r3, #31
 8007be0:	d438      	bmi.n	8007c54 <_printf_float+0x39c>
 8007be2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007be4:	9a05      	ldr	r2, [sp, #20]
 8007be6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007be8:	1a9a      	subs	r2, r3, r2
 8007bea:	eba3 0901 	sub.w	r9, r3, r1
 8007bee:	4591      	cmp	r9, r2
 8007bf0:	bfa8      	it	ge
 8007bf2:	4691      	movge	r9, r2
 8007bf4:	f1b9 0f00 	cmp.w	r9, #0
 8007bf8:	dc35      	bgt.n	8007c66 <_printf_float+0x3ae>
 8007bfa:	f04f 0800 	mov.w	r8, #0
 8007bfe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007c02:	f104 0a1a 	add.w	sl, r4, #26
 8007c06:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007c0a:	1a9b      	subs	r3, r3, r2
 8007c0c:	eba3 0309 	sub.w	r3, r3, r9
 8007c10:	4543      	cmp	r3, r8
 8007c12:	f77f af79 	ble.w	8007b08 <_printf_float+0x250>
 8007c16:	2301      	movs	r3, #1
 8007c18:	4652      	mov	r2, sl
 8007c1a:	4631      	mov	r1, r6
 8007c1c:	4628      	mov	r0, r5
 8007c1e:	47b8      	blx	r7
 8007c20:	3001      	adds	r0, #1
 8007c22:	f43f aeaa 	beq.w	800797a <_printf_float+0xc2>
 8007c26:	f108 0801 	add.w	r8, r8, #1
 8007c2a:	e7ec      	b.n	8007c06 <_printf_float+0x34e>
 8007c2c:	4613      	mov	r3, r2
 8007c2e:	4631      	mov	r1, r6
 8007c30:	4642      	mov	r2, r8
 8007c32:	4628      	mov	r0, r5
 8007c34:	47b8      	blx	r7
 8007c36:	3001      	adds	r0, #1
 8007c38:	d1c0      	bne.n	8007bbc <_printf_float+0x304>
 8007c3a:	e69e      	b.n	800797a <_printf_float+0xc2>
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	4631      	mov	r1, r6
 8007c40:	4628      	mov	r0, r5
 8007c42:	9205      	str	r2, [sp, #20]
 8007c44:	47b8      	blx	r7
 8007c46:	3001      	adds	r0, #1
 8007c48:	f43f ae97 	beq.w	800797a <_printf_float+0xc2>
 8007c4c:	9a05      	ldr	r2, [sp, #20]
 8007c4e:	f10b 0b01 	add.w	fp, fp, #1
 8007c52:	e7b9      	b.n	8007bc8 <_printf_float+0x310>
 8007c54:	ee18 3a10 	vmov	r3, s16
 8007c58:	4652      	mov	r2, sl
 8007c5a:	4631      	mov	r1, r6
 8007c5c:	4628      	mov	r0, r5
 8007c5e:	47b8      	blx	r7
 8007c60:	3001      	adds	r0, #1
 8007c62:	d1be      	bne.n	8007be2 <_printf_float+0x32a>
 8007c64:	e689      	b.n	800797a <_printf_float+0xc2>
 8007c66:	9a05      	ldr	r2, [sp, #20]
 8007c68:	464b      	mov	r3, r9
 8007c6a:	4442      	add	r2, r8
 8007c6c:	4631      	mov	r1, r6
 8007c6e:	4628      	mov	r0, r5
 8007c70:	47b8      	blx	r7
 8007c72:	3001      	adds	r0, #1
 8007c74:	d1c1      	bne.n	8007bfa <_printf_float+0x342>
 8007c76:	e680      	b.n	800797a <_printf_float+0xc2>
 8007c78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c7a:	2a01      	cmp	r2, #1
 8007c7c:	dc01      	bgt.n	8007c82 <_printf_float+0x3ca>
 8007c7e:	07db      	lsls	r3, r3, #31
 8007c80:	d538      	bpl.n	8007cf4 <_printf_float+0x43c>
 8007c82:	2301      	movs	r3, #1
 8007c84:	4642      	mov	r2, r8
 8007c86:	4631      	mov	r1, r6
 8007c88:	4628      	mov	r0, r5
 8007c8a:	47b8      	blx	r7
 8007c8c:	3001      	adds	r0, #1
 8007c8e:	f43f ae74 	beq.w	800797a <_printf_float+0xc2>
 8007c92:	ee18 3a10 	vmov	r3, s16
 8007c96:	4652      	mov	r2, sl
 8007c98:	4631      	mov	r1, r6
 8007c9a:	4628      	mov	r0, r5
 8007c9c:	47b8      	blx	r7
 8007c9e:	3001      	adds	r0, #1
 8007ca0:	f43f ae6b 	beq.w	800797a <_printf_float+0xc2>
 8007ca4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007ca8:	2200      	movs	r2, #0
 8007caa:	2300      	movs	r3, #0
 8007cac:	f7f8 ff0c 	bl	8000ac8 <__aeabi_dcmpeq>
 8007cb0:	b9d8      	cbnz	r0, 8007cea <_printf_float+0x432>
 8007cb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cb4:	f108 0201 	add.w	r2, r8, #1
 8007cb8:	3b01      	subs	r3, #1
 8007cba:	4631      	mov	r1, r6
 8007cbc:	4628      	mov	r0, r5
 8007cbe:	47b8      	blx	r7
 8007cc0:	3001      	adds	r0, #1
 8007cc2:	d10e      	bne.n	8007ce2 <_printf_float+0x42a>
 8007cc4:	e659      	b.n	800797a <_printf_float+0xc2>
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	4652      	mov	r2, sl
 8007cca:	4631      	mov	r1, r6
 8007ccc:	4628      	mov	r0, r5
 8007cce:	47b8      	blx	r7
 8007cd0:	3001      	adds	r0, #1
 8007cd2:	f43f ae52 	beq.w	800797a <_printf_float+0xc2>
 8007cd6:	f108 0801 	add.w	r8, r8, #1
 8007cda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cdc:	3b01      	subs	r3, #1
 8007cde:	4543      	cmp	r3, r8
 8007ce0:	dcf1      	bgt.n	8007cc6 <_printf_float+0x40e>
 8007ce2:	464b      	mov	r3, r9
 8007ce4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007ce8:	e6dc      	b.n	8007aa4 <_printf_float+0x1ec>
 8007cea:	f04f 0800 	mov.w	r8, #0
 8007cee:	f104 0a1a 	add.w	sl, r4, #26
 8007cf2:	e7f2      	b.n	8007cda <_printf_float+0x422>
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	4642      	mov	r2, r8
 8007cf8:	e7df      	b.n	8007cba <_printf_float+0x402>
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	464a      	mov	r2, r9
 8007cfe:	4631      	mov	r1, r6
 8007d00:	4628      	mov	r0, r5
 8007d02:	47b8      	blx	r7
 8007d04:	3001      	adds	r0, #1
 8007d06:	f43f ae38 	beq.w	800797a <_printf_float+0xc2>
 8007d0a:	f108 0801 	add.w	r8, r8, #1
 8007d0e:	68e3      	ldr	r3, [r4, #12]
 8007d10:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007d12:	1a5b      	subs	r3, r3, r1
 8007d14:	4543      	cmp	r3, r8
 8007d16:	dcf0      	bgt.n	8007cfa <_printf_float+0x442>
 8007d18:	e6fa      	b.n	8007b10 <_printf_float+0x258>
 8007d1a:	f04f 0800 	mov.w	r8, #0
 8007d1e:	f104 0919 	add.w	r9, r4, #25
 8007d22:	e7f4      	b.n	8007d0e <_printf_float+0x456>

08007d24 <_printf_common>:
 8007d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d28:	4616      	mov	r6, r2
 8007d2a:	4699      	mov	r9, r3
 8007d2c:	688a      	ldr	r2, [r1, #8]
 8007d2e:	690b      	ldr	r3, [r1, #16]
 8007d30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007d34:	4293      	cmp	r3, r2
 8007d36:	bfb8      	it	lt
 8007d38:	4613      	movlt	r3, r2
 8007d3a:	6033      	str	r3, [r6, #0]
 8007d3c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007d40:	4607      	mov	r7, r0
 8007d42:	460c      	mov	r4, r1
 8007d44:	b10a      	cbz	r2, 8007d4a <_printf_common+0x26>
 8007d46:	3301      	adds	r3, #1
 8007d48:	6033      	str	r3, [r6, #0]
 8007d4a:	6823      	ldr	r3, [r4, #0]
 8007d4c:	0699      	lsls	r1, r3, #26
 8007d4e:	bf42      	ittt	mi
 8007d50:	6833      	ldrmi	r3, [r6, #0]
 8007d52:	3302      	addmi	r3, #2
 8007d54:	6033      	strmi	r3, [r6, #0]
 8007d56:	6825      	ldr	r5, [r4, #0]
 8007d58:	f015 0506 	ands.w	r5, r5, #6
 8007d5c:	d106      	bne.n	8007d6c <_printf_common+0x48>
 8007d5e:	f104 0a19 	add.w	sl, r4, #25
 8007d62:	68e3      	ldr	r3, [r4, #12]
 8007d64:	6832      	ldr	r2, [r6, #0]
 8007d66:	1a9b      	subs	r3, r3, r2
 8007d68:	42ab      	cmp	r3, r5
 8007d6a:	dc26      	bgt.n	8007dba <_printf_common+0x96>
 8007d6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007d70:	1e13      	subs	r3, r2, #0
 8007d72:	6822      	ldr	r2, [r4, #0]
 8007d74:	bf18      	it	ne
 8007d76:	2301      	movne	r3, #1
 8007d78:	0692      	lsls	r2, r2, #26
 8007d7a:	d42b      	bmi.n	8007dd4 <_printf_common+0xb0>
 8007d7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007d80:	4649      	mov	r1, r9
 8007d82:	4638      	mov	r0, r7
 8007d84:	47c0      	blx	r8
 8007d86:	3001      	adds	r0, #1
 8007d88:	d01e      	beq.n	8007dc8 <_printf_common+0xa4>
 8007d8a:	6823      	ldr	r3, [r4, #0]
 8007d8c:	68e5      	ldr	r5, [r4, #12]
 8007d8e:	6832      	ldr	r2, [r6, #0]
 8007d90:	f003 0306 	and.w	r3, r3, #6
 8007d94:	2b04      	cmp	r3, #4
 8007d96:	bf08      	it	eq
 8007d98:	1aad      	subeq	r5, r5, r2
 8007d9a:	68a3      	ldr	r3, [r4, #8]
 8007d9c:	6922      	ldr	r2, [r4, #16]
 8007d9e:	bf0c      	ite	eq
 8007da0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007da4:	2500      	movne	r5, #0
 8007da6:	4293      	cmp	r3, r2
 8007da8:	bfc4      	itt	gt
 8007daa:	1a9b      	subgt	r3, r3, r2
 8007dac:	18ed      	addgt	r5, r5, r3
 8007dae:	2600      	movs	r6, #0
 8007db0:	341a      	adds	r4, #26
 8007db2:	42b5      	cmp	r5, r6
 8007db4:	d11a      	bne.n	8007dec <_printf_common+0xc8>
 8007db6:	2000      	movs	r0, #0
 8007db8:	e008      	b.n	8007dcc <_printf_common+0xa8>
 8007dba:	2301      	movs	r3, #1
 8007dbc:	4652      	mov	r2, sl
 8007dbe:	4649      	mov	r1, r9
 8007dc0:	4638      	mov	r0, r7
 8007dc2:	47c0      	blx	r8
 8007dc4:	3001      	adds	r0, #1
 8007dc6:	d103      	bne.n	8007dd0 <_printf_common+0xac>
 8007dc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007dcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dd0:	3501      	adds	r5, #1
 8007dd2:	e7c6      	b.n	8007d62 <_printf_common+0x3e>
 8007dd4:	18e1      	adds	r1, r4, r3
 8007dd6:	1c5a      	adds	r2, r3, #1
 8007dd8:	2030      	movs	r0, #48	; 0x30
 8007dda:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007dde:	4422      	add	r2, r4
 8007de0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007de4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007de8:	3302      	adds	r3, #2
 8007dea:	e7c7      	b.n	8007d7c <_printf_common+0x58>
 8007dec:	2301      	movs	r3, #1
 8007dee:	4622      	mov	r2, r4
 8007df0:	4649      	mov	r1, r9
 8007df2:	4638      	mov	r0, r7
 8007df4:	47c0      	blx	r8
 8007df6:	3001      	adds	r0, #1
 8007df8:	d0e6      	beq.n	8007dc8 <_printf_common+0xa4>
 8007dfa:	3601      	adds	r6, #1
 8007dfc:	e7d9      	b.n	8007db2 <_printf_common+0x8e>
	...

08007e00 <_printf_i>:
 8007e00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e04:	7e0f      	ldrb	r7, [r1, #24]
 8007e06:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007e08:	2f78      	cmp	r7, #120	; 0x78
 8007e0a:	4691      	mov	r9, r2
 8007e0c:	4680      	mov	r8, r0
 8007e0e:	460c      	mov	r4, r1
 8007e10:	469a      	mov	sl, r3
 8007e12:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007e16:	d807      	bhi.n	8007e28 <_printf_i+0x28>
 8007e18:	2f62      	cmp	r7, #98	; 0x62
 8007e1a:	d80a      	bhi.n	8007e32 <_printf_i+0x32>
 8007e1c:	2f00      	cmp	r7, #0
 8007e1e:	f000 80d8 	beq.w	8007fd2 <_printf_i+0x1d2>
 8007e22:	2f58      	cmp	r7, #88	; 0x58
 8007e24:	f000 80a3 	beq.w	8007f6e <_printf_i+0x16e>
 8007e28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007e30:	e03a      	b.n	8007ea8 <_printf_i+0xa8>
 8007e32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007e36:	2b15      	cmp	r3, #21
 8007e38:	d8f6      	bhi.n	8007e28 <_printf_i+0x28>
 8007e3a:	a101      	add	r1, pc, #4	; (adr r1, 8007e40 <_printf_i+0x40>)
 8007e3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007e40:	08007e99 	.word	0x08007e99
 8007e44:	08007ead 	.word	0x08007ead
 8007e48:	08007e29 	.word	0x08007e29
 8007e4c:	08007e29 	.word	0x08007e29
 8007e50:	08007e29 	.word	0x08007e29
 8007e54:	08007e29 	.word	0x08007e29
 8007e58:	08007ead 	.word	0x08007ead
 8007e5c:	08007e29 	.word	0x08007e29
 8007e60:	08007e29 	.word	0x08007e29
 8007e64:	08007e29 	.word	0x08007e29
 8007e68:	08007e29 	.word	0x08007e29
 8007e6c:	08007fb9 	.word	0x08007fb9
 8007e70:	08007edd 	.word	0x08007edd
 8007e74:	08007f9b 	.word	0x08007f9b
 8007e78:	08007e29 	.word	0x08007e29
 8007e7c:	08007e29 	.word	0x08007e29
 8007e80:	08007fdb 	.word	0x08007fdb
 8007e84:	08007e29 	.word	0x08007e29
 8007e88:	08007edd 	.word	0x08007edd
 8007e8c:	08007e29 	.word	0x08007e29
 8007e90:	08007e29 	.word	0x08007e29
 8007e94:	08007fa3 	.word	0x08007fa3
 8007e98:	682b      	ldr	r3, [r5, #0]
 8007e9a:	1d1a      	adds	r2, r3, #4
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	602a      	str	r2, [r5, #0]
 8007ea0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ea4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	e0a3      	b.n	8007ff4 <_printf_i+0x1f4>
 8007eac:	6820      	ldr	r0, [r4, #0]
 8007eae:	6829      	ldr	r1, [r5, #0]
 8007eb0:	0606      	lsls	r6, r0, #24
 8007eb2:	f101 0304 	add.w	r3, r1, #4
 8007eb6:	d50a      	bpl.n	8007ece <_printf_i+0xce>
 8007eb8:	680e      	ldr	r6, [r1, #0]
 8007eba:	602b      	str	r3, [r5, #0]
 8007ebc:	2e00      	cmp	r6, #0
 8007ebe:	da03      	bge.n	8007ec8 <_printf_i+0xc8>
 8007ec0:	232d      	movs	r3, #45	; 0x2d
 8007ec2:	4276      	negs	r6, r6
 8007ec4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ec8:	485e      	ldr	r0, [pc, #376]	; (8008044 <_printf_i+0x244>)
 8007eca:	230a      	movs	r3, #10
 8007ecc:	e019      	b.n	8007f02 <_printf_i+0x102>
 8007ece:	680e      	ldr	r6, [r1, #0]
 8007ed0:	602b      	str	r3, [r5, #0]
 8007ed2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007ed6:	bf18      	it	ne
 8007ed8:	b236      	sxthne	r6, r6
 8007eda:	e7ef      	b.n	8007ebc <_printf_i+0xbc>
 8007edc:	682b      	ldr	r3, [r5, #0]
 8007ede:	6820      	ldr	r0, [r4, #0]
 8007ee0:	1d19      	adds	r1, r3, #4
 8007ee2:	6029      	str	r1, [r5, #0]
 8007ee4:	0601      	lsls	r1, r0, #24
 8007ee6:	d501      	bpl.n	8007eec <_printf_i+0xec>
 8007ee8:	681e      	ldr	r6, [r3, #0]
 8007eea:	e002      	b.n	8007ef2 <_printf_i+0xf2>
 8007eec:	0646      	lsls	r6, r0, #25
 8007eee:	d5fb      	bpl.n	8007ee8 <_printf_i+0xe8>
 8007ef0:	881e      	ldrh	r6, [r3, #0]
 8007ef2:	4854      	ldr	r0, [pc, #336]	; (8008044 <_printf_i+0x244>)
 8007ef4:	2f6f      	cmp	r7, #111	; 0x6f
 8007ef6:	bf0c      	ite	eq
 8007ef8:	2308      	moveq	r3, #8
 8007efa:	230a      	movne	r3, #10
 8007efc:	2100      	movs	r1, #0
 8007efe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007f02:	6865      	ldr	r5, [r4, #4]
 8007f04:	60a5      	str	r5, [r4, #8]
 8007f06:	2d00      	cmp	r5, #0
 8007f08:	bfa2      	ittt	ge
 8007f0a:	6821      	ldrge	r1, [r4, #0]
 8007f0c:	f021 0104 	bicge.w	r1, r1, #4
 8007f10:	6021      	strge	r1, [r4, #0]
 8007f12:	b90e      	cbnz	r6, 8007f18 <_printf_i+0x118>
 8007f14:	2d00      	cmp	r5, #0
 8007f16:	d04d      	beq.n	8007fb4 <_printf_i+0x1b4>
 8007f18:	4615      	mov	r5, r2
 8007f1a:	fbb6 f1f3 	udiv	r1, r6, r3
 8007f1e:	fb03 6711 	mls	r7, r3, r1, r6
 8007f22:	5dc7      	ldrb	r7, [r0, r7]
 8007f24:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007f28:	4637      	mov	r7, r6
 8007f2a:	42bb      	cmp	r3, r7
 8007f2c:	460e      	mov	r6, r1
 8007f2e:	d9f4      	bls.n	8007f1a <_printf_i+0x11a>
 8007f30:	2b08      	cmp	r3, #8
 8007f32:	d10b      	bne.n	8007f4c <_printf_i+0x14c>
 8007f34:	6823      	ldr	r3, [r4, #0]
 8007f36:	07de      	lsls	r6, r3, #31
 8007f38:	d508      	bpl.n	8007f4c <_printf_i+0x14c>
 8007f3a:	6923      	ldr	r3, [r4, #16]
 8007f3c:	6861      	ldr	r1, [r4, #4]
 8007f3e:	4299      	cmp	r1, r3
 8007f40:	bfde      	ittt	le
 8007f42:	2330      	movle	r3, #48	; 0x30
 8007f44:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007f48:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007f4c:	1b52      	subs	r2, r2, r5
 8007f4e:	6122      	str	r2, [r4, #16]
 8007f50:	f8cd a000 	str.w	sl, [sp]
 8007f54:	464b      	mov	r3, r9
 8007f56:	aa03      	add	r2, sp, #12
 8007f58:	4621      	mov	r1, r4
 8007f5a:	4640      	mov	r0, r8
 8007f5c:	f7ff fee2 	bl	8007d24 <_printf_common>
 8007f60:	3001      	adds	r0, #1
 8007f62:	d14c      	bne.n	8007ffe <_printf_i+0x1fe>
 8007f64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007f68:	b004      	add	sp, #16
 8007f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f6e:	4835      	ldr	r0, [pc, #212]	; (8008044 <_printf_i+0x244>)
 8007f70:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007f74:	6829      	ldr	r1, [r5, #0]
 8007f76:	6823      	ldr	r3, [r4, #0]
 8007f78:	f851 6b04 	ldr.w	r6, [r1], #4
 8007f7c:	6029      	str	r1, [r5, #0]
 8007f7e:	061d      	lsls	r5, r3, #24
 8007f80:	d514      	bpl.n	8007fac <_printf_i+0x1ac>
 8007f82:	07df      	lsls	r7, r3, #31
 8007f84:	bf44      	itt	mi
 8007f86:	f043 0320 	orrmi.w	r3, r3, #32
 8007f8a:	6023      	strmi	r3, [r4, #0]
 8007f8c:	b91e      	cbnz	r6, 8007f96 <_printf_i+0x196>
 8007f8e:	6823      	ldr	r3, [r4, #0]
 8007f90:	f023 0320 	bic.w	r3, r3, #32
 8007f94:	6023      	str	r3, [r4, #0]
 8007f96:	2310      	movs	r3, #16
 8007f98:	e7b0      	b.n	8007efc <_printf_i+0xfc>
 8007f9a:	6823      	ldr	r3, [r4, #0]
 8007f9c:	f043 0320 	orr.w	r3, r3, #32
 8007fa0:	6023      	str	r3, [r4, #0]
 8007fa2:	2378      	movs	r3, #120	; 0x78
 8007fa4:	4828      	ldr	r0, [pc, #160]	; (8008048 <_printf_i+0x248>)
 8007fa6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007faa:	e7e3      	b.n	8007f74 <_printf_i+0x174>
 8007fac:	0659      	lsls	r1, r3, #25
 8007fae:	bf48      	it	mi
 8007fb0:	b2b6      	uxthmi	r6, r6
 8007fb2:	e7e6      	b.n	8007f82 <_printf_i+0x182>
 8007fb4:	4615      	mov	r5, r2
 8007fb6:	e7bb      	b.n	8007f30 <_printf_i+0x130>
 8007fb8:	682b      	ldr	r3, [r5, #0]
 8007fba:	6826      	ldr	r6, [r4, #0]
 8007fbc:	6961      	ldr	r1, [r4, #20]
 8007fbe:	1d18      	adds	r0, r3, #4
 8007fc0:	6028      	str	r0, [r5, #0]
 8007fc2:	0635      	lsls	r5, r6, #24
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	d501      	bpl.n	8007fcc <_printf_i+0x1cc>
 8007fc8:	6019      	str	r1, [r3, #0]
 8007fca:	e002      	b.n	8007fd2 <_printf_i+0x1d2>
 8007fcc:	0670      	lsls	r0, r6, #25
 8007fce:	d5fb      	bpl.n	8007fc8 <_printf_i+0x1c8>
 8007fd0:	8019      	strh	r1, [r3, #0]
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	6123      	str	r3, [r4, #16]
 8007fd6:	4615      	mov	r5, r2
 8007fd8:	e7ba      	b.n	8007f50 <_printf_i+0x150>
 8007fda:	682b      	ldr	r3, [r5, #0]
 8007fdc:	1d1a      	adds	r2, r3, #4
 8007fde:	602a      	str	r2, [r5, #0]
 8007fe0:	681d      	ldr	r5, [r3, #0]
 8007fe2:	6862      	ldr	r2, [r4, #4]
 8007fe4:	2100      	movs	r1, #0
 8007fe6:	4628      	mov	r0, r5
 8007fe8:	f7f8 f8fa 	bl	80001e0 <memchr>
 8007fec:	b108      	cbz	r0, 8007ff2 <_printf_i+0x1f2>
 8007fee:	1b40      	subs	r0, r0, r5
 8007ff0:	6060      	str	r0, [r4, #4]
 8007ff2:	6863      	ldr	r3, [r4, #4]
 8007ff4:	6123      	str	r3, [r4, #16]
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ffc:	e7a8      	b.n	8007f50 <_printf_i+0x150>
 8007ffe:	6923      	ldr	r3, [r4, #16]
 8008000:	462a      	mov	r2, r5
 8008002:	4649      	mov	r1, r9
 8008004:	4640      	mov	r0, r8
 8008006:	47d0      	blx	sl
 8008008:	3001      	adds	r0, #1
 800800a:	d0ab      	beq.n	8007f64 <_printf_i+0x164>
 800800c:	6823      	ldr	r3, [r4, #0]
 800800e:	079b      	lsls	r3, r3, #30
 8008010:	d413      	bmi.n	800803a <_printf_i+0x23a>
 8008012:	68e0      	ldr	r0, [r4, #12]
 8008014:	9b03      	ldr	r3, [sp, #12]
 8008016:	4298      	cmp	r0, r3
 8008018:	bfb8      	it	lt
 800801a:	4618      	movlt	r0, r3
 800801c:	e7a4      	b.n	8007f68 <_printf_i+0x168>
 800801e:	2301      	movs	r3, #1
 8008020:	4632      	mov	r2, r6
 8008022:	4649      	mov	r1, r9
 8008024:	4640      	mov	r0, r8
 8008026:	47d0      	blx	sl
 8008028:	3001      	adds	r0, #1
 800802a:	d09b      	beq.n	8007f64 <_printf_i+0x164>
 800802c:	3501      	adds	r5, #1
 800802e:	68e3      	ldr	r3, [r4, #12]
 8008030:	9903      	ldr	r1, [sp, #12]
 8008032:	1a5b      	subs	r3, r3, r1
 8008034:	42ab      	cmp	r3, r5
 8008036:	dcf2      	bgt.n	800801e <_printf_i+0x21e>
 8008038:	e7eb      	b.n	8008012 <_printf_i+0x212>
 800803a:	2500      	movs	r5, #0
 800803c:	f104 0619 	add.w	r6, r4, #25
 8008040:	e7f5      	b.n	800802e <_printf_i+0x22e>
 8008042:	bf00      	nop
 8008044:	0800fe0a 	.word	0x0800fe0a
 8008048:	0800fe1b 	.word	0x0800fe1b

0800804c <iprintf>:
 800804c:	b40f      	push	{r0, r1, r2, r3}
 800804e:	4b0a      	ldr	r3, [pc, #40]	; (8008078 <iprintf+0x2c>)
 8008050:	b513      	push	{r0, r1, r4, lr}
 8008052:	681c      	ldr	r4, [r3, #0]
 8008054:	b124      	cbz	r4, 8008060 <iprintf+0x14>
 8008056:	69a3      	ldr	r3, [r4, #24]
 8008058:	b913      	cbnz	r3, 8008060 <iprintf+0x14>
 800805a:	4620      	mov	r0, r4
 800805c:	f7ff f95c 	bl	8007318 <__sinit>
 8008060:	ab05      	add	r3, sp, #20
 8008062:	9a04      	ldr	r2, [sp, #16]
 8008064:	68a1      	ldr	r1, [r4, #8]
 8008066:	9301      	str	r3, [sp, #4]
 8008068:	4620      	mov	r0, r4
 800806a:	f001 fc6b 	bl	8009944 <_vfiprintf_r>
 800806e:	b002      	add	sp, #8
 8008070:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008074:	b004      	add	sp, #16
 8008076:	4770      	bx	lr
 8008078:	20000014 	.word	0x20000014

0800807c <_puts_r>:
 800807c:	b570      	push	{r4, r5, r6, lr}
 800807e:	460e      	mov	r6, r1
 8008080:	4605      	mov	r5, r0
 8008082:	b118      	cbz	r0, 800808c <_puts_r+0x10>
 8008084:	6983      	ldr	r3, [r0, #24]
 8008086:	b90b      	cbnz	r3, 800808c <_puts_r+0x10>
 8008088:	f7ff f946 	bl	8007318 <__sinit>
 800808c:	69ab      	ldr	r3, [r5, #24]
 800808e:	68ac      	ldr	r4, [r5, #8]
 8008090:	b913      	cbnz	r3, 8008098 <_puts_r+0x1c>
 8008092:	4628      	mov	r0, r5
 8008094:	f7ff f940 	bl	8007318 <__sinit>
 8008098:	4b2c      	ldr	r3, [pc, #176]	; (800814c <_puts_r+0xd0>)
 800809a:	429c      	cmp	r4, r3
 800809c:	d120      	bne.n	80080e0 <_puts_r+0x64>
 800809e:	686c      	ldr	r4, [r5, #4]
 80080a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80080a2:	07db      	lsls	r3, r3, #31
 80080a4:	d405      	bmi.n	80080b2 <_puts_r+0x36>
 80080a6:	89a3      	ldrh	r3, [r4, #12]
 80080a8:	0598      	lsls	r0, r3, #22
 80080aa:	d402      	bmi.n	80080b2 <_puts_r+0x36>
 80080ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80080ae:	f7ff f9f6 	bl	800749e <__retarget_lock_acquire_recursive>
 80080b2:	89a3      	ldrh	r3, [r4, #12]
 80080b4:	0719      	lsls	r1, r3, #28
 80080b6:	d51d      	bpl.n	80080f4 <_puts_r+0x78>
 80080b8:	6923      	ldr	r3, [r4, #16]
 80080ba:	b1db      	cbz	r3, 80080f4 <_puts_r+0x78>
 80080bc:	3e01      	subs	r6, #1
 80080be:	68a3      	ldr	r3, [r4, #8]
 80080c0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80080c4:	3b01      	subs	r3, #1
 80080c6:	60a3      	str	r3, [r4, #8]
 80080c8:	bb39      	cbnz	r1, 800811a <_puts_r+0x9e>
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	da38      	bge.n	8008140 <_puts_r+0xc4>
 80080ce:	4622      	mov	r2, r4
 80080d0:	210a      	movs	r1, #10
 80080d2:	4628      	mov	r0, r5
 80080d4:	f000 f8d0 	bl	8008278 <__swbuf_r>
 80080d8:	3001      	adds	r0, #1
 80080da:	d011      	beq.n	8008100 <_puts_r+0x84>
 80080dc:	250a      	movs	r5, #10
 80080de:	e011      	b.n	8008104 <_puts_r+0x88>
 80080e0:	4b1b      	ldr	r3, [pc, #108]	; (8008150 <_puts_r+0xd4>)
 80080e2:	429c      	cmp	r4, r3
 80080e4:	d101      	bne.n	80080ea <_puts_r+0x6e>
 80080e6:	68ac      	ldr	r4, [r5, #8]
 80080e8:	e7da      	b.n	80080a0 <_puts_r+0x24>
 80080ea:	4b1a      	ldr	r3, [pc, #104]	; (8008154 <_puts_r+0xd8>)
 80080ec:	429c      	cmp	r4, r3
 80080ee:	bf08      	it	eq
 80080f0:	68ec      	ldreq	r4, [r5, #12]
 80080f2:	e7d5      	b.n	80080a0 <_puts_r+0x24>
 80080f4:	4621      	mov	r1, r4
 80080f6:	4628      	mov	r0, r5
 80080f8:	f000 f922 	bl	8008340 <__swsetup_r>
 80080fc:	2800      	cmp	r0, #0
 80080fe:	d0dd      	beq.n	80080bc <_puts_r+0x40>
 8008100:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8008104:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008106:	07da      	lsls	r2, r3, #31
 8008108:	d405      	bmi.n	8008116 <_puts_r+0x9a>
 800810a:	89a3      	ldrh	r3, [r4, #12]
 800810c:	059b      	lsls	r3, r3, #22
 800810e:	d402      	bmi.n	8008116 <_puts_r+0x9a>
 8008110:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008112:	f7ff f9c5 	bl	80074a0 <__retarget_lock_release_recursive>
 8008116:	4628      	mov	r0, r5
 8008118:	bd70      	pop	{r4, r5, r6, pc}
 800811a:	2b00      	cmp	r3, #0
 800811c:	da04      	bge.n	8008128 <_puts_r+0xac>
 800811e:	69a2      	ldr	r2, [r4, #24]
 8008120:	429a      	cmp	r2, r3
 8008122:	dc06      	bgt.n	8008132 <_puts_r+0xb6>
 8008124:	290a      	cmp	r1, #10
 8008126:	d004      	beq.n	8008132 <_puts_r+0xb6>
 8008128:	6823      	ldr	r3, [r4, #0]
 800812a:	1c5a      	adds	r2, r3, #1
 800812c:	6022      	str	r2, [r4, #0]
 800812e:	7019      	strb	r1, [r3, #0]
 8008130:	e7c5      	b.n	80080be <_puts_r+0x42>
 8008132:	4622      	mov	r2, r4
 8008134:	4628      	mov	r0, r5
 8008136:	f000 f89f 	bl	8008278 <__swbuf_r>
 800813a:	3001      	adds	r0, #1
 800813c:	d1bf      	bne.n	80080be <_puts_r+0x42>
 800813e:	e7df      	b.n	8008100 <_puts_r+0x84>
 8008140:	6823      	ldr	r3, [r4, #0]
 8008142:	250a      	movs	r5, #10
 8008144:	1c5a      	adds	r2, r3, #1
 8008146:	6022      	str	r2, [r4, #0]
 8008148:	701d      	strb	r5, [r3, #0]
 800814a:	e7db      	b.n	8008104 <_puts_r+0x88>
 800814c:	0800fdb4 	.word	0x0800fdb4
 8008150:	0800fdd4 	.word	0x0800fdd4
 8008154:	0800fd94 	.word	0x0800fd94

08008158 <puts>:
 8008158:	4b02      	ldr	r3, [pc, #8]	; (8008164 <puts+0xc>)
 800815a:	4601      	mov	r1, r0
 800815c:	6818      	ldr	r0, [r3, #0]
 800815e:	f7ff bf8d 	b.w	800807c <_puts_r>
 8008162:	bf00      	nop
 8008164:	20000014 	.word	0x20000014

08008168 <_sbrk_r>:
 8008168:	b538      	push	{r3, r4, r5, lr}
 800816a:	4d06      	ldr	r5, [pc, #24]	; (8008184 <_sbrk_r+0x1c>)
 800816c:	2300      	movs	r3, #0
 800816e:	4604      	mov	r4, r0
 8008170:	4608      	mov	r0, r1
 8008172:	602b      	str	r3, [r5, #0]
 8008174:	f7f9 ffdc 	bl	8002130 <_sbrk>
 8008178:	1c43      	adds	r3, r0, #1
 800817a:	d102      	bne.n	8008182 <_sbrk_r+0x1a>
 800817c:	682b      	ldr	r3, [r5, #0]
 800817e:	b103      	cbz	r3, 8008182 <_sbrk_r+0x1a>
 8008180:	6023      	str	r3, [r4, #0]
 8008182:	bd38      	pop	{r3, r4, r5, pc}
 8008184:	20000388 	.word	0x20000388

08008188 <__sread>:
 8008188:	b510      	push	{r4, lr}
 800818a:	460c      	mov	r4, r1
 800818c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008190:	f001 fd08 	bl	8009ba4 <_read_r>
 8008194:	2800      	cmp	r0, #0
 8008196:	bfab      	itete	ge
 8008198:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800819a:	89a3      	ldrhlt	r3, [r4, #12]
 800819c:	181b      	addge	r3, r3, r0
 800819e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80081a2:	bfac      	ite	ge
 80081a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80081a6:	81a3      	strhlt	r3, [r4, #12]
 80081a8:	bd10      	pop	{r4, pc}

080081aa <__swrite>:
 80081aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081ae:	461f      	mov	r7, r3
 80081b0:	898b      	ldrh	r3, [r1, #12]
 80081b2:	05db      	lsls	r3, r3, #23
 80081b4:	4605      	mov	r5, r0
 80081b6:	460c      	mov	r4, r1
 80081b8:	4616      	mov	r6, r2
 80081ba:	d505      	bpl.n	80081c8 <__swrite+0x1e>
 80081bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081c0:	2302      	movs	r3, #2
 80081c2:	2200      	movs	r2, #0
 80081c4:	f000 ffdc 	bl	8009180 <_lseek_r>
 80081c8:	89a3      	ldrh	r3, [r4, #12]
 80081ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80081ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80081d2:	81a3      	strh	r3, [r4, #12]
 80081d4:	4632      	mov	r2, r6
 80081d6:	463b      	mov	r3, r7
 80081d8:	4628      	mov	r0, r5
 80081da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80081de:	f000 b89d 	b.w	800831c <_write_r>

080081e2 <__sseek>:
 80081e2:	b510      	push	{r4, lr}
 80081e4:	460c      	mov	r4, r1
 80081e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081ea:	f000 ffc9 	bl	8009180 <_lseek_r>
 80081ee:	1c43      	adds	r3, r0, #1
 80081f0:	89a3      	ldrh	r3, [r4, #12]
 80081f2:	bf15      	itete	ne
 80081f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80081f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80081fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80081fe:	81a3      	strheq	r3, [r4, #12]
 8008200:	bf18      	it	ne
 8008202:	81a3      	strhne	r3, [r4, #12]
 8008204:	bd10      	pop	{r4, pc}

08008206 <__sclose>:
 8008206:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800820a:	f000 b907 	b.w	800841c <_close_r>
	...

08008210 <swprintf>:
 8008210:	b40c      	push	{r2, r3}
 8008212:	b530      	push	{r4, r5, lr}
 8008214:	4b17      	ldr	r3, [pc, #92]	; (8008274 <swprintf+0x64>)
 8008216:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 800821a:	681d      	ldr	r5, [r3, #0]
 800821c:	b09d      	sub	sp, #116	; 0x74
 800821e:	460c      	mov	r4, r1
 8008220:	d308      	bcc.n	8008234 <swprintf+0x24>
 8008222:	238b      	movs	r3, #139	; 0x8b
 8008224:	602b      	str	r3, [r5, #0]
 8008226:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800822a:	b01d      	add	sp, #116	; 0x74
 800822c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008230:	b002      	add	sp, #8
 8008232:	4770      	bx	lr
 8008234:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008238:	f8ad 3014 	strh.w	r3, [sp, #20]
 800823c:	9002      	str	r0, [sp, #8]
 800823e:	9006      	str	r0, [sp, #24]
 8008240:	b1b1      	cbz	r1, 8008270 <swprintf+0x60>
 8008242:	1e4b      	subs	r3, r1, #1
 8008244:	009b      	lsls	r3, r3, #2
 8008246:	9304      	str	r3, [sp, #16]
 8008248:	9307      	str	r3, [sp, #28]
 800824a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800824e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008252:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008254:	ab21      	add	r3, sp, #132	; 0x84
 8008256:	a902      	add	r1, sp, #8
 8008258:	4628      	mov	r0, r5
 800825a:	9301      	str	r3, [sp, #4]
 800825c:	f001 fd24 	bl	8009ca8 <_svfwprintf_r>
 8008260:	2c00      	cmp	r4, #0
 8008262:	d0de      	beq.n	8008222 <swprintf+0x12>
 8008264:	9b02      	ldr	r3, [sp, #8]
 8008266:	2200      	movs	r2, #0
 8008268:	42a0      	cmp	r0, r4
 800826a:	601a      	str	r2, [r3, #0]
 800826c:	d3dd      	bcc.n	800822a <swprintf+0x1a>
 800826e:	e7d8      	b.n	8008222 <swprintf+0x12>
 8008270:	460b      	mov	r3, r1
 8008272:	e7e8      	b.n	8008246 <swprintf+0x36>
 8008274:	20000014 	.word	0x20000014

08008278 <__swbuf_r>:
 8008278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800827a:	460e      	mov	r6, r1
 800827c:	4614      	mov	r4, r2
 800827e:	4605      	mov	r5, r0
 8008280:	b118      	cbz	r0, 800828a <__swbuf_r+0x12>
 8008282:	6983      	ldr	r3, [r0, #24]
 8008284:	b90b      	cbnz	r3, 800828a <__swbuf_r+0x12>
 8008286:	f7ff f847 	bl	8007318 <__sinit>
 800828a:	4b21      	ldr	r3, [pc, #132]	; (8008310 <__swbuf_r+0x98>)
 800828c:	429c      	cmp	r4, r3
 800828e:	d12b      	bne.n	80082e8 <__swbuf_r+0x70>
 8008290:	686c      	ldr	r4, [r5, #4]
 8008292:	69a3      	ldr	r3, [r4, #24]
 8008294:	60a3      	str	r3, [r4, #8]
 8008296:	89a3      	ldrh	r3, [r4, #12]
 8008298:	071a      	lsls	r2, r3, #28
 800829a:	d52f      	bpl.n	80082fc <__swbuf_r+0x84>
 800829c:	6923      	ldr	r3, [r4, #16]
 800829e:	b36b      	cbz	r3, 80082fc <__swbuf_r+0x84>
 80082a0:	6923      	ldr	r3, [r4, #16]
 80082a2:	6820      	ldr	r0, [r4, #0]
 80082a4:	1ac0      	subs	r0, r0, r3
 80082a6:	6963      	ldr	r3, [r4, #20]
 80082a8:	b2f6      	uxtb	r6, r6
 80082aa:	4283      	cmp	r3, r0
 80082ac:	4637      	mov	r7, r6
 80082ae:	dc04      	bgt.n	80082ba <__swbuf_r+0x42>
 80082b0:	4621      	mov	r1, r4
 80082b2:	4628      	mov	r0, r5
 80082b4:	f7fe ff9c 	bl	80071f0 <_fflush_r>
 80082b8:	bb30      	cbnz	r0, 8008308 <__swbuf_r+0x90>
 80082ba:	68a3      	ldr	r3, [r4, #8]
 80082bc:	3b01      	subs	r3, #1
 80082be:	60a3      	str	r3, [r4, #8]
 80082c0:	6823      	ldr	r3, [r4, #0]
 80082c2:	1c5a      	adds	r2, r3, #1
 80082c4:	6022      	str	r2, [r4, #0]
 80082c6:	701e      	strb	r6, [r3, #0]
 80082c8:	6963      	ldr	r3, [r4, #20]
 80082ca:	3001      	adds	r0, #1
 80082cc:	4283      	cmp	r3, r0
 80082ce:	d004      	beq.n	80082da <__swbuf_r+0x62>
 80082d0:	89a3      	ldrh	r3, [r4, #12]
 80082d2:	07db      	lsls	r3, r3, #31
 80082d4:	d506      	bpl.n	80082e4 <__swbuf_r+0x6c>
 80082d6:	2e0a      	cmp	r6, #10
 80082d8:	d104      	bne.n	80082e4 <__swbuf_r+0x6c>
 80082da:	4621      	mov	r1, r4
 80082dc:	4628      	mov	r0, r5
 80082de:	f7fe ff87 	bl	80071f0 <_fflush_r>
 80082e2:	b988      	cbnz	r0, 8008308 <__swbuf_r+0x90>
 80082e4:	4638      	mov	r0, r7
 80082e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082e8:	4b0a      	ldr	r3, [pc, #40]	; (8008314 <__swbuf_r+0x9c>)
 80082ea:	429c      	cmp	r4, r3
 80082ec:	d101      	bne.n	80082f2 <__swbuf_r+0x7a>
 80082ee:	68ac      	ldr	r4, [r5, #8]
 80082f0:	e7cf      	b.n	8008292 <__swbuf_r+0x1a>
 80082f2:	4b09      	ldr	r3, [pc, #36]	; (8008318 <__swbuf_r+0xa0>)
 80082f4:	429c      	cmp	r4, r3
 80082f6:	bf08      	it	eq
 80082f8:	68ec      	ldreq	r4, [r5, #12]
 80082fa:	e7ca      	b.n	8008292 <__swbuf_r+0x1a>
 80082fc:	4621      	mov	r1, r4
 80082fe:	4628      	mov	r0, r5
 8008300:	f000 f81e 	bl	8008340 <__swsetup_r>
 8008304:	2800      	cmp	r0, #0
 8008306:	d0cb      	beq.n	80082a0 <__swbuf_r+0x28>
 8008308:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800830c:	e7ea      	b.n	80082e4 <__swbuf_r+0x6c>
 800830e:	bf00      	nop
 8008310:	0800fdb4 	.word	0x0800fdb4
 8008314:	0800fdd4 	.word	0x0800fdd4
 8008318:	0800fd94 	.word	0x0800fd94

0800831c <_write_r>:
 800831c:	b538      	push	{r3, r4, r5, lr}
 800831e:	4d07      	ldr	r5, [pc, #28]	; (800833c <_write_r+0x20>)
 8008320:	4604      	mov	r4, r0
 8008322:	4608      	mov	r0, r1
 8008324:	4611      	mov	r1, r2
 8008326:	2200      	movs	r2, #0
 8008328:	602a      	str	r2, [r5, #0]
 800832a:	461a      	mov	r2, r3
 800832c:	f7f9 feaf 	bl	800208e <_write>
 8008330:	1c43      	adds	r3, r0, #1
 8008332:	d102      	bne.n	800833a <_write_r+0x1e>
 8008334:	682b      	ldr	r3, [r5, #0]
 8008336:	b103      	cbz	r3, 800833a <_write_r+0x1e>
 8008338:	6023      	str	r3, [r4, #0]
 800833a:	bd38      	pop	{r3, r4, r5, pc}
 800833c:	20000388 	.word	0x20000388

08008340 <__swsetup_r>:
 8008340:	4b32      	ldr	r3, [pc, #200]	; (800840c <__swsetup_r+0xcc>)
 8008342:	b570      	push	{r4, r5, r6, lr}
 8008344:	681d      	ldr	r5, [r3, #0]
 8008346:	4606      	mov	r6, r0
 8008348:	460c      	mov	r4, r1
 800834a:	b125      	cbz	r5, 8008356 <__swsetup_r+0x16>
 800834c:	69ab      	ldr	r3, [r5, #24]
 800834e:	b913      	cbnz	r3, 8008356 <__swsetup_r+0x16>
 8008350:	4628      	mov	r0, r5
 8008352:	f7fe ffe1 	bl	8007318 <__sinit>
 8008356:	4b2e      	ldr	r3, [pc, #184]	; (8008410 <__swsetup_r+0xd0>)
 8008358:	429c      	cmp	r4, r3
 800835a:	d10f      	bne.n	800837c <__swsetup_r+0x3c>
 800835c:	686c      	ldr	r4, [r5, #4]
 800835e:	89a3      	ldrh	r3, [r4, #12]
 8008360:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008364:	0719      	lsls	r1, r3, #28
 8008366:	d42c      	bmi.n	80083c2 <__swsetup_r+0x82>
 8008368:	06dd      	lsls	r5, r3, #27
 800836a:	d411      	bmi.n	8008390 <__swsetup_r+0x50>
 800836c:	2309      	movs	r3, #9
 800836e:	6033      	str	r3, [r6, #0]
 8008370:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008374:	81a3      	strh	r3, [r4, #12]
 8008376:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800837a:	e03e      	b.n	80083fa <__swsetup_r+0xba>
 800837c:	4b25      	ldr	r3, [pc, #148]	; (8008414 <__swsetup_r+0xd4>)
 800837e:	429c      	cmp	r4, r3
 8008380:	d101      	bne.n	8008386 <__swsetup_r+0x46>
 8008382:	68ac      	ldr	r4, [r5, #8]
 8008384:	e7eb      	b.n	800835e <__swsetup_r+0x1e>
 8008386:	4b24      	ldr	r3, [pc, #144]	; (8008418 <__swsetup_r+0xd8>)
 8008388:	429c      	cmp	r4, r3
 800838a:	bf08      	it	eq
 800838c:	68ec      	ldreq	r4, [r5, #12]
 800838e:	e7e6      	b.n	800835e <__swsetup_r+0x1e>
 8008390:	0758      	lsls	r0, r3, #29
 8008392:	d512      	bpl.n	80083ba <__swsetup_r+0x7a>
 8008394:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008396:	b141      	cbz	r1, 80083aa <__swsetup_r+0x6a>
 8008398:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800839c:	4299      	cmp	r1, r3
 800839e:	d002      	beq.n	80083a6 <__swsetup_r+0x66>
 80083a0:	4630      	mov	r0, r6
 80083a2:	f7ff f909 	bl	80075b8 <_free_r>
 80083a6:	2300      	movs	r3, #0
 80083a8:	6363      	str	r3, [r4, #52]	; 0x34
 80083aa:	89a3      	ldrh	r3, [r4, #12]
 80083ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80083b0:	81a3      	strh	r3, [r4, #12]
 80083b2:	2300      	movs	r3, #0
 80083b4:	6063      	str	r3, [r4, #4]
 80083b6:	6923      	ldr	r3, [r4, #16]
 80083b8:	6023      	str	r3, [r4, #0]
 80083ba:	89a3      	ldrh	r3, [r4, #12]
 80083bc:	f043 0308 	orr.w	r3, r3, #8
 80083c0:	81a3      	strh	r3, [r4, #12]
 80083c2:	6923      	ldr	r3, [r4, #16]
 80083c4:	b94b      	cbnz	r3, 80083da <__swsetup_r+0x9a>
 80083c6:	89a3      	ldrh	r3, [r4, #12]
 80083c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80083cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083d0:	d003      	beq.n	80083da <__swsetup_r+0x9a>
 80083d2:	4621      	mov	r1, r4
 80083d4:	4630      	mov	r0, r6
 80083d6:	f7ff f889 	bl	80074ec <__smakebuf_r>
 80083da:	89a0      	ldrh	r0, [r4, #12]
 80083dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80083e0:	f010 0301 	ands.w	r3, r0, #1
 80083e4:	d00a      	beq.n	80083fc <__swsetup_r+0xbc>
 80083e6:	2300      	movs	r3, #0
 80083e8:	60a3      	str	r3, [r4, #8]
 80083ea:	6963      	ldr	r3, [r4, #20]
 80083ec:	425b      	negs	r3, r3
 80083ee:	61a3      	str	r3, [r4, #24]
 80083f0:	6923      	ldr	r3, [r4, #16]
 80083f2:	b943      	cbnz	r3, 8008406 <__swsetup_r+0xc6>
 80083f4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80083f8:	d1ba      	bne.n	8008370 <__swsetup_r+0x30>
 80083fa:	bd70      	pop	{r4, r5, r6, pc}
 80083fc:	0781      	lsls	r1, r0, #30
 80083fe:	bf58      	it	pl
 8008400:	6963      	ldrpl	r3, [r4, #20]
 8008402:	60a3      	str	r3, [r4, #8]
 8008404:	e7f4      	b.n	80083f0 <__swsetup_r+0xb0>
 8008406:	2000      	movs	r0, #0
 8008408:	e7f7      	b.n	80083fa <__swsetup_r+0xba>
 800840a:	bf00      	nop
 800840c:	20000014 	.word	0x20000014
 8008410:	0800fdb4 	.word	0x0800fdb4
 8008414:	0800fdd4 	.word	0x0800fdd4
 8008418:	0800fd94 	.word	0x0800fd94

0800841c <_close_r>:
 800841c:	b538      	push	{r3, r4, r5, lr}
 800841e:	4d06      	ldr	r5, [pc, #24]	; (8008438 <_close_r+0x1c>)
 8008420:	2300      	movs	r3, #0
 8008422:	4604      	mov	r4, r0
 8008424:	4608      	mov	r0, r1
 8008426:	602b      	str	r3, [r5, #0]
 8008428:	f7f9 fe4d 	bl	80020c6 <_close>
 800842c:	1c43      	adds	r3, r0, #1
 800842e:	d102      	bne.n	8008436 <_close_r+0x1a>
 8008430:	682b      	ldr	r3, [r5, #0]
 8008432:	b103      	cbz	r3, 8008436 <_close_r+0x1a>
 8008434:	6023      	str	r3, [r4, #0]
 8008436:	bd38      	pop	{r3, r4, r5, pc}
 8008438:	20000388 	.word	0x20000388

0800843c <quorem>:
 800843c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008440:	6903      	ldr	r3, [r0, #16]
 8008442:	690c      	ldr	r4, [r1, #16]
 8008444:	42a3      	cmp	r3, r4
 8008446:	4607      	mov	r7, r0
 8008448:	f2c0 8081 	blt.w	800854e <quorem+0x112>
 800844c:	3c01      	subs	r4, #1
 800844e:	f101 0814 	add.w	r8, r1, #20
 8008452:	f100 0514 	add.w	r5, r0, #20
 8008456:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800845a:	9301      	str	r3, [sp, #4]
 800845c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008460:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008464:	3301      	adds	r3, #1
 8008466:	429a      	cmp	r2, r3
 8008468:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800846c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008470:	fbb2 f6f3 	udiv	r6, r2, r3
 8008474:	d331      	bcc.n	80084da <quorem+0x9e>
 8008476:	f04f 0e00 	mov.w	lr, #0
 800847a:	4640      	mov	r0, r8
 800847c:	46ac      	mov	ip, r5
 800847e:	46f2      	mov	sl, lr
 8008480:	f850 2b04 	ldr.w	r2, [r0], #4
 8008484:	b293      	uxth	r3, r2
 8008486:	fb06 e303 	mla	r3, r6, r3, lr
 800848a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800848e:	b29b      	uxth	r3, r3
 8008490:	ebaa 0303 	sub.w	r3, sl, r3
 8008494:	f8dc a000 	ldr.w	sl, [ip]
 8008498:	0c12      	lsrs	r2, r2, #16
 800849a:	fa13 f38a 	uxtah	r3, r3, sl
 800849e:	fb06 e202 	mla	r2, r6, r2, lr
 80084a2:	9300      	str	r3, [sp, #0]
 80084a4:	9b00      	ldr	r3, [sp, #0]
 80084a6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80084aa:	b292      	uxth	r2, r2
 80084ac:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80084b0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80084b4:	f8bd 3000 	ldrh.w	r3, [sp]
 80084b8:	4581      	cmp	r9, r0
 80084ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80084be:	f84c 3b04 	str.w	r3, [ip], #4
 80084c2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80084c6:	d2db      	bcs.n	8008480 <quorem+0x44>
 80084c8:	f855 300b 	ldr.w	r3, [r5, fp]
 80084cc:	b92b      	cbnz	r3, 80084da <quorem+0x9e>
 80084ce:	9b01      	ldr	r3, [sp, #4]
 80084d0:	3b04      	subs	r3, #4
 80084d2:	429d      	cmp	r5, r3
 80084d4:	461a      	mov	r2, r3
 80084d6:	d32e      	bcc.n	8008536 <quorem+0xfa>
 80084d8:	613c      	str	r4, [r7, #16]
 80084da:	4638      	mov	r0, r7
 80084dc:	f001 f8f0 	bl	80096c0 <__mcmp>
 80084e0:	2800      	cmp	r0, #0
 80084e2:	db24      	blt.n	800852e <quorem+0xf2>
 80084e4:	3601      	adds	r6, #1
 80084e6:	4628      	mov	r0, r5
 80084e8:	f04f 0c00 	mov.w	ip, #0
 80084ec:	f858 2b04 	ldr.w	r2, [r8], #4
 80084f0:	f8d0 e000 	ldr.w	lr, [r0]
 80084f4:	b293      	uxth	r3, r2
 80084f6:	ebac 0303 	sub.w	r3, ip, r3
 80084fa:	0c12      	lsrs	r2, r2, #16
 80084fc:	fa13 f38e 	uxtah	r3, r3, lr
 8008500:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008504:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008508:	b29b      	uxth	r3, r3
 800850a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800850e:	45c1      	cmp	r9, r8
 8008510:	f840 3b04 	str.w	r3, [r0], #4
 8008514:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008518:	d2e8      	bcs.n	80084ec <quorem+0xb0>
 800851a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800851e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008522:	b922      	cbnz	r2, 800852e <quorem+0xf2>
 8008524:	3b04      	subs	r3, #4
 8008526:	429d      	cmp	r5, r3
 8008528:	461a      	mov	r2, r3
 800852a:	d30a      	bcc.n	8008542 <quorem+0x106>
 800852c:	613c      	str	r4, [r7, #16]
 800852e:	4630      	mov	r0, r6
 8008530:	b003      	add	sp, #12
 8008532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008536:	6812      	ldr	r2, [r2, #0]
 8008538:	3b04      	subs	r3, #4
 800853a:	2a00      	cmp	r2, #0
 800853c:	d1cc      	bne.n	80084d8 <quorem+0x9c>
 800853e:	3c01      	subs	r4, #1
 8008540:	e7c7      	b.n	80084d2 <quorem+0x96>
 8008542:	6812      	ldr	r2, [r2, #0]
 8008544:	3b04      	subs	r3, #4
 8008546:	2a00      	cmp	r2, #0
 8008548:	d1f0      	bne.n	800852c <quorem+0xf0>
 800854a:	3c01      	subs	r4, #1
 800854c:	e7eb      	b.n	8008526 <quorem+0xea>
 800854e:	2000      	movs	r0, #0
 8008550:	e7ee      	b.n	8008530 <quorem+0xf4>
 8008552:	0000      	movs	r0, r0
 8008554:	0000      	movs	r0, r0
	...

08008558 <_dtoa_r>:
 8008558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800855c:	ed2d 8b04 	vpush	{d8-d9}
 8008560:	ec57 6b10 	vmov	r6, r7, d0
 8008564:	b093      	sub	sp, #76	; 0x4c
 8008566:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008568:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800856c:	9106      	str	r1, [sp, #24]
 800856e:	ee10 aa10 	vmov	sl, s0
 8008572:	4604      	mov	r4, r0
 8008574:	9209      	str	r2, [sp, #36]	; 0x24
 8008576:	930c      	str	r3, [sp, #48]	; 0x30
 8008578:	46bb      	mov	fp, r7
 800857a:	b975      	cbnz	r5, 800859a <_dtoa_r+0x42>
 800857c:	2010      	movs	r0, #16
 800857e:	f7fe fff5 	bl	800756c <malloc>
 8008582:	4602      	mov	r2, r0
 8008584:	6260      	str	r0, [r4, #36]	; 0x24
 8008586:	b920      	cbnz	r0, 8008592 <_dtoa_r+0x3a>
 8008588:	4ba7      	ldr	r3, [pc, #668]	; (8008828 <_dtoa_r+0x2d0>)
 800858a:	21ea      	movs	r1, #234	; 0xea
 800858c:	48a7      	ldr	r0, [pc, #668]	; (800882c <_dtoa_r+0x2d4>)
 800858e:	f002 f91d 	bl	800a7cc <__assert_func>
 8008592:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008596:	6005      	str	r5, [r0, #0]
 8008598:	60c5      	str	r5, [r0, #12]
 800859a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800859c:	6819      	ldr	r1, [r3, #0]
 800859e:	b151      	cbz	r1, 80085b6 <_dtoa_r+0x5e>
 80085a0:	685a      	ldr	r2, [r3, #4]
 80085a2:	604a      	str	r2, [r1, #4]
 80085a4:	2301      	movs	r3, #1
 80085a6:	4093      	lsls	r3, r2
 80085a8:	608b      	str	r3, [r1, #8]
 80085aa:	4620      	mov	r0, r4
 80085ac:	f000 fe46 	bl	800923c <_Bfree>
 80085b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80085b2:	2200      	movs	r2, #0
 80085b4:	601a      	str	r2, [r3, #0]
 80085b6:	1e3b      	subs	r3, r7, #0
 80085b8:	bfaa      	itet	ge
 80085ba:	2300      	movge	r3, #0
 80085bc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80085c0:	f8c8 3000 	strge.w	r3, [r8]
 80085c4:	4b9a      	ldr	r3, [pc, #616]	; (8008830 <_dtoa_r+0x2d8>)
 80085c6:	bfbc      	itt	lt
 80085c8:	2201      	movlt	r2, #1
 80085ca:	f8c8 2000 	strlt.w	r2, [r8]
 80085ce:	ea33 030b 	bics.w	r3, r3, fp
 80085d2:	d11b      	bne.n	800860c <_dtoa_r+0xb4>
 80085d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80085d6:	f242 730f 	movw	r3, #9999	; 0x270f
 80085da:	6013      	str	r3, [r2, #0]
 80085dc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80085e0:	4333      	orrs	r3, r6
 80085e2:	f000 8592 	beq.w	800910a <_dtoa_r+0xbb2>
 80085e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80085e8:	b963      	cbnz	r3, 8008604 <_dtoa_r+0xac>
 80085ea:	4b92      	ldr	r3, [pc, #584]	; (8008834 <_dtoa_r+0x2dc>)
 80085ec:	e022      	b.n	8008634 <_dtoa_r+0xdc>
 80085ee:	4b92      	ldr	r3, [pc, #584]	; (8008838 <_dtoa_r+0x2e0>)
 80085f0:	9301      	str	r3, [sp, #4]
 80085f2:	3308      	adds	r3, #8
 80085f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80085f6:	6013      	str	r3, [r2, #0]
 80085f8:	9801      	ldr	r0, [sp, #4]
 80085fa:	b013      	add	sp, #76	; 0x4c
 80085fc:	ecbd 8b04 	vpop	{d8-d9}
 8008600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008604:	4b8b      	ldr	r3, [pc, #556]	; (8008834 <_dtoa_r+0x2dc>)
 8008606:	9301      	str	r3, [sp, #4]
 8008608:	3303      	adds	r3, #3
 800860a:	e7f3      	b.n	80085f4 <_dtoa_r+0x9c>
 800860c:	2200      	movs	r2, #0
 800860e:	2300      	movs	r3, #0
 8008610:	4650      	mov	r0, sl
 8008612:	4659      	mov	r1, fp
 8008614:	f7f8 fa58 	bl	8000ac8 <__aeabi_dcmpeq>
 8008618:	ec4b ab19 	vmov	d9, sl, fp
 800861c:	4680      	mov	r8, r0
 800861e:	b158      	cbz	r0, 8008638 <_dtoa_r+0xe0>
 8008620:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008622:	2301      	movs	r3, #1
 8008624:	6013      	str	r3, [r2, #0]
 8008626:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008628:	2b00      	cmp	r3, #0
 800862a:	f000 856b 	beq.w	8009104 <_dtoa_r+0xbac>
 800862e:	4883      	ldr	r0, [pc, #524]	; (800883c <_dtoa_r+0x2e4>)
 8008630:	6018      	str	r0, [r3, #0]
 8008632:	1e43      	subs	r3, r0, #1
 8008634:	9301      	str	r3, [sp, #4]
 8008636:	e7df      	b.n	80085f8 <_dtoa_r+0xa0>
 8008638:	ec4b ab10 	vmov	d0, sl, fp
 800863c:	aa10      	add	r2, sp, #64	; 0x40
 800863e:	a911      	add	r1, sp, #68	; 0x44
 8008640:	4620      	mov	r0, r4
 8008642:	f001 f8e3 	bl	800980c <__d2b>
 8008646:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800864a:	ee08 0a10 	vmov	s16, r0
 800864e:	2d00      	cmp	r5, #0
 8008650:	f000 8084 	beq.w	800875c <_dtoa_r+0x204>
 8008654:	ee19 3a90 	vmov	r3, s19
 8008658:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800865c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008660:	4656      	mov	r6, sl
 8008662:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008666:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800866a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800866e:	4b74      	ldr	r3, [pc, #464]	; (8008840 <_dtoa_r+0x2e8>)
 8008670:	2200      	movs	r2, #0
 8008672:	4630      	mov	r0, r6
 8008674:	4639      	mov	r1, r7
 8008676:	f7f7 fe07 	bl	8000288 <__aeabi_dsub>
 800867a:	a365      	add	r3, pc, #404	; (adr r3, 8008810 <_dtoa_r+0x2b8>)
 800867c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008680:	f7f7 ffba 	bl	80005f8 <__aeabi_dmul>
 8008684:	a364      	add	r3, pc, #400	; (adr r3, 8008818 <_dtoa_r+0x2c0>)
 8008686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800868a:	f7f7 fdff 	bl	800028c <__adddf3>
 800868e:	4606      	mov	r6, r0
 8008690:	4628      	mov	r0, r5
 8008692:	460f      	mov	r7, r1
 8008694:	f7f7 ff46 	bl	8000524 <__aeabi_i2d>
 8008698:	a361      	add	r3, pc, #388	; (adr r3, 8008820 <_dtoa_r+0x2c8>)
 800869a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800869e:	f7f7 ffab 	bl	80005f8 <__aeabi_dmul>
 80086a2:	4602      	mov	r2, r0
 80086a4:	460b      	mov	r3, r1
 80086a6:	4630      	mov	r0, r6
 80086a8:	4639      	mov	r1, r7
 80086aa:	f7f7 fdef 	bl	800028c <__adddf3>
 80086ae:	4606      	mov	r6, r0
 80086b0:	460f      	mov	r7, r1
 80086b2:	f7f8 fa51 	bl	8000b58 <__aeabi_d2iz>
 80086b6:	2200      	movs	r2, #0
 80086b8:	9000      	str	r0, [sp, #0]
 80086ba:	2300      	movs	r3, #0
 80086bc:	4630      	mov	r0, r6
 80086be:	4639      	mov	r1, r7
 80086c0:	f7f8 fa0c 	bl	8000adc <__aeabi_dcmplt>
 80086c4:	b150      	cbz	r0, 80086dc <_dtoa_r+0x184>
 80086c6:	9800      	ldr	r0, [sp, #0]
 80086c8:	f7f7 ff2c 	bl	8000524 <__aeabi_i2d>
 80086cc:	4632      	mov	r2, r6
 80086ce:	463b      	mov	r3, r7
 80086d0:	f7f8 f9fa 	bl	8000ac8 <__aeabi_dcmpeq>
 80086d4:	b910      	cbnz	r0, 80086dc <_dtoa_r+0x184>
 80086d6:	9b00      	ldr	r3, [sp, #0]
 80086d8:	3b01      	subs	r3, #1
 80086da:	9300      	str	r3, [sp, #0]
 80086dc:	9b00      	ldr	r3, [sp, #0]
 80086de:	2b16      	cmp	r3, #22
 80086e0:	d85a      	bhi.n	8008798 <_dtoa_r+0x240>
 80086e2:	9a00      	ldr	r2, [sp, #0]
 80086e4:	4b57      	ldr	r3, [pc, #348]	; (8008844 <_dtoa_r+0x2ec>)
 80086e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80086ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ee:	ec51 0b19 	vmov	r0, r1, d9
 80086f2:	f7f8 f9f3 	bl	8000adc <__aeabi_dcmplt>
 80086f6:	2800      	cmp	r0, #0
 80086f8:	d050      	beq.n	800879c <_dtoa_r+0x244>
 80086fa:	9b00      	ldr	r3, [sp, #0]
 80086fc:	3b01      	subs	r3, #1
 80086fe:	9300      	str	r3, [sp, #0]
 8008700:	2300      	movs	r3, #0
 8008702:	930b      	str	r3, [sp, #44]	; 0x2c
 8008704:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008706:	1b5d      	subs	r5, r3, r5
 8008708:	1e6b      	subs	r3, r5, #1
 800870a:	9305      	str	r3, [sp, #20]
 800870c:	bf45      	ittet	mi
 800870e:	f1c5 0301 	rsbmi	r3, r5, #1
 8008712:	9304      	strmi	r3, [sp, #16]
 8008714:	2300      	movpl	r3, #0
 8008716:	2300      	movmi	r3, #0
 8008718:	bf4c      	ite	mi
 800871a:	9305      	strmi	r3, [sp, #20]
 800871c:	9304      	strpl	r3, [sp, #16]
 800871e:	9b00      	ldr	r3, [sp, #0]
 8008720:	2b00      	cmp	r3, #0
 8008722:	db3d      	blt.n	80087a0 <_dtoa_r+0x248>
 8008724:	9b05      	ldr	r3, [sp, #20]
 8008726:	9a00      	ldr	r2, [sp, #0]
 8008728:	920a      	str	r2, [sp, #40]	; 0x28
 800872a:	4413      	add	r3, r2
 800872c:	9305      	str	r3, [sp, #20]
 800872e:	2300      	movs	r3, #0
 8008730:	9307      	str	r3, [sp, #28]
 8008732:	9b06      	ldr	r3, [sp, #24]
 8008734:	2b09      	cmp	r3, #9
 8008736:	f200 8089 	bhi.w	800884c <_dtoa_r+0x2f4>
 800873a:	2b05      	cmp	r3, #5
 800873c:	bfc4      	itt	gt
 800873e:	3b04      	subgt	r3, #4
 8008740:	9306      	strgt	r3, [sp, #24]
 8008742:	9b06      	ldr	r3, [sp, #24]
 8008744:	f1a3 0302 	sub.w	r3, r3, #2
 8008748:	bfcc      	ite	gt
 800874a:	2500      	movgt	r5, #0
 800874c:	2501      	movle	r5, #1
 800874e:	2b03      	cmp	r3, #3
 8008750:	f200 8087 	bhi.w	8008862 <_dtoa_r+0x30a>
 8008754:	e8df f003 	tbb	[pc, r3]
 8008758:	59383a2d 	.word	0x59383a2d
 800875c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008760:	441d      	add	r5, r3
 8008762:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008766:	2b20      	cmp	r3, #32
 8008768:	bfc1      	itttt	gt
 800876a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800876e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008772:	fa0b f303 	lslgt.w	r3, fp, r3
 8008776:	fa26 f000 	lsrgt.w	r0, r6, r0
 800877a:	bfda      	itte	le
 800877c:	f1c3 0320 	rsble	r3, r3, #32
 8008780:	fa06 f003 	lslle.w	r0, r6, r3
 8008784:	4318      	orrgt	r0, r3
 8008786:	f7f7 febd 	bl	8000504 <__aeabi_ui2d>
 800878a:	2301      	movs	r3, #1
 800878c:	4606      	mov	r6, r0
 800878e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008792:	3d01      	subs	r5, #1
 8008794:	930e      	str	r3, [sp, #56]	; 0x38
 8008796:	e76a      	b.n	800866e <_dtoa_r+0x116>
 8008798:	2301      	movs	r3, #1
 800879a:	e7b2      	b.n	8008702 <_dtoa_r+0x1aa>
 800879c:	900b      	str	r0, [sp, #44]	; 0x2c
 800879e:	e7b1      	b.n	8008704 <_dtoa_r+0x1ac>
 80087a0:	9b04      	ldr	r3, [sp, #16]
 80087a2:	9a00      	ldr	r2, [sp, #0]
 80087a4:	1a9b      	subs	r3, r3, r2
 80087a6:	9304      	str	r3, [sp, #16]
 80087a8:	4253      	negs	r3, r2
 80087aa:	9307      	str	r3, [sp, #28]
 80087ac:	2300      	movs	r3, #0
 80087ae:	930a      	str	r3, [sp, #40]	; 0x28
 80087b0:	e7bf      	b.n	8008732 <_dtoa_r+0x1da>
 80087b2:	2300      	movs	r3, #0
 80087b4:	9308      	str	r3, [sp, #32]
 80087b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	dc55      	bgt.n	8008868 <_dtoa_r+0x310>
 80087bc:	2301      	movs	r3, #1
 80087be:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80087c2:	461a      	mov	r2, r3
 80087c4:	9209      	str	r2, [sp, #36]	; 0x24
 80087c6:	e00c      	b.n	80087e2 <_dtoa_r+0x28a>
 80087c8:	2301      	movs	r3, #1
 80087ca:	e7f3      	b.n	80087b4 <_dtoa_r+0x25c>
 80087cc:	2300      	movs	r3, #0
 80087ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80087d0:	9308      	str	r3, [sp, #32]
 80087d2:	9b00      	ldr	r3, [sp, #0]
 80087d4:	4413      	add	r3, r2
 80087d6:	9302      	str	r3, [sp, #8]
 80087d8:	3301      	adds	r3, #1
 80087da:	2b01      	cmp	r3, #1
 80087dc:	9303      	str	r3, [sp, #12]
 80087de:	bfb8      	it	lt
 80087e0:	2301      	movlt	r3, #1
 80087e2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80087e4:	2200      	movs	r2, #0
 80087e6:	6042      	str	r2, [r0, #4]
 80087e8:	2204      	movs	r2, #4
 80087ea:	f102 0614 	add.w	r6, r2, #20
 80087ee:	429e      	cmp	r6, r3
 80087f0:	6841      	ldr	r1, [r0, #4]
 80087f2:	d93d      	bls.n	8008870 <_dtoa_r+0x318>
 80087f4:	4620      	mov	r0, r4
 80087f6:	f000 fce1 	bl	80091bc <_Balloc>
 80087fa:	9001      	str	r0, [sp, #4]
 80087fc:	2800      	cmp	r0, #0
 80087fe:	d13b      	bne.n	8008878 <_dtoa_r+0x320>
 8008800:	4b11      	ldr	r3, [pc, #68]	; (8008848 <_dtoa_r+0x2f0>)
 8008802:	4602      	mov	r2, r0
 8008804:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008808:	e6c0      	b.n	800858c <_dtoa_r+0x34>
 800880a:	2301      	movs	r3, #1
 800880c:	e7df      	b.n	80087ce <_dtoa_r+0x276>
 800880e:	bf00      	nop
 8008810:	636f4361 	.word	0x636f4361
 8008814:	3fd287a7 	.word	0x3fd287a7
 8008818:	8b60c8b3 	.word	0x8b60c8b3
 800881c:	3fc68a28 	.word	0x3fc68a28
 8008820:	509f79fb 	.word	0x509f79fb
 8008824:	3fd34413 	.word	0x3fd34413
 8008828:	0800fe39 	.word	0x0800fe39
 800882c:	0800fe50 	.word	0x0800fe50
 8008830:	7ff00000 	.word	0x7ff00000
 8008834:	0800fe35 	.word	0x0800fe35
 8008838:	0800fe2c 	.word	0x0800fe2c
 800883c:	0800fe09 	.word	0x0800fe09
 8008840:	3ff80000 	.word	0x3ff80000
 8008844:	0800ff40 	.word	0x0800ff40
 8008848:	0800feab 	.word	0x0800feab
 800884c:	2501      	movs	r5, #1
 800884e:	2300      	movs	r3, #0
 8008850:	9306      	str	r3, [sp, #24]
 8008852:	9508      	str	r5, [sp, #32]
 8008854:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008858:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800885c:	2200      	movs	r2, #0
 800885e:	2312      	movs	r3, #18
 8008860:	e7b0      	b.n	80087c4 <_dtoa_r+0x26c>
 8008862:	2301      	movs	r3, #1
 8008864:	9308      	str	r3, [sp, #32]
 8008866:	e7f5      	b.n	8008854 <_dtoa_r+0x2fc>
 8008868:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800886a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800886e:	e7b8      	b.n	80087e2 <_dtoa_r+0x28a>
 8008870:	3101      	adds	r1, #1
 8008872:	6041      	str	r1, [r0, #4]
 8008874:	0052      	lsls	r2, r2, #1
 8008876:	e7b8      	b.n	80087ea <_dtoa_r+0x292>
 8008878:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800887a:	9a01      	ldr	r2, [sp, #4]
 800887c:	601a      	str	r2, [r3, #0]
 800887e:	9b03      	ldr	r3, [sp, #12]
 8008880:	2b0e      	cmp	r3, #14
 8008882:	f200 809d 	bhi.w	80089c0 <_dtoa_r+0x468>
 8008886:	2d00      	cmp	r5, #0
 8008888:	f000 809a 	beq.w	80089c0 <_dtoa_r+0x468>
 800888c:	9b00      	ldr	r3, [sp, #0]
 800888e:	2b00      	cmp	r3, #0
 8008890:	dd32      	ble.n	80088f8 <_dtoa_r+0x3a0>
 8008892:	4ab7      	ldr	r2, [pc, #732]	; (8008b70 <_dtoa_r+0x618>)
 8008894:	f003 030f 	and.w	r3, r3, #15
 8008898:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800889c:	e9d3 8900 	ldrd	r8, r9, [r3]
 80088a0:	9b00      	ldr	r3, [sp, #0]
 80088a2:	05d8      	lsls	r0, r3, #23
 80088a4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80088a8:	d516      	bpl.n	80088d8 <_dtoa_r+0x380>
 80088aa:	4bb2      	ldr	r3, [pc, #712]	; (8008b74 <_dtoa_r+0x61c>)
 80088ac:	ec51 0b19 	vmov	r0, r1, d9
 80088b0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80088b4:	f7f7 ffca 	bl	800084c <__aeabi_ddiv>
 80088b8:	f007 070f 	and.w	r7, r7, #15
 80088bc:	4682      	mov	sl, r0
 80088be:	468b      	mov	fp, r1
 80088c0:	2503      	movs	r5, #3
 80088c2:	4eac      	ldr	r6, [pc, #688]	; (8008b74 <_dtoa_r+0x61c>)
 80088c4:	b957      	cbnz	r7, 80088dc <_dtoa_r+0x384>
 80088c6:	4642      	mov	r2, r8
 80088c8:	464b      	mov	r3, r9
 80088ca:	4650      	mov	r0, sl
 80088cc:	4659      	mov	r1, fp
 80088ce:	f7f7 ffbd 	bl	800084c <__aeabi_ddiv>
 80088d2:	4682      	mov	sl, r0
 80088d4:	468b      	mov	fp, r1
 80088d6:	e028      	b.n	800892a <_dtoa_r+0x3d2>
 80088d8:	2502      	movs	r5, #2
 80088da:	e7f2      	b.n	80088c2 <_dtoa_r+0x36a>
 80088dc:	07f9      	lsls	r1, r7, #31
 80088de:	d508      	bpl.n	80088f2 <_dtoa_r+0x39a>
 80088e0:	4640      	mov	r0, r8
 80088e2:	4649      	mov	r1, r9
 80088e4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80088e8:	f7f7 fe86 	bl	80005f8 <__aeabi_dmul>
 80088ec:	3501      	adds	r5, #1
 80088ee:	4680      	mov	r8, r0
 80088f0:	4689      	mov	r9, r1
 80088f2:	107f      	asrs	r7, r7, #1
 80088f4:	3608      	adds	r6, #8
 80088f6:	e7e5      	b.n	80088c4 <_dtoa_r+0x36c>
 80088f8:	f000 809b 	beq.w	8008a32 <_dtoa_r+0x4da>
 80088fc:	9b00      	ldr	r3, [sp, #0]
 80088fe:	4f9d      	ldr	r7, [pc, #628]	; (8008b74 <_dtoa_r+0x61c>)
 8008900:	425e      	negs	r6, r3
 8008902:	4b9b      	ldr	r3, [pc, #620]	; (8008b70 <_dtoa_r+0x618>)
 8008904:	f006 020f 	and.w	r2, r6, #15
 8008908:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800890c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008910:	ec51 0b19 	vmov	r0, r1, d9
 8008914:	f7f7 fe70 	bl	80005f8 <__aeabi_dmul>
 8008918:	1136      	asrs	r6, r6, #4
 800891a:	4682      	mov	sl, r0
 800891c:	468b      	mov	fp, r1
 800891e:	2300      	movs	r3, #0
 8008920:	2502      	movs	r5, #2
 8008922:	2e00      	cmp	r6, #0
 8008924:	d17a      	bne.n	8008a1c <_dtoa_r+0x4c4>
 8008926:	2b00      	cmp	r3, #0
 8008928:	d1d3      	bne.n	80088d2 <_dtoa_r+0x37a>
 800892a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800892c:	2b00      	cmp	r3, #0
 800892e:	f000 8082 	beq.w	8008a36 <_dtoa_r+0x4de>
 8008932:	4b91      	ldr	r3, [pc, #580]	; (8008b78 <_dtoa_r+0x620>)
 8008934:	2200      	movs	r2, #0
 8008936:	4650      	mov	r0, sl
 8008938:	4659      	mov	r1, fp
 800893a:	f7f8 f8cf 	bl	8000adc <__aeabi_dcmplt>
 800893e:	2800      	cmp	r0, #0
 8008940:	d079      	beq.n	8008a36 <_dtoa_r+0x4de>
 8008942:	9b03      	ldr	r3, [sp, #12]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d076      	beq.n	8008a36 <_dtoa_r+0x4de>
 8008948:	9b02      	ldr	r3, [sp, #8]
 800894a:	2b00      	cmp	r3, #0
 800894c:	dd36      	ble.n	80089bc <_dtoa_r+0x464>
 800894e:	9b00      	ldr	r3, [sp, #0]
 8008950:	4650      	mov	r0, sl
 8008952:	4659      	mov	r1, fp
 8008954:	1e5f      	subs	r7, r3, #1
 8008956:	2200      	movs	r2, #0
 8008958:	4b88      	ldr	r3, [pc, #544]	; (8008b7c <_dtoa_r+0x624>)
 800895a:	f7f7 fe4d 	bl	80005f8 <__aeabi_dmul>
 800895e:	9e02      	ldr	r6, [sp, #8]
 8008960:	4682      	mov	sl, r0
 8008962:	468b      	mov	fp, r1
 8008964:	3501      	adds	r5, #1
 8008966:	4628      	mov	r0, r5
 8008968:	f7f7 fddc 	bl	8000524 <__aeabi_i2d>
 800896c:	4652      	mov	r2, sl
 800896e:	465b      	mov	r3, fp
 8008970:	f7f7 fe42 	bl	80005f8 <__aeabi_dmul>
 8008974:	4b82      	ldr	r3, [pc, #520]	; (8008b80 <_dtoa_r+0x628>)
 8008976:	2200      	movs	r2, #0
 8008978:	f7f7 fc88 	bl	800028c <__adddf3>
 800897c:	46d0      	mov	r8, sl
 800897e:	46d9      	mov	r9, fp
 8008980:	4682      	mov	sl, r0
 8008982:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008986:	2e00      	cmp	r6, #0
 8008988:	d158      	bne.n	8008a3c <_dtoa_r+0x4e4>
 800898a:	4b7e      	ldr	r3, [pc, #504]	; (8008b84 <_dtoa_r+0x62c>)
 800898c:	2200      	movs	r2, #0
 800898e:	4640      	mov	r0, r8
 8008990:	4649      	mov	r1, r9
 8008992:	f7f7 fc79 	bl	8000288 <__aeabi_dsub>
 8008996:	4652      	mov	r2, sl
 8008998:	465b      	mov	r3, fp
 800899a:	4680      	mov	r8, r0
 800899c:	4689      	mov	r9, r1
 800899e:	f7f8 f8bb 	bl	8000b18 <__aeabi_dcmpgt>
 80089a2:	2800      	cmp	r0, #0
 80089a4:	f040 8295 	bne.w	8008ed2 <_dtoa_r+0x97a>
 80089a8:	4652      	mov	r2, sl
 80089aa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80089ae:	4640      	mov	r0, r8
 80089b0:	4649      	mov	r1, r9
 80089b2:	f7f8 f893 	bl	8000adc <__aeabi_dcmplt>
 80089b6:	2800      	cmp	r0, #0
 80089b8:	f040 8289 	bne.w	8008ece <_dtoa_r+0x976>
 80089bc:	ec5b ab19 	vmov	sl, fp, d9
 80089c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	f2c0 8148 	blt.w	8008c58 <_dtoa_r+0x700>
 80089c8:	9a00      	ldr	r2, [sp, #0]
 80089ca:	2a0e      	cmp	r2, #14
 80089cc:	f300 8144 	bgt.w	8008c58 <_dtoa_r+0x700>
 80089d0:	4b67      	ldr	r3, [pc, #412]	; (8008b70 <_dtoa_r+0x618>)
 80089d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80089d6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80089da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089dc:	2b00      	cmp	r3, #0
 80089de:	f280 80d5 	bge.w	8008b8c <_dtoa_r+0x634>
 80089e2:	9b03      	ldr	r3, [sp, #12]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	f300 80d1 	bgt.w	8008b8c <_dtoa_r+0x634>
 80089ea:	f040 826f 	bne.w	8008ecc <_dtoa_r+0x974>
 80089ee:	4b65      	ldr	r3, [pc, #404]	; (8008b84 <_dtoa_r+0x62c>)
 80089f0:	2200      	movs	r2, #0
 80089f2:	4640      	mov	r0, r8
 80089f4:	4649      	mov	r1, r9
 80089f6:	f7f7 fdff 	bl	80005f8 <__aeabi_dmul>
 80089fa:	4652      	mov	r2, sl
 80089fc:	465b      	mov	r3, fp
 80089fe:	f7f8 f881 	bl	8000b04 <__aeabi_dcmpge>
 8008a02:	9e03      	ldr	r6, [sp, #12]
 8008a04:	4637      	mov	r7, r6
 8008a06:	2800      	cmp	r0, #0
 8008a08:	f040 8245 	bne.w	8008e96 <_dtoa_r+0x93e>
 8008a0c:	9d01      	ldr	r5, [sp, #4]
 8008a0e:	2331      	movs	r3, #49	; 0x31
 8008a10:	f805 3b01 	strb.w	r3, [r5], #1
 8008a14:	9b00      	ldr	r3, [sp, #0]
 8008a16:	3301      	adds	r3, #1
 8008a18:	9300      	str	r3, [sp, #0]
 8008a1a:	e240      	b.n	8008e9e <_dtoa_r+0x946>
 8008a1c:	07f2      	lsls	r2, r6, #31
 8008a1e:	d505      	bpl.n	8008a2c <_dtoa_r+0x4d4>
 8008a20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a24:	f7f7 fde8 	bl	80005f8 <__aeabi_dmul>
 8008a28:	3501      	adds	r5, #1
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	1076      	asrs	r6, r6, #1
 8008a2e:	3708      	adds	r7, #8
 8008a30:	e777      	b.n	8008922 <_dtoa_r+0x3ca>
 8008a32:	2502      	movs	r5, #2
 8008a34:	e779      	b.n	800892a <_dtoa_r+0x3d2>
 8008a36:	9f00      	ldr	r7, [sp, #0]
 8008a38:	9e03      	ldr	r6, [sp, #12]
 8008a3a:	e794      	b.n	8008966 <_dtoa_r+0x40e>
 8008a3c:	9901      	ldr	r1, [sp, #4]
 8008a3e:	4b4c      	ldr	r3, [pc, #304]	; (8008b70 <_dtoa_r+0x618>)
 8008a40:	4431      	add	r1, r6
 8008a42:	910d      	str	r1, [sp, #52]	; 0x34
 8008a44:	9908      	ldr	r1, [sp, #32]
 8008a46:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008a4a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008a4e:	2900      	cmp	r1, #0
 8008a50:	d043      	beq.n	8008ada <_dtoa_r+0x582>
 8008a52:	494d      	ldr	r1, [pc, #308]	; (8008b88 <_dtoa_r+0x630>)
 8008a54:	2000      	movs	r0, #0
 8008a56:	f7f7 fef9 	bl	800084c <__aeabi_ddiv>
 8008a5a:	4652      	mov	r2, sl
 8008a5c:	465b      	mov	r3, fp
 8008a5e:	f7f7 fc13 	bl	8000288 <__aeabi_dsub>
 8008a62:	9d01      	ldr	r5, [sp, #4]
 8008a64:	4682      	mov	sl, r0
 8008a66:	468b      	mov	fp, r1
 8008a68:	4649      	mov	r1, r9
 8008a6a:	4640      	mov	r0, r8
 8008a6c:	f7f8 f874 	bl	8000b58 <__aeabi_d2iz>
 8008a70:	4606      	mov	r6, r0
 8008a72:	f7f7 fd57 	bl	8000524 <__aeabi_i2d>
 8008a76:	4602      	mov	r2, r0
 8008a78:	460b      	mov	r3, r1
 8008a7a:	4640      	mov	r0, r8
 8008a7c:	4649      	mov	r1, r9
 8008a7e:	f7f7 fc03 	bl	8000288 <__aeabi_dsub>
 8008a82:	3630      	adds	r6, #48	; 0x30
 8008a84:	f805 6b01 	strb.w	r6, [r5], #1
 8008a88:	4652      	mov	r2, sl
 8008a8a:	465b      	mov	r3, fp
 8008a8c:	4680      	mov	r8, r0
 8008a8e:	4689      	mov	r9, r1
 8008a90:	f7f8 f824 	bl	8000adc <__aeabi_dcmplt>
 8008a94:	2800      	cmp	r0, #0
 8008a96:	d163      	bne.n	8008b60 <_dtoa_r+0x608>
 8008a98:	4642      	mov	r2, r8
 8008a9a:	464b      	mov	r3, r9
 8008a9c:	4936      	ldr	r1, [pc, #216]	; (8008b78 <_dtoa_r+0x620>)
 8008a9e:	2000      	movs	r0, #0
 8008aa0:	f7f7 fbf2 	bl	8000288 <__aeabi_dsub>
 8008aa4:	4652      	mov	r2, sl
 8008aa6:	465b      	mov	r3, fp
 8008aa8:	f7f8 f818 	bl	8000adc <__aeabi_dcmplt>
 8008aac:	2800      	cmp	r0, #0
 8008aae:	f040 80b5 	bne.w	8008c1c <_dtoa_r+0x6c4>
 8008ab2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ab4:	429d      	cmp	r5, r3
 8008ab6:	d081      	beq.n	80089bc <_dtoa_r+0x464>
 8008ab8:	4b30      	ldr	r3, [pc, #192]	; (8008b7c <_dtoa_r+0x624>)
 8008aba:	2200      	movs	r2, #0
 8008abc:	4650      	mov	r0, sl
 8008abe:	4659      	mov	r1, fp
 8008ac0:	f7f7 fd9a 	bl	80005f8 <__aeabi_dmul>
 8008ac4:	4b2d      	ldr	r3, [pc, #180]	; (8008b7c <_dtoa_r+0x624>)
 8008ac6:	4682      	mov	sl, r0
 8008ac8:	468b      	mov	fp, r1
 8008aca:	4640      	mov	r0, r8
 8008acc:	4649      	mov	r1, r9
 8008ace:	2200      	movs	r2, #0
 8008ad0:	f7f7 fd92 	bl	80005f8 <__aeabi_dmul>
 8008ad4:	4680      	mov	r8, r0
 8008ad6:	4689      	mov	r9, r1
 8008ad8:	e7c6      	b.n	8008a68 <_dtoa_r+0x510>
 8008ada:	4650      	mov	r0, sl
 8008adc:	4659      	mov	r1, fp
 8008ade:	f7f7 fd8b 	bl	80005f8 <__aeabi_dmul>
 8008ae2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ae4:	9d01      	ldr	r5, [sp, #4]
 8008ae6:	930f      	str	r3, [sp, #60]	; 0x3c
 8008ae8:	4682      	mov	sl, r0
 8008aea:	468b      	mov	fp, r1
 8008aec:	4649      	mov	r1, r9
 8008aee:	4640      	mov	r0, r8
 8008af0:	f7f8 f832 	bl	8000b58 <__aeabi_d2iz>
 8008af4:	4606      	mov	r6, r0
 8008af6:	f7f7 fd15 	bl	8000524 <__aeabi_i2d>
 8008afa:	3630      	adds	r6, #48	; 0x30
 8008afc:	4602      	mov	r2, r0
 8008afe:	460b      	mov	r3, r1
 8008b00:	4640      	mov	r0, r8
 8008b02:	4649      	mov	r1, r9
 8008b04:	f7f7 fbc0 	bl	8000288 <__aeabi_dsub>
 8008b08:	f805 6b01 	strb.w	r6, [r5], #1
 8008b0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b0e:	429d      	cmp	r5, r3
 8008b10:	4680      	mov	r8, r0
 8008b12:	4689      	mov	r9, r1
 8008b14:	f04f 0200 	mov.w	r2, #0
 8008b18:	d124      	bne.n	8008b64 <_dtoa_r+0x60c>
 8008b1a:	4b1b      	ldr	r3, [pc, #108]	; (8008b88 <_dtoa_r+0x630>)
 8008b1c:	4650      	mov	r0, sl
 8008b1e:	4659      	mov	r1, fp
 8008b20:	f7f7 fbb4 	bl	800028c <__adddf3>
 8008b24:	4602      	mov	r2, r0
 8008b26:	460b      	mov	r3, r1
 8008b28:	4640      	mov	r0, r8
 8008b2a:	4649      	mov	r1, r9
 8008b2c:	f7f7 fff4 	bl	8000b18 <__aeabi_dcmpgt>
 8008b30:	2800      	cmp	r0, #0
 8008b32:	d173      	bne.n	8008c1c <_dtoa_r+0x6c4>
 8008b34:	4652      	mov	r2, sl
 8008b36:	465b      	mov	r3, fp
 8008b38:	4913      	ldr	r1, [pc, #76]	; (8008b88 <_dtoa_r+0x630>)
 8008b3a:	2000      	movs	r0, #0
 8008b3c:	f7f7 fba4 	bl	8000288 <__aeabi_dsub>
 8008b40:	4602      	mov	r2, r0
 8008b42:	460b      	mov	r3, r1
 8008b44:	4640      	mov	r0, r8
 8008b46:	4649      	mov	r1, r9
 8008b48:	f7f7 ffc8 	bl	8000adc <__aeabi_dcmplt>
 8008b4c:	2800      	cmp	r0, #0
 8008b4e:	f43f af35 	beq.w	80089bc <_dtoa_r+0x464>
 8008b52:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008b54:	1e6b      	subs	r3, r5, #1
 8008b56:	930f      	str	r3, [sp, #60]	; 0x3c
 8008b58:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008b5c:	2b30      	cmp	r3, #48	; 0x30
 8008b5e:	d0f8      	beq.n	8008b52 <_dtoa_r+0x5fa>
 8008b60:	9700      	str	r7, [sp, #0]
 8008b62:	e049      	b.n	8008bf8 <_dtoa_r+0x6a0>
 8008b64:	4b05      	ldr	r3, [pc, #20]	; (8008b7c <_dtoa_r+0x624>)
 8008b66:	f7f7 fd47 	bl	80005f8 <__aeabi_dmul>
 8008b6a:	4680      	mov	r8, r0
 8008b6c:	4689      	mov	r9, r1
 8008b6e:	e7bd      	b.n	8008aec <_dtoa_r+0x594>
 8008b70:	0800ff40 	.word	0x0800ff40
 8008b74:	0800ff18 	.word	0x0800ff18
 8008b78:	3ff00000 	.word	0x3ff00000
 8008b7c:	40240000 	.word	0x40240000
 8008b80:	401c0000 	.word	0x401c0000
 8008b84:	40140000 	.word	0x40140000
 8008b88:	3fe00000 	.word	0x3fe00000
 8008b8c:	9d01      	ldr	r5, [sp, #4]
 8008b8e:	4656      	mov	r6, sl
 8008b90:	465f      	mov	r7, fp
 8008b92:	4642      	mov	r2, r8
 8008b94:	464b      	mov	r3, r9
 8008b96:	4630      	mov	r0, r6
 8008b98:	4639      	mov	r1, r7
 8008b9a:	f7f7 fe57 	bl	800084c <__aeabi_ddiv>
 8008b9e:	f7f7 ffdb 	bl	8000b58 <__aeabi_d2iz>
 8008ba2:	4682      	mov	sl, r0
 8008ba4:	f7f7 fcbe 	bl	8000524 <__aeabi_i2d>
 8008ba8:	4642      	mov	r2, r8
 8008baa:	464b      	mov	r3, r9
 8008bac:	f7f7 fd24 	bl	80005f8 <__aeabi_dmul>
 8008bb0:	4602      	mov	r2, r0
 8008bb2:	460b      	mov	r3, r1
 8008bb4:	4630      	mov	r0, r6
 8008bb6:	4639      	mov	r1, r7
 8008bb8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008bbc:	f7f7 fb64 	bl	8000288 <__aeabi_dsub>
 8008bc0:	f805 6b01 	strb.w	r6, [r5], #1
 8008bc4:	9e01      	ldr	r6, [sp, #4]
 8008bc6:	9f03      	ldr	r7, [sp, #12]
 8008bc8:	1bae      	subs	r6, r5, r6
 8008bca:	42b7      	cmp	r7, r6
 8008bcc:	4602      	mov	r2, r0
 8008bce:	460b      	mov	r3, r1
 8008bd0:	d135      	bne.n	8008c3e <_dtoa_r+0x6e6>
 8008bd2:	f7f7 fb5b 	bl	800028c <__adddf3>
 8008bd6:	4642      	mov	r2, r8
 8008bd8:	464b      	mov	r3, r9
 8008bda:	4606      	mov	r6, r0
 8008bdc:	460f      	mov	r7, r1
 8008bde:	f7f7 ff9b 	bl	8000b18 <__aeabi_dcmpgt>
 8008be2:	b9d0      	cbnz	r0, 8008c1a <_dtoa_r+0x6c2>
 8008be4:	4642      	mov	r2, r8
 8008be6:	464b      	mov	r3, r9
 8008be8:	4630      	mov	r0, r6
 8008bea:	4639      	mov	r1, r7
 8008bec:	f7f7 ff6c 	bl	8000ac8 <__aeabi_dcmpeq>
 8008bf0:	b110      	cbz	r0, 8008bf8 <_dtoa_r+0x6a0>
 8008bf2:	f01a 0f01 	tst.w	sl, #1
 8008bf6:	d110      	bne.n	8008c1a <_dtoa_r+0x6c2>
 8008bf8:	4620      	mov	r0, r4
 8008bfa:	ee18 1a10 	vmov	r1, s16
 8008bfe:	f000 fb1d 	bl	800923c <_Bfree>
 8008c02:	2300      	movs	r3, #0
 8008c04:	9800      	ldr	r0, [sp, #0]
 8008c06:	702b      	strb	r3, [r5, #0]
 8008c08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c0a:	3001      	adds	r0, #1
 8008c0c:	6018      	str	r0, [r3, #0]
 8008c0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	f43f acf1 	beq.w	80085f8 <_dtoa_r+0xa0>
 8008c16:	601d      	str	r5, [r3, #0]
 8008c18:	e4ee      	b.n	80085f8 <_dtoa_r+0xa0>
 8008c1a:	9f00      	ldr	r7, [sp, #0]
 8008c1c:	462b      	mov	r3, r5
 8008c1e:	461d      	mov	r5, r3
 8008c20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008c24:	2a39      	cmp	r2, #57	; 0x39
 8008c26:	d106      	bne.n	8008c36 <_dtoa_r+0x6de>
 8008c28:	9a01      	ldr	r2, [sp, #4]
 8008c2a:	429a      	cmp	r2, r3
 8008c2c:	d1f7      	bne.n	8008c1e <_dtoa_r+0x6c6>
 8008c2e:	9901      	ldr	r1, [sp, #4]
 8008c30:	2230      	movs	r2, #48	; 0x30
 8008c32:	3701      	adds	r7, #1
 8008c34:	700a      	strb	r2, [r1, #0]
 8008c36:	781a      	ldrb	r2, [r3, #0]
 8008c38:	3201      	adds	r2, #1
 8008c3a:	701a      	strb	r2, [r3, #0]
 8008c3c:	e790      	b.n	8008b60 <_dtoa_r+0x608>
 8008c3e:	4ba6      	ldr	r3, [pc, #664]	; (8008ed8 <_dtoa_r+0x980>)
 8008c40:	2200      	movs	r2, #0
 8008c42:	f7f7 fcd9 	bl	80005f8 <__aeabi_dmul>
 8008c46:	2200      	movs	r2, #0
 8008c48:	2300      	movs	r3, #0
 8008c4a:	4606      	mov	r6, r0
 8008c4c:	460f      	mov	r7, r1
 8008c4e:	f7f7 ff3b 	bl	8000ac8 <__aeabi_dcmpeq>
 8008c52:	2800      	cmp	r0, #0
 8008c54:	d09d      	beq.n	8008b92 <_dtoa_r+0x63a>
 8008c56:	e7cf      	b.n	8008bf8 <_dtoa_r+0x6a0>
 8008c58:	9a08      	ldr	r2, [sp, #32]
 8008c5a:	2a00      	cmp	r2, #0
 8008c5c:	f000 80d7 	beq.w	8008e0e <_dtoa_r+0x8b6>
 8008c60:	9a06      	ldr	r2, [sp, #24]
 8008c62:	2a01      	cmp	r2, #1
 8008c64:	f300 80ba 	bgt.w	8008ddc <_dtoa_r+0x884>
 8008c68:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008c6a:	2a00      	cmp	r2, #0
 8008c6c:	f000 80b2 	beq.w	8008dd4 <_dtoa_r+0x87c>
 8008c70:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008c74:	9e07      	ldr	r6, [sp, #28]
 8008c76:	9d04      	ldr	r5, [sp, #16]
 8008c78:	9a04      	ldr	r2, [sp, #16]
 8008c7a:	441a      	add	r2, r3
 8008c7c:	9204      	str	r2, [sp, #16]
 8008c7e:	9a05      	ldr	r2, [sp, #20]
 8008c80:	2101      	movs	r1, #1
 8008c82:	441a      	add	r2, r3
 8008c84:	4620      	mov	r0, r4
 8008c86:	9205      	str	r2, [sp, #20]
 8008c88:	f000 fb90 	bl	80093ac <__i2b>
 8008c8c:	4607      	mov	r7, r0
 8008c8e:	2d00      	cmp	r5, #0
 8008c90:	dd0c      	ble.n	8008cac <_dtoa_r+0x754>
 8008c92:	9b05      	ldr	r3, [sp, #20]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	dd09      	ble.n	8008cac <_dtoa_r+0x754>
 8008c98:	42ab      	cmp	r3, r5
 8008c9a:	9a04      	ldr	r2, [sp, #16]
 8008c9c:	bfa8      	it	ge
 8008c9e:	462b      	movge	r3, r5
 8008ca0:	1ad2      	subs	r2, r2, r3
 8008ca2:	9204      	str	r2, [sp, #16]
 8008ca4:	9a05      	ldr	r2, [sp, #20]
 8008ca6:	1aed      	subs	r5, r5, r3
 8008ca8:	1ad3      	subs	r3, r2, r3
 8008caa:	9305      	str	r3, [sp, #20]
 8008cac:	9b07      	ldr	r3, [sp, #28]
 8008cae:	b31b      	cbz	r3, 8008cf8 <_dtoa_r+0x7a0>
 8008cb0:	9b08      	ldr	r3, [sp, #32]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	f000 80af 	beq.w	8008e16 <_dtoa_r+0x8be>
 8008cb8:	2e00      	cmp	r6, #0
 8008cba:	dd13      	ble.n	8008ce4 <_dtoa_r+0x78c>
 8008cbc:	4639      	mov	r1, r7
 8008cbe:	4632      	mov	r2, r6
 8008cc0:	4620      	mov	r0, r4
 8008cc2:	f000 fc33 	bl	800952c <__pow5mult>
 8008cc6:	ee18 2a10 	vmov	r2, s16
 8008cca:	4601      	mov	r1, r0
 8008ccc:	4607      	mov	r7, r0
 8008cce:	4620      	mov	r0, r4
 8008cd0:	f000 fb82 	bl	80093d8 <__multiply>
 8008cd4:	ee18 1a10 	vmov	r1, s16
 8008cd8:	4680      	mov	r8, r0
 8008cda:	4620      	mov	r0, r4
 8008cdc:	f000 faae 	bl	800923c <_Bfree>
 8008ce0:	ee08 8a10 	vmov	s16, r8
 8008ce4:	9b07      	ldr	r3, [sp, #28]
 8008ce6:	1b9a      	subs	r2, r3, r6
 8008ce8:	d006      	beq.n	8008cf8 <_dtoa_r+0x7a0>
 8008cea:	ee18 1a10 	vmov	r1, s16
 8008cee:	4620      	mov	r0, r4
 8008cf0:	f000 fc1c 	bl	800952c <__pow5mult>
 8008cf4:	ee08 0a10 	vmov	s16, r0
 8008cf8:	2101      	movs	r1, #1
 8008cfa:	4620      	mov	r0, r4
 8008cfc:	f000 fb56 	bl	80093ac <__i2b>
 8008d00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	4606      	mov	r6, r0
 8008d06:	f340 8088 	ble.w	8008e1a <_dtoa_r+0x8c2>
 8008d0a:	461a      	mov	r2, r3
 8008d0c:	4601      	mov	r1, r0
 8008d0e:	4620      	mov	r0, r4
 8008d10:	f000 fc0c 	bl	800952c <__pow5mult>
 8008d14:	9b06      	ldr	r3, [sp, #24]
 8008d16:	2b01      	cmp	r3, #1
 8008d18:	4606      	mov	r6, r0
 8008d1a:	f340 8081 	ble.w	8008e20 <_dtoa_r+0x8c8>
 8008d1e:	f04f 0800 	mov.w	r8, #0
 8008d22:	6933      	ldr	r3, [r6, #16]
 8008d24:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008d28:	6918      	ldr	r0, [r3, #16]
 8008d2a:	f000 faef 	bl	800930c <__hi0bits>
 8008d2e:	f1c0 0020 	rsb	r0, r0, #32
 8008d32:	9b05      	ldr	r3, [sp, #20]
 8008d34:	4418      	add	r0, r3
 8008d36:	f010 001f 	ands.w	r0, r0, #31
 8008d3a:	f000 8092 	beq.w	8008e62 <_dtoa_r+0x90a>
 8008d3e:	f1c0 0320 	rsb	r3, r0, #32
 8008d42:	2b04      	cmp	r3, #4
 8008d44:	f340 808a 	ble.w	8008e5c <_dtoa_r+0x904>
 8008d48:	f1c0 001c 	rsb	r0, r0, #28
 8008d4c:	9b04      	ldr	r3, [sp, #16]
 8008d4e:	4403      	add	r3, r0
 8008d50:	9304      	str	r3, [sp, #16]
 8008d52:	9b05      	ldr	r3, [sp, #20]
 8008d54:	4403      	add	r3, r0
 8008d56:	4405      	add	r5, r0
 8008d58:	9305      	str	r3, [sp, #20]
 8008d5a:	9b04      	ldr	r3, [sp, #16]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	dd07      	ble.n	8008d70 <_dtoa_r+0x818>
 8008d60:	ee18 1a10 	vmov	r1, s16
 8008d64:	461a      	mov	r2, r3
 8008d66:	4620      	mov	r0, r4
 8008d68:	f000 fc3a 	bl	80095e0 <__lshift>
 8008d6c:	ee08 0a10 	vmov	s16, r0
 8008d70:	9b05      	ldr	r3, [sp, #20]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	dd05      	ble.n	8008d82 <_dtoa_r+0x82a>
 8008d76:	4631      	mov	r1, r6
 8008d78:	461a      	mov	r2, r3
 8008d7a:	4620      	mov	r0, r4
 8008d7c:	f000 fc30 	bl	80095e0 <__lshift>
 8008d80:	4606      	mov	r6, r0
 8008d82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d06e      	beq.n	8008e66 <_dtoa_r+0x90e>
 8008d88:	ee18 0a10 	vmov	r0, s16
 8008d8c:	4631      	mov	r1, r6
 8008d8e:	f000 fc97 	bl	80096c0 <__mcmp>
 8008d92:	2800      	cmp	r0, #0
 8008d94:	da67      	bge.n	8008e66 <_dtoa_r+0x90e>
 8008d96:	9b00      	ldr	r3, [sp, #0]
 8008d98:	3b01      	subs	r3, #1
 8008d9a:	ee18 1a10 	vmov	r1, s16
 8008d9e:	9300      	str	r3, [sp, #0]
 8008da0:	220a      	movs	r2, #10
 8008da2:	2300      	movs	r3, #0
 8008da4:	4620      	mov	r0, r4
 8008da6:	f000 fa6b 	bl	8009280 <__multadd>
 8008daa:	9b08      	ldr	r3, [sp, #32]
 8008dac:	ee08 0a10 	vmov	s16, r0
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	f000 81b1 	beq.w	8009118 <_dtoa_r+0xbc0>
 8008db6:	2300      	movs	r3, #0
 8008db8:	4639      	mov	r1, r7
 8008dba:	220a      	movs	r2, #10
 8008dbc:	4620      	mov	r0, r4
 8008dbe:	f000 fa5f 	bl	8009280 <__multadd>
 8008dc2:	9b02      	ldr	r3, [sp, #8]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	4607      	mov	r7, r0
 8008dc8:	f300 808e 	bgt.w	8008ee8 <_dtoa_r+0x990>
 8008dcc:	9b06      	ldr	r3, [sp, #24]
 8008dce:	2b02      	cmp	r3, #2
 8008dd0:	dc51      	bgt.n	8008e76 <_dtoa_r+0x91e>
 8008dd2:	e089      	b.n	8008ee8 <_dtoa_r+0x990>
 8008dd4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008dd6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008dda:	e74b      	b.n	8008c74 <_dtoa_r+0x71c>
 8008ddc:	9b03      	ldr	r3, [sp, #12]
 8008dde:	1e5e      	subs	r6, r3, #1
 8008de0:	9b07      	ldr	r3, [sp, #28]
 8008de2:	42b3      	cmp	r3, r6
 8008de4:	bfbf      	itttt	lt
 8008de6:	9b07      	ldrlt	r3, [sp, #28]
 8008de8:	9607      	strlt	r6, [sp, #28]
 8008dea:	1af2      	sublt	r2, r6, r3
 8008dec:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008dee:	bfb6      	itet	lt
 8008df0:	189b      	addlt	r3, r3, r2
 8008df2:	1b9e      	subge	r6, r3, r6
 8008df4:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008df6:	9b03      	ldr	r3, [sp, #12]
 8008df8:	bfb8      	it	lt
 8008dfa:	2600      	movlt	r6, #0
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	bfb7      	itett	lt
 8008e00:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008e04:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008e08:	1a9d      	sublt	r5, r3, r2
 8008e0a:	2300      	movlt	r3, #0
 8008e0c:	e734      	b.n	8008c78 <_dtoa_r+0x720>
 8008e0e:	9e07      	ldr	r6, [sp, #28]
 8008e10:	9d04      	ldr	r5, [sp, #16]
 8008e12:	9f08      	ldr	r7, [sp, #32]
 8008e14:	e73b      	b.n	8008c8e <_dtoa_r+0x736>
 8008e16:	9a07      	ldr	r2, [sp, #28]
 8008e18:	e767      	b.n	8008cea <_dtoa_r+0x792>
 8008e1a:	9b06      	ldr	r3, [sp, #24]
 8008e1c:	2b01      	cmp	r3, #1
 8008e1e:	dc18      	bgt.n	8008e52 <_dtoa_r+0x8fa>
 8008e20:	f1ba 0f00 	cmp.w	sl, #0
 8008e24:	d115      	bne.n	8008e52 <_dtoa_r+0x8fa>
 8008e26:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008e2a:	b993      	cbnz	r3, 8008e52 <_dtoa_r+0x8fa>
 8008e2c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008e30:	0d1b      	lsrs	r3, r3, #20
 8008e32:	051b      	lsls	r3, r3, #20
 8008e34:	b183      	cbz	r3, 8008e58 <_dtoa_r+0x900>
 8008e36:	9b04      	ldr	r3, [sp, #16]
 8008e38:	3301      	adds	r3, #1
 8008e3a:	9304      	str	r3, [sp, #16]
 8008e3c:	9b05      	ldr	r3, [sp, #20]
 8008e3e:	3301      	adds	r3, #1
 8008e40:	9305      	str	r3, [sp, #20]
 8008e42:	f04f 0801 	mov.w	r8, #1
 8008e46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	f47f af6a 	bne.w	8008d22 <_dtoa_r+0x7ca>
 8008e4e:	2001      	movs	r0, #1
 8008e50:	e76f      	b.n	8008d32 <_dtoa_r+0x7da>
 8008e52:	f04f 0800 	mov.w	r8, #0
 8008e56:	e7f6      	b.n	8008e46 <_dtoa_r+0x8ee>
 8008e58:	4698      	mov	r8, r3
 8008e5a:	e7f4      	b.n	8008e46 <_dtoa_r+0x8ee>
 8008e5c:	f43f af7d 	beq.w	8008d5a <_dtoa_r+0x802>
 8008e60:	4618      	mov	r0, r3
 8008e62:	301c      	adds	r0, #28
 8008e64:	e772      	b.n	8008d4c <_dtoa_r+0x7f4>
 8008e66:	9b03      	ldr	r3, [sp, #12]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	dc37      	bgt.n	8008edc <_dtoa_r+0x984>
 8008e6c:	9b06      	ldr	r3, [sp, #24]
 8008e6e:	2b02      	cmp	r3, #2
 8008e70:	dd34      	ble.n	8008edc <_dtoa_r+0x984>
 8008e72:	9b03      	ldr	r3, [sp, #12]
 8008e74:	9302      	str	r3, [sp, #8]
 8008e76:	9b02      	ldr	r3, [sp, #8]
 8008e78:	b96b      	cbnz	r3, 8008e96 <_dtoa_r+0x93e>
 8008e7a:	4631      	mov	r1, r6
 8008e7c:	2205      	movs	r2, #5
 8008e7e:	4620      	mov	r0, r4
 8008e80:	f000 f9fe 	bl	8009280 <__multadd>
 8008e84:	4601      	mov	r1, r0
 8008e86:	4606      	mov	r6, r0
 8008e88:	ee18 0a10 	vmov	r0, s16
 8008e8c:	f000 fc18 	bl	80096c0 <__mcmp>
 8008e90:	2800      	cmp	r0, #0
 8008e92:	f73f adbb 	bgt.w	8008a0c <_dtoa_r+0x4b4>
 8008e96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e98:	9d01      	ldr	r5, [sp, #4]
 8008e9a:	43db      	mvns	r3, r3
 8008e9c:	9300      	str	r3, [sp, #0]
 8008e9e:	f04f 0800 	mov.w	r8, #0
 8008ea2:	4631      	mov	r1, r6
 8008ea4:	4620      	mov	r0, r4
 8008ea6:	f000 f9c9 	bl	800923c <_Bfree>
 8008eaa:	2f00      	cmp	r7, #0
 8008eac:	f43f aea4 	beq.w	8008bf8 <_dtoa_r+0x6a0>
 8008eb0:	f1b8 0f00 	cmp.w	r8, #0
 8008eb4:	d005      	beq.n	8008ec2 <_dtoa_r+0x96a>
 8008eb6:	45b8      	cmp	r8, r7
 8008eb8:	d003      	beq.n	8008ec2 <_dtoa_r+0x96a>
 8008eba:	4641      	mov	r1, r8
 8008ebc:	4620      	mov	r0, r4
 8008ebe:	f000 f9bd 	bl	800923c <_Bfree>
 8008ec2:	4639      	mov	r1, r7
 8008ec4:	4620      	mov	r0, r4
 8008ec6:	f000 f9b9 	bl	800923c <_Bfree>
 8008eca:	e695      	b.n	8008bf8 <_dtoa_r+0x6a0>
 8008ecc:	2600      	movs	r6, #0
 8008ece:	4637      	mov	r7, r6
 8008ed0:	e7e1      	b.n	8008e96 <_dtoa_r+0x93e>
 8008ed2:	9700      	str	r7, [sp, #0]
 8008ed4:	4637      	mov	r7, r6
 8008ed6:	e599      	b.n	8008a0c <_dtoa_r+0x4b4>
 8008ed8:	40240000 	.word	0x40240000
 8008edc:	9b08      	ldr	r3, [sp, #32]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	f000 80ca 	beq.w	8009078 <_dtoa_r+0xb20>
 8008ee4:	9b03      	ldr	r3, [sp, #12]
 8008ee6:	9302      	str	r3, [sp, #8]
 8008ee8:	2d00      	cmp	r5, #0
 8008eea:	dd05      	ble.n	8008ef8 <_dtoa_r+0x9a0>
 8008eec:	4639      	mov	r1, r7
 8008eee:	462a      	mov	r2, r5
 8008ef0:	4620      	mov	r0, r4
 8008ef2:	f000 fb75 	bl	80095e0 <__lshift>
 8008ef6:	4607      	mov	r7, r0
 8008ef8:	f1b8 0f00 	cmp.w	r8, #0
 8008efc:	d05b      	beq.n	8008fb6 <_dtoa_r+0xa5e>
 8008efe:	6879      	ldr	r1, [r7, #4]
 8008f00:	4620      	mov	r0, r4
 8008f02:	f000 f95b 	bl	80091bc <_Balloc>
 8008f06:	4605      	mov	r5, r0
 8008f08:	b928      	cbnz	r0, 8008f16 <_dtoa_r+0x9be>
 8008f0a:	4b87      	ldr	r3, [pc, #540]	; (8009128 <_dtoa_r+0xbd0>)
 8008f0c:	4602      	mov	r2, r0
 8008f0e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008f12:	f7ff bb3b 	b.w	800858c <_dtoa_r+0x34>
 8008f16:	693a      	ldr	r2, [r7, #16]
 8008f18:	3202      	adds	r2, #2
 8008f1a:	0092      	lsls	r2, r2, #2
 8008f1c:	f107 010c 	add.w	r1, r7, #12
 8008f20:	300c      	adds	r0, #12
 8008f22:	f7fe fb33 	bl	800758c <memcpy>
 8008f26:	2201      	movs	r2, #1
 8008f28:	4629      	mov	r1, r5
 8008f2a:	4620      	mov	r0, r4
 8008f2c:	f000 fb58 	bl	80095e0 <__lshift>
 8008f30:	9b01      	ldr	r3, [sp, #4]
 8008f32:	f103 0901 	add.w	r9, r3, #1
 8008f36:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008f3a:	4413      	add	r3, r2
 8008f3c:	9305      	str	r3, [sp, #20]
 8008f3e:	f00a 0301 	and.w	r3, sl, #1
 8008f42:	46b8      	mov	r8, r7
 8008f44:	9304      	str	r3, [sp, #16]
 8008f46:	4607      	mov	r7, r0
 8008f48:	4631      	mov	r1, r6
 8008f4a:	ee18 0a10 	vmov	r0, s16
 8008f4e:	f7ff fa75 	bl	800843c <quorem>
 8008f52:	4641      	mov	r1, r8
 8008f54:	9002      	str	r0, [sp, #8]
 8008f56:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008f5a:	ee18 0a10 	vmov	r0, s16
 8008f5e:	f000 fbaf 	bl	80096c0 <__mcmp>
 8008f62:	463a      	mov	r2, r7
 8008f64:	9003      	str	r0, [sp, #12]
 8008f66:	4631      	mov	r1, r6
 8008f68:	4620      	mov	r0, r4
 8008f6a:	f000 fbc5 	bl	80096f8 <__mdiff>
 8008f6e:	68c2      	ldr	r2, [r0, #12]
 8008f70:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8008f74:	4605      	mov	r5, r0
 8008f76:	bb02      	cbnz	r2, 8008fba <_dtoa_r+0xa62>
 8008f78:	4601      	mov	r1, r0
 8008f7a:	ee18 0a10 	vmov	r0, s16
 8008f7e:	f000 fb9f 	bl	80096c0 <__mcmp>
 8008f82:	4602      	mov	r2, r0
 8008f84:	4629      	mov	r1, r5
 8008f86:	4620      	mov	r0, r4
 8008f88:	9207      	str	r2, [sp, #28]
 8008f8a:	f000 f957 	bl	800923c <_Bfree>
 8008f8e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008f92:	ea43 0102 	orr.w	r1, r3, r2
 8008f96:	9b04      	ldr	r3, [sp, #16]
 8008f98:	430b      	orrs	r3, r1
 8008f9a:	464d      	mov	r5, r9
 8008f9c:	d10f      	bne.n	8008fbe <_dtoa_r+0xa66>
 8008f9e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008fa2:	d02a      	beq.n	8008ffa <_dtoa_r+0xaa2>
 8008fa4:	9b03      	ldr	r3, [sp, #12]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	dd02      	ble.n	8008fb0 <_dtoa_r+0xa58>
 8008faa:	9b02      	ldr	r3, [sp, #8]
 8008fac:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008fb0:	f88b a000 	strb.w	sl, [fp]
 8008fb4:	e775      	b.n	8008ea2 <_dtoa_r+0x94a>
 8008fb6:	4638      	mov	r0, r7
 8008fb8:	e7ba      	b.n	8008f30 <_dtoa_r+0x9d8>
 8008fba:	2201      	movs	r2, #1
 8008fbc:	e7e2      	b.n	8008f84 <_dtoa_r+0xa2c>
 8008fbe:	9b03      	ldr	r3, [sp, #12]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	db04      	blt.n	8008fce <_dtoa_r+0xa76>
 8008fc4:	9906      	ldr	r1, [sp, #24]
 8008fc6:	430b      	orrs	r3, r1
 8008fc8:	9904      	ldr	r1, [sp, #16]
 8008fca:	430b      	orrs	r3, r1
 8008fcc:	d122      	bne.n	8009014 <_dtoa_r+0xabc>
 8008fce:	2a00      	cmp	r2, #0
 8008fd0:	ddee      	ble.n	8008fb0 <_dtoa_r+0xa58>
 8008fd2:	ee18 1a10 	vmov	r1, s16
 8008fd6:	2201      	movs	r2, #1
 8008fd8:	4620      	mov	r0, r4
 8008fda:	f000 fb01 	bl	80095e0 <__lshift>
 8008fde:	4631      	mov	r1, r6
 8008fe0:	ee08 0a10 	vmov	s16, r0
 8008fe4:	f000 fb6c 	bl	80096c0 <__mcmp>
 8008fe8:	2800      	cmp	r0, #0
 8008fea:	dc03      	bgt.n	8008ff4 <_dtoa_r+0xa9c>
 8008fec:	d1e0      	bne.n	8008fb0 <_dtoa_r+0xa58>
 8008fee:	f01a 0f01 	tst.w	sl, #1
 8008ff2:	d0dd      	beq.n	8008fb0 <_dtoa_r+0xa58>
 8008ff4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008ff8:	d1d7      	bne.n	8008faa <_dtoa_r+0xa52>
 8008ffa:	2339      	movs	r3, #57	; 0x39
 8008ffc:	f88b 3000 	strb.w	r3, [fp]
 8009000:	462b      	mov	r3, r5
 8009002:	461d      	mov	r5, r3
 8009004:	3b01      	subs	r3, #1
 8009006:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800900a:	2a39      	cmp	r2, #57	; 0x39
 800900c:	d071      	beq.n	80090f2 <_dtoa_r+0xb9a>
 800900e:	3201      	adds	r2, #1
 8009010:	701a      	strb	r2, [r3, #0]
 8009012:	e746      	b.n	8008ea2 <_dtoa_r+0x94a>
 8009014:	2a00      	cmp	r2, #0
 8009016:	dd07      	ble.n	8009028 <_dtoa_r+0xad0>
 8009018:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800901c:	d0ed      	beq.n	8008ffa <_dtoa_r+0xaa2>
 800901e:	f10a 0301 	add.w	r3, sl, #1
 8009022:	f88b 3000 	strb.w	r3, [fp]
 8009026:	e73c      	b.n	8008ea2 <_dtoa_r+0x94a>
 8009028:	9b05      	ldr	r3, [sp, #20]
 800902a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800902e:	4599      	cmp	r9, r3
 8009030:	d047      	beq.n	80090c2 <_dtoa_r+0xb6a>
 8009032:	ee18 1a10 	vmov	r1, s16
 8009036:	2300      	movs	r3, #0
 8009038:	220a      	movs	r2, #10
 800903a:	4620      	mov	r0, r4
 800903c:	f000 f920 	bl	8009280 <__multadd>
 8009040:	45b8      	cmp	r8, r7
 8009042:	ee08 0a10 	vmov	s16, r0
 8009046:	f04f 0300 	mov.w	r3, #0
 800904a:	f04f 020a 	mov.w	r2, #10
 800904e:	4641      	mov	r1, r8
 8009050:	4620      	mov	r0, r4
 8009052:	d106      	bne.n	8009062 <_dtoa_r+0xb0a>
 8009054:	f000 f914 	bl	8009280 <__multadd>
 8009058:	4680      	mov	r8, r0
 800905a:	4607      	mov	r7, r0
 800905c:	f109 0901 	add.w	r9, r9, #1
 8009060:	e772      	b.n	8008f48 <_dtoa_r+0x9f0>
 8009062:	f000 f90d 	bl	8009280 <__multadd>
 8009066:	4639      	mov	r1, r7
 8009068:	4680      	mov	r8, r0
 800906a:	2300      	movs	r3, #0
 800906c:	220a      	movs	r2, #10
 800906e:	4620      	mov	r0, r4
 8009070:	f000 f906 	bl	8009280 <__multadd>
 8009074:	4607      	mov	r7, r0
 8009076:	e7f1      	b.n	800905c <_dtoa_r+0xb04>
 8009078:	9b03      	ldr	r3, [sp, #12]
 800907a:	9302      	str	r3, [sp, #8]
 800907c:	9d01      	ldr	r5, [sp, #4]
 800907e:	ee18 0a10 	vmov	r0, s16
 8009082:	4631      	mov	r1, r6
 8009084:	f7ff f9da 	bl	800843c <quorem>
 8009088:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800908c:	9b01      	ldr	r3, [sp, #4]
 800908e:	f805 ab01 	strb.w	sl, [r5], #1
 8009092:	1aea      	subs	r2, r5, r3
 8009094:	9b02      	ldr	r3, [sp, #8]
 8009096:	4293      	cmp	r3, r2
 8009098:	dd09      	ble.n	80090ae <_dtoa_r+0xb56>
 800909a:	ee18 1a10 	vmov	r1, s16
 800909e:	2300      	movs	r3, #0
 80090a0:	220a      	movs	r2, #10
 80090a2:	4620      	mov	r0, r4
 80090a4:	f000 f8ec 	bl	8009280 <__multadd>
 80090a8:	ee08 0a10 	vmov	s16, r0
 80090ac:	e7e7      	b.n	800907e <_dtoa_r+0xb26>
 80090ae:	9b02      	ldr	r3, [sp, #8]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	bfc8      	it	gt
 80090b4:	461d      	movgt	r5, r3
 80090b6:	9b01      	ldr	r3, [sp, #4]
 80090b8:	bfd8      	it	le
 80090ba:	2501      	movle	r5, #1
 80090bc:	441d      	add	r5, r3
 80090be:	f04f 0800 	mov.w	r8, #0
 80090c2:	ee18 1a10 	vmov	r1, s16
 80090c6:	2201      	movs	r2, #1
 80090c8:	4620      	mov	r0, r4
 80090ca:	f000 fa89 	bl	80095e0 <__lshift>
 80090ce:	4631      	mov	r1, r6
 80090d0:	ee08 0a10 	vmov	s16, r0
 80090d4:	f000 faf4 	bl	80096c0 <__mcmp>
 80090d8:	2800      	cmp	r0, #0
 80090da:	dc91      	bgt.n	8009000 <_dtoa_r+0xaa8>
 80090dc:	d102      	bne.n	80090e4 <_dtoa_r+0xb8c>
 80090de:	f01a 0f01 	tst.w	sl, #1
 80090e2:	d18d      	bne.n	8009000 <_dtoa_r+0xaa8>
 80090e4:	462b      	mov	r3, r5
 80090e6:	461d      	mov	r5, r3
 80090e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80090ec:	2a30      	cmp	r2, #48	; 0x30
 80090ee:	d0fa      	beq.n	80090e6 <_dtoa_r+0xb8e>
 80090f0:	e6d7      	b.n	8008ea2 <_dtoa_r+0x94a>
 80090f2:	9a01      	ldr	r2, [sp, #4]
 80090f4:	429a      	cmp	r2, r3
 80090f6:	d184      	bne.n	8009002 <_dtoa_r+0xaaa>
 80090f8:	9b00      	ldr	r3, [sp, #0]
 80090fa:	3301      	adds	r3, #1
 80090fc:	9300      	str	r3, [sp, #0]
 80090fe:	2331      	movs	r3, #49	; 0x31
 8009100:	7013      	strb	r3, [r2, #0]
 8009102:	e6ce      	b.n	8008ea2 <_dtoa_r+0x94a>
 8009104:	4b09      	ldr	r3, [pc, #36]	; (800912c <_dtoa_r+0xbd4>)
 8009106:	f7ff ba95 	b.w	8008634 <_dtoa_r+0xdc>
 800910a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800910c:	2b00      	cmp	r3, #0
 800910e:	f47f aa6e 	bne.w	80085ee <_dtoa_r+0x96>
 8009112:	4b07      	ldr	r3, [pc, #28]	; (8009130 <_dtoa_r+0xbd8>)
 8009114:	f7ff ba8e 	b.w	8008634 <_dtoa_r+0xdc>
 8009118:	9b02      	ldr	r3, [sp, #8]
 800911a:	2b00      	cmp	r3, #0
 800911c:	dcae      	bgt.n	800907c <_dtoa_r+0xb24>
 800911e:	9b06      	ldr	r3, [sp, #24]
 8009120:	2b02      	cmp	r3, #2
 8009122:	f73f aea8 	bgt.w	8008e76 <_dtoa_r+0x91e>
 8009126:	e7a9      	b.n	800907c <_dtoa_r+0xb24>
 8009128:	0800feab 	.word	0x0800feab
 800912c:	0800fe08 	.word	0x0800fe08
 8009130:	0800fe2c 	.word	0x0800fe2c

08009134 <_fstat_r>:
 8009134:	b538      	push	{r3, r4, r5, lr}
 8009136:	4d07      	ldr	r5, [pc, #28]	; (8009154 <_fstat_r+0x20>)
 8009138:	2300      	movs	r3, #0
 800913a:	4604      	mov	r4, r0
 800913c:	4608      	mov	r0, r1
 800913e:	4611      	mov	r1, r2
 8009140:	602b      	str	r3, [r5, #0]
 8009142:	f7f8 ffcc 	bl	80020de <_fstat>
 8009146:	1c43      	adds	r3, r0, #1
 8009148:	d102      	bne.n	8009150 <_fstat_r+0x1c>
 800914a:	682b      	ldr	r3, [r5, #0]
 800914c:	b103      	cbz	r3, 8009150 <_fstat_r+0x1c>
 800914e:	6023      	str	r3, [r4, #0]
 8009150:	bd38      	pop	{r3, r4, r5, pc}
 8009152:	bf00      	nop
 8009154:	20000388 	.word	0x20000388

08009158 <_isatty_r>:
 8009158:	b538      	push	{r3, r4, r5, lr}
 800915a:	4d06      	ldr	r5, [pc, #24]	; (8009174 <_isatty_r+0x1c>)
 800915c:	2300      	movs	r3, #0
 800915e:	4604      	mov	r4, r0
 8009160:	4608      	mov	r0, r1
 8009162:	602b      	str	r3, [r5, #0]
 8009164:	f7f8 ffcb 	bl	80020fe <_isatty>
 8009168:	1c43      	adds	r3, r0, #1
 800916a:	d102      	bne.n	8009172 <_isatty_r+0x1a>
 800916c:	682b      	ldr	r3, [r5, #0]
 800916e:	b103      	cbz	r3, 8009172 <_isatty_r+0x1a>
 8009170:	6023      	str	r3, [r4, #0]
 8009172:	bd38      	pop	{r3, r4, r5, pc}
 8009174:	20000388 	.word	0x20000388

08009178 <_localeconv_r>:
 8009178:	4800      	ldr	r0, [pc, #0]	; (800917c <_localeconv_r+0x4>)
 800917a:	4770      	bx	lr
 800917c:	20000168 	.word	0x20000168

08009180 <_lseek_r>:
 8009180:	b538      	push	{r3, r4, r5, lr}
 8009182:	4d07      	ldr	r5, [pc, #28]	; (80091a0 <_lseek_r+0x20>)
 8009184:	4604      	mov	r4, r0
 8009186:	4608      	mov	r0, r1
 8009188:	4611      	mov	r1, r2
 800918a:	2200      	movs	r2, #0
 800918c:	602a      	str	r2, [r5, #0]
 800918e:	461a      	mov	r2, r3
 8009190:	f7f8 ffc0 	bl	8002114 <_lseek>
 8009194:	1c43      	adds	r3, r0, #1
 8009196:	d102      	bne.n	800919e <_lseek_r+0x1e>
 8009198:	682b      	ldr	r3, [r5, #0]
 800919a:	b103      	cbz	r3, 800919e <_lseek_r+0x1e>
 800919c:	6023      	str	r3, [r4, #0]
 800919e:	bd38      	pop	{r3, r4, r5, pc}
 80091a0:	20000388 	.word	0x20000388

080091a4 <__malloc_lock>:
 80091a4:	4801      	ldr	r0, [pc, #4]	; (80091ac <__malloc_lock+0x8>)
 80091a6:	f7fe b97a 	b.w	800749e <__retarget_lock_acquire_recursive>
 80091aa:	bf00      	nop
 80091ac:	2000037c 	.word	0x2000037c

080091b0 <__malloc_unlock>:
 80091b0:	4801      	ldr	r0, [pc, #4]	; (80091b8 <__malloc_unlock+0x8>)
 80091b2:	f7fe b975 	b.w	80074a0 <__retarget_lock_release_recursive>
 80091b6:	bf00      	nop
 80091b8:	2000037c 	.word	0x2000037c

080091bc <_Balloc>:
 80091bc:	b570      	push	{r4, r5, r6, lr}
 80091be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80091c0:	4604      	mov	r4, r0
 80091c2:	460d      	mov	r5, r1
 80091c4:	b976      	cbnz	r6, 80091e4 <_Balloc+0x28>
 80091c6:	2010      	movs	r0, #16
 80091c8:	f7fe f9d0 	bl	800756c <malloc>
 80091cc:	4602      	mov	r2, r0
 80091ce:	6260      	str	r0, [r4, #36]	; 0x24
 80091d0:	b920      	cbnz	r0, 80091dc <_Balloc+0x20>
 80091d2:	4b18      	ldr	r3, [pc, #96]	; (8009234 <_Balloc+0x78>)
 80091d4:	4818      	ldr	r0, [pc, #96]	; (8009238 <_Balloc+0x7c>)
 80091d6:	2166      	movs	r1, #102	; 0x66
 80091d8:	f001 faf8 	bl	800a7cc <__assert_func>
 80091dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80091e0:	6006      	str	r6, [r0, #0]
 80091e2:	60c6      	str	r6, [r0, #12]
 80091e4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80091e6:	68f3      	ldr	r3, [r6, #12]
 80091e8:	b183      	cbz	r3, 800920c <_Balloc+0x50>
 80091ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80091ec:	68db      	ldr	r3, [r3, #12]
 80091ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80091f2:	b9b8      	cbnz	r0, 8009224 <_Balloc+0x68>
 80091f4:	2101      	movs	r1, #1
 80091f6:	fa01 f605 	lsl.w	r6, r1, r5
 80091fa:	1d72      	adds	r2, r6, #5
 80091fc:	0092      	lsls	r2, r2, #2
 80091fe:	4620      	mov	r0, r4
 8009200:	f000 fb60 	bl	80098c4 <_calloc_r>
 8009204:	b160      	cbz	r0, 8009220 <_Balloc+0x64>
 8009206:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800920a:	e00e      	b.n	800922a <_Balloc+0x6e>
 800920c:	2221      	movs	r2, #33	; 0x21
 800920e:	2104      	movs	r1, #4
 8009210:	4620      	mov	r0, r4
 8009212:	f000 fb57 	bl	80098c4 <_calloc_r>
 8009216:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009218:	60f0      	str	r0, [r6, #12]
 800921a:	68db      	ldr	r3, [r3, #12]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d1e4      	bne.n	80091ea <_Balloc+0x2e>
 8009220:	2000      	movs	r0, #0
 8009222:	bd70      	pop	{r4, r5, r6, pc}
 8009224:	6802      	ldr	r2, [r0, #0]
 8009226:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800922a:	2300      	movs	r3, #0
 800922c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009230:	e7f7      	b.n	8009222 <_Balloc+0x66>
 8009232:	bf00      	nop
 8009234:	0800fe39 	.word	0x0800fe39
 8009238:	0800febc 	.word	0x0800febc

0800923c <_Bfree>:
 800923c:	b570      	push	{r4, r5, r6, lr}
 800923e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009240:	4605      	mov	r5, r0
 8009242:	460c      	mov	r4, r1
 8009244:	b976      	cbnz	r6, 8009264 <_Bfree+0x28>
 8009246:	2010      	movs	r0, #16
 8009248:	f7fe f990 	bl	800756c <malloc>
 800924c:	4602      	mov	r2, r0
 800924e:	6268      	str	r0, [r5, #36]	; 0x24
 8009250:	b920      	cbnz	r0, 800925c <_Bfree+0x20>
 8009252:	4b09      	ldr	r3, [pc, #36]	; (8009278 <_Bfree+0x3c>)
 8009254:	4809      	ldr	r0, [pc, #36]	; (800927c <_Bfree+0x40>)
 8009256:	218a      	movs	r1, #138	; 0x8a
 8009258:	f001 fab8 	bl	800a7cc <__assert_func>
 800925c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009260:	6006      	str	r6, [r0, #0]
 8009262:	60c6      	str	r6, [r0, #12]
 8009264:	b13c      	cbz	r4, 8009276 <_Bfree+0x3a>
 8009266:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009268:	6862      	ldr	r2, [r4, #4]
 800926a:	68db      	ldr	r3, [r3, #12]
 800926c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009270:	6021      	str	r1, [r4, #0]
 8009272:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009276:	bd70      	pop	{r4, r5, r6, pc}
 8009278:	0800fe39 	.word	0x0800fe39
 800927c:	0800febc 	.word	0x0800febc

08009280 <__multadd>:
 8009280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009284:	690d      	ldr	r5, [r1, #16]
 8009286:	4607      	mov	r7, r0
 8009288:	460c      	mov	r4, r1
 800928a:	461e      	mov	r6, r3
 800928c:	f101 0c14 	add.w	ip, r1, #20
 8009290:	2000      	movs	r0, #0
 8009292:	f8dc 3000 	ldr.w	r3, [ip]
 8009296:	b299      	uxth	r1, r3
 8009298:	fb02 6101 	mla	r1, r2, r1, r6
 800929c:	0c1e      	lsrs	r6, r3, #16
 800929e:	0c0b      	lsrs	r3, r1, #16
 80092a0:	fb02 3306 	mla	r3, r2, r6, r3
 80092a4:	b289      	uxth	r1, r1
 80092a6:	3001      	adds	r0, #1
 80092a8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80092ac:	4285      	cmp	r5, r0
 80092ae:	f84c 1b04 	str.w	r1, [ip], #4
 80092b2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80092b6:	dcec      	bgt.n	8009292 <__multadd+0x12>
 80092b8:	b30e      	cbz	r6, 80092fe <__multadd+0x7e>
 80092ba:	68a3      	ldr	r3, [r4, #8]
 80092bc:	42ab      	cmp	r3, r5
 80092be:	dc19      	bgt.n	80092f4 <__multadd+0x74>
 80092c0:	6861      	ldr	r1, [r4, #4]
 80092c2:	4638      	mov	r0, r7
 80092c4:	3101      	adds	r1, #1
 80092c6:	f7ff ff79 	bl	80091bc <_Balloc>
 80092ca:	4680      	mov	r8, r0
 80092cc:	b928      	cbnz	r0, 80092da <__multadd+0x5a>
 80092ce:	4602      	mov	r2, r0
 80092d0:	4b0c      	ldr	r3, [pc, #48]	; (8009304 <__multadd+0x84>)
 80092d2:	480d      	ldr	r0, [pc, #52]	; (8009308 <__multadd+0x88>)
 80092d4:	21b5      	movs	r1, #181	; 0xb5
 80092d6:	f001 fa79 	bl	800a7cc <__assert_func>
 80092da:	6922      	ldr	r2, [r4, #16]
 80092dc:	3202      	adds	r2, #2
 80092de:	f104 010c 	add.w	r1, r4, #12
 80092e2:	0092      	lsls	r2, r2, #2
 80092e4:	300c      	adds	r0, #12
 80092e6:	f7fe f951 	bl	800758c <memcpy>
 80092ea:	4621      	mov	r1, r4
 80092ec:	4638      	mov	r0, r7
 80092ee:	f7ff ffa5 	bl	800923c <_Bfree>
 80092f2:	4644      	mov	r4, r8
 80092f4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80092f8:	3501      	adds	r5, #1
 80092fa:	615e      	str	r6, [r3, #20]
 80092fc:	6125      	str	r5, [r4, #16]
 80092fe:	4620      	mov	r0, r4
 8009300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009304:	0800feab 	.word	0x0800feab
 8009308:	0800febc 	.word	0x0800febc

0800930c <__hi0bits>:
 800930c:	0c03      	lsrs	r3, r0, #16
 800930e:	041b      	lsls	r3, r3, #16
 8009310:	b9d3      	cbnz	r3, 8009348 <__hi0bits+0x3c>
 8009312:	0400      	lsls	r0, r0, #16
 8009314:	2310      	movs	r3, #16
 8009316:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800931a:	bf04      	itt	eq
 800931c:	0200      	lsleq	r0, r0, #8
 800931e:	3308      	addeq	r3, #8
 8009320:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009324:	bf04      	itt	eq
 8009326:	0100      	lsleq	r0, r0, #4
 8009328:	3304      	addeq	r3, #4
 800932a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800932e:	bf04      	itt	eq
 8009330:	0080      	lsleq	r0, r0, #2
 8009332:	3302      	addeq	r3, #2
 8009334:	2800      	cmp	r0, #0
 8009336:	db05      	blt.n	8009344 <__hi0bits+0x38>
 8009338:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800933c:	f103 0301 	add.w	r3, r3, #1
 8009340:	bf08      	it	eq
 8009342:	2320      	moveq	r3, #32
 8009344:	4618      	mov	r0, r3
 8009346:	4770      	bx	lr
 8009348:	2300      	movs	r3, #0
 800934a:	e7e4      	b.n	8009316 <__hi0bits+0xa>

0800934c <__lo0bits>:
 800934c:	6803      	ldr	r3, [r0, #0]
 800934e:	f013 0207 	ands.w	r2, r3, #7
 8009352:	4601      	mov	r1, r0
 8009354:	d00b      	beq.n	800936e <__lo0bits+0x22>
 8009356:	07da      	lsls	r2, r3, #31
 8009358:	d423      	bmi.n	80093a2 <__lo0bits+0x56>
 800935a:	0798      	lsls	r0, r3, #30
 800935c:	bf49      	itett	mi
 800935e:	085b      	lsrmi	r3, r3, #1
 8009360:	089b      	lsrpl	r3, r3, #2
 8009362:	2001      	movmi	r0, #1
 8009364:	600b      	strmi	r3, [r1, #0]
 8009366:	bf5c      	itt	pl
 8009368:	600b      	strpl	r3, [r1, #0]
 800936a:	2002      	movpl	r0, #2
 800936c:	4770      	bx	lr
 800936e:	b298      	uxth	r0, r3
 8009370:	b9a8      	cbnz	r0, 800939e <__lo0bits+0x52>
 8009372:	0c1b      	lsrs	r3, r3, #16
 8009374:	2010      	movs	r0, #16
 8009376:	b2da      	uxtb	r2, r3
 8009378:	b90a      	cbnz	r2, 800937e <__lo0bits+0x32>
 800937a:	3008      	adds	r0, #8
 800937c:	0a1b      	lsrs	r3, r3, #8
 800937e:	071a      	lsls	r2, r3, #28
 8009380:	bf04      	itt	eq
 8009382:	091b      	lsreq	r3, r3, #4
 8009384:	3004      	addeq	r0, #4
 8009386:	079a      	lsls	r2, r3, #30
 8009388:	bf04      	itt	eq
 800938a:	089b      	lsreq	r3, r3, #2
 800938c:	3002      	addeq	r0, #2
 800938e:	07da      	lsls	r2, r3, #31
 8009390:	d403      	bmi.n	800939a <__lo0bits+0x4e>
 8009392:	085b      	lsrs	r3, r3, #1
 8009394:	f100 0001 	add.w	r0, r0, #1
 8009398:	d005      	beq.n	80093a6 <__lo0bits+0x5a>
 800939a:	600b      	str	r3, [r1, #0]
 800939c:	4770      	bx	lr
 800939e:	4610      	mov	r0, r2
 80093a0:	e7e9      	b.n	8009376 <__lo0bits+0x2a>
 80093a2:	2000      	movs	r0, #0
 80093a4:	4770      	bx	lr
 80093a6:	2020      	movs	r0, #32
 80093a8:	4770      	bx	lr
	...

080093ac <__i2b>:
 80093ac:	b510      	push	{r4, lr}
 80093ae:	460c      	mov	r4, r1
 80093b0:	2101      	movs	r1, #1
 80093b2:	f7ff ff03 	bl	80091bc <_Balloc>
 80093b6:	4602      	mov	r2, r0
 80093b8:	b928      	cbnz	r0, 80093c6 <__i2b+0x1a>
 80093ba:	4b05      	ldr	r3, [pc, #20]	; (80093d0 <__i2b+0x24>)
 80093bc:	4805      	ldr	r0, [pc, #20]	; (80093d4 <__i2b+0x28>)
 80093be:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80093c2:	f001 fa03 	bl	800a7cc <__assert_func>
 80093c6:	2301      	movs	r3, #1
 80093c8:	6144      	str	r4, [r0, #20]
 80093ca:	6103      	str	r3, [r0, #16]
 80093cc:	bd10      	pop	{r4, pc}
 80093ce:	bf00      	nop
 80093d0:	0800feab 	.word	0x0800feab
 80093d4:	0800febc 	.word	0x0800febc

080093d8 <__multiply>:
 80093d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093dc:	4691      	mov	r9, r2
 80093de:	690a      	ldr	r2, [r1, #16]
 80093e0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80093e4:	429a      	cmp	r2, r3
 80093e6:	bfb8      	it	lt
 80093e8:	460b      	movlt	r3, r1
 80093ea:	460c      	mov	r4, r1
 80093ec:	bfbc      	itt	lt
 80093ee:	464c      	movlt	r4, r9
 80093f0:	4699      	movlt	r9, r3
 80093f2:	6927      	ldr	r7, [r4, #16]
 80093f4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80093f8:	68a3      	ldr	r3, [r4, #8]
 80093fa:	6861      	ldr	r1, [r4, #4]
 80093fc:	eb07 060a 	add.w	r6, r7, sl
 8009400:	42b3      	cmp	r3, r6
 8009402:	b085      	sub	sp, #20
 8009404:	bfb8      	it	lt
 8009406:	3101      	addlt	r1, #1
 8009408:	f7ff fed8 	bl	80091bc <_Balloc>
 800940c:	b930      	cbnz	r0, 800941c <__multiply+0x44>
 800940e:	4602      	mov	r2, r0
 8009410:	4b44      	ldr	r3, [pc, #272]	; (8009524 <__multiply+0x14c>)
 8009412:	4845      	ldr	r0, [pc, #276]	; (8009528 <__multiply+0x150>)
 8009414:	f240 115d 	movw	r1, #349	; 0x15d
 8009418:	f001 f9d8 	bl	800a7cc <__assert_func>
 800941c:	f100 0514 	add.w	r5, r0, #20
 8009420:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009424:	462b      	mov	r3, r5
 8009426:	2200      	movs	r2, #0
 8009428:	4543      	cmp	r3, r8
 800942a:	d321      	bcc.n	8009470 <__multiply+0x98>
 800942c:	f104 0314 	add.w	r3, r4, #20
 8009430:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009434:	f109 0314 	add.w	r3, r9, #20
 8009438:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800943c:	9202      	str	r2, [sp, #8]
 800943e:	1b3a      	subs	r2, r7, r4
 8009440:	3a15      	subs	r2, #21
 8009442:	f022 0203 	bic.w	r2, r2, #3
 8009446:	3204      	adds	r2, #4
 8009448:	f104 0115 	add.w	r1, r4, #21
 800944c:	428f      	cmp	r7, r1
 800944e:	bf38      	it	cc
 8009450:	2204      	movcc	r2, #4
 8009452:	9201      	str	r2, [sp, #4]
 8009454:	9a02      	ldr	r2, [sp, #8]
 8009456:	9303      	str	r3, [sp, #12]
 8009458:	429a      	cmp	r2, r3
 800945a:	d80c      	bhi.n	8009476 <__multiply+0x9e>
 800945c:	2e00      	cmp	r6, #0
 800945e:	dd03      	ble.n	8009468 <__multiply+0x90>
 8009460:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009464:	2b00      	cmp	r3, #0
 8009466:	d05a      	beq.n	800951e <__multiply+0x146>
 8009468:	6106      	str	r6, [r0, #16]
 800946a:	b005      	add	sp, #20
 800946c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009470:	f843 2b04 	str.w	r2, [r3], #4
 8009474:	e7d8      	b.n	8009428 <__multiply+0x50>
 8009476:	f8b3 a000 	ldrh.w	sl, [r3]
 800947a:	f1ba 0f00 	cmp.w	sl, #0
 800947e:	d024      	beq.n	80094ca <__multiply+0xf2>
 8009480:	f104 0e14 	add.w	lr, r4, #20
 8009484:	46a9      	mov	r9, r5
 8009486:	f04f 0c00 	mov.w	ip, #0
 800948a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800948e:	f8d9 1000 	ldr.w	r1, [r9]
 8009492:	fa1f fb82 	uxth.w	fp, r2
 8009496:	b289      	uxth	r1, r1
 8009498:	fb0a 110b 	mla	r1, sl, fp, r1
 800949c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80094a0:	f8d9 2000 	ldr.w	r2, [r9]
 80094a4:	4461      	add	r1, ip
 80094a6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80094aa:	fb0a c20b 	mla	r2, sl, fp, ip
 80094ae:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80094b2:	b289      	uxth	r1, r1
 80094b4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80094b8:	4577      	cmp	r7, lr
 80094ba:	f849 1b04 	str.w	r1, [r9], #4
 80094be:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80094c2:	d8e2      	bhi.n	800948a <__multiply+0xb2>
 80094c4:	9a01      	ldr	r2, [sp, #4]
 80094c6:	f845 c002 	str.w	ip, [r5, r2]
 80094ca:	9a03      	ldr	r2, [sp, #12]
 80094cc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80094d0:	3304      	adds	r3, #4
 80094d2:	f1b9 0f00 	cmp.w	r9, #0
 80094d6:	d020      	beq.n	800951a <__multiply+0x142>
 80094d8:	6829      	ldr	r1, [r5, #0]
 80094da:	f104 0c14 	add.w	ip, r4, #20
 80094de:	46ae      	mov	lr, r5
 80094e0:	f04f 0a00 	mov.w	sl, #0
 80094e4:	f8bc b000 	ldrh.w	fp, [ip]
 80094e8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80094ec:	fb09 220b 	mla	r2, r9, fp, r2
 80094f0:	4492      	add	sl, r2
 80094f2:	b289      	uxth	r1, r1
 80094f4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80094f8:	f84e 1b04 	str.w	r1, [lr], #4
 80094fc:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009500:	f8be 1000 	ldrh.w	r1, [lr]
 8009504:	0c12      	lsrs	r2, r2, #16
 8009506:	fb09 1102 	mla	r1, r9, r2, r1
 800950a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800950e:	4567      	cmp	r7, ip
 8009510:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009514:	d8e6      	bhi.n	80094e4 <__multiply+0x10c>
 8009516:	9a01      	ldr	r2, [sp, #4]
 8009518:	50a9      	str	r1, [r5, r2]
 800951a:	3504      	adds	r5, #4
 800951c:	e79a      	b.n	8009454 <__multiply+0x7c>
 800951e:	3e01      	subs	r6, #1
 8009520:	e79c      	b.n	800945c <__multiply+0x84>
 8009522:	bf00      	nop
 8009524:	0800feab 	.word	0x0800feab
 8009528:	0800febc 	.word	0x0800febc

0800952c <__pow5mult>:
 800952c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009530:	4615      	mov	r5, r2
 8009532:	f012 0203 	ands.w	r2, r2, #3
 8009536:	4606      	mov	r6, r0
 8009538:	460f      	mov	r7, r1
 800953a:	d007      	beq.n	800954c <__pow5mult+0x20>
 800953c:	4c25      	ldr	r4, [pc, #148]	; (80095d4 <__pow5mult+0xa8>)
 800953e:	3a01      	subs	r2, #1
 8009540:	2300      	movs	r3, #0
 8009542:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009546:	f7ff fe9b 	bl	8009280 <__multadd>
 800954a:	4607      	mov	r7, r0
 800954c:	10ad      	asrs	r5, r5, #2
 800954e:	d03d      	beq.n	80095cc <__pow5mult+0xa0>
 8009550:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009552:	b97c      	cbnz	r4, 8009574 <__pow5mult+0x48>
 8009554:	2010      	movs	r0, #16
 8009556:	f7fe f809 	bl	800756c <malloc>
 800955a:	4602      	mov	r2, r0
 800955c:	6270      	str	r0, [r6, #36]	; 0x24
 800955e:	b928      	cbnz	r0, 800956c <__pow5mult+0x40>
 8009560:	4b1d      	ldr	r3, [pc, #116]	; (80095d8 <__pow5mult+0xac>)
 8009562:	481e      	ldr	r0, [pc, #120]	; (80095dc <__pow5mult+0xb0>)
 8009564:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009568:	f001 f930 	bl	800a7cc <__assert_func>
 800956c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009570:	6004      	str	r4, [r0, #0]
 8009572:	60c4      	str	r4, [r0, #12]
 8009574:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009578:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800957c:	b94c      	cbnz	r4, 8009592 <__pow5mult+0x66>
 800957e:	f240 2171 	movw	r1, #625	; 0x271
 8009582:	4630      	mov	r0, r6
 8009584:	f7ff ff12 	bl	80093ac <__i2b>
 8009588:	2300      	movs	r3, #0
 800958a:	f8c8 0008 	str.w	r0, [r8, #8]
 800958e:	4604      	mov	r4, r0
 8009590:	6003      	str	r3, [r0, #0]
 8009592:	f04f 0900 	mov.w	r9, #0
 8009596:	07eb      	lsls	r3, r5, #31
 8009598:	d50a      	bpl.n	80095b0 <__pow5mult+0x84>
 800959a:	4639      	mov	r1, r7
 800959c:	4622      	mov	r2, r4
 800959e:	4630      	mov	r0, r6
 80095a0:	f7ff ff1a 	bl	80093d8 <__multiply>
 80095a4:	4639      	mov	r1, r7
 80095a6:	4680      	mov	r8, r0
 80095a8:	4630      	mov	r0, r6
 80095aa:	f7ff fe47 	bl	800923c <_Bfree>
 80095ae:	4647      	mov	r7, r8
 80095b0:	106d      	asrs	r5, r5, #1
 80095b2:	d00b      	beq.n	80095cc <__pow5mult+0xa0>
 80095b4:	6820      	ldr	r0, [r4, #0]
 80095b6:	b938      	cbnz	r0, 80095c8 <__pow5mult+0x9c>
 80095b8:	4622      	mov	r2, r4
 80095ba:	4621      	mov	r1, r4
 80095bc:	4630      	mov	r0, r6
 80095be:	f7ff ff0b 	bl	80093d8 <__multiply>
 80095c2:	6020      	str	r0, [r4, #0]
 80095c4:	f8c0 9000 	str.w	r9, [r0]
 80095c8:	4604      	mov	r4, r0
 80095ca:	e7e4      	b.n	8009596 <__pow5mult+0x6a>
 80095cc:	4638      	mov	r0, r7
 80095ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095d2:	bf00      	nop
 80095d4:	08010008 	.word	0x08010008
 80095d8:	0800fe39 	.word	0x0800fe39
 80095dc:	0800febc 	.word	0x0800febc

080095e0 <__lshift>:
 80095e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095e4:	460c      	mov	r4, r1
 80095e6:	6849      	ldr	r1, [r1, #4]
 80095e8:	6923      	ldr	r3, [r4, #16]
 80095ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80095ee:	68a3      	ldr	r3, [r4, #8]
 80095f0:	4607      	mov	r7, r0
 80095f2:	4691      	mov	r9, r2
 80095f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80095f8:	f108 0601 	add.w	r6, r8, #1
 80095fc:	42b3      	cmp	r3, r6
 80095fe:	db0b      	blt.n	8009618 <__lshift+0x38>
 8009600:	4638      	mov	r0, r7
 8009602:	f7ff fddb 	bl	80091bc <_Balloc>
 8009606:	4605      	mov	r5, r0
 8009608:	b948      	cbnz	r0, 800961e <__lshift+0x3e>
 800960a:	4602      	mov	r2, r0
 800960c:	4b2a      	ldr	r3, [pc, #168]	; (80096b8 <__lshift+0xd8>)
 800960e:	482b      	ldr	r0, [pc, #172]	; (80096bc <__lshift+0xdc>)
 8009610:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009614:	f001 f8da 	bl	800a7cc <__assert_func>
 8009618:	3101      	adds	r1, #1
 800961a:	005b      	lsls	r3, r3, #1
 800961c:	e7ee      	b.n	80095fc <__lshift+0x1c>
 800961e:	2300      	movs	r3, #0
 8009620:	f100 0114 	add.w	r1, r0, #20
 8009624:	f100 0210 	add.w	r2, r0, #16
 8009628:	4618      	mov	r0, r3
 800962a:	4553      	cmp	r3, sl
 800962c:	db37      	blt.n	800969e <__lshift+0xbe>
 800962e:	6920      	ldr	r0, [r4, #16]
 8009630:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009634:	f104 0314 	add.w	r3, r4, #20
 8009638:	f019 091f 	ands.w	r9, r9, #31
 800963c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009640:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009644:	d02f      	beq.n	80096a6 <__lshift+0xc6>
 8009646:	f1c9 0e20 	rsb	lr, r9, #32
 800964a:	468a      	mov	sl, r1
 800964c:	f04f 0c00 	mov.w	ip, #0
 8009650:	681a      	ldr	r2, [r3, #0]
 8009652:	fa02 f209 	lsl.w	r2, r2, r9
 8009656:	ea42 020c 	orr.w	r2, r2, ip
 800965a:	f84a 2b04 	str.w	r2, [sl], #4
 800965e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009662:	4298      	cmp	r0, r3
 8009664:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009668:	d8f2      	bhi.n	8009650 <__lshift+0x70>
 800966a:	1b03      	subs	r3, r0, r4
 800966c:	3b15      	subs	r3, #21
 800966e:	f023 0303 	bic.w	r3, r3, #3
 8009672:	3304      	adds	r3, #4
 8009674:	f104 0215 	add.w	r2, r4, #21
 8009678:	4290      	cmp	r0, r2
 800967a:	bf38      	it	cc
 800967c:	2304      	movcc	r3, #4
 800967e:	f841 c003 	str.w	ip, [r1, r3]
 8009682:	f1bc 0f00 	cmp.w	ip, #0
 8009686:	d001      	beq.n	800968c <__lshift+0xac>
 8009688:	f108 0602 	add.w	r6, r8, #2
 800968c:	3e01      	subs	r6, #1
 800968e:	4638      	mov	r0, r7
 8009690:	612e      	str	r6, [r5, #16]
 8009692:	4621      	mov	r1, r4
 8009694:	f7ff fdd2 	bl	800923c <_Bfree>
 8009698:	4628      	mov	r0, r5
 800969a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800969e:	f842 0f04 	str.w	r0, [r2, #4]!
 80096a2:	3301      	adds	r3, #1
 80096a4:	e7c1      	b.n	800962a <__lshift+0x4a>
 80096a6:	3904      	subs	r1, #4
 80096a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80096ac:	f841 2f04 	str.w	r2, [r1, #4]!
 80096b0:	4298      	cmp	r0, r3
 80096b2:	d8f9      	bhi.n	80096a8 <__lshift+0xc8>
 80096b4:	e7ea      	b.n	800968c <__lshift+0xac>
 80096b6:	bf00      	nop
 80096b8:	0800feab 	.word	0x0800feab
 80096bc:	0800febc 	.word	0x0800febc

080096c0 <__mcmp>:
 80096c0:	b530      	push	{r4, r5, lr}
 80096c2:	6902      	ldr	r2, [r0, #16]
 80096c4:	690c      	ldr	r4, [r1, #16]
 80096c6:	1b12      	subs	r2, r2, r4
 80096c8:	d10e      	bne.n	80096e8 <__mcmp+0x28>
 80096ca:	f100 0314 	add.w	r3, r0, #20
 80096ce:	3114      	adds	r1, #20
 80096d0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80096d4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80096d8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80096dc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80096e0:	42a5      	cmp	r5, r4
 80096e2:	d003      	beq.n	80096ec <__mcmp+0x2c>
 80096e4:	d305      	bcc.n	80096f2 <__mcmp+0x32>
 80096e6:	2201      	movs	r2, #1
 80096e8:	4610      	mov	r0, r2
 80096ea:	bd30      	pop	{r4, r5, pc}
 80096ec:	4283      	cmp	r3, r0
 80096ee:	d3f3      	bcc.n	80096d8 <__mcmp+0x18>
 80096f0:	e7fa      	b.n	80096e8 <__mcmp+0x28>
 80096f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80096f6:	e7f7      	b.n	80096e8 <__mcmp+0x28>

080096f8 <__mdiff>:
 80096f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096fc:	460c      	mov	r4, r1
 80096fe:	4606      	mov	r6, r0
 8009700:	4611      	mov	r1, r2
 8009702:	4620      	mov	r0, r4
 8009704:	4690      	mov	r8, r2
 8009706:	f7ff ffdb 	bl	80096c0 <__mcmp>
 800970a:	1e05      	subs	r5, r0, #0
 800970c:	d110      	bne.n	8009730 <__mdiff+0x38>
 800970e:	4629      	mov	r1, r5
 8009710:	4630      	mov	r0, r6
 8009712:	f7ff fd53 	bl	80091bc <_Balloc>
 8009716:	b930      	cbnz	r0, 8009726 <__mdiff+0x2e>
 8009718:	4b3a      	ldr	r3, [pc, #232]	; (8009804 <__mdiff+0x10c>)
 800971a:	4602      	mov	r2, r0
 800971c:	f240 2132 	movw	r1, #562	; 0x232
 8009720:	4839      	ldr	r0, [pc, #228]	; (8009808 <__mdiff+0x110>)
 8009722:	f001 f853 	bl	800a7cc <__assert_func>
 8009726:	2301      	movs	r3, #1
 8009728:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800972c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009730:	bfa4      	itt	ge
 8009732:	4643      	movge	r3, r8
 8009734:	46a0      	movge	r8, r4
 8009736:	4630      	mov	r0, r6
 8009738:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800973c:	bfa6      	itte	ge
 800973e:	461c      	movge	r4, r3
 8009740:	2500      	movge	r5, #0
 8009742:	2501      	movlt	r5, #1
 8009744:	f7ff fd3a 	bl	80091bc <_Balloc>
 8009748:	b920      	cbnz	r0, 8009754 <__mdiff+0x5c>
 800974a:	4b2e      	ldr	r3, [pc, #184]	; (8009804 <__mdiff+0x10c>)
 800974c:	4602      	mov	r2, r0
 800974e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009752:	e7e5      	b.n	8009720 <__mdiff+0x28>
 8009754:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009758:	6926      	ldr	r6, [r4, #16]
 800975a:	60c5      	str	r5, [r0, #12]
 800975c:	f104 0914 	add.w	r9, r4, #20
 8009760:	f108 0514 	add.w	r5, r8, #20
 8009764:	f100 0e14 	add.w	lr, r0, #20
 8009768:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800976c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009770:	f108 0210 	add.w	r2, r8, #16
 8009774:	46f2      	mov	sl, lr
 8009776:	2100      	movs	r1, #0
 8009778:	f859 3b04 	ldr.w	r3, [r9], #4
 800977c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009780:	fa1f f883 	uxth.w	r8, r3
 8009784:	fa11 f18b 	uxtah	r1, r1, fp
 8009788:	0c1b      	lsrs	r3, r3, #16
 800978a:	eba1 0808 	sub.w	r8, r1, r8
 800978e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009792:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009796:	fa1f f888 	uxth.w	r8, r8
 800979a:	1419      	asrs	r1, r3, #16
 800979c:	454e      	cmp	r6, r9
 800979e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80097a2:	f84a 3b04 	str.w	r3, [sl], #4
 80097a6:	d8e7      	bhi.n	8009778 <__mdiff+0x80>
 80097a8:	1b33      	subs	r3, r6, r4
 80097aa:	3b15      	subs	r3, #21
 80097ac:	f023 0303 	bic.w	r3, r3, #3
 80097b0:	3304      	adds	r3, #4
 80097b2:	3415      	adds	r4, #21
 80097b4:	42a6      	cmp	r6, r4
 80097b6:	bf38      	it	cc
 80097b8:	2304      	movcc	r3, #4
 80097ba:	441d      	add	r5, r3
 80097bc:	4473      	add	r3, lr
 80097be:	469e      	mov	lr, r3
 80097c0:	462e      	mov	r6, r5
 80097c2:	4566      	cmp	r6, ip
 80097c4:	d30e      	bcc.n	80097e4 <__mdiff+0xec>
 80097c6:	f10c 0203 	add.w	r2, ip, #3
 80097ca:	1b52      	subs	r2, r2, r5
 80097cc:	f022 0203 	bic.w	r2, r2, #3
 80097d0:	3d03      	subs	r5, #3
 80097d2:	45ac      	cmp	ip, r5
 80097d4:	bf38      	it	cc
 80097d6:	2200      	movcc	r2, #0
 80097d8:	441a      	add	r2, r3
 80097da:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80097de:	b17b      	cbz	r3, 8009800 <__mdiff+0x108>
 80097e0:	6107      	str	r7, [r0, #16]
 80097e2:	e7a3      	b.n	800972c <__mdiff+0x34>
 80097e4:	f856 8b04 	ldr.w	r8, [r6], #4
 80097e8:	fa11 f288 	uxtah	r2, r1, r8
 80097ec:	1414      	asrs	r4, r2, #16
 80097ee:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80097f2:	b292      	uxth	r2, r2
 80097f4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80097f8:	f84e 2b04 	str.w	r2, [lr], #4
 80097fc:	1421      	asrs	r1, r4, #16
 80097fe:	e7e0      	b.n	80097c2 <__mdiff+0xca>
 8009800:	3f01      	subs	r7, #1
 8009802:	e7ea      	b.n	80097da <__mdiff+0xe2>
 8009804:	0800feab 	.word	0x0800feab
 8009808:	0800febc 	.word	0x0800febc

0800980c <__d2b>:
 800980c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009810:	4689      	mov	r9, r1
 8009812:	2101      	movs	r1, #1
 8009814:	ec57 6b10 	vmov	r6, r7, d0
 8009818:	4690      	mov	r8, r2
 800981a:	f7ff fccf 	bl	80091bc <_Balloc>
 800981e:	4604      	mov	r4, r0
 8009820:	b930      	cbnz	r0, 8009830 <__d2b+0x24>
 8009822:	4602      	mov	r2, r0
 8009824:	4b25      	ldr	r3, [pc, #148]	; (80098bc <__d2b+0xb0>)
 8009826:	4826      	ldr	r0, [pc, #152]	; (80098c0 <__d2b+0xb4>)
 8009828:	f240 310a 	movw	r1, #778	; 0x30a
 800982c:	f000 ffce 	bl	800a7cc <__assert_func>
 8009830:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009834:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009838:	bb35      	cbnz	r5, 8009888 <__d2b+0x7c>
 800983a:	2e00      	cmp	r6, #0
 800983c:	9301      	str	r3, [sp, #4]
 800983e:	d028      	beq.n	8009892 <__d2b+0x86>
 8009840:	4668      	mov	r0, sp
 8009842:	9600      	str	r6, [sp, #0]
 8009844:	f7ff fd82 	bl	800934c <__lo0bits>
 8009848:	9900      	ldr	r1, [sp, #0]
 800984a:	b300      	cbz	r0, 800988e <__d2b+0x82>
 800984c:	9a01      	ldr	r2, [sp, #4]
 800984e:	f1c0 0320 	rsb	r3, r0, #32
 8009852:	fa02 f303 	lsl.w	r3, r2, r3
 8009856:	430b      	orrs	r3, r1
 8009858:	40c2      	lsrs	r2, r0
 800985a:	6163      	str	r3, [r4, #20]
 800985c:	9201      	str	r2, [sp, #4]
 800985e:	9b01      	ldr	r3, [sp, #4]
 8009860:	61a3      	str	r3, [r4, #24]
 8009862:	2b00      	cmp	r3, #0
 8009864:	bf14      	ite	ne
 8009866:	2202      	movne	r2, #2
 8009868:	2201      	moveq	r2, #1
 800986a:	6122      	str	r2, [r4, #16]
 800986c:	b1d5      	cbz	r5, 80098a4 <__d2b+0x98>
 800986e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009872:	4405      	add	r5, r0
 8009874:	f8c9 5000 	str.w	r5, [r9]
 8009878:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800987c:	f8c8 0000 	str.w	r0, [r8]
 8009880:	4620      	mov	r0, r4
 8009882:	b003      	add	sp, #12
 8009884:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009888:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800988c:	e7d5      	b.n	800983a <__d2b+0x2e>
 800988e:	6161      	str	r1, [r4, #20]
 8009890:	e7e5      	b.n	800985e <__d2b+0x52>
 8009892:	a801      	add	r0, sp, #4
 8009894:	f7ff fd5a 	bl	800934c <__lo0bits>
 8009898:	9b01      	ldr	r3, [sp, #4]
 800989a:	6163      	str	r3, [r4, #20]
 800989c:	2201      	movs	r2, #1
 800989e:	6122      	str	r2, [r4, #16]
 80098a0:	3020      	adds	r0, #32
 80098a2:	e7e3      	b.n	800986c <__d2b+0x60>
 80098a4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80098a8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80098ac:	f8c9 0000 	str.w	r0, [r9]
 80098b0:	6918      	ldr	r0, [r3, #16]
 80098b2:	f7ff fd2b 	bl	800930c <__hi0bits>
 80098b6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80098ba:	e7df      	b.n	800987c <__d2b+0x70>
 80098bc:	0800feab 	.word	0x0800feab
 80098c0:	0800febc 	.word	0x0800febc

080098c4 <_calloc_r>:
 80098c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80098c6:	fba1 2402 	umull	r2, r4, r1, r2
 80098ca:	b94c      	cbnz	r4, 80098e0 <_calloc_r+0x1c>
 80098cc:	4611      	mov	r1, r2
 80098ce:	9201      	str	r2, [sp, #4]
 80098d0:	f7fd fede 	bl	8007690 <_malloc_r>
 80098d4:	9a01      	ldr	r2, [sp, #4]
 80098d6:	4605      	mov	r5, r0
 80098d8:	b930      	cbnz	r0, 80098e8 <_calloc_r+0x24>
 80098da:	4628      	mov	r0, r5
 80098dc:	b003      	add	sp, #12
 80098de:	bd30      	pop	{r4, r5, pc}
 80098e0:	220c      	movs	r2, #12
 80098e2:	6002      	str	r2, [r0, #0]
 80098e4:	2500      	movs	r5, #0
 80098e6:	e7f8      	b.n	80098da <_calloc_r+0x16>
 80098e8:	4621      	mov	r1, r4
 80098ea:	f7fd fe5d 	bl	80075a8 <memset>
 80098ee:	e7f4      	b.n	80098da <_calloc_r+0x16>

080098f0 <__sfputc_r>:
 80098f0:	6893      	ldr	r3, [r2, #8]
 80098f2:	3b01      	subs	r3, #1
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	b410      	push	{r4}
 80098f8:	6093      	str	r3, [r2, #8]
 80098fa:	da08      	bge.n	800990e <__sfputc_r+0x1e>
 80098fc:	6994      	ldr	r4, [r2, #24]
 80098fe:	42a3      	cmp	r3, r4
 8009900:	db01      	blt.n	8009906 <__sfputc_r+0x16>
 8009902:	290a      	cmp	r1, #10
 8009904:	d103      	bne.n	800990e <__sfputc_r+0x1e>
 8009906:	f85d 4b04 	ldr.w	r4, [sp], #4
 800990a:	f7fe bcb5 	b.w	8008278 <__swbuf_r>
 800990e:	6813      	ldr	r3, [r2, #0]
 8009910:	1c58      	adds	r0, r3, #1
 8009912:	6010      	str	r0, [r2, #0]
 8009914:	7019      	strb	r1, [r3, #0]
 8009916:	4608      	mov	r0, r1
 8009918:	f85d 4b04 	ldr.w	r4, [sp], #4
 800991c:	4770      	bx	lr

0800991e <__sfputs_r>:
 800991e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009920:	4606      	mov	r6, r0
 8009922:	460f      	mov	r7, r1
 8009924:	4614      	mov	r4, r2
 8009926:	18d5      	adds	r5, r2, r3
 8009928:	42ac      	cmp	r4, r5
 800992a:	d101      	bne.n	8009930 <__sfputs_r+0x12>
 800992c:	2000      	movs	r0, #0
 800992e:	e007      	b.n	8009940 <__sfputs_r+0x22>
 8009930:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009934:	463a      	mov	r2, r7
 8009936:	4630      	mov	r0, r6
 8009938:	f7ff ffda 	bl	80098f0 <__sfputc_r>
 800993c:	1c43      	adds	r3, r0, #1
 800993e:	d1f3      	bne.n	8009928 <__sfputs_r+0xa>
 8009940:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009944 <_vfiprintf_r>:
 8009944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009948:	460d      	mov	r5, r1
 800994a:	b09d      	sub	sp, #116	; 0x74
 800994c:	4614      	mov	r4, r2
 800994e:	4698      	mov	r8, r3
 8009950:	4606      	mov	r6, r0
 8009952:	b118      	cbz	r0, 800995c <_vfiprintf_r+0x18>
 8009954:	6983      	ldr	r3, [r0, #24]
 8009956:	b90b      	cbnz	r3, 800995c <_vfiprintf_r+0x18>
 8009958:	f7fd fcde 	bl	8007318 <__sinit>
 800995c:	4b89      	ldr	r3, [pc, #548]	; (8009b84 <_vfiprintf_r+0x240>)
 800995e:	429d      	cmp	r5, r3
 8009960:	d11b      	bne.n	800999a <_vfiprintf_r+0x56>
 8009962:	6875      	ldr	r5, [r6, #4]
 8009964:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009966:	07d9      	lsls	r1, r3, #31
 8009968:	d405      	bmi.n	8009976 <_vfiprintf_r+0x32>
 800996a:	89ab      	ldrh	r3, [r5, #12]
 800996c:	059a      	lsls	r2, r3, #22
 800996e:	d402      	bmi.n	8009976 <_vfiprintf_r+0x32>
 8009970:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009972:	f7fd fd94 	bl	800749e <__retarget_lock_acquire_recursive>
 8009976:	89ab      	ldrh	r3, [r5, #12]
 8009978:	071b      	lsls	r3, r3, #28
 800997a:	d501      	bpl.n	8009980 <_vfiprintf_r+0x3c>
 800997c:	692b      	ldr	r3, [r5, #16]
 800997e:	b9eb      	cbnz	r3, 80099bc <_vfiprintf_r+0x78>
 8009980:	4629      	mov	r1, r5
 8009982:	4630      	mov	r0, r6
 8009984:	f7fe fcdc 	bl	8008340 <__swsetup_r>
 8009988:	b1c0      	cbz	r0, 80099bc <_vfiprintf_r+0x78>
 800998a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800998c:	07dc      	lsls	r4, r3, #31
 800998e:	d50e      	bpl.n	80099ae <_vfiprintf_r+0x6a>
 8009990:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009994:	b01d      	add	sp, #116	; 0x74
 8009996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800999a:	4b7b      	ldr	r3, [pc, #492]	; (8009b88 <_vfiprintf_r+0x244>)
 800999c:	429d      	cmp	r5, r3
 800999e:	d101      	bne.n	80099a4 <_vfiprintf_r+0x60>
 80099a0:	68b5      	ldr	r5, [r6, #8]
 80099a2:	e7df      	b.n	8009964 <_vfiprintf_r+0x20>
 80099a4:	4b79      	ldr	r3, [pc, #484]	; (8009b8c <_vfiprintf_r+0x248>)
 80099a6:	429d      	cmp	r5, r3
 80099a8:	bf08      	it	eq
 80099aa:	68f5      	ldreq	r5, [r6, #12]
 80099ac:	e7da      	b.n	8009964 <_vfiprintf_r+0x20>
 80099ae:	89ab      	ldrh	r3, [r5, #12]
 80099b0:	0598      	lsls	r0, r3, #22
 80099b2:	d4ed      	bmi.n	8009990 <_vfiprintf_r+0x4c>
 80099b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80099b6:	f7fd fd73 	bl	80074a0 <__retarget_lock_release_recursive>
 80099ba:	e7e9      	b.n	8009990 <_vfiprintf_r+0x4c>
 80099bc:	2300      	movs	r3, #0
 80099be:	9309      	str	r3, [sp, #36]	; 0x24
 80099c0:	2320      	movs	r3, #32
 80099c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80099c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80099ca:	2330      	movs	r3, #48	; 0x30
 80099cc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009b90 <_vfiprintf_r+0x24c>
 80099d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80099d4:	f04f 0901 	mov.w	r9, #1
 80099d8:	4623      	mov	r3, r4
 80099da:	469a      	mov	sl, r3
 80099dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80099e0:	b10a      	cbz	r2, 80099e6 <_vfiprintf_r+0xa2>
 80099e2:	2a25      	cmp	r2, #37	; 0x25
 80099e4:	d1f9      	bne.n	80099da <_vfiprintf_r+0x96>
 80099e6:	ebba 0b04 	subs.w	fp, sl, r4
 80099ea:	d00b      	beq.n	8009a04 <_vfiprintf_r+0xc0>
 80099ec:	465b      	mov	r3, fp
 80099ee:	4622      	mov	r2, r4
 80099f0:	4629      	mov	r1, r5
 80099f2:	4630      	mov	r0, r6
 80099f4:	f7ff ff93 	bl	800991e <__sfputs_r>
 80099f8:	3001      	adds	r0, #1
 80099fa:	f000 80aa 	beq.w	8009b52 <_vfiprintf_r+0x20e>
 80099fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a00:	445a      	add	r2, fp
 8009a02:	9209      	str	r2, [sp, #36]	; 0x24
 8009a04:	f89a 3000 	ldrb.w	r3, [sl]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	f000 80a2 	beq.w	8009b52 <_vfiprintf_r+0x20e>
 8009a0e:	2300      	movs	r3, #0
 8009a10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009a14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a18:	f10a 0a01 	add.w	sl, sl, #1
 8009a1c:	9304      	str	r3, [sp, #16]
 8009a1e:	9307      	str	r3, [sp, #28]
 8009a20:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009a24:	931a      	str	r3, [sp, #104]	; 0x68
 8009a26:	4654      	mov	r4, sl
 8009a28:	2205      	movs	r2, #5
 8009a2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a2e:	4858      	ldr	r0, [pc, #352]	; (8009b90 <_vfiprintf_r+0x24c>)
 8009a30:	f7f6 fbd6 	bl	80001e0 <memchr>
 8009a34:	9a04      	ldr	r2, [sp, #16]
 8009a36:	b9d8      	cbnz	r0, 8009a70 <_vfiprintf_r+0x12c>
 8009a38:	06d1      	lsls	r1, r2, #27
 8009a3a:	bf44      	itt	mi
 8009a3c:	2320      	movmi	r3, #32
 8009a3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a42:	0713      	lsls	r3, r2, #28
 8009a44:	bf44      	itt	mi
 8009a46:	232b      	movmi	r3, #43	; 0x2b
 8009a48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a4c:	f89a 3000 	ldrb.w	r3, [sl]
 8009a50:	2b2a      	cmp	r3, #42	; 0x2a
 8009a52:	d015      	beq.n	8009a80 <_vfiprintf_r+0x13c>
 8009a54:	9a07      	ldr	r2, [sp, #28]
 8009a56:	4654      	mov	r4, sl
 8009a58:	2000      	movs	r0, #0
 8009a5a:	f04f 0c0a 	mov.w	ip, #10
 8009a5e:	4621      	mov	r1, r4
 8009a60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a64:	3b30      	subs	r3, #48	; 0x30
 8009a66:	2b09      	cmp	r3, #9
 8009a68:	d94e      	bls.n	8009b08 <_vfiprintf_r+0x1c4>
 8009a6a:	b1b0      	cbz	r0, 8009a9a <_vfiprintf_r+0x156>
 8009a6c:	9207      	str	r2, [sp, #28]
 8009a6e:	e014      	b.n	8009a9a <_vfiprintf_r+0x156>
 8009a70:	eba0 0308 	sub.w	r3, r0, r8
 8009a74:	fa09 f303 	lsl.w	r3, r9, r3
 8009a78:	4313      	orrs	r3, r2
 8009a7a:	9304      	str	r3, [sp, #16]
 8009a7c:	46a2      	mov	sl, r4
 8009a7e:	e7d2      	b.n	8009a26 <_vfiprintf_r+0xe2>
 8009a80:	9b03      	ldr	r3, [sp, #12]
 8009a82:	1d19      	adds	r1, r3, #4
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	9103      	str	r1, [sp, #12]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	bfbb      	ittet	lt
 8009a8c:	425b      	neglt	r3, r3
 8009a8e:	f042 0202 	orrlt.w	r2, r2, #2
 8009a92:	9307      	strge	r3, [sp, #28]
 8009a94:	9307      	strlt	r3, [sp, #28]
 8009a96:	bfb8      	it	lt
 8009a98:	9204      	strlt	r2, [sp, #16]
 8009a9a:	7823      	ldrb	r3, [r4, #0]
 8009a9c:	2b2e      	cmp	r3, #46	; 0x2e
 8009a9e:	d10c      	bne.n	8009aba <_vfiprintf_r+0x176>
 8009aa0:	7863      	ldrb	r3, [r4, #1]
 8009aa2:	2b2a      	cmp	r3, #42	; 0x2a
 8009aa4:	d135      	bne.n	8009b12 <_vfiprintf_r+0x1ce>
 8009aa6:	9b03      	ldr	r3, [sp, #12]
 8009aa8:	1d1a      	adds	r2, r3, #4
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	9203      	str	r2, [sp, #12]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	bfb8      	it	lt
 8009ab2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009ab6:	3402      	adds	r4, #2
 8009ab8:	9305      	str	r3, [sp, #20]
 8009aba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009ba0 <_vfiprintf_r+0x25c>
 8009abe:	7821      	ldrb	r1, [r4, #0]
 8009ac0:	2203      	movs	r2, #3
 8009ac2:	4650      	mov	r0, sl
 8009ac4:	f7f6 fb8c 	bl	80001e0 <memchr>
 8009ac8:	b140      	cbz	r0, 8009adc <_vfiprintf_r+0x198>
 8009aca:	2340      	movs	r3, #64	; 0x40
 8009acc:	eba0 000a 	sub.w	r0, r0, sl
 8009ad0:	fa03 f000 	lsl.w	r0, r3, r0
 8009ad4:	9b04      	ldr	r3, [sp, #16]
 8009ad6:	4303      	orrs	r3, r0
 8009ad8:	3401      	adds	r4, #1
 8009ada:	9304      	str	r3, [sp, #16]
 8009adc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ae0:	482c      	ldr	r0, [pc, #176]	; (8009b94 <_vfiprintf_r+0x250>)
 8009ae2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009ae6:	2206      	movs	r2, #6
 8009ae8:	f7f6 fb7a 	bl	80001e0 <memchr>
 8009aec:	2800      	cmp	r0, #0
 8009aee:	d03f      	beq.n	8009b70 <_vfiprintf_r+0x22c>
 8009af0:	4b29      	ldr	r3, [pc, #164]	; (8009b98 <_vfiprintf_r+0x254>)
 8009af2:	bb1b      	cbnz	r3, 8009b3c <_vfiprintf_r+0x1f8>
 8009af4:	9b03      	ldr	r3, [sp, #12]
 8009af6:	3307      	adds	r3, #7
 8009af8:	f023 0307 	bic.w	r3, r3, #7
 8009afc:	3308      	adds	r3, #8
 8009afe:	9303      	str	r3, [sp, #12]
 8009b00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b02:	443b      	add	r3, r7
 8009b04:	9309      	str	r3, [sp, #36]	; 0x24
 8009b06:	e767      	b.n	80099d8 <_vfiprintf_r+0x94>
 8009b08:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b0c:	460c      	mov	r4, r1
 8009b0e:	2001      	movs	r0, #1
 8009b10:	e7a5      	b.n	8009a5e <_vfiprintf_r+0x11a>
 8009b12:	2300      	movs	r3, #0
 8009b14:	3401      	adds	r4, #1
 8009b16:	9305      	str	r3, [sp, #20]
 8009b18:	4619      	mov	r1, r3
 8009b1a:	f04f 0c0a 	mov.w	ip, #10
 8009b1e:	4620      	mov	r0, r4
 8009b20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b24:	3a30      	subs	r2, #48	; 0x30
 8009b26:	2a09      	cmp	r2, #9
 8009b28:	d903      	bls.n	8009b32 <_vfiprintf_r+0x1ee>
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d0c5      	beq.n	8009aba <_vfiprintf_r+0x176>
 8009b2e:	9105      	str	r1, [sp, #20]
 8009b30:	e7c3      	b.n	8009aba <_vfiprintf_r+0x176>
 8009b32:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b36:	4604      	mov	r4, r0
 8009b38:	2301      	movs	r3, #1
 8009b3a:	e7f0      	b.n	8009b1e <_vfiprintf_r+0x1da>
 8009b3c:	ab03      	add	r3, sp, #12
 8009b3e:	9300      	str	r3, [sp, #0]
 8009b40:	462a      	mov	r2, r5
 8009b42:	4b16      	ldr	r3, [pc, #88]	; (8009b9c <_vfiprintf_r+0x258>)
 8009b44:	a904      	add	r1, sp, #16
 8009b46:	4630      	mov	r0, r6
 8009b48:	f7fd feb6 	bl	80078b8 <_printf_float>
 8009b4c:	4607      	mov	r7, r0
 8009b4e:	1c78      	adds	r0, r7, #1
 8009b50:	d1d6      	bne.n	8009b00 <_vfiprintf_r+0x1bc>
 8009b52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b54:	07d9      	lsls	r1, r3, #31
 8009b56:	d405      	bmi.n	8009b64 <_vfiprintf_r+0x220>
 8009b58:	89ab      	ldrh	r3, [r5, #12]
 8009b5a:	059a      	lsls	r2, r3, #22
 8009b5c:	d402      	bmi.n	8009b64 <_vfiprintf_r+0x220>
 8009b5e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b60:	f7fd fc9e 	bl	80074a0 <__retarget_lock_release_recursive>
 8009b64:	89ab      	ldrh	r3, [r5, #12]
 8009b66:	065b      	lsls	r3, r3, #25
 8009b68:	f53f af12 	bmi.w	8009990 <_vfiprintf_r+0x4c>
 8009b6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009b6e:	e711      	b.n	8009994 <_vfiprintf_r+0x50>
 8009b70:	ab03      	add	r3, sp, #12
 8009b72:	9300      	str	r3, [sp, #0]
 8009b74:	462a      	mov	r2, r5
 8009b76:	4b09      	ldr	r3, [pc, #36]	; (8009b9c <_vfiprintf_r+0x258>)
 8009b78:	a904      	add	r1, sp, #16
 8009b7a:	4630      	mov	r0, r6
 8009b7c:	f7fe f940 	bl	8007e00 <_printf_i>
 8009b80:	e7e4      	b.n	8009b4c <_vfiprintf_r+0x208>
 8009b82:	bf00      	nop
 8009b84:	0800fdb4 	.word	0x0800fdb4
 8009b88:	0800fdd4 	.word	0x0800fdd4
 8009b8c:	0800fd94 	.word	0x0800fd94
 8009b90:	08010014 	.word	0x08010014
 8009b94:	0801001e 	.word	0x0801001e
 8009b98:	080078b9 	.word	0x080078b9
 8009b9c:	0800991f 	.word	0x0800991f
 8009ba0:	0801001a 	.word	0x0801001a

08009ba4 <_read_r>:
 8009ba4:	b538      	push	{r3, r4, r5, lr}
 8009ba6:	4d07      	ldr	r5, [pc, #28]	; (8009bc4 <_read_r+0x20>)
 8009ba8:	4604      	mov	r4, r0
 8009baa:	4608      	mov	r0, r1
 8009bac:	4611      	mov	r1, r2
 8009bae:	2200      	movs	r2, #0
 8009bb0:	602a      	str	r2, [r5, #0]
 8009bb2:	461a      	mov	r2, r3
 8009bb4:	f7f8 fa4e 	bl	8002054 <_read>
 8009bb8:	1c43      	adds	r3, r0, #1
 8009bba:	d102      	bne.n	8009bc2 <_read_r+0x1e>
 8009bbc:	682b      	ldr	r3, [r5, #0]
 8009bbe:	b103      	cbz	r3, 8009bc2 <_read_r+0x1e>
 8009bc0:	6023      	str	r3, [r4, #0]
 8009bc2:	bd38      	pop	{r3, r4, r5, pc}
 8009bc4:	20000388 	.word	0x20000388

08009bc8 <wcvt>:
 8009bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bcc:	b085      	sub	sp, #20
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	461d      	mov	r5, r3
 8009bd2:	4614      	mov	r4, r2
 8009bd4:	bfbc      	itt	lt
 8009bd6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8009bda:	4614      	movlt	r4, r2
 8009bdc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009bde:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8009be0:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 8009be4:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
 8009be8:	bfb6      	itet	lt
 8009bea:	461d      	movlt	r5, r3
 8009bec:	2300      	movge	r3, #0
 8009bee:	232d      	movlt	r3, #45	; 0x2d
 8009bf0:	6013      	str	r3, [r2, #0]
 8009bf2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009bf4:	f023 0820 	bic.w	r8, r3, #32
 8009bf8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009bfc:	d005      	beq.n	8009c0a <wcvt+0x42>
 8009bfe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009c02:	d100      	bne.n	8009c06 <wcvt+0x3e>
 8009c04:	3601      	adds	r6, #1
 8009c06:	2102      	movs	r1, #2
 8009c08:	e000      	b.n	8009c0c <wcvt+0x44>
 8009c0a:	2103      	movs	r1, #3
 8009c0c:	ab03      	add	r3, sp, #12
 8009c0e:	9301      	str	r3, [sp, #4]
 8009c10:	ab02      	add	r3, sp, #8
 8009c12:	9300      	str	r3, [sp, #0]
 8009c14:	ec45 4b10 	vmov	d0, r4, r5
 8009c18:	4653      	mov	r3, sl
 8009c1a:	4632      	mov	r2, r6
 8009c1c:	f7fe fc9c 	bl	8008558 <_dtoa_r>
 8009c20:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009c24:	4607      	mov	r7, r0
 8009c26:	d112      	bne.n	8009c4e <wcvt+0x86>
 8009c28:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009c2a:	07db      	lsls	r3, r3, #31
 8009c2c:	d40f      	bmi.n	8009c4e <wcvt+0x86>
 8009c2e:	9b03      	ldr	r3, [sp, #12]
 8009c30:	1bdb      	subs	r3, r3, r7
 8009c32:	f8cb 3000 	str.w	r3, [fp]
 8009c36:	2300      	movs	r3, #0
 8009c38:	f8db 2000 	ldr.w	r2, [fp]
 8009c3c:	429a      	cmp	r2, r3
 8009c3e:	dd02      	ble.n	8009c46 <wcvt+0x7e>
 8009c40:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009c42:	4293      	cmp	r3, r2
 8009c44:	db2a      	blt.n	8009c9c <wcvt+0xd4>
 8009c46:	9814      	ldr	r0, [sp, #80]	; 0x50
 8009c48:	b005      	add	sp, #20
 8009c4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c4e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009c52:	eb07 0906 	add.w	r9, r7, r6
 8009c56:	d110      	bne.n	8009c7a <wcvt+0xb2>
 8009c58:	783b      	ldrb	r3, [r7, #0]
 8009c5a:	2b30      	cmp	r3, #48	; 0x30
 8009c5c:	d10a      	bne.n	8009c74 <wcvt+0xac>
 8009c5e:	2200      	movs	r2, #0
 8009c60:	2300      	movs	r3, #0
 8009c62:	4620      	mov	r0, r4
 8009c64:	4629      	mov	r1, r5
 8009c66:	f7f6 ff2f 	bl	8000ac8 <__aeabi_dcmpeq>
 8009c6a:	b918      	cbnz	r0, 8009c74 <wcvt+0xac>
 8009c6c:	f1c6 0601 	rsb	r6, r6, #1
 8009c70:	f8ca 6000 	str.w	r6, [sl]
 8009c74:	f8da 3000 	ldr.w	r3, [sl]
 8009c78:	4499      	add	r9, r3
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	4620      	mov	r0, r4
 8009c80:	4629      	mov	r1, r5
 8009c82:	f7f6 ff21 	bl	8000ac8 <__aeabi_dcmpeq>
 8009c86:	b108      	cbz	r0, 8009c8c <wcvt+0xc4>
 8009c88:	f8cd 900c 	str.w	r9, [sp, #12]
 8009c8c:	2230      	movs	r2, #48	; 0x30
 8009c8e:	9b03      	ldr	r3, [sp, #12]
 8009c90:	454b      	cmp	r3, r9
 8009c92:	d2cc      	bcs.n	8009c2e <wcvt+0x66>
 8009c94:	1c59      	adds	r1, r3, #1
 8009c96:	9103      	str	r1, [sp, #12]
 8009c98:	701a      	strb	r2, [r3, #0]
 8009c9a:	e7f8      	b.n	8009c8e <wcvt+0xc6>
 8009c9c:	9914      	ldr	r1, [sp, #80]	; 0x50
 8009c9e:	5cfa      	ldrb	r2, [r7, r3]
 8009ca0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009ca4:	3301      	adds	r3, #1
 8009ca6:	e7c7      	b.n	8009c38 <wcvt+0x70>

08009ca8 <_svfwprintf_r>:
 8009ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cac:	ed2d 8b04 	vpush	{d8-d9}
 8009cb0:	b0d3      	sub	sp, #332	; 0x14c
 8009cb2:	461d      	mov	r5, r3
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	4689      	mov	r9, r1
 8009cb8:	9319      	str	r3, [sp, #100]	; 0x64
 8009cba:	4683      	mov	fp, r0
 8009cbc:	920b      	str	r2, [sp, #44]	; 0x2c
 8009cbe:	f7ff fa5b 	bl	8009178 <_localeconv_r>
 8009cc2:	6803      	ldr	r3, [r0, #0]
 8009cc4:	781b      	ldrb	r3, [r3, #0]
 8009cc6:	9316      	str	r3, [sp, #88]	; 0x58
 8009cc8:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8009ccc:	061e      	lsls	r6, r3, #24
 8009cce:	d51a      	bpl.n	8009d06 <_svfwprintf_r+0x5e>
 8009cd0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009cd4:	b9bb      	cbnz	r3, 8009d06 <_svfwprintf_r+0x5e>
 8009cd6:	2140      	movs	r1, #64	; 0x40
 8009cd8:	4658      	mov	r0, fp
 8009cda:	f7fd fcd9 	bl	8007690 <_malloc_r>
 8009cde:	f8c9 0000 	str.w	r0, [r9]
 8009ce2:	f8c9 0010 	str.w	r0, [r9, #16]
 8009ce6:	b958      	cbnz	r0, 8009d00 <_svfwprintf_r+0x58>
 8009ce8:	230c      	movs	r3, #12
 8009cea:	f8cb 3000 	str.w	r3, [fp]
 8009cee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009cf2:	930d      	str	r3, [sp, #52]	; 0x34
 8009cf4:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009cf6:	b053      	add	sp, #332	; 0x14c
 8009cf8:	ecbd 8b04 	vpop	{d8-d9}
 8009cfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d00:	2340      	movs	r3, #64	; 0x40
 8009d02:	f8c9 3014 	str.w	r3, [r9, #20]
 8009d06:	ed9f 7b8e 	vldr	d7, [pc, #568]	; 8009f40 <_svfwprintf_r+0x298>
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	930f      	str	r3, [sp, #60]	; 0x3c
 8009d0e:	9311      	str	r3, [sp, #68]	; 0x44
 8009d10:	930d      	str	r3, [sp, #52]	; 0x34
 8009d12:	eeb0 8a47 	vmov.f32	s16, s14
 8009d16:	eef0 8a67 	vmov.f32	s17, s15
 8009d1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d1c:	461c      	mov	r4, r3
 8009d1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d22:	b10a      	cbz	r2, 8009d28 <_svfwprintf_r+0x80>
 8009d24:	2a25      	cmp	r2, #37	; 0x25
 8009d26:	d1f9      	bne.n	8009d1c <_svfwprintf_r+0x74>
 8009d28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d2a:	42a3      	cmp	r3, r4
 8009d2c:	d00d      	beq.n	8009d4a <_svfwprintf_r+0xa2>
 8009d2e:	1ae6      	subs	r6, r4, r3
 8009d30:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009d32:	4633      	mov	r3, r6
 8009d34:	4649      	mov	r1, r9
 8009d36:	4658      	mov	r0, fp
 8009d38:	f000 fe1d 	bl	800a976 <__ssputs_r>
 8009d3c:	3001      	adds	r0, #1
 8009d3e:	f000 80e9 	beq.w	8009f14 <_svfwprintf_r+0x26c>
 8009d42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d44:	eb03 03a6 	add.w	r3, r3, r6, asr #2
 8009d48:	930d      	str	r3, [sp, #52]	; 0x34
 8009d4a:	6823      	ldr	r3, [r4, #0]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	f000 80e1 	beq.w	8009f14 <_svfwprintf_r+0x26c>
 8009d52:	2100      	movs	r1, #0
 8009d54:	1d22      	adds	r2, r4, #4
 8009d56:	9115      	str	r1, [sp, #84]	; 0x54
 8009d58:	460e      	mov	r6, r1
 8009d5a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009d5e:	910c      	str	r1, [sp, #48]	; 0x30
 8009d60:	460f      	mov	r7, r1
 8009d62:	200a      	movs	r0, #10
 8009d64:	4613      	mov	r3, r2
 8009d66:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d6a:	9209      	str	r2, [sp, #36]	; 0x24
 8009d6c:	930b      	str	r3, [sp, #44]	; 0x2c
 8009d6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d70:	2b39      	cmp	r3, #57	; 0x39
 8009d72:	d84c      	bhi.n	8009e0e <_svfwprintf_r+0x166>
 8009d74:	2b1f      	cmp	r3, #31
 8009d76:	d94f      	bls.n	8009e18 <_svfwprintf_r+0x170>
 8009d78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d7a:	3b20      	subs	r3, #32
 8009d7c:	2b19      	cmp	r3, #25
 8009d7e:	d84a      	bhi.n	8009e16 <_svfwprintf_r+0x16e>
 8009d80:	e8df f003 	tbb	[pc, r3]
 8009d84:	7049496b 	.word	0x7049496b
 8009d88:	49494949 	.word	0x49494949
 8009d8c:	6c734949 	.word	0x6c734949
 8009d90:	497d7a49 	.word	0x497d7a49
 8009d94:	9b9b9b98 	.word	0x9b9b9b98
 8009d98:	9b9b9b9b 	.word	0x9b9b9b9b
 8009d9c:	9b9b      	.short	0x9b9b
 8009d9e:	2b33      	cmp	r3, #51	; 0x33
 8009da0:	d839      	bhi.n	8009e16 <_svfwprintf_r+0x16e>
 8009da2:	e8df f013 	tbh	[pc, r3, lsl #1]
 8009da6:	00e5      	.short	0x00e5
 8009da8:	00e50038 	.word	0x00e50038
 8009dac:	00380038 	.word	0x00380038
 8009db0:	00380038 	.word	0x00380038
 8009db4:	0038009c 	.word	0x0038009c
 8009db8:	00380038 	.word	0x00380038
 8009dbc:	00380038 	.word	0x00380038
 8009dc0:	00380038 	.word	0x00380038
 8009dc4:	00380038 	.word	0x00380038
 8009dc8:	00380038 	.word	0x00380038
 8009dcc:	0038031e 	.word	0x0038031e
 8009dd0:	00380038 	.word	0x00380038
 8009dd4:	00380038 	.word	0x00380038
 8009dd8:	00380038 	.word	0x00380038
 8009ddc:	00380038 	.word	0x00380038
 8009de0:	00a50038 	.word	0x00a50038
 8009de4:	00e500d3 	.word	0x00e500d3
 8009de8:	00e500e5 	.word	0x00e500e5
 8009dec:	00d3009f 	.word	0x00d3009f
 8009df0:	00380038 	.word	0x00380038
 8009df4:	003800a2 	.word	0x003800a2
 8009df8:	02950284 	.word	0x02950284
 8009dfc:	00a202b3 	.word	0x00a202b3
 8009e00:	02c20038 	.word	0x02c20038
 8009e04:	03120038 	.word	0x03120038
 8009e08:	00380038 	.word	0x00380038
 8009e0c:	0042      	.short	0x0042
 8009e0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e10:	3b45      	subs	r3, #69	; 0x45
 8009e12:	2b33      	cmp	r3, #51	; 0x33
 8009e14:	d9c3      	bls.n	8009d9e <_svfwprintf_r+0xf6>
 8009e16:	b111      	cbz	r1, 8009e1e <_svfwprintf_r+0x176>
 8009e18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d07a      	beq.n	8009f14 <_svfwprintf_r+0x26c>
 8009e1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e20:	932a      	str	r3, [sp, #168]	; 0xa8
 8009e22:	2000      	movs	r0, #0
 8009e24:	9015      	str	r0, [sp, #84]	; 0x54
 8009e26:	950a      	str	r5, [sp, #40]	; 0x28
 8009e28:	e081      	b.n	8009f2e <_svfwprintf_r+0x286>
 8009e2a:	b101      	cbz	r1, 8009e2e <_svfwprintf_r+0x186>
 8009e2c:	9615      	str	r6, [sp, #84]	; 0x54
 8009e2e:	4b46      	ldr	r3, [pc, #280]	; (8009f48 <_svfwprintf_r+0x2a0>)
 8009e30:	930f      	str	r3, [sp, #60]	; 0x3c
 8009e32:	462a      	mov	r2, r5
 8009e34:	06f8      	lsls	r0, r7, #27
 8009e36:	f852 3b04 	ldr.w	r3, [r2], #4
 8009e3a:	920a      	str	r2, [sp, #40]	; 0x28
 8009e3c:	d402      	bmi.n	8009e44 <_svfwprintf_r+0x19c>
 8009e3e:	0679      	lsls	r1, r7, #25
 8009e40:	bf48      	it	mi
 8009e42:	b29b      	uxthmi	r3, r3
 8009e44:	07fa      	lsls	r2, r7, #31
 8009e46:	d506      	bpl.n	8009e56 <_svfwprintf_r+0x1ae>
 8009e48:	b12b      	cbz	r3, 8009e56 <_svfwprintf_r+0x1ae>
 8009e4a:	2230      	movs	r2, #48	; 0x30
 8009e4c:	921a      	str	r2, [sp, #104]	; 0x68
 8009e4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e50:	921b      	str	r2, [sp, #108]	; 0x6c
 8009e52:	f047 0702 	orr.w	r7, r7, #2
 8009e56:	2202      	movs	r2, #2
 8009e58:	e242      	b.n	800a2e0 <_svfwprintf_r+0x638>
 8009e5a:	b90e      	cbnz	r6, 8009e60 <_svfwprintf_r+0x1b8>
 8009e5c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009e5e:	2101      	movs	r1, #1
 8009e60:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009e62:	e77f      	b.n	8009d64 <_svfwprintf_r+0xbc>
 8009e64:	f047 0701 	orr.w	r7, r7, #1
 8009e68:	e7fa      	b.n	8009e60 <_svfwprintf_r+0x1b8>
 8009e6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e6e:	930c      	str	r3, [sp, #48]	; 0x30
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	daf5      	bge.n	8009e60 <_svfwprintf_r+0x1b8>
 8009e74:	425b      	negs	r3, r3
 8009e76:	930c      	str	r3, [sp, #48]	; 0x30
 8009e78:	f047 0704 	orr.w	r7, r7, #4
 8009e7c:	e7f0      	b.n	8009e60 <_svfwprintf_r+0x1b8>
 8009e7e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009e80:	f852 3b04 	ldr.w	r3, [r2], #4
 8009e84:	9309      	str	r3, [sp, #36]	; 0x24
 8009e86:	2b2a      	cmp	r3, #42	; 0x2a
 8009e88:	d112      	bne.n	8009eb0 <_svfwprintf_r+0x208>
 8009e8a:	f855 4b04 	ldr.w	r4, [r5], #4
 8009e8e:	920b      	str	r2, [sp, #44]	; 0x2c
 8009e90:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
 8009e94:	e7e4      	b.n	8009e60 <_svfwprintf_r+0x1b8>
 8009e96:	fb00 3404 	mla	r4, r0, r4, r3
 8009e9a:	f852 3b04 	ldr.w	r3, [r2], #4
 8009e9e:	9309      	str	r3, [sp, #36]	; 0x24
 8009ea0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ea2:	3b30      	subs	r3, #48	; 0x30
 8009ea4:	2b09      	cmp	r3, #9
 8009ea6:	d9f6      	bls.n	8009e96 <_svfwprintf_r+0x1ee>
 8009ea8:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
 8009eac:	920b      	str	r2, [sp, #44]	; 0x2c
 8009eae:	e75e      	b.n	8009d6e <_svfwprintf_r+0xc6>
 8009eb0:	2400      	movs	r4, #0
 8009eb2:	e7f5      	b.n	8009ea0 <_svfwprintf_r+0x1f8>
 8009eb4:	f047 0780 	orr.w	r7, r7, #128	; 0x80
 8009eb8:	e7d2      	b.n	8009e60 <_svfwprintf_r+0x1b8>
 8009eba:	2300      	movs	r3, #0
 8009ebc:	930c      	str	r3, [sp, #48]	; 0x30
 8009ebe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009ec0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ec2:	fb00 3302 	mla	r3, r0, r2, r3
 8009ec6:	3b30      	subs	r3, #48	; 0x30
 8009ec8:	930c      	str	r3, [sp, #48]	; 0x30
 8009eca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ecc:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ed0:	930b      	str	r3, [sp, #44]	; 0x2c
 8009ed2:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009ed6:	2b09      	cmp	r3, #9
 8009ed8:	9209      	str	r2, [sp, #36]	; 0x24
 8009eda:	d9f0      	bls.n	8009ebe <_svfwprintf_r+0x216>
 8009edc:	e747      	b.n	8009d6e <_svfwprintf_r+0xc6>
 8009ede:	f047 0708 	orr.w	r7, r7, #8
 8009ee2:	e7bd      	b.n	8009e60 <_svfwprintf_r+0x1b8>
 8009ee4:	f047 0740 	orr.w	r7, r7, #64	; 0x40
 8009ee8:	e7ba      	b.n	8009e60 <_svfwprintf_r+0x1b8>
 8009eea:	f047 0710 	orr.w	r7, r7, #16
 8009eee:	e7b7      	b.n	8009e60 <_svfwprintf_r+0x1b8>
 8009ef0:	b101      	cbz	r1, 8009ef4 <_svfwprintf_r+0x24c>
 8009ef2:	9615      	str	r6, [sp, #84]	; 0x54
 8009ef4:	462b      	mov	r3, r5
 8009ef6:	06fd      	lsls	r5, r7, #27
 8009ef8:	f853 0b04 	ldr.w	r0, [r3], #4
 8009efc:	930a      	str	r3, [sp, #40]	; 0x28
 8009efe:	d412      	bmi.n	8009f26 <_svfwprintf_r+0x27e>
 8009f00:	f000 fc82 	bl	800a808 <btowc>
 8009f04:	1c44      	adds	r4, r0, #1
 8009f06:	d10e      	bne.n	8009f26 <_svfwprintf_r+0x27e>
 8009f08:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8009f0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f10:	f8a9 300c 	strh.w	r3, [r9, #12]
 8009f14:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8009f18:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009f1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f1e:	bf18      	it	ne
 8009f20:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 8009f24:	e6e5      	b.n	8009cf2 <_svfwprintf_r+0x4a>
 8009f26:	902a      	str	r0, [sp, #168]	; 0xa8
 8009f28:	2000      	movs	r0, #0
 8009f2a:	902b      	str	r0, [sp, #172]	; 0xac
 8009f2c:	9015      	str	r0, [sp, #84]	; 0x54
 8009f2e:	4680      	mov	r8, r0
 8009f30:	2401      	movs	r4, #1
 8009f32:	4606      	mov	r6, r0
 8009f34:	4605      	mov	r5, r0
 8009f36:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8009f3a:	e104      	b.n	800a146 <_svfwprintf_r+0x49e>
 8009f3c:	f3af 8000 	nop.w
	...
 8009f48:	080100ac 	.word	0x080100ac
 8009f4c:	b101      	cbz	r1, 8009f50 <_svfwprintf_r+0x2a8>
 8009f4e:	9615      	str	r6, [sp, #84]	; 0x54
 8009f50:	462a      	mov	r2, r5
 8009f52:	06f9      	lsls	r1, r7, #27
 8009f54:	f852 3b04 	ldr.w	r3, [r2], #4
 8009f58:	920a      	str	r2, [sp, #40]	; 0x28
 8009f5a:	d402      	bmi.n	8009f62 <_svfwprintf_r+0x2ba>
 8009f5c:	067a      	lsls	r2, r7, #25
 8009f5e:	bf48      	it	mi
 8009f60:	b21b      	sxthmi	r3, r3
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	da02      	bge.n	8009f6c <_svfwprintf_r+0x2c4>
 8009f66:	222d      	movs	r2, #45	; 0x2d
 8009f68:	425b      	negs	r3, r3
 8009f6a:	9215      	str	r2, [sp, #84]	; 0x54
 8009f6c:	2201      	movs	r2, #1
 8009f6e:	e1b9      	b.n	800a2e4 <_svfwprintf_r+0x63c>
 8009f70:	b101      	cbz	r1, 8009f74 <_svfwprintf_r+0x2cc>
 8009f72:	9615      	str	r6, [sp, #84]	; 0x54
 8009f74:	3507      	adds	r5, #7
 8009f76:	f025 0307 	bic.w	r3, r5, #7
 8009f7a:	ecb3 7b02 	vldmia	r3!, {d7}
 8009f7e:	930a      	str	r3, [sp, #40]	; 0x28
 8009f80:	eeb0 8a47 	vmov.f32	s16, s14
 8009f84:	eef0 8a67 	vmov.f32	s17, s15
 8009f88:	ee18 3a90 	vmov	r3, s17
 8009f8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009f90:	ee09 3a90 	vmov	s19, r3
 8009f94:	eeb0 9a47 	vmov.f32	s18, s14
 8009f98:	4ba6      	ldr	r3, [pc, #664]	; (800a234 <_svfwprintf_r+0x58c>)
 8009f9a:	ec51 0b19 	vmov	r0, r1, d9
 8009f9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009fa2:	f7f6 fdc3 	bl	8000b2c <__aeabi_dcmpun>
 8009fa6:	b9f0      	cbnz	r0, 8009fe6 <_svfwprintf_r+0x33e>
 8009fa8:	4ba2      	ldr	r3, [pc, #648]	; (800a234 <_svfwprintf_r+0x58c>)
 8009faa:	ec51 0b19 	vmov	r0, r1, d9
 8009fae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009fb2:	f7f6 fd9d 	bl	8000af0 <__aeabi_dcmple>
 8009fb6:	b9b0      	cbnz	r0, 8009fe6 <_svfwprintf_r+0x33e>
 8009fb8:	ec51 0b18 	vmov	r0, r1, d8
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	f7f6 fd8c 	bl	8000adc <__aeabi_dcmplt>
 8009fc4:	b108      	cbz	r0, 8009fca <_svfwprintf_r+0x322>
 8009fc6:	232d      	movs	r3, #45	; 0x2d
 8009fc8:	9315      	str	r3, [sp, #84]	; 0x54
 8009fca:	4b9b      	ldr	r3, [pc, #620]	; (800a238 <_svfwprintf_r+0x590>)
 8009fcc:	489b      	ldr	r0, [pc, #620]	; (800a23c <_svfwprintf_r+0x594>)
 8009fce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009fd0:	f027 0780 	bic.w	r7, r7, #128	; 0x80
 8009fd4:	2a47      	cmp	r2, #71	; 0x47
 8009fd6:	bf94      	ite	ls
 8009fd8:	469a      	movls	sl, r3
 8009fda:	4682      	movhi	sl, r0
 8009fdc:	f04f 0800 	mov.w	r8, #0
 8009fe0:	2403      	movs	r4, #3
 8009fe2:	4646      	mov	r6, r8
 8009fe4:	e3d4      	b.n	800a790 <_svfwprintf_r+0xae8>
 8009fe6:	ec53 2b18 	vmov	r2, r3, d8
 8009fea:	ec51 0b18 	vmov	r0, r1, d8
 8009fee:	f7f6 fd9d 	bl	8000b2c <__aeabi_dcmpun>
 8009ff2:	b140      	cbz	r0, 800a006 <_svfwprintf_r+0x35e>
 8009ff4:	ee18 3a90 	vmov	r3, s17
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	bfbc      	itt	lt
 8009ffc:	232d      	movlt	r3, #45	; 0x2d
 8009ffe:	9315      	strlt	r3, [sp, #84]	; 0x54
 800a000:	488f      	ldr	r0, [pc, #572]	; (800a240 <_svfwprintf_r+0x598>)
 800a002:	4b90      	ldr	r3, [pc, #576]	; (800a244 <_svfwprintf_r+0x59c>)
 800a004:	e7e3      	b.n	8009fce <_svfwprintf_r+0x326>
 800a006:	1c63      	adds	r3, r4, #1
 800a008:	f000 810f 	beq.w	800a22a <_svfwprintf_r+0x582>
 800a00c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a00e:	f023 0320 	bic.w	r3, r3, #32
 800a012:	2b47      	cmp	r3, #71	; 0x47
 800a014:	d102      	bne.n	800a01c <_svfwprintf_r+0x374>
 800a016:	2c00      	cmp	r4, #0
 800a018:	bf08      	it	eq
 800a01a:	2401      	moveq	r4, #1
 800a01c:	f447 7380 	orr.w	r3, r7, #256	; 0x100
 800a020:	930e      	str	r3, [sp, #56]	; 0x38
 800a022:	2328      	movs	r3, #40	; 0x28
 800a024:	9307      	str	r3, [sp, #28]
 800a026:	ab19      	add	r3, sp, #100	; 0x64
 800a028:	9305      	str	r3, [sp, #20]
 800a02a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a02c:	9304      	str	r3, [sp, #16]
 800a02e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a030:	f10d 08a8 	add.w	r8, sp, #168	; 0xa8
 800a034:	ae18      	add	r6, sp, #96	; 0x60
 800a036:	ad17      	add	r5, sp, #92	; 0x5c
 800a038:	e9cd 4300 	strd	r4, r3, [sp]
 800a03c:	f8cd 8018 	str.w	r8, [sp, #24]
 800a040:	ec53 2b18 	vmov	r2, r3, d8
 800a044:	9603      	str	r6, [sp, #12]
 800a046:	9502      	str	r5, [sp, #8]
 800a048:	4658      	mov	r0, fp
 800a04a:	f7ff fdbd 	bl	8009bc8 <wcvt>
 800a04e:	4540      	cmp	r0, r8
 800a050:	4682      	mov	sl, r0
 800a052:	f040 80ec 	bne.w	800a22e <_svfwprintf_r+0x586>
 800a056:	9919      	ldr	r1, [sp, #100]	; 0x64
 800a058:	2928      	cmp	r1, #40	; 0x28
 800a05a:	f340 80e8 	ble.w	800a22e <_svfwprintf_r+0x586>
 800a05e:	0089      	lsls	r1, r1, #2
 800a060:	4658      	mov	r0, fp
 800a062:	f7fd fb15 	bl	8007690 <_malloc_r>
 800a066:	4680      	mov	r8, r0
 800a068:	2800      	cmp	r0, #0
 800a06a:	f43f af4d 	beq.w	8009f08 <_svfwprintf_r+0x260>
 800a06e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a070:	9502      	str	r5, [sp, #8]
 800a072:	e9cd 0306 	strd	r0, r3, [sp, #24]
 800a076:	ab19      	add	r3, sp, #100	; 0x64
 800a078:	9305      	str	r3, [sp, #20]
 800a07a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a07c:	e9cd 6303 	strd	r6, r3, [sp, #12]
 800a080:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a082:	4658      	mov	r0, fp
 800a084:	e9cd 4300 	strd	r4, r3, [sp]
 800a088:	ec53 2b18 	vmov	r2, r3, d8
 800a08c:	f7ff fd9c 	bl	8009bc8 <wcvt>
 800a090:	4682      	mov	sl, r0
 800a092:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a094:	9d18      	ldr	r5, [sp, #96]	; 0x60
 800a096:	f023 0320 	bic.w	r3, r3, #32
 800a09a:	2b47      	cmp	r3, #71	; 0x47
 800a09c:	f040 80d6 	bne.w	800a24c <_svfwprintf_r+0x5a4>
 800a0a0:	1cee      	adds	r6, r5, #3
 800a0a2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a0a4:	db02      	blt.n	800a0ac <_svfwprintf_r+0x404>
 800a0a6:	42ac      	cmp	r4, r5
 800a0a8:	f280 80ec 	bge.w	800a284 <_svfwprintf_r+0x5dc>
 800a0ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0ae:	3b02      	subs	r3, #2
 800a0b0:	9309      	str	r3, [sp, #36]	; 0x24
 800a0b2:	1e6b      	subs	r3, r5, #1
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a0b8:	9318      	str	r3, [sp, #96]	; 0x60
 800a0ba:	bfb8      	it	lt
 800a0bc:	f1c5 0301 	rsblt	r3, r5, #1
 800a0c0:	921c      	str	r2, [sp, #112]	; 0x70
 800a0c2:	bfb4      	ite	lt
 800a0c4:	222d      	movlt	r2, #45	; 0x2d
 800a0c6:	222b      	movge	r2, #43	; 0x2b
 800a0c8:	2b09      	cmp	r3, #9
 800a0ca:	921d      	str	r2, [sp, #116]	; 0x74
 800a0cc:	f340 80d1 	ble.w	800a272 <_svfwprintf_r+0x5ca>
 800a0d0:	a82a      	add	r0, sp, #168	; 0xa8
 800a0d2:	250a      	movs	r5, #10
 800a0d4:	4602      	mov	r2, r0
 800a0d6:	fb93 f4f5 	sdiv	r4, r3, r5
 800a0da:	fb05 3114 	mls	r1, r5, r4, r3
 800a0de:	3130      	adds	r1, #48	; 0x30
 800a0e0:	f842 1c04 	str.w	r1, [r2, #-4]
 800a0e4:	4619      	mov	r1, r3
 800a0e6:	2963      	cmp	r1, #99	; 0x63
 800a0e8:	f1a0 0004 	sub.w	r0, r0, #4
 800a0ec:	4623      	mov	r3, r4
 800a0ee:	dcf1      	bgt.n	800a0d4 <_svfwprintf_r+0x42c>
 800a0f0:	3330      	adds	r3, #48	; 0x30
 800a0f2:	f840 3c04 	str.w	r3, [r0, #-4]
 800a0f6:	f1a2 0108 	sub.w	r1, r2, #8
 800a0fa:	a81e      	add	r0, sp, #120	; 0x78
 800a0fc:	ab2a      	add	r3, sp, #168	; 0xa8
 800a0fe:	4299      	cmp	r1, r3
 800a100:	f0c0 80b2 	bcc.w	800a268 <_svfwprintf_r+0x5c0>
 800a104:	f10d 04b3 	add.w	r4, sp, #179	; 0xb3
 800a108:	1aa4      	subs	r4, r4, r2
 800a10a:	f024 0403 	bic.w	r4, r4, #3
 800a10e:	3a0b      	subs	r2, #11
 800a110:	4293      	cmp	r3, r2
 800a112:	bf38      	it	cc
 800a114:	2400      	movcc	r4, #0
 800a116:	ab1e      	add	r3, sp, #120	; 0x78
 800a118:	441c      	add	r4, r3
 800a11a:	a81c      	add	r0, sp, #112	; 0x70
 800a11c:	1a24      	subs	r4, r4, r0
 800a11e:	10a3      	asrs	r3, r4, #2
 800a120:	9311      	str	r3, [sp, #68]	; 0x44
 800a122:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a124:	2b01      	cmp	r3, #1
 800a126:	eb03 04a4 	add.w	r4, r3, r4, asr #2
 800a12a:	dc02      	bgt.n	800a132 <_svfwprintf_r+0x48a>
 800a12c:	f017 0501 	ands.w	r5, r7, #1
 800a130:	d001      	beq.n	800a136 <_svfwprintf_r+0x48e>
 800a132:	3401      	adds	r4, #1
 800a134:	2500      	movs	r5, #0
 800a136:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800a138:	2e00      	cmp	r6, #0
 800a13a:	f000 817e 	beq.w	800a43a <_svfwprintf_r+0x792>
 800a13e:	232d      	movs	r3, #45	; 0x2d
 800a140:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800a142:	9315      	str	r3, [sp, #84]	; 0x54
 800a144:	2600      	movs	r6, #0
 800a146:	42a6      	cmp	r6, r4
 800a148:	4633      	mov	r3, r6
 800a14a:	bfb8      	it	lt
 800a14c:	4623      	movlt	r3, r4
 800a14e:	930e      	str	r3, [sp, #56]	; 0x38
 800a150:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a152:	b113      	cbz	r3, 800a15a <_svfwprintf_r+0x4b2>
 800a154:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a156:	3301      	adds	r3, #1
 800a158:	930e      	str	r3, [sp, #56]	; 0x38
 800a15a:	f017 0302 	ands.w	r3, r7, #2
 800a15e:	9312      	str	r3, [sp, #72]	; 0x48
 800a160:	bf1e      	ittt	ne
 800a162:	9b0e      	ldrne	r3, [sp, #56]	; 0x38
 800a164:	3302      	addne	r3, #2
 800a166:	930e      	strne	r3, [sp, #56]	; 0x38
 800a168:	f017 0384 	ands.w	r3, r7, #132	; 0x84
 800a16c:	9313      	str	r3, [sp, #76]	; 0x4c
 800a16e:	f000 8166 	beq.w	800a43e <_svfwprintf_r+0x796>
 800a172:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a174:	b143      	cbz	r3, 800a188 <_svfwprintf_r+0x4e0>
 800a176:	2304      	movs	r3, #4
 800a178:	aa15      	add	r2, sp, #84	; 0x54
 800a17a:	4649      	mov	r1, r9
 800a17c:	4658      	mov	r0, fp
 800a17e:	f000 fbfa 	bl	800a976 <__ssputs_r>
 800a182:	3001      	adds	r0, #1
 800a184:	f000 816e 	beq.w	800a464 <_svfwprintf_r+0x7bc>
 800a188:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a18a:	b143      	cbz	r3, 800a19e <_svfwprintf_r+0x4f6>
 800a18c:	2308      	movs	r3, #8
 800a18e:	aa1a      	add	r2, sp, #104	; 0x68
 800a190:	4649      	mov	r1, r9
 800a192:	4658      	mov	r0, fp
 800a194:	f000 fbef 	bl	800a976 <__ssputs_r>
 800a198:	3001      	adds	r0, #1
 800a19a:	f000 8163 	beq.w	800a464 <_svfwprintf_r+0x7bc>
 800a19e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a1a0:	2b80      	cmp	r3, #128	; 0x80
 800a1a2:	d113      	bne.n	800a1cc <_svfwprintf_r+0x524>
 800a1a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a1a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a1a8:	1a9b      	subs	r3, r3, r2
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	9310      	str	r3, [sp, #64]	; 0x40
 800a1ae:	dd0d      	ble.n	800a1cc <_svfwprintf_r+0x524>
 800a1b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a1b2:	4a25      	ldr	r2, [pc, #148]	; (800a248 <_svfwprintf_r+0x5a0>)
 800a1b4:	2b10      	cmp	r3, #16
 800a1b6:	f300 816a 	bgt.w	800a48e <_svfwprintf_r+0x7e6>
 800a1ba:	4a23      	ldr	r2, [pc, #140]	; (800a248 <_svfwprintf_r+0x5a0>)
 800a1bc:	009b      	lsls	r3, r3, #2
 800a1be:	4649      	mov	r1, r9
 800a1c0:	4658      	mov	r0, fp
 800a1c2:	f000 fbd8 	bl	800a976 <__ssputs_r>
 800a1c6:	3001      	adds	r0, #1
 800a1c8:	f000 814c 	beq.w	800a464 <_svfwprintf_r+0x7bc>
 800a1cc:	1b36      	subs	r6, r6, r4
 800a1ce:	2e00      	cmp	r6, #0
 800a1d0:	dd0c      	ble.n	800a1ec <_svfwprintf_r+0x544>
 800a1d2:	2e10      	cmp	r6, #16
 800a1d4:	4a1c      	ldr	r2, [pc, #112]	; (800a248 <_svfwprintf_r+0x5a0>)
 800a1d6:	f300 8165 	bgt.w	800a4a4 <_svfwprintf_r+0x7fc>
 800a1da:	4a1b      	ldr	r2, [pc, #108]	; (800a248 <_svfwprintf_r+0x5a0>)
 800a1dc:	00b3      	lsls	r3, r6, #2
 800a1de:	4649      	mov	r1, r9
 800a1e0:	4658      	mov	r0, fp
 800a1e2:	f000 fbc8 	bl	800a976 <__ssputs_r>
 800a1e6:	3001      	adds	r0, #1
 800a1e8:	f000 813c 	beq.w	800a464 <_svfwprintf_r+0x7bc>
 800a1ec:	05f9      	lsls	r1, r7, #23
 800a1ee:	f100 8162 	bmi.w	800a4b6 <_svfwprintf_r+0x80e>
 800a1f2:	00a3      	lsls	r3, r4, #2
 800a1f4:	4652      	mov	r2, sl
 800a1f6:	4649      	mov	r1, r9
 800a1f8:	4658      	mov	r0, fp
 800a1fa:	f000 fbbc 	bl	800a976 <__ssputs_r>
 800a1fe:	3001      	adds	r0, #1
 800a200:	f000 8130 	beq.w	800a464 <_svfwprintf_r+0x7bc>
 800a204:	077a      	lsls	r2, r7, #29
 800a206:	f100 8281 	bmi.w	800a70c <_svfwprintf_r+0xa64>
 800a20a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a20e:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a210:	428a      	cmp	r2, r1
 800a212:	bfac      	ite	ge
 800a214:	189b      	addge	r3, r3, r2
 800a216:	185b      	addlt	r3, r3, r1
 800a218:	930d      	str	r3, [sp, #52]	; 0x34
 800a21a:	f1b8 0f00 	cmp.w	r8, #0
 800a21e:	d055      	beq.n	800a2cc <_svfwprintf_r+0x624>
 800a220:	4641      	mov	r1, r8
 800a222:	4658      	mov	r0, fp
 800a224:	f7fd f9c8 	bl	80075b8 <_free_r>
 800a228:	e050      	b.n	800a2cc <_svfwprintf_r+0x624>
 800a22a:	2406      	movs	r4, #6
 800a22c:	e6f6      	b.n	800a01c <_svfwprintf_r+0x374>
 800a22e:	f04f 0800 	mov.w	r8, #0
 800a232:	e72e      	b.n	800a092 <_svfwprintf_r+0x3ea>
 800a234:	7fefffff 	.word	0x7fefffff
 800a238:	08010028 	.word	0x08010028
 800a23c:	08010038 	.word	0x08010038
 800a240:	08010058 	.word	0x08010058
 800a244:	08010048 	.word	0x08010048
 800a248:	08010138 	.word	0x08010138
 800a24c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a24e:	2b66      	cmp	r3, #102	; 0x66
 800a250:	f47f af2f 	bne.w	800a0b2 <_svfwprintf_r+0x40a>
 800a254:	f007 0301 	and.w	r3, r7, #1
 800a258:	2d00      	cmp	r5, #0
 800a25a:	ea43 0304 	orr.w	r3, r3, r4
 800a25e:	dd0e      	ble.n	800a27e <_svfwprintf_r+0x5d6>
 800a260:	b1fb      	cbz	r3, 800a2a2 <_svfwprintf_r+0x5fa>
 800a262:	3401      	adds	r4, #1
 800a264:	442c      	add	r4, r5
 800a266:	e766      	b.n	800a136 <_svfwprintf_r+0x48e>
 800a268:	f851 4b04 	ldr.w	r4, [r1], #4
 800a26c:	f840 4b04 	str.w	r4, [r0], #4
 800a270:	e745      	b.n	800a0fe <_svfwprintf_r+0x456>
 800a272:	2230      	movs	r2, #48	; 0x30
 800a274:	4413      	add	r3, r2
 800a276:	921e      	str	r2, [sp, #120]	; 0x78
 800a278:	931f      	str	r3, [sp, #124]	; 0x7c
 800a27a:	ac20      	add	r4, sp, #128	; 0x80
 800a27c:	e74d      	b.n	800a11a <_svfwprintf_r+0x472>
 800a27e:	b193      	cbz	r3, 800a2a6 <_svfwprintf_r+0x5fe>
 800a280:	3402      	adds	r4, #2
 800a282:	e758      	b.n	800a136 <_svfwprintf_r+0x48e>
 800a284:	42ab      	cmp	r3, r5
 800a286:	dc05      	bgt.n	800a294 <_svfwprintf_r+0x5ec>
 800a288:	07fc      	lsls	r4, r7, #31
 800a28a:	d50e      	bpl.n	800a2aa <_svfwprintf_r+0x602>
 800a28c:	1c6c      	adds	r4, r5, #1
 800a28e:	2367      	movs	r3, #103	; 0x67
 800a290:	9309      	str	r3, [sp, #36]	; 0x24
 800a292:	e750      	b.n	800a136 <_svfwprintf_r+0x48e>
 800a294:	2d00      	cmp	r5, #0
 800a296:	bfd4      	ite	le
 800a298:	f1c5 0402 	rsble	r4, r5, #2
 800a29c:	2401      	movgt	r4, #1
 800a29e:	441c      	add	r4, r3
 800a2a0:	e7f5      	b.n	800a28e <_svfwprintf_r+0x5e6>
 800a2a2:	462c      	mov	r4, r5
 800a2a4:	e747      	b.n	800a136 <_svfwprintf_r+0x48e>
 800a2a6:	2401      	movs	r4, #1
 800a2a8:	e745      	b.n	800a136 <_svfwprintf_r+0x48e>
 800a2aa:	462c      	mov	r4, r5
 800a2ac:	e7ef      	b.n	800a28e <_svfwprintf_r+0x5e6>
 800a2ae:	b101      	cbz	r1, 800a2b2 <_svfwprintf_r+0x60a>
 800a2b0:	9615      	str	r6, [sp, #84]	; 0x54
 800a2b2:	1d2b      	adds	r3, r5, #4
 800a2b4:	06f8      	lsls	r0, r7, #27
 800a2b6:	930a      	str	r3, [sp, #40]	; 0x28
 800a2b8:	d503      	bpl.n	800a2c2 <_svfwprintf_r+0x61a>
 800a2ba:	682b      	ldr	r3, [r5, #0]
 800a2bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a2be:	601a      	str	r2, [r3, #0]
 800a2c0:	e004      	b.n	800a2cc <_svfwprintf_r+0x624>
 800a2c2:	0679      	lsls	r1, r7, #25
 800a2c4:	d5f9      	bpl.n	800a2ba <_svfwprintf_r+0x612>
 800a2c6:	682b      	ldr	r3, [r5, #0]
 800a2c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a2ca:	801a      	strh	r2, [r3, #0]
 800a2cc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800a2ce:	e524      	b.n	8009d1a <_svfwprintf_r+0x72>
 800a2d0:	462a      	mov	r2, r5
 800a2d2:	f017 0110 	ands.w	r1, r7, #16
 800a2d6:	f852 3b04 	ldr.w	r3, [r2], #4
 800a2da:	920a      	str	r2, [sp, #40]	; 0x28
 800a2dc:	d011      	beq.n	800a302 <_svfwprintf_r+0x65a>
 800a2de:	2200      	movs	r2, #0
 800a2e0:	2100      	movs	r1, #0
 800a2e2:	9115      	str	r1, [sp, #84]	; 0x54
 800a2e4:	1c66      	adds	r6, r4, #1
 800a2e6:	f000 822e 	beq.w	800a746 <_svfwprintf_r+0xa9e>
 800a2ea:	f027 0180 	bic.w	r1, r7, #128	; 0x80
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	f040 822d 	bne.w	800a74e <_svfwprintf_r+0xaa6>
 800a2f4:	2c00      	cmp	r4, #0
 800a2f6:	f000 8098 	beq.w	800a42a <_svfwprintf_r+0x782>
 800a2fa:	2a01      	cmp	r2, #1
 800a2fc:	f040 822a 	bne.w	800a754 <_svfwprintf_r+0xaac>
 800a300:	e075      	b.n	800a3ee <_svfwprintf_r+0x746>
 800a302:	f017 0240 	ands.w	r2, r7, #64	; 0x40
 800a306:	d0eb      	beq.n	800a2e0 <_svfwprintf_r+0x638>
 800a308:	b29b      	uxth	r3, r3
 800a30a:	e7e8      	b.n	800a2de <_svfwprintf_r+0x636>
 800a30c:	462a      	mov	r2, r5
 800a30e:	2178      	movs	r1, #120	; 0x78
 800a310:	f852 3b04 	ldr.w	r3, [r2], #4
 800a314:	920a      	str	r2, [sp, #40]	; 0x28
 800a316:	2230      	movs	r2, #48	; 0x30
 800a318:	e9cd 211a 	strd	r2, r1, [sp, #104]	; 0x68
 800a31c:	4a9e      	ldr	r2, [pc, #632]	; (800a598 <_svfwprintf_r+0x8f0>)
 800a31e:	920f      	str	r2, [sp, #60]	; 0x3c
 800a320:	f047 0702 	orr.w	r7, r7, #2
 800a324:	2202      	movs	r2, #2
 800a326:	9109      	str	r1, [sp, #36]	; 0x24
 800a328:	e7da      	b.n	800a2e0 <_svfwprintf_r+0x638>
 800a32a:	462b      	mov	r3, r5
 800a32c:	2600      	movs	r6, #0
 800a32e:	f853 ab04 	ldr.w	sl, [r3], #4
 800a332:	930a      	str	r3, [sp, #40]	; 0x28
 800a334:	f017 0510 	ands.w	r5, r7, #16
 800a338:	9615      	str	r6, [sp, #84]	; 0x54
 800a33a:	d12d      	bne.n	800a398 <_svfwprintf_r+0x6f0>
 800a33c:	1c62      	adds	r2, r4, #1
 800a33e:	d014      	beq.n	800a36a <_svfwprintf_r+0x6c2>
 800a340:	4622      	mov	r2, r4
 800a342:	4629      	mov	r1, r5
 800a344:	4650      	mov	r0, sl
 800a346:	4626      	mov	r6, r4
 800a348:	f7f5 ff4a 	bl	80001e0 <memchr>
 800a34c:	b108      	cbz	r0, 800a352 <_svfwprintf_r+0x6aa>
 800a34e:	eba0 060a 	sub.w	r6, r0, sl
 800a352:	2e27      	cmp	r6, #39	; 0x27
 800a354:	d90e      	bls.n	800a374 <_svfwprintf_r+0x6cc>
 800a356:	1c71      	adds	r1, r6, #1
 800a358:	0089      	lsls	r1, r1, #2
 800a35a:	4658      	mov	r0, fp
 800a35c:	f7fd f998 	bl	8007690 <_malloc_r>
 800a360:	2800      	cmp	r0, #0
 800a362:	f43f add1 	beq.w	8009f08 <_svfwprintf_r+0x260>
 800a366:	4680      	mov	r8, r0
 800a368:	e007      	b.n	800a37a <_svfwprintf_r+0x6d2>
 800a36a:	4650      	mov	r0, sl
 800a36c:	f7f5 ff30 	bl	80001d0 <strlen>
 800a370:	4606      	mov	r6, r0
 800a372:	e7ee      	b.n	800a352 <_svfwprintf_r+0x6aa>
 800a374:	f04f 0800 	mov.w	r8, #0
 800a378:	a82a      	add	r0, sp, #168	; 0xa8
 800a37a:	4634      	mov	r4, r6
 800a37c:	2300      	movs	r3, #0
 800a37e:	42b3      	cmp	r3, r6
 800a380:	d104      	bne.n	800a38c <_svfwprintf_r+0x6e4>
 800a382:	2600      	movs	r6, #0
 800a384:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 800a388:	4682      	mov	sl, r0
 800a38a:	e6dc      	b.n	800a146 <_svfwprintf_r+0x49e>
 800a38c:	f81a 2003 	ldrb.w	r2, [sl, r3]
 800a390:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 800a394:	3301      	adds	r3, #1
 800a396:	e7f2      	b.n	800a37e <_svfwprintf_r+0x6d6>
 800a398:	1c63      	adds	r3, r4, #1
 800a39a:	d011      	beq.n	800a3c0 <_svfwprintf_r+0x718>
 800a39c:	4622      	mov	r2, r4
 800a39e:	4631      	mov	r1, r6
 800a3a0:	4650      	mov	r0, sl
 800a3a2:	f000 fa04 	bl	800a7ae <wmemchr>
 800a3a6:	4680      	mov	r8, r0
 800a3a8:	2800      	cmp	r0, #0
 800a3aa:	f43f ae1a 	beq.w	8009fe2 <_svfwprintf_r+0x33a>
 800a3ae:	eba0 080a 	sub.w	r8, r0, sl
 800a3b2:	ea4f 08a8 	mov.w	r8, r8, asr #2
 800a3b6:	4544      	cmp	r4, r8
 800a3b8:	bfa8      	it	ge
 800a3ba:	4644      	movge	r4, r8
 800a3bc:	46b0      	mov	r8, r6
 800a3be:	e610      	b.n	8009fe2 <_svfwprintf_r+0x33a>
 800a3c0:	4650      	mov	r0, sl
 800a3c2:	f000 f9eb 	bl	800a79c <wcslen>
 800a3c6:	4604      	mov	r4, r0
 800a3c8:	e7f8      	b.n	800a3bc <_svfwprintf_r+0x714>
 800a3ca:	462a      	mov	r2, r5
 800a3cc:	06fe      	lsls	r6, r7, #27
 800a3ce:	f852 3b04 	ldr.w	r3, [r2], #4
 800a3d2:	920a      	str	r2, [sp, #40]	; 0x28
 800a3d4:	d501      	bpl.n	800a3da <_svfwprintf_r+0x732>
 800a3d6:	2201      	movs	r2, #1
 800a3d8:	e782      	b.n	800a2e0 <_svfwprintf_r+0x638>
 800a3da:	067d      	lsls	r5, r7, #25
 800a3dc:	bf48      	it	mi
 800a3de:	b29b      	uxthmi	r3, r3
 800a3e0:	e7f9      	b.n	800a3d6 <_svfwprintf_r+0x72e>
 800a3e2:	b101      	cbz	r1, 800a3e6 <_svfwprintf_r+0x73e>
 800a3e4:	9615      	str	r6, [sp, #84]	; 0x54
 800a3e6:	4b6d      	ldr	r3, [pc, #436]	; (800a59c <_svfwprintf_r+0x8f4>)
 800a3e8:	e522      	b.n	8009e30 <_svfwprintf_r+0x188>
 800a3ea:	2b09      	cmp	r3, #9
 800a3ec:	d804      	bhi.n	800a3f8 <_svfwprintf_r+0x750>
 800a3ee:	3330      	adds	r3, #48	; 0x30
 800a3f0:	9351      	str	r3, [sp, #324]	; 0x144
 800a3f2:	f50d 7aa2 	add.w	sl, sp, #324	; 0x144
 800a3f6:	e1c3      	b.n	800a780 <_svfwprintf_r+0xad8>
 800a3f8:	f50d 7aa4 	add.w	sl, sp, #328	; 0x148
 800a3fc:	250a      	movs	r5, #10
 800a3fe:	fbb3 f0f5 	udiv	r0, r3, r5
 800a402:	fb05 3210 	mls	r2, r5, r0, r3
 800a406:	3230      	adds	r2, #48	; 0x30
 800a408:	f84a 2d04 	str.w	r2, [sl, #-4]!
 800a40c:	461a      	mov	r2, r3
 800a40e:	2a09      	cmp	r2, #9
 800a410:	4603      	mov	r3, r0
 800a412:	d8f4      	bhi.n	800a3fe <_svfwprintf_r+0x756>
 800a414:	e1b4      	b.n	800a780 <_svfwprintf_r+0xad8>
 800a416:	f003 020f 	and.w	r2, r3, #15
 800a41a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800a41c:	091b      	lsrs	r3, r3, #4
 800a41e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800a422:	f84a 2d04 	str.w	r2, [sl, #-4]!
 800a426:	d1f6      	bne.n	800a416 <_svfwprintf_r+0x76e>
 800a428:	e1aa      	b.n	800a780 <_svfwprintf_r+0xad8>
 800a42a:	b91a      	cbnz	r2, 800a434 <_svfwprintf_r+0x78c>
 800a42c:	07f8      	lsls	r0, r7, #31
 800a42e:	d501      	bpl.n	800a434 <_svfwprintf_r+0x78c>
 800a430:	2330      	movs	r3, #48	; 0x30
 800a432:	e7dd      	b.n	800a3f0 <_svfwprintf_r+0x748>
 800a434:	f50d 7aa4 	add.w	sl, sp, #328	; 0x148
 800a438:	e1a2      	b.n	800a780 <_svfwprintf_r+0xad8>
 800a43a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800a43c:	e683      	b.n	800a146 <_svfwprintf_r+0x49e>
 800a43e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a440:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a442:	1a9b      	subs	r3, r3, r2
 800a444:	2b00      	cmp	r3, #0
 800a446:	9310      	str	r3, [sp, #64]	; 0x40
 800a448:	f77f ae93 	ble.w	800a172 <_svfwprintf_r+0x4ca>
 800a44c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a44e:	2b10      	cmp	r3, #16
 800a450:	dc11      	bgt.n	800a476 <_svfwprintf_r+0x7ce>
 800a452:	4a53      	ldr	r2, [pc, #332]	; (800a5a0 <_svfwprintf_r+0x8f8>)
 800a454:	009b      	lsls	r3, r3, #2
 800a456:	4649      	mov	r1, r9
 800a458:	4658      	mov	r0, fp
 800a45a:	f000 fa8c 	bl	800a976 <__ssputs_r>
 800a45e:	3001      	adds	r0, #1
 800a460:	f47f ae87 	bne.w	800a172 <_svfwprintf_r+0x4ca>
 800a464:	f1b8 0f00 	cmp.w	r8, #0
 800a468:	f43f ad54 	beq.w	8009f14 <_svfwprintf_r+0x26c>
 800a46c:	4641      	mov	r1, r8
 800a46e:	4658      	mov	r0, fp
 800a470:	f7fd f8a2 	bl	80075b8 <_free_r>
 800a474:	e54e      	b.n	8009f14 <_svfwprintf_r+0x26c>
 800a476:	4a4a      	ldr	r2, [pc, #296]	; (800a5a0 <_svfwprintf_r+0x8f8>)
 800a478:	2340      	movs	r3, #64	; 0x40
 800a47a:	4649      	mov	r1, r9
 800a47c:	4658      	mov	r0, fp
 800a47e:	f000 fa7a 	bl	800a976 <__ssputs_r>
 800a482:	3001      	adds	r0, #1
 800a484:	d0ee      	beq.n	800a464 <_svfwprintf_r+0x7bc>
 800a486:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a488:	3b10      	subs	r3, #16
 800a48a:	9310      	str	r3, [sp, #64]	; 0x40
 800a48c:	e7de      	b.n	800a44c <_svfwprintf_r+0x7a4>
 800a48e:	2340      	movs	r3, #64	; 0x40
 800a490:	4649      	mov	r1, r9
 800a492:	4658      	mov	r0, fp
 800a494:	f000 fa6f 	bl	800a976 <__ssputs_r>
 800a498:	3001      	adds	r0, #1
 800a49a:	d0e3      	beq.n	800a464 <_svfwprintf_r+0x7bc>
 800a49c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a49e:	3b10      	subs	r3, #16
 800a4a0:	9310      	str	r3, [sp, #64]	; 0x40
 800a4a2:	e685      	b.n	800a1b0 <_svfwprintf_r+0x508>
 800a4a4:	2340      	movs	r3, #64	; 0x40
 800a4a6:	4649      	mov	r1, r9
 800a4a8:	4658      	mov	r0, fp
 800a4aa:	f000 fa64 	bl	800a976 <__ssputs_r>
 800a4ae:	3001      	adds	r0, #1
 800a4b0:	d0d8      	beq.n	800a464 <_svfwprintf_r+0x7bc>
 800a4b2:	3e10      	subs	r6, #16
 800a4b4:	e68d      	b.n	800a1d2 <_svfwprintf_r+0x52a>
 800a4b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4b8:	2b65      	cmp	r3, #101	; 0x65
 800a4ba:	f240 80e5 	bls.w	800a688 <_svfwprintf_r+0x9e0>
 800a4be:	ec51 0b18 	vmov	r0, r1, d8
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	f7f6 faff 	bl	8000ac8 <__aeabi_dcmpeq>
 800a4ca:	b358      	cbz	r0, 800a524 <_svfwprintf_r+0x87c>
 800a4cc:	4a35      	ldr	r2, [pc, #212]	; (800a5a4 <_svfwprintf_r+0x8fc>)
 800a4ce:	2304      	movs	r3, #4
 800a4d0:	4649      	mov	r1, r9
 800a4d2:	4658      	mov	r0, fp
 800a4d4:	f000 fa4f 	bl	800a976 <__ssputs_r>
 800a4d8:	3001      	adds	r0, #1
 800a4da:	d0c3      	beq.n	800a464 <_svfwprintf_r+0x7bc>
 800a4dc:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800a4e0:	429a      	cmp	r2, r3
 800a4e2:	db02      	blt.n	800a4ea <_svfwprintf_r+0x842>
 800a4e4:	07fb      	lsls	r3, r7, #31
 800a4e6:	f57f ae8d 	bpl.w	800a204 <_svfwprintf_r+0x55c>
 800a4ea:	2304      	movs	r3, #4
 800a4ec:	aa16      	add	r2, sp, #88	; 0x58
 800a4ee:	4649      	mov	r1, r9
 800a4f0:	4658      	mov	r0, fp
 800a4f2:	f000 fa40 	bl	800a976 <__ssputs_r>
 800a4f6:	3001      	adds	r0, #1
 800a4f8:	d0b4      	beq.n	800a464 <_svfwprintf_r+0x7bc>
 800a4fa:	9c19      	ldr	r4, [sp, #100]	; 0x64
 800a4fc:	3c01      	subs	r4, #1
 800a4fe:	2c00      	cmp	r4, #0
 800a500:	f77f ae80 	ble.w	800a204 <_svfwprintf_r+0x55c>
 800a504:	4d28      	ldr	r5, [pc, #160]	; (800a5a8 <_svfwprintf_r+0x900>)
 800a506:	2c10      	cmp	r4, #16
 800a508:	dc02      	bgt.n	800a510 <_svfwprintf_r+0x868>
 800a50a:	00a3      	lsls	r3, r4, #2
 800a50c:	4a26      	ldr	r2, [pc, #152]	; (800a5a8 <_svfwprintf_r+0x900>)
 800a50e:	e672      	b.n	800a1f6 <_svfwprintf_r+0x54e>
 800a510:	2340      	movs	r3, #64	; 0x40
 800a512:	462a      	mov	r2, r5
 800a514:	4649      	mov	r1, r9
 800a516:	4658      	mov	r0, fp
 800a518:	f000 fa2d 	bl	800a976 <__ssputs_r>
 800a51c:	3001      	adds	r0, #1
 800a51e:	d0a1      	beq.n	800a464 <_svfwprintf_r+0x7bc>
 800a520:	3c10      	subs	r4, #16
 800a522:	e7f0      	b.n	800a506 <_svfwprintf_r+0x85e>
 800a524:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800a526:	2b00      	cmp	r3, #0
 800a528:	dc40      	bgt.n	800a5ac <_svfwprintf_r+0x904>
 800a52a:	4a1e      	ldr	r2, [pc, #120]	; (800a5a4 <_svfwprintf_r+0x8fc>)
 800a52c:	2304      	movs	r3, #4
 800a52e:	4649      	mov	r1, r9
 800a530:	4658      	mov	r0, fp
 800a532:	f000 fa20 	bl	800a976 <__ssputs_r>
 800a536:	3001      	adds	r0, #1
 800a538:	d094      	beq.n	800a464 <_svfwprintf_r+0x7bc>
 800a53a:	e9dd 3218 	ldrd	r3, r2, [sp, #96]	; 0x60
 800a53e:	4313      	orrs	r3, r2
 800a540:	f007 0201 	and.w	r2, r7, #1
 800a544:	4313      	orrs	r3, r2
 800a546:	f43f ae5d 	beq.w	800a204 <_svfwprintf_r+0x55c>
 800a54a:	2304      	movs	r3, #4
 800a54c:	aa16      	add	r2, sp, #88	; 0x58
 800a54e:	4649      	mov	r1, r9
 800a550:	4658      	mov	r0, fp
 800a552:	f000 fa10 	bl	800a976 <__ssputs_r>
 800a556:	3001      	adds	r0, #1
 800a558:	d084      	beq.n	800a464 <_svfwprintf_r+0x7bc>
 800a55a:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800a55c:	2c00      	cmp	r4, #0
 800a55e:	da0c      	bge.n	800a57a <_svfwprintf_r+0x8d2>
 800a560:	4d11      	ldr	r5, [pc, #68]	; (800a5a8 <_svfwprintf_r+0x900>)
 800a562:	4264      	negs	r4, r4
 800a564:	2c10      	cmp	r4, #16
 800a566:	dc0b      	bgt.n	800a580 <_svfwprintf_r+0x8d8>
 800a568:	4a0f      	ldr	r2, [pc, #60]	; (800a5a8 <_svfwprintf_r+0x900>)
 800a56a:	00a3      	lsls	r3, r4, #2
 800a56c:	4649      	mov	r1, r9
 800a56e:	4658      	mov	r0, fp
 800a570:	f000 fa01 	bl	800a976 <__ssputs_r>
 800a574:	3001      	adds	r0, #1
 800a576:	f43f af75 	beq.w	800a464 <_svfwprintf_r+0x7bc>
 800a57a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a57c:	009b      	lsls	r3, r3, #2
 800a57e:	e639      	b.n	800a1f4 <_svfwprintf_r+0x54c>
 800a580:	2340      	movs	r3, #64	; 0x40
 800a582:	462a      	mov	r2, r5
 800a584:	4649      	mov	r1, r9
 800a586:	4658      	mov	r0, fp
 800a588:	f000 f9f5 	bl	800a976 <__ssputs_r>
 800a58c:	3001      	adds	r0, #1
 800a58e:	f43f af69 	beq.w	800a464 <_svfwprintf_r+0x7bc>
 800a592:	3c10      	subs	r4, #16
 800a594:	e7e6      	b.n	800a564 <_svfwprintf_r+0x8bc>
 800a596:	bf00      	nop
 800a598:	080100ac 	.word	0x080100ac
 800a59c:	08010068 	.word	0x08010068
 800a5a0:	080100f8 	.word	0x080100f8
 800a5a4:	080100f0 	.word	0x080100f0
 800a5a8:	08010138 	.word	0x08010138
 800a5ac:	9c19      	ldr	r4, [sp, #100]	; 0x64
 800a5ae:	f344 041d 	sbfx	r4, r4, #0, #30
 800a5b2:	42ac      	cmp	r4, r5
 800a5b4:	bfa8      	it	ge
 800a5b6:	462c      	movge	r4, r5
 800a5b8:	2c00      	cmp	r4, #0
 800a5ba:	dc20      	bgt.n	800a5fe <_svfwprintf_r+0x956>
 800a5bc:	2c00      	cmp	r4, #0
 800a5be:	bfac      	ite	ge
 800a5c0:	1b2e      	subge	r6, r5, r4
 800a5c2:	462e      	movlt	r6, r5
 800a5c4:	2e00      	cmp	r6, #0
 800a5c6:	dd0b      	ble.n	800a5e0 <_svfwprintf_r+0x938>
 800a5c8:	4c72      	ldr	r4, [pc, #456]	; (800a794 <_svfwprintf_r+0xaec>)
 800a5ca:	2e10      	cmp	r6, #16
 800a5cc:	dc20      	bgt.n	800a610 <_svfwprintf_r+0x968>
 800a5ce:	4a71      	ldr	r2, [pc, #452]	; (800a794 <_svfwprintf_r+0xaec>)
 800a5d0:	00b3      	lsls	r3, r6, #2
 800a5d2:	4649      	mov	r1, r9
 800a5d4:	4658      	mov	r0, fp
 800a5d6:	f000 f9ce 	bl	800a976 <__ssputs_r>
 800a5da:	3001      	adds	r0, #1
 800a5dc:	f43f af42 	beq.w	800a464 <_svfwprintf_r+0x7bc>
 800a5e0:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800a5e4:	429a      	cmp	r2, r3
 800a5e6:	ea4f 0585 	mov.w	r5, r5, lsl #2
 800a5ea:	da1c      	bge.n	800a626 <_svfwprintf_r+0x97e>
 800a5ec:	2304      	movs	r3, #4
 800a5ee:	aa16      	add	r2, sp, #88	; 0x58
 800a5f0:	4649      	mov	r1, r9
 800a5f2:	4658      	mov	r0, fp
 800a5f4:	f000 f9bf 	bl	800a976 <__ssputs_r>
 800a5f8:	3001      	adds	r0, #1
 800a5fa:	d116      	bne.n	800a62a <_svfwprintf_r+0x982>
 800a5fc:	e732      	b.n	800a464 <_svfwprintf_r+0x7bc>
 800a5fe:	00a3      	lsls	r3, r4, #2
 800a600:	4652      	mov	r2, sl
 800a602:	4649      	mov	r1, r9
 800a604:	4658      	mov	r0, fp
 800a606:	f000 f9b6 	bl	800a976 <__ssputs_r>
 800a60a:	3001      	adds	r0, #1
 800a60c:	d1d6      	bne.n	800a5bc <_svfwprintf_r+0x914>
 800a60e:	e729      	b.n	800a464 <_svfwprintf_r+0x7bc>
 800a610:	2340      	movs	r3, #64	; 0x40
 800a612:	4622      	mov	r2, r4
 800a614:	4649      	mov	r1, r9
 800a616:	4658      	mov	r0, fp
 800a618:	f000 f9ad 	bl	800a976 <__ssputs_r>
 800a61c:	3001      	adds	r0, #1
 800a61e:	f43f af21 	beq.w	800a464 <_svfwprintf_r+0x7bc>
 800a622:	3e10      	subs	r6, #16
 800a624:	e7d1      	b.n	800a5ca <_svfwprintf_r+0x922>
 800a626:	07fe      	lsls	r6, r7, #31
 800a628:	d4e0      	bmi.n	800a5ec <_svfwprintf_r+0x944>
 800a62a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a62c:	ebc5 0483 	rsb	r4, r5, r3, lsl #2
 800a630:	10a2      	asrs	r2, r4, #2
 800a632:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800a634:	1b1c      	subs	r4, r3, r4
 800a636:	4294      	cmp	r4, r2
 800a638:	bfa8      	it	ge
 800a63a:	4614      	movge	r4, r2
 800a63c:	2c00      	cmp	r4, #0
 800a63e:	dd09      	ble.n	800a654 <_svfwprintf_r+0x9ac>
 800a640:	00a3      	lsls	r3, r4, #2
 800a642:	eb0a 0205 	add.w	r2, sl, r5
 800a646:	4649      	mov	r1, r9
 800a648:	4658      	mov	r0, fp
 800a64a:	f000 f994 	bl	800a976 <__ssputs_r>
 800a64e:	3001      	adds	r0, #1
 800a650:	f43f af08 	beq.w	800a464 <_svfwprintf_r+0x7bc>
 800a654:	e9dd 3518 	ldrd	r3, r5, [sp, #96]	; 0x60
 800a658:	2c00      	cmp	r4, #0
 800a65a:	eba5 0503 	sub.w	r5, r5, r3
 800a65e:	bfa8      	it	ge
 800a660:	1b2d      	subge	r5, r5, r4
 800a662:	2d00      	cmp	r5, #0
 800a664:	f77f adce 	ble.w	800a204 <_svfwprintf_r+0x55c>
 800a668:	4c4a      	ldr	r4, [pc, #296]	; (800a794 <_svfwprintf_r+0xaec>)
 800a66a:	2d10      	cmp	r5, #16
 800a66c:	dc01      	bgt.n	800a672 <_svfwprintf_r+0x9ca>
 800a66e:	00ab      	lsls	r3, r5, #2
 800a670:	e74c      	b.n	800a50c <_svfwprintf_r+0x864>
 800a672:	2340      	movs	r3, #64	; 0x40
 800a674:	4622      	mov	r2, r4
 800a676:	4649      	mov	r1, r9
 800a678:	4658      	mov	r0, fp
 800a67a:	f000 f97c 	bl	800a976 <__ssputs_r>
 800a67e:	3001      	adds	r0, #1
 800a680:	f43f aef0 	beq.w	800a464 <_svfwprintf_r+0x7bc>
 800a684:	3d10      	subs	r5, #16
 800a686:	e7f0      	b.n	800a66a <_svfwprintf_r+0x9c2>
 800a688:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a68a:	2b01      	cmp	r3, #1
 800a68c:	4652      	mov	r2, sl
 800a68e:	f04f 0304 	mov.w	r3, #4
 800a692:	4649      	mov	r1, r9
 800a694:	4658      	mov	r0, fp
 800a696:	dc01      	bgt.n	800a69c <_svfwprintf_r+0x9f4>
 800a698:	07fc      	lsls	r4, r7, #31
 800a69a:	d51b      	bpl.n	800a6d4 <_svfwprintf_r+0xa2c>
 800a69c:	f000 f96b 	bl	800a976 <__ssputs_r>
 800a6a0:	3001      	adds	r0, #1
 800a6a2:	f43f aedf 	beq.w	800a464 <_svfwprintf_r+0x7bc>
 800a6a6:	2304      	movs	r3, #4
 800a6a8:	aa16      	add	r2, sp, #88	; 0x58
 800a6aa:	4649      	mov	r1, r9
 800a6ac:	4658      	mov	r0, fp
 800a6ae:	f000 f962 	bl	800a976 <__ssputs_r>
 800a6b2:	3001      	adds	r0, #1
 800a6b4:	f43f aed6 	beq.w	800a464 <_svfwprintf_r+0x7bc>
 800a6b8:	9c19      	ldr	r4, [sp, #100]	; 0x64
 800a6ba:	ec51 0b18 	vmov	r0, r1, d8
 800a6be:	2200      	movs	r2, #0
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	3c01      	subs	r4, #1
 800a6c4:	f7f6 fa00 	bl	8000ac8 <__aeabi_dcmpeq>
 800a6c8:	b968      	cbnz	r0, 800a6e6 <_svfwprintf_r+0xa3e>
 800a6ca:	00a3      	lsls	r3, r4, #2
 800a6cc:	f10a 0204 	add.w	r2, sl, #4
 800a6d0:	4649      	mov	r1, r9
 800a6d2:	4658      	mov	r0, fp
 800a6d4:	f000 f94f 	bl	800a976 <__ssputs_r>
 800a6d8:	3001      	adds	r0, #1
 800a6da:	f43f aec3 	beq.w	800a464 <_svfwprintf_r+0x7bc>
 800a6de:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a6e0:	aa1c      	add	r2, sp, #112	; 0x70
 800a6e2:	009b      	lsls	r3, r3, #2
 800a6e4:	e587      	b.n	800a1f6 <_svfwprintf_r+0x54e>
 800a6e6:	2c00      	cmp	r4, #0
 800a6e8:	ddf9      	ble.n	800a6de <_svfwprintf_r+0xa36>
 800a6ea:	4d2a      	ldr	r5, [pc, #168]	; (800a794 <_svfwprintf_r+0xaec>)
 800a6ec:	2c10      	cmp	r4, #16
 800a6ee:	dc02      	bgt.n	800a6f6 <_svfwprintf_r+0xa4e>
 800a6f0:	4a28      	ldr	r2, [pc, #160]	; (800a794 <_svfwprintf_r+0xaec>)
 800a6f2:	00a3      	lsls	r3, r4, #2
 800a6f4:	e7ec      	b.n	800a6d0 <_svfwprintf_r+0xa28>
 800a6f6:	2340      	movs	r3, #64	; 0x40
 800a6f8:	462a      	mov	r2, r5
 800a6fa:	4649      	mov	r1, r9
 800a6fc:	4658      	mov	r0, fp
 800a6fe:	f000 f93a 	bl	800a976 <__ssputs_r>
 800a702:	3001      	adds	r0, #1
 800a704:	f43f aeae 	beq.w	800a464 <_svfwprintf_r+0x7bc>
 800a708:	3c10      	subs	r4, #16
 800a70a:	e7ef      	b.n	800a6ec <_svfwprintf_r+0xa44>
 800a70c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a70e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a710:	1a9c      	subs	r4, r3, r2
 800a712:	2c00      	cmp	r4, #0
 800a714:	f77f ad79 	ble.w	800a20a <_svfwprintf_r+0x562>
 800a718:	2c10      	cmp	r4, #16
 800a71a:	dc09      	bgt.n	800a730 <_svfwprintf_r+0xa88>
 800a71c:	4a1e      	ldr	r2, [pc, #120]	; (800a798 <_svfwprintf_r+0xaf0>)
 800a71e:	00a3      	lsls	r3, r4, #2
 800a720:	4649      	mov	r1, r9
 800a722:	4658      	mov	r0, fp
 800a724:	f000 f927 	bl	800a976 <__ssputs_r>
 800a728:	3001      	adds	r0, #1
 800a72a:	f47f ad6e 	bne.w	800a20a <_svfwprintf_r+0x562>
 800a72e:	e699      	b.n	800a464 <_svfwprintf_r+0x7bc>
 800a730:	4a19      	ldr	r2, [pc, #100]	; (800a798 <_svfwprintf_r+0xaf0>)
 800a732:	2340      	movs	r3, #64	; 0x40
 800a734:	4649      	mov	r1, r9
 800a736:	4658      	mov	r0, fp
 800a738:	f000 f91d 	bl	800a976 <__ssputs_r>
 800a73c:	3001      	adds	r0, #1
 800a73e:	f43f ae91 	beq.w	800a464 <_svfwprintf_r+0x7bc>
 800a742:	3c10      	subs	r4, #16
 800a744:	e7e8      	b.n	800a718 <_svfwprintf_r+0xa70>
 800a746:	4639      	mov	r1, r7
 800a748:	2b00      	cmp	r3, #0
 800a74a:	f43f add6 	beq.w	800a2fa <_svfwprintf_r+0x652>
 800a74e:	2a01      	cmp	r2, #1
 800a750:	f43f ae4b 	beq.w	800a3ea <_svfwprintf_r+0x742>
 800a754:	2a02      	cmp	r2, #2
 800a756:	f50d 7aa4 	add.w	sl, sp, #328	; 0x148
 800a75a:	f43f ae5c 	beq.w	800a416 <_svfwprintf_r+0x76e>
 800a75e:	f003 0207 	and.w	r2, r3, #7
 800a762:	3230      	adds	r2, #48	; 0x30
 800a764:	08db      	lsrs	r3, r3, #3
 800a766:	4650      	mov	r0, sl
 800a768:	f84a 2d04 	str.w	r2, [sl, #-4]!
 800a76c:	d1f7      	bne.n	800a75e <_svfwprintf_r+0xab6>
 800a76e:	07cd      	lsls	r5, r1, #31
 800a770:	d506      	bpl.n	800a780 <_svfwprintf_r+0xad8>
 800a772:	2a30      	cmp	r2, #48	; 0x30
 800a774:	d004      	beq.n	800a780 <_svfwprintf_r+0xad8>
 800a776:	2330      	movs	r3, #48	; 0x30
 800a778:	f84a 3c04 	str.w	r3, [sl, #-4]
 800a77c:	f1a0 0a08 	sub.w	sl, r0, #8
 800a780:	ab52      	add	r3, sp, #328	; 0x148
 800a782:	4626      	mov	r6, r4
 800a784:	eba3 040a 	sub.w	r4, r3, sl
 800a788:	10a4      	asrs	r4, r4, #2
 800a78a:	460f      	mov	r7, r1
 800a78c:	f04f 0800 	mov.w	r8, #0
 800a790:	4645      	mov	r5, r8
 800a792:	e4d8      	b.n	800a146 <_svfwprintf_r+0x49e>
 800a794:	08010138 	.word	0x08010138
 800a798:	080100f8 	.word	0x080100f8

0800a79c <wcslen>:
 800a79c:	4602      	mov	r2, r0
 800a79e:	4613      	mov	r3, r2
 800a7a0:	3204      	adds	r2, #4
 800a7a2:	6819      	ldr	r1, [r3, #0]
 800a7a4:	2900      	cmp	r1, #0
 800a7a6:	d1fa      	bne.n	800a79e <wcslen+0x2>
 800a7a8:	1a18      	subs	r0, r3, r0
 800a7aa:	1080      	asrs	r0, r0, #2
 800a7ac:	4770      	bx	lr

0800a7ae <wmemchr>:
 800a7ae:	b530      	push	{r4, r5, lr}
 800a7b0:	2400      	movs	r4, #0
 800a7b2:	4294      	cmp	r4, r2
 800a7b4:	4603      	mov	r3, r0
 800a7b6:	d102      	bne.n	800a7be <wmemchr+0x10>
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	bd30      	pop	{r4, r5, pc}
 800a7be:	681d      	ldr	r5, [r3, #0]
 800a7c0:	428d      	cmp	r5, r1
 800a7c2:	f100 0004 	add.w	r0, r0, #4
 800a7c6:	d0f8      	beq.n	800a7ba <wmemchr+0xc>
 800a7c8:	3401      	adds	r4, #1
 800a7ca:	e7f2      	b.n	800a7b2 <wmemchr+0x4>

0800a7cc <__assert_func>:
 800a7cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a7ce:	4614      	mov	r4, r2
 800a7d0:	461a      	mov	r2, r3
 800a7d2:	4b09      	ldr	r3, [pc, #36]	; (800a7f8 <__assert_func+0x2c>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	4605      	mov	r5, r0
 800a7d8:	68d8      	ldr	r0, [r3, #12]
 800a7da:	b14c      	cbz	r4, 800a7f0 <__assert_func+0x24>
 800a7dc:	4b07      	ldr	r3, [pc, #28]	; (800a7fc <__assert_func+0x30>)
 800a7de:	9100      	str	r1, [sp, #0]
 800a7e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a7e4:	4906      	ldr	r1, [pc, #24]	; (800a800 <__assert_func+0x34>)
 800a7e6:	462b      	mov	r3, r5
 800a7e8:	f000 f858 	bl	800a89c <fiprintf>
 800a7ec:	f000 f92b 	bl	800aa46 <abort>
 800a7f0:	4b04      	ldr	r3, [pc, #16]	; (800a804 <__assert_func+0x38>)
 800a7f2:	461c      	mov	r4, r3
 800a7f4:	e7f3      	b.n	800a7de <__assert_func+0x12>
 800a7f6:	bf00      	nop
 800a7f8:	20000014 	.word	0x20000014
 800a7fc:	08010178 	.word	0x08010178
 800a800:	08010185 	.word	0x08010185
 800a804:	080101b3 	.word	0x080101b3

0800a808 <btowc>:
 800a808:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a80a:	1c43      	adds	r3, r0, #1
 800a80c:	b087      	sub	sp, #28
 800a80e:	d103      	bne.n	800a818 <btowc+0x10>
 800a810:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a814:	b007      	add	sp, #28
 800a816:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a818:	4d1c      	ldr	r5, [pc, #112]	; (800a88c <btowc+0x84>)
 800a81a:	f88d 000b 	strb.w	r0, [sp, #11]
 800a81e:	ae04      	add	r6, sp, #16
 800a820:	2208      	movs	r2, #8
 800a822:	2100      	movs	r1, #0
 800a824:	4630      	mov	r0, r6
 800a826:	f7fc febf 	bl	80075a8 <memset>
 800a82a:	682f      	ldr	r7, [r5, #0]
 800a82c:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800a82e:	b9fc      	cbnz	r4, 800a870 <btowc+0x68>
 800a830:	2050      	movs	r0, #80	; 0x50
 800a832:	f7fc fe9b 	bl	800756c <malloc>
 800a836:	4602      	mov	r2, r0
 800a838:	65b8      	str	r0, [r7, #88]	; 0x58
 800a83a:	b920      	cbnz	r0, 800a846 <btowc+0x3e>
 800a83c:	4b14      	ldr	r3, [pc, #80]	; (800a890 <btowc+0x88>)
 800a83e:	4815      	ldr	r0, [pc, #84]	; (800a894 <btowc+0x8c>)
 800a840:	2118      	movs	r1, #24
 800a842:	f7ff ffc3 	bl	800a7cc <__assert_func>
 800a846:	682b      	ldr	r3, [r5, #0]
 800a848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a84a:	e9c3 4400 	strd	r4, r4, [r3]
 800a84e:	e9c3 4402 	strd	r4, r4, [r3, #8]
 800a852:	e9c3 4404 	strd	r4, r4, [r3, #16]
 800a856:	e9c3 440a 	strd	r4, r4, [r3, #40]	; 0x28
 800a85a:	e9c3 440c 	strd	r4, r4, [r3, #48]	; 0x30
 800a85e:	e9c3 440e 	strd	r4, r4, [r3, #56]	; 0x38
 800a862:	e9c3 4410 	strd	r4, r4, [r3, #64]	; 0x40
 800a866:	e9c3 4412 	strd	r4, r4, [r3, #72]	; 0x48
 800a86a:	619c      	str	r4, [r3, #24]
 800a86c:	771c      	strb	r4, [r3, #28]
 800a86e:	625c      	str	r4, [r3, #36]	; 0x24
 800a870:	4b09      	ldr	r3, [pc, #36]	; (800a898 <btowc+0x90>)
 800a872:	9600      	str	r6, [sp, #0]
 800a874:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
 800a878:	6828      	ldr	r0, [r5, #0]
 800a87a:	2301      	movs	r3, #1
 800a87c:	f10d 020b 	add.w	r2, sp, #11
 800a880:	a903      	add	r1, sp, #12
 800a882:	47a0      	blx	r4
 800a884:	2801      	cmp	r0, #1
 800a886:	d8c3      	bhi.n	800a810 <btowc+0x8>
 800a888:	9803      	ldr	r0, [sp, #12]
 800a88a:	e7c3      	b.n	800a814 <btowc+0xc>
 800a88c:	20000014 	.word	0x20000014
 800a890:	0800fe39 	.word	0x0800fe39
 800a894:	080101b4 	.word	0x080101b4
 800a898:	20000078 	.word	0x20000078

0800a89c <fiprintf>:
 800a89c:	b40e      	push	{r1, r2, r3}
 800a89e:	b503      	push	{r0, r1, lr}
 800a8a0:	4601      	mov	r1, r0
 800a8a2:	ab03      	add	r3, sp, #12
 800a8a4:	4805      	ldr	r0, [pc, #20]	; (800a8bc <fiprintf+0x20>)
 800a8a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8aa:	6800      	ldr	r0, [r0, #0]
 800a8ac:	9301      	str	r3, [sp, #4]
 800a8ae:	f7ff f849 	bl	8009944 <_vfiprintf_r>
 800a8b2:	b002      	add	sp, #8
 800a8b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a8b8:	b003      	add	sp, #12
 800a8ba:	4770      	bx	lr
 800a8bc:	20000014 	.word	0x20000014

0800a8c0 <__ascii_mbtowc>:
 800a8c0:	b082      	sub	sp, #8
 800a8c2:	b901      	cbnz	r1, 800a8c6 <__ascii_mbtowc+0x6>
 800a8c4:	a901      	add	r1, sp, #4
 800a8c6:	b142      	cbz	r2, 800a8da <__ascii_mbtowc+0x1a>
 800a8c8:	b14b      	cbz	r3, 800a8de <__ascii_mbtowc+0x1e>
 800a8ca:	7813      	ldrb	r3, [r2, #0]
 800a8cc:	600b      	str	r3, [r1, #0]
 800a8ce:	7812      	ldrb	r2, [r2, #0]
 800a8d0:	1e10      	subs	r0, r2, #0
 800a8d2:	bf18      	it	ne
 800a8d4:	2001      	movne	r0, #1
 800a8d6:	b002      	add	sp, #8
 800a8d8:	4770      	bx	lr
 800a8da:	4610      	mov	r0, r2
 800a8dc:	e7fb      	b.n	800a8d6 <__ascii_mbtowc+0x16>
 800a8de:	f06f 0001 	mvn.w	r0, #1
 800a8e2:	e7f8      	b.n	800a8d6 <__ascii_mbtowc+0x16>

0800a8e4 <memmove>:
 800a8e4:	4288      	cmp	r0, r1
 800a8e6:	b510      	push	{r4, lr}
 800a8e8:	eb01 0402 	add.w	r4, r1, r2
 800a8ec:	d902      	bls.n	800a8f4 <memmove+0x10>
 800a8ee:	4284      	cmp	r4, r0
 800a8f0:	4623      	mov	r3, r4
 800a8f2:	d807      	bhi.n	800a904 <memmove+0x20>
 800a8f4:	1e43      	subs	r3, r0, #1
 800a8f6:	42a1      	cmp	r1, r4
 800a8f8:	d008      	beq.n	800a90c <memmove+0x28>
 800a8fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a8fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a902:	e7f8      	b.n	800a8f6 <memmove+0x12>
 800a904:	4402      	add	r2, r0
 800a906:	4601      	mov	r1, r0
 800a908:	428a      	cmp	r2, r1
 800a90a:	d100      	bne.n	800a90e <memmove+0x2a>
 800a90c:	bd10      	pop	{r4, pc}
 800a90e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a912:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a916:	e7f7      	b.n	800a908 <memmove+0x24>

0800a918 <_realloc_r>:
 800a918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a91c:	4680      	mov	r8, r0
 800a91e:	4614      	mov	r4, r2
 800a920:	460e      	mov	r6, r1
 800a922:	b921      	cbnz	r1, 800a92e <_realloc_r+0x16>
 800a924:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a928:	4611      	mov	r1, r2
 800a92a:	f7fc beb1 	b.w	8007690 <_malloc_r>
 800a92e:	b92a      	cbnz	r2, 800a93c <_realloc_r+0x24>
 800a930:	f7fc fe42 	bl	80075b8 <_free_r>
 800a934:	4625      	mov	r5, r4
 800a936:	4628      	mov	r0, r5
 800a938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a93c:	f000 f88a 	bl	800aa54 <_malloc_usable_size_r>
 800a940:	4284      	cmp	r4, r0
 800a942:	4607      	mov	r7, r0
 800a944:	d802      	bhi.n	800a94c <_realloc_r+0x34>
 800a946:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a94a:	d812      	bhi.n	800a972 <_realloc_r+0x5a>
 800a94c:	4621      	mov	r1, r4
 800a94e:	4640      	mov	r0, r8
 800a950:	f7fc fe9e 	bl	8007690 <_malloc_r>
 800a954:	4605      	mov	r5, r0
 800a956:	2800      	cmp	r0, #0
 800a958:	d0ed      	beq.n	800a936 <_realloc_r+0x1e>
 800a95a:	42bc      	cmp	r4, r7
 800a95c:	4622      	mov	r2, r4
 800a95e:	4631      	mov	r1, r6
 800a960:	bf28      	it	cs
 800a962:	463a      	movcs	r2, r7
 800a964:	f7fc fe12 	bl	800758c <memcpy>
 800a968:	4631      	mov	r1, r6
 800a96a:	4640      	mov	r0, r8
 800a96c:	f7fc fe24 	bl	80075b8 <_free_r>
 800a970:	e7e1      	b.n	800a936 <_realloc_r+0x1e>
 800a972:	4635      	mov	r5, r6
 800a974:	e7df      	b.n	800a936 <_realloc_r+0x1e>

0800a976 <__ssputs_r>:
 800a976:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a97a:	688e      	ldr	r6, [r1, #8]
 800a97c:	429e      	cmp	r6, r3
 800a97e:	4682      	mov	sl, r0
 800a980:	460c      	mov	r4, r1
 800a982:	4690      	mov	r8, r2
 800a984:	461f      	mov	r7, r3
 800a986:	d838      	bhi.n	800a9fa <__ssputs_r+0x84>
 800a988:	898a      	ldrh	r2, [r1, #12]
 800a98a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a98e:	d032      	beq.n	800a9f6 <__ssputs_r+0x80>
 800a990:	6825      	ldr	r5, [r4, #0]
 800a992:	6909      	ldr	r1, [r1, #16]
 800a994:	eba5 0901 	sub.w	r9, r5, r1
 800a998:	6965      	ldr	r5, [r4, #20]
 800a99a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a99e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a9a2:	3301      	adds	r3, #1
 800a9a4:	444b      	add	r3, r9
 800a9a6:	106d      	asrs	r5, r5, #1
 800a9a8:	429d      	cmp	r5, r3
 800a9aa:	bf38      	it	cc
 800a9ac:	461d      	movcc	r5, r3
 800a9ae:	0553      	lsls	r3, r2, #21
 800a9b0:	d531      	bpl.n	800aa16 <__ssputs_r+0xa0>
 800a9b2:	4629      	mov	r1, r5
 800a9b4:	f7fc fe6c 	bl	8007690 <_malloc_r>
 800a9b8:	4606      	mov	r6, r0
 800a9ba:	b950      	cbnz	r0, 800a9d2 <__ssputs_r+0x5c>
 800a9bc:	230c      	movs	r3, #12
 800a9be:	f8ca 3000 	str.w	r3, [sl]
 800a9c2:	89a3      	ldrh	r3, [r4, #12]
 800a9c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a9c8:	81a3      	strh	r3, [r4, #12]
 800a9ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a9ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9d2:	6921      	ldr	r1, [r4, #16]
 800a9d4:	464a      	mov	r2, r9
 800a9d6:	f7fc fdd9 	bl	800758c <memcpy>
 800a9da:	89a3      	ldrh	r3, [r4, #12]
 800a9dc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a9e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9e4:	81a3      	strh	r3, [r4, #12]
 800a9e6:	6126      	str	r6, [r4, #16]
 800a9e8:	6165      	str	r5, [r4, #20]
 800a9ea:	444e      	add	r6, r9
 800a9ec:	eba5 0509 	sub.w	r5, r5, r9
 800a9f0:	6026      	str	r6, [r4, #0]
 800a9f2:	60a5      	str	r5, [r4, #8]
 800a9f4:	463e      	mov	r6, r7
 800a9f6:	42be      	cmp	r6, r7
 800a9f8:	d900      	bls.n	800a9fc <__ssputs_r+0x86>
 800a9fa:	463e      	mov	r6, r7
 800a9fc:	6820      	ldr	r0, [r4, #0]
 800a9fe:	4632      	mov	r2, r6
 800aa00:	4641      	mov	r1, r8
 800aa02:	f7ff ff6f 	bl	800a8e4 <memmove>
 800aa06:	68a3      	ldr	r3, [r4, #8]
 800aa08:	1b9b      	subs	r3, r3, r6
 800aa0a:	60a3      	str	r3, [r4, #8]
 800aa0c:	6823      	ldr	r3, [r4, #0]
 800aa0e:	4433      	add	r3, r6
 800aa10:	6023      	str	r3, [r4, #0]
 800aa12:	2000      	movs	r0, #0
 800aa14:	e7db      	b.n	800a9ce <__ssputs_r+0x58>
 800aa16:	462a      	mov	r2, r5
 800aa18:	f7ff ff7e 	bl	800a918 <_realloc_r>
 800aa1c:	4606      	mov	r6, r0
 800aa1e:	2800      	cmp	r0, #0
 800aa20:	d1e1      	bne.n	800a9e6 <__ssputs_r+0x70>
 800aa22:	6921      	ldr	r1, [r4, #16]
 800aa24:	4650      	mov	r0, sl
 800aa26:	f7fc fdc7 	bl	80075b8 <_free_r>
 800aa2a:	e7c7      	b.n	800a9bc <__ssputs_r+0x46>

0800aa2c <__ascii_wctomb>:
 800aa2c:	b149      	cbz	r1, 800aa42 <__ascii_wctomb+0x16>
 800aa2e:	2aff      	cmp	r2, #255	; 0xff
 800aa30:	bf85      	ittet	hi
 800aa32:	238a      	movhi	r3, #138	; 0x8a
 800aa34:	6003      	strhi	r3, [r0, #0]
 800aa36:	700a      	strbls	r2, [r1, #0]
 800aa38:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800aa3c:	bf98      	it	ls
 800aa3e:	2001      	movls	r0, #1
 800aa40:	4770      	bx	lr
 800aa42:	4608      	mov	r0, r1
 800aa44:	4770      	bx	lr

0800aa46 <abort>:
 800aa46:	b508      	push	{r3, lr}
 800aa48:	2006      	movs	r0, #6
 800aa4a:	f000 f833 	bl	800aab4 <raise>
 800aa4e:	2001      	movs	r0, #1
 800aa50:	f7f7 faf6 	bl	8002040 <_exit>

0800aa54 <_malloc_usable_size_r>:
 800aa54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa58:	1f18      	subs	r0, r3, #4
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	bfbc      	itt	lt
 800aa5e:	580b      	ldrlt	r3, [r1, r0]
 800aa60:	18c0      	addlt	r0, r0, r3
 800aa62:	4770      	bx	lr

0800aa64 <_raise_r>:
 800aa64:	291f      	cmp	r1, #31
 800aa66:	b538      	push	{r3, r4, r5, lr}
 800aa68:	4604      	mov	r4, r0
 800aa6a:	460d      	mov	r5, r1
 800aa6c:	d904      	bls.n	800aa78 <_raise_r+0x14>
 800aa6e:	2316      	movs	r3, #22
 800aa70:	6003      	str	r3, [r0, #0]
 800aa72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aa76:	bd38      	pop	{r3, r4, r5, pc}
 800aa78:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800aa7a:	b112      	cbz	r2, 800aa82 <_raise_r+0x1e>
 800aa7c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aa80:	b94b      	cbnz	r3, 800aa96 <_raise_r+0x32>
 800aa82:	4620      	mov	r0, r4
 800aa84:	f000 f830 	bl	800aae8 <_getpid_r>
 800aa88:	462a      	mov	r2, r5
 800aa8a:	4601      	mov	r1, r0
 800aa8c:	4620      	mov	r0, r4
 800aa8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aa92:	f000 b817 	b.w	800aac4 <_kill_r>
 800aa96:	2b01      	cmp	r3, #1
 800aa98:	d00a      	beq.n	800aab0 <_raise_r+0x4c>
 800aa9a:	1c59      	adds	r1, r3, #1
 800aa9c:	d103      	bne.n	800aaa6 <_raise_r+0x42>
 800aa9e:	2316      	movs	r3, #22
 800aaa0:	6003      	str	r3, [r0, #0]
 800aaa2:	2001      	movs	r0, #1
 800aaa4:	e7e7      	b.n	800aa76 <_raise_r+0x12>
 800aaa6:	2400      	movs	r4, #0
 800aaa8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800aaac:	4628      	mov	r0, r5
 800aaae:	4798      	blx	r3
 800aab0:	2000      	movs	r0, #0
 800aab2:	e7e0      	b.n	800aa76 <_raise_r+0x12>

0800aab4 <raise>:
 800aab4:	4b02      	ldr	r3, [pc, #8]	; (800aac0 <raise+0xc>)
 800aab6:	4601      	mov	r1, r0
 800aab8:	6818      	ldr	r0, [r3, #0]
 800aaba:	f7ff bfd3 	b.w	800aa64 <_raise_r>
 800aabe:	bf00      	nop
 800aac0:	20000014 	.word	0x20000014

0800aac4 <_kill_r>:
 800aac4:	b538      	push	{r3, r4, r5, lr}
 800aac6:	4d07      	ldr	r5, [pc, #28]	; (800aae4 <_kill_r+0x20>)
 800aac8:	2300      	movs	r3, #0
 800aaca:	4604      	mov	r4, r0
 800aacc:	4608      	mov	r0, r1
 800aace:	4611      	mov	r1, r2
 800aad0:	602b      	str	r3, [r5, #0]
 800aad2:	f7f7 faa5 	bl	8002020 <_kill>
 800aad6:	1c43      	adds	r3, r0, #1
 800aad8:	d102      	bne.n	800aae0 <_kill_r+0x1c>
 800aada:	682b      	ldr	r3, [r5, #0]
 800aadc:	b103      	cbz	r3, 800aae0 <_kill_r+0x1c>
 800aade:	6023      	str	r3, [r4, #0]
 800aae0:	bd38      	pop	{r3, r4, r5, pc}
 800aae2:	bf00      	nop
 800aae4:	20000388 	.word	0x20000388

0800aae8 <_getpid_r>:
 800aae8:	f7f7 ba92 	b.w	8002010 <_getpid>
 800aaec:	0000      	movs	r0, r0
	...

0800aaf0 <exp>:
 800aaf0:	b538      	push	{r3, r4, r5, lr}
 800aaf2:	ed2d 8b02 	vpush	{d8}
 800aaf6:	ec55 4b10 	vmov	r4, r5, d0
 800aafa:	f000 f8b1 	bl	800ac60 <__ieee754_exp>
 800aafe:	eeb0 8a40 	vmov.f32	s16, s0
 800ab02:	eef0 8a60 	vmov.f32	s17, s1
 800ab06:	ec45 4b10 	vmov	d0, r4, r5
 800ab0a:	f001 f846 	bl	800bb9a <finite>
 800ab0e:	b168      	cbz	r0, 800ab2c <exp+0x3c>
 800ab10:	a317      	add	r3, pc, #92	; (adr r3, 800ab70 <exp+0x80>)
 800ab12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab16:	4620      	mov	r0, r4
 800ab18:	4629      	mov	r1, r5
 800ab1a:	f7f5 fffd 	bl	8000b18 <__aeabi_dcmpgt>
 800ab1e:	b160      	cbz	r0, 800ab3a <exp+0x4a>
 800ab20:	f7fc fada 	bl	80070d8 <__errno>
 800ab24:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 800ab60 <exp+0x70>
 800ab28:	2322      	movs	r3, #34	; 0x22
 800ab2a:	6003      	str	r3, [r0, #0]
 800ab2c:	eeb0 0a48 	vmov.f32	s0, s16
 800ab30:	eef0 0a68 	vmov.f32	s1, s17
 800ab34:	ecbd 8b02 	vpop	{d8}
 800ab38:	bd38      	pop	{r3, r4, r5, pc}
 800ab3a:	a30f      	add	r3, pc, #60	; (adr r3, 800ab78 <exp+0x88>)
 800ab3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab40:	4620      	mov	r0, r4
 800ab42:	4629      	mov	r1, r5
 800ab44:	f7f5 ffca 	bl	8000adc <__aeabi_dcmplt>
 800ab48:	2800      	cmp	r0, #0
 800ab4a:	d0ef      	beq.n	800ab2c <exp+0x3c>
 800ab4c:	f7fc fac4 	bl	80070d8 <__errno>
 800ab50:	2322      	movs	r3, #34	; 0x22
 800ab52:	ed9f 8b05 	vldr	d8, [pc, #20]	; 800ab68 <exp+0x78>
 800ab56:	6003      	str	r3, [r0, #0]
 800ab58:	e7e8      	b.n	800ab2c <exp+0x3c>
 800ab5a:	bf00      	nop
 800ab5c:	f3af 8000 	nop.w
 800ab60:	00000000 	.word	0x00000000
 800ab64:	7ff00000 	.word	0x7ff00000
	...
 800ab70:	fefa39ef 	.word	0xfefa39ef
 800ab74:	40862e42 	.word	0x40862e42
 800ab78:	d52d3051 	.word	0xd52d3051
 800ab7c:	c0874910 	.word	0xc0874910

0800ab80 <pow>:
 800ab80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab82:	ed2d 8b02 	vpush	{d8}
 800ab86:	eeb0 8a40 	vmov.f32	s16, s0
 800ab8a:	eef0 8a60 	vmov.f32	s17, s1
 800ab8e:	ec55 4b11 	vmov	r4, r5, d1
 800ab92:	f000 f9e9 	bl	800af68 <__ieee754_pow>
 800ab96:	4622      	mov	r2, r4
 800ab98:	462b      	mov	r3, r5
 800ab9a:	4620      	mov	r0, r4
 800ab9c:	4629      	mov	r1, r5
 800ab9e:	ec57 6b10 	vmov	r6, r7, d0
 800aba2:	f7f5 ffc3 	bl	8000b2c <__aeabi_dcmpun>
 800aba6:	2800      	cmp	r0, #0
 800aba8:	d13b      	bne.n	800ac22 <pow+0xa2>
 800abaa:	ec51 0b18 	vmov	r0, r1, d8
 800abae:	2200      	movs	r2, #0
 800abb0:	2300      	movs	r3, #0
 800abb2:	f7f5 ff89 	bl	8000ac8 <__aeabi_dcmpeq>
 800abb6:	b1b8      	cbz	r0, 800abe8 <pow+0x68>
 800abb8:	2200      	movs	r2, #0
 800abba:	2300      	movs	r3, #0
 800abbc:	4620      	mov	r0, r4
 800abbe:	4629      	mov	r1, r5
 800abc0:	f7f5 ff82 	bl	8000ac8 <__aeabi_dcmpeq>
 800abc4:	2800      	cmp	r0, #0
 800abc6:	d146      	bne.n	800ac56 <pow+0xd6>
 800abc8:	ec45 4b10 	vmov	d0, r4, r5
 800abcc:	f000 ffe5 	bl	800bb9a <finite>
 800abd0:	b338      	cbz	r0, 800ac22 <pow+0xa2>
 800abd2:	2200      	movs	r2, #0
 800abd4:	2300      	movs	r3, #0
 800abd6:	4620      	mov	r0, r4
 800abd8:	4629      	mov	r1, r5
 800abda:	f7f5 ff7f 	bl	8000adc <__aeabi_dcmplt>
 800abde:	b300      	cbz	r0, 800ac22 <pow+0xa2>
 800abe0:	f7fc fa7a 	bl	80070d8 <__errno>
 800abe4:	2322      	movs	r3, #34	; 0x22
 800abe6:	e01b      	b.n	800ac20 <pow+0xa0>
 800abe8:	ec47 6b10 	vmov	d0, r6, r7
 800abec:	f000 ffd5 	bl	800bb9a <finite>
 800abf0:	b9e0      	cbnz	r0, 800ac2c <pow+0xac>
 800abf2:	eeb0 0a48 	vmov.f32	s0, s16
 800abf6:	eef0 0a68 	vmov.f32	s1, s17
 800abfa:	f000 ffce 	bl	800bb9a <finite>
 800abfe:	b1a8      	cbz	r0, 800ac2c <pow+0xac>
 800ac00:	ec45 4b10 	vmov	d0, r4, r5
 800ac04:	f000 ffc9 	bl	800bb9a <finite>
 800ac08:	b180      	cbz	r0, 800ac2c <pow+0xac>
 800ac0a:	4632      	mov	r2, r6
 800ac0c:	463b      	mov	r3, r7
 800ac0e:	4630      	mov	r0, r6
 800ac10:	4639      	mov	r1, r7
 800ac12:	f7f5 ff8b 	bl	8000b2c <__aeabi_dcmpun>
 800ac16:	2800      	cmp	r0, #0
 800ac18:	d0e2      	beq.n	800abe0 <pow+0x60>
 800ac1a:	f7fc fa5d 	bl	80070d8 <__errno>
 800ac1e:	2321      	movs	r3, #33	; 0x21
 800ac20:	6003      	str	r3, [r0, #0]
 800ac22:	ecbd 8b02 	vpop	{d8}
 800ac26:	ec47 6b10 	vmov	d0, r6, r7
 800ac2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	2300      	movs	r3, #0
 800ac30:	4630      	mov	r0, r6
 800ac32:	4639      	mov	r1, r7
 800ac34:	f7f5 ff48 	bl	8000ac8 <__aeabi_dcmpeq>
 800ac38:	2800      	cmp	r0, #0
 800ac3a:	d0f2      	beq.n	800ac22 <pow+0xa2>
 800ac3c:	eeb0 0a48 	vmov.f32	s0, s16
 800ac40:	eef0 0a68 	vmov.f32	s1, s17
 800ac44:	f000 ffa9 	bl	800bb9a <finite>
 800ac48:	2800      	cmp	r0, #0
 800ac4a:	d0ea      	beq.n	800ac22 <pow+0xa2>
 800ac4c:	ec45 4b10 	vmov	d0, r4, r5
 800ac50:	f000 ffa3 	bl	800bb9a <finite>
 800ac54:	e7c3      	b.n	800abde <pow+0x5e>
 800ac56:	4f01      	ldr	r7, [pc, #4]	; (800ac5c <pow+0xdc>)
 800ac58:	2600      	movs	r6, #0
 800ac5a:	e7e2      	b.n	800ac22 <pow+0xa2>
 800ac5c:	3ff00000 	.word	0x3ff00000

0800ac60 <__ieee754_exp>:
 800ac60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac64:	ec55 4b10 	vmov	r4, r5, d0
 800ac68:	49b5      	ldr	r1, [pc, #724]	; (800af40 <__ieee754_exp+0x2e0>)
 800ac6a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ac6e:	428b      	cmp	r3, r1
 800ac70:	ed2d 8b04 	vpush	{d8-d9}
 800ac74:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 800ac78:	d93d      	bls.n	800acf6 <__ieee754_exp+0x96>
 800ac7a:	49b2      	ldr	r1, [pc, #712]	; (800af44 <__ieee754_exp+0x2e4>)
 800ac7c:	428b      	cmp	r3, r1
 800ac7e:	d918      	bls.n	800acb2 <__ieee754_exp+0x52>
 800ac80:	ee10 3a10 	vmov	r3, s0
 800ac84:	f3c5 0213 	ubfx	r2, r5, #0, #20
 800ac88:	4313      	orrs	r3, r2
 800ac8a:	d009      	beq.n	800aca0 <__ieee754_exp+0x40>
 800ac8c:	ee10 2a10 	vmov	r2, s0
 800ac90:	462b      	mov	r3, r5
 800ac92:	4620      	mov	r0, r4
 800ac94:	4629      	mov	r1, r5
 800ac96:	f7f5 faf9 	bl	800028c <__adddf3>
 800ac9a:	4604      	mov	r4, r0
 800ac9c:	460d      	mov	r5, r1
 800ac9e:	e002      	b.n	800aca6 <__ieee754_exp+0x46>
 800aca0:	b10e      	cbz	r6, 800aca6 <__ieee754_exp+0x46>
 800aca2:	2400      	movs	r4, #0
 800aca4:	2500      	movs	r5, #0
 800aca6:	ecbd 8b04 	vpop	{d8-d9}
 800acaa:	ec45 4b10 	vmov	d0, r4, r5
 800acae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acb2:	a38d      	add	r3, pc, #564	; (adr r3, 800aee8 <__ieee754_exp+0x288>)
 800acb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acb8:	ee10 0a10 	vmov	r0, s0
 800acbc:	4629      	mov	r1, r5
 800acbe:	f7f5 ff2b 	bl	8000b18 <__aeabi_dcmpgt>
 800acc2:	4607      	mov	r7, r0
 800acc4:	b130      	cbz	r0, 800acd4 <__ieee754_exp+0x74>
 800acc6:	ecbd 8b04 	vpop	{d8-d9}
 800acca:	2000      	movs	r0, #0
 800accc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800acd0:	f000 bf51 	b.w	800bb76 <__math_oflow>
 800acd4:	a386      	add	r3, pc, #536	; (adr r3, 800aef0 <__ieee754_exp+0x290>)
 800acd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acda:	4620      	mov	r0, r4
 800acdc:	4629      	mov	r1, r5
 800acde:	f7f5 fefd 	bl	8000adc <__aeabi_dcmplt>
 800ace2:	2800      	cmp	r0, #0
 800ace4:	f000 808b 	beq.w	800adfe <__ieee754_exp+0x19e>
 800ace8:	ecbd 8b04 	vpop	{d8-d9}
 800acec:	4638      	mov	r0, r7
 800acee:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800acf2:	f000 bf37 	b.w	800bb64 <__math_uflow>
 800acf6:	4a94      	ldr	r2, [pc, #592]	; (800af48 <__ieee754_exp+0x2e8>)
 800acf8:	4293      	cmp	r3, r2
 800acfa:	f240 80ac 	bls.w	800ae56 <__ieee754_exp+0x1f6>
 800acfe:	4a93      	ldr	r2, [pc, #588]	; (800af4c <__ieee754_exp+0x2ec>)
 800ad00:	4293      	cmp	r3, r2
 800ad02:	d87c      	bhi.n	800adfe <__ieee754_exp+0x19e>
 800ad04:	4b92      	ldr	r3, [pc, #584]	; (800af50 <__ieee754_exp+0x2f0>)
 800ad06:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ad0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad0e:	ee10 0a10 	vmov	r0, s0
 800ad12:	4629      	mov	r1, r5
 800ad14:	f7f5 fab8 	bl	8000288 <__aeabi_dsub>
 800ad18:	4b8e      	ldr	r3, [pc, #568]	; (800af54 <__ieee754_exp+0x2f4>)
 800ad1a:	00f7      	lsls	r7, r6, #3
 800ad1c:	443b      	add	r3, r7
 800ad1e:	ed93 7b00 	vldr	d7, [r3]
 800ad22:	f1c6 0a01 	rsb	sl, r6, #1
 800ad26:	4680      	mov	r8, r0
 800ad28:	4689      	mov	r9, r1
 800ad2a:	ebaa 0a06 	sub.w	sl, sl, r6
 800ad2e:	eeb0 8a47 	vmov.f32	s16, s14
 800ad32:	eef0 8a67 	vmov.f32	s17, s15
 800ad36:	ec53 2b18 	vmov	r2, r3, d8
 800ad3a:	4640      	mov	r0, r8
 800ad3c:	4649      	mov	r1, r9
 800ad3e:	f7f5 faa3 	bl	8000288 <__aeabi_dsub>
 800ad42:	4604      	mov	r4, r0
 800ad44:	460d      	mov	r5, r1
 800ad46:	4622      	mov	r2, r4
 800ad48:	462b      	mov	r3, r5
 800ad4a:	4620      	mov	r0, r4
 800ad4c:	4629      	mov	r1, r5
 800ad4e:	f7f5 fc53 	bl	80005f8 <__aeabi_dmul>
 800ad52:	a369      	add	r3, pc, #420	; (adr r3, 800aef8 <__ieee754_exp+0x298>)
 800ad54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad58:	4606      	mov	r6, r0
 800ad5a:	460f      	mov	r7, r1
 800ad5c:	f7f5 fc4c 	bl	80005f8 <__aeabi_dmul>
 800ad60:	a367      	add	r3, pc, #412	; (adr r3, 800af00 <__ieee754_exp+0x2a0>)
 800ad62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad66:	f7f5 fa8f 	bl	8000288 <__aeabi_dsub>
 800ad6a:	4632      	mov	r2, r6
 800ad6c:	463b      	mov	r3, r7
 800ad6e:	f7f5 fc43 	bl	80005f8 <__aeabi_dmul>
 800ad72:	a365      	add	r3, pc, #404	; (adr r3, 800af08 <__ieee754_exp+0x2a8>)
 800ad74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad78:	f7f5 fa88 	bl	800028c <__adddf3>
 800ad7c:	4632      	mov	r2, r6
 800ad7e:	463b      	mov	r3, r7
 800ad80:	f7f5 fc3a 	bl	80005f8 <__aeabi_dmul>
 800ad84:	a362      	add	r3, pc, #392	; (adr r3, 800af10 <__ieee754_exp+0x2b0>)
 800ad86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad8a:	f7f5 fa7d 	bl	8000288 <__aeabi_dsub>
 800ad8e:	4632      	mov	r2, r6
 800ad90:	463b      	mov	r3, r7
 800ad92:	f7f5 fc31 	bl	80005f8 <__aeabi_dmul>
 800ad96:	a360      	add	r3, pc, #384	; (adr r3, 800af18 <__ieee754_exp+0x2b8>)
 800ad98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad9c:	f7f5 fa76 	bl	800028c <__adddf3>
 800ada0:	4632      	mov	r2, r6
 800ada2:	463b      	mov	r3, r7
 800ada4:	f7f5 fc28 	bl	80005f8 <__aeabi_dmul>
 800ada8:	4602      	mov	r2, r0
 800adaa:	460b      	mov	r3, r1
 800adac:	4620      	mov	r0, r4
 800adae:	4629      	mov	r1, r5
 800adb0:	f7f5 fa6a 	bl	8000288 <__aeabi_dsub>
 800adb4:	4602      	mov	r2, r0
 800adb6:	460b      	mov	r3, r1
 800adb8:	4606      	mov	r6, r0
 800adba:	460f      	mov	r7, r1
 800adbc:	4620      	mov	r0, r4
 800adbe:	4629      	mov	r1, r5
 800adc0:	f7f5 fc1a 	bl	80005f8 <__aeabi_dmul>
 800adc4:	ec41 0b19 	vmov	d9, r0, r1
 800adc8:	f1ba 0f00 	cmp.w	sl, #0
 800adcc:	d15d      	bne.n	800ae8a <__ieee754_exp+0x22a>
 800adce:	2200      	movs	r2, #0
 800add0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800add4:	4630      	mov	r0, r6
 800add6:	4639      	mov	r1, r7
 800add8:	f7f5 fa56 	bl	8000288 <__aeabi_dsub>
 800addc:	4602      	mov	r2, r0
 800adde:	460b      	mov	r3, r1
 800ade0:	ec51 0b19 	vmov	r0, r1, d9
 800ade4:	f7f5 fd32 	bl	800084c <__aeabi_ddiv>
 800ade8:	4622      	mov	r2, r4
 800adea:	462b      	mov	r3, r5
 800adec:	f7f5 fa4c 	bl	8000288 <__aeabi_dsub>
 800adf0:	4602      	mov	r2, r0
 800adf2:	460b      	mov	r3, r1
 800adf4:	2000      	movs	r0, #0
 800adf6:	4958      	ldr	r1, [pc, #352]	; (800af58 <__ieee754_exp+0x2f8>)
 800adf8:	f7f5 fa46 	bl	8000288 <__aeabi_dsub>
 800adfc:	e74d      	b.n	800ac9a <__ieee754_exp+0x3a>
 800adfe:	4857      	ldr	r0, [pc, #348]	; (800af5c <__ieee754_exp+0x2fc>)
 800ae00:	a347      	add	r3, pc, #284	; (adr r3, 800af20 <__ieee754_exp+0x2c0>)
 800ae02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae06:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800ae0a:	4629      	mov	r1, r5
 800ae0c:	4620      	mov	r0, r4
 800ae0e:	f7f5 fbf3 	bl	80005f8 <__aeabi_dmul>
 800ae12:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ae16:	f7f5 fa39 	bl	800028c <__adddf3>
 800ae1a:	f7f5 fe9d 	bl	8000b58 <__aeabi_d2iz>
 800ae1e:	4682      	mov	sl, r0
 800ae20:	f7f5 fb80 	bl	8000524 <__aeabi_i2d>
 800ae24:	a340      	add	r3, pc, #256	; (adr r3, 800af28 <__ieee754_exp+0x2c8>)
 800ae26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae2a:	4606      	mov	r6, r0
 800ae2c:	460f      	mov	r7, r1
 800ae2e:	f7f5 fbe3 	bl	80005f8 <__aeabi_dmul>
 800ae32:	4602      	mov	r2, r0
 800ae34:	460b      	mov	r3, r1
 800ae36:	4620      	mov	r0, r4
 800ae38:	4629      	mov	r1, r5
 800ae3a:	f7f5 fa25 	bl	8000288 <__aeabi_dsub>
 800ae3e:	a33c      	add	r3, pc, #240	; (adr r3, 800af30 <__ieee754_exp+0x2d0>)
 800ae40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae44:	4680      	mov	r8, r0
 800ae46:	4689      	mov	r9, r1
 800ae48:	4630      	mov	r0, r6
 800ae4a:	4639      	mov	r1, r7
 800ae4c:	f7f5 fbd4 	bl	80005f8 <__aeabi_dmul>
 800ae50:	ec41 0b18 	vmov	d8, r0, r1
 800ae54:	e76f      	b.n	800ad36 <__ieee754_exp+0xd6>
 800ae56:	4a42      	ldr	r2, [pc, #264]	; (800af60 <__ieee754_exp+0x300>)
 800ae58:	4293      	cmp	r3, r2
 800ae5a:	d811      	bhi.n	800ae80 <__ieee754_exp+0x220>
 800ae5c:	a336      	add	r3, pc, #216	; (adr r3, 800af38 <__ieee754_exp+0x2d8>)
 800ae5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae62:	ee10 0a10 	vmov	r0, s0
 800ae66:	4629      	mov	r1, r5
 800ae68:	f7f5 fa10 	bl	800028c <__adddf3>
 800ae6c:	4b3a      	ldr	r3, [pc, #232]	; (800af58 <__ieee754_exp+0x2f8>)
 800ae6e:	2200      	movs	r2, #0
 800ae70:	f7f5 fe52 	bl	8000b18 <__aeabi_dcmpgt>
 800ae74:	b138      	cbz	r0, 800ae86 <__ieee754_exp+0x226>
 800ae76:	4b38      	ldr	r3, [pc, #224]	; (800af58 <__ieee754_exp+0x2f8>)
 800ae78:	2200      	movs	r2, #0
 800ae7a:	4620      	mov	r0, r4
 800ae7c:	4629      	mov	r1, r5
 800ae7e:	e70a      	b.n	800ac96 <__ieee754_exp+0x36>
 800ae80:	f04f 0a00 	mov.w	sl, #0
 800ae84:	e75f      	b.n	800ad46 <__ieee754_exp+0xe6>
 800ae86:	4682      	mov	sl, r0
 800ae88:	e75d      	b.n	800ad46 <__ieee754_exp+0xe6>
 800ae8a:	4632      	mov	r2, r6
 800ae8c:	463b      	mov	r3, r7
 800ae8e:	2000      	movs	r0, #0
 800ae90:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800ae94:	f7f5 f9f8 	bl	8000288 <__aeabi_dsub>
 800ae98:	4602      	mov	r2, r0
 800ae9a:	460b      	mov	r3, r1
 800ae9c:	ec51 0b19 	vmov	r0, r1, d9
 800aea0:	f7f5 fcd4 	bl	800084c <__aeabi_ddiv>
 800aea4:	4602      	mov	r2, r0
 800aea6:	460b      	mov	r3, r1
 800aea8:	ec51 0b18 	vmov	r0, r1, d8
 800aeac:	f7f5 f9ec 	bl	8000288 <__aeabi_dsub>
 800aeb0:	4642      	mov	r2, r8
 800aeb2:	464b      	mov	r3, r9
 800aeb4:	f7f5 f9e8 	bl	8000288 <__aeabi_dsub>
 800aeb8:	4602      	mov	r2, r0
 800aeba:	460b      	mov	r3, r1
 800aebc:	2000      	movs	r0, #0
 800aebe:	4926      	ldr	r1, [pc, #152]	; (800af58 <__ieee754_exp+0x2f8>)
 800aec0:	f7f5 f9e2 	bl	8000288 <__aeabi_dsub>
 800aec4:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 800aec8:	4592      	cmp	sl, r2
 800aeca:	db02      	blt.n	800aed2 <__ieee754_exp+0x272>
 800aecc:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800aed0:	e6e3      	b.n	800ac9a <__ieee754_exp+0x3a>
 800aed2:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 800aed6:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800aeda:	2200      	movs	r2, #0
 800aedc:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 800aee0:	f7f5 fb8a 	bl	80005f8 <__aeabi_dmul>
 800aee4:	e6d9      	b.n	800ac9a <__ieee754_exp+0x3a>
 800aee6:	bf00      	nop
 800aee8:	fefa39ef 	.word	0xfefa39ef
 800aeec:	40862e42 	.word	0x40862e42
 800aef0:	d52d3051 	.word	0xd52d3051
 800aef4:	c0874910 	.word	0xc0874910
 800aef8:	72bea4d0 	.word	0x72bea4d0
 800aefc:	3e663769 	.word	0x3e663769
 800af00:	c5d26bf1 	.word	0xc5d26bf1
 800af04:	3ebbbd41 	.word	0x3ebbbd41
 800af08:	af25de2c 	.word	0xaf25de2c
 800af0c:	3f11566a 	.word	0x3f11566a
 800af10:	16bebd93 	.word	0x16bebd93
 800af14:	3f66c16c 	.word	0x3f66c16c
 800af18:	5555553e 	.word	0x5555553e
 800af1c:	3fc55555 	.word	0x3fc55555
 800af20:	652b82fe 	.word	0x652b82fe
 800af24:	3ff71547 	.word	0x3ff71547
 800af28:	fee00000 	.word	0xfee00000
 800af2c:	3fe62e42 	.word	0x3fe62e42
 800af30:	35793c76 	.word	0x35793c76
 800af34:	3dea39ef 	.word	0x3dea39ef
 800af38:	8800759c 	.word	0x8800759c
 800af3c:	7e37e43c 	.word	0x7e37e43c
 800af40:	40862e41 	.word	0x40862e41
 800af44:	7fefffff 	.word	0x7fefffff
 800af48:	3fd62e42 	.word	0x3fd62e42
 800af4c:	3ff0a2b1 	.word	0x3ff0a2b1
 800af50:	08010330 	.word	0x08010330
 800af54:	08010340 	.word	0x08010340
 800af58:	3ff00000 	.word	0x3ff00000
 800af5c:	08010320 	.word	0x08010320
 800af60:	3defffff 	.word	0x3defffff
 800af64:	00000000 	.word	0x00000000

0800af68 <__ieee754_pow>:
 800af68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af6c:	ed2d 8b06 	vpush	{d8-d10}
 800af70:	b089      	sub	sp, #36	; 0x24
 800af72:	ed8d 1b00 	vstr	d1, [sp]
 800af76:	e9dd 2900 	ldrd	r2, r9, [sp]
 800af7a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800af7e:	ea58 0102 	orrs.w	r1, r8, r2
 800af82:	ec57 6b10 	vmov	r6, r7, d0
 800af86:	d115      	bne.n	800afb4 <__ieee754_pow+0x4c>
 800af88:	19b3      	adds	r3, r6, r6
 800af8a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800af8e:	4152      	adcs	r2, r2
 800af90:	4299      	cmp	r1, r3
 800af92:	4b89      	ldr	r3, [pc, #548]	; (800b1b8 <__ieee754_pow+0x250>)
 800af94:	4193      	sbcs	r3, r2
 800af96:	f080 84d2 	bcs.w	800b93e <__ieee754_pow+0x9d6>
 800af9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800af9e:	4630      	mov	r0, r6
 800afa0:	4639      	mov	r1, r7
 800afa2:	f7f5 f973 	bl	800028c <__adddf3>
 800afa6:	ec41 0b10 	vmov	d0, r0, r1
 800afaa:	b009      	add	sp, #36	; 0x24
 800afac:	ecbd 8b06 	vpop	{d8-d10}
 800afb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afb4:	4b81      	ldr	r3, [pc, #516]	; (800b1bc <__ieee754_pow+0x254>)
 800afb6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800afba:	429c      	cmp	r4, r3
 800afbc:	ee10 aa10 	vmov	sl, s0
 800afc0:	463d      	mov	r5, r7
 800afc2:	dc06      	bgt.n	800afd2 <__ieee754_pow+0x6a>
 800afc4:	d101      	bne.n	800afca <__ieee754_pow+0x62>
 800afc6:	2e00      	cmp	r6, #0
 800afc8:	d1e7      	bne.n	800af9a <__ieee754_pow+0x32>
 800afca:	4598      	cmp	r8, r3
 800afcc:	dc01      	bgt.n	800afd2 <__ieee754_pow+0x6a>
 800afce:	d10f      	bne.n	800aff0 <__ieee754_pow+0x88>
 800afd0:	b172      	cbz	r2, 800aff0 <__ieee754_pow+0x88>
 800afd2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800afd6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800afda:	ea55 050a 	orrs.w	r5, r5, sl
 800afde:	d1dc      	bne.n	800af9a <__ieee754_pow+0x32>
 800afe0:	e9dd 3200 	ldrd	r3, r2, [sp]
 800afe4:	18db      	adds	r3, r3, r3
 800afe6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800afea:	4152      	adcs	r2, r2
 800afec:	429d      	cmp	r5, r3
 800afee:	e7d0      	b.n	800af92 <__ieee754_pow+0x2a>
 800aff0:	2d00      	cmp	r5, #0
 800aff2:	da3b      	bge.n	800b06c <__ieee754_pow+0x104>
 800aff4:	4b72      	ldr	r3, [pc, #456]	; (800b1c0 <__ieee754_pow+0x258>)
 800aff6:	4598      	cmp	r8, r3
 800aff8:	dc51      	bgt.n	800b09e <__ieee754_pow+0x136>
 800affa:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800affe:	4598      	cmp	r8, r3
 800b000:	f340 84ac 	ble.w	800b95c <__ieee754_pow+0x9f4>
 800b004:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b008:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b00c:	2b14      	cmp	r3, #20
 800b00e:	dd0f      	ble.n	800b030 <__ieee754_pow+0xc8>
 800b010:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800b014:	fa22 f103 	lsr.w	r1, r2, r3
 800b018:	fa01 f303 	lsl.w	r3, r1, r3
 800b01c:	4293      	cmp	r3, r2
 800b01e:	f040 849d 	bne.w	800b95c <__ieee754_pow+0x9f4>
 800b022:	f001 0101 	and.w	r1, r1, #1
 800b026:	f1c1 0302 	rsb	r3, r1, #2
 800b02a:	9304      	str	r3, [sp, #16]
 800b02c:	b182      	cbz	r2, 800b050 <__ieee754_pow+0xe8>
 800b02e:	e05f      	b.n	800b0f0 <__ieee754_pow+0x188>
 800b030:	2a00      	cmp	r2, #0
 800b032:	d15b      	bne.n	800b0ec <__ieee754_pow+0x184>
 800b034:	f1c3 0314 	rsb	r3, r3, #20
 800b038:	fa48 f103 	asr.w	r1, r8, r3
 800b03c:	fa01 f303 	lsl.w	r3, r1, r3
 800b040:	4543      	cmp	r3, r8
 800b042:	f040 8488 	bne.w	800b956 <__ieee754_pow+0x9ee>
 800b046:	f001 0101 	and.w	r1, r1, #1
 800b04a:	f1c1 0302 	rsb	r3, r1, #2
 800b04e:	9304      	str	r3, [sp, #16]
 800b050:	4b5c      	ldr	r3, [pc, #368]	; (800b1c4 <__ieee754_pow+0x25c>)
 800b052:	4598      	cmp	r8, r3
 800b054:	d132      	bne.n	800b0bc <__ieee754_pow+0x154>
 800b056:	f1b9 0f00 	cmp.w	r9, #0
 800b05a:	f280 8478 	bge.w	800b94e <__ieee754_pow+0x9e6>
 800b05e:	4959      	ldr	r1, [pc, #356]	; (800b1c4 <__ieee754_pow+0x25c>)
 800b060:	4632      	mov	r2, r6
 800b062:	463b      	mov	r3, r7
 800b064:	2000      	movs	r0, #0
 800b066:	f7f5 fbf1 	bl	800084c <__aeabi_ddiv>
 800b06a:	e79c      	b.n	800afa6 <__ieee754_pow+0x3e>
 800b06c:	2300      	movs	r3, #0
 800b06e:	9304      	str	r3, [sp, #16]
 800b070:	2a00      	cmp	r2, #0
 800b072:	d13d      	bne.n	800b0f0 <__ieee754_pow+0x188>
 800b074:	4b51      	ldr	r3, [pc, #324]	; (800b1bc <__ieee754_pow+0x254>)
 800b076:	4598      	cmp	r8, r3
 800b078:	d1ea      	bne.n	800b050 <__ieee754_pow+0xe8>
 800b07a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800b07e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800b082:	ea53 030a 	orrs.w	r3, r3, sl
 800b086:	f000 845a 	beq.w	800b93e <__ieee754_pow+0x9d6>
 800b08a:	4b4f      	ldr	r3, [pc, #316]	; (800b1c8 <__ieee754_pow+0x260>)
 800b08c:	429c      	cmp	r4, r3
 800b08e:	dd08      	ble.n	800b0a2 <__ieee754_pow+0x13a>
 800b090:	f1b9 0f00 	cmp.w	r9, #0
 800b094:	f2c0 8457 	blt.w	800b946 <__ieee754_pow+0x9de>
 800b098:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b09c:	e783      	b.n	800afa6 <__ieee754_pow+0x3e>
 800b09e:	2302      	movs	r3, #2
 800b0a0:	e7e5      	b.n	800b06e <__ieee754_pow+0x106>
 800b0a2:	f1b9 0f00 	cmp.w	r9, #0
 800b0a6:	f04f 0000 	mov.w	r0, #0
 800b0aa:	f04f 0100 	mov.w	r1, #0
 800b0ae:	f6bf af7a 	bge.w	800afa6 <__ieee754_pow+0x3e>
 800b0b2:	e9dd 0300 	ldrd	r0, r3, [sp]
 800b0b6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b0ba:	e774      	b.n	800afa6 <__ieee754_pow+0x3e>
 800b0bc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800b0c0:	d106      	bne.n	800b0d0 <__ieee754_pow+0x168>
 800b0c2:	4632      	mov	r2, r6
 800b0c4:	463b      	mov	r3, r7
 800b0c6:	4630      	mov	r0, r6
 800b0c8:	4639      	mov	r1, r7
 800b0ca:	f7f5 fa95 	bl	80005f8 <__aeabi_dmul>
 800b0ce:	e76a      	b.n	800afa6 <__ieee754_pow+0x3e>
 800b0d0:	4b3e      	ldr	r3, [pc, #248]	; (800b1cc <__ieee754_pow+0x264>)
 800b0d2:	4599      	cmp	r9, r3
 800b0d4:	d10c      	bne.n	800b0f0 <__ieee754_pow+0x188>
 800b0d6:	2d00      	cmp	r5, #0
 800b0d8:	db0a      	blt.n	800b0f0 <__ieee754_pow+0x188>
 800b0da:	ec47 6b10 	vmov	d0, r6, r7
 800b0de:	b009      	add	sp, #36	; 0x24
 800b0e0:	ecbd 8b06 	vpop	{d8-d10}
 800b0e4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0e8:	f000 bc6c 	b.w	800b9c4 <__ieee754_sqrt>
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	9304      	str	r3, [sp, #16]
 800b0f0:	ec47 6b10 	vmov	d0, r6, r7
 800b0f4:	f000 fd48 	bl	800bb88 <fabs>
 800b0f8:	ec51 0b10 	vmov	r0, r1, d0
 800b0fc:	f1ba 0f00 	cmp.w	sl, #0
 800b100:	d129      	bne.n	800b156 <__ieee754_pow+0x1ee>
 800b102:	b124      	cbz	r4, 800b10e <__ieee754_pow+0x1a6>
 800b104:	4b2f      	ldr	r3, [pc, #188]	; (800b1c4 <__ieee754_pow+0x25c>)
 800b106:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800b10a:	429a      	cmp	r2, r3
 800b10c:	d123      	bne.n	800b156 <__ieee754_pow+0x1ee>
 800b10e:	f1b9 0f00 	cmp.w	r9, #0
 800b112:	da05      	bge.n	800b120 <__ieee754_pow+0x1b8>
 800b114:	4602      	mov	r2, r0
 800b116:	460b      	mov	r3, r1
 800b118:	2000      	movs	r0, #0
 800b11a:	492a      	ldr	r1, [pc, #168]	; (800b1c4 <__ieee754_pow+0x25c>)
 800b11c:	f7f5 fb96 	bl	800084c <__aeabi_ddiv>
 800b120:	2d00      	cmp	r5, #0
 800b122:	f6bf af40 	bge.w	800afa6 <__ieee754_pow+0x3e>
 800b126:	9b04      	ldr	r3, [sp, #16]
 800b128:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b12c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b130:	4323      	orrs	r3, r4
 800b132:	d108      	bne.n	800b146 <__ieee754_pow+0x1de>
 800b134:	4602      	mov	r2, r0
 800b136:	460b      	mov	r3, r1
 800b138:	4610      	mov	r0, r2
 800b13a:	4619      	mov	r1, r3
 800b13c:	f7f5 f8a4 	bl	8000288 <__aeabi_dsub>
 800b140:	4602      	mov	r2, r0
 800b142:	460b      	mov	r3, r1
 800b144:	e78f      	b.n	800b066 <__ieee754_pow+0xfe>
 800b146:	9b04      	ldr	r3, [sp, #16]
 800b148:	2b01      	cmp	r3, #1
 800b14a:	f47f af2c 	bne.w	800afa6 <__ieee754_pow+0x3e>
 800b14e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b152:	4619      	mov	r1, r3
 800b154:	e727      	b.n	800afa6 <__ieee754_pow+0x3e>
 800b156:	0feb      	lsrs	r3, r5, #31
 800b158:	3b01      	subs	r3, #1
 800b15a:	9306      	str	r3, [sp, #24]
 800b15c:	9a06      	ldr	r2, [sp, #24]
 800b15e:	9b04      	ldr	r3, [sp, #16]
 800b160:	4313      	orrs	r3, r2
 800b162:	d102      	bne.n	800b16a <__ieee754_pow+0x202>
 800b164:	4632      	mov	r2, r6
 800b166:	463b      	mov	r3, r7
 800b168:	e7e6      	b.n	800b138 <__ieee754_pow+0x1d0>
 800b16a:	4b19      	ldr	r3, [pc, #100]	; (800b1d0 <__ieee754_pow+0x268>)
 800b16c:	4598      	cmp	r8, r3
 800b16e:	f340 80fb 	ble.w	800b368 <__ieee754_pow+0x400>
 800b172:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800b176:	4598      	cmp	r8, r3
 800b178:	4b13      	ldr	r3, [pc, #76]	; (800b1c8 <__ieee754_pow+0x260>)
 800b17a:	dd0c      	ble.n	800b196 <__ieee754_pow+0x22e>
 800b17c:	429c      	cmp	r4, r3
 800b17e:	dc0f      	bgt.n	800b1a0 <__ieee754_pow+0x238>
 800b180:	f1b9 0f00 	cmp.w	r9, #0
 800b184:	da0f      	bge.n	800b1a6 <__ieee754_pow+0x23e>
 800b186:	2000      	movs	r0, #0
 800b188:	b009      	add	sp, #36	; 0x24
 800b18a:	ecbd 8b06 	vpop	{d8-d10}
 800b18e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b192:	f000 bcf0 	b.w	800bb76 <__math_oflow>
 800b196:	429c      	cmp	r4, r3
 800b198:	dbf2      	blt.n	800b180 <__ieee754_pow+0x218>
 800b19a:	4b0a      	ldr	r3, [pc, #40]	; (800b1c4 <__ieee754_pow+0x25c>)
 800b19c:	429c      	cmp	r4, r3
 800b19e:	dd19      	ble.n	800b1d4 <__ieee754_pow+0x26c>
 800b1a0:	f1b9 0f00 	cmp.w	r9, #0
 800b1a4:	dcef      	bgt.n	800b186 <__ieee754_pow+0x21e>
 800b1a6:	2000      	movs	r0, #0
 800b1a8:	b009      	add	sp, #36	; 0x24
 800b1aa:	ecbd 8b06 	vpop	{d8-d10}
 800b1ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1b2:	f000 bcd7 	b.w	800bb64 <__math_uflow>
 800b1b6:	bf00      	nop
 800b1b8:	fff00000 	.word	0xfff00000
 800b1bc:	7ff00000 	.word	0x7ff00000
 800b1c0:	433fffff 	.word	0x433fffff
 800b1c4:	3ff00000 	.word	0x3ff00000
 800b1c8:	3fefffff 	.word	0x3fefffff
 800b1cc:	3fe00000 	.word	0x3fe00000
 800b1d0:	41e00000 	.word	0x41e00000
 800b1d4:	4b60      	ldr	r3, [pc, #384]	; (800b358 <__ieee754_pow+0x3f0>)
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	f7f5 f856 	bl	8000288 <__aeabi_dsub>
 800b1dc:	a354      	add	r3, pc, #336	; (adr r3, 800b330 <__ieee754_pow+0x3c8>)
 800b1de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1e2:	4604      	mov	r4, r0
 800b1e4:	460d      	mov	r5, r1
 800b1e6:	f7f5 fa07 	bl	80005f8 <__aeabi_dmul>
 800b1ea:	a353      	add	r3, pc, #332	; (adr r3, 800b338 <__ieee754_pow+0x3d0>)
 800b1ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1f0:	4606      	mov	r6, r0
 800b1f2:	460f      	mov	r7, r1
 800b1f4:	4620      	mov	r0, r4
 800b1f6:	4629      	mov	r1, r5
 800b1f8:	f7f5 f9fe 	bl	80005f8 <__aeabi_dmul>
 800b1fc:	4b57      	ldr	r3, [pc, #348]	; (800b35c <__ieee754_pow+0x3f4>)
 800b1fe:	4682      	mov	sl, r0
 800b200:	468b      	mov	fp, r1
 800b202:	2200      	movs	r2, #0
 800b204:	4620      	mov	r0, r4
 800b206:	4629      	mov	r1, r5
 800b208:	f7f5 f9f6 	bl	80005f8 <__aeabi_dmul>
 800b20c:	4602      	mov	r2, r0
 800b20e:	460b      	mov	r3, r1
 800b210:	a14b      	add	r1, pc, #300	; (adr r1, 800b340 <__ieee754_pow+0x3d8>)
 800b212:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b216:	f7f5 f837 	bl	8000288 <__aeabi_dsub>
 800b21a:	4622      	mov	r2, r4
 800b21c:	462b      	mov	r3, r5
 800b21e:	f7f5 f9eb 	bl	80005f8 <__aeabi_dmul>
 800b222:	4602      	mov	r2, r0
 800b224:	460b      	mov	r3, r1
 800b226:	2000      	movs	r0, #0
 800b228:	494d      	ldr	r1, [pc, #308]	; (800b360 <__ieee754_pow+0x3f8>)
 800b22a:	f7f5 f82d 	bl	8000288 <__aeabi_dsub>
 800b22e:	4622      	mov	r2, r4
 800b230:	4680      	mov	r8, r0
 800b232:	4689      	mov	r9, r1
 800b234:	462b      	mov	r3, r5
 800b236:	4620      	mov	r0, r4
 800b238:	4629      	mov	r1, r5
 800b23a:	f7f5 f9dd 	bl	80005f8 <__aeabi_dmul>
 800b23e:	4602      	mov	r2, r0
 800b240:	460b      	mov	r3, r1
 800b242:	4640      	mov	r0, r8
 800b244:	4649      	mov	r1, r9
 800b246:	f7f5 f9d7 	bl	80005f8 <__aeabi_dmul>
 800b24a:	a33f      	add	r3, pc, #252	; (adr r3, 800b348 <__ieee754_pow+0x3e0>)
 800b24c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b250:	f7f5 f9d2 	bl	80005f8 <__aeabi_dmul>
 800b254:	4602      	mov	r2, r0
 800b256:	460b      	mov	r3, r1
 800b258:	4650      	mov	r0, sl
 800b25a:	4659      	mov	r1, fp
 800b25c:	f7f5 f814 	bl	8000288 <__aeabi_dsub>
 800b260:	4602      	mov	r2, r0
 800b262:	460b      	mov	r3, r1
 800b264:	4680      	mov	r8, r0
 800b266:	4689      	mov	r9, r1
 800b268:	4630      	mov	r0, r6
 800b26a:	4639      	mov	r1, r7
 800b26c:	f7f5 f80e 	bl	800028c <__adddf3>
 800b270:	2000      	movs	r0, #0
 800b272:	4632      	mov	r2, r6
 800b274:	463b      	mov	r3, r7
 800b276:	4604      	mov	r4, r0
 800b278:	460d      	mov	r5, r1
 800b27a:	f7f5 f805 	bl	8000288 <__aeabi_dsub>
 800b27e:	4602      	mov	r2, r0
 800b280:	460b      	mov	r3, r1
 800b282:	4640      	mov	r0, r8
 800b284:	4649      	mov	r1, r9
 800b286:	f7f4 ffff 	bl	8000288 <__aeabi_dsub>
 800b28a:	9b04      	ldr	r3, [sp, #16]
 800b28c:	9a06      	ldr	r2, [sp, #24]
 800b28e:	3b01      	subs	r3, #1
 800b290:	4313      	orrs	r3, r2
 800b292:	4682      	mov	sl, r0
 800b294:	468b      	mov	fp, r1
 800b296:	f040 81e7 	bne.w	800b668 <__ieee754_pow+0x700>
 800b29a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800b350 <__ieee754_pow+0x3e8>
 800b29e:	eeb0 8a47 	vmov.f32	s16, s14
 800b2a2:	eef0 8a67 	vmov.f32	s17, s15
 800b2a6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b2aa:	2600      	movs	r6, #0
 800b2ac:	4632      	mov	r2, r6
 800b2ae:	463b      	mov	r3, r7
 800b2b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b2b4:	f7f4 ffe8 	bl	8000288 <__aeabi_dsub>
 800b2b8:	4622      	mov	r2, r4
 800b2ba:	462b      	mov	r3, r5
 800b2bc:	f7f5 f99c 	bl	80005f8 <__aeabi_dmul>
 800b2c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b2c4:	4680      	mov	r8, r0
 800b2c6:	4689      	mov	r9, r1
 800b2c8:	4650      	mov	r0, sl
 800b2ca:	4659      	mov	r1, fp
 800b2cc:	f7f5 f994 	bl	80005f8 <__aeabi_dmul>
 800b2d0:	4602      	mov	r2, r0
 800b2d2:	460b      	mov	r3, r1
 800b2d4:	4640      	mov	r0, r8
 800b2d6:	4649      	mov	r1, r9
 800b2d8:	f7f4 ffd8 	bl	800028c <__adddf3>
 800b2dc:	4632      	mov	r2, r6
 800b2de:	463b      	mov	r3, r7
 800b2e0:	4680      	mov	r8, r0
 800b2e2:	4689      	mov	r9, r1
 800b2e4:	4620      	mov	r0, r4
 800b2e6:	4629      	mov	r1, r5
 800b2e8:	f7f5 f986 	bl	80005f8 <__aeabi_dmul>
 800b2ec:	460b      	mov	r3, r1
 800b2ee:	4604      	mov	r4, r0
 800b2f0:	460d      	mov	r5, r1
 800b2f2:	4602      	mov	r2, r0
 800b2f4:	4649      	mov	r1, r9
 800b2f6:	4640      	mov	r0, r8
 800b2f8:	f7f4 ffc8 	bl	800028c <__adddf3>
 800b2fc:	4b19      	ldr	r3, [pc, #100]	; (800b364 <__ieee754_pow+0x3fc>)
 800b2fe:	4299      	cmp	r1, r3
 800b300:	ec45 4b19 	vmov	d9, r4, r5
 800b304:	4606      	mov	r6, r0
 800b306:	460f      	mov	r7, r1
 800b308:	468b      	mov	fp, r1
 800b30a:	f340 82f1 	ble.w	800b8f0 <__ieee754_pow+0x988>
 800b30e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800b312:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800b316:	4303      	orrs	r3, r0
 800b318:	f000 81e4 	beq.w	800b6e4 <__ieee754_pow+0x77c>
 800b31c:	ec51 0b18 	vmov	r0, r1, d8
 800b320:	2200      	movs	r2, #0
 800b322:	2300      	movs	r3, #0
 800b324:	f7f5 fbda 	bl	8000adc <__aeabi_dcmplt>
 800b328:	3800      	subs	r0, #0
 800b32a:	bf18      	it	ne
 800b32c:	2001      	movne	r0, #1
 800b32e:	e72b      	b.n	800b188 <__ieee754_pow+0x220>
 800b330:	60000000 	.word	0x60000000
 800b334:	3ff71547 	.word	0x3ff71547
 800b338:	f85ddf44 	.word	0xf85ddf44
 800b33c:	3e54ae0b 	.word	0x3e54ae0b
 800b340:	55555555 	.word	0x55555555
 800b344:	3fd55555 	.word	0x3fd55555
 800b348:	652b82fe 	.word	0x652b82fe
 800b34c:	3ff71547 	.word	0x3ff71547
 800b350:	00000000 	.word	0x00000000
 800b354:	bff00000 	.word	0xbff00000
 800b358:	3ff00000 	.word	0x3ff00000
 800b35c:	3fd00000 	.word	0x3fd00000
 800b360:	3fe00000 	.word	0x3fe00000
 800b364:	408fffff 	.word	0x408fffff
 800b368:	4bd5      	ldr	r3, [pc, #852]	; (800b6c0 <__ieee754_pow+0x758>)
 800b36a:	402b      	ands	r3, r5
 800b36c:	2200      	movs	r2, #0
 800b36e:	b92b      	cbnz	r3, 800b37c <__ieee754_pow+0x414>
 800b370:	4bd4      	ldr	r3, [pc, #848]	; (800b6c4 <__ieee754_pow+0x75c>)
 800b372:	f7f5 f941 	bl	80005f8 <__aeabi_dmul>
 800b376:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800b37a:	460c      	mov	r4, r1
 800b37c:	1523      	asrs	r3, r4, #20
 800b37e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b382:	4413      	add	r3, r2
 800b384:	9305      	str	r3, [sp, #20]
 800b386:	4bd0      	ldr	r3, [pc, #832]	; (800b6c8 <__ieee754_pow+0x760>)
 800b388:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b38c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800b390:	429c      	cmp	r4, r3
 800b392:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b396:	dd08      	ble.n	800b3aa <__ieee754_pow+0x442>
 800b398:	4bcc      	ldr	r3, [pc, #816]	; (800b6cc <__ieee754_pow+0x764>)
 800b39a:	429c      	cmp	r4, r3
 800b39c:	f340 8162 	ble.w	800b664 <__ieee754_pow+0x6fc>
 800b3a0:	9b05      	ldr	r3, [sp, #20]
 800b3a2:	3301      	adds	r3, #1
 800b3a4:	9305      	str	r3, [sp, #20]
 800b3a6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800b3aa:	2400      	movs	r4, #0
 800b3ac:	00e3      	lsls	r3, r4, #3
 800b3ae:	9307      	str	r3, [sp, #28]
 800b3b0:	4bc7      	ldr	r3, [pc, #796]	; (800b6d0 <__ieee754_pow+0x768>)
 800b3b2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b3b6:	ed93 7b00 	vldr	d7, [r3]
 800b3ba:	4629      	mov	r1, r5
 800b3bc:	ec53 2b17 	vmov	r2, r3, d7
 800b3c0:	eeb0 9a47 	vmov.f32	s18, s14
 800b3c4:	eef0 9a67 	vmov.f32	s19, s15
 800b3c8:	4682      	mov	sl, r0
 800b3ca:	f7f4 ff5d 	bl	8000288 <__aeabi_dsub>
 800b3ce:	4652      	mov	r2, sl
 800b3d0:	4606      	mov	r6, r0
 800b3d2:	460f      	mov	r7, r1
 800b3d4:	462b      	mov	r3, r5
 800b3d6:	ec51 0b19 	vmov	r0, r1, d9
 800b3da:	f7f4 ff57 	bl	800028c <__adddf3>
 800b3de:	4602      	mov	r2, r0
 800b3e0:	460b      	mov	r3, r1
 800b3e2:	2000      	movs	r0, #0
 800b3e4:	49bb      	ldr	r1, [pc, #748]	; (800b6d4 <__ieee754_pow+0x76c>)
 800b3e6:	f7f5 fa31 	bl	800084c <__aeabi_ddiv>
 800b3ea:	ec41 0b1a 	vmov	d10, r0, r1
 800b3ee:	4602      	mov	r2, r0
 800b3f0:	460b      	mov	r3, r1
 800b3f2:	4630      	mov	r0, r6
 800b3f4:	4639      	mov	r1, r7
 800b3f6:	f7f5 f8ff 	bl	80005f8 <__aeabi_dmul>
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b400:	9302      	str	r3, [sp, #8]
 800b402:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b406:	46ab      	mov	fp, r5
 800b408:	106d      	asrs	r5, r5, #1
 800b40a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800b40e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800b412:	ec41 0b18 	vmov	d8, r0, r1
 800b416:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800b41a:	2200      	movs	r2, #0
 800b41c:	4640      	mov	r0, r8
 800b41e:	4649      	mov	r1, r9
 800b420:	4614      	mov	r4, r2
 800b422:	461d      	mov	r5, r3
 800b424:	f7f5 f8e8 	bl	80005f8 <__aeabi_dmul>
 800b428:	4602      	mov	r2, r0
 800b42a:	460b      	mov	r3, r1
 800b42c:	4630      	mov	r0, r6
 800b42e:	4639      	mov	r1, r7
 800b430:	f7f4 ff2a 	bl	8000288 <__aeabi_dsub>
 800b434:	ec53 2b19 	vmov	r2, r3, d9
 800b438:	4606      	mov	r6, r0
 800b43a:	460f      	mov	r7, r1
 800b43c:	4620      	mov	r0, r4
 800b43e:	4629      	mov	r1, r5
 800b440:	f7f4 ff22 	bl	8000288 <__aeabi_dsub>
 800b444:	4602      	mov	r2, r0
 800b446:	460b      	mov	r3, r1
 800b448:	4650      	mov	r0, sl
 800b44a:	4659      	mov	r1, fp
 800b44c:	f7f4 ff1c 	bl	8000288 <__aeabi_dsub>
 800b450:	4642      	mov	r2, r8
 800b452:	464b      	mov	r3, r9
 800b454:	f7f5 f8d0 	bl	80005f8 <__aeabi_dmul>
 800b458:	4602      	mov	r2, r0
 800b45a:	460b      	mov	r3, r1
 800b45c:	4630      	mov	r0, r6
 800b45e:	4639      	mov	r1, r7
 800b460:	f7f4 ff12 	bl	8000288 <__aeabi_dsub>
 800b464:	ec53 2b1a 	vmov	r2, r3, d10
 800b468:	f7f5 f8c6 	bl	80005f8 <__aeabi_dmul>
 800b46c:	ec53 2b18 	vmov	r2, r3, d8
 800b470:	ec41 0b19 	vmov	d9, r0, r1
 800b474:	ec51 0b18 	vmov	r0, r1, d8
 800b478:	f7f5 f8be 	bl	80005f8 <__aeabi_dmul>
 800b47c:	a37c      	add	r3, pc, #496	; (adr r3, 800b670 <__ieee754_pow+0x708>)
 800b47e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b482:	4604      	mov	r4, r0
 800b484:	460d      	mov	r5, r1
 800b486:	f7f5 f8b7 	bl	80005f8 <__aeabi_dmul>
 800b48a:	a37b      	add	r3, pc, #492	; (adr r3, 800b678 <__ieee754_pow+0x710>)
 800b48c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b490:	f7f4 fefc 	bl	800028c <__adddf3>
 800b494:	4622      	mov	r2, r4
 800b496:	462b      	mov	r3, r5
 800b498:	f7f5 f8ae 	bl	80005f8 <__aeabi_dmul>
 800b49c:	a378      	add	r3, pc, #480	; (adr r3, 800b680 <__ieee754_pow+0x718>)
 800b49e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4a2:	f7f4 fef3 	bl	800028c <__adddf3>
 800b4a6:	4622      	mov	r2, r4
 800b4a8:	462b      	mov	r3, r5
 800b4aa:	f7f5 f8a5 	bl	80005f8 <__aeabi_dmul>
 800b4ae:	a376      	add	r3, pc, #472	; (adr r3, 800b688 <__ieee754_pow+0x720>)
 800b4b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4b4:	f7f4 feea 	bl	800028c <__adddf3>
 800b4b8:	4622      	mov	r2, r4
 800b4ba:	462b      	mov	r3, r5
 800b4bc:	f7f5 f89c 	bl	80005f8 <__aeabi_dmul>
 800b4c0:	a373      	add	r3, pc, #460	; (adr r3, 800b690 <__ieee754_pow+0x728>)
 800b4c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4c6:	f7f4 fee1 	bl	800028c <__adddf3>
 800b4ca:	4622      	mov	r2, r4
 800b4cc:	462b      	mov	r3, r5
 800b4ce:	f7f5 f893 	bl	80005f8 <__aeabi_dmul>
 800b4d2:	a371      	add	r3, pc, #452	; (adr r3, 800b698 <__ieee754_pow+0x730>)
 800b4d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4d8:	f7f4 fed8 	bl	800028c <__adddf3>
 800b4dc:	4622      	mov	r2, r4
 800b4de:	4606      	mov	r6, r0
 800b4e0:	460f      	mov	r7, r1
 800b4e2:	462b      	mov	r3, r5
 800b4e4:	4620      	mov	r0, r4
 800b4e6:	4629      	mov	r1, r5
 800b4e8:	f7f5 f886 	bl	80005f8 <__aeabi_dmul>
 800b4ec:	4602      	mov	r2, r0
 800b4ee:	460b      	mov	r3, r1
 800b4f0:	4630      	mov	r0, r6
 800b4f2:	4639      	mov	r1, r7
 800b4f4:	f7f5 f880 	bl	80005f8 <__aeabi_dmul>
 800b4f8:	4642      	mov	r2, r8
 800b4fa:	4604      	mov	r4, r0
 800b4fc:	460d      	mov	r5, r1
 800b4fe:	464b      	mov	r3, r9
 800b500:	ec51 0b18 	vmov	r0, r1, d8
 800b504:	f7f4 fec2 	bl	800028c <__adddf3>
 800b508:	ec53 2b19 	vmov	r2, r3, d9
 800b50c:	f7f5 f874 	bl	80005f8 <__aeabi_dmul>
 800b510:	4622      	mov	r2, r4
 800b512:	462b      	mov	r3, r5
 800b514:	f7f4 feba 	bl	800028c <__adddf3>
 800b518:	4642      	mov	r2, r8
 800b51a:	4682      	mov	sl, r0
 800b51c:	468b      	mov	fp, r1
 800b51e:	464b      	mov	r3, r9
 800b520:	4640      	mov	r0, r8
 800b522:	4649      	mov	r1, r9
 800b524:	f7f5 f868 	bl	80005f8 <__aeabi_dmul>
 800b528:	4b6b      	ldr	r3, [pc, #428]	; (800b6d8 <__ieee754_pow+0x770>)
 800b52a:	2200      	movs	r2, #0
 800b52c:	4606      	mov	r6, r0
 800b52e:	460f      	mov	r7, r1
 800b530:	f7f4 feac 	bl	800028c <__adddf3>
 800b534:	4652      	mov	r2, sl
 800b536:	465b      	mov	r3, fp
 800b538:	f7f4 fea8 	bl	800028c <__adddf3>
 800b53c:	2000      	movs	r0, #0
 800b53e:	4604      	mov	r4, r0
 800b540:	460d      	mov	r5, r1
 800b542:	4602      	mov	r2, r0
 800b544:	460b      	mov	r3, r1
 800b546:	4640      	mov	r0, r8
 800b548:	4649      	mov	r1, r9
 800b54a:	f7f5 f855 	bl	80005f8 <__aeabi_dmul>
 800b54e:	4b62      	ldr	r3, [pc, #392]	; (800b6d8 <__ieee754_pow+0x770>)
 800b550:	4680      	mov	r8, r0
 800b552:	4689      	mov	r9, r1
 800b554:	2200      	movs	r2, #0
 800b556:	4620      	mov	r0, r4
 800b558:	4629      	mov	r1, r5
 800b55a:	f7f4 fe95 	bl	8000288 <__aeabi_dsub>
 800b55e:	4632      	mov	r2, r6
 800b560:	463b      	mov	r3, r7
 800b562:	f7f4 fe91 	bl	8000288 <__aeabi_dsub>
 800b566:	4602      	mov	r2, r0
 800b568:	460b      	mov	r3, r1
 800b56a:	4650      	mov	r0, sl
 800b56c:	4659      	mov	r1, fp
 800b56e:	f7f4 fe8b 	bl	8000288 <__aeabi_dsub>
 800b572:	ec53 2b18 	vmov	r2, r3, d8
 800b576:	f7f5 f83f 	bl	80005f8 <__aeabi_dmul>
 800b57a:	4622      	mov	r2, r4
 800b57c:	4606      	mov	r6, r0
 800b57e:	460f      	mov	r7, r1
 800b580:	462b      	mov	r3, r5
 800b582:	ec51 0b19 	vmov	r0, r1, d9
 800b586:	f7f5 f837 	bl	80005f8 <__aeabi_dmul>
 800b58a:	4602      	mov	r2, r0
 800b58c:	460b      	mov	r3, r1
 800b58e:	4630      	mov	r0, r6
 800b590:	4639      	mov	r1, r7
 800b592:	f7f4 fe7b 	bl	800028c <__adddf3>
 800b596:	4606      	mov	r6, r0
 800b598:	460f      	mov	r7, r1
 800b59a:	4602      	mov	r2, r0
 800b59c:	460b      	mov	r3, r1
 800b59e:	4640      	mov	r0, r8
 800b5a0:	4649      	mov	r1, r9
 800b5a2:	f7f4 fe73 	bl	800028c <__adddf3>
 800b5a6:	a33e      	add	r3, pc, #248	; (adr r3, 800b6a0 <__ieee754_pow+0x738>)
 800b5a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5ac:	2000      	movs	r0, #0
 800b5ae:	4604      	mov	r4, r0
 800b5b0:	460d      	mov	r5, r1
 800b5b2:	f7f5 f821 	bl	80005f8 <__aeabi_dmul>
 800b5b6:	4642      	mov	r2, r8
 800b5b8:	ec41 0b18 	vmov	d8, r0, r1
 800b5bc:	464b      	mov	r3, r9
 800b5be:	4620      	mov	r0, r4
 800b5c0:	4629      	mov	r1, r5
 800b5c2:	f7f4 fe61 	bl	8000288 <__aeabi_dsub>
 800b5c6:	4602      	mov	r2, r0
 800b5c8:	460b      	mov	r3, r1
 800b5ca:	4630      	mov	r0, r6
 800b5cc:	4639      	mov	r1, r7
 800b5ce:	f7f4 fe5b 	bl	8000288 <__aeabi_dsub>
 800b5d2:	a335      	add	r3, pc, #212	; (adr r3, 800b6a8 <__ieee754_pow+0x740>)
 800b5d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5d8:	f7f5 f80e 	bl	80005f8 <__aeabi_dmul>
 800b5dc:	a334      	add	r3, pc, #208	; (adr r3, 800b6b0 <__ieee754_pow+0x748>)
 800b5de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5e2:	4606      	mov	r6, r0
 800b5e4:	460f      	mov	r7, r1
 800b5e6:	4620      	mov	r0, r4
 800b5e8:	4629      	mov	r1, r5
 800b5ea:	f7f5 f805 	bl	80005f8 <__aeabi_dmul>
 800b5ee:	4602      	mov	r2, r0
 800b5f0:	460b      	mov	r3, r1
 800b5f2:	4630      	mov	r0, r6
 800b5f4:	4639      	mov	r1, r7
 800b5f6:	f7f4 fe49 	bl	800028c <__adddf3>
 800b5fa:	9a07      	ldr	r2, [sp, #28]
 800b5fc:	4b37      	ldr	r3, [pc, #220]	; (800b6dc <__ieee754_pow+0x774>)
 800b5fe:	4413      	add	r3, r2
 800b600:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b604:	f7f4 fe42 	bl	800028c <__adddf3>
 800b608:	4682      	mov	sl, r0
 800b60a:	9805      	ldr	r0, [sp, #20]
 800b60c:	468b      	mov	fp, r1
 800b60e:	f7f4 ff89 	bl	8000524 <__aeabi_i2d>
 800b612:	9a07      	ldr	r2, [sp, #28]
 800b614:	4b32      	ldr	r3, [pc, #200]	; (800b6e0 <__ieee754_pow+0x778>)
 800b616:	4413      	add	r3, r2
 800b618:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b61c:	4606      	mov	r6, r0
 800b61e:	460f      	mov	r7, r1
 800b620:	4652      	mov	r2, sl
 800b622:	465b      	mov	r3, fp
 800b624:	ec51 0b18 	vmov	r0, r1, d8
 800b628:	f7f4 fe30 	bl	800028c <__adddf3>
 800b62c:	4642      	mov	r2, r8
 800b62e:	464b      	mov	r3, r9
 800b630:	f7f4 fe2c 	bl	800028c <__adddf3>
 800b634:	4632      	mov	r2, r6
 800b636:	463b      	mov	r3, r7
 800b638:	f7f4 fe28 	bl	800028c <__adddf3>
 800b63c:	2000      	movs	r0, #0
 800b63e:	4632      	mov	r2, r6
 800b640:	463b      	mov	r3, r7
 800b642:	4604      	mov	r4, r0
 800b644:	460d      	mov	r5, r1
 800b646:	f7f4 fe1f 	bl	8000288 <__aeabi_dsub>
 800b64a:	4642      	mov	r2, r8
 800b64c:	464b      	mov	r3, r9
 800b64e:	f7f4 fe1b 	bl	8000288 <__aeabi_dsub>
 800b652:	ec53 2b18 	vmov	r2, r3, d8
 800b656:	f7f4 fe17 	bl	8000288 <__aeabi_dsub>
 800b65a:	4602      	mov	r2, r0
 800b65c:	460b      	mov	r3, r1
 800b65e:	4650      	mov	r0, sl
 800b660:	4659      	mov	r1, fp
 800b662:	e610      	b.n	800b286 <__ieee754_pow+0x31e>
 800b664:	2401      	movs	r4, #1
 800b666:	e6a1      	b.n	800b3ac <__ieee754_pow+0x444>
 800b668:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800b6b8 <__ieee754_pow+0x750>
 800b66c:	e617      	b.n	800b29e <__ieee754_pow+0x336>
 800b66e:	bf00      	nop
 800b670:	4a454eef 	.word	0x4a454eef
 800b674:	3fca7e28 	.word	0x3fca7e28
 800b678:	93c9db65 	.word	0x93c9db65
 800b67c:	3fcd864a 	.word	0x3fcd864a
 800b680:	a91d4101 	.word	0xa91d4101
 800b684:	3fd17460 	.word	0x3fd17460
 800b688:	518f264d 	.word	0x518f264d
 800b68c:	3fd55555 	.word	0x3fd55555
 800b690:	db6fabff 	.word	0xdb6fabff
 800b694:	3fdb6db6 	.word	0x3fdb6db6
 800b698:	33333303 	.word	0x33333303
 800b69c:	3fe33333 	.word	0x3fe33333
 800b6a0:	e0000000 	.word	0xe0000000
 800b6a4:	3feec709 	.word	0x3feec709
 800b6a8:	dc3a03fd 	.word	0xdc3a03fd
 800b6ac:	3feec709 	.word	0x3feec709
 800b6b0:	145b01f5 	.word	0x145b01f5
 800b6b4:	be3e2fe0 	.word	0xbe3e2fe0
 800b6b8:	00000000 	.word	0x00000000
 800b6bc:	3ff00000 	.word	0x3ff00000
 800b6c0:	7ff00000 	.word	0x7ff00000
 800b6c4:	43400000 	.word	0x43400000
 800b6c8:	0003988e 	.word	0x0003988e
 800b6cc:	000bb679 	.word	0x000bb679
 800b6d0:	08010350 	.word	0x08010350
 800b6d4:	3ff00000 	.word	0x3ff00000
 800b6d8:	40080000 	.word	0x40080000
 800b6dc:	08010370 	.word	0x08010370
 800b6e0:	08010360 	.word	0x08010360
 800b6e4:	a3b5      	add	r3, pc, #724	; (adr r3, 800b9bc <__ieee754_pow+0xa54>)
 800b6e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6ea:	4640      	mov	r0, r8
 800b6ec:	4649      	mov	r1, r9
 800b6ee:	f7f4 fdcd 	bl	800028c <__adddf3>
 800b6f2:	4622      	mov	r2, r4
 800b6f4:	ec41 0b1a 	vmov	d10, r0, r1
 800b6f8:	462b      	mov	r3, r5
 800b6fa:	4630      	mov	r0, r6
 800b6fc:	4639      	mov	r1, r7
 800b6fe:	f7f4 fdc3 	bl	8000288 <__aeabi_dsub>
 800b702:	4602      	mov	r2, r0
 800b704:	460b      	mov	r3, r1
 800b706:	ec51 0b1a 	vmov	r0, r1, d10
 800b70a:	f7f5 fa05 	bl	8000b18 <__aeabi_dcmpgt>
 800b70e:	2800      	cmp	r0, #0
 800b710:	f47f ae04 	bne.w	800b31c <__ieee754_pow+0x3b4>
 800b714:	4aa4      	ldr	r2, [pc, #656]	; (800b9a8 <__ieee754_pow+0xa40>)
 800b716:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b71a:	4293      	cmp	r3, r2
 800b71c:	f340 8108 	ble.w	800b930 <__ieee754_pow+0x9c8>
 800b720:	151b      	asrs	r3, r3, #20
 800b722:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800b726:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800b72a:	fa4a f303 	asr.w	r3, sl, r3
 800b72e:	445b      	add	r3, fp
 800b730:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800b734:	4e9d      	ldr	r6, [pc, #628]	; (800b9ac <__ieee754_pow+0xa44>)
 800b736:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800b73a:	4116      	asrs	r6, r2
 800b73c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800b740:	2000      	movs	r0, #0
 800b742:	ea23 0106 	bic.w	r1, r3, r6
 800b746:	f1c2 0214 	rsb	r2, r2, #20
 800b74a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800b74e:	fa4a fa02 	asr.w	sl, sl, r2
 800b752:	f1bb 0f00 	cmp.w	fp, #0
 800b756:	4602      	mov	r2, r0
 800b758:	460b      	mov	r3, r1
 800b75a:	4620      	mov	r0, r4
 800b75c:	4629      	mov	r1, r5
 800b75e:	bfb8      	it	lt
 800b760:	f1ca 0a00 	rsblt	sl, sl, #0
 800b764:	f7f4 fd90 	bl	8000288 <__aeabi_dsub>
 800b768:	ec41 0b19 	vmov	d9, r0, r1
 800b76c:	4642      	mov	r2, r8
 800b76e:	464b      	mov	r3, r9
 800b770:	ec51 0b19 	vmov	r0, r1, d9
 800b774:	f7f4 fd8a 	bl	800028c <__adddf3>
 800b778:	a37b      	add	r3, pc, #492	; (adr r3, 800b968 <__ieee754_pow+0xa00>)
 800b77a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b77e:	2000      	movs	r0, #0
 800b780:	4604      	mov	r4, r0
 800b782:	460d      	mov	r5, r1
 800b784:	f7f4 ff38 	bl	80005f8 <__aeabi_dmul>
 800b788:	ec53 2b19 	vmov	r2, r3, d9
 800b78c:	4606      	mov	r6, r0
 800b78e:	460f      	mov	r7, r1
 800b790:	4620      	mov	r0, r4
 800b792:	4629      	mov	r1, r5
 800b794:	f7f4 fd78 	bl	8000288 <__aeabi_dsub>
 800b798:	4602      	mov	r2, r0
 800b79a:	460b      	mov	r3, r1
 800b79c:	4640      	mov	r0, r8
 800b79e:	4649      	mov	r1, r9
 800b7a0:	f7f4 fd72 	bl	8000288 <__aeabi_dsub>
 800b7a4:	a372      	add	r3, pc, #456	; (adr r3, 800b970 <__ieee754_pow+0xa08>)
 800b7a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7aa:	f7f4 ff25 	bl	80005f8 <__aeabi_dmul>
 800b7ae:	a372      	add	r3, pc, #456	; (adr r3, 800b978 <__ieee754_pow+0xa10>)
 800b7b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7b4:	4680      	mov	r8, r0
 800b7b6:	4689      	mov	r9, r1
 800b7b8:	4620      	mov	r0, r4
 800b7ba:	4629      	mov	r1, r5
 800b7bc:	f7f4 ff1c 	bl	80005f8 <__aeabi_dmul>
 800b7c0:	4602      	mov	r2, r0
 800b7c2:	460b      	mov	r3, r1
 800b7c4:	4640      	mov	r0, r8
 800b7c6:	4649      	mov	r1, r9
 800b7c8:	f7f4 fd60 	bl	800028c <__adddf3>
 800b7cc:	4604      	mov	r4, r0
 800b7ce:	460d      	mov	r5, r1
 800b7d0:	4602      	mov	r2, r0
 800b7d2:	460b      	mov	r3, r1
 800b7d4:	4630      	mov	r0, r6
 800b7d6:	4639      	mov	r1, r7
 800b7d8:	f7f4 fd58 	bl	800028c <__adddf3>
 800b7dc:	4632      	mov	r2, r6
 800b7de:	463b      	mov	r3, r7
 800b7e0:	4680      	mov	r8, r0
 800b7e2:	4689      	mov	r9, r1
 800b7e4:	f7f4 fd50 	bl	8000288 <__aeabi_dsub>
 800b7e8:	4602      	mov	r2, r0
 800b7ea:	460b      	mov	r3, r1
 800b7ec:	4620      	mov	r0, r4
 800b7ee:	4629      	mov	r1, r5
 800b7f0:	f7f4 fd4a 	bl	8000288 <__aeabi_dsub>
 800b7f4:	4642      	mov	r2, r8
 800b7f6:	4606      	mov	r6, r0
 800b7f8:	460f      	mov	r7, r1
 800b7fa:	464b      	mov	r3, r9
 800b7fc:	4640      	mov	r0, r8
 800b7fe:	4649      	mov	r1, r9
 800b800:	f7f4 fefa 	bl	80005f8 <__aeabi_dmul>
 800b804:	a35e      	add	r3, pc, #376	; (adr r3, 800b980 <__ieee754_pow+0xa18>)
 800b806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b80a:	4604      	mov	r4, r0
 800b80c:	460d      	mov	r5, r1
 800b80e:	f7f4 fef3 	bl	80005f8 <__aeabi_dmul>
 800b812:	a35d      	add	r3, pc, #372	; (adr r3, 800b988 <__ieee754_pow+0xa20>)
 800b814:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b818:	f7f4 fd36 	bl	8000288 <__aeabi_dsub>
 800b81c:	4622      	mov	r2, r4
 800b81e:	462b      	mov	r3, r5
 800b820:	f7f4 feea 	bl	80005f8 <__aeabi_dmul>
 800b824:	a35a      	add	r3, pc, #360	; (adr r3, 800b990 <__ieee754_pow+0xa28>)
 800b826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b82a:	f7f4 fd2f 	bl	800028c <__adddf3>
 800b82e:	4622      	mov	r2, r4
 800b830:	462b      	mov	r3, r5
 800b832:	f7f4 fee1 	bl	80005f8 <__aeabi_dmul>
 800b836:	a358      	add	r3, pc, #352	; (adr r3, 800b998 <__ieee754_pow+0xa30>)
 800b838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b83c:	f7f4 fd24 	bl	8000288 <__aeabi_dsub>
 800b840:	4622      	mov	r2, r4
 800b842:	462b      	mov	r3, r5
 800b844:	f7f4 fed8 	bl	80005f8 <__aeabi_dmul>
 800b848:	a355      	add	r3, pc, #340	; (adr r3, 800b9a0 <__ieee754_pow+0xa38>)
 800b84a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b84e:	f7f4 fd1d 	bl	800028c <__adddf3>
 800b852:	4622      	mov	r2, r4
 800b854:	462b      	mov	r3, r5
 800b856:	f7f4 fecf 	bl	80005f8 <__aeabi_dmul>
 800b85a:	4602      	mov	r2, r0
 800b85c:	460b      	mov	r3, r1
 800b85e:	4640      	mov	r0, r8
 800b860:	4649      	mov	r1, r9
 800b862:	f7f4 fd11 	bl	8000288 <__aeabi_dsub>
 800b866:	4604      	mov	r4, r0
 800b868:	460d      	mov	r5, r1
 800b86a:	4602      	mov	r2, r0
 800b86c:	460b      	mov	r3, r1
 800b86e:	4640      	mov	r0, r8
 800b870:	4649      	mov	r1, r9
 800b872:	f7f4 fec1 	bl	80005f8 <__aeabi_dmul>
 800b876:	2200      	movs	r2, #0
 800b878:	ec41 0b19 	vmov	d9, r0, r1
 800b87c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b880:	4620      	mov	r0, r4
 800b882:	4629      	mov	r1, r5
 800b884:	f7f4 fd00 	bl	8000288 <__aeabi_dsub>
 800b888:	4602      	mov	r2, r0
 800b88a:	460b      	mov	r3, r1
 800b88c:	ec51 0b19 	vmov	r0, r1, d9
 800b890:	f7f4 ffdc 	bl	800084c <__aeabi_ddiv>
 800b894:	4632      	mov	r2, r6
 800b896:	4604      	mov	r4, r0
 800b898:	460d      	mov	r5, r1
 800b89a:	463b      	mov	r3, r7
 800b89c:	4640      	mov	r0, r8
 800b89e:	4649      	mov	r1, r9
 800b8a0:	f7f4 feaa 	bl	80005f8 <__aeabi_dmul>
 800b8a4:	4632      	mov	r2, r6
 800b8a6:	463b      	mov	r3, r7
 800b8a8:	f7f4 fcf0 	bl	800028c <__adddf3>
 800b8ac:	4602      	mov	r2, r0
 800b8ae:	460b      	mov	r3, r1
 800b8b0:	4620      	mov	r0, r4
 800b8b2:	4629      	mov	r1, r5
 800b8b4:	f7f4 fce8 	bl	8000288 <__aeabi_dsub>
 800b8b8:	4642      	mov	r2, r8
 800b8ba:	464b      	mov	r3, r9
 800b8bc:	f7f4 fce4 	bl	8000288 <__aeabi_dsub>
 800b8c0:	460b      	mov	r3, r1
 800b8c2:	4602      	mov	r2, r0
 800b8c4:	493a      	ldr	r1, [pc, #232]	; (800b9b0 <__ieee754_pow+0xa48>)
 800b8c6:	2000      	movs	r0, #0
 800b8c8:	f7f4 fcde 	bl	8000288 <__aeabi_dsub>
 800b8cc:	ec41 0b10 	vmov	d0, r0, r1
 800b8d0:	ee10 3a90 	vmov	r3, s1
 800b8d4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800b8d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b8dc:	da2b      	bge.n	800b936 <__ieee754_pow+0x9ce>
 800b8de:	4650      	mov	r0, sl
 800b8e0:	f000 f966 	bl	800bbb0 <scalbn>
 800b8e4:	ec51 0b10 	vmov	r0, r1, d0
 800b8e8:	ec53 2b18 	vmov	r2, r3, d8
 800b8ec:	f7ff bbed 	b.w	800b0ca <__ieee754_pow+0x162>
 800b8f0:	4b30      	ldr	r3, [pc, #192]	; (800b9b4 <__ieee754_pow+0xa4c>)
 800b8f2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800b8f6:	429e      	cmp	r6, r3
 800b8f8:	f77f af0c 	ble.w	800b714 <__ieee754_pow+0x7ac>
 800b8fc:	4b2e      	ldr	r3, [pc, #184]	; (800b9b8 <__ieee754_pow+0xa50>)
 800b8fe:	440b      	add	r3, r1
 800b900:	4303      	orrs	r3, r0
 800b902:	d009      	beq.n	800b918 <__ieee754_pow+0x9b0>
 800b904:	ec51 0b18 	vmov	r0, r1, d8
 800b908:	2200      	movs	r2, #0
 800b90a:	2300      	movs	r3, #0
 800b90c:	f7f5 f8e6 	bl	8000adc <__aeabi_dcmplt>
 800b910:	3800      	subs	r0, #0
 800b912:	bf18      	it	ne
 800b914:	2001      	movne	r0, #1
 800b916:	e447      	b.n	800b1a8 <__ieee754_pow+0x240>
 800b918:	4622      	mov	r2, r4
 800b91a:	462b      	mov	r3, r5
 800b91c:	f7f4 fcb4 	bl	8000288 <__aeabi_dsub>
 800b920:	4642      	mov	r2, r8
 800b922:	464b      	mov	r3, r9
 800b924:	f7f5 f8ee 	bl	8000b04 <__aeabi_dcmpge>
 800b928:	2800      	cmp	r0, #0
 800b92a:	f43f aef3 	beq.w	800b714 <__ieee754_pow+0x7ac>
 800b92e:	e7e9      	b.n	800b904 <__ieee754_pow+0x99c>
 800b930:	f04f 0a00 	mov.w	sl, #0
 800b934:	e71a      	b.n	800b76c <__ieee754_pow+0x804>
 800b936:	ec51 0b10 	vmov	r0, r1, d0
 800b93a:	4619      	mov	r1, r3
 800b93c:	e7d4      	b.n	800b8e8 <__ieee754_pow+0x980>
 800b93e:	491c      	ldr	r1, [pc, #112]	; (800b9b0 <__ieee754_pow+0xa48>)
 800b940:	2000      	movs	r0, #0
 800b942:	f7ff bb30 	b.w	800afa6 <__ieee754_pow+0x3e>
 800b946:	2000      	movs	r0, #0
 800b948:	2100      	movs	r1, #0
 800b94a:	f7ff bb2c 	b.w	800afa6 <__ieee754_pow+0x3e>
 800b94e:	4630      	mov	r0, r6
 800b950:	4639      	mov	r1, r7
 800b952:	f7ff bb28 	b.w	800afa6 <__ieee754_pow+0x3e>
 800b956:	9204      	str	r2, [sp, #16]
 800b958:	f7ff bb7a 	b.w	800b050 <__ieee754_pow+0xe8>
 800b95c:	2300      	movs	r3, #0
 800b95e:	f7ff bb64 	b.w	800b02a <__ieee754_pow+0xc2>
 800b962:	bf00      	nop
 800b964:	f3af 8000 	nop.w
 800b968:	00000000 	.word	0x00000000
 800b96c:	3fe62e43 	.word	0x3fe62e43
 800b970:	fefa39ef 	.word	0xfefa39ef
 800b974:	3fe62e42 	.word	0x3fe62e42
 800b978:	0ca86c39 	.word	0x0ca86c39
 800b97c:	be205c61 	.word	0xbe205c61
 800b980:	72bea4d0 	.word	0x72bea4d0
 800b984:	3e663769 	.word	0x3e663769
 800b988:	c5d26bf1 	.word	0xc5d26bf1
 800b98c:	3ebbbd41 	.word	0x3ebbbd41
 800b990:	af25de2c 	.word	0xaf25de2c
 800b994:	3f11566a 	.word	0x3f11566a
 800b998:	16bebd93 	.word	0x16bebd93
 800b99c:	3f66c16c 	.word	0x3f66c16c
 800b9a0:	5555553e 	.word	0x5555553e
 800b9a4:	3fc55555 	.word	0x3fc55555
 800b9a8:	3fe00000 	.word	0x3fe00000
 800b9ac:	000fffff 	.word	0x000fffff
 800b9b0:	3ff00000 	.word	0x3ff00000
 800b9b4:	4090cbff 	.word	0x4090cbff
 800b9b8:	3f6f3400 	.word	0x3f6f3400
 800b9bc:	652b82fe 	.word	0x652b82fe
 800b9c0:	3c971547 	.word	0x3c971547

0800b9c4 <__ieee754_sqrt>:
 800b9c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9c8:	ec55 4b10 	vmov	r4, r5, d0
 800b9cc:	4e55      	ldr	r6, [pc, #340]	; (800bb24 <__ieee754_sqrt+0x160>)
 800b9ce:	43ae      	bics	r6, r5
 800b9d0:	ee10 0a10 	vmov	r0, s0
 800b9d4:	ee10 3a10 	vmov	r3, s0
 800b9d8:	462a      	mov	r2, r5
 800b9da:	4629      	mov	r1, r5
 800b9dc:	d110      	bne.n	800ba00 <__ieee754_sqrt+0x3c>
 800b9de:	ee10 2a10 	vmov	r2, s0
 800b9e2:	462b      	mov	r3, r5
 800b9e4:	f7f4 fe08 	bl	80005f8 <__aeabi_dmul>
 800b9e8:	4602      	mov	r2, r0
 800b9ea:	460b      	mov	r3, r1
 800b9ec:	4620      	mov	r0, r4
 800b9ee:	4629      	mov	r1, r5
 800b9f0:	f7f4 fc4c 	bl	800028c <__adddf3>
 800b9f4:	4604      	mov	r4, r0
 800b9f6:	460d      	mov	r5, r1
 800b9f8:	ec45 4b10 	vmov	d0, r4, r5
 800b9fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba00:	2d00      	cmp	r5, #0
 800ba02:	dc10      	bgt.n	800ba26 <__ieee754_sqrt+0x62>
 800ba04:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ba08:	4330      	orrs	r0, r6
 800ba0a:	d0f5      	beq.n	800b9f8 <__ieee754_sqrt+0x34>
 800ba0c:	b15d      	cbz	r5, 800ba26 <__ieee754_sqrt+0x62>
 800ba0e:	ee10 2a10 	vmov	r2, s0
 800ba12:	462b      	mov	r3, r5
 800ba14:	ee10 0a10 	vmov	r0, s0
 800ba18:	f7f4 fc36 	bl	8000288 <__aeabi_dsub>
 800ba1c:	4602      	mov	r2, r0
 800ba1e:	460b      	mov	r3, r1
 800ba20:	f7f4 ff14 	bl	800084c <__aeabi_ddiv>
 800ba24:	e7e6      	b.n	800b9f4 <__ieee754_sqrt+0x30>
 800ba26:	1512      	asrs	r2, r2, #20
 800ba28:	d074      	beq.n	800bb14 <__ieee754_sqrt+0x150>
 800ba2a:	07d4      	lsls	r4, r2, #31
 800ba2c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800ba30:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800ba34:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800ba38:	bf5e      	ittt	pl
 800ba3a:	0fda      	lsrpl	r2, r3, #31
 800ba3c:	005b      	lslpl	r3, r3, #1
 800ba3e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800ba42:	2400      	movs	r4, #0
 800ba44:	0fda      	lsrs	r2, r3, #31
 800ba46:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800ba4a:	107f      	asrs	r7, r7, #1
 800ba4c:	005b      	lsls	r3, r3, #1
 800ba4e:	2516      	movs	r5, #22
 800ba50:	4620      	mov	r0, r4
 800ba52:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800ba56:	1886      	adds	r6, r0, r2
 800ba58:	428e      	cmp	r6, r1
 800ba5a:	bfde      	ittt	le
 800ba5c:	1b89      	suble	r1, r1, r6
 800ba5e:	18b0      	addle	r0, r6, r2
 800ba60:	18a4      	addle	r4, r4, r2
 800ba62:	0049      	lsls	r1, r1, #1
 800ba64:	3d01      	subs	r5, #1
 800ba66:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800ba6a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800ba6e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ba72:	d1f0      	bne.n	800ba56 <__ieee754_sqrt+0x92>
 800ba74:	462a      	mov	r2, r5
 800ba76:	f04f 0e20 	mov.w	lr, #32
 800ba7a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800ba7e:	4281      	cmp	r1, r0
 800ba80:	eb06 0c05 	add.w	ip, r6, r5
 800ba84:	dc02      	bgt.n	800ba8c <__ieee754_sqrt+0xc8>
 800ba86:	d113      	bne.n	800bab0 <__ieee754_sqrt+0xec>
 800ba88:	459c      	cmp	ip, r3
 800ba8a:	d811      	bhi.n	800bab0 <__ieee754_sqrt+0xec>
 800ba8c:	f1bc 0f00 	cmp.w	ip, #0
 800ba90:	eb0c 0506 	add.w	r5, ip, r6
 800ba94:	da43      	bge.n	800bb1e <__ieee754_sqrt+0x15a>
 800ba96:	2d00      	cmp	r5, #0
 800ba98:	db41      	blt.n	800bb1e <__ieee754_sqrt+0x15a>
 800ba9a:	f100 0801 	add.w	r8, r0, #1
 800ba9e:	1a09      	subs	r1, r1, r0
 800baa0:	459c      	cmp	ip, r3
 800baa2:	bf88      	it	hi
 800baa4:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 800baa8:	eba3 030c 	sub.w	r3, r3, ip
 800baac:	4432      	add	r2, r6
 800baae:	4640      	mov	r0, r8
 800bab0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800bab4:	f1be 0e01 	subs.w	lr, lr, #1
 800bab8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800babc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bac0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800bac4:	d1db      	bne.n	800ba7e <__ieee754_sqrt+0xba>
 800bac6:	430b      	orrs	r3, r1
 800bac8:	d006      	beq.n	800bad8 <__ieee754_sqrt+0x114>
 800baca:	1c50      	adds	r0, r2, #1
 800bacc:	bf13      	iteet	ne
 800bace:	3201      	addne	r2, #1
 800bad0:	3401      	addeq	r4, #1
 800bad2:	4672      	moveq	r2, lr
 800bad4:	f022 0201 	bicne.w	r2, r2, #1
 800bad8:	1063      	asrs	r3, r4, #1
 800bada:	0852      	lsrs	r2, r2, #1
 800badc:	07e1      	lsls	r1, r4, #31
 800bade:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800bae2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800bae6:	bf48      	it	mi
 800bae8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800baec:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800baf0:	4614      	mov	r4, r2
 800baf2:	e781      	b.n	800b9f8 <__ieee754_sqrt+0x34>
 800baf4:	0ad9      	lsrs	r1, r3, #11
 800baf6:	3815      	subs	r0, #21
 800baf8:	055b      	lsls	r3, r3, #21
 800bafa:	2900      	cmp	r1, #0
 800bafc:	d0fa      	beq.n	800baf4 <__ieee754_sqrt+0x130>
 800bafe:	02cd      	lsls	r5, r1, #11
 800bb00:	d50a      	bpl.n	800bb18 <__ieee754_sqrt+0x154>
 800bb02:	f1c2 0420 	rsb	r4, r2, #32
 800bb06:	fa23 f404 	lsr.w	r4, r3, r4
 800bb0a:	1e55      	subs	r5, r2, #1
 800bb0c:	4093      	lsls	r3, r2
 800bb0e:	4321      	orrs	r1, r4
 800bb10:	1b42      	subs	r2, r0, r5
 800bb12:	e78a      	b.n	800ba2a <__ieee754_sqrt+0x66>
 800bb14:	4610      	mov	r0, r2
 800bb16:	e7f0      	b.n	800bafa <__ieee754_sqrt+0x136>
 800bb18:	0049      	lsls	r1, r1, #1
 800bb1a:	3201      	adds	r2, #1
 800bb1c:	e7ef      	b.n	800bafe <__ieee754_sqrt+0x13a>
 800bb1e:	4680      	mov	r8, r0
 800bb20:	e7bd      	b.n	800ba9e <__ieee754_sqrt+0xda>
 800bb22:	bf00      	nop
 800bb24:	7ff00000 	.word	0x7ff00000

0800bb28 <with_errno>:
 800bb28:	b570      	push	{r4, r5, r6, lr}
 800bb2a:	4604      	mov	r4, r0
 800bb2c:	460d      	mov	r5, r1
 800bb2e:	4616      	mov	r6, r2
 800bb30:	f7fb fad2 	bl	80070d8 <__errno>
 800bb34:	4629      	mov	r1, r5
 800bb36:	6006      	str	r6, [r0, #0]
 800bb38:	4620      	mov	r0, r4
 800bb3a:	bd70      	pop	{r4, r5, r6, pc}

0800bb3c <xflow>:
 800bb3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bb3e:	4614      	mov	r4, r2
 800bb40:	461d      	mov	r5, r3
 800bb42:	b108      	cbz	r0, 800bb48 <xflow+0xc>
 800bb44:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800bb48:	e9cd 2300 	strd	r2, r3, [sp]
 800bb4c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bb50:	4620      	mov	r0, r4
 800bb52:	4629      	mov	r1, r5
 800bb54:	f7f4 fd50 	bl	80005f8 <__aeabi_dmul>
 800bb58:	2222      	movs	r2, #34	; 0x22
 800bb5a:	b003      	add	sp, #12
 800bb5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bb60:	f7ff bfe2 	b.w	800bb28 <with_errno>

0800bb64 <__math_uflow>:
 800bb64:	b508      	push	{r3, lr}
 800bb66:	2200      	movs	r2, #0
 800bb68:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800bb6c:	f7ff ffe6 	bl	800bb3c <xflow>
 800bb70:	ec41 0b10 	vmov	d0, r0, r1
 800bb74:	bd08      	pop	{r3, pc}

0800bb76 <__math_oflow>:
 800bb76:	b508      	push	{r3, lr}
 800bb78:	2200      	movs	r2, #0
 800bb7a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800bb7e:	f7ff ffdd 	bl	800bb3c <xflow>
 800bb82:	ec41 0b10 	vmov	d0, r0, r1
 800bb86:	bd08      	pop	{r3, pc}

0800bb88 <fabs>:
 800bb88:	ec51 0b10 	vmov	r0, r1, d0
 800bb8c:	ee10 2a10 	vmov	r2, s0
 800bb90:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bb94:	ec43 2b10 	vmov	d0, r2, r3
 800bb98:	4770      	bx	lr

0800bb9a <finite>:
 800bb9a:	b082      	sub	sp, #8
 800bb9c:	ed8d 0b00 	vstr	d0, [sp]
 800bba0:	9801      	ldr	r0, [sp, #4]
 800bba2:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800bba6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800bbaa:	0fc0      	lsrs	r0, r0, #31
 800bbac:	b002      	add	sp, #8
 800bbae:	4770      	bx	lr

0800bbb0 <scalbn>:
 800bbb0:	b570      	push	{r4, r5, r6, lr}
 800bbb2:	ec55 4b10 	vmov	r4, r5, d0
 800bbb6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800bbba:	4606      	mov	r6, r0
 800bbbc:	462b      	mov	r3, r5
 800bbbe:	b99a      	cbnz	r2, 800bbe8 <scalbn+0x38>
 800bbc0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800bbc4:	4323      	orrs	r3, r4
 800bbc6:	d036      	beq.n	800bc36 <scalbn+0x86>
 800bbc8:	4b39      	ldr	r3, [pc, #228]	; (800bcb0 <scalbn+0x100>)
 800bbca:	4629      	mov	r1, r5
 800bbcc:	ee10 0a10 	vmov	r0, s0
 800bbd0:	2200      	movs	r2, #0
 800bbd2:	f7f4 fd11 	bl	80005f8 <__aeabi_dmul>
 800bbd6:	4b37      	ldr	r3, [pc, #220]	; (800bcb4 <scalbn+0x104>)
 800bbd8:	429e      	cmp	r6, r3
 800bbda:	4604      	mov	r4, r0
 800bbdc:	460d      	mov	r5, r1
 800bbde:	da10      	bge.n	800bc02 <scalbn+0x52>
 800bbe0:	a32b      	add	r3, pc, #172	; (adr r3, 800bc90 <scalbn+0xe0>)
 800bbe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbe6:	e03a      	b.n	800bc5e <scalbn+0xae>
 800bbe8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800bbec:	428a      	cmp	r2, r1
 800bbee:	d10c      	bne.n	800bc0a <scalbn+0x5a>
 800bbf0:	ee10 2a10 	vmov	r2, s0
 800bbf4:	4620      	mov	r0, r4
 800bbf6:	4629      	mov	r1, r5
 800bbf8:	f7f4 fb48 	bl	800028c <__adddf3>
 800bbfc:	4604      	mov	r4, r0
 800bbfe:	460d      	mov	r5, r1
 800bc00:	e019      	b.n	800bc36 <scalbn+0x86>
 800bc02:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800bc06:	460b      	mov	r3, r1
 800bc08:	3a36      	subs	r2, #54	; 0x36
 800bc0a:	4432      	add	r2, r6
 800bc0c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800bc10:	428a      	cmp	r2, r1
 800bc12:	dd08      	ble.n	800bc26 <scalbn+0x76>
 800bc14:	2d00      	cmp	r5, #0
 800bc16:	a120      	add	r1, pc, #128	; (adr r1, 800bc98 <scalbn+0xe8>)
 800bc18:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc1c:	da1c      	bge.n	800bc58 <scalbn+0xa8>
 800bc1e:	a120      	add	r1, pc, #128	; (adr r1, 800bca0 <scalbn+0xf0>)
 800bc20:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc24:	e018      	b.n	800bc58 <scalbn+0xa8>
 800bc26:	2a00      	cmp	r2, #0
 800bc28:	dd08      	ble.n	800bc3c <scalbn+0x8c>
 800bc2a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bc2e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bc32:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bc36:	ec45 4b10 	vmov	d0, r4, r5
 800bc3a:	bd70      	pop	{r4, r5, r6, pc}
 800bc3c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800bc40:	da19      	bge.n	800bc76 <scalbn+0xc6>
 800bc42:	f24c 3350 	movw	r3, #50000	; 0xc350
 800bc46:	429e      	cmp	r6, r3
 800bc48:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800bc4c:	dd0a      	ble.n	800bc64 <scalbn+0xb4>
 800bc4e:	a112      	add	r1, pc, #72	; (adr r1, 800bc98 <scalbn+0xe8>)
 800bc50:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d1e2      	bne.n	800bc1e <scalbn+0x6e>
 800bc58:	a30f      	add	r3, pc, #60	; (adr r3, 800bc98 <scalbn+0xe8>)
 800bc5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc5e:	f7f4 fccb 	bl	80005f8 <__aeabi_dmul>
 800bc62:	e7cb      	b.n	800bbfc <scalbn+0x4c>
 800bc64:	a10a      	add	r1, pc, #40	; (adr r1, 800bc90 <scalbn+0xe0>)
 800bc66:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d0b8      	beq.n	800bbe0 <scalbn+0x30>
 800bc6e:	a10e      	add	r1, pc, #56	; (adr r1, 800bca8 <scalbn+0xf8>)
 800bc70:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc74:	e7b4      	b.n	800bbe0 <scalbn+0x30>
 800bc76:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bc7a:	3236      	adds	r2, #54	; 0x36
 800bc7c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bc80:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800bc84:	4620      	mov	r0, r4
 800bc86:	4b0c      	ldr	r3, [pc, #48]	; (800bcb8 <scalbn+0x108>)
 800bc88:	2200      	movs	r2, #0
 800bc8a:	e7e8      	b.n	800bc5e <scalbn+0xae>
 800bc8c:	f3af 8000 	nop.w
 800bc90:	c2f8f359 	.word	0xc2f8f359
 800bc94:	01a56e1f 	.word	0x01a56e1f
 800bc98:	8800759c 	.word	0x8800759c
 800bc9c:	7e37e43c 	.word	0x7e37e43c
 800bca0:	8800759c 	.word	0x8800759c
 800bca4:	fe37e43c 	.word	0xfe37e43c
 800bca8:	c2f8f359 	.word	0xc2f8f359
 800bcac:	81a56e1f 	.word	0x81a56e1f
 800bcb0:	43500000 	.word	0x43500000
 800bcb4:	ffff3cb0 	.word	0xffff3cb0
 800bcb8:	3c900000 	.word	0x3c900000

0800bcbc <_init>:
 800bcbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcbe:	bf00      	nop
 800bcc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bcc2:	bc08      	pop	{r3}
 800bcc4:	469e      	mov	lr, r3
 800bcc6:	4770      	bx	lr

0800bcc8 <_fini>:
 800bcc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcca:	bf00      	nop
 800bccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bcce:	bc08      	pop	{r3}
 800bcd0:	469e      	mov	lr, r3
 800bcd2:	4770      	bx	lr
