
Synoptic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ce4c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004690  0800cfe0  0800cfe0  0001cfe0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011670  08011670  000301e4  2**0
                  CONTENTS
  4 .ARM          00000008  08011670  08011670  00021670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011678  08011678  000301e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011678  08011678  00021678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801167c  0801167c  0002167c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08011680  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  200001e4  08011864  000301e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000043c  08011864  0003043c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001884d  00000000  00000000  00030214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b09  00000000  00000000  00048a61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001300  00000000  00000000  0004c570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001138  00000000  00000000  0004d870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029be8  00000000  00000000  0004e9a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a91f  00000000  00000000  00078590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f116c  00000000  00000000  00092eaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018401b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000063b0  00000000  00000000  0018406c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cfc4 	.word	0x0800cfc4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	0800cfc4 	.word	0x0800cfc4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f52:	4b0c      	ldr	r3, [pc, #48]	; (8000f84 <MX_DMA_Init+0x38>)
 8000f54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f56:	4a0b      	ldr	r2, [pc, #44]	; (8000f84 <MX_DMA_Init+0x38>)
 8000f58:	f043 0301 	orr.w	r3, r3, #1
 8000f5c:	6493      	str	r3, [r2, #72]	; 0x48
 8000f5e:	4b09      	ldr	r3, [pc, #36]	; (8000f84 <MX_DMA_Init+0x38>)
 8000f60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	607b      	str	r3, [r7, #4]
 8000f68:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	200f      	movs	r0, #15
 8000f70:	f001 fc17 	bl	80027a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000f74:	200f      	movs	r0, #15
 8000f76:	f001 fc30 	bl	80027da <HAL_NVIC_EnableIRQ>

}
 8000f7a:	bf00      	nop
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40021000 	.word	0x40021000

08000f88 <MX_GPIO_Init>:
        * EXTI
     PA2   ------> USART2_TX
     PA3   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b08a      	sub	sp, #40	; 0x28
 8000f8c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8e:	f107 0314 	add.w	r3, r7, #20
 8000f92:	2200      	movs	r2, #0
 8000f94:	601a      	str	r2, [r3, #0]
 8000f96:	605a      	str	r2, [r3, #4]
 8000f98:	609a      	str	r2, [r3, #8]
 8000f9a:	60da      	str	r2, [r3, #12]
 8000f9c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f9e:	4b41      	ldr	r3, [pc, #260]	; (80010a4 <MX_GPIO_Init+0x11c>)
 8000fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa2:	4a40      	ldr	r2, [pc, #256]	; (80010a4 <MX_GPIO_Init+0x11c>)
 8000fa4:	f043 0304 	orr.w	r3, r3, #4
 8000fa8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000faa:	4b3e      	ldr	r3, [pc, #248]	; (80010a4 <MX_GPIO_Init+0x11c>)
 8000fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fae:	f003 0304 	and.w	r3, r3, #4
 8000fb2:	613b      	str	r3, [r7, #16]
 8000fb4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fb6:	4b3b      	ldr	r3, [pc, #236]	; (80010a4 <MX_GPIO_Init+0x11c>)
 8000fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fba:	4a3a      	ldr	r2, [pc, #232]	; (80010a4 <MX_GPIO_Init+0x11c>)
 8000fbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fc2:	4b38      	ldr	r3, [pc, #224]	; (80010a4 <MX_GPIO_Init+0x11c>)
 8000fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fce:	4b35      	ldr	r3, [pc, #212]	; (80010a4 <MX_GPIO_Init+0x11c>)
 8000fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd2:	4a34      	ldr	r2, [pc, #208]	; (80010a4 <MX_GPIO_Init+0x11c>)
 8000fd4:	f043 0301 	orr.w	r3, r3, #1
 8000fd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fda:	4b32      	ldr	r3, [pc, #200]	; (80010a4 <MX_GPIO_Init+0x11c>)
 8000fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fde:	f003 0301 	and.w	r3, r3, #1
 8000fe2:	60bb      	str	r3, [r7, #8]
 8000fe4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe6:	4b2f      	ldr	r3, [pc, #188]	; (80010a4 <MX_GPIO_Init+0x11c>)
 8000fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fea:	4a2e      	ldr	r2, [pc, #184]	; (80010a4 <MX_GPIO_Init+0x11c>)
 8000fec:	f043 0302 	orr.w	r3, r3, #2
 8000ff0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ff2:	4b2c      	ldr	r3, [pc, #176]	; (80010a4 <MX_GPIO_Init+0x11c>)
 8000ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff6:	f003 0302 	and.w	r3, r3, #2
 8000ffa:	607b      	str	r3, [r7, #4]
 8000ffc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ffe:	2200      	movs	r2, #0
 8001000:	2120      	movs	r1, #32
 8001002:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001006:	f002 f823 	bl	8003050 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RST_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 800100a:	2200      	movs	r2, #0
 800100c:	f640 0104 	movw	r1, #2052	; 0x804
 8001010:	4825      	ldr	r0, [pc, #148]	; (80010a8 <MX_GPIO_Init+0x120>)
 8001012:	f002 f81d 	bl	8003050 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001016:	2201      	movs	r2, #1
 8001018:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800101c:	4822      	ldr	r0, [pc, #136]	; (80010a8 <MX_GPIO_Init+0x120>)
 800101e:	f002 f817 	bl	8003050 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001022:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001026:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001028:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800102c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001032:	f107 0314 	add.w	r3, r7, #20
 8001036:	4619      	mov	r1, r3
 8001038:	481c      	ldr	r0, [pc, #112]	; (80010ac <MX_GPIO_Init+0x124>)
 800103a:	f001 fe5f 	bl	8002cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800103e:	230c      	movs	r3, #12
 8001040:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001042:	2302      	movs	r3, #2
 8001044:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001046:	2300      	movs	r3, #0
 8001048:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800104a:	2303      	movs	r3, #3
 800104c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800104e:	2307      	movs	r3, #7
 8001050:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001052:	f107 0314 	add.w	r3, r7, #20
 8001056:	4619      	mov	r1, r3
 8001058:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800105c:	f001 fe4e 	bl	8002cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001060:	2320      	movs	r3, #32
 8001062:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001064:	2301      	movs	r3, #1
 8001066:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001068:	2300      	movs	r3, #0
 800106a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106c:	2300      	movs	r3, #0
 800106e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001070:	f107 0314 	add.w	r3, r7, #20
 8001074:	4619      	mov	r1, r3
 8001076:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800107a:	f001 fe3f 	bl	8002cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_DC_Pin|LCD_CS_Pin;
 800107e:	f641 0304 	movw	r3, #6148	; 0x1804
 8001082:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001084:	2301      	movs	r3, #1
 8001086:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001088:	2300      	movs	r3, #0
 800108a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108c:	2300      	movs	r3, #0
 800108e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001090:	f107 0314 	add.w	r3, r7, #20
 8001094:	4619      	mov	r1, r3
 8001096:	4804      	ldr	r0, [pc, #16]	; (80010a8 <MX_GPIO_Init+0x120>)
 8001098:	f001 fe30 	bl	8002cfc <HAL_GPIO_Init>

}
 800109c:	bf00      	nop
 800109e:	3728      	adds	r7, #40	; 0x28
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	40021000 	.word	0x40021000
 80010a8:	48000400 	.word	0x48000400
 80010ac:	48000800 	.word	0x48000800

080010b0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010b4:	4b1b      	ldr	r3, [pc, #108]	; (8001124 <MX_I2C1_Init+0x74>)
 80010b6:	4a1c      	ldr	r2, [pc, #112]	; (8001128 <MX_I2C1_Init+0x78>)
 80010b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80010ba:	4b1a      	ldr	r3, [pc, #104]	; (8001124 <MX_I2C1_Init+0x74>)
 80010bc:	4a1b      	ldr	r2, [pc, #108]	; (800112c <MX_I2C1_Init+0x7c>)
 80010be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80010c0:	4b18      	ldr	r3, [pc, #96]	; (8001124 <MX_I2C1_Init+0x74>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010c6:	4b17      	ldr	r3, [pc, #92]	; (8001124 <MX_I2C1_Init+0x74>)
 80010c8:	2201      	movs	r2, #1
 80010ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010cc:	4b15      	ldr	r3, [pc, #84]	; (8001124 <MX_I2C1_Init+0x74>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80010d2:	4b14      	ldr	r3, [pc, #80]	; (8001124 <MX_I2C1_Init+0x74>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010d8:	4b12      	ldr	r3, [pc, #72]	; (8001124 <MX_I2C1_Init+0x74>)
 80010da:	2200      	movs	r2, #0
 80010dc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010de:	4b11      	ldr	r3, [pc, #68]	; (8001124 <MX_I2C1_Init+0x74>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010e4:	4b0f      	ldr	r3, [pc, #60]	; (8001124 <MX_I2C1_Init+0x74>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010ea:	480e      	ldr	r0, [pc, #56]	; (8001124 <MX_I2C1_Init+0x74>)
 80010ec:	f001 ffc8 	bl	8003080 <HAL_I2C_Init>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80010f6:	f000 fef7 	bl	8001ee8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010fa:	2100      	movs	r1, #0
 80010fc:	4809      	ldr	r0, [pc, #36]	; (8001124 <MX_I2C1_Init+0x74>)
 80010fe:	f003 f88f 	bl	8004220 <HAL_I2CEx_ConfigAnalogFilter>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001108:	f000 feee 	bl	8001ee8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800110c:	2100      	movs	r1, #0
 800110e:	4805      	ldr	r0, [pc, #20]	; (8001124 <MX_I2C1_Init+0x74>)
 8001110:	f003 f8d1 	bl	80042b6 <HAL_I2CEx_ConfigDigitalFilter>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800111a:	f000 fee5 	bl	8001ee8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	20000200 	.word	0x20000200
 8001128:	40005400 	.word	0x40005400
 800112c:	10909cec 	.word	0x10909cec

08001130 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b0ac      	sub	sp, #176	; 0xb0
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001138:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	60da      	str	r2, [r3, #12]
 8001146:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001148:	f107 0314 	add.w	r3, r7, #20
 800114c:	2288      	movs	r2, #136	; 0x88
 800114e:	2100      	movs	r1, #0
 8001150:	4618      	mov	r0, r3
 8001152:	f007 fb51 	bl	80087f8 <memset>
  if(i2cHandle->Instance==I2C1)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a21      	ldr	r2, [pc, #132]	; (80011e0 <HAL_I2C_MspInit+0xb0>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d13a      	bne.n	80011d6 <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001160:	2340      	movs	r3, #64	; 0x40
 8001162:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001164:	2300      	movs	r3, #0
 8001166:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001168:	f107 0314 	add.w	r3, r7, #20
 800116c:	4618      	mov	r0, r3
 800116e:	f003 ffb1 	bl	80050d4 <HAL_RCCEx_PeriphCLKConfig>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001178:	f000 feb6 	bl	8001ee8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800117c:	4b19      	ldr	r3, [pc, #100]	; (80011e4 <HAL_I2C_MspInit+0xb4>)
 800117e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001180:	4a18      	ldr	r2, [pc, #96]	; (80011e4 <HAL_I2C_MspInit+0xb4>)
 8001182:	f043 0302 	orr.w	r3, r3, #2
 8001186:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001188:	4b16      	ldr	r3, [pc, #88]	; (80011e4 <HAL_I2C_MspInit+0xb4>)
 800118a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118c:	f003 0302 	and.w	r3, r3, #2
 8001190:	613b      	str	r3, [r7, #16]
 8001192:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001194:	23c0      	movs	r3, #192	; 0xc0
 8001196:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800119a:	2312      	movs	r3, #18
 800119c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a6:	2303      	movs	r3, #3
 80011a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011ac:	2304      	movs	r3, #4
 80011ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011b6:	4619      	mov	r1, r3
 80011b8:	480b      	ldr	r0, [pc, #44]	; (80011e8 <HAL_I2C_MspInit+0xb8>)
 80011ba:	f001 fd9f 	bl	8002cfc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011be:	4b09      	ldr	r3, [pc, #36]	; (80011e4 <HAL_I2C_MspInit+0xb4>)
 80011c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011c2:	4a08      	ldr	r2, [pc, #32]	; (80011e4 <HAL_I2C_MspInit+0xb4>)
 80011c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011c8:	6593      	str	r3, [r2, #88]	; 0x58
 80011ca:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <HAL_I2C_MspInit+0xb4>)
 80011cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80011d6:	bf00      	nop
 80011d8:	37b0      	adds	r7, #176	; 0xb0
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	40005400 	.word	0x40005400
 80011e4:	40021000 	.word	0x40021000
 80011e8:	48000400 	.word	0x48000400

080011ec <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80011f0:	4b0b      	ldr	r3, [pc, #44]	; (8001220 <MX_IWDG_Init+0x34>)
 80011f2:	4a0c      	ldr	r2, [pc, #48]	; (8001224 <MX_IWDG_Init+0x38>)
 80011f4:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 80011f6:	4b0a      	ldr	r3, [pc, #40]	; (8001220 <MX_IWDG_Init+0x34>)
 80011f8:	2204      	movs	r2, #4
 80011fa:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 80011fc:	4b08      	ldr	r3, [pc, #32]	; (8001220 <MX_IWDG_Init+0x34>)
 80011fe:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001202:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 8001204:	4b06      	ldr	r3, [pc, #24]	; (8001220 <MX_IWDG_Init+0x34>)
 8001206:	f640 72ff 	movw	r2, #4095	; 0xfff
 800120a:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800120c:	4804      	ldr	r0, [pc, #16]	; (8001220 <MX_IWDG_Init+0x34>)
 800120e:	f003 f89e 	bl	800434e <HAL_IWDG_Init>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8001218:	f000 fe66 	bl	8001ee8 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 800121c:	bf00      	nop
 800121e:	bd80      	pop	{r7, pc}
 8001220:	20000254 	.word	0x20000254
 8001224:	40003000 	.word	0x40003000

08001228 <lcd_cmd>:
		CMD(0xf6), 0x00,
		CMD(ST7735S_COLMOD), 0x05,
		CMD(ST7735S_MADCTL), 0xa0
};

static void lcd_cmd(uint8_t cmd){
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8001232:	2200      	movs	r2, #0
 8001234:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001238:	480c      	ldr	r0, [pc, #48]	; (800126c <lcd_cmd+0x44>)
 800123a:	f001 ff09 	bl	8003050 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 800123e:	2200      	movs	r2, #0
 8001240:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001244:	4809      	ldr	r0, [pc, #36]	; (800126c <lcd_cmd+0x44>)
 8001246:	f001 ff03 	bl	8003050 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &cmd, 1, HAL_MAX_DELAY);
 800124a:	1df9      	adds	r1, r7, #7
 800124c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001250:	2201      	movs	r2, #1
 8001252:	4807      	ldr	r0, [pc, #28]	; (8001270 <lcd_cmd+0x48>)
 8001254:	f004 fc9d 	bl	8005b92 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001258:	2201      	movs	r2, #1
 800125a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800125e:	4803      	ldr	r0, [pc, #12]	; (800126c <lcd_cmd+0x44>)
 8001260:	f001 fef6 	bl	8003050 <HAL_GPIO_WritePin>
}
 8001264:	bf00      	nop
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	48000400 	.word	0x48000400
 8001270:	200002f4 	.word	0x200002f4

08001274 <lcd_data>:

static void lcd_data(uint8_t data){
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	4603      	mov	r3, r0
 800127c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 800127e:	2201      	movs	r2, #1
 8001280:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001284:	480c      	ldr	r0, [pc, #48]	; (80012b8 <lcd_data+0x44>)
 8001286:	f001 fee3 	bl	8003050 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 800128a:	2200      	movs	r2, #0
 800128c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001290:	4809      	ldr	r0, [pc, #36]	; (80012b8 <lcd_data+0x44>)
 8001292:	f001 fedd 	bl	8003050 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &data, 1, HAL_MAX_DELAY);
 8001296:	1df9      	adds	r1, r7, #7
 8001298:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800129c:	2201      	movs	r2, #1
 800129e:	4807      	ldr	r0, [pc, #28]	; (80012bc <lcd_data+0x48>)
 80012a0:	f004 fc77 	bl	8005b92 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 80012a4:	2201      	movs	r2, #1
 80012a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012aa:	4803      	ldr	r0, [pc, #12]	; (80012b8 <lcd_data+0x44>)
 80012ac:	f001 fed0 	bl	8003050 <HAL_GPIO_WritePin>
}
 80012b0:	bf00      	nop
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	48000400 	.word	0x48000400
 80012bc:	200002f4 	.word	0x200002f4

080012c0 <lcd_send>:

static void lcd_send(uint16_t value){
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	80fb      	strh	r3, [r7, #6]
	if(value & 0x100){
 80012ca:	88fb      	ldrh	r3, [r7, #6]
 80012cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d005      	beq.n	80012e0 <lcd_send+0x20>
		lcd_cmd(value);
 80012d4:	88fb      	ldrh	r3, [r7, #6]
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff ffa5 	bl	8001228 <lcd_cmd>
	} else{
		lcd_data(value);
	}
}
 80012de:	e004      	b.n	80012ea <lcd_send+0x2a>
		lcd_data(value);
 80012e0:	88fb      	ldrh	r3, [r7, #6]
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff ffc5 	bl	8001274 <lcd_data>
}
 80012ea:	bf00      	nop
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <lcd_data16>:

static void lcd_data16(uint16_t value){
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b082      	sub	sp, #8
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	4603      	mov	r3, r0
 80012fa:	80fb      	strh	r3, [r7, #6]
	lcd_data(value >> 8);
 80012fc:	88fb      	ldrh	r3, [r7, #6]
 80012fe:	0a1b      	lsrs	r3, r3, #8
 8001300:	b29b      	uxth	r3, r3
 8001302:	b2db      	uxtb	r3, r3
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff ffb5 	bl	8001274 <lcd_data>
	lcd_data(value);
 800130a:	88fb      	ldrh	r3, [r7, #6]
 800130c:	b2db      	uxtb	r3, r3
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff ffb0 	bl	8001274 <lcd_data>
}
 8001314:	bf00      	nop
 8001316:	3708      	adds	r7, #8
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}

0800131c <lcd_set_window>:

static void lcd_set_window(int x, int y, int width, int height){
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	60f8      	str	r0, [r7, #12]
 8001324:	60b9      	str	r1, [r7, #8]
 8001326:	607a      	str	r2, [r7, #4]
 8001328:	603b      	str	r3, [r7, #0]
	lcd_cmd(ST7735S_CASET);
 800132a:	202a      	movs	r0, #42	; 0x2a
 800132c:	f7ff ff7c 	bl	8001228 <lcd_cmd>
	lcd_data16(LCD_OFFSET_X + x);
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	b29b      	uxth	r3, r3
 8001334:	3301      	adds	r3, #1
 8001336:	b29b      	uxth	r3, r3
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff ffda 	bl	80012f2 <lcd_data16>
	lcd_data16(LCD_OFFSET_X + x + width - 1);
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	b29a      	uxth	r2, r3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	b29b      	uxth	r3, r3
 8001346:	4413      	add	r3, r2
 8001348:	b29b      	uxth	r3, r3
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff ffd1 	bl	80012f2 <lcd_data16>

	lcd_cmd(ST7735S_RASET);
 8001350:	202b      	movs	r0, #43	; 0x2b
 8001352:	f7ff ff69 	bl	8001228 <lcd_cmd>
	lcd_data16(LCD_OFFSET_Y + y);
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	b29b      	uxth	r3, r3
 800135a:	3302      	adds	r3, #2
 800135c:	b29b      	uxth	r3, r3
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff ffc7 	bl	80012f2 <lcd_data16>
	lcd_data16(LCD_OFFSET_Y + y + height -1);
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	b29a      	uxth	r2, r3
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	b29b      	uxth	r3, r3
 800136c:	4413      	add	r3, r2
 800136e:	b29b      	uxth	r3, r3
 8001370:	3301      	adds	r3, #1
 8001372:	b29b      	uxth	r3, r3
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff ffbc 	bl	80012f2 <lcd_data16>

}
 800137a:	bf00      	nop
 800137c:	3710      	adds	r7, #16
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <lcd_fill_box>:

void lcd_fill_box(int x, int y, int width, int height, uint16_t color){
 8001382:	b580      	push	{r7, lr}
 8001384:	b086      	sub	sp, #24
 8001386:	af00      	add	r7, sp, #0
 8001388:	60f8      	str	r0, [r7, #12]
 800138a:	60b9      	str	r1, [r7, #8]
 800138c:	607a      	str	r2, [r7, #4]
 800138e:	603b      	str	r3, [r7, #0]
	lcd_set_window(x, y, width, height);
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	68b9      	ldr	r1, [r7, #8]
 8001396:	68f8      	ldr	r0, [r7, #12]
 8001398:	f7ff ffc0 	bl	800131c <lcd_set_window>

	lcd_cmd(ST7735S_RAMWR);
 800139c:	202c      	movs	r0, #44	; 0x2c
 800139e:	f7ff ff43 	bl	8001228 <lcd_cmd>
	for(int i=0; i< width * height; i++)
 80013a2:	2300      	movs	r3, #0
 80013a4:	617b      	str	r3, [r7, #20]
 80013a6:	e006      	b.n	80013b6 <lcd_fill_box+0x34>
		lcd_data16(color);
 80013a8:	8c3b      	ldrh	r3, [r7, #32]
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7ff ffa1 	bl	80012f2 <lcd_data16>
	for(int i=0; i< width * height; i++)
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	3301      	adds	r3, #1
 80013b4:	617b      	str	r3, [r7, #20]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	683a      	ldr	r2, [r7, #0]
 80013ba:	fb02 f303 	mul.w	r3, r2, r3
 80013be:	697a      	ldr	r2, [r7, #20]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	dbf1      	blt.n	80013a8 <lcd_fill_box+0x26>
}
 80013c4:	bf00      	nop
 80013c6:	bf00      	nop
 80013c8:	3718      	adds	r7, #24
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
	...

080013d0 <lcd_init>:
	lcd_cmd(ST7735S_SLPOUT);
	HAL_Delay(120);
}


void lcd_init(void){
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
	int i;
	HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 80013d6:	2200      	movs	r2, #0
 80013d8:	2104      	movs	r1, #4
 80013da:	4817      	ldr	r0, [pc, #92]	; (8001438 <lcd_init+0x68>)
 80013dc:	f001 fe38 	bl	8003050 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80013e0:	2064      	movs	r0, #100	; 0x64
 80013e2:	f001 f8df 	bl	80025a4 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 80013e6:	2201      	movs	r2, #1
 80013e8:	2104      	movs	r1, #4
 80013ea:	4813      	ldr	r0, [pc, #76]	; (8001438 <lcd_init+0x68>)
 80013ec:	f001 fe30 	bl	8003050 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80013f0:	2064      	movs	r0, #100	; 0x64
 80013f2:	f001 f8d7 	bl	80025a4 <HAL_Delay>

	for(i=0; i< sizeof init_table / sizeof (uint16_t); i++){
 80013f6:	2300      	movs	r3, #0
 80013f8:	607b      	str	r3, [r7, #4]
 80013fa:	e009      	b.n	8001410 <lcd_init+0x40>
		lcd_send(init_table[i]);
 80013fc:	4a0f      	ldr	r2, [pc, #60]	; (800143c <lcd_init+0x6c>)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff ff5b 	bl	80012c0 <lcd_send>
	for(i=0; i< sizeof init_table / sizeof (uint16_t); i++){
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	3301      	adds	r3, #1
 800140e:	607b      	str	r3, [r7, #4]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2b4b      	cmp	r3, #75	; 0x4b
 8001414:	d9f2      	bls.n	80013fc <lcd_init+0x2c>
	}

	HAL_Delay(200);
 8001416:	20c8      	movs	r0, #200	; 0xc8
 8001418:	f001 f8c4 	bl	80025a4 <HAL_Delay>
	lcd_cmd(ST7735S_SLPOUT);
 800141c:	2011      	movs	r0, #17
 800141e:	f7ff ff03 	bl	8001228 <lcd_cmd>
	HAL_Delay(120);
 8001422:	2078      	movs	r0, #120	; 0x78
 8001424:	f001 f8be 	bl	80025a4 <HAL_Delay>
	lcd_cmd(ST7735S_DISPON);
 8001428:	2029      	movs	r0, #41	; 0x29
 800142a:	f7ff fefd 	bl	8001228 <lcd_cmd>
}
 800142e:	bf00      	nop
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	48000400 	.word	0x48000400
 800143c:	0800d26c 	.word	0x0800d26c

08001440 <lcd_draw_point>:
void lcd_invoff(){
	lcd_cmd(ST7735S_INVOFF);
}


void lcd_draw_point(int x, int y, uint16_t color){
 8001440:	b580      	push	{r7, lr}
 8001442:	b086      	sub	sp, #24
 8001444:	af02      	add	r7, sp, #8
 8001446:	60f8      	str	r0, [r7, #12]
 8001448:	60b9      	str	r1, [r7, #8]
 800144a:	4613      	mov	r3, r2
 800144c:	80fb      	strh	r3, [r7, #6]
	lcd_fill_box(x, y, 1, 1, color);
 800144e:	88fb      	ldrh	r3, [r7, #6]
 8001450:	9300      	str	r3, [sp, #0]
 8001452:	2301      	movs	r3, #1
 8001454:	2201      	movs	r2, #1
 8001456:	68b9      	ldr	r1, [r7, #8]
 8001458:	68f8      	ldr	r0, [r7, #12]
 800145a:	f7ff ff92 	bl	8001382 <lcd_fill_box>
}
 800145e:	bf00      	nop
 8001460:	3710      	adds	r7, #16
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
	...

08001468 <lcd_draw_image_fast>:
			array_counter++;
			lcd_colorize_pixel(ix, iy, mcolor);
		}
}

void lcd_draw_image_fast(int x, int y, int width, int height, uint8_t *data){
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	60f8      	str	r0, [r7, #12]
 8001470:	60b9      	str	r1, [r7, #8]
 8001472:	607a      	str	r2, [r7, #4]
 8001474:	603b      	str	r3, [r7, #0]

	lcd_cmd(ST7735S_CASET);
 8001476:	202a      	movs	r0, #42	; 0x2a
 8001478:	f7ff fed6 	bl	8001228 <lcd_cmd>
	lcd_data16(x);
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	b29b      	uxth	r3, r3
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff ff36 	bl	80012f2 <lcd_data16>
	lcd_data16(x+width-1);
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	b29a      	uxth	r2, r3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	b29b      	uxth	r3, r3
 800148e:	4413      	add	r3, r2
 8001490:	b29b      	uxth	r3, r3
 8001492:	3b01      	subs	r3, #1
 8001494:	b29b      	uxth	r3, r3
 8001496:	4618      	mov	r0, r3
 8001498:	f7ff ff2b 	bl	80012f2 <lcd_data16>

	lcd_cmd(ST7735S_RASET);
 800149c:	202b      	movs	r0, #43	; 0x2b
 800149e:	f7ff fec3 	bl	8001228 <lcd_cmd>
	lcd_data16(y);
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	b29b      	uxth	r3, r3
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7ff ff23 	bl	80012f2 <lcd_data16>
	lcd_data16(y+height-1);
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	b29a      	uxth	r2, r3
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	b29b      	uxth	r3, r3
 80014b4:	4413      	add	r3, r2
 80014b6:	b29b      	uxth	r3, r3
 80014b8:	3b01      	subs	r3, #1
 80014ba:	b29b      	uxth	r3, r3
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff ff18 	bl	80012f2 <lcd_data16>

	lcd_cmd(ST7735S_RAMWR);
 80014c2:	202c      	movs	r0, #44	; 0x2c
 80014c4:	f7ff feb0 	bl	8001228 <lcd_cmd>
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 80014c8:	2201      	movs	r2, #1
 80014ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014ce:	4811      	ldr	r0, [pc, #68]	; (8001514 <lcd_draw_image_fast+0xac>)
 80014d0:	f001 fdbe 	bl	8003050 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80014d4:	2200      	movs	r2, #0
 80014d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014da:	480e      	ldr	r0, [pc, #56]	; (8001514 <lcd_draw_image_fast+0xac>)
 80014dc:	f001 fdb8 	bl	8003050 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi2, data, width*height*2, HAL_MAX_DELAY);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	b29a      	uxth	r2, r3
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	b29b      	uxth	r3, r3
 80014e8:	fb12 f303 	smulbb	r3, r2, r3
 80014ec:	b29b      	uxth	r3, r3
 80014ee:	005b      	lsls	r3, r3, #1
 80014f0:	b29a      	uxth	r2, r3
 80014f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014f6:	69b9      	ldr	r1, [r7, #24]
 80014f8:	4807      	ldr	r0, [pc, #28]	; (8001518 <lcd_draw_image_fast+0xb0>)
 80014fa:	f004 fb4a 	bl	8005b92 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 80014fe:	2201      	movs	r2, #1
 8001500:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001504:	4803      	ldr	r0, [pc, #12]	; (8001514 <lcd_draw_image_fast+0xac>)
 8001506:	f001 fda3 	bl	8003050 <HAL_GPIO_WritePin>
}
 800150a:	bf00      	nop
 800150c:	3710      	adds	r7, #16
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	48000400 	.word	0x48000400
 8001518:	200002f4 	.word	0x200002f4

0800151c <lps_write_to_reg>:
 * \param	reg adres rejestru
 * \param	data byte danych do zapisania
 * \return	status transmisji
 *
 */
static HAL_StatusTypeDef lps_write_to_reg(uint8_t reg, uint8_t data){
 800151c:	b580      	push	{r7, lr}
 800151e:	b086      	sub	sp, #24
 8001520:	af02      	add	r7, sp, #8
 8001522:	4603      	mov	r3, r0
 8001524:	460a      	mov	r2, r1
 8001526:	71fb      	strb	r3, [r7, #7]
 8001528:	4613      	mov	r3, r2
 800152a:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef status;
	uint8_t buffer[2] = {reg, data};
 800152c:	79fb      	ldrb	r3, [r7, #7]
 800152e:	733b      	strb	r3, [r7, #12]
 8001530:	79bb      	ldrb	r3, [r7, #6]
 8001532:	737b      	strb	r3, [r7, #13]

    status = HAL_I2C_Master_Transmit(&hi2c1, LPS25HB_ADDR, buffer, sizeof buffer, HAL_MAX_DELAY);
 8001534:	f107 020c 	add.w	r2, r7, #12
 8001538:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800153c:	9300      	str	r3, [sp, #0]
 800153e:	2302      	movs	r3, #2
 8001540:	21ba      	movs	r1, #186	; 0xba
 8001542:	4805      	ldr	r0, [pc, #20]	; (8001558 <lps_write_to_reg+0x3c>)
 8001544:	f001 fe2c 	bl	80031a0 <HAL_I2C_Master_Transmit>
 8001548:	4603      	mov	r3, r0
 800154a:	73fb      	strb	r3, [r7, #15]
	return status;
 800154c:	7bfb      	ldrb	r3, [r7, #15]
}
 800154e:	4618      	mov	r0, r3
 8001550:	3710      	adds	r7, #16
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	20000200 	.word	0x20000200

0800155c <lps_read_from_reg>:
 * \param	data odczyt zostanie zapisany pod wskazywanym adresem
 *
 * \return status transmisji (nie rozróżnia czy status dotyczy transmisji o dostep do rejestru, czy statusu odczytu z rejestru)
 *
 */
static HAL_StatusTypeDef lps_read_from_reg(uint8_t reg, uint8_t* data_ptr){
 800155c:	b580      	push	{r7, lr}
 800155e:	b086      	sub	sp, #24
 8001560:	af02      	add	r7, sp, #8
 8001562:	4603      	mov	r3, r0
 8001564:	6039      	str	r1, [r7, #0]
 8001566:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef status;
	if((status = HAL_I2C_Master_Transmit(&hi2c1, LPS25HB_ADDR, &reg, sizeof reg, HAL_MAX_DELAY))!=HAL_OK)
 8001568:	1dfa      	adds	r2, r7, #7
 800156a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800156e:	9300      	str	r3, [sp, #0]
 8001570:	2301      	movs	r3, #1
 8001572:	21ba      	movs	r1, #186	; 0xba
 8001574:	480c      	ldr	r0, [pc, #48]	; (80015a8 <lps_read_from_reg+0x4c>)
 8001576:	f001 fe13 	bl	80031a0 <HAL_I2C_Master_Transmit>
 800157a:	4603      	mov	r3, r0
 800157c:	73fb      	strb	r3, [r7, #15]
 800157e:	7bfb      	ldrb	r3, [r7, #15]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <lps_read_from_reg+0x2c>
		return status;
 8001584:	7bfb      	ldrb	r3, [r7, #15]
 8001586:	e00b      	b.n	80015a0 <lps_read_from_reg+0x44>
	status = HAL_I2C_Master_Receive(&hi2c1, LPS25HB_ADDR, data_ptr, sizeof data_ptr, HAL_MAX_DELAY);
 8001588:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800158c:	9300      	str	r3, [sp, #0]
 800158e:	2304      	movs	r3, #4
 8001590:	683a      	ldr	r2, [r7, #0]
 8001592:	21ba      	movs	r1, #186	; 0xba
 8001594:	4804      	ldr	r0, [pc, #16]	; (80015a8 <lps_read_from_reg+0x4c>)
 8001596:	f001 fef7 	bl	8003388 <HAL_I2C_Master_Receive>
 800159a:	4603      	mov	r3, r0
 800159c:	73fb      	strb	r3, [r7, #15]
	return status;
 800159e:	7bfb      	ldrb	r3, [r7, #15]
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3710      	adds	r7, #16
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	20000200 	.word	0x20000200

080015ac <lps_init>:


void lps_init(){
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
	// wlacz urzadzenie i ustaw czestotliwosc pomiaru na 25Hz
	lps_write_to_reg(CTRL_REG1, SET_CTRL_REG1_PD|SET_CTRL_REG1_ODR2);
 80015b0:	21c0      	movs	r1, #192	; 0xc0
 80015b2:	2020      	movs	r0, #32
 80015b4:	f7ff ffb2 	bl	800151c <lps_write_to_reg>

	// przy problemach z odczytem danych dodac oczekiwanie 100 ms

	// aktywacja i ustawienie fifo dla pomiarow
	lps_write_to_reg(CTRL_REG2,SET_CTRL_REG2_FIFO);
 80015b8:	2140      	movs	r1, #64	; 0x40
 80015ba:	2021      	movs	r0, #33	; 0x21
 80015bc:	f7ff ffae 	bl	800151c <lps_write_to_reg>
	lps_write_to_reg(FIFO_CTRL, SET_FIFO_CTRL_MEAN_MODE|SET_FIFO_CTRL_WTM_32_SMPL);
 80015c0:	21cf      	movs	r1, #207	; 0xcf
 80015c2:	202e      	movs	r0, #46	; 0x2e
 80015c4:	f7ff ffaa 	bl	800151c <lps_write_to_reg>

}
 80015c8:	bf00      	nop
 80015ca:	bd80      	pop	{r7, pc}

080015cc <lps_read_temperature>:

float lps_read_temperature(float temp_conv){
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b086      	sub	sp, #24
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	ed87 0a01 	vstr	s0, [r7, #4]
	uint8_t *ptr_lsb, *ptr_msb;
	ptr_lsb = malloc(sizeof(uint8_t));
 80015d6:	2001      	movs	r0, #1
 80015d8:	f007 f8f0 	bl	80087bc <malloc>
 80015dc:	4603      	mov	r3, r0
 80015de:	617b      	str	r3, [r7, #20]
	ptr_msb = malloc(sizeof(uint8_t));
 80015e0:	2001      	movs	r0, #1
 80015e2:	f007 f8eb 	bl	80087bc <malloc>
 80015e6:	4603      	mov	r3, r0
 80015e8:	613b      	str	r3, [r7, #16]
	lps_read_from_reg(TEMP_OUT_L, ptr_lsb);
 80015ea:	6979      	ldr	r1, [r7, #20]
 80015ec:	202b      	movs	r0, #43	; 0x2b
 80015ee:	f7ff ffb5 	bl	800155c <lps_read_from_reg>
	lps_read_from_reg(TEMP_OUT_H, ptr_msb);
 80015f2:	6939      	ldr	r1, [r7, #16]
 80015f4:	202c      	movs	r0, #44	; 0x2c
 80015f6:	f7ff ffb1 	bl	800155c <lps_read_from_reg>
    int16_t val = *ptr_lsb + (*ptr_msb <<8);
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	b29a      	uxth	r2, r3
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	b29b      	uxth	r3, r3
 8001606:	021b      	lsls	r3, r3, #8
 8001608:	b29b      	uxth	r3, r3
 800160a:	4413      	add	r3, r2
 800160c:	b29b      	uxth	r3, r3
 800160e:	81fb      	strh	r3, [r7, #14]

    free(ptr_lsb);
 8001610:	6978      	ldr	r0, [r7, #20]
 8001612:	f007 f8db 	bl	80087cc <free>
    free(ptr_msb);
 8001616:	6938      	ldr	r0, [r7, #16]
 8001618:	f007 f8d8 	bl	80087cc <free>

	return 42.5f + val / 480.0f + temp_conv;
 800161c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001620:	ee07 3a90 	vmov	s15, r3
 8001624:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001628:	eddf 6a08 	vldr	s13, [pc, #32]	; 800164c <lps_read_temperature+0x80>
 800162c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001630:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001650 <lps_read_temperature+0x84>
 8001634:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001638:	edd7 7a01 	vldr	s15, [r7, #4]
 800163c:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001640:	eeb0 0a67 	vmov.f32	s0, s15
 8001644:	3718      	adds	r7, #24
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	43f00000 	.word	0x43f00000
 8001650:	422a0000 	.word	0x422a0000

08001654 <lps_pressure_correction>:

void lps_pressure_correction(uint16_t offset){
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	80fb      	strh	r3, [r7, #6]
	lps_write_to_reg(RPDS_L, offset);
 800165e:	88fb      	ldrh	r3, [r7, #6]
 8001660:	b2db      	uxtb	r3, r3
 8001662:	4619      	mov	r1, r3
 8001664:	2039      	movs	r0, #57	; 0x39
 8001666:	f7ff ff59 	bl	800151c <lps_write_to_reg>
	lps_write_to_reg(RPDS_H, offset >> 8);
 800166a:	88fb      	ldrh	r3, [r7, #6]
 800166c:	0a1b      	lsrs	r3, r3, #8
 800166e:	b29b      	uxth	r3, r3
 8001670:	b2db      	uxtb	r3, r3
 8001672:	4619      	mov	r1, r3
 8001674:	203a      	movs	r0, #58	; 0x3a
 8001676:	f7ff ff51 	bl	800151c <lps_write_to_reg>
}
 800167a:	bf00      	nop
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <lps_read_absolute_pressure>:


float lps_read_absolute_pressure(){
 8001682:	b580      	push	{r7, lr}
 8001684:	b082      	sub	sp, #8
 8001686:	af00      	add	r7, sp, #0
	uint8_t *pressure = malloc(sizeof(uint8_t)*3);
 8001688:	2003      	movs	r0, #3
 800168a:	f007 f897 	bl	80087bc <malloc>
 800168e:	4603      	mov	r3, r0
 8001690:	607b      	str	r3, [r7, #4]
	lps_read_from_reg(PRESS_OUT_XL, pressure);
 8001692:	6879      	ldr	r1, [r7, #4]
 8001694:	2028      	movs	r0, #40	; 0x28
 8001696:	f7ff ff61 	bl	800155c <lps_read_from_reg>
	lps_read_from_reg(PRESS_OUT_L, pressure+1);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	3301      	adds	r3, #1
 800169e:	4619      	mov	r1, r3
 80016a0:	2029      	movs	r0, #41	; 0x29
 80016a2:	f7ff ff5b 	bl	800155c <lps_read_from_reg>
	lps_read_from_reg(PRESS_OUT_H, pressure+2);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	3302      	adds	r3, #2
 80016aa:	4619      	mov	r1, r3
 80016ac:	202a      	movs	r0, #42	; 0x2a
 80016ae:	f7ff ff55 	bl	800155c <lps_read_from_reg>

	int32_t val = (*pressure + (*(pressure+1)<<8) + (*(pressure+2)<<16))/4096;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	461a      	mov	r2, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	3301      	adds	r3, #1
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	021b      	lsls	r3, r3, #8
 80016c0:	441a      	add	r2, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	3302      	adds	r3, #2
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	041b      	lsls	r3, r3, #16
 80016ca:	4413      	add	r3, r2
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	da01      	bge.n	80016d4 <lps_read_absolute_pressure+0x52>
 80016d0:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80016d4:	131b      	asrs	r3, r3, #12
 80016d6:	603b      	str	r3, [r7, #0]
	free(pressure);
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f007 f877 	bl	80087cc <free>
	return val;
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	ee07 3a90 	vmov	s15, r3
 80016e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15

}
 80016e8:	eeb0 0a67 	vmov.f32	s0, s15
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	0000      	movs	r0, r0
 80016f4:	0000      	movs	r0, r0
	...

080016f8 <lps_read_relative_pressure>:

float lps_read_relative_pressure(){
 80016f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80016fc:	b084      	sub	sp, #16
 80016fe:	af00      	add	r7, sp, #0
	const float h = 93; // jesli inna wysokosc to zmienic;
 8001700:	4b25      	ldr	r3, [pc, #148]	; (8001798 <lps_read_relative_pressure+0xa0>)
 8001702:	60fb      	str	r3, [r7, #12]
	float temp_K = lps_read_temperature(U_KELVIN);
 8001704:	ed9f 0a25 	vldr	s0, [pc, #148]	; 800179c <lps_read_relative_pressure+0xa4>
 8001708:	f7ff ff60 	bl	80015cc <lps_read_temperature>
 800170c:	ed87 0a02 	vstr	s0, [r7, #8]
	float abs_press = lps_read_absolute_pressure();
 8001710:	f7ff ffb7 	bl	8001682 <lps_read_absolute_pressure>
 8001714:	ed87 0a01 	vstr	s0, [r7, #4]

	return abs_press * exp(0.034162608734308*h / temp_K);
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f7fe ff15 	bl	8000548 <__aeabi_f2d>
 800171e:	4604      	mov	r4, r0
 8001720:	460d      	mov	r5, r1
 8001722:	68f8      	ldr	r0, [r7, #12]
 8001724:	f7fe ff10 	bl	8000548 <__aeabi_f2d>
 8001728:	a319      	add	r3, pc, #100	; (adr r3, 8001790 <lps_read_relative_pressure+0x98>)
 800172a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800172e:	f7fe ff63 	bl	80005f8 <__aeabi_dmul>
 8001732:	4602      	mov	r2, r0
 8001734:	460b      	mov	r3, r1
 8001736:	4690      	mov	r8, r2
 8001738:	4699      	mov	r9, r3
 800173a:	68b8      	ldr	r0, [r7, #8]
 800173c:	f7fe ff04 	bl	8000548 <__aeabi_f2d>
 8001740:	4602      	mov	r2, r0
 8001742:	460b      	mov	r3, r1
 8001744:	4640      	mov	r0, r8
 8001746:	4649      	mov	r1, r9
 8001748:	f7ff f880 	bl	800084c <__aeabi_ddiv>
 800174c:	4602      	mov	r2, r0
 800174e:	460b      	mov	r3, r1
 8001750:	ec43 2b17 	vmov	d7, r2, r3
 8001754:	eeb0 0a47 	vmov.f32	s0, s14
 8001758:	eef0 0a67 	vmov.f32	s1, s15
 800175c:	f00a fb4c 	bl	800bdf8 <exp>
 8001760:	ec53 2b10 	vmov	r2, r3, d0
 8001764:	4620      	mov	r0, r4
 8001766:	4629      	mov	r1, r5
 8001768:	f7fe ff46 	bl	80005f8 <__aeabi_dmul>
 800176c:	4602      	mov	r2, r0
 800176e:	460b      	mov	r3, r1
 8001770:	4610      	mov	r0, r2
 8001772:	4619      	mov	r1, r3
 8001774:	f7ff fa18 	bl	8000ba8 <__aeabi_d2f>
 8001778:	4603      	mov	r3, r0
 800177a:	ee07 3a90 	vmov	s15, r3
}
 800177e:	eeb0 0a67 	vmov.f32	s0, s15
 8001782:	3710      	adds	r7, #16
 8001784:	46bd      	mov	sp, r7
 8001786:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800178a:	bf00      	nop
 800178c:	f3af 8000 	nop.w
 8001790:	ee851132 	.word	0xee851132
 8001794:	3fa17dc2 	.word	0x3fa17dc2
 8001798:	42ba0000 	.word	0x42ba0000
 800179c:	43889333 	.word	0x43889333

080017a0 <lps_get_altitude_hyps_f>:

float lps_get_altitude_hyps_f(){
 80017a0:	b5b0      	push	{r4, r5, r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0

	float p0 = lps_read_relative_pressure(); // sea-level pressure
 80017a6:	f7ff ffa7 	bl	80016f8 <lps_read_relative_pressure>
 80017aa:	ed87 0a03 	vstr	s0, [r7, #12]
    float p = lps_read_absolute_pressure(); // pressure at location
 80017ae:	f7ff ff68 	bl	8001682 <lps_read_absolute_pressure>
 80017b2:	ed87 0a02 	vstr	s0, [r7, #8]
    float temp_K = lps_read_temperature(U_KELVIN);
 80017b6:	ed9f 0a26 	vldr	s0, [pc, #152]	; 8001850 <lps_get_altitude_hyps_f+0xb0>
 80017ba:	f7ff ff07 	bl	80015cc <lps_read_temperature>
 80017be:	ed87 0a01 	vstr	s0, [r7, #4]

    float h = (( pow(p0/p, 1/5.257) - 1)*( temp_K ))/0.0065;
 80017c2:	ed97 7a03 	vldr	s14, [r7, #12]
 80017c6:	edd7 7a02 	vldr	s15, [r7, #8]
 80017ca:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80017ce:	ee16 0a90 	vmov	r0, s13
 80017d2:	f7fe feb9 	bl	8000548 <__aeabi_f2d>
 80017d6:	4602      	mov	r2, r0
 80017d8:	460b      	mov	r3, r1
 80017da:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8001840 <lps_get_altitude_hyps_f+0xa0>
 80017de:	ec43 2b10 	vmov	d0, r2, r3
 80017e2:	f00a fb51 	bl	800be88 <pow>
 80017e6:	ec51 0b10 	vmov	r0, r1, d0
 80017ea:	f04f 0200 	mov.w	r2, #0
 80017ee:	4b19      	ldr	r3, [pc, #100]	; (8001854 <lps_get_altitude_hyps_f+0xb4>)
 80017f0:	f7fe fd4a 	bl	8000288 <__aeabi_dsub>
 80017f4:	4602      	mov	r2, r0
 80017f6:	460b      	mov	r3, r1
 80017f8:	4614      	mov	r4, r2
 80017fa:	461d      	mov	r5, r3
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f7fe fea3 	bl	8000548 <__aeabi_f2d>
 8001802:	4602      	mov	r2, r0
 8001804:	460b      	mov	r3, r1
 8001806:	4620      	mov	r0, r4
 8001808:	4629      	mov	r1, r5
 800180a:	f7fe fef5 	bl	80005f8 <__aeabi_dmul>
 800180e:	4602      	mov	r2, r0
 8001810:	460b      	mov	r3, r1
 8001812:	4610      	mov	r0, r2
 8001814:	4619      	mov	r1, r3
 8001816:	a30c      	add	r3, pc, #48	; (adr r3, 8001848 <lps_get_altitude_hyps_f+0xa8>)
 8001818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800181c:	f7ff f816 	bl	800084c <__aeabi_ddiv>
 8001820:	4602      	mov	r2, r0
 8001822:	460b      	mov	r3, r1
 8001824:	4610      	mov	r0, r2
 8001826:	4619      	mov	r1, r3
 8001828:	f7ff f9be 	bl	8000ba8 <__aeabi_d2f>
 800182c:	4603      	mov	r3, r0
 800182e:	603b      	str	r3, [r7, #0]

   	return h;
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	ee07 3a90 	vmov	s15, r3

}
 8001836:	eeb0 0a67 	vmov.f32	s0, s15
 800183a:	3710      	adds	r7, #16
 800183c:	46bd      	mov	sp, r7
 800183e:	bdb0      	pop	{r4, r5, r7, pc}
 8001840:	7dee2d4a 	.word	0x7dee2d4a
 8001844:	3fc85936 	.word	0x3fc85936
 8001848:	76c8b439 	.word	0x76c8b439
 800184c:	3f7a9fbe 	.word	0x3f7a9fbe
 8001850:	43889333 	.word	0x43889333
 8001854:	3ff00000 	.word	0x3ff00000

08001858 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001858:	b5b0      	push	{r4, r5, r7, lr}
 800185a:	b094      	sub	sp, #80	; 0x50
 800185c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  typedef enum prog_mode {live_mode, history_mode} prog_mode_t;
  prog_mode_t which_program = 1;
 800185e:	2301      	movs	r3, #1
 8001860:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001864:	f000 fe22 	bl	80024ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001868:	f000 f89c 	bl	80019a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800186c:	f7ff fb8c 	bl	8000f88 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001870:	f7ff fc1e 	bl	80010b0 <MX_I2C1_Init>
  MX_SPI2_Init();
 8001874:	f000 fb3e 	bl	8001ef4 <MX_SPI2_Init>
  MX_DMA_Init();
 8001878:	f7ff fb68 	bl	8000f4c <MX_DMA_Init>
  MX_IWDG_Init();
 800187c:	f7ff fcb6 	bl	80011ec <MX_IWDG_Init>
  MX_USART1_UART_Init();
 8001880:	f000 fd12 	bl	80022a8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  checkFlags();
 8001884:	f000 fab2 	bl	8001dec <checkFlags>
  lps_init();
 8001888:	f7ff fe90 	bl	80015ac <lps_init>
  lps_pressure_correction(48);
 800188c:	2030      	movs	r0, #48	; 0x30
 800188e:	f7ff fee1 	bl	8001654 <lps_pressure_correction>
  printf("\r\n\n *** URUCHOMIENIE URZADZENIA *** \r\n\n");
 8001892:	4839      	ldr	r0, [pc, #228]	; (8001978 <main+0x120>)
 8001894:	f007 fd9e 	bl	80093d4 <puts>
  printf("UART pracuje poprawnie\r\n");
 8001898:	4838      	ldr	r0, [pc, #224]	; (800197c <main+0x124>)
 800189a:	f007 fd9b 	bl	80093d4 <puts>
  printf("Testowy odczyt temperatury= %.2f\r\n", lps_read_temperature(U_CELSIUS));
 800189e:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8001980 <main+0x128>
 80018a2:	f7ff fe93 	bl	80015cc <lps_read_temperature>
 80018a6:	ee10 3a10 	vmov	r3, s0
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7fe fe4c 	bl	8000548 <__aeabi_f2d>
 80018b0:	4602      	mov	r2, r0
 80018b2:	460b      	mov	r3, r1
 80018b4:	4833      	ldr	r0, [pc, #204]	; (8001984 <main+0x12c>)
 80018b6:	f007 fcf1 	bl	800929c <iprintf>
  printf("Testowy odczyt cisnienia= %.2f\r\n", lps_read_relative_pressure());
 80018ba:	f7ff ff1d 	bl	80016f8 <lps_read_relative_pressure>
 80018be:	ee10 3a10 	vmov	r3, s0
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7fe fe40 	bl	8000548 <__aeabi_f2d>
 80018c8:	4602      	mov	r2, r0
 80018ca:	460b      	mov	r3, r1
 80018cc:	482e      	ldr	r0, [pc, #184]	; (8001988 <main+0x130>)
 80018ce:	f007 fce5 	bl	800929c <iprintf>
  printf("Testowy odczyt wysokosci= %.2f\r\n", lps_get_altitude_hyps_f());
 80018d2:	f7ff ff65 	bl	80017a0 <lps_get_altitude_hyps_f>
 80018d6:	ee10 3a10 	vmov	r3, s0
 80018da:	4618      	mov	r0, r3
 80018dc:	f7fe fe34 	bl	8000548 <__aeabi_f2d>
 80018e0:	4602      	mov	r2, r0
 80018e2:	460b      	mov	r3, r1
 80018e4:	4829      	ldr	r0, [pc, #164]	; (800198c <main+0x134>)
 80018e6:	f007 fcd9 	bl	800929c <iprintf>
  lcd_init();
 80018ea:	f7ff fd71 	bl	80013d0 <lcd_init>
  hagl_init();
 80018ee:	f006 fd01 	bl	80082f4 <hagl_init>

  HAL_UART_Receive_DMA(&huart1, rx_buf, 1);
 80018f2:	2201      	movs	r2, #1
 80018f4:	4926      	ldr	r1, [pc, #152]	; (8001990 <main+0x138>)
 80018f6:	4827      	ldr	r0, [pc, #156]	; (8001994 <main+0x13c>)
 80018f8:	f004 fd00 	bl	80062fc <HAL_UART_Receive_DMA>

  lcd_fill_box(0, 0, LCD_WIDTH, LCD_HEIGHT, BLACK);
 80018fc:	2300      	movs	r3, #0
 80018fe:	9300      	str	r3, [sp, #0]
 8001900:	2380      	movs	r3, #128	; 0x80
 8001902:	22a0      	movs	r2, #160	; 0xa0
 8001904:	2100      	movs	r1, #0
 8001906:	2000      	movs	r0, #0
 8001908:	f7ff fd3b 	bl	8001382 <lcd_fill_box>

  uint8_t tmp_mes[HISTORY_NUMS*HISTORY_ROW_SIZE] =
 800190c:	4b22      	ldr	r3, [pc, #136]	; (8001998 <main+0x140>)
 800190e:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8001912:	461d      	mov	r5, r3
 8001914:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001916:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001918:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800191a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800191c:	682b      	ldr	r3, [r5, #0]
 800191e:	461a      	mov	r2, r3
 8001920:	8022      	strh	r2, [r4, #0]
 8001922:	3402      	adds	r4, #2
 8001924:	0c1b      	lsrs	r3, r3, #16
 8001926:	7023      	strb	r3, [r4, #0]

  uint8_t tmp_mes2[HISTORY_NUMS*HISTORY_ROW_SIZE];



  printf("STOP\r\n");
 8001928:	481c      	ldr	r0, [pc, #112]	; (800199c <main+0x144>)
 800192a:	f007 fd53 	bl	80093d4 <puts>
  save_history_to_eeprom(tmp_mes);
 800192e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001932:	4618      	mov	r0, r3
 8001934:	f000 f9c4 	bl	8001cc0 <save_history_to_eeprom>
  load_history_from_eeprom(tmp_mes2);
 8001938:	463b      	mov	r3, r7
 800193a:	4618      	mov	r0, r3
 800193c:	f000 f998 	bl	8001c70 <load_history_from_eeprom>
  printHistory(tmp_mes2);
 8001940:	463b      	mov	r3, r7
 8001942:	4618      	mov	r0, r3
 8001944:	f000 fa24 	bl	8001d90 <printHistory>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	fflush_sc_buff();
 8001948:	f000 fa70 	bl	8001e2c <fflush_sc_buff>

	switch(which_program){
 800194c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001950:	2b00      	cmp	r3, #0
 8001952:	d002      	beq.n	800195a <main+0x102>
 8001954:	2b01      	cmp	r3, #1
 8001956:	d003      	beq.n	8001960 <main+0x108>
 8001958:	e005      	b.n	8001966 <main+0x10e>

		case live_mode:
			live_mode_prog();
 800195a:	f000 f877 	bl	8001a4c <live_mode_prog>
			break;
 800195e:	e002      	b.n	8001966 <main+0x10e>
		case history_mode:
			history_mode_prog();
 8001960:	f000 f8fc 	bl	8001b5c <history_mode_prog>
			break;
 8001964:	bf00      	nop

	}


	HAL_Delay(500);
 8001966:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800196a:	f000 fe1b 	bl	80025a4 <HAL_Delay>

	HAL_IWDG_Refresh(&hiwdg);
 800196e:	480c      	ldr	r0, [pc, #48]	; (80019a0 <main+0x148>)
 8001970:	f002 fd3c 	bl	80043ec <HAL_IWDG_Refresh>
	fflush_sc_buff();
 8001974:	e7e8      	b.n	8001948 <main+0xf0>
 8001976:	bf00      	nop
 8001978:	0800cfe0 	.word	0x0800cfe0
 800197c:	0800d008 	.word	0x0800d008
 8001980:	00000000 	.word	0x00000000
 8001984:	0800d020 	.word	0x0800d020
 8001988:	0800d044 	.word	0x0800d044
 800198c:	0800d068 	.word	0x0800d068
 8001990:	20000264 	.word	0x20000264
 8001994:	2000035c 	.word	0x2000035c
 8001998:	0800d094 	.word	0x0800d094
 800199c:	0800d08c 	.word	0x0800d08c
 80019a0:	20000254 	.word	0x20000254

080019a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b096      	sub	sp, #88	; 0x58
 80019a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019aa:	f107 0314 	add.w	r3, r7, #20
 80019ae:	2244      	movs	r2, #68	; 0x44
 80019b0:	2100      	movs	r1, #0
 80019b2:	4618      	mov	r0, r3
 80019b4:	f006 ff20 	bl	80087f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019b8:	463b      	mov	r3, r7
 80019ba:	2200      	movs	r2, #0
 80019bc:	601a      	str	r2, [r3, #0]
 80019be:	605a      	str	r2, [r3, #4]
 80019c0:	609a      	str	r2, [r3, #8]
 80019c2:	60da      	str	r2, [r3, #12]
 80019c4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80019c6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80019ca:	f002 fd2d 	bl	8004428 <HAL_PWREx_ControlVoltageScaling>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80019d4:	f000 fa88 	bl	8001ee8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80019d8:	230a      	movs	r3, #10
 80019da:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019e0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019e2:	2310      	movs	r3, #16
 80019e4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80019e6:	2301      	movs	r3, #1
 80019e8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019ea:	2302      	movs	r3, #2
 80019ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80019ee:	2302      	movs	r3, #2
 80019f0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80019f2:	2301      	movs	r3, #1
 80019f4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80019f6:	230a      	movs	r3, #10
 80019f8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80019fa:	2307      	movs	r3, #7
 80019fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80019fe:	2302      	movs	r3, #2
 8001a00:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001a02:	2302      	movs	r3, #2
 8001a04:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a06:	f107 0314 	add.w	r3, r7, #20
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f002 fd62 	bl	80044d4 <HAL_RCC_OscConfig>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <SystemClock_Config+0x76>
  {
    Error_Handler();
 8001a16:	f000 fa67 	bl	8001ee8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a1a:	230f      	movs	r3, #15
 8001a1c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a22:	2300      	movs	r3, #0
 8001a24:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a26:	2300      	movs	r3, #0
 8001a28:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001a2e:	463b      	mov	r3, r7
 8001a30:	2104      	movs	r1, #4
 8001a32:	4618      	mov	r0, r3
 8001a34:	f003 f92a 	bl	8004c8c <HAL_RCC_ClockConfig>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001a3e:	f000 fa53 	bl	8001ee8 <Error_Handler>
  }
}
 8001a42:	bf00      	nop
 8001a44:	3758      	adds	r7, #88	; 0x58
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
	...

08001a4c <live_mode_prog>:

/* USER CODE BEGIN 4 */
void live_mode_prog(){
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	f5ad 6d97 	sub.w	sp, sp, #1208	; 0x4b8
 8001a52:	af02      	add	r7, sp, #8

	// Konwersja tekstow do Wide Chara
	wchar_t text[MAXTXTLEN], text2[MAXTXTLEN], text3[MAXTXTLEN];
	swprintf(text, MAXTXTLEN, L"Temperatura: %.2f C", lps_read_temperature(U_CELSIUS));
 8001a54:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8001b38 <live_mode_prog+0xec>
 8001a58:	f7ff fdb8 	bl	80015cc <lps_read_temperature>
 8001a5c:	ee10 3a10 	vmov	r3, s0
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7fe fd71 	bl	8000548 <__aeabi_f2d>
 8001a66:	4602      	mov	r2, r0
 8001a68:	460b      	mov	r3, r1
 8001a6a:	f507 7048 	add.w	r0, r7, #800	; 0x320
 8001a6e:	e9cd 2300 	strd	r2, r3, [sp]
 8001a72:	4a32      	ldr	r2, [pc, #200]	; (8001b3c <live_mode_prog+0xf0>)
 8001a74:	2164      	movs	r1, #100	; 0x64
 8001a76:	f007 fd09 	bl	800948c <swprintf>
	swprintf(text2, MAXTXTLEN, L"Cisnienie: %.2f Hpa", lps_read_relative_pressure());
 8001a7a:	f7ff fe3d 	bl	80016f8 <lps_read_relative_pressure>
 8001a7e:	ee10 3a10 	vmov	r3, s0
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7fe fd60 	bl	8000548 <__aeabi_f2d>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 8001a90:	e9cd 2300 	strd	r2, r3, [sp]
 8001a94:	4a2a      	ldr	r2, [pc, #168]	; (8001b40 <live_mode_prog+0xf4>)
 8001a96:	2164      	movs	r1, #100	; 0x64
 8001a98:	f007 fcf8 	bl	800948c <swprintf>
	swprintf(text3, MAXTXTLEN, L"Wysokosc: %.0f m.n.p.m.", lps_get_altitude_hyps_f());
 8001a9c:	f7ff fe80 	bl	80017a0 <lps_get_altitude_hyps_f>
 8001aa0:	ee10 3a10 	vmov	r3, s0
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7fe fd4f 	bl	8000548 <__aeabi_f2d>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	460b      	mov	r3, r1
 8001aae:	4638      	mov	r0, r7
 8001ab0:	e9cd 2300 	strd	r2, r3, [sp]
 8001ab4:	4a23      	ldr	r2, [pc, #140]	; (8001b44 <live_mode_prog+0xf8>)
 8001ab6:	2164      	movs	r1, #100	; 0x64
 8001ab8:	f007 fce8 	bl	800948c <swprintf>

	hagl_put_text(text, 30, 17, RED, font6x9);
 8001abc:	f507 7048 	add.w	r0, r7, #800	; 0x320
 8001ac0:	4b21      	ldr	r3, [pc, #132]	; (8001b48 <live_mode_prog+0xfc>)
 8001ac2:	9300      	str	r3, [sp, #0]
 8001ac4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001ac8:	2211      	movs	r2, #17
 8001aca:	211e      	movs	r1, #30
 8001acc:	f006 fb5f 	bl	800818e <hagl_put_text>
	hagl_put_text(text2, 30, 41, RED, font6x9);
 8001ad0:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 8001ad4:	4b1c      	ldr	r3, [pc, #112]	; (8001b48 <live_mode_prog+0xfc>)
 8001ad6:	9300      	str	r3, [sp, #0]
 8001ad8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001adc:	2229      	movs	r2, #41	; 0x29
 8001ade:	211e      	movs	r1, #30
 8001ae0:	f006 fb55 	bl	800818e <hagl_put_text>
	hagl_put_text(text3, 30, 70, RED, font6x9);
 8001ae4:	4638      	mov	r0, r7
 8001ae6:	4b18      	ldr	r3, [pc, #96]	; (8001b48 <live_mode_prog+0xfc>)
 8001ae8:	9300      	str	r3, [sp, #0]
 8001aea:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001aee:	2246      	movs	r2, #70	; 0x46
 8001af0:	211e      	movs	r1, #30
 8001af2:	f006 fb4c 	bl	800818e <hagl_put_text>

	// nie mam ikon?
	lcd_draw_image_fast(2,5,24,24,temp_icon);
 8001af6:	4b15      	ldr	r3, [pc, #84]	; (8001b4c <live_mode_prog+0x100>)
 8001af8:	9300      	str	r3, [sp, #0]
 8001afa:	2318      	movs	r3, #24
 8001afc:	2218      	movs	r2, #24
 8001afe:	2105      	movs	r1, #5
 8001b00:	2002      	movs	r0, #2
 8001b02:	f7ff fcb1 	bl	8001468 <lcd_draw_image_fast>
	lcd_draw_image_fast(2,34,24,24,press_icon);
 8001b06:	4b12      	ldr	r3, [pc, #72]	; (8001b50 <live_mode_prog+0x104>)
 8001b08:	9300      	str	r3, [sp, #0]
 8001b0a:	2318      	movs	r3, #24
 8001b0c:	2218      	movs	r2, #24
 8001b0e:	2122      	movs	r1, #34	; 0x22
 8001b10:	2002      	movs	r0, #2
 8001b12:	f7ff fca9 	bl	8001468 <lcd_draw_image_fast>
	lcd_draw_image_fast(2,63,24,24,alt_icon);
 8001b16:	4b0f      	ldr	r3, [pc, #60]	; (8001b54 <live_mode_prog+0x108>)
 8001b18:	9300      	str	r3, [sp, #0]
 8001b1a:	2318      	movs	r3, #24
 8001b1c:	2218      	movs	r2, #24
 8001b1e:	213f      	movs	r1, #63	; 0x3f
 8001b20:	2002      	movs	r0, #2
 8001b22:	f7ff fca1 	bl	8001468 <lcd_draw_image_fast>



	printf("Live mode prog\r\n");
 8001b26:	480c      	ldr	r0, [pc, #48]	; (8001b58 <live_mode_prog+0x10c>)
 8001b28:	f007 fc54 	bl	80093d4 <puts>
}
 8001b2c:	bf00      	nop
 8001b2e:	f507 6796 	add.w	r7, r7, #1200	; 0x4b0
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	00000000 	.word	0x00000000
 8001b3c:	0800d0b8 	.word	0x0800d0b8
 8001b40:	0800d108 	.word	0x0800d108
 8001b44:	0800d158 	.word	0x0800d158
 8001b48:	0800d304 	.word	0x0800d304
 8001b4c:	080102bc 	.word	0x080102bc
 8001b50:	0801073c 	.word	0x0801073c
 8001b54:	08010bbc 	.word	0x08010bbc
 8001b58:	0800d1b8 	.word	0x0800d1b8

08001b5c <history_mode_prog>:
void history_mode_prog(){
 8001b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b5e:	b0f1      	sub	sp, #452	; 0x1c4
 8001b60:	af08      	add	r7, sp, #32

	static bool historyLoaded;
	static uint8_t msrm_history[HISTORY_NUMS*HISTORY_ROW_SIZE];

	if(!historyLoaded){
 8001b62:	4b3f      	ldr	r3, [pc, #252]	; (8001c60 <history_mode_prog+0x104>)
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	f083 0301 	eor.w	r3, r3, #1
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d009      	beq.n	8001b84 <history_mode_prog+0x28>
		load_history_from_eeprom(msrm_history);
 8001b70:	483c      	ldr	r0, [pc, #240]	; (8001c64 <history_mode_prog+0x108>)
 8001b72:	f000 f87d 	bl	8001c70 <load_history_from_eeprom>

		printHistory(msrm_history);
 8001b76:	483b      	ldr	r0, [pc, #236]	; (8001c64 <history_mode_prog+0x108>)
 8001b78:	f000 f90a 	bl	8001d90 <printHistory>
		historyLoaded = true;
 8001b7c:	4b38      	ldr	r3, [pc, #224]	; (8001c60 <history_mode_prog+0x104>)
 8001b7e:	2201      	movs	r2, #1
 8001b80:	701a      	strb	r2, [r3, #0]



	}
    //printf("History mode prog\r\n");
}
 8001b82:	e068      	b.n	8001c56 <history_mode_prog+0xfa>
	} else if(historyLoaded){
 8001b84:	4b36      	ldr	r3, [pc, #216]	; (8001c60 <history_mode_prog+0x104>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d064      	beq.n	8001c56 <history_mode_prog+0xfa>
		for(int i=0; i<HISTORY_NUMS; i++){
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001b92:	e05c      	b.n	8001c4e <history_mode_prog+0xf2>
			int c = HISTORY_ROW_SIZE * i;
 8001b94:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001b98:	4613      	mov	r3, r2
 8001b9a:	00db      	lsls	r3, r3, #3
 8001b9c:	1a9b      	subs	r3, r3, r2
 8001b9e:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
			swprintf(text, MAXTXTLEN, L"%d/%d/%d: %d,%d C", msrm_history[c],msrm_history[c+1], msrm_history[c+2], msrm_history[c+3],
 8001ba2:	4a30      	ldr	r2, [pc, #192]	; (8001c64 <history_mode_prog+0x108>)
 8001ba4:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8001ba8:	4413      	add	r3, r2
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	469c      	mov	ip, r3
 8001bae:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	4a2b      	ldr	r2, [pc, #172]	; (8001c64 <history_mode_prog+0x108>)
 8001bb6:	5cd3      	ldrb	r3, [r2, r3]
 8001bb8:	4619      	mov	r1, r3
 8001bba:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8001bbe:	3302      	adds	r3, #2
 8001bc0:	4a28      	ldr	r2, [pc, #160]	; (8001c64 <history_mode_prog+0x108>)
 8001bc2:	5cd3      	ldrb	r3, [r2, r3]
 8001bc4:	461c      	mov	r4, r3
 8001bc6:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8001bca:	3303      	adds	r3, #3
 8001bcc:	4a25      	ldr	r2, [pc, #148]	; (8001c64 <history_mode_prog+0x108>)
 8001bce:	5cd3      	ldrb	r3, [r2, r3]
 8001bd0:	461d      	mov	r5, r3
																			 msrm_history[c+4], msrm_history[c+5], msrm_history[c+5],
 8001bd2:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8001bd6:	3304      	adds	r3, #4
 8001bd8:	4a22      	ldr	r2, [pc, #136]	; (8001c64 <history_mode_prog+0x108>)
 8001bda:	5cd3      	ldrb	r3, [r2, r3]
			swprintf(text, MAXTXTLEN, L"%d/%d/%d: %d,%d C", msrm_history[c],msrm_history[c+1], msrm_history[c+2], msrm_history[c+3],
 8001bdc:	461e      	mov	r6, r3
																			 msrm_history[c+4], msrm_history[c+5], msrm_history[c+5],
 8001bde:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8001be2:	3305      	adds	r3, #5
 8001be4:	4a1f      	ldr	r2, [pc, #124]	; (8001c64 <history_mode_prog+0x108>)
 8001be6:	5cd3      	ldrb	r3, [r2, r3]
			swprintf(text, MAXTXTLEN, L"%d/%d/%d: %d,%d C", msrm_history[c],msrm_history[c+1], msrm_history[c+2], msrm_history[c+3],
 8001be8:	607b      	str	r3, [r7, #4]
																			 msrm_history[c+4], msrm_history[c+5], msrm_history[c+5],
 8001bea:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8001bee:	3305      	adds	r3, #5
 8001bf0:	4a1c      	ldr	r2, [pc, #112]	; (8001c64 <history_mode_prog+0x108>)
 8001bf2:	5cd3      	ldrb	r3, [r2, r3]
			swprintf(text, MAXTXTLEN, L"%d/%d/%d: %d,%d C", msrm_history[c],msrm_history[c+1], msrm_history[c+2], msrm_history[c+3],
 8001bf4:	603b      	str	r3, [r7, #0]
																			 msrm_history[c+6]);
 8001bf6:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8001bfa:	3306      	adds	r3, #6
 8001bfc:	4a19      	ldr	r2, [pc, #100]	; (8001c64 <history_mode_prog+0x108>)
 8001bfe:	5cd3      	ldrb	r3, [r2, r3]
			swprintf(text, MAXTXTLEN, L"%d/%d/%d: %d,%d C", msrm_history[c],msrm_history[c+1], msrm_history[c+2], msrm_history[c+3],
 8001c00:	f107 0008 	add.w	r0, r7, #8
 8001c04:	9306      	str	r3, [sp, #24]
 8001c06:	683a      	ldr	r2, [r7, #0]
 8001c08:	9205      	str	r2, [sp, #20]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	9304      	str	r3, [sp, #16]
 8001c0e:	9603      	str	r6, [sp, #12]
 8001c10:	9502      	str	r5, [sp, #8]
 8001c12:	9401      	str	r4, [sp, #4]
 8001c14:	9100      	str	r1, [sp, #0]
 8001c16:	4663      	mov	r3, ip
 8001c18:	4a13      	ldr	r2, [pc, #76]	; (8001c68 <history_mode_prog+0x10c>)
 8001c1a:	2164      	movs	r1, #100	; 0x64
 8001c1c:	f007 fc36 	bl	800948c <swprintf>
			hagl_put_text(text, 5, i*20, RED, font6x9);
 8001c20:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	461a      	mov	r2, r3
 8001c28:	0092      	lsls	r2, r2, #2
 8001c2a:	4413      	add	r3, r2
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	b21a      	sxth	r2, r3
 8001c32:	f107 0008 	add.w	r0, r7, #8
 8001c36:	4b0d      	ldr	r3, [pc, #52]	; (8001c6c <history_mode_prog+0x110>)
 8001c38:	9300      	str	r3, [sp, #0]
 8001c3a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001c3e:	2105      	movs	r1, #5
 8001c40:	f006 faa5 	bl	800818e <hagl_put_text>
		for(int i=0; i<HISTORY_NUMS; i++){
 8001c44:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8001c48:	3301      	adds	r3, #1
 8001c4a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001c4e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8001c52:	2b04      	cmp	r3, #4
 8001c54:	dd9e      	ble.n	8001b94 <history_mode_prog+0x38>
}
 8001c56:	bf00      	nop
 8001c58:	f507 77d2 	add.w	r7, r7, #420	; 0x1a4
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c60:	200002cd 	.word	0x200002cd
 8001c64:	200002d0 	.word	0x200002d0
 8001c68:	0800d1c8 	.word	0x0800d1c8
 8001c6c:	0800d304 	.word	0x0800d304

08001c70 <load_history_from_eeprom>:

void load_history_from_eeprom(uint8_t msrm_history[HISTORY_NUMS*EEPROM_PAGE_SIZE]){
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b086      	sub	sp, #24
 8001c74:	af04      	add	r7, sp, #16
 8001c76:	6078      	str	r0, [r7, #4]
	if(HAL_I2C_Mem_Read(&hi2c1, 0xa0, MEM_MSRM_START, I2C_MEMADD_SIZE_8BIT, msrm_history, HISTORY_NUMS*HISTORY_ROW_SIZE, HAL_MAX_DELAY) != HAL_OK)
 8001c78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c7c:	9302      	str	r3, [sp, #8]
 8001c7e:	2323      	movs	r3, #35	; 0x23
 8001c80:	9301      	str	r3, [sp, #4]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	9300      	str	r3, [sp, #0]
 8001c86:	2301      	movs	r3, #1
 8001c88:	2200      	movs	r2, #0
 8001c8a:	21a0      	movs	r1, #160	; 0xa0
 8001c8c:	480b      	ldr	r0, [pc, #44]	; (8001cbc <load_history_from_eeprom+0x4c>)
 8001c8e:	f001 fd85 	bl	800379c <HAL_I2C_Mem_Read>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <load_history_from_eeprom+0x2c>
							 Error_Handler();
 8001c98:	f000 f926 	bl	8001ee8 <Error_Handler>
	while(HAL_I2C_IsDeviceReady(&hi2c1, 0xa0, 1, HAL_MAX_DELAY) != HAL_OK);
 8001c9c:	bf00      	nop
 8001c9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	21a0      	movs	r1, #160	; 0xa0
 8001ca6:	4805      	ldr	r0, [pc, #20]	; (8001cbc <load_history_from_eeprom+0x4c>)
 8001ca8:	f001 fe92 	bl	80039d0 <HAL_I2C_IsDeviceReady>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d1f5      	bne.n	8001c9e <load_history_from_eeprom+0x2e>
}
 8001cb2:	bf00      	nop
 8001cb4:	bf00      	nop
 8001cb6:	3708      	adds	r7, #8
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	20000200 	.word	0x20000200

08001cc0 <save_history_to_eeprom>:


void save_history_to_eeprom(uint8_t msrm[HISTORY_NUMS*HISTORY_ROW_SIZE]){
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b08a      	sub	sp, #40	; 0x28
 8001cc4:	af04      	add	r7, sp, #16
 8001cc6:	6078      	str	r0, [r7, #4]

	// calculate number of full pages and size of the last page
	int full_pages = HISTORY_ROW_SIZE*HISTORY_NUMS/EEPROM_PAGE_SIZE;
 8001cc8:	2304      	movs	r3, #4
 8001cca:	613b      	str	r3, [r7, #16]
	int last_page = HISTORY_ROW_SIZE*HISTORY_NUMS - full_pages*EEPROM_PAGE_SIZE;
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	00db      	lsls	r3, r3, #3
 8001cd0:	f1c3 0323 	rsb	r3, r3, #35	; 0x23
 8001cd4:	60fb      	str	r3, [r7, #12]

	// send full pages
	for(int i=0; i<full_pages; i++){
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	617b      	str	r3, [r7, #20]
 8001cda:	e026      	b.n	8001d2a <save_history_to_eeprom+0x6a>

		if(HAL_I2C_Mem_Write(&hi2c1, 0xa0, MEM_MSRM_START+i*EEPROM_PAGE_SIZE, I2C_MEMADD_SIZE_8BIT, msrm+i*EEPROM_PAGE_SIZE, EEPROM_PAGE_SIZE, HAL_MAX_DELAY) != HAL_OK)
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	00db      	lsls	r3, r3, #3
 8001ce2:	b29a      	uxth	r2, r3
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	00db      	lsls	r3, r3, #3
 8001ce8:	4619      	mov	r1, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	440b      	add	r3, r1
 8001cee:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001cf2:	9102      	str	r1, [sp, #8]
 8001cf4:	2108      	movs	r1, #8
 8001cf6:	9101      	str	r1, [sp, #4]
 8001cf8:	9300      	str	r3, [sp, #0]
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	21a0      	movs	r1, #160	; 0xa0
 8001cfe:	4823      	ldr	r0, [pc, #140]	; (8001d8c <save_history_to_eeprom+0xcc>)
 8001d00:	f001 fc38 	bl	8003574 <HAL_I2C_Mem_Write>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <save_history_to_eeprom+0x4e>
			Error_Handler();
 8001d0a:	f000 f8ed 	bl	8001ee8 <Error_Handler>
		while(HAL_I2C_IsDeviceReady(&hi2c1, 0xa0, 1, HAL_MAX_DELAY) != HAL_OK);
 8001d0e:	bf00      	nop
 8001d10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d14:	2201      	movs	r2, #1
 8001d16:	21a0      	movs	r1, #160	; 0xa0
 8001d18:	481c      	ldr	r0, [pc, #112]	; (8001d8c <save_history_to_eeprom+0xcc>)
 8001d1a:	f001 fe59 	bl	80039d0 <HAL_I2C_IsDeviceReady>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d1f5      	bne.n	8001d10 <save_history_to_eeprom+0x50>
	for(int i=0; i<full_pages; i++){
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	3301      	adds	r3, #1
 8001d28:	617b      	str	r3, [r7, #20]
 8001d2a:	697a      	ldr	r2, [r7, #20]
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	dbd4      	blt.n	8001cdc <save_history_to_eeprom+0x1c>

	}

	// send remaining page (not full)
	if(last_page >0){
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	dd25      	ble.n	8001d84 <save_history_to_eeprom+0xc4>
		if(HAL_I2C_Mem_Write(&hi2c1, 0xa0, MEM_MSRM_START+full_pages*EEPROM_PAGE_SIZE, I2C_MEMADD_SIZE_8BIT, msrm+full_pages*EEPROM_PAGE_SIZE, last_page, HAL_MAX_DELAY) != HAL_OK)
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	00db      	lsls	r3, r3, #3
 8001d3e:	b299      	uxth	r1, r3
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	00db      	lsls	r3, r3, #3
 8001d44:	461a      	mov	r2, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4413      	add	r3, r2
 8001d4a:	68fa      	ldr	r2, [r7, #12]
 8001d4c:	b292      	uxth	r2, r2
 8001d4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d52:	9002      	str	r0, [sp, #8]
 8001d54:	9201      	str	r2, [sp, #4]
 8001d56:	9300      	str	r3, [sp, #0]
 8001d58:	2301      	movs	r3, #1
 8001d5a:	460a      	mov	r2, r1
 8001d5c:	21a0      	movs	r1, #160	; 0xa0
 8001d5e:	480b      	ldr	r0, [pc, #44]	; (8001d8c <save_history_to_eeprom+0xcc>)
 8001d60:	f001 fc08 	bl	8003574 <HAL_I2C_Mem_Write>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <save_history_to_eeprom+0xae>
			Error_Handler();
 8001d6a:	f000 f8bd 	bl	8001ee8 <Error_Handler>
		while(HAL_I2C_IsDeviceReady(&hi2c1, 0xa0, 1, HAL_MAX_DELAY) != HAL_OK);
 8001d6e:	bf00      	nop
 8001d70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d74:	2201      	movs	r2, #1
 8001d76:	21a0      	movs	r1, #160	; 0xa0
 8001d78:	4804      	ldr	r0, [pc, #16]	; (8001d8c <save_history_to_eeprom+0xcc>)
 8001d7a:	f001 fe29 	bl	80039d0 <HAL_I2C_IsDeviceReady>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d1f5      	bne.n	8001d70 <save_history_to_eeprom+0xb0>
	}

}
 8001d84:	bf00      	nop
 8001d86:	3718      	adds	r7, #24
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	20000200 	.word	0x20000200

08001d90 <printHistory>:


void printHistory(uint8_t msrm_history[HISTORY_NUMS*EEPROM_PAGE_SIZE]){
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
	for(int i=0; i<HISTORY_NUMS; i++){
 8001d98:	2300      	movs	r3, #0
 8001d9a:	60fb      	str	r3, [r7, #12]
 8001d9c:	e019      	b.n	8001dd2 <printHistory+0x42>
		for(int j=0; j<HISTORY_ROW_SIZE; j++){
 8001d9e:	2300      	movs	r3, #0
 8001da0:	60bb      	str	r3, [r7, #8]
 8001da2:	e00d      	b.n	8001dc0 <printHistory+0x30>
			printf("%d ", msrm_history[i+j]);
 8001da4:	68fa      	ldr	r2, [r7, #12]
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	4413      	add	r3, r2
 8001daa:	461a      	mov	r2, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	4413      	add	r3, r2
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	4619      	mov	r1, r3
 8001db4:	480b      	ldr	r0, [pc, #44]	; (8001de4 <printHistory+0x54>)
 8001db6:	f007 fa71 	bl	800929c <iprintf>
		for(int j=0; j<HISTORY_ROW_SIZE; j++){
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	60bb      	str	r3, [r7, #8]
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	2b06      	cmp	r3, #6
 8001dc4:	ddee      	ble.n	8001da4 <printHistory+0x14>
		}
		printf("\r\n");
 8001dc6:	4808      	ldr	r0, [pc, #32]	; (8001de8 <printHistory+0x58>)
 8001dc8:	f007 fb04 	bl	80093d4 <puts>
	for(int i=0; i<HISTORY_NUMS; i++){
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	3301      	adds	r3, #1
 8001dd0:	60fb      	str	r3, [r7, #12]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2b04      	cmp	r3, #4
 8001dd6:	dde2      	ble.n	8001d9e <printHistory+0xe>
	}
}
 8001dd8:	bf00      	nop
 8001dda:	bf00      	nop
 8001ddc:	3710      	adds	r7, #16
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	0800d210 	.word	0x0800d210
 8001de8:	0800d214 	.word	0x0800d214

08001dec <checkFlags>:

void checkFlags(){
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
	if(__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST)){
 8001df0:	4b0b      	ldr	r3, [pc, #44]	; (8001e20 <checkFlags+0x34>)
 8001df2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001df6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d00b      	beq.n	8001e16 <checkFlags+0x2a>
			printf("System zostal zresetowany przez Watchdoga\r\n");
 8001dfe:	4809      	ldr	r0, [pc, #36]	; (8001e24 <checkFlags+0x38>)
 8001e00:	f007 fae8 	bl	80093d4 <puts>
			__HAL_RCC_CLEAR_RESET_FLAGS();
 8001e04:	4b06      	ldr	r3, [pc, #24]	; (8001e20 <checkFlags+0x34>)
 8001e06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e0a:	4a05      	ldr	r2, [pc, #20]	; (8001e20 <checkFlags+0x34>)
 8001e0c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e10:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
		} else{
			printf("System zostal uruchomiony poprawnie\r\n");
		}
}
 8001e14:	e002      	b.n	8001e1c <checkFlags+0x30>
			printf("System zostal uruchomiony poprawnie\r\n");
 8001e16:	4804      	ldr	r0, [pc, #16]	; (8001e28 <checkFlags+0x3c>)
 8001e18:	f007 fadc 	bl	80093d4 <puts>
}
 8001e1c:	bf00      	nop
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	40021000 	.word	0x40021000
 8001e24:	0800d218 	.word	0x0800d218
 8001e28:	0800d244 	.word	0x0800d244

08001e2c <fflush_sc_buff>:

void fflush_sc_buff(){
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0

	if(sf_buf_pos>0){
 8001e32:	4b19      	ldr	r3, [pc, #100]	; (8001e98 <fflush_sc_buff+0x6c>)
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d02a      	beq.n	8001e90 <fflush_sc_buff+0x64>
		sf_buf[sf_buf_pos] = '\0';
 8001e3a:	4b17      	ldr	r3, [pc, #92]	; (8001e98 <fflush_sc_buff+0x6c>)
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	461a      	mov	r2, r3
 8001e40:	4b16      	ldr	r3, [pc, #88]	; (8001e9c <fflush_sc_buff+0x70>)
 8001e42:	2100      	movs	r1, #0
 8001e44:	5499      	strb	r1, [r3, r2]
		int i=0;
 8001e46:	2300      	movs	r3, #0
 8001e48:	607b      	str	r3, [r7, #4]
		while(sf_buf[i]!='\0'){
 8001e4a:	e018      	b.n	8001e7e <fflush_sc_buff+0x52>
			if(sf_buf[i]=='\r') printf("\n");
 8001e4c:	4a13      	ldr	r2, [pc, #76]	; (8001e9c <fflush_sc_buff+0x70>)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4413      	add	r3, r2
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	2b0d      	cmp	r3, #13
 8001e56:	d102      	bne.n	8001e5e <fflush_sc_buff+0x32>
 8001e58:	200a      	movs	r0, #10
 8001e5a:	f007 fa37 	bl	80092cc <putchar>
			printf("%c", sf_buf[i]);
 8001e5e:	4a0f      	ldr	r2, [pc, #60]	; (8001e9c <fflush_sc_buff+0x70>)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	4413      	add	r3, r2
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f007 fa30 	bl	80092cc <putchar>
			i++;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	3301      	adds	r3, #1
 8001e70:	607b      	str	r3, [r7, #4]
			fflush(stdout);
 8001e72:	4b0b      	ldr	r3, [pc, #44]	; (8001ea0 <fflush_sc_buff+0x74>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f006 fb0b 	bl	8008494 <fflush>
		while(sf_buf[i]!='\0'){
 8001e7e:	4a07      	ldr	r2, [pc, #28]	; (8001e9c <fflush_sc_buff+0x70>)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	4413      	add	r3, r2
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d1e0      	bne.n	8001e4c <fflush_sc_buff+0x20>
		}
		sf_buf_pos = 0;
 8001e8a:	4b03      	ldr	r3, [pc, #12]	; (8001e98 <fflush_sc_buff+0x6c>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	701a      	strb	r2, [r3, #0]
	}
}
 8001e90:	bf00      	nop
 8001e92:	3708      	adds	r7, #8
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	200002cc 	.word	0x200002cc
 8001e9c:	20000268 	.word	0x20000268
 8001ea0:	20000014 	.word	0x20000014

08001ea4 <HAL_UART_RxCpltCallback>:



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
		sf_buf[sf_buf_pos] = rx_buf[0];
 8001eac:	4b0a      	ldr	r3, [pc, #40]	; (8001ed8 <HAL_UART_RxCpltCallback+0x34>)
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	4b0a      	ldr	r3, [pc, #40]	; (8001edc <HAL_UART_RxCpltCallback+0x38>)
 8001eb4:	7819      	ldrb	r1, [r3, #0]
 8001eb6:	4b0a      	ldr	r3, [pc, #40]	; (8001ee0 <HAL_UART_RxCpltCallback+0x3c>)
 8001eb8:	5499      	strb	r1, [r3, r2]
		++sf_buf_pos;
 8001eba:	4b07      	ldr	r3, [pc, #28]	; (8001ed8 <HAL_UART_RxCpltCallback+0x34>)
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	b2da      	uxtb	r2, r3
 8001ec2:	4b05      	ldr	r3, [pc, #20]	; (8001ed8 <HAL_UART_RxCpltCallback+0x34>)
 8001ec4:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_DMA(&huart1, rx_buf, 1);
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	4904      	ldr	r1, [pc, #16]	; (8001edc <HAL_UART_RxCpltCallback+0x38>)
 8001eca:	4806      	ldr	r0, [pc, #24]	; (8001ee4 <HAL_UART_RxCpltCallback+0x40>)
 8001ecc:	f004 fa16 	bl	80062fc <HAL_UART_Receive_DMA>
}
 8001ed0:	bf00      	nop
 8001ed2:	3708      	adds	r7, #8
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	200002cc 	.word	0x200002cc
 8001edc:	20000264 	.word	0x20000264
 8001ee0:	20000268 	.word	0x20000268
 8001ee4:	2000035c 	.word	0x2000035c

08001ee8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001eec:	b672      	cpsid	i
}
 8001eee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ef0:	e7fe      	b.n	8001ef0 <Error_Handler+0x8>
	...

08001ef4 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001ef8:	4b1b      	ldr	r3, [pc, #108]	; (8001f68 <MX_SPI2_Init+0x74>)
 8001efa:	4a1c      	ldr	r2, [pc, #112]	; (8001f6c <MX_SPI2_Init+0x78>)
 8001efc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001efe:	4b1a      	ldr	r3, [pc, #104]	; (8001f68 <MX_SPI2_Init+0x74>)
 8001f00:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001f04:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001f06:	4b18      	ldr	r3, [pc, #96]	; (8001f68 <MX_SPI2_Init+0x74>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f0c:	4b16      	ldr	r3, [pc, #88]	; (8001f68 <MX_SPI2_Init+0x74>)
 8001f0e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001f12:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f14:	4b14      	ldr	r3, [pc, #80]	; (8001f68 <MX_SPI2_Init+0x74>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f1a:	4b13      	ldr	r3, [pc, #76]	; (8001f68 <MX_SPI2_Init+0x74>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001f20:	4b11      	ldr	r3, [pc, #68]	; (8001f68 <MX_SPI2_Init+0x74>)
 8001f22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f26:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001f28:	4b0f      	ldr	r3, [pc, #60]	; (8001f68 <MX_SPI2_Init+0x74>)
 8001f2a:	2210      	movs	r2, #16
 8001f2c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f2e:	4b0e      	ldr	r3, [pc, #56]	; (8001f68 <MX_SPI2_Init+0x74>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f34:	4b0c      	ldr	r3, [pc, #48]	; (8001f68 <MX_SPI2_Init+0x74>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f3a:	4b0b      	ldr	r3, [pc, #44]	; (8001f68 <MX_SPI2_Init+0x74>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001f40:	4b09      	ldr	r3, [pc, #36]	; (8001f68 <MX_SPI2_Init+0x74>)
 8001f42:	2207      	movs	r2, #7
 8001f44:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001f46:	4b08      	ldr	r3, [pc, #32]	; (8001f68 <MX_SPI2_Init+0x74>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001f4c:	4b06      	ldr	r3, [pc, #24]	; (8001f68 <MX_SPI2_Init+0x74>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001f52:	4805      	ldr	r0, [pc, #20]	; (8001f68 <MX_SPI2_Init+0x74>)
 8001f54:	f003 fd7a 	bl	8005a4c <HAL_SPI_Init>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001f5e:	f7ff ffc3 	bl	8001ee8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001f62:	bf00      	nop
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	200002f4 	.word	0x200002f4
 8001f6c:	40003800 	.word	0x40003800

08001f70 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b08a      	sub	sp, #40	; 0x28
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f78:	f107 0314 	add.w	r3, r7, #20
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	601a      	str	r2, [r3, #0]
 8001f80:	605a      	str	r2, [r3, #4]
 8001f82:	609a      	str	r2, [r3, #8]
 8001f84:	60da      	str	r2, [r3, #12]
 8001f86:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a25      	ldr	r2, [pc, #148]	; (8002024 <HAL_SPI_MspInit+0xb4>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d144      	bne.n	800201c <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001f92:	4b25      	ldr	r3, [pc, #148]	; (8002028 <HAL_SPI_MspInit+0xb8>)
 8001f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f96:	4a24      	ldr	r2, [pc, #144]	; (8002028 <HAL_SPI_MspInit+0xb8>)
 8001f98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f9c:	6593      	str	r3, [r2, #88]	; 0x58
 8001f9e:	4b22      	ldr	r3, [pc, #136]	; (8002028 <HAL_SPI_MspInit+0xb8>)
 8001fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fa6:	613b      	str	r3, [r7, #16]
 8001fa8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001faa:	4b1f      	ldr	r3, [pc, #124]	; (8002028 <HAL_SPI_MspInit+0xb8>)
 8001fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fae:	4a1e      	ldr	r2, [pc, #120]	; (8002028 <HAL_SPI_MspInit+0xb8>)
 8001fb0:	f043 0304 	orr.w	r3, r3, #4
 8001fb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fb6:	4b1c      	ldr	r3, [pc, #112]	; (8002028 <HAL_SPI_MspInit+0xb8>)
 8001fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fba:	f003 0304 	and.w	r3, r3, #4
 8001fbe:	60fb      	str	r3, [r7, #12]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fc2:	4b19      	ldr	r3, [pc, #100]	; (8002028 <HAL_SPI_MspInit+0xb8>)
 8001fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fc6:	4a18      	ldr	r2, [pc, #96]	; (8002028 <HAL_SPI_MspInit+0xb8>)
 8001fc8:	f043 0302 	orr.w	r3, r3, #2
 8001fcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fce:	4b16      	ldr	r3, [pc, #88]	; (8002028 <HAL_SPI_MspInit+0xb8>)
 8001fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fd2:	f003 0302 	and.w	r3, r3, #2
 8001fd6:	60bb      	str	r3, [r7, #8]
 8001fd8:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001fda:	2308      	movs	r3, #8
 8001fdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fde:	2302      	movs	r3, #2
 8001fe0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001fea:	2305      	movs	r3, #5
 8001fec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fee:	f107 0314 	add.w	r3, r7, #20
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	480d      	ldr	r0, [pc, #52]	; (800202c <HAL_SPI_MspInit+0xbc>)
 8001ff6:	f000 fe81 	bl	8002cfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ffa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ffe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002000:	2302      	movs	r3, #2
 8002002:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002004:	2300      	movs	r3, #0
 8002006:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002008:	2303      	movs	r3, #3
 800200a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800200c:	2305      	movs	r3, #5
 800200e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002010:	f107 0314 	add.w	r3, r7, #20
 8002014:	4619      	mov	r1, r3
 8002016:	4806      	ldr	r0, [pc, #24]	; (8002030 <HAL_SPI_MspInit+0xc0>)
 8002018:	f000 fe70 	bl	8002cfc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800201c:	bf00      	nop
 800201e:	3728      	adds	r7, #40	; 0x28
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	40003800 	.word	0x40003800
 8002028:	40021000 	.word	0x40021000
 800202c:	48000800 	.word	0x48000800
 8002030:	48000400 	.word	0x48000400

08002034 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800203a:	4b0f      	ldr	r3, [pc, #60]	; (8002078 <HAL_MspInit+0x44>)
 800203c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800203e:	4a0e      	ldr	r2, [pc, #56]	; (8002078 <HAL_MspInit+0x44>)
 8002040:	f043 0301 	orr.w	r3, r3, #1
 8002044:	6613      	str	r3, [r2, #96]	; 0x60
 8002046:	4b0c      	ldr	r3, [pc, #48]	; (8002078 <HAL_MspInit+0x44>)
 8002048:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	607b      	str	r3, [r7, #4]
 8002050:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002052:	4b09      	ldr	r3, [pc, #36]	; (8002078 <HAL_MspInit+0x44>)
 8002054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002056:	4a08      	ldr	r2, [pc, #32]	; (8002078 <HAL_MspInit+0x44>)
 8002058:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800205c:	6593      	str	r3, [r2, #88]	; 0x58
 800205e:	4b06      	ldr	r3, [pc, #24]	; (8002078 <HAL_MspInit+0x44>)
 8002060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002066:	603b      	str	r3, [r7, #0]
 8002068:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800206a:	bf00      	nop
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	40021000 	.word	0x40021000

0800207c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002080:	e7fe      	b.n	8002080 <NMI_Handler+0x4>

08002082 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002082:	b480      	push	{r7}
 8002084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002086:	e7fe      	b.n	8002086 <HardFault_Handler+0x4>

08002088 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800208c:	e7fe      	b.n	800208c <MemManage_Handler+0x4>

0800208e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800208e:	b480      	push	{r7}
 8002090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002092:	e7fe      	b.n	8002092 <BusFault_Handler+0x4>

08002094 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002098:	e7fe      	b.n	8002098 <UsageFault_Handler+0x4>

0800209a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800209a:	b480      	push	{r7}
 800209c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800209e:	bf00      	nop
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020ac:	bf00      	nop
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr

080020b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020b6:	b480      	push	{r7}
 80020b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020ba:	bf00      	nop
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020c8:	f000 fa4c 	bl	8002564 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020cc:	bf00      	nop
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80020d4:	4802      	ldr	r0, [pc, #8]	; (80020e0 <DMA1_Channel5_IRQHandler+0x10>)
 80020d6:	f000 fd32 	bl	8002b3e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80020da:	bf00      	nop
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	200003e0 	.word	0x200003e0

080020e4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80020e8:	4802      	ldr	r0, [pc, #8]	; (80020f4 <USART1_IRQHandler+0x10>)
 80020ea:	f004 f95d 	bl	80063a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80020ee:	bf00      	nop
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	2000035c 	.word	0x2000035c

080020f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
	return 1;
 80020fc:	2301      	movs	r3, #1
}
 80020fe:	4618      	mov	r0, r3
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <_kill>:

int _kill(int pid, int sig)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002112:	f006 f8f7 	bl	8008304 <__errno>
 8002116:	4603      	mov	r3, r0
 8002118:	2216      	movs	r2, #22
 800211a:	601a      	str	r2, [r3, #0]
	return -1;
 800211c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002120:	4618      	mov	r0, r3
 8002122:	3708      	adds	r7, #8
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}

08002128 <_exit>:

void _exit (int status)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002130:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f7ff ffe7 	bl	8002108 <_kill>
	while (1) {}		/* Make sure we hang here */
 800213a:	e7fe      	b.n	800213a <_exit+0x12>

0800213c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b086      	sub	sp, #24
 8002140:	af00      	add	r7, sp, #0
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	60b9      	str	r1, [r7, #8]
 8002146:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002148:	2300      	movs	r3, #0
 800214a:	617b      	str	r3, [r7, #20]
 800214c:	e00a      	b.n	8002164 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800214e:	f3af 8000 	nop.w
 8002152:	4601      	mov	r1, r0
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	1c5a      	adds	r2, r3, #1
 8002158:	60ba      	str	r2, [r7, #8]
 800215a:	b2ca      	uxtb	r2, r1
 800215c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	3301      	adds	r3, #1
 8002162:	617b      	str	r3, [r7, #20]
 8002164:	697a      	ldr	r2, [r7, #20]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	429a      	cmp	r2, r3
 800216a:	dbf0      	blt.n	800214e <_read+0x12>
	}

return len;
 800216c:	687b      	ldr	r3, [r7, #4]
}
 800216e:	4618      	mov	r0, r3
 8002170:	3718      	adds	r7, #24
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}

08002176 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002176:	b580      	push	{r7, lr}
 8002178:	b086      	sub	sp, #24
 800217a:	af00      	add	r7, sp, #0
 800217c:	60f8      	str	r0, [r7, #12]
 800217e:	60b9      	str	r1, [r7, #8]
 8002180:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002182:	2300      	movs	r3, #0
 8002184:	617b      	str	r3, [r7, #20]
 8002186:	e009      	b.n	800219c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	1c5a      	adds	r2, r3, #1
 800218c:	60ba      	str	r2, [r7, #8]
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	4618      	mov	r0, r3
 8002192:	f000 f94f 	bl	8002434 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	3301      	adds	r3, #1
 800219a:	617b      	str	r3, [r7, #20]
 800219c:	697a      	ldr	r2, [r7, #20]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	dbf1      	blt.n	8002188 <_write+0x12>
	}
	return len;
 80021a4:	687b      	ldr	r3, [r7, #4]
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3718      	adds	r7, #24
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}

080021ae <_close>:

int _close(int file)
{
 80021ae:	b480      	push	{r7}
 80021b0:	b083      	sub	sp, #12
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
	return -1;
 80021b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr

080021c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021c6:	b480      	push	{r7}
 80021c8:	b083      	sub	sp, #12
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
 80021ce:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021d6:	605a      	str	r2, [r3, #4]
	return 0;
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	370c      	adds	r7, #12
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr

080021e6 <_isatty>:

int _isatty(int file)
{
 80021e6:	b480      	push	{r7}
 80021e8:	b083      	sub	sp, #12
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
	return 1;
 80021ee:	2301      	movs	r3, #1
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b085      	sub	sp, #20
 8002200:	af00      	add	r7, sp, #0
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	607a      	str	r2, [r7, #4]
	return 0;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3714      	adds	r7, #20
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
	...

08002218 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b086      	sub	sp, #24
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002220:	4a14      	ldr	r2, [pc, #80]	; (8002274 <_sbrk+0x5c>)
 8002222:	4b15      	ldr	r3, [pc, #84]	; (8002278 <_sbrk+0x60>)
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800222c:	4b13      	ldr	r3, [pc, #76]	; (800227c <_sbrk+0x64>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d102      	bne.n	800223a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002234:	4b11      	ldr	r3, [pc, #68]	; (800227c <_sbrk+0x64>)
 8002236:	4a12      	ldr	r2, [pc, #72]	; (8002280 <_sbrk+0x68>)
 8002238:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800223a:	4b10      	ldr	r3, [pc, #64]	; (800227c <_sbrk+0x64>)
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4413      	add	r3, r2
 8002242:	693a      	ldr	r2, [r7, #16]
 8002244:	429a      	cmp	r2, r3
 8002246:	d207      	bcs.n	8002258 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002248:	f006 f85c 	bl	8008304 <__errno>
 800224c:	4603      	mov	r3, r0
 800224e:	220c      	movs	r2, #12
 8002250:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002252:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002256:	e009      	b.n	800226c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002258:	4b08      	ldr	r3, [pc, #32]	; (800227c <_sbrk+0x64>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800225e:	4b07      	ldr	r3, [pc, #28]	; (800227c <_sbrk+0x64>)
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4413      	add	r3, r2
 8002266:	4a05      	ldr	r2, [pc, #20]	; (800227c <_sbrk+0x64>)
 8002268:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800226a:	68fb      	ldr	r3, [r7, #12]
}
 800226c:	4618      	mov	r0, r3
 800226e:	3718      	adds	r7, #24
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	20018000 	.word	0x20018000
 8002278:	00000400 	.word	0x00000400
 800227c:	20000358 	.word	0x20000358
 8002280:	20000440 	.word	0x20000440

08002284 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002288:	4b06      	ldr	r3, [pc, #24]	; (80022a4 <SystemInit+0x20>)
 800228a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800228e:	4a05      	ldr	r2, [pc, #20]	; (80022a4 <SystemInit+0x20>)
 8002290:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002294:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002298:	bf00      	nop
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	e000ed00 	.word	0xe000ed00

080022a8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80022ac:	4b16      	ldr	r3, [pc, #88]	; (8002308 <MX_USART1_UART_Init+0x60>)
 80022ae:	4a17      	ldr	r2, [pc, #92]	; (800230c <MX_USART1_UART_Init+0x64>)
 80022b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80022b2:	4b15      	ldr	r3, [pc, #84]	; (8002308 <MX_USART1_UART_Init+0x60>)
 80022b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80022ba:	4b13      	ldr	r3, [pc, #76]	; (8002308 <MX_USART1_UART_Init+0x60>)
 80022bc:	2200      	movs	r2, #0
 80022be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80022c0:	4b11      	ldr	r3, [pc, #68]	; (8002308 <MX_USART1_UART_Init+0x60>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80022c6:	4b10      	ldr	r3, [pc, #64]	; (8002308 <MX_USART1_UART_Init+0x60>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80022cc:	4b0e      	ldr	r3, [pc, #56]	; (8002308 <MX_USART1_UART_Init+0x60>)
 80022ce:	220c      	movs	r2, #12
 80022d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022d2:	4b0d      	ldr	r3, [pc, #52]	; (8002308 <MX_USART1_UART_Init+0x60>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80022d8:	4b0b      	ldr	r3, [pc, #44]	; (8002308 <MX_USART1_UART_Init+0x60>)
 80022da:	2200      	movs	r2, #0
 80022dc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022de:	4b0a      	ldr	r3, [pc, #40]	; (8002308 <MX_USART1_UART_Init+0x60>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 80022e4:	4b08      	ldr	r3, [pc, #32]	; (8002308 <MX_USART1_UART_Init+0x60>)
 80022e6:	2210      	movs	r2, #16
 80022e8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80022ea:	4b07      	ldr	r3, [pc, #28]	; (8002308 <MX_USART1_UART_Init+0x60>)
 80022ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80022f0:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80022f2:	4805      	ldr	r0, [pc, #20]	; (8002308 <MX_USART1_UART_Init+0x60>)
 80022f4:	f003 ff20 	bl	8006138 <HAL_UART_Init>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 80022fe:	f7ff fdf3 	bl	8001ee8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002302:	bf00      	nop
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	2000035c 	.word	0x2000035c
 800230c:	40013800 	.word	0x40013800

08002310 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b0ac      	sub	sp, #176	; 0xb0
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002318:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800231c:	2200      	movs	r2, #0
 800231e:	601a      	str	r2, [r3, #0]
 8002320:	605a      	str	r2, [r3, #4]
 8002322:	609a      	str	r2, [r3, #8]
 8002324:	60da      	str	r2, [r3, #12]
 8002326:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002328:	f107 0314 	add.w	r3, r7, #20
 800232c:	2288      	movs	r2, #136	; 0x88
 800232e:	2100      	movs	r1, #0
 8002330:	4618      	mov	r0, r3
 8002332:	f006 fa61 	bl	80087f8 <memset>
  if(uartHandle->Instance==USART1)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a3a      	ldr	r2, [pc, #232]	; (8002424 <HAL_UART_MspInit+0x114>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d16d      	bne.n	800241c <HAL_UART_MspInit+0x10c>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002340:	2301      	movs	r3, #1
 8002342:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002344:	2300      	movs	r3, #0
 8002346:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002348:	f107 0314 	add.w	r3, r7, #20
 800234c:	4618      	mov	r0, r3
 800234e:	f002 fec1 	bl	80050d4 <HAL_RCCEx_PeriphCLKConfig>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d001      	beq.n	800235c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002358:	f7ff fdc6 	bl	8001ee8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800235c:	4b32      	ldr	r3, [pc, #200]	; (8002428 <HAL_UART_MspInit+0x118>)
 800235e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002360:	4a31      	ldr	r2, [pc, #196]	; (8002428 <HAL_UART_MspInit+0x118>)
 8002362:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002366:	6613      	str	r3, [r2, #96]	; 0x60
 8002368:	4b2f      	ldr	r3, [pc, #188]	; (8002428 <HAL_UART_MspInit+0x118>)
 800236a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800236c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002370:	613b      	str	r3, [r7, #16]
 8002372:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002374:	4b2c      	ldr	r3, [pc, #176]	; (8002428 <HAL_UART_MspInit+0x118>)
 8002376:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002378:	4a2b      	ldr	r2, [pc, #172]	; (8002428 <HAL_UART_MspInit+0x118>)
 800237a:	f043 0301 	orr.w	r3, r3, #1
 800237e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002380:	4b29      	ldr	r3, [pc, #164]	; (8002428 <HAL_UART_MspInit+0x118>)
 8002382:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002384:	f003 0301 	and.w	r3, r3, #1
 8002388:	60fb      	str	r3, [r7, #12]
 800238a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800238c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002390:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002394:	2302      	movs	r3, #2
 8002396:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239a:	2300      	movs	r3, #0
 800239c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023a0:	2303      	movs	r3, #3
 80023a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023a6:	2307      	movs	r3, #7
 80023a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ac:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80023b0:	4619      	mov	r1, r3
 80023b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023b6:	f000 fca1 	bl	8002cfc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80023ba:	4b1c      	ldr	r3, [pc, #112]	; (800242c <HAL_UART_MspInit+0x11c>)
 80023bc:	4a1c      	ldr	r2, [pc, #112]	; (8002430 <HAL_UART_MspInit+0x120>)
 80023be:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 80023c0:	4b1a      	ldr	r3, [pc, #104]	; (800242c <HAL_UART_MspInit+0x11c>)
 80023c2:	2202      	movs	r2, #2
 80023c4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023c6:	4b19      	ldr	r3, [pc, #100]	; (800242c <HAL_UART_MspInit+0x11c>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023cc:	4b17      	ldr	r3, [pc, #92]	; (800242c <HAL_UART_MspInit+0x11c>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80023d2:	4b16      	ldr	r3, [pc, #88]	; (800242c <HAL_UART_MspInit+0x11c>)
 80023d4:	2280      	movs	r2, #128	; 0x80
 80023d6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023d8:	4b14      	ldr	r3, [pc, #80]	; (800242c <HAL_UART_MspInit+0x11c>)
 80023da:	2200      	movs	r2, #0
 80023dc:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023de:	4b13      	ldr	r3, [pc, #76]	; (800242c <HAL_UART_MspInit+0x11c>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80023e4:	4b11      	ldr	r3, [pc, #68]	; (800242c <HAL_UART_MspInit+0x11c>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80023ea:	4b10      	ldr	r3, [pc, #64]	; (800242c <HAL_UART_MspInit+0x11c>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80023f0:	480e      	ldr	r0, [pc, #56]	; (800242c <HAL_UART_MspInit+0x11c>)
 80023f2:	f000 fa0d 	bl	8002810 <HAL_DMA_Init>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d001      	beq.n	8002400 <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 80023fc:	f7ff fd74 	bl	8001ee8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	4a0a      	ldr	r2, [pc, #40]	; (800242c <HAL_UART_MspInit+0x11c>)
 8002404:	671a      	str	r2, [r3, #112]	; 0x70
 8002406:	4a09      	ldr	r2, [pc, #36]	; (800242c <HAL_UART_MspInit+0x11c>)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800240c:	2200      	movs	r2, #0
 800240e:	2100      	movs	r1, #0
 8002410:	2025      	movs	r0, #37	; 0x25
 8002412:	f000 f9c6 	bl	80027a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002416:	2025      	movs	r0, #37	; 0x25
 8002418:	f000 f9df 	bl	80027da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800241c:	bf00      	nop
 800241e:	37b0      	adds	r7, #176	; 0xb0
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	40013800 	.word	0x40013800
 8002428:	40021000 	.word	0x40021000
 800242c:	200003e0 	.word	0x200003e0
 8002430:	40020058 	.word	0x40020058

08002434 <__io_putchar>:
  }
}

/* USER CODE BEGIN 1 */
int __io_putchar(int ch)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]

  HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 800243c:	1d39      	adds	r1, r7, #4
 800243e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002442:	2201      	movs	r2, #1
 8002444:	4803      	ldr	r0, [pc, #12]	; (8002454 <__io_putchar+0x20>)
 8002446:	f003 fec5 	bl	80061d4 <HAL_UART_Transmit>

  return 1;
 800244a:	2301      	movs	r3, #1
}
 800244c:	4618      	mov	r0, r3
 800244e:	3708      	adds	r7, #8
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	2000035c 	.word	0x2000035c

08002458 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002458:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002490 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800245c:	f7ff ff12 	bl	8002284 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002460:	480c      	ldr	r0, [pc, #48]	; (8002494 <LoopForever+0x6>)
  ldr r1, =_edata
 8002462:	490d      	ldr	r1, [pc, #52]	; (8002498 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002464:	4a0d      	ldr	r2, [pc, #52]	; (800249c <LoopForever+0xe>)
  movs r3, #0
 8002466:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002468:	e002      	b.n	8002470 <LoopCopyDataInit>

0800246a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800246a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800246c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800246e:	3304      	adds	r3, #4

08002470 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002470:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002472:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002474:	d3f9      	bcc.n	800246a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002476:	4a0a      	ldr	r2, [pc, #40]	; (80024a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002478:	4c0a      	ldr	r4, [pc, #40]	; (80024a4 <LoopForever+0x16>)
  movs r3, #0
 800247a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800247c:	e001      	b.n	8002482 <LoopFillZerobss>

0800247e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800247e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002480:	3204      	adds	r2, #4

08002482 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002482:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002484:	d3fb      	bcc.n	800247e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002486:	f006 f90d 	bl	80086a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800248a:	f7ff f9e5 	bl	8001858 <main>

0800248e <LoopForever>:

LoopForever:
    b LoopForever
 800248e:	e7fe      	b.n	800248e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002490:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002494:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002498:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 800249c:	08011680 	.word	0x08011680
  ldr r2, =_sbss
 80024a0:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 80024a4:	2000043c 	.word	0x2000043c

080024a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80024a8:	e7fe      	b.n	80024a8 <ADC1_2_IRQHandler>
	...

080024ac <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80024b2:	2300      	movs	r3, #0
 80024b4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024b6:	4b0c      	ldr	r3, [pc, #48]	; (80024e8 <HAL_Init+0x3c>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a0b      	ldr	r2, [pc, #44]	; (80024e8 <HAL_Init+0x3c>)
 80024bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024c0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024c2:	2003      	movs	r0, #3
 80024c4:	f000 f962 	bl	800278c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024c8:	2000      	movs	r0, #0
 80024ca:	f000 f80f 	bl	80024ec <HAL_InitTick>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d002      	beq.n	80024da <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	71fb      	strb	r3, [r7, #7]
 80024d8:	e001      	b.n	80024de <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80024da:	f7ff fdab 	bl	8002034 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80024de:	79fb      	ldrb	r3, [r7, #7]
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3708      	adds	r7, #8
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	40022000 	.word	0x40022000

080024ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80024f4:	2300      	movs	r3, #0
 80024f6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80024f8:	4b17      	ldr	r3, [pc, #92]	; (8002558 <HAL_InitTick+0x6c>)
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d023      	beq.n	8002548 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002500:	4b16      	ldr	r3, [pc, #88]	; (800255c <HAL_InitTick+0x70>)
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	4b14      	ldr	r3, [pc, #80]	; (8002558 <HAL_InitTick+0x6c>)
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	4619      	mov	r1, r3
 800250a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800250e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002512:	fbb2 f3f3 	udiv	r3, r2, r3
 8002516:	4618      	mov	r0, r3
 8002518:	f000 f96d 	bl	80027f6 <HAL_SYSTICK_Config>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d10f      	bne.n	8002542 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2b0f      	cmp	r3, #15
 8002526:	d809      	bhi.n	800253c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002528:	2200      	movs	r2, #0
 800252a:	6879      	ldr	r1, [r7, #4]
 800252c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002530:	f000 f937 	bl	80027a2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002534:	4a0a      	ldr	r2, [pc, #40]	; (8002560 <HAL_InitTick+0x74>)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6013      	str	r3, [r2, #0]
 800253a:	e007      	b.n	800254c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	73fb      	strb	r3, [r7, #15]
 8002540:	e004      	b.n	800254c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	73fb      	strb	r3, [r7, #15]
 8002546:	e001      	b.n	800254c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800254c:	7bfb      	ldrb	r3, [r7, #15]
}
 800254e:	4618      	mov	r0, r3
 8002550:	3710      	adds	r7, #16
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	20000008 	.word	0x20000008
 800255c:	20000000 	.word	0x20000000
 8002560:	20000004 	.word	0x20000004

08002564 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002568:	4b06      	ldr	r3, [pc, #24]	; (8002584 <HAL_IncTick+0x20>)
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	461a      	mov	r2, r3
 800256e:	4b06      	ldr	r3, [pc, #24]	; (8002588 <HAL_IncTick+0x24>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4413      	add	r3, r2
 8002574:	4a04      	ldr	r2, [pc, #16]	; (8002588 <HAL_IncTick+0x24>)
 8002576:	6013      	str	r3, [r2, #0]
}
 8002578:	bf00      	nop
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	20000008 	.word	0x20000008
 8002588:	20000428 	.word	0x20000428

0800258c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0
  return uwTick;
 8002590:	4b03      	ldr	r3, [pc, #12]	; (80025a0 <HAL_GetTick+0x14>)
 8002592:	681b      	ldr	r3, [r3, #0]
}
 8002594:	4618      	mov	r0, r3
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	20000428 	.word	0x20000428

080025a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025ac:	f7ff ffee 	bl	800258c <HAL_GetTick>
 80025b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025bc:	d005      	beq.n	80025ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80025be:	4b0a      	ldr	r3, [pc, #40]	; (80025e8 <HAL_Delay+0x44>)
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	461a      	mov	r2, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	4413      	add	r3, r2
 80025c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025ca:	bf00      	nop
 80025cc:	f7ff ffde 	bl	800258c <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	68fa      	ldr	r2, [r7, #12]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d8f7      	bhi.n	80025cc <HAL_Delay+0x28>
  {
  }
}
 80025dc:	bf00      	nop
 80025de:	bf00      	nop
 80025e0:	3710      	adds	r7, #16
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	20000008 	.word	0x20000008

080025ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b085      	sub	sp, #20
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f003 0307 	and.w	r3, r3, #7
 80025fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025fc:	4b0c      	ldr	r3, [pc, #48]	; (8002630 <__NVIC_SetPriorityGrouping+0x44>)
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002602:	68ba      	ldr	r2, [r7, #8]
 8002604:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002608:	4013      	ands	r3, r2
 800260a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002614:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002618:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800261c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800261e:	4a04      	ldr	r2, [pc, #16]	; (8002630 <__NVIC_SetPriorityGrouping+0x44>)
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	60d3      	str	r3, [r2, #12]
}
 8002624:	bf00      	nop
 8002626:	3714      	adds	r7, #20
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr
 8002630:	e000ed00 	.word	0xe000ed00

08002634 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002638:	4b04      	ldr	r3, [pc, #16]	; (800264c <__NVIC_GetPriorityGrouping+0x18>)
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	0a1b      	lsrs	r3, r3, #8
 800263e:	f003 0307 	and.w	r3, r3, #7
}
 8002642:	4618      	mov	r0, r3
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr
 800264c:	e000ed00 	.word	0xe000ed00

08002650 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	4603      	mov	r3, r0
 8002658:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800265a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800265e:	2b00      	cmp	r3, #0
 8002660:	db0b      	blt.n	800267a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002662:	79fb      	ldrb	r3, [r7, #7]
 8002664:	f003 021f 	and.w	r2, r3, #31
 8002668:	4907      	ldr	r1, [pc, #28]	; (8002688 <__NVIC_EnableIRQ+0x38>)
 800266a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800266e:	095b      	lsrs	r3, r3, #5
 8002670:	2001      	movs	r0, #1
 8002672:	fa00 f202 	lsl.w	r2, r0, r2
 8002676:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800267a:	bf00      	nop
 800267c:	370c      	adds	r7, #12
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	e000e100 	.word	0xe000e100

0800268c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	4603      	mov	r3, r0
 8002694:	6039      	str	r1, [r7, #0]
 8002696:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002698:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800269c:	2b00      	cmp	r3, #0
 800269e:	db0a      	blt.n	80026b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	b2da      	uxtb	r2, r3
 80026a4:	490c      	ldr	r1, [pc, #48]	; (80026d8 <__NVIC_SetPriority+0x4c>)
 80026a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026aa:	0112      	lsls	r2, r2, #4
 80026ac:	b2d2      	uxtb	r2, r2
 80026ae:	440b      	add	r3, r1
 80026b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026b4:	e00a      	b.n	80026cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	b2da      	uxtb	r2, r3
 80026ba:	4908      	ldr	r1, [pc, #32]	; (80026dc <__NVIC_SetPriority+0x50>)
 80026bc:	79fb      	ldrb	r3, [r7, #7]
 80026be:	f003 030f 	and.w	r3, r3, #15
 80026c2:	3b04      	subs	r3, #4
 80026c4:	0112      	lsls	r2, r2, #4
 80026c6:	b2d2      	uxtb	r2, r2
 80026c8:	440b      	add	r3, r1
 80026ca:	761a      	strb	r2, [r3, #24]
}
 80026cc:	bf00      	nop
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr
 80026d8:	e000e100 	.word	0xe000e100
 80026dc:	e000ed00 	.word	0xe000ed00

080026e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b089      	sub	sp, #36	; 0x24
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f003 0307 	and.w	r3, r3, #7
 80026f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	f1c3 0307 	rsb	r3, r3, #7
 80026fa:	2b04      	cmp	r3, #4
 80026fc:	bf28      	it	cs
 80026fe:	2304      	movcs	r3, #4
 8002700:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	3304      	adds	r3, #4
 8002706:	2b06      	cmp	r3, #6
 8002708:	d902      	bls.n	8002710 <NVIC_EncodePriority+0x30>
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	3b03      	subs	r3, #3
 800270e:	e000      	b.n	8002712 <NVIC_EncodePriority+0x32>
 8002710:	2300      	movs	r3, #0
 8002712:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002714:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	fa02 f303 	lsl.w	r3, r2, r3
 800271e:	43da      	mvns	r2, r3
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	401a      	ands	r2, r3
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002728:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	fa01 f303 	lsl.w	r3, r1, r3
 8002732:	43d9      	mvns	r1, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002738:	4313      	orrs	r3, r2
         );
}
 800273a:	4618      	mov	r0, r3
 800273c:	3724      	adds	r7, #36	; 0x24
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
	...

08002748 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	3b01      	subs	r3, #1
 8002754:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002758:	d301      	bcc.n	800275e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800275a:	2301      	movs	r3, #1
 800275c:	e00f      	b.n	800277e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800275e:	4a0a      	ldr	r2, [pc, #40]	; (8002788 <SysTick_Config+0x40>)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	3b01      	subs	r3, #1
 8002764:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002766:	210f      	movs	r1, #15
 8002768:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800276c:	f7ff ff8e 	bl	800268c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002770:	4b05      	ldr	r3, [pc, #20]	; (8002788 <SysTick_Config+0x40>)
 8002772:	2200      	movs	r2, #0
 8002774:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002776:	4b04      	ldr	r3, [pc, #16]	; (8002788 <SysTick_Config+0x40>)
 8002778:	2207      	movs	r2, #7
 800277a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	e000e010 	.word	0xe000e010

0800278c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f7ff ff29 	bl	80025ec <__NVIC_SetPriorityGrouping>
}
 800279a:	bf00      	nop
 800279c:	3708      	adds	r7, #8
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}

080027a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027a2:	b580      	push	{r7, lr}
 80027a4:	b086      	sub	sp, #24
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	4603      	mov	r3, r0
 80027aa:	60b9      	str	r1, [r7, #8]
 80027ac:	607a      	str	r2, [r7, #4]
 80027ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80027b0:	2300      	movs	r3, #0
 80027b2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80027b4:	f7ff ff3e 	bl	8002634 <__NVIC_GetPriorityGrouping>
 80027b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	68b9      	ldr	r1, [r7, #8]
 80027be:	6978      	ldr	r0, [r7, #20]
 80027c0:	f7ff ff8e 	bl	80026e0 <NVIC_EncodePriority>
 80027c4:	4602      	mov	r2, r0
 80027c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027ca:	4611      	mov	r1, r2
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7ff ff5d 	bl	800268c <__NVIC_SetPriority>
}
 80027d2:	bf00      	nop
 80027d4:	3718      	adds	r7, #24
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	b082      	sub	sp, #8
 80027de:	af00      	add	r7, sp, #0
 80027e0:	4603      	mov	r3, r0
 80027e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7ff ff31 	bl	8002650 <__NVIC_EnableIRQ>
}
 80027ee:	bf00      	nop
 80027f0:	3708      	adds	r7, #8
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b082      	sub	sp, #8
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f7ff ffa2 	bl	8002748 <SysTick_Config>
 8002804:	4603      	mov	r3, r0
}
 8002806:	4618      	mov	r0, r3
 8002808:	3708      	adds	r7, #8
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
	...

08002810 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002810:	b480      	push	{r7}
 8002812:	b085      	sub	sp, #20
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d101      	bne.n	8002822 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e098      	b.n	8002954 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	461a      	mov	r2, r3
 8002828:	4b4d      	ldr	r3, [pc, #308]	; (8002960 <HAL_DMA_Init+0x150>)
 800282a:	429a      	cmp	r2, r3
 800282c:	d80f      	bhi.n	800284e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	461a      	mov	r2, r3
 8002834:	4b4b      	ldr	r3, [pc, #300]	; (8002964 <HAL_DMA_Init+0x154>)
 8002836:	4413      	add	r3, r2
 8002838:	4a4b      	ldr	r2, [pc, #300]	; (8002968 <HAL_DMA_Init+0x158>)
 800283a:	fba2 2303 	umull	r2, r3, r2, r3
 800283e:	091b      	lsrs	r3, r3, #4
 8002840:	009a      	lsls	r2, r3, #2
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a48      	ldr	r2, [pc, #288]	; (800296c <HAL_DMA_Init+0x15c>)
 800284a:	641a      	str	r2, [r3, #64]	; 0x40
 800284c:	e00e      	b.n	800286c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	461a      	mov	r2, r3
 8002854:	4b46      	ldr	r3, [pc, #280]	; (8002970 <HAL_DMA_Init+0x160>)
 8002856:	4413      	add	r3, r2
 8002858:	4a43      	ldr	r2, [pc, #268]	; (8002968 <HAL_DMA_Init+0x158>)
 800285a:	fba2 2303 	umull	r2, r3, r2, r3
 800285e:	091b      	lsrs	r3, r3, #4
 8002860:	009a      	lsls	r2, r3, #2
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a42      	ldr	r2, [pc, #264]	; (8002974 <HAL_DMA_Init+0x164>)
 800286a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2202      	movs	r2, #2
 8002870:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002882:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002886:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002890:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	691b      	ldr	r3, [r3, #16]
 8002896:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800289c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	699b      	ldr	r3, [r3, #24]
 80028a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a1b      	ldr	r3, [r3, #32]
 80028ae:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80028b0:	68fa      	ldr	r2, [r7, #12]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	68fa      	ldr	r2, [r7, #12]
 80028bc:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028c6:	d039      	beq.n	800293c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028cc:	4a27      	ldr	r2, [pc, #156]	; (800296c <HAL_DMA_Init+0x15c>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d11a      	bne.n	8002908 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80028d2:	4b29      	ldr	r3, [pc, #164]	; (8002978 <HAL_DMA_Init+0x168>)
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028da:	f003 031c 	and.w	r3, r3, #28
 80028de:	210f      	movs	r1, #15
 80028e0:	fa01 f303 	lsl.w	r3, r1, r3
 80028e4:	43db      	mvns	r3, r3
 80028e6:	4924      	ldr	r1, [pc, #144]	; (8002978 <HAL_DMA_Init+0x168>)
 80028e8:	4013      	ands	r3, r2
 80028ea:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80028ec:	4b22      	ldr	r3, [pc, #136]	; (8002978 <HAL_DMA_Init+0x168>)
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6859      	ldr	r1, [r3, #4]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f8:	f003 031c 	and.w	r3, r3, #28
 80028fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002900:	491d      	ldr	r1, [pc, #116]	; (8002978 <HAL_DMA_Init+0x168>)
 8002902:	4313      	orrs	r3, r2
 8002904:	600b      	str	r3, [r1, #0]
 8002906:	e019      	b.n	800293c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002908:	4b1c      	ldr	r3, [pc, #112]	; (800297c <HAL_DMA_Init+0x16c>)
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002910:	f003 031c 	and.w	r3, r3, #28
 8002914:	210f      	movs	r1, #15
 8002916:	fa01 f303 	lsl.w	r3, r1, r3
 800291a:	43db      	mvns	r3, r3
 800291c:	4917      	ldr	r1, [pc, #92]	; (800297c <HAL_DMA_Init+0x16c>)
 800291e:	4013      	ands	r3, r2
 8002920:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002922:	4b16      	ldr	r3, [pc, #88]	; (800297c <HAL_DMA_Init+0x16c>)
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6859      	ldr	r1, [r3, #4]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800292e:	f003 031c 	and.w	r3, r3, #28
 8002932:	fa01 f303 	lsl.w	r3, r1, r3
 8002936:	4911      	ldr	r1, [pc, #68]	; (800297c <HAL_DMA_Init+0x16c>)
 8002938:	4313      	orrs	r3, r2
 800293a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2201      	movs	r2, #1
 8002946:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002952:	2300      	movs	r3, #0
}
 8002954:	4618      	mov	r0, r3
 8002956:	3714      	adds	r7, #20
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr
 8002960:	40020407 	.word	0x40020407
 8002964:	bffdfff8 	.word	0xbffdfff8
 8002968:	cccccccd 	.word	0xcccccccd
 800296c:	40020000 	.word	0x40020000
 8002970:	bffdfbf8 	.word	0xbffdfbf8
 8002974:	40020400 	.word	0x40020400
 8002978:	400200a8 	.word	0x400200a8
 800297c:	400204a8 	.word	0x400204a8

08002980 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b086      	sub	sp, #24
 8002984:	af00      	add	r7, sp, #0
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	60b9      	str	r1, [r7, #8]
 800298a:	607a      	str	r2, [r7, #4]
 800298c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800298e:	2300      	movs	r3, #0
 8002990:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002998:	2b01      	cmp	r3, #1
 800299a:	d101      	bne.n	80029a0 <HAL_DMA_Start_IT+0x20>
 800299c:	2302      	movs	r3, #2
 800299e:	e04b      	b.n	8002a38 <HAL_DMA_Start_IT+0xb8>
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d13a      	bne.n	8002a2a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2202      	movs	r2, #2
 80029b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2200      	movs	r2, #0
 80029c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f022 0201 	bic.w	r2, r2, #1
 80029d0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	68b9      	ldr	r1, [r7, #8]
 80029d8:	68f8      	ldr	r0, [r7, #12]
 80029da:	f000 f95f 	bl	8002c9c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d008      	beq.n	80029f8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f042 020e 	orr.w	r2, r2, #14
 80029f4:	601a      	str	r2, [r3, #0]
 80029f6:	e00f      	b.n	8002a18 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f022 0204 	bic.w	r2, r2, #4
 8002a06:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f042 020a 	orr.w	r2, r2, #10
 8002a16:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f042 0201 	orr.w	r2, r2, #1
 8002a26:	601a      	str	r2, [r3, #0]
 8002a28:	e005      	b.n	8002a36 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002a32:	2302      	movs	r3, #2
 8002a34:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002a36:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3718      	adds	r7, #24
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b085      	sub	sp, #20
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d008      	beq.n	8002a6a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2204      	movs	r2, #4
 8002a5c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e022      	b.n	8002ab0 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f022 020e 	bic.w	r2, r2, #14
 8002a78:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f022 0201 	bic.w	r2, r2, #1
 8002a88:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8e:	f003 021c 	and.w	r2, r3, #28
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a96:	2101      	movs	r1, #1
 8002a98:	fa01 f202 	lsl.w	r2, r1, r2
 8002a9c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002aae:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3714      	adds	r7, #20
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d005      	beq.n	8002ae0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2204      	movs	r2, #4
 8002ad8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	73fb      	strb	r3, [r7, #15]
 8002ade:	e029      	b.n	8002b34 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f022 020e 	bic.w	r2, r2, #14
 8002aee:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f022 0201 	bic.w	r2, r2, #1
 8002afe:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b04:	f003 021c 	and.w	r2, r3, #28
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0c:	2101      	movs	r1, #1
 8002b0e:	fa01 f202 	lsl.w	r2, r1, r2
 8002b12:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d003      	beq.n	8002b34 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	4798      	blx	r3
    }
  }
  return status;
 8002b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3710      	adds	r7, #16
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}

08002b3e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b3e:	b580      	push	{r7, lr}
 8002b40:	b084      	sub	sp, #16
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b5a:	f003 031c 	and.w	r3, r3, #28
 8002b5e:	2204      	movs	r2, #4
 8002b60:	409a      	lsls	r2, r3
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	4013      	ands	r3, r2
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d026      	beq.n	8002bb8 <HAL_DMA_IRQHandler+0x7a>
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	f003 0304 	and.w	r3, r3, #4
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d021      	beq.n	8002bb8 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0320 	and.w	r3, r3, #32
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d107      	bne.n	8002b92 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f022 0204 	bic.w	r2, r2, #4
 8002b90:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b96:	f003 021c 	and.w	r2, r3, #28
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9e:	2104      	movs	r1, #4
 8002ba0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ba4:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d071      	beq.n	8002c92 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002bb6:	e06c      	b.n	8002c92 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bbc:	f003 031c 	and.w	r3, r3, #28
 8002bc0:	2202      	movs	r2, #2
 8002bc2:	409a      	lsls	r2, r3
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d02e      	beq.n	8002c2a <HAL_DMA_IRQHandler+0xec>
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d029      	beq.n	8002c2a <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0320 	and.w	r3, r3, #32
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d10b      	bne.n	8002bfc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f022 020a 	bic.w	r2, r2, #10
 8002bf2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c00:	f003 021c 	and.w	r2, r3, #28
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c08:	2102      	movs	r1, #2
 8002c0a:	fa01 f202 	lsl.w	r2, r1, r2
 8002c0e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d038      	beq.n	8002c92 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002c28:	e033      	b.n	8002c92 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c2e:	f003 031c 	and.w	r3, r3, #28
 8002c32:	2208      	movs	r2, #8
 8002c34:	409a      	lsls	r2, r3
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	4013      	ands	r3, r2
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d02a      	beq.n	8002c94 <HAL_DMA_IRQHandler+0x156>
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	f003 0308 	and.w	r3, r3, #8
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d025      	beq.n	8002c94 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f022 020e 	bic.w	r2, r2, #14
 8002c56:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c5c:	f003 021c 	and.w	r2, r3, #28
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c64:	2101      	movs	r1, #1
 8002c66:	fa01 f202 	lsl.w	r2, r1, r2
 8002c6a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2201      	movs	r2, #1
 8002c76:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d004      	beq.n	8002c94 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002c92:	bf00      	nop
 8002c94:	bf00      	nop
}
 8002c96:	3710      	adds	r7, #16
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b085      	sub	sp, #20
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	60b9      	str	r1, [r7, #8]
 8002ca6:	607a      	str	r2, [r7, #4]
 8002ca8:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cae:	f003 021c 	and.w	r2, r3, #28
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb6:	2101      	movs	r1, #1
 8002cb8:	fa01 f202 	lsl.w	r2, r1, r2
 8002cbc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	683a      	ldr	r2, [r7, #0]
 8002cc4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	2b10      	cmp	r3, #16
 8002ccc:	d108      	bne.n	8002ce0 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	68ba      	ldr	r2, [r7, #8]
 8002cdc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002cde:	e007      	b.n	8002cf0 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	68ba      	ldr	r2, [r7, #8]
 8002ce6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	60da      	str	r2, [r3, #12]
}
 8002cf0:	bf00      	nop
 8002cf2:	3714      	adds	r7, #20
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr

08002cfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b087      	sub	sp, #28
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d06:	2300      	movs	r3, #0
 8002d08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d0a:	e17f      	b.n	800300c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	2101      	movs	r1, #1
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	fa01 f303 	lsl.w	r3, r1, r3
 8002d18:	4013      	ands	r3, r2
 8002d1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	f000 8171 	beq.w	8003006 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f003 0303 	and.w	r3, r3, #3
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d005      	beq.n	8002d3c <HAL_GPIO_Init+0x40>
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f003 0303 	and.w	r3, r3, #3
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d130      	bne.n	8002d9e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	2203      	movs	r2, #3
 8002d48:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4c:	43db      	mvns	r3, r3
 8002d4e:	693a      	ldr	r2, [r7, #16]
 8002d50:	4013      	ands	r3, r2
 8002d52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	68da      	ldr	r2, [r3, #12]
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	005b      	lsls	r3, r3, #1
 8002d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d60:	693a      	ldr	r2, [r7, #16]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	693a      	ldr	r2, [r7, #16]
 8002d6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d72:	2201      	movs	r2, #1
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7a:	43db      	mvns	r3, r3
 8002d7c:	693a      	ldr	r2, [r7, #16]
 8002d7e:	4013      	ands	r3, r2
 8002d80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	091b      	lsrs	r3, r3, #4
 8002d88:	f003 0201 	and.w	r2, r3, #1
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d92:	693a      	ldr	r2, [r7, #16]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	693a      	ldr	r2, [r7, #16]
 8002d9c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f003 0303 	and.w	r3, r3, #3
 8002da6:	2b03      	cmp	r3, #3
 8002da8:	d118      	bne.n	8002ddc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002db0:	2201      	movs	r2, #1
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	fa02 f303 	lsl.w	r3, r2, r3
 8002db8:	43db      	mvns	r3, r3
 8002dba:	693a      	ldr	r2, [r7, #16]
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	08db      	lsrs	r3, r3, #3
 8002dc6:	f003 0201 	and.w	r2, r3, #1
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd0:	693a      	ldr	r2, [r7, #16]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	693a      	ldr	r2, [r7, #16]
 8002dda:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f003 0303 	and.w	r3, r3, #3
 8002de4:	2b03      	cmp	r3, #3
 8002de6:	d017      	beq.n	8002e18 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	005b      	lsls	r3, r3, #1
 8002df2:	2203      	movs	r2, #3
 8002df4:	fa02 f303 	lsl.w	r3, r2, r3
 8002df8:	43db      	mvns	r3, r3
 8002dfa:	693a      	ldr	r2, [r7, #16]
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	689a      	ldr	r2, [r3, #8]
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	005b      	lsls	r3, r3, #1
 8002e08:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0c:	693a      	ldr	r2, [r7, #16]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	693a      	ldr	r2, [r7, #16]
 8002e16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f003 0303 	and.w	r3, r3, #3
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d123      	bne.n	8002e6c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	08da      	lsrs	r2, r3, #3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	3208      	adds	r2, #8
 8002e2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e30:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	f003 0307 	and.w	r3, r3, #7
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	220f      	movs	r2, #15
 8002e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e40:	43db      	mvns	r3, r3
 8002e42:	693a      	ldr	r2, [r7, #16]
 8002e44:	4013      	ands	r3, r2
 8002e46:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	691a      	ldr	r2, [r3, #16]
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	f003 0307 	and.w	r3, r3, #7
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	fa02 f303 	lsl.w	r3, r2, r3
 8002e58:	693a      	ldr	r2, [r7, #16]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	08da      	lsrs	r2, r3, #3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	3208      	adds	r2, #8
 8002e66:	6939      	ldr	r1, [r7, #16]
 8002e68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	005b      	lsls	r3, r3, #1
 8002e76:	2203      	movs	r2, #3
 8002e78:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7c:	43db      	mvns	r3, r3
 8002e7e:	693a      	ldr	r2, [r7, #16]
 8002e80:	4013      	ands	r3, r2
 8002e82:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f003 0203 	and.w	r2, r3, #3
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	005b      	lsls	r3, r3, #1
 8002e90:	fa02 f303 	lsl.w	r3, r2, r3
 8002e94:	693a      	ldr	r2, [r7, #16]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	693a      	ldr	r2, [r7, #16]
 8002e9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	f000 80ac 	beq.w	8003006 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eae:	4b5f      	ldr	r3, [pc, #380]	; (800302c <HAL_GPIO_Init+0x330>)
 8002eb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eb2:	4a5e      	ldr	r2, [pc, #376]	; (800302c <HAL_GPIO_Init+0x330>)
 8002eb4:	f043 0301 	orr.w	r3, r3, #1
 8002eb8:	6613      	str	r3, [r2, #96]	; 0x60
 8002eba:	4b5c      	ldr	r3, [pc, #368]	; (800302c <HAL_GPIO_Init+0x330>)
 8002ebc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	60bb      	str	r3, [r7, #8]
 8002ec4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002ec6:	4a5a      	ldr	r2, [pc, #360]	; (8003030 <HAL_GPIO_Init+0x334>)
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	089b      	lsrs	r3, r3, #2
 8002ecc:	3302      	adds	r3, #2
 8002ece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ed2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	f003 0303 	and.w	r3, r3, #3
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	220f      	movs	r2, #15
 8002ede:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee2:	43db      	mvns	r3, r3
 8002ee4:	693a      	ldr	r2, [r7, #16]
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002ef0:	d025      	beq.n	8002f3e <HAL_GPIO_Init+0x242>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a4f      	ldr	r2, [pc, #316]	; (8003034 <HAL_GPIO_Init+0x338>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d01f      	beq.n	8002f3a <HAL_GPIO_Init+0x23e>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a4e      	ldr	r2, [pc, #312]	; (8003038 <HAL_GPIO_Init+0x33c>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d019      	beq.n	8002f36 <HAL_GPIO_Init+0x23a>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a4d      	ldr	r2, [pc, #308]	; (800303c <HAL_GPIO_Init+0x340>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d013      	beq.n	8002f32 <HAL_GPIO_Init+0x236>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a4c      	ldr	r2, [pc, #304]	; (8003040 <HAL_GPIO_Init+0x344>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d00d      	beq.n	8002f2e <HAL_GPIO_Init+0x232>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a4b      	ldr	r2, [pc, #300]	; (8003044 <HAL_GPIO_Init+0x348>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d007      	beq.n	8002f2a <HAL_GPIO_Init+0x22e>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a4a      	ldr	r2, [pc, #296]	; (8003048 <HAL_GPIO_Init+0x34c>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d101      	bne.n	8002f26 <HAL_GPIO_Init+0x22a>
 8002f22:	2306      	movs	r3, #6
 8002f24:	e00c      	b.n	8002f40 <HAL_GPIO_Init+0x244>
 8002f26:	2307      	movs	r3, #7
 8002f28:	e00a      	b.n	8002f40 <HAL_GPIO_Init+0x244>
 8002f2a:	2305      	movs	r3, #5
 8002f2c:	e008      	b.n	8002f40 <HAL_GPIO_Init+0x244>
 8002f2e:	2304      	movs	r3, #4
 8002f30:	e006      	b.n	8002f40 <HAL_GPIO_Init+0x244>
 8002f32:	2303      	movs	r3, #3
 8002f34:	e004      	b.n	8002f40 <HAL_GPIO_Init+0x244>
 8002f36:	2302      	movs	r3, #2
 8002f38:	e002      	b.n	8002f40 <HAL_GPIO_Init+0x244>
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e000      	b.n	8002f40 <HAL_GPIO_Init+0x244>
 8002f3e:	2300      	movs	r3, #0
 8002f40:	697a      	ldr	r2, [r7, #20]
 8002f42:	f002 0203 	and.w	r2, r2, #3
 8002f46:	0092      	lsls	r2, r2, #2
 8002f48:	4093      	lsls	r3, r2
 8002f4a:	693a      	ldr	r2, [r7, #16]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002f50:	4937      	ldr	r1, [pc, #220]	; (8003030 <HAL_GPIO_Init+0x334>)
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	089b      	lsrs	r3, r3, #2
 8002f56:	3302      	adds	r3, #2
 8002f58:	693a      	ldr	r2, [r7, #16]
 8002f5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f5e:	4b3b      	ldr	r3, [pc, #236]	; (800304c <HAL_GPIO_Init+0x350>)
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	43db      	mvns	r3, r3
 8002f68:	693a      	ldr	r2, [r7, #16]
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d003      	beq.n	8002f82 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002f7a:	693a      	ldr	r2, [r7, #16]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002f82:	4a32      	ldr	r2, [pc, #200]	; (800304c <HAL_GPIO_Init+0x350>)
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002f88:	4b30      	ldr	r3, [pc, #192]	; (800304c <HAL_GPIO_Init+0x350>)
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	43db      	mvns	r3, r3
 8002f92:	693a      	ldr	r2, [r7, #16]
 8002f94:	4013      	ands	r3, r2
 8002f96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d003      	beq.n	8002fac <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002fa4:	693a      	ldr	r2, [r7, #16]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002fac:	4a27      	ldr	r2, [pc, #156]	; (800304c <HAL_GPIO_Init+0x350>)
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002fb2:	4b26      	ldr	r3, [pc, #152]	; (800304c <HAL_GPIO_Init+0x350>)
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	43db      	mvns	r3, r3
 8002fbc:	693a      	ldr	r2, [r7, #16]
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d003      	beq.n	8002fd6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002fce:	693a      	ldr	r2, [r7, #16]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002fd6:	4a1d      	ldr	r2, [pc, #116]	; (800304c <HAL_GPIO_Init+0x350>)
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002fdc:	4b1b      	ldr	r3, [pc, #108]	; (800304c <HAL_GPIO_Init+0x350>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	43db      	mvns	r3, r3
 8002fe6:	693a      	ldr	r2, [r7, #16]
 8002fe8:	4013      	ands	r3, r2
 8002fea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d003      	beq.n	8003000 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002ff8:	693a      	ldr	r2, [r7, #16]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003000:	4a12      	ldr	r2, [pc, #72]	; (800304c <HAL_GPIO_Init+0x350>)
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	3301      	adds	r3, #1
 800300a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	fa22 f303 	lsr.w	r3, r2, r3
 8003016:	2b00      	cmp	r3, #0
 8003018:	f47f ae78 	bne.w	8002d0c <HAL_GPIO_Init+0x10>
  }
}
 800301c:	bf00      	nop
 800301e:	bf00      	nop
 8003020:	371c      	adds	r7, #28
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr
 800302a:	bf00      	nop
 800302c:	40021000 	.word	0x40021000
 8003030:	40010000 	.word	0x40010000
 8003034:	48000400 	.word	0x48000400
 8003038:	48000800 	.word	0x48000800
 800303c:	48000c00 	.word	0x48000c00
 8003040:	48001000 	.word	0x48001000
 8003044:	48001400 	.word	0x48001400
 8003048:	48001800 	.word	0x48001800
 800304c:	40010400 	.word	0x40010400

08003050 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	460b      	mov	r3, r1
 800305a:	807b      	strh	r3, [r7, #2]
 800305c:	4613      	mov	r3, r2
 800305e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003060:	787b      	ldrb	r3, [r7, #1]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d003      	beq.n	800306e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003066:	887a      	ldrh	r2, [r7, #2]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800306c:	e002      	b.n	8003074 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800306e:	887a      	ldrh	r2, [r7, #2]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003074:	bf00      	nop
 8003076:	370c      	adds	r7, #12
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr

08003080 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b082      	sub	sp, #8
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d101      	bne.n	8003092 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e081      	b.n	8003196 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003098:	b2db      	uxtb	r3, r3
 800309a:	2b00      	cmp	r3, #0
 800309c:	d106      	bne.n	80030ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f7fe f842 	bl	8001130 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2224      	movs	r2, #36	; 0x24
 80030b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f022 0201 	bic.w	r2, r2, #1
 80030c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685a      	ldr	r2, [r3, #4]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80030d0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	689a      	ldr	r2, [r3, #8]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030e0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d107      	bne.n	80030fa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	689a      	ldr	r2, [r3, #8]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030f6:	609a      	str	r2, [r3, #8]
 80030f8:	e006      	b.n	8003108 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	689a      	ldr	r2, [r3, #8]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003106:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	2b02      	cmp	r3, #2
 800310e:	d104      	bne.n	800311a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003118:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	6812      	ldr	r2, [r2, #0]
 8003124:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003128:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800312c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	68da      	ldr	r2, [r3, #12]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800313c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	691a      	ldr	r2, [r3, #16]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	695b      	ldr	r3, [r3, #20]
 8003146:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	699b      	ldr	r3, [r3, #24]
 800314e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	430a      	orrs	r2, r1
 8003156:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	69d9      	ldr	r1, [r3, #28]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a1a      	ldr	r2, [r3, #32]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	430a      	orrs	r2, r1
 8003166:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f042 0201 	orr.w	r2, r2, #1
 8003176:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2220      	movs	r2, #32
 8003182:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	3708      	adds	r7, #8
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
	...

080031a0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b088      	sub	sp, #32
 80031a4:	af02      	add	r7, sp, #8
 80031a6:	60f8      	str	r0, [r7, #12]
 80031a8:	607a      	str	r2, [r7, #4]
 80031aa:	461a      	mov	r2, r3
 80031ac:	460b      	mov	r3, r1
 80031ae:	817b      	strh	r3, [r7, #10]
 80031b0:	4613      	mov	r3, r2
 80031b2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	2b20      	cmp	r3, #32
 80031be:	f040 80da 	bne.w	8003376 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d101      	bne.n	80031d0 <HAL_I2C_Master_Transmit+0x30>
 80031cc:	2302      	movs	r3, #2
 80031ce:	e0d3      	b.n	8003378 <HAL_I2C_Master_Transmit+0x1d8>
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80031d8:	f7ff f9d8 	bl	800258c <HAL_GetTick>
 80031dc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	9300      	str	r3, [sp, #0]
 80031e2:	2319      	movs	r3, #25
 80031e4:	2201      	movs	r2, #1
 80031e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80031ea:	68f8      	ldr	r0, [r7, #12]
 80031ec:	f000 fdc4 	bl	8003d78 <I2C_WaitOnFlagUntilTimeout>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d001      	beq.n	80031fa <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e0be      	b.n	8003378 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2221      	movs	r2, #33	; 0x21
 80031fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2210      	movs	r2, #16
 8003206:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2200      	movs	r2, #0
 800320e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	893a      	ldrh	r2, [r7, #8]
 800321a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2200      	movs	r2, #0
 8003220:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003226:	b29b      	uxth	r3, r3
 8003228:	2bff      	cmp	r3, #255	; 0xff
 800322a:	d90e      	bls.n	800324a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	22ff      	movs	r2, #255	; 0xff
 8003230:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003236:	b2da      	uxtb	r2, r3
 8003238:	8979      	ldrh	r1, [r7, #10]
 800323a:	4b51      	ldr	r3, [pc, #324]	; (8003380 <HAL_I2C_Master_Transmit+0x1e0>)
 800323c:	9300      	str	r3, [sp, #0]
 800323e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003242:	68f8      	ldr	r0, [r7, #12]
 8003244:	f000 ffba 	bl	80041bc <I2C_TransferConfig>
 8003248:	e06c      	b.n	8003324 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800324e:	b29a      	uxth	r2, r3
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003258:	b2da      	uxtb	r2, r3
 800325a:	8979      	ldrh	r1, [r7, #10]
 800325c:	4b48      	ldr	r3, [pc, #288]	; (8003380 <HAL_I2C_Master_Transmit+0x1e0>)
 800325e:	9300      	str	r3, [sp, #0]
 8003260:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003264:	68f8      	ldr	r0, [r7, #12]
 8003266:	f000 ffa9 	bl	80041bc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800326a:	e05b      	b.n	8003324 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800326c:	697a      	ldr	r2, [r7, #20]
 800326e:	6a39      	ldr	r1, [r7, #32]
 8003270:	68f8      	ldr	r0, [r7, #12]
 8003272:	f000 fdc1 	bl	8003df8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d001      	beq.n	8003280 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e07b      	b.n	8003378 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003284:	781a      	ldrb	r2, [r3, #0]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003290:	1c5a      	adds	r2, r3, #1
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800329a:	b29b      	uxth	r3, r3
 800329c:	3b01      	subs	r3, #1
 800329e:	b29a      	uxth	r2, r3
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032a8:	3b01      	subs	r3, #1
 80032aa:	b29a      	uxth	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d034      	beq.n	8003324 <HAL_I2C_Master_Transmit+0x184>
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d130      	bne.n	8003324 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	9300      	str	r3, [sp, #0]
 80032c6:	6a3b      	ldr	r3, [r7, #32]
 80032c8:	2200      	movs	r2, #0
 80032ca:	2180      	movs	r1, #128	; 0x80
 80032cc:	68f8      	ldr	r0, [r7, #12]
 80032ce:	f000 fd53 	bl	8003d78 <I2C_WaitOnFlagUntilTimeout>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d001      	beq.n	80032dc <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e04d      	b.n	8003378 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	2bff      	cmp	r3, #255	; 0xff
 80032e4:	d90e      	bls.n	8003304 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	22ff      	movs	r2, #255	; 0xff
 80032ea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032f0:	b2da      	uxtb	r2, r3
 80032f2:	8979      	ldrh	r1, [r7, #10]
 80032f4:	2300      	movs	r3, #0
 80032f6:	9300      	str	r3, [sp, #0]
 80032f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032fc:	68f8      	ldr	r0, [r7, #12]
 80032fe:	f000 ff5d 	bl	80041bc <I2C_TransferConfig>
 8003302:	e00f      	b.n	8003324 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003308:	b29a      	uxth	r2, r3
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003312:	b2da      	uxtb	r2, r3
 8003314:	8979      	ldrh	r1, [r7, #10]
 8003316:	2300      	movs	r3, #0
 8003318:	9300      	str	r3, [sp, #0]
 800331a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800331e:	68f8      	ldr	r0, [r7, #12]
 8003320:	f000 ff4c 	bl	80041bc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003328:	b29b      	uxth	r3, r3
 800332a:	2b00      	cmp	r3, #0
 800332c:	d19e      	bne.n	800326c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800332e:	697a      	ldr	r2, [r7, #20]
 8003330:	6a39      	ldr	r1, [r7, #32]
 8003332:	68f8      	ldr	r0, [r7, #12]
 8003334:	f000 fda0 	bl	8003e78 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d001      	beq.n	8003342 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e01a      	b.n	8003378 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2220      	movs	r2, #32
 8003348:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	6859      	ldr	r1, [r3, #4]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	4b0b      	ldr	r3, [pc, #44]	; (8003384 <HAL_I2C_Master_Transmit+0x1e4>)
 8003356:	400b      	ands	r3, r1
 8003358:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2220      	movs	r2, #32
 800335e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2200      	movs	r2, #0
 8003366:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003372:	2300      	movs	r3, #0
 8003374:	e000      	b.n	8003378 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003376:	2302      	movs	r3, #2
  }
}
 8003378:	4618      	mov	r0, r3
 800337a:	3718      	adds	r7, #24
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	80002000 	.word	0x80002000
 8003384:	fe00e800 	.word	0xfe00e800

08003388 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b088      	sub	sp, #32
 800338c:	af02      	add	r7, sp, #8
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	607a      	str	r2, [r7, #4]
 8003392:	461a      	mov	r2, r3
 8003394:	460b      	mov	r3, r1
 8003396:	817b      	strh	r3, [r7, #10]
 8003398:	4613      	mov	r3, r2
 800339a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	2b20      	cmp	r3, #32
 80033a6:	f040 80db 	bne.w	8003560 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d101      	bne.n	80033b8 <HAL_I2C_Master_Receive+0x30>
 80033b4:	2302      	movs	r3, #2
 80033b6:	e0d4      	b.n	8003562 <HAL_I2C_Master_Receive+0x1da>
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80033c0:	f7ff f8e4 	bl	800258c <HAL_GetTick>
 80033c4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	9300      	str	r3, [sp, #0]
 80033ca:	2319      	movs	r3, #25
 80033cc:	2201      	movs	r2, #1
 80033ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80033d2:	68f8      	ldr	r0, [r7, #12]
 80033d4:	f000 fcd0 	bl	8003d78 <I2C_WaitOnFlagUntilTimeout>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d001      	beq.n	80033e2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e0bf      	b.n	8003562 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2222      	movs	r2, #34	; 0x22
 80033e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2210      	movs	r2, #16
 80033ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2200      	movs	r2, #0
 80033f6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	893a      	ldrh	r2, [r7, #8]
 8003402:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2200      	movs	r2, #0
 8003408:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800340e:	b29b      	uxth	r3, r3
 8003410:	2bff      	cmp	r3, #255	; 0xff
 8003412:	d90e      	bls.n	8003432 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	22ff      	movs	r2, #255	; 0xff
 8003418:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800341e:	b2da      	uxtb	r2, r3
 8003420:	8979      	ldrh	r1, [r7, #10]
 8003422:	4b52      	ldr	r3, [pc, #328]	; (800356c <HAL_I2C_Master_Receive+0x1e4>)
 8003424:	9300      	str	r3, [sp, #0]
 8003426:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800342a:	68f8      	ldr	r0, [r7, #12]
 800342c:	f000 fec6 	bl	80041bc <I2C_TransferConfig>
 8003430:	e06d      	b.n	800350e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003436:	b29a      	uxth	r2, r3
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003440:	b2da      	uxtb	r2, r3
 8003442:	8979      	ldrh	r1, [r7, #10]
 8003444:	4b49      	ldr	r3, [pc, #292]	; (800356c <HAL_I2C_Master_Receive+0x1e4>)
 8003446:	9300      	str	r3, [sp, #0]
 8003448:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800344c:	68f8      	ldr	r0, [r7, #12]
 800344e:	f000 feb5 	bl	80041bc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003452:	e05c      	b.n	800350e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003454:	697a      	ldr	r2, [r7, #20]
 8003456:	6a39      	ldr	r1, [r7, #32]
 8003458:	68f8      	ldr	r0, [r7, #12]
 800345a:	f000 fd49 	bl	8003ef0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d001      	beq.n	8003468 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e07c      	b.n	8003562 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003472:	b2d2      	uxtb	r2, r2
 8003474:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347a:	1c5a      	adds	r2, r3, #1
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003484:	3b01      	subs	r3, #1
 8003486:	b29a      	uxth	r2, r3
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003490:	b29b      	uxth	r3, r3
 8003492:	3b01      	subs	r3, #1
 8003494:	b29a      	uxth	r2, r3
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800349e:	b29b      	uxth	r3, r3
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d034      	beq.n	800350e <HAL_I2C_Master_Receive+0x186>
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d130      	bne.n	800350e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	9300      	str	r3, [sp, #0]
 80034b0:	6a3b      	ldr	r3, [r7, #32]
 80034b2:	2200      	movs	r2, #0
 80034b4:	2180      	movs	r1, #128	; 0x80
 80034b6:	68f8      	ldr	r0, [r7, #12]
 80034b8:	f000 fc5e 	bl	8003d78 <I2C_WaitOnFlagUntilTimeout>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d001      	beq.n	80034c6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e04d      	b.n	8003562 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	2bff      	cmp	r3, #255	; 0xff
 80034ce:	d90e      	bls.n	80034ee <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	22ff      	movs	r2, #255	; 0xff
 80034d4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034da:	b2da      	uxtb	r2, r3
 80034dc:	8979      	ldrh	r1, [r7, #10]
 80034de:	2300      	movs	r3, #0
 80034e0:	9300      	str	r3, [sp, #0]
 80034e2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80034e6:	68f8      	ldr	r0, [r7, #12]
 80034e8:	f000 fe68 	bl	80041bc <I2C_TransferConfig>
 80034ec:	e00f      	b.n	800350e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034f2:	b29a      	uxth	r2, r3
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034fc:	b2da      	uxtb	r2, r3
 80034fe:	8979      	ldrh	r1, [r7, #10]
 8003500:	2300      	movs	r3, #0
 8003502:	9300      	str	r3, [sp, #0]
 8003504:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003508:	68f8      	ldr	r0, [r7, #12]
 800350a:	f000 fe57 	bl	80041bc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003512:	b29b      	uxth	r3, r3
 8003514:	2b00      	cmp	r3, #0
 8003516:	d19d      	bne.n	8003454 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003518:	697a      	ldr	r2, [r7, #20]
 800351a:	6a39      	ldr	r1, [r7, #32]
 800351c:	68f8      	ldr	r0, [r7, #12]
 800351e:	f000 fcab 	bl	8003e78 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d001      	beq.n	800352c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e01a      	b.n	8003562 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	2220      	movs	r2, #32
 8003532:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	6859      	ldr	r1, [r3, #4]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	4b0c      	ldr	r3, [pc, #48]	; (8003570 <HAL_I2C_Master_Receive+0x1e8>)
 8003540:	400b      	ands	r3, r1
 8003542:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2220      	movs	r2, #32
 8003548:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2200      	movs	r2, #0
 8003550:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800355c:	2300      	movs	r3, #0
 800355e:	e000      	b.n	8003562 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003560:	2302      	movs	r3, #2
  }
}
 8003562:	4618      	mov	r0, r3
 8003564:	3718      	adds	r7, #24
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	80002400 	.word	0x80002400
 8003570:	fe00e800 	.word	0xfe00e800

08003574 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b088      	sub	sp, #32
 8003578:	af02      	add	r7, sp, #8
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	4608      	mov	r0, r1
 800357e:	4611      	mov	r1, r2
 8003580:	461a      	mov	r2, r3
 8003582:	4603      	mov	r3, r0
 8003584:	817b      	strh	r3, [r7, #10]
 8003586:	460b      	mov	r3, r1
 8003588:	813b      	strh	r3, [r7, #8]
 800358a:	4613      	mov	r3, r2
 800358c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003594:	b2db      	uxtb	r3, r3
 8003596:	2b20      	cmp	r3, #32
 8003598:	f040 80f9 	bne.w	800378e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800359c:	6a3b      	ldr	r3, [r7, #32]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d002      	beq.n	80035a8 <HAL_I2C_Mem_Write+0x34>
 80035a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d105      	bne.n	80035b4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035ae:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e0ed      	b.n	8003790 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d101      	bne.n	80035c2 <HAL_I2C_Mem_Write+0x4e>
 80035be:	2302      	movs	r3, #2
 80035c0:	e0e6      	b.n	8003790 <HAL_I2C_Mem_Write+0x21c>
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2201      	movs	r2, #1
 80035c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80035ca:	f7fe ffdf 	bl	800258c <HAL_GetTick>
 80035ce:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	9300      	str	r3, [sp, #0]
 80035d4:	2319      	movs	r3, #25
 80035d6:	2201      	movs	r2, #1
 80035d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80035dc:	68f8      	ldr	r0, [r7, #12]
 80035de:	f000 fbcb 	bl	8003d78 <I2C_WaitOnFlagUntilTimeout>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d001      	beq.n	80035ec <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e0d1      	b.n	8003790 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2221      	movs	r2, #33	; 0x21
 80035f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2240      	movs	r2, #64	; 0x40
 80035f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2200      	movs	r2, #0
 8003600:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6a3a      	ldr	r2, [r7, #32]
 8003606:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800360c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2200      	movs	r2, #0
 8003612:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003614:	88f8      	ldrh	r0, [r7, #6]
 8003616:	893a      	ldrh	r2, [r7, #8]
 8003618:	8979      	ldrh	r1, [r7, #10]
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	9301      	str	r3, [sp, #4]
 800361e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003620:	9300      	str	r3, [sp, #0]
 8003622:	4603      	mov	r3, r0
 8003624:	68f8      	ldr	r0, [r7, #12]
 8003626:	f000 fadb 	bl	8003be0 <I2C_RequestMemoryWrite>
 800362a:	4603      	mov	r3, r0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d005      	beq.n	800363c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2200      	movs	r2, #0
 8003634:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e0a9      	b.n	8003790 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003640:	b29b      	uxth	r3, r3
 8003642:	2bff      	cmp	r3, #255	; 0xff
 8003644:	d90e      	bls.n	8003664 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	22ff      	movs	r2, #255	; 0xff
 800364a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003650:	b2da      	uxtb	r2, r3
 8003652:	8979      	ldrh	r1, [r7, #10]
 8003654:	2300      	movs	r3, #0
 8003656:	9300      	str	r3, [sp, #0]
 8003658:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800365c:	68f8      	ldr	r0, [r7, #12]
 800365e:	f000 fdad 	bl	80041bc <I2C_TransferConfig>
 8003662:	e00f      	b.n	8003684 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003668:	b29a      	uxth	r2, r3
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003672:	b2da      	uxtb	r2, r3
 8003674:	8979      	ldrh	r1, [r7, #10]
 8003676:	2300      	movs	r3, #0
 8003678:	9300      	str	r3, [sp, #0]
 800367a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800367e:	68f8      	ldr	r0, [r7, #12]
 8003680:	f000 fd9c 	bl	80041bc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003684:	697a      	ldr	r2, [r7, #20]
 8003686:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003688:	68f8      	ldr	r0, [r7, #12]
 800368a:	f000 fbb5 	bl	8003df8 <I2C_WaitOnTXISFlagUntilTimeout>
 800368e:	4603      	mov	r3, r0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d001      	beq.n	8003698 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e07b      	b.n	8003790 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369c:	781a      	ldrb	r2, [r3, #0]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a8:	1c5a      	adds	r2, r3, #1
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	3b01      	subs	r3, #1
 80036b6:	b29a      	uxth	r2, r3
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036c0:	3b01      	subs	r3, #1
 80036c2:	b29a      	uxth	r2, r3
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d034      	beq.n	800373c <HAL_I2C_Mem_Write+0x1c8>
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d130      	bne.n	800373c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	9300      	str	r3, [sp, #0]
 80036de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036e0:	2200      	movs	r2, #0
 80036e2:	2180      	movs	r1, #128	; 0x80
 80036e4:	68f8      	ldr	r0, [r7, #12]
 80036e6:	f000 fb47 	bl	8003d78 <I2C_WaitOnFlagUntilTimeout>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d001      	beq.n	80036f4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e04d      	b.n	8003790 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	2bff      	cmp	r3, #255	; 0xff
 80036fc:	d90e      	bls.n	800371c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	22ff      	movs	r2, #255	; 0xff
 8003702:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003708:	b2da      	uxtb	r2, r3
 800370a:	8979      	ldrh	r1, [r7, #10]
 800370c:	2300      	movs	r3, #0
 800370e:	9300      	str	r3, [sp, #0]
 8003710:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003714:	68f8      	ldr	r0, [r7, #12]
 8003716:	f000 fd51 	bl	80041bc <I2C_TransferConfig>
 800371a:	e00f      	b.n	800373c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003720:	b29a      	uxth	r2, r3
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800372a:	b2da      	uxtb	r2, r3
 800372c:	8979      	ldrh	r1, [r7, #10]
 800372e:	2300      	movs	r3, #0
 8003730:	9300      	str	r3, [sp, #0]
 8003732:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003736:	68f8      	ldr	r0, [r7, #12]
 8003738:	f000 fd40 	bl	80041bc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003740:	b29b      	uxth	r3, r3
 8003742:	2b00      	cmp	r3, #0
 8003744:	d19e      	bne.n	8003684 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003746:	697a      	ldr	r2, [r7, #20]
 8003748:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800374a:	68f8      	ldr	r0, [r7, #12]
 800374c:	f000 fb94 	bl	8003e78 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d001      	beq.n	800375a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e01a      	b.n	8003790 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	2220      	movs	r2, #32
 8003760:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	6859      	ldr	r1, [r3, #4]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	4b0a      	ldr	r3, [pc, #40]	; (8003798 <HAL_I2C_Mem_Write+0x224>)
 800376e:	400b      	ands	r3, r1
 8003770:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2220      	movs	r2, #32
 8003776:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2200      	movs	r2, #0
 800377e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2200      	movs	r2, #0
 8003786:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800378a:	2300      	movs	r3, #0
 800378c:	e000      	b.n	8003790 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800378e:	2302      	movs	r3, #2
  }
}
 8003790:	4618      	mov	r0, r3
 8003792:	3718      	adds	r7, #24
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}
 8003798:	fe00e800 	.word	0xfe00e800

0800379c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b088      	sub	sp, #32
 80037a0:	af02      	add	r7, sp, #8
 80037a2:	60f8      	str	r0, [r7, #12]
 80037a4:	4608      	mov	r0, r1
 80037a6:	4611      	mov	r1, r2
 80037a8:	461a      	mov	r2, r3
 80037aa:	4603      	mov	r3, r0
 80037ac:	817b      	strh	r3, [r7, #10]
 80037ae:	460b      	mov	r3, r1
 80037b0:	813b      	strh	r3, [r7, #8]
 80037b2:	4613      	mov	r3, r2
 80037b4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	2b20      	cmp	r3, #32
 80037c0:	f040 80fd 	bne.w	80039be <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80037c4:	6a3b      	ldr	r3, [r7, #32]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d002      	beq.n	80037d0 <HAL_I2C_Mem_Read+0x34>
 80037ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d105      	bne.n	80037dc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037d6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e0f1      	b.n	80039c0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d101      	bne.n	80037ea <HAL_I2C_Mem_Read+0x4e>
 80037e6:	2302      	movs	r3, #2
 80037e8:	e0ea      	b.n	80039c0 <HAL_I2C_Mem_Read+0x224>
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2201      	movs	r2, #1
 80037ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80037f2:	f7fe fecb 	bl	800258c <HAL_GetTick>
 80037f6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	9300      	str	r3, [sp, #0]
 80037fc:	2319      	movs	r3, #25
 80037fe:	2201      	movs	r2, #1
 8003800:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003804:	68f8      	ldr	r0, [r7, #12]
 8003806:	f000 fab7 	bl	8003d78 <I2C_WaitOnFlagUntilTimeout>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d001      	beq.n	8003814 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e0d5      	b.n	80039c0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2222      	movs	r2, #34	; 0x22
 8003818:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2240      	movs	r2, #64	; 0x40
 8003820:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2200      	movs	r2, #0
 8003828:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6a3a      	ldr	r2, [r7, #32]
 800382e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003834:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2200      	movs	r2, #0
 800383a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800383c:	88f8      	ldrh	r0, [r7, #6]
 800383e:	893a      	ldrh	r2, [r7, #8]
 8003840:	8979      	ldrh	r1, [r7, #10]
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	9301      	str	r3, [sp, #4]
 8003846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003848:	9300      	str	r3, [sp, #0]
 800384a:	4603      	mov	r3, r0
 800384c:	68f8      	ldr	r0, [r7, #12]
 800384e:	f000 fa1b 	bl	8003c88 <I2C_RequestMemoryRead>
 8003852:	4603      	mov	r3, r0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d005      	beq.n	8003864 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e0ad      	b.n	80039c0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003868:	b29b      	uxth	r3, r3
 800386a:	2bff      	cmp	r3, #255	; 0xff
 800386c:	d90e      	bls.n	800388c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	22ff      	movs	r2, #255	; 0xff
 8003872:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003878:	b2da      	uxtb	r2, r3
 800387a:	8979      	ldrh	r1, [r7, #10]
 800387c:	4b52      	ldr	r3, [pc, #328]	; (80039c8 <HAL_I2C_Mem_Read+0x22c>)
 800387e:	9300      	str	r3, [sp, #0]
 8003880:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003884:	68f8      	ldr	r0, [r7, #12]
 8003886:	f000 fc99 	bl	80041bc <I2C_TransferConfig>
 800388a:	e00f      	b.n	80038ac <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003890:	b29a      	uxth	r2, r3
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800389a:	b2da      	uxtb	r2, r3
 800389c:	8979      	ldrh	r1, [r7, #10]
 800389e:	4b4a      	ldr	r3, [pc, #296]	; (80039c8 <HAL_I2C_Mem_Read+0x22c>)
 80038a0:	9300      	str	r3, [sp, #0]
 80038a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038a6:	68f8      	ldr	r0, [r7, #12]
 80038a8:	f000 fc88 	bl	80041bc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	9300      	str	r3, [sp, #0]
 80038b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b2:	2200      	movs	r2, #0
 80038b4:	2104      	movs	r1, #4
 80038b6:	68f8      	ldr	r0, [r7, #12]
 80038b8:	f000 fa5e 	bl	8003d78 <I2C_WaitOnFlagUntilTimeout>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d001      	beq.n	80038c6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e07c      	b.n	80039c0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d0:	b2d2      	uxtb	r2, r2
 80038d2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d8:	1c5a      	adds	r2, r3, #1
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038e2:	3b01      	subs	r3, #1
 80038e4:	b29a      	uxth	r2, r3
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	3b01      	subs	r3, #1
 80038f2:	b29a      	uxth	r2, r3
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d034      	beq.n	800396c <HAL_I2C_Mem_Read+0x1d0>
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003906:	2b00      	cmp	r3, #0
 8003908:	d130      	bne.n	800396c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	9300      	str	r3, [sp, #0]
 800390e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003910:	2200      	movs	r2, #0
 8003912:	2180      	movs	r1, #128	; 0x80
 8003914:	68f8      	ldr	r0, [r7, #12]
 8003916:	f000 fa2f 	bl	8003d78 <I2C_WaitOnFlagUntilTimeout>
 800391a:	4603      	mov	r3, r0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d001      	beq.n	8003924 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e04d      	b.n	80039c0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003928:	b29b      	uxth	r3, r3
 800392a:	2bff      	cmp	r3, #255	; 0xff
 800392c:	d90e      	bls.n	800394c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	22ff      	movs	r2, #255	; 0xff
 8003932:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003938:	b2da      	uxtb	r2, r3
 800393a:	8979      	ldrh	r1, [r7, #10]
 800393c:	2300      	movs	r3, #0
 800393e:	9300      	str	r3, [sp, #0]
 8003940:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003944:	68f8      	ldr	r0, [r7, #12]
 8003946:	f000 fc39 	bl	80041bc <I2C_TransferConfig>
 800394a:	e00f      	b.n	800396c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003950:	b29a      	uxth	r2, r3
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800395a:	b2da      	uxtb	r2, r3
 800395c:	8979      	ldrh	r1, [r7, #10]
 800395e:	2300      	movs	r3, #0
 8003960:	9300      	str	r3, [sp, #0]
 8003962:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003966:	68f8      	ldr	r0, [r7, #12]
 8003968:	f000 fc28 	bl	80041bc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003970:	b29b      	uxth	r3, r3
 8003972:	2b00      	cmp	r3, #0
 8003974:	d19a      	bne.n	80038ac <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003976:	697a      	ldr	r2, [r7, #20]
 8003978:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800397a:	68f8      	ldr	r0, [r7, #12]
 800397c:	f000 fa7c 	bl	8003e78 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d001      	beq.n	800398a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e01a      	b.n	80039c0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	2220      	movs	r2, #32
 8003990:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	6859      	ldr	r1, [r3, #4]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	4b0b      	ldr	r3, [pc, #44]	; (80039cc <HAL_I2C_Mem_Read+0x230>)
 800399e:	400b      	ands	r3, r1
 80039a0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2220      	movs	r2, #32
 80039a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2200      	movs	r2, #0
 80039b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80039ba:	2300      	movs	r3, #0
 80039bc:	e000      	b.n	80039c0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80039be:	2302      	movs	r3, #2
  }
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3718      	adds	r7, #24
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	80002400 	.word	0x80002400
 80039cc:	fe00e800 	.word	0xfe00e800

080039d0 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b08a      	sub	sp, #40	; 0x28
 80039d4:	af02      	add	r7, sp, #8
 80039d6:	60f8      	str	r0, [r7, #12]
 80039d8:	607a      	str	r2, [r7, #4]
 80039da:	603b      	str	r3, [r7, #0]
 80039dc:	460b      	mov	r3, r1
 80039de:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80039e0:	2300      	movs	r3, #0
 80039e2:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	2b20      	cmp	r3, #32
 80039ee:	f040 80f1 	bne.w	8003bd4 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	699b      	ldr	r3, [r3, #24]
 80039f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a00:	d101      	bne.n	8003a06 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8003a02:	2302      	movs	r3, #2
 8003a04:	e0e7      	b.n	8003bd6 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d101      	bne.n	8003a14 <HAL_I2C_IsDeviceReady+0x44>
 8003a10:	2302      	movs	r3, #2
 8003a12:	e0e0      	b.n	8003bd6 <HAL_I2C_IsDeviceReady+0x206>
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2224      	movs	r2, #36	; 0x24
 8003a20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2200      	movs	r2, #0
 8003a28:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d107      	bne.n	8003a42 <HAL_I2C_IsDeviceReady+0x72>
 8003a32:	897b      	ldrh	r3, [r7, #10]
 8003a34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a38:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003a3c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003a40:	e004      	b.n	8003a4c <HAL_I2C_IsDeviceReady+0x7c>
 8003a42:	897b      	ldrh	r3, [r7, #10]
 8003a44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a48:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8003a4c:	68fa      	ldr	r2, [r7, #12]
 8003a4e:	6812      	ldr	r2, [r2, #0]
 8003a50:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8003a52:	f7fe fd9b 	bl	800258c <HAL_GetTick>
 8003a56:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	699b      	ldr	r3, [r3, #24]
 8003a5e:	f003 0320 	and.w	r3, r3, #32
 8003a62:	2b20      	cmp	r3, #32
 8003a64:	bf0c      	ite	eq
 8003a66:	2301      	moveq	r3, #1
 8003a68:	2300      	movne	r3, #0
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	699b      	ldr	r3, [r3, #24]
 8003a74:	f003 0310 	and.w	r3, r3, #16
 8003a78:	2b10      	cmp	r3, #16
 8003a7a:	bf0c      	ite	eq
 8003a7c:	2301      	moveq	r3, #1
 8003a7e:	2300      	movne	r3, #0
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003a84:	e034      	b.n	8003af0 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a8c:	d01a      	beq.n	8003ac4 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003a8e:	f7fe fd7d 	bl	800258c <HAL_GetTick>
 8003a92:	4602      	mov	r2, r0
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	683a      	ldr	r2, [r7, #0]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d302      	bcc.n	8003aa4 <HAL_I2C_IsDeviceReady+0xd4>
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d10f      	bne.n	8003ac4 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2220      	movs	r2, #32
 8003aa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ab0:	f043 0220 	orr.w	r2, r3, #32
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2200      	movs	r2, #0
 8003abc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e088      	b.n	8003bd6 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	699b      	ldr	r3, [r3, #24]
 8003aca:	f003 0320 	and.w	r3, r3, #32
 8003ace:	2b20      	cmp	r3, #32
 8003ad0:	bf0c      	ite	eq
 8003ad2:	2301      	moveq	r3, #1
 8003ad4:	2300      	movne	r3, #0
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	699b      	ldr	r3, [r3, #24]
 8003ae0:	f003 0310 	and.w	r3, r3, #16
 8003ae4:	2b10      	cmp	r3, #16
 8003ae6:	bf0c      	ite	eq
 8003ae8:	2301      	moveq	r3, #1
 8003aea:	2300      	movne	r3, #0
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003af0:	7ffb      	ldrb	r3, [r7, #31]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d102      	bne.n	8003afc <HAL_I2C_IsDeviceReady+0x12c>
 8003af6:	7fbb      	ldrb	r3, [r7, #30]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d0c4      	beq.n	8003a86 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	699b      	ldr	r3, [r3, #24]
 8003b02:	f003 0310 	and.w	r3, r3, #16
 8003b06:	2b10      	cmp	r3, #16
 8003b08:	d01a      	beq.n	8003b40 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003b0a:	69bb      	ldr	r3, [r7, #24]
 8003b0c:	9300      	str	r3, [sp, #0]
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	2200      	movs	r2, #0
 8003b12:	2120      	movs	r1, #32
 8003b14:	68f8      	ldr	r0, [r7, #12]
 8003b16:	f000 f92f 	bl	8003d78 <I2C_WaitOnFlagUntilTimeout>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d001      	beq.n	8003b24 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e058      	b.n	8003bd6 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2220      	movs	r2, #32
 8003b2a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2220      	movs	r2, #32
 8003b30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2200      	movs	r2, #0
 8003b38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	e04a      	b.n	8003bd6 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003b40:	69bb      	ldr	r3, [r7, #24]
 8003b42:	9300      	str	r3, [sp, #0]
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	2200      	movs	r2, #0
 8003b48:	2120      	movs	r1, #32
 8003b4a:	68f8      	ldr	r0, [r7, #12]
 8003b4c:	f000 f914 	bl	8003d78 <I2C_WaitOnFlagUntilTimeout>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d001      	beq.n	8003b5a <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e03d      	b.n	8003bd6 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	2210      	movs	r2, #16
 8003b60:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	2220      	movs	r2, #32
 8003b68:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d118      	bne.n	8003ba4 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	685a      	ldr	r2, [r3, #4]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b80:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003b82:	69bb      	ldr	r3, [r7, #24]
 8003b84:	9300      	str	r3, [sp, #0]
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	2120      	movs	r1, #32
 8003b8c:	68f8      	ldr	r0, [r7, #12]
 8003b8e:	f000 f8f3 	bl	8003d78 <I2C_WaitOnFlagUntilTimeout>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d001      	beq.n	8003b9c <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e01c      	b.n	8003bd6 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	2220      	movs	r2, #32
 8003ba2:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	3301      	adds	r3, #1
 8003ba8:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	f63f af3b 	bhi.w	8003a2a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2220      	movs	r2, #32
 8003bb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc0:	f043 0220 	orr.w	r2, r3, #32
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e000      	b.n	8003bd6 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8003bd4:	2302      	movs	r3, #2
  }
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3720      	adds	r7, #32
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
	...

08003be0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b086      	sub	sp, #24
 8003be4:	af02      	add	r7, sp, #8
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	4608      	mov	r0, r1
 8003bea:	4611      	mov	r1, r2
 8003bec:	461a      	mov	r2, r3
 8003bee:	4603      	mov	r3, r0
 8003bf0:	817b      	strh	r3, [r7, #10]
 8003bf2:	460b      	mov	r3, r1
 8003bf4:	813b      	strh	r3, [r7, #8]
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003bfa:	88fb      	ldrh	r3, [r7, #6]
 8003bfc:	b2da      	uxtb	r2, r3
 8003bfe:	8979      	ldrh	r1, [r7, #10]
 8003c00:	4b20      	ldr	r3, [pc, #128]	; (8003c84 <I2C_RequestMemoryWrite+0xa4>)
 8003c02:	9300      	str	r3, [sp, #0]
 8003c04:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c08:	68f8      	ldr	r0, [r7, #12]
 8003c0a:	f000 fad7 	bl	80041bc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c0e:	69fa      	ldr	r2, [r7, #28]
 8003c10:	69b9      	ldr	r1, [r7, #24]
 8003c12:	68f8      	ldr	r0, [r7, #12]
 8003c14:	f000 f8f0 	bl	8003df8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d001      	beq.n	8003c22 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e02c      	b.n	8003c7c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c22:	88fb      	ldrh	r3, [r7, #6]
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d105      	bne.n	8003c34 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c28:	893b      	ldrh	r3, [r7, #8]
 8003c2a:	b2da      	uxtb	r2, r3
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	629a      	str	r2, [r3, #40]	; 0x28
 8003c32:	e015      	b.n	8003c60 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003c34:	893b      	ldrh	r3, [r7, #8]
 8003c36:	0a1b      	lsrs	r3, r3, #8
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	b2da      	uxtb	r2, r3
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c42:	69fa      	ldr	r2, [r7, #28]
 8003c44:	69b9      	ldr	r1, [r7, #24]
 8003c46:	68f8      	ldr	r0, [r7, #12]
 8003c48:	f000 f8d6 	bl	8003df8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d001      	beq.n	8003c56 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e012      	b.n	8003c7c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c56:	893b      	ldrh	r3, [r7, #8]
 8003c58:	b2da      	uxtb	r2, r3
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	9300      	str	r3, [sp, #0]
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	2200      	movs	r2, #0
 8003c68:	2180      	movs	r1, #128	; 0x80
 8003c6a:	68f8      	ldr	r0, [r7, #12]
 8003c6c:	f000 f884 	bl	8003d78 <I2C_WaitOnFlagUntilTimeout>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d001      	beq.n	8003c7a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e000      	b.n	8003c7c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3710      	adds	r7, #16
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	80002000 	.word	0x80002000

08003c88 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b086      	sub	sp, #24
 8003c8c:	af02      	add	r7, sp, #8
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	4608      	mov	r0, r1
 8003c92:	4611      	mov	r1, r2
 8003c94:	461a      	mov	r2, r3
 8003c96:	4603      	mov	r3, r0
 8003c98:	817b      	strh	r3, [r7, #10]
 8003c9a:	460b      	mov	r3, r1
 8003c9c:	813b      	strh	r3, [r7, #8]
 8003c9e:	4613      	mov	r3, r2
 8003ca0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003ca2:	88fb      	ldrh	r3, [r7, #6]
 8003ca4:	b2da      	uxtb	r2, r3
 8003ca6:	8979      	ldrh	r1, [r7, #10]
 8003ca8:	4b20      	ldr	r3, [pc, #128]	; (8003d2c <I2C_RequestMemoryRead+0xa4>)
 8003caa:	9300      	str	r3, [sp, #0]
 8003cac:	2300      	movs	r3, #0
 8003cae:	68f8      	ldr	r0, [r7, #12]
 8003cb0:	f000 fa84 	bl	80041bc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cb4:	69fa      	ldr	r2, [r7, #28]
 8003cb6:	69b9      	ldr	r1, [r7, #24]
 8003cb8:	68f8      	ldr	r0, [r7, #12]
 8003cba:	f000 f89d 	bl	8003df8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d001      	beq.n	8003cc8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e02c      	b.n	8003d22 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003cc8:	88fb      	ldrh	r3, [r7, #6]
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d105      	bne.n	8003cda <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003cce:	893b      	ldrh	r3, [r7, #8]
 8003cd0:	b2da      	uxtb	r2, r3
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	629a      	str	r2, [r3, #40]	; 0x28
 8003cd8:	e015      	b.n	8003d06 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003cda:	893b      	ldrh	r3, [r7, #8]
 8003cdc:	0a1b      	lsrs	r3, r3, #8
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	b2da      	uxtb	r2, r3
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ce8:	69fa      	ldr	r2, [r7, #28]
 8003cea:	69b9      	ldr	r1, [r7, #24]
 8003cec:	68f8      	ldr	r0, [r7, #12]
 8003cee:	f000 f883 	bl	8003df8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d001      	beq.n	8003cfc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e012      	b.n	8003d22 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003cfc:	893b      	ldrh	r3, [r7, #8]
 8003cfe:	b2da      	uxtb	r2, r3
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	9300      	str	r3, [sp, #0]
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	2140      	movs	r1, #64	; 0x40
 8003d10:	68f8      	ldr	r0, [r7, #12]
 8003d12:	f000 f831 	bl	8003d78 <I2C_WaitOnFlagUntilTimeout>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d001      	beq.n	8003d20 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e000      	b.n	8003d22 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3710      	adds	r7, #16
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	80002000 	.word	0x80002000

08003d30 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	699b      	ldr	r3, [r3, #24]
 8003d3e:	f003 0302 	and.w	r3, r3, #2
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d103      	bne.n	8003d4e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	699b      	ldr	r3, [r3, #24]
 8003d54:	f003 0301 	and.w	r3, r3, #1
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d007      	beq.n	8003d6c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	699a      	ldr	r2, [r3, #24]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f042 0201 	orr.w	r2, r2, #1
 8003d6a:	619a      	str	r2, [r3, #24]
  }
}
 8003d6c:	bf00      	nop
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr

08003d78 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b084      	sub	sp, #16
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	60f8      	str	r0, [r7, #12]
 8003d80:	60b9      	str	r1, [r7, #8]
 8003d82:	603b      	str	r3, [r7, #0]
 8003d84:	4613      	mov	r3, r2
 8003d86:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d88:	e022      	b.n	8003dd0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d90:	d01e      	beq.n	8003dd0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d92:	f7fe fbfb 	bl	800258c <HAL_GetTick>
 8003d96:	4602      	mov	r2, r0
 8003d98:	69bb      	ldr	r3, [r7, #24]
 8003d9a:	1ad3      	subs	r3, r2, r3
 8003d9c:	683a      	ldr	r2, [r7, #0]
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d302      	bcc.n	8003da8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d113      	bne.n	8003dd0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dac:	f043 0220 	orr.w	r2, r3, #32
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2220      	movs	r2, #32
 8003db8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e00f      	b.n	8003df0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	699a      	ldr	r2, [r3, #24]
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	4013      	ands	r3, r2
 8003dda:	68ba      	ldr	r2, [r7, #8]
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	bf0c      	ite	eq
 8003de0:	2301      	moveq	r3, #1
 8003de2:	2300      	movne	r3, #0
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	461a      	mov	r2, r3
 8003de8:	79fb      	ldrb	r3, [r7, #7]
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d0cd      	beq.n	8003d8a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003dee:	2300      	movs	r3, #0
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3710      	adds	r7, #16
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}

08003df8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b084      	sub	sp, #16
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	60f8      	str	r0, [r7, #12]
 8003e00:	60b9      	str	r1, [r7, #8]
 8003e02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003e04:	e02c      	b.n	8003e60 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	68b9      	ldr	r1, [r7, #8]
 8003e0a:	68f8      	ldr	r0, [r7, #12]
 8003e0c:	f000 f8ea 	bl	8003fe4 <I2C_IsErrorOccurred>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d001      	beq.n	8003e1a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e02a      	b.n	8003e70 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e20:	d01e      	beq.n	8003e60 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e22:	f7fe fbb3 	bl	800258c <HAL_GetTick>
 8003e26:	4602      	mov	r2, r0
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	68ba      	ldr	r2, [r7, #8]
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d302      	bcc.n	8003e38 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d113      	bne.n	8003e60 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e3c:	f043 0220 	orr.w	r2, r3, #32
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2220      	movs	r2, #32
 8003e48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e007      	b.n	8003e70 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	699b      	ldr	r3, [r3, #24]
 8003e66:	f003 0302 	and.w	r3, r3, #2
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d1cb      	bne.n	8003e06 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e6e:	2300      	movs	r3, #0
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3710      	adds	r7, #16
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b084      	sub	sp, #16
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	60b9      	str	r1, [r7, #8]
 8003e82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e84:	e028      	b.n	8003ed8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	68b9      	ldr	r1, [r7, #8]
 8003e8a:	68f8      	ldr	r0, [r7, #12]
 8003e8c:	f000 f8aa 	bl	8003fe4 <I2C_IsErrorOccurred>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d001      	beq.n	8003e9a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e026      	b.n	8003ee8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e9a:	f7fe fb77 	bl	800258c <HAL_GetTick>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	68ba      	ldr	r2, [r7, #8]
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d302      	bcc.n	8003eb0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d113      	bne.n	8003ed8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eb4:	f043 0220 	orr.w	r2, r3, #32
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2220      	movs	r2, #32
 8003ec0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e007      	b.n	8003ee8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	699b      	ldr	r3, [r3, #24]
 8003ede:	f003 0320 	and.w	r3, r3, #32
 8003ee2:	2b20      	cmp	r3, #32
 8003ee4:	d1cf      	bne.n	8003e86 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003ee6:	2300      	movs	r3, #0
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3710      	adds	r7, #16
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	60f8      	str	r0, [r7, #12]
 8003ef8:	60b9      	str	r1, [r7, #8]
 8003efa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003efc:	e064      	b.n	8003fc8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	68b9      	ldr	r1, [r7, #8]
 8003f02:	68f8      	ldr	r0, [r7, #12]
 8003f04:	f000 f86e 	bl	8003fe4 <I2C_IsErrorOccurred>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d001      	beq.n	8003f12 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e062      	b.n	8003fd8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	699b      	ldr	r3, [r3, #24]
 8003f18:	f003 0320 	and.w	r3, r3, #32
 8003f1c:	2b20      	cmp	r3, #32
 8003f1e:	d138      	bne.n	8003f92 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	699b      	ldr	r3, [r3, #24]
 8003f26:	f003 0304 	and.w	r3, r3, #4
 8003f2a:	2b04      	cmp	r3, #4
 8003f2c:	d105      	bne.n	8003f3a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d001      	beq.n	8003f3a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003f36:	2300      	movs	r3, #0
 8003f38:	e04e      	b.n	8003fd8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	699b      	ldr	r3, [r3, #24]
 8003f40:	f003 0310 	and.w	r3, r3, #16
 8003f44:	2b10      	cmp	r3, #16
 8003f46:	d107      	bne.n	8003f58 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2210      	movs	r2, #16
 8003f4e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2204      	movs	r2, #4
 8003f54:	645a      	str	r2, [r3, #68]	; 0x44
 8003f56:	e002      	b.n	8003f5e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	2220      	movs	r2, #32
 8003f64:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	6859      	ldr	r1, [r3, #4]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	4b1b      	ldr	r3, [pc, #108]	; (8003fe0 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8003f72:	400b      	ands	r3, r1
 8003f74:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2220      	movs	r2, #32
 8003f7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2200      	movs	r2, #0
 8003f82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e022      	b.n	8003fd8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f92:	f7fe fafb 	bl	800258c <HAL_GetTick>
 8003f96:	4602      	mov	r2, r0
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	68ba      	ldr	r2, [r7, #8]
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d302      	bcc.n	8003fa8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d10f      	bne.n	8003fc8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fac:	f043 0220 	orr.w	r2, r3, #32
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2220      	movs	r2, #32
 8003fb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e007      	b.n	8003fd8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	699b      	ldr	r3, [r3, #24]
 8003fce:	f003 0304 	and.w	r3, r3, #4
 8003fd2:	2b04      	cmp	r3, #4
 8003fd4:	d193      	bne.n	8003efe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003fd6:	2300      	movs	r3, #0
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3710      	adds	r7, #16
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	fe00e800 	.word	0xfe00e800

08003fe4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b08a      	sub	sp, #40	; 0x28
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	699b      	ldr	r3, [r3, #24]
 8003ffc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003ffe:	2300      	movs	r3, #0
 8004000:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	f003 0310 	and.w	r3, r3, #16
 800400c:	2b00      	cmp	r3, #0
 800400e:	d075      	beq.n	80040fc <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2210      	movs	r2, #16
 8004016:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004018:	e056      	b.n	80040c8 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004020:	d052      	beq.n	80040c8 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004022:	f7fe fab3 	bl	800258c <HAL_GetTick>
 8004026:	4602      	mov	r2, r0
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	1ad3      	subs	r3, r2, r3
 800402c:	68ba      	ldr	r2, [r7, #8]
 800402e:	429a      	cmp	r2, r3
 8004030:	d302      	bcc.n	8004038 <I2C_IsErrorOccurred+0x54>
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d147      	bne.n	80040c8 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004042:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800404a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	699b      	ldr	r3, [r3, #24]
 8004052:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004056:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800405a:	d12e      	bne.n	80040ba <I2C_IsErrorOccurred+0xd6>
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004062:	d02a      	beq.n	80040ba <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8004064:	7cfb      	ldrb	r3, [r7, #19]
 8004066:	2b20      	cmp	r3, #32
 8004068:	d027      	beq.n	80040ba <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	685a      	ldr	r2, [r3, #4]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004078:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800407a:	f7fe fa87 	bl	800258c <HAL_GetTick>
 800407e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004080:	e01b      	b.n	80040ba <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004082:	f7fe fa83 	bl	800258c <HAL_GetTick>
 8004086:	4602      	mov	r2, r0
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	2b19      	cmp	r3, #25
 800408e:	d914      	bls.n	80040ba <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004094:	f043 0220 	orr.w	r2, r3, #32
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2220      	movs	r2, #32
 80040a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	699b      	ldr	r3, [r3, #24]
 80040c0:	f003 0320 	and.w	r3, r3, #32
 80040c4:	2b20      	cmp	r3, #32
 80040c6:	d1dc      	bne.n	8004082 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	699b      	ldr	r3, [r3, #24]
 80040ce:	f003 0320 	and.w	r3, r3, #32
 80040d2:	2b20      	cmp	r3, #32
 80040d4:	d003      	beq.n	80040de <I2C_IsErrorOccurred+0xfa>
 80040d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d09d      	beq.n	800401a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80040de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d103      	bne.n	80040ee <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	2220      	movs	r2, #32
 80040ec:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80040ee:	6a3b      	ldr	r3, [r7, #32]
 80040f0:	f043 0304 	orr.w	r3, r3, #4
 80040f4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	699b      	ldr	r3, [r3, #24]
 8004102:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800410a:	2b00      	cmp	r3, #0
 800410c:	d00b      	beq.n	8004126 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800410e:	6a3b      	ldr	r3, [r7, #32]
 8004110:	f043 0301 	orr.w	r3, r3, #1
 8004114:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800411e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004126:	69bb      	ldr	r3, [r7, #24]
 8004128:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800412c:	2b00      	cmp	r3, #0
 800412e:	d00b      	beq.n	8004148 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004130:	6a3b      	ldr	r3, [r7, #32]
 8004132:	f043 0308 	orr.w	r3, r3, #8
 8004136:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004140:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004148:	69bb      	ldr	r3, [r7, #24]
 800414a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800414e:	2b00      	cmp	r3, #0
 8004150:	d00b      	beq.n	800416a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004152:	6a3b      	ldr	r3, [r7, #32]
 8004154:	f043 0302 	orr.w	r3, r3, #2
 8004158:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004162:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800416a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800416e:	2b00      	cmp	r3, #0
 8004170:	d01c      	beq.n	80041ac <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004172:	68f8      	ldr	r0, [r7, #12]
 8004174:	f7ff fddc 	bl	8003d30 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	6859      	ldr	r1, [r3, #4]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	4b0d      	ldr	r3, [pc, #52]	; (80041b8 <I2C_IsErrorOccurred+0x1d4>)
 8004184:	400b      	ands	r3, r1
 8004186:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800418c:	6a3b      	ldr	r3, [r7, #32]
 800418e:	431a      	orrs	r2, r3
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2220      	movs	r2, #32
 8004198:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2200      	movs	r2, #0
 80041a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80041ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3728      	adds	r7, #40	; 0x28
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	fe00e800 	.word	0xfe00e800

080041bc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80041bc:	b480      	push	{r7}
 80041be:	b087      	sub	sp, #28
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	60f8      	str	r0, [r7, #12]
 80041c4:	607b      	str	r3, [r7, #4]
 80041c6:	460b      	mov	r3, r1
 80041c8:	817b      	strh	r3, [r7, #10]
 80041ca:	4613      	mov	r3, r2
 80041cc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80041ce:	897b      	ldrh	r3, [r7, #10]
 80041d0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80041d4:	7a7b      	ldrb	r3, [r7, #9]
 80041d6:	041b      	lsls	r3, r3, #16
 80041d8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80041dc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80041e2:	6a3b      	ldr	r3, [r7, #32]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80041ea:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	685a      	ldr	r2, [r3, #4]
 80041f2:	6a3b      	ldr	r3, [r7, #32]
 80041f4:	0d5b      	lsrs	r3, r3, #21
 80041f6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80041fa:	4b08      	ldr	r3, [pc, #32]	; (800421c <I2C_TransferConfig+0x60>)
 80041fc:	430b      	orrs	r3, r1
 80041fe:	43db      	mvns	r3, r3
 8004200:	ea02 0103 	and.w	r1, r2, r3
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	697a      	ldr	r2, [r7, #20]
 800420a:	430a      	orrs	r2, r1
 800420c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800420e:	bf00      	nop
 8004210:	371c      	adds	r7, #28
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop
 800421c:	03ff63ff 	.word	0x03ff63ff

08004220 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004230:	b2db      	uxtb	r3, r3
 8004232:	2b20      	cmp	r3, #32
 8004234:	d138      	bne.n	80042a8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800423c:	2b01      	cmp	r3, #1
 800423e:	d101      	bne.n	8004244 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004240:	2302      	movs	r3, #2
 8004242:	e032      	b.n	80042aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2224      	movs	r2, #36	; 0x24
 8004250:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f022 0201 	bic.w	r2, r2, #1
 8004262:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004272:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	6819      	ldr	r1, [r3, #0]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	683a      	ldr	r2, [r7, #0]
 8004280:	430a      	orrs	r2, r1
 8004282:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f042 0201 	orr.w	r2, r2, #1
 8004292:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2220      	movs	r2, #32
 8004298:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80042a4:	2300      	movs	r3, #0
 80042a6:	e000      	b.n	80042aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80042a8:	2302      	movs	r3, #2
  }
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	370c      	adds	r7, #12
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr

080042b6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80042b6:	b480      	push	{r7}
 80042b8:	b085      	sub	sp, #20
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
 80042be:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	2b20      	cmp	r3, #32
 80042ca:	d139      	bne.n	8004340 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d101      	bne.n	80042da <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80042d6:	2302      	movs	r3, #2
 80042d8:	e033      	b.n	8004342 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2201      	movs	r2, #1
 80042de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2224      	movs	r2, #36	; 0x24
 80042e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f022 0201 	bic.w	r2, r2, #1
 80042f8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004308:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	021b      	lsls	r3, r3, #8
 800430e:	68fa      	ldr	r2, [r7, #12]
 8004310:	4313      	orrs	r3, r2
 8004312:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	68fa      	ldr	r2, [r7, #12]
 800431a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f042 0201 	orr.w	r2, r2, #1
 800432a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2220      	movs	r2, #32
 8004330:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800433c:	2300      	movs	r3, #0
 800433e:	e000      	b.n	8004342 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004340:	2302      	movs	r3, #2
  }
}
 8004342:	4618      	mov	r0, r3
 8004344:	3714      	adds	r7, #20
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	4770      	bx	lr

0800434e <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800434e:	b580      	push	{r7, lr}
 8004350:	b084      	sub	sp, #16
 8004352:	af00      	add	r7, sp, #0
 8004354:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d101      	bne.n	8004360 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e041      	b.n	80043e4 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8004368:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f245 5255 	movw	r2, #21845	; 0x5555
 8004372:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	6852      	ldr	r2, [r2, #4]
 800437c:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	6892      	ldr	r2, [r2, #8]
 8004386:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8004388:	f7fe f900 	bl	800258c <HAL_GetTick>
 800438c:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800438e:	e00f      	b.n	80043b0 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8004390:	f7fe f8fc 	bl	800258c <HAL_GetTick>
 8004394:	4602      	mov	r2, r0
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	2b31      	cmp	r3, #49	; 0x31
 800439c:	d908      	bls.n	80043b0 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	f003 0307 	and.w	r3, r3, #7
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d001      	beq.n	80043b0 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 80043ac:	2303      	movs	r3, #3
 80043ae:	e019      	b.n	80043e4 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	68db      	ldr	r3, [r3, #12]
 80043b6:	f003 0307 	and.w	r3, r3, #7
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d1e8      	bne.n	8004390 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	691a      	ldr	r2, [r3, #16]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d005      	beq.n	80043d8 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	68d2      	ldr	r2, [r2, #12]
 80043d4:	611a      	str	r2, [r3, #16]
 80043d6:	e004      	b.n	80043e2 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80043e0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80043e2:	2300      	movs	r3, #0
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	3710      	adds	r7, #16
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}

080043ec <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80043fc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80043fe:	2300      	movs	r3, #0
}
 8004400:	4618      	mov	r0, r3
 8004402:	370c      	adds	r7, #12
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr

0800440c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800440c:	b480      	push	{r7}
 800440e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004410:	4b04      	ldr	r3, [pc, #16]	; (8004424 <HAL_PWREx_GetVoltageRange+0x18>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004418:	4618      	mov	r0, r3
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr
 8004422:	bf00      	nop
 8004424:	40007000 	.word	0x40007000

08004428 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004428:	b480      	push	{r7}
 800442a:	b085      	sub	sp, #20
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004436:	d130      	bne.n	800449a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004438:	4b23      	ldr	r3, [pc, #140]	; (80044c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004440:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004444:	d038      	beq.n	80044b8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004446:	4b20      	ldr	r3, [pc, #128]	; (80044c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800444e:	4a1e      	ldr	r2, [pc, #120]	; (80044c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004450:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004454:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004456:	4b1d      	ldr	r3, [pc, #116]	; (80044cc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	2232      	movs	r2, #50	; 0x32
 800445c:	fb02 f303 	mul.w	r3, r2, r3
 8004460:	4a1b      	ldr	r2, [pc, #108]	; (80044d0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004462:	fba2 2303 	umull	r2, r3, r2, r3
 8004466:	0c9b      	lsrs	r3, r3, #18
 8004468:	3301      	adds	r3, #1
 800446a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800446c:	e002      	b.n	8004474 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	3b01      	subs	r3, #1
 8004472:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004474:	4b14      	ldr	r3, [pc, #80]	; (80044c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004476:	695b      	ldr	r3, [r3, #20]
 8004478:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800447c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004480:	d102      	bne.n	8004488 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d1f2      	bne.n	800446e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004488:	4b0f      	ldr	r3, [pc, #60]	; (80044c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800448a:	695b      	ldr	r3, [r3, #20]
 800448c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004490:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004494:	d110      	bne.n	80044b8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e00f      	b.n	80044ba <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800449a:	4b0b      	ldr	r3, [pc, #44]	; (80044c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80044a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044a6:	d007      	beq.n	80044b8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80044a8:	4b07      	ldr	r3, [pc, #28]	; (80044c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80044b0:	4a05      	ldr	r2, [pc, #20]	; (80044c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80044b6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3714      	adds	r7, #20
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr
 80044c6:	bf00      	nop
 80044c8:	40007000 	.word	0x40007000
 80044cc:	20000000 	.word	0x20000000
 80044d0:	431bde83 	.word	0x431bde83

080044d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b088      	sub	sp, #32
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d101      	bne.n	80044e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e3ca      	b.n	8004c7c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044e6:	4b97      	ldr	r3, [pc, #604]	; (8004744 <HAL_RCC_OscConfig+0x270>)
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	f003 030c 	and.w	r3, r3, #12
 80044ee:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80044f0:	4b94      	ldr	r3, [pc, #592]	; (8004744 <HAL_RCC_OscConfig+0x270>)
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	f003 0303 	and.w	r3, r3, #3
 80044f8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0310 	and.w	r3, r3, #16
 8004502:	2b00      	cmp	r3, #0
 8004504:	f000 80e4 	beq.w	80046d0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004508:	69bb      	ldr	r3, [r7, #24]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d007      	beq.n	800451e <HAL_RCC_OscConfig+0x4a>
 800450e:	69bb      	ldr	r3, [r7, #24]
 8004510:	2b0c      	cmp	r3, #12
 8004512:	f040 808b 	bne.w	800462c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	2b01      	cmp	r3, #1
 800451a:	f040 8087 	bne.w	800462c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800451e:	4b89      	ldr	r3, [pc, #548]	; (8004744 <HAL_RCC_OscConfig+0x270>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 0302 	and.w	r3, r3, #2
 8004526:	2b00      	cmp	r3, #0
 8004528:	d005      	beq.n	8004536 <HAL_RCC_OscConfig+0x62>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	699b      	ldr	r3, [r3, #24]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d101      	bne.n	8004536 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e3a2      	b.n	8004c7c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a1a      	ldr	r2, [r3, #32]
 800453a:	4b82      	ldr	r3, [pc, #520]	; (8004744 <HAL_RCC_OscConfig+0x270>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 0308 	and.w	r3, r3, #8
 8004542:	2b00      	cmp	r3, #0
 8004544:	d004      	beq.n	8004550 <HAL_RCC_OscConfig+0x7c>
 8004546:	4b7f      	ldr	r3, [pc, #508]	; (8004744 <HAL_RCC_OscConfig+0x270>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800454e:	e005      	b.n	800455c <HAL_RCC_OscConfig+0x88>
 8004550:	4b7c      	ldr	r3, [pc, #496]	; (8004744 <HAL_RCC_OscConfig+0x270>)
 8004552:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004556:	091b      	lsrs	r3, r3, #4
 8004558:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800455c:	4293      	cmp	r3, r2
 800455e:	d223      	bcs.n	80045a8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6a1b      	ldr	r3, [r3, #32]
 8004564:	4618      	mov	r0, r3
 8004566:	f000 fd55 	bl	8005014 <RCC_SetFlashLatencyFromMSIRange>
 800456a:	4603      	mov	r3, r0
 800456c:	2b00      	cmp	r3, #0
 800456e:	d001      	beq.n	8004574 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e383      	b.n	8004c7c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004574:	4b73      	ldr	r3, [pc, #460]	; (8004744 <HAL_RCC_OscConfig+0x270>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a72      	ldr	r2, [pc, #456]	; (8004744 <HAL_RCC_OscConfig+0x270>)
 800457a:	f043 0308 	orr.w	r3, r3, #8
 800457e:	6013      	str	r3, [r2, #0]
 8004580:	4b70      	ldr	r3, [pc, #448]	; (8004744 <HAL_RCC_OscConfig+0x270>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a1b      	ldr	r3, [r3, #32]
 800458c:	496d      	ldr	r1, [pc, #436]	; (8004744 <HAL_RCC_OscConfig+0x270>)
 800458e:	4313      	orrs	r3, r2
 8004590:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004592:	4b6c      	ldr	r3, [pc, #432]	; (8004744 <HAL_RCC_OscConfig+0x270>)
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	69db      	ldr	r3, [r3, #28]
 800459e:	021b      	lsls	r3, r3, #8
 80045a0:	4968      	ldr	r1, [pc, #416]	; (8004744 <HAL_RCC_OscConfig+0x270>)
 80045a2:	4313      	orrs	r3, r2
 80045a4:	604b      	str	r3, [r1, #4]
 80045a6:	e025      	b.n	80045f4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045a8:	4b66      	ldr	r3, [pc, #408]	; (8004744 <HAL_RCC_OscConfig+0x270>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a65      	ldr	r2, [pc, #404]	; (8004744 <HAL_RCC_OscConfig+0x270>)
 80045ae:	f043 0308 	orr.w	r3, r3, #8
 80045b2:	6013      	str	r3, [r2, #0]
 80045b4:	4b63      	ldr	r3, [pc, #396]	; (8004744 <HAL_RCC_OscConfig+0x270>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6a1b      	ldr	r3, [r3, #32]
 80045c0:	4960      	ldr	r1, [pc, #384]	; (8004744 <HAL_RCC_OscConfig+0x270>)
 80045c2:	4313      	orrs	r3, r2
 80045c4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80045c6:	4b5f      	ldr	r3, [pc, #380]	; (8004744 <HAL_RCC_OscConfig+0x270>)
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	69db      	ldr	r3, [r3, #28]
 80045d2:	021b      	lsls	r3, r3, #8
 80045d4:	495b      	ldr	r1, [pc, #364]	; (8004744 <HAL_RCC_OscConfig+0x270>)
 80045d6:	4313      	orrs	r3, r2
 80045d8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80045da:	69bb      	ldr	r3, [r7, #24]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d109      	bne.n	80045f4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6a1b      	ldr	r3, [r3, #32]
 80045e4:	4618      	mov	r0, r3
 80045e6:	f000 fd15 	bl	8005014 <RCC_SetFlashLatencyFromMSIRange>
 80045ea:	4603      	mov	r3, r0
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d001      	beq.n	80045f4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e343      	b.n	8004c7c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80045f4:	f000 fc4a 	bl	8004e8c <HAL_RCC_GetSysClockFreq>
 80045f8:	4602      	mov	r2, r0
 80045fa:	4b52      	ldr	r3, [pc, #328]	; (8004744 <HAL_RCC_OscConfig+0x270>)
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	091b      	lsrs	r3, r3, #4
 8004600:	f003 030f 	and.w	r3, r3, #15
 8004604:	4950      	ldr	r1, [pc, #320]	; (8004748 <HAL_RCC_OscConfig+0x274>)
 8004606:	5ccb      	ldrb	r3, [r1, r3]
 8004608:	f003 031f 	and.w	r3, r3, #31
 800460c:	fa22 f303 	lsr.w	r3, r2, r3
 8004610:	4a4e      	ldr	r2, [pc, #312]	; (800474c <HAL_RCC_OscConfig+0x278>)
 8004612:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004614:	4b4e      	ldr	r3, [pc, #312]	; (8004750 <HAL_RCC_OscConfig+0x27c>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4618      	mov	r0, r3
 800461a:	f7fd ff67 	bl	80024ec <HAL_InitTick>
 800461e:	4603      	mov	r3, r0
 8004620:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004622:	7bfb      	ldrb	r3, [r7, #15]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d052      	beq.n	80046ce <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004628:	7bfb      	ldrb	r3, [r7, #15]
 800462a:	e327      	b.n	8004c7c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	699b      	ldr	r3, [r3, #24]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d032      	beq.n	800469a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004634:	4b43      	ldr	r3, [pc, #268]	; (8004744 <HAL_RCC_OscConfig+0x270>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a42      	ldr	r2, [pc, #264]	; (8004744 <HAL_RCC_OscConfig+0x270>)
 800463a:	f043 0301 	orr.w	r3, r3, #1
 800463e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004640:	f7fd ffa4 	bl	800258c <HAL_GetTick>
 8004644:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004646:	e008      	b.n	800465a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004648:	f7fd ffa0 	bl	800258c <HAL_GetTick>
 800464c:	4602      	mov	r2, r0
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	2b02      	cmp	r3, #2
 8004654:	d901      	bls.n	800465a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004656:	2303      	movs	r3, #3
 8004658:	e310      	b.n	8004c7c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800465a:	4b3a      	ldr	r3, [pc, #232]	; (8004744 <HAL_RCC_OscConfig+0x270>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 0302 	and.w	r3, r3, #2
 8004662:	2b00      	cmp	r3, #0
 8004664:	d0f0      	beq.n	8004648 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004666:	4b37      	ldr	r3, [pc, #220]	; (8004744 <HAL_RCC_OscConfig+0x270>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a36      	ldr	r2, [pc, #216]	; (8004744 <HAL_RCC_OscConfig+0x270>)
 800466c:	f043 0308 	orr.w	r3, r3, #8
 8004670:	6013      	str	r3, [r2, #0]
 8004672:	4b34      	ldr	r3, [pc, #208]	; (8004744 <HAL_RCC_OscConfig+0x270>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a1b      	ldr	r3, [r3, #32]
 800467e:	4931      	ldr	r1, [pc, #196]	; (8004744 <HAL_RCC_OscConfig+0x270>)
 8004680:	4313      	orrs	r3, r2
 8004682:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004684:	4b2f      	ldr	r3, [pc, #188]	; (8004744 <HAL_RCC_OscConfig+0x270>)
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	69db      	ldr	r3, [r3, #28]
 8004690:	021b      	lsls	r3, r3, #8
 8004692:	492c      	ldr	r1, [pc, #176]	; (8004744 <HAL_RCC_OscConfig+0x270>)
 8004694:	4313      	orrs	r3, r2
 8004696:	604b      	str	r3, [r1, #4]
 8004698:	e01a      	b.n	80046d0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800469a:	4b2a      	ldr	r3, [pc, #168]	; (8004744 <HAL_RCC_OscConfig+0x270>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a29      	ldr	r2, [pc, #164]	; (8004744 <HAL_RCC_OscConfig+0x270>)
 80046a0:	f023 0301 	bic.w	r3, r3, #1
 80046a4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80046a6:	f7fd ff71 	bl	800258c <HAL_GetTick>
 80046aa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80046ac:	e008      	b.n	80046c0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80046ae:	f7fd ff6d 	bl	800258c <HAL_GetTick>
 80046b2:	4602      	mov	r2, r0
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	1ad3      	subs	r3, r2, r3
 80046b8:	2b02      	cmp	r3, #2
 80046ba:	d901      	bls.n	80046c0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80046bc:	2303      	movs	r3, #3
 80046be:	e2dd      	b.n	8004c7c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80046c0:	4b20      	ldr	r3, [pc, #128]	; (8004744 <HAL_RCC_OscConfig+0x270>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 0302 	and.w	r3, r3, #2
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d1f0      	bne.n	80046ae <HAL_RCC_OscConfig+0x1da>
 80046cc:	e000      	b.n	80046d0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80046ce:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0301 	and.w	r3, r3, #1
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d074      	beq.n	80047c6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80046dc:	69bb      	ldr	r3, [r7, #24]
 80046de:	2b08      	cmp	r3, #8
 80046e0:	d005      	beq.n	80046ee <HAL_RCC_OscConfig+0x21a>
 80046e2:	69bb      	ldr	r3, [r7, #24]
 80046e4:	2b0c      	cmp	r3, #12
 80046e6:	d10e      	bne.n	8004706 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	2b03      	cmp	r3, #3
 80046ec:	d10b      	bne.n	8004706 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046ee:	4b15      	ldr	r3, [pc, #84]	; (8004744 <HAL_RCC_OscConfig+0x270>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d064      	beq.n	80047c4 <HAL_RCC_OscConfig+0x2f0>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d160      	bne.n	80047c4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e2ba      	b.n	8004c7c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800470e:	d106      	bne.n	800471e <HAL_RCC_OscConfig+0x24a>
 8004710:	4b0c      	ldr	r3, [pc, #48]	; (8004744 <HAL_RCC_OscConfig+0x270>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a0b      	ldr	r2, [pc, #44]	; (8004744 <HAL_RCC_OscConfig+0x270>)
 8004716:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800471a:	6013      	str	r3, [r2, #0]
 800471c:	e026      	b.n	800476c <HAL_RCC_OscConfig+0x298>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004726:	d115      	bne.n	8004754 <HAL_RCC_OscConfig+0x280>
 8004728:	4b06      	ldr	r3, [pc, #24]	; (8004744 <HAL_RCC_OscConfig+0x270>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a05      	ldr	r2, [pc, #20]	; (8004744 <HAL_RCC_OscConfig+0x270>)
 800472e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004732:	6013      	str	r3, [r2, #0]
 8004734:	4b03      	ldr	r3, [pc, #12]	; (8004744 <HAL_RCC_OscConfig+0x270>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a02      	ldr	r2, [pc, #8]	; (8004744 <HAL_RCC_OscConfig+0x270>)
 800473a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800473e:	6013      	str	r3, [r2, #0]
 8004740:	e014      	b.n	800476c <HAL_RCC_OscConfig+0x298>
 8004742:	bf00      	nop
 8004744:	40021000 	.word	0x40021000
 8004748:	0801103c 	.word	0x0801103c
 800474c:	20000000 	.word	0x20000000
 8004750:	20000004 	.word	0x20000004
 8004754:	4ba0      	ldr	r3, [pc, #640]	; (80049d8 <HAL_RCC_OscConfig+0x504>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a9f      	ldr	r2, [pc, #636]	; (80049d8 <HAL_RCC_OscConfig+0x504>)
 800475a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800475e:	6013      	str	r3, [r2, #0]
 8004760:	4b9d      	ldr	r3, [pc, #628]	; (80049d8 <HAL_RCC_OscConfig+0x504>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a9c      	ldr	r2, [pc, #624]	; (80049d8 <HAL_RCC_OscConfig+0x504>)
 8004766:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800476a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d013      	beq.n	800479c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004774:	f7fd ff0a 	bl	800258c <HAL_GetTick>
 8004778:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800477a:	e008      	b.n	800478e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800477c:	f7fd ff06 	bl	800258c <HAL_GetTick>
 8004780:	4602      	mov	r2, r0
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	1ad3      	subs	r3, r2, r3
 8004786:	2b64      	cmp	r3, #100	; 0x64
 8004788:	d901      	bls.n	800478e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800478a:	2303      	movs	r3, #3
 800478c:	e276      	b.n	8004c7c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800478e:	4b92      	ldr	r3, [pc, #584]	; (80049d8 <HAL_RCC_OscConfig+0x504>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d0f0      	beq.n	800477c <HAL_RCC_OscConfig+0x2a8>
 800479a:	e014      	b.n	80047c6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800479c:	f7fd fef6 	bl	800258c <HAL_GetTick>
 80047a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80047a2:	e008      	b.n	80047b6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047a4:	f7fd fef2 	bl	800258c <HAL_GetTick>
 80047a8:	4602      	mov	r2, r0
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	2b64      	cmp	r3, #100	; 0x64
 80047b0:	d901      	bls.n	80047b6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80047b2:	2303      	movs	r3, #3
 80047b4:	e262      	b.n	8004c7c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80047b6:	4b88      	ldr	r3, [pc, #544]	; (80049d8 <HAL_RCC_OscConfig+0x504>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d1f0      	bne.n	80047a4 <HAL_RCC_OscConfig+0x2d0>
 80047c2:	e000      	b.n	80047c6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 0302 	and.w	r3, r3, #2
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d060      	beq.n	8004894 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80047d2:	69bb      	ldr	r3, [r7, #24]
 80047d4:	2b04      	cmp	r3, #4
 80047d6:	d005      	beq.n	80047e4 <HAL_RCC_OscConfig+0x310>
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	2b0c      	cmp	r3, #12
 80047dc:	d119      	bne.n	8004812 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	2b02      	cmp	r3, #2
 80047e2:	d116      	bne.n	8004812 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047e4:	4b7c      	ldr	r3, [pc, #496]	; (80049d8 <HAL_RCC_OscConfig+0x504>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d005      	beq.n	80047fc <HAL_RCC_OscConfig+0x328>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d101      	bne.n	80047fc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e23f      	b.n	8004c7c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047fc:	4b76      	ldr	r3, [pc, #472]	; (80049d8 <HAL_RCC_OscConfig+0x504>)
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	691b      	ldr	r3, [r3, #16]
 8004808:	061b      	lsls	r3, r3, #24
 800480a:	4973      	ldr	r1, [pc, #460]	; (80049d8 <HAL_RCC_OscConfig+0x504>)
 800480c:	4313      	orrs	r3, r2
 800480e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004810:	e040      	b.n	8004894 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d023      	beq.n	8004862 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800481a:	4b6f      	ldr	r3, [pc, #444]	; (80049d8 <HAL_RCC_OscConfig+0x504>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a6e      	ldr	r2, [pc, #440]	; (80049d8 <HAL_RCC_OscConfig+0x504>)
 8004820:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004824:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004826:	f7fd feb1 	bl	800258c <HAL_GetTick>
 800482a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800482c:	e008      	b.n	8004840 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800482e:	f7fd fead 	bl	800258c <HAL_GetTick>
 8004832:	4602      	mov	r2, r0
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	1ad3      	subs	r3, r2, r3
 8004838:	2b02      	cmp	r3, #2
 800483a:	d901      	bls.n	8004840 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800483c:	2303      	movs	r3, #3
 800483e:	e21d      	b.n	8004c7c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004840:	4b65      	ldr	r3, [pc, #404]	; (80049d8 <HAL_RCC_OscConfig+0x504>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004848:	2b00      	cmp	r3, #0
 800484a:	d0f0      	beq.n	800482e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800484c:	4b62      	ldr	r3, [pc, #392]	; (80049d8 <HAL_RCC_OscConfig+0x504>)
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	691b      	ldr	r3, [r3, #16]
 8004858:	061b      	lsls	r3, r3, #24
 800485a:	495f      	ldr	r1, [pc, #380]	; (80049d8 <HAL_RCC_OscConfig+0x504>)
 800485c:	4313      	orrs	r3, r2
 800485e:	604b      	str	r3, [r1, #4]
 8004860:	e018      	b.n	8004894 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004862:	4b5d      	ldr	r3, [pc, #372]	; (80049d8 <HAL_RCC_OscConfig+0x504>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a5c      	ldr	r2, [pc, #368]	; (80049d8 <HAL_RCC_OscConfig+0x504>)
 8004868:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800486c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800486e:	f7fd fe8d 	bl	800258c <HAL_GetTick>
 8004872:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004874:	e008      	b.n	8004888 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004876:	f7fd fe89 	bl	800258c <HAL_GetTick>
 800487a:	4602      	mov	r2, r0
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	2b02      	cmp	r3, #2
 8004882:	d901      	bls.n	8004888 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004884:	2303      	movs	r3, #3
 8004886:	e1f9      	b.n	8004c7c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004888:	4b53      	ldr	r3, [pc, #332]	; (80049d8 <HAL_RCC_OscConfig+0x504>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004890:	2b00      	cmp	r3, #0
 8004892:	d1f0      	bne.n	8004876 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 0308 	and.w	r3, r3, #8
 800489c:	2b00      	cmp	r3, #0
 800489e:	d03c      	beq.n	800491a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	695b      	ldr	r3, [r3, #20]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d01c      	beq.n	80048e2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048a8:	4b4b      	ldr	r3, [pc, #300]	; (80049d8 <HAL_RCC_OscConfig+0x504>)
 80048aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048ae:	4a4a      	ldr	r2, [pc, #296]	; (80049d8 <HAL_RCC_OscConfig+0x504>)
 80048b0:	f043 0301 	orr.w	r3, r3, #1
 80048b4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048b8:	f7fd fe68 	bl	800258c <HAL_GetTick>
 80048bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80048be:	e008      	b.n	80048d2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048c0:	f7fd fe64 	bl	800258c <HAL_GetTick>
 80048c4:	4602      	mov	r2, r0
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	1ad3      	subs	r3, r2, r3
 80048ca:	2b02      	cmp	r3, #2
 80048cc:	d901      	bls.n	80048d2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80048ce:	2303      	movs	r3, #3
 80048d0:	e1d4      	b.n	8004c7c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80048d2:	4b41      	ldr	r3, [pc, #260]	; (80049d8 <HAL_RCC_OscConfig+0x504>)
 80048d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048d8:	f003 0302 	and.w	r3, r3, #2
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d0ef      	beq.n	80048c0 <HAL_RCC_OscConfig+0x3ec>
 80048e0:	e01b      	b.n	800491a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048e2:	4b3d      	ldr	r3, [pc, #244]	; (80049d8 <HAL_RCC_OscConfig+0x504>)
 80048e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048e8:	4a3b      	ldr	r2, [pc, #236]	; (80049d8 <HAL_RCC_OscConfig+0x504>)
 80048ea:	f023 0301 	bic.w	r3, r3, #1
 80048ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048f2:	f7fd fe4b 	bl	800258c <HAL_GetTick>
 80048f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80048f8:	e008      	b.n	800490c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048fa:	f7fd fe47 	bl	800258c <HAL_GetTick>
 80048fe:	4602      	mov	r2, r0
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	2b02      	cmp	r3, #2
 8004906:	d901      	bls.n	800490c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004908:	2303      	movs	r3, #3
 800490a:	e1b7      	b.n	8004c7c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800490c:	4b32      	ldr	r3, [pc, #200]	; (80049d8 <HAL_RCC_OscConfig+0x504>)
 800490e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004912:	f003 0302 	and.w	r3, r3, #2
 8004916:	2b00      	cmp	r3, #0
 8004918:	d1ef      	bne.n	80048fa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 0304 	and.w	r3, r3, #4
 8004922:	2b00      	cmp	r3, #0
 8004924:	f000 80a6 	beq.w	8004a74 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004928:	2300      	movs	r3, #0
 800492a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800492c:	4b2a      	ldr	r3, [pc, #168]	; (80049d8 <HAL_RCC_OscConfig+0x504>)
 800492e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004930:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004934:	2b00      	cmp	r3, #0
 8004936:	d10d      	bne.n	8004954 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004938:	4b27      	ldr	r3, [pc, #156]	; (80049d8 <HAL_RCC_OscConfig+0x504>)
 800493a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800493c:	4a26      	ldr	r2, [pc, #152]	; (80049d8 <HAL_RCC_OscConfig+0x504>)
 800493e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004942:	6593      	str	r3, [r2, #88]	; 0x58
 8004944:	4b24      	ldr	r3, [pc, #144]	; (80049d8 <HAL_RCC_OscConfig+0x504>)
 8004946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004948:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800494c:	60bb      	str	r3, [r7, #8]
 800494e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004950:	2301      	movs	r3, #1
 8004952:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004954:	4b21      	ldr	r3, [pc, #132]	; (80049dc <HAL_RCC_OscConfig+0x508>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800495c:	2b00      	cmp	r3, #0
 800495e:	d118      	bne.n	8004992 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004960:	4b1e      	ldr	r3, [pc, #120]	; (80049dc <HAL_RCC_OscConfig+0x508>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a1d      	ldr	r2, [pc, #116]	; (80049dc <HAL_RCC_OscConfig+0x508>)
 8004966:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800496a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800496c:	f7fd fe0e 	bl	800258c <HAL_GetTick>
 8004970:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004972:	e008      	b.n	8004986 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004974:	f7fd fe0a 	bl	800258c <HAL_GetTick>
 8004978:	4602      	mov	r2, r0
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	2b02      	cmp	r3, #2
 8004980:	d901      	bls.n	8004986 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e17a      	b.n	8004c7c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004986:	4b15      	ldr	r3, [pc, #84]	; (80049dc <HAL_RCC_OscConfig+0x508>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800498e:	2b00      	cmp	r3, #0
 8004990:	d0f0      	beq.n	8004974 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	2b01      	cmp	r3, #1
 8004998:	d108      	bne.n	80049ac <HAL_RCC_OscConfig+0x4d8>
 800499a:	4b0f      	ldr	r3, [pc, #60]	; (80049d8 <HAL_RCC_OscConfig+0x504>)
 800499c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049a0:	4a0d      	ldr	r2, [pc, #52]	; (80049d8 <HAL_RCC_OscConfig+0x504>)
 80049a2:	f043 0301 	orr.w	r3, r3, #1
 80049a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80049aa:	e029      	b.n	8004a00 <HAL_RCC_OscConfig+0x52c>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	2b05      	cmp	r3, #5
 80049b2:	d115      	bne.n	80049e0 <HAL_RCC_OscConfig+0x50c>
 80049b4:	4b08      	ldr	r3, [pc, #32]	; (80049d8 <HAL_RCC_OscConfig+0x504>)
 80049b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ba:	4a07      	ldr	r2, [pc, #28]	; (80049d8 <HAL_RCC_OscConfig+0x504>)
 80049bc:	f043 0304 	orr.w	r3, r3, #4
 80049c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80049c4:	4b04      	ldr	r3, [pc, #16]	; (80049d8 <HAL_RCC_OscConfig+0x504>)
 80049c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ca:	4a03      	ldr	r2, [pc, #12]	; (80049d8 <HAL_RCC_OscConfig+0x504>)
 80049cc:	f043 0301 	orr.w	r3, r3, #1
 80049d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80049d4:	e014      	b.n	8004a00 <HAL_RCC_OscConfig+0x52c>
 80049d6:	bf00      	nop
 80049d8:	40021000 	.word	0x40021000
 80049dc:	40007000 	.word	0x40007000
 80049e0:	4b9c      	ldr	r3, [pc, #624]	; (8004c54 <HAL_RCC_OscConfig+0x780>)
 80049e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049e6:	4a9b      	ldr	r2, [pc, #620]	; (8004c54 <HAL_RCC_OscConfig+0x780>)
 80049e8:	f023 0301 	bic.w	r3, r3, #1
 80049ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80049f0:	4b98      	ldr	r3, [pc, #608]	; (8004c54 <HAL_RCC_OscConfig+0x780>)
 80049f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049f6:	4a97      	ldr	r2, [pc, #604]	; (8004c54 <HAL_RCC_OscConfig+0x780>)
 80049f8:	f023 0304 	bic.w	r3, r3, #4
 80049fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d016      	beq.n	8004a36 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a08:	f7fd fdc0 	bl	800258c <HAL_GetTick>
 8004a0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a0e:	e00a      	b.n	8004a26 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a10:	f7fd fdbc 	bl	800258c <HAL_GetTick>
 8004a14:	4602      	mov	r2, r0
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d901      	bls.n	8004a26 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004a22:	2303      	movs	r3, #3
 8004a24:	e12a      	b.n	8004c7c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a26:	4b8b      	ldr	r3, [pc, #556]	; (8004c54 <HAL_RCC_OscConfig+0x780>)
 8004a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a2c:	f003 0302 	and.w	r3, r3, #2
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d0ed      	beq.n	8004a10 <HAL_RCC_OscConfig+0x53c>
 8004a34:	e015      	b.n	8004a62 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a36:	f7fd fda9 	bl	800258c <HAL_GetTick>
 8004a3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a3c:	e00a      	b.n	8004a54 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a3e:	f7fd fda5 	bl	800258c <HAL_GetTick>
 8004a42:	4602      	mov	r2, r0
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	1ad3      	subs	r3, r2, r3
 8004a48:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d901      	bls.n	8004a54 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004a50:	2303      	movs	r3, #3
 8004a52:	e113      	b.n	8004c7c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a54:	4b7f      	ldr	r3, [pc, #508]	; (8004c54 <HAL_RCC_OscConfig+0x780>)
 8004a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a5a:	f003 0302 	and.w	r3, r3, #2
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d1ed      	bne.n	8004a3e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a62:	7ffb      	ldrb	r3, [r7, #31]
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	d105      	bne.n	8004a74 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a68:	4b7a      	ldr	r3, [pc, #488]	; (8004c54 <HAL_RCC_OscConfig+0x780>)
 8004a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a6c:	4a79      	ldr	r2, [pc, #484]	; (8004c54 <HAL_RCC_OscConfig+0x780>)
 8004a6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a72:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	f000 80fe 	beq.w	8004c7a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a82:	2b02      	cmp	r3, #2
 8004a84:	f040 80d0 	bne.w	8004c28 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004a88:	4b72      	ldr	r3, [pc, #456]	; (8004c54 <HAL_RCC_OscConfig+0x780>)
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	f003 0203 	and.w	r2, r3, #3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d130      	bne.n	8004afe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa6:	3b01      	subs	r3, #1
 8004aa8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d127      	bne.n	8004afe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ab8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d11f      	bne.n	8004afe <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004ac8:	2a07      	cmp	r2, #7
 8004aca:	bf14      	ite	ne
 8004acc:	2201      	movne	r2, #1
 8004ace:	2200      	moveq	r2, #0
 8004ad0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d113      	bne.n	8004afe <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ae0:	085b      	lsrs	r3, r3, #1
 8004ae2:	3b01      	subs	r3, #1
 8004ae4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d109      	bne.n	8004afe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af4:	085b      	lsrs	r3, r3, #1
 8004af6:	3b01      	subs	r3, #1
 8004af8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d06e      	beq.n	8004bdc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004afe:	69bb      	ldr	r3, [r7, #24]
 8004b00:	2b0c      	cmp	r3, #12
 8004b02:	d069      	beq.n	8004bd8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004b04:	4b53      	ldr	r3, [pc, #332]	; (8004c54 <HAL_RCC_OscConfig+0x780>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d105      	bne.n	8004b1c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004b10:	4b50      	ldr	r3, [pc, #320]	; (8004c54 <HAL_RCC_OscConfig+0x780>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d001      	beq.n	8004b20 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e0ad      	b.n	8004c7c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004b20:	4b4c      	ldr	r3, [pc, #304]	; (8004c54 <HAL_RCC_OscConfig+0x780>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a4b      	ldr	r2, [pc, #300]	; (8004c54 <HAL_RCC_OscConfig+0x780>)
 8004b26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b2a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004b2c:	f7fd fd2e 	bl	800258c <HAL_GetTick>
 8004b30:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b32:	e008      	b.n	8004b46 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b34:	f7fd fd2a 	bl	800258c <HAL_GetTick>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	2b02      	cmp	r3, #2
 8004b40:	d901      	bls.n	8004b46 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004b42:	2303      	movs	r3, #3
 8004b44:	e09a      	b.n	8004c7c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b46:	4b43      	ldr	r3, [pc, #268]	; (8004c54 <HAL_RCC_OscConfig+0x780>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d1f0      	bne.n	8004b34 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b52:	4b40      	ldr	r3, [pc, #256]	; (8004c54 <HAL_RCC_OscConfig+0x780>)
 8004b54:	68da      	ldr	r2, [r3, #12]
 8004b56:	4b40      	ldr	r3, [pc, #256]	; (8004c58 <HAL_RCC_OscConfig+0x784>)
 8004b58:	4013      	ands	r3, r2
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004b62:	3a01      	subs	r2, #1
 8004b64:	0112      	lsls	r2, r2, #4
 8004b66:	4311      	orrs	r1, r2
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004b6c:	0212      	lsls	r2, r2, #8
 8004b6e:	4311      	orrs	r1, r2
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004b74:	0852      	lsrs	r2, r2, #1
 8004b76:	3a01      	subs	r2, #1
 8004b78:	0552      	lsls	r2, r2, #21
 8004b7a:	4311      	orrs	r1, r2
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004b80:	0852      	lsrs	r2, r2, #1
 8004b82:	3a01      	subs	r2, #1
 8004b84:	0652      	lsls	r2, r2, #25
 8004b86:	4311      	orrs	r1, r2
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004b8c:	0912      	lsrs	r2, r2, #4
 8004b8e:	0452      	lsls	r2, r2, #17
 8004b90:	430a      	orrs	r2, r1
 8004b92:	4930      	ldr	r1, [pc, #192]	; (8004c54 <HAL_RCC_OscConfig+0x780>)
 8004b94:	4313      	orrs	r3, r2
 8004b96:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004b98:	4b2e      	ldr	r3, [pc, #184]	; (8004c54 <HAL_RCC_OscConfig+0x780>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a2d      	ldr	r2, [pc, #180]	; (8004c54 <HAL_RCC_OscConfig+0x780>)
 8004b9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ba2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004ba4:	4b2b      	ldr	r3, [pc, #172]	; (8004c54 <HAL_RCC_OscConfig+0x780>)
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	4a2a      	ldr	r2, [pc, #168]	; (8004c54 <HAL_RCC_OscConfig+0x780>)
 8004baa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bae:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004bb0:	f7fd fcec 	bl	800258c <HAL_GetTick>
 8004bb4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bb6:	e008      	b.n	8004bca <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bb8:	f7fd fce8 	bl	800258c <HAL_GetTick>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	2b02      	cmp	r3, #2
 8004bc4:	d901      	bls.n	8004bca <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	e058      	b.n	8004c7c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bca:	4b22      	ldr	r3, [pc, #136]	; (8004c54 <HAL_RCC_OscConfig+0x780>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d0f0      	beq.n	8004bb8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004bd6:	e050      	b.n	8004c7a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e04f      	b.n	8004c7c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bdc:	4b1d      	ldr	r3, [pc, #116]	; (8004c54 <HAL_RCC_OscConfig+0x780>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d148      	bne.n	8004c7a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004be8:	4b1a      	ldr	r3, [pc, #104]	; (8004c54 <HAL_RCC_OscConfig+0x780>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a19      	ldr	r2, [pc, #100]	; (8004c54 <HAL_RCC_OscConfig+0x780>)
 8004bee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bf2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004bf4:	4b17      	ldr	r3, [pc, #92]	; (8004c54 <HAL_RCC_OscConfig+0x780>)
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	4a16      	ldr	r2, [pc, #88]	; (8004c54 <HAL_RCC_OscConfig+0x780>)
 8004bfa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bfe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004c00:	f7fd fcc4 	bl	800258c <HAL_GetTick>
 8004c04:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c06:	e008      	b.n	8004c1a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c08:	f7fd fcc0 	bl	800258c <HAL_GetTick>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	2b02      	cmp	r3, #2
 8004c14:	d901      	bls.n	8004c1a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004c16:	2303      	movs	r3, #3
 8004c18:	e030      	b.n	8004c7c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c1a:	4b0e      	ldr	r3, [pc, #56]	; (8004c54 <HAL_RCC_OscConfig+0x780>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d0f0      	beq.n	8004c08 <HAL_RCC_OscConfig+0x734>
 8004c26:	e028      	b.n	8004c7a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	2b0c      	cmp	r3, #12
 8004c2c:	d023      	beq.n	8004c76 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c2e:	4b09      	ldr	r3, [pc, #36]	; (8004c54 <HAL_RCC_OscConfig+0x780>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a08      	ldr	r2, [pc, #32]	; (8004c54 <HAL_RCC_OscConfig+0x780>)
 8004c34:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c3a:	f7fd fca7 	bl	800258c <HAL_GetTick>
 8004c3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c40:	e00c      	b.n	8004c5c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c42:	f7fd fca3 	bl	800258c <HAL_GetTick>
 8004c46:	4602      	mov	r2, r0
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	2b02      	cmp	r3, #2
 8004c4e:	d905      	bls.n	8004c5c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004c50:	2303      	movs	r3, #3
 8004c52:	e013      	b.n	8004c7c <HAL_RCC_OscConfig+0x7a8>
 8004c54:	40021000 	.word	0x40021000
 8004c58:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c5c:	4b09      	ldr	r3, [pc, #36]	; (8004c84 <HAL_RCC_OscConfig+0x7b0>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d1ec      	bne.n	8004c42 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004c68:	4b06      	ldr	r3, [pc, #24]	; (8004c84 <HAL_RCC_OscConfig+0x7b0>)
 8004c6a:	68da      	ldr	r2, [r3, #12]
 8004c6c:	4905      	ldr	r1, [pc, #20]	; (8004c84 <HAL_RCC_OscConfig+0x7b0>)
 8004c6e:	4b06      	ldr	r3, [pc, #24]	; (8004c88 <HAL_RCC_OscConfig+0x7b4>)
 8004c70:	4013      	ands	r3, r2
 8004c72:	60cb      	str	r3, [r1, #12]
 8004c74:	e001      	b.n	8004c7a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e000      	b.n	8004c7c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004c7a:	2300      	movs	r3, #0
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3720      	adds	r7, #32
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}
 8004c84:	40021000 	.word	0x40021000
 8004c88:	feeefffc 	.word	0xfeeefffc

08004c8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d101      	bne.n	8004ca0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e0e7      	b.n	8004e70 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ca0:	4b75      	ldr	r3, [pc, #468]	; (8004e78 <HAL_RCC_ClockConfig+0x1ec>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 0307 	and.w	r3, r3, #7
 8004ca8:	683a      	ldr	r2, [r7, #0]
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d910      	bls.n	8004cd0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cae:	4b72      	ldr	r3, [pc, #456]	; (8004e78 <HAL_RCC_ClockConfig+0x1ec>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f023 0207 	bic.w	r2, r3, #7
 8004cb6:	4970      	ldr	r1, [pc, #448]	; (8004e78 <HAL_RCC_ClockConfig+0x1ec>)
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cbe:	4b6e      	ldr	r3, [pc, #440]	; (8004e78 <HAL_RCC_ClockConfig+0x1ec>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 0307 	and.w	r3, r3, #7
 8004cc6:	683a      	ldr	r2, [r7, #0]
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d001      	beq.n	8004cd0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e0cf      	b.n	8004e70 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 0302 	and.w	r3, r3, #2
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d010      	beq.n	8004cfe <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	689a      	ldr	r2, [r3, #8]
 8004ce0:	4b66      	ldr	r3, [pc, #408]	; (8004e7c <HAL_RCC_ClockConfig+0x1f0>)
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d908      	bls.n	8004cfe <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cec:	4b63      	ldr	r3, [pc, #396]	; (8004e7c <HAL_RCC_ClockConfig+0x1f0>)
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	4960      	ldr	r1, [pc, #384]	; (8004e7c <HAL_RCC_ClockConfig+0x1f0>)
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 0301 	and.w	r3, r3, #1
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d04c      	beq.n	8004da4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	2b03      	cmp	r3, #3
 8004d10:	d107      	bne.n	8004d22 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d12:	4b5a      	ldr	r3, [pc, #360]	; (8004e7c <HAL_RCC_ClockConfig+0x1f0>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d121      	bne.n	8004d62 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e0a6      	b.n	8004e70 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	2b02      	cmp	r3, #2
 8004d28:	d107      	bne.n	8004d3a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d2a:	4b54      	ldr	r3, [pc, #336]	; (8004e7c <HAL_RCC_ClockConfig+0x1f0>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d115      	bne.n	8004d62 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e09a      	b.n	8004e70 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d107      	bne.n	8004d52 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004d42:	4b4e      	ldr	r3, [pc, #312]	; (8004e7c <HAL_RCC_ClockConfig+0x1f0>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 0302 	and.w	r3, r3, #2
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d109      	bne.n	8004d62 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e08e      	b.n	8004e70 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d52:	4b4a      	ldr	r3, [pc, #296]	; (8004e7c <HAL_RCC_ClockConfig+0x1f0>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d101      	bne.n	8004d62 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e086      	b.n	8004e70 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004d62:	4b46      	ldr	r3, [pc, #280]	; (8004e7c <HAL_RCC_ClockConfig+0x1f0>)
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	f023 0203 	bic.w	r2, r3, #3
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	4943      	ldr	r1, [pc, #268]	; (8004e7c <HAL_RCC_ClockConfig+0x1f0>)
 8004d70:	4313      	orrs	r3, r2
 8004d72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d74:	f7fd fc0a 	bl	800258c <HAL_GetTick>
 8004d78:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d7a:	e00a      	b.n	8004d92 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d7c:	f7fd fc06 	bl	800258c <HAL_GetTick>
 8004d80:	4602      	mov	r2, r0
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d901      	bls.n	8004d92 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e06e      	b.n	8004e70 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d92:	4b3a      	ldr	r3, [pc, #232]	; (8004e7c <HAL_RCC_ClockConfig+0x1f0>)
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	f003 020c 	and.w	r2, r3, #12
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d1eb      	bne.n	8004d7c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f003 0302 	and.w	r3, r3, #2
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d010      	beq.n	8004dd2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	689a      	ldr	r2, [r3, #8]
 8004db4:	4b31      	ldr	r3, [pc, #196]	; (8004e7c <HAL_RCC_ClockConfig+0x1f0>)
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d208      	bcs.n	8004dd2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004dc0:	4b2e      	ldr	r3, [pc, #184]	; (8004e7c <HAL_RCC_ClockConfig+0x1f0>)
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	492b      	ldr	r1, [pc, #172]	; (8004e7c <HAL_RCC_ClockConfig+0x1f0>)
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004dd2:	4b29      	ldr	r3, [pc, #164]	; (8004e78 <HAL_RCC_ClockConfig+0x1ec>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f003 0307 	and.w	r3, r3, #7
 8004dda:	683a      	ldr	r2, [r7, #0]
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d210      	bcs.n	8004e02 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004de0:	4b25      	ldr	r3, [pc, #148]	; (8004e78 <HAL_RCC_ClockConfig+0x1ec>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f023 0207 	bic.w	r2, r3, #7
 8004de8:	4923      	ldr	r1, [pc, #140]	; (8004e78 <HAL_RCC_ClockConfig+0x1ec>)
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004df0:	4b21      	ldr	r3, [pc, #132]	; (8004e78 <HAL_RCC_ClockConfig+0x1ec>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 0307 	and.w	r3, r3, #7
 8004df8:	683a      	ldr	r2, [r7, #0]
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d001      	beq.n	8004e02 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e036      	b.n	8004e70 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f003 0304 	and.w	r3, r3, #4
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d008      	beq.n	8004e20 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e0e:	4b1b      	ldr	r3, [pc, #108]	; (8004e7c <HAL_RCC_ClockConfig+0x1f0>)
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	4918      	ldr	r1, [pc, #96]	; (8004e7c <HAL_RCC_ClockConfig+0x1f0>)
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f003 0308 	and.w	r3, r3, #8
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d009      	beq.n	8004e40 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e2c:	4b13      	ldr	r3, [pc, #76]	; (8004e7c <HAL_RCC_ClockConfig+0x1f0>)
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	691b      	ldr	r3, [r3, #16]
 8004e38:	00db      	lsls	r3, r3, #3
 8004e3a:	4910      	ldr	r1, [pc, #64]	; (8004e7c <HAL_RCC_ClockConfig+0x1f0>)
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004e40:	f000 f824 	bl	8004e8c <HAL_RCC_GetSysClockFreq>
 8004e44:	4602      	mov	r2, r0
 8004e46:	4b0d      	ldr	r3, [pc, #52]	; (8004e7c <HAL_RCC_ClockConfig+0x1f0>)
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	091b      	lsrs	r3, r3, #4
 8004e4c:	f003 030f 	and.w	r3, r3, #15
 8004e50:	490b      	ldr	r1, [pc, #44]	; (8004e80 <HAL_RCC_ClockConfig+0x1f4>)
 8004e52:	5ccb      	ldrb	r3, [r1, r3]
 8004e54:	f003 031f 	and.w	r3, r3, #31
 8004e58:	fa22 f303 	lsr.w	r3, r2, r3
 8004e5c:	4a09      	ldr	r2, [pc, #36]	; (8004e84 <HAL_RCC_ClockConfig+0x1f8>)
 8004e5e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004e60:	4b09      	ldr	r3, [pc, #36]	; (8004e88 <HAL_RCC_ClockConfig+0x1fc>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4618      	mov	r0, r3
 8004e66:	f7fd fb41 	bl	80024ec <HAL_InitTick>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	72fb      	strb	r3, [r7, #11]

  return status;
 8004e6e:	7afb      	ldrb	r3, [r7, #11]
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3710      	adds	r7, #16
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	40022000 	.word	0x40022000
 8004e7c:	40021000 	.word	0x40021000
 8004e80:	0801103c 	.word	0x0801103c
 8004e84:	20000000 	.word	0x20000000
 8004e88:	20000004 	.word	0x20000004

08004e8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b089      	sub	sp, #36	; 0x24
 8004e90:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004e92:	2300      	movs	r3, #0
 8004e94:	61fb      	str	r3, [r7, #28]
 8004e96:	2300      	movs	r3, #0
 8004e98:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e9a:	4b3e      	ldr	r3, [pc, #248]	; (8004f94 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	f003 030c 	and.w	r3, r3, #12
 8004ea2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ea4:	4b3b      	ldr	r3, [pc, #236]	; (8004f94 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	f003 0303 	and.w	r3, r3, #3
 8004eac:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d005      	beq.n	8004ec0 <HAL_RCC_GetSysClockFreq+0x34>
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	2b0c      	cmp	r3, #12
 8004eb8:	d121      	bne.n	8004efe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d11e      	bne.n	8004efe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004ec0:	4b34      	ldr	r3, [pc, #208]	; (8004f94 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 0308 	and.w	r3, r3, #8
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d107      	bne.n	8004edc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004ecc:	4b31      	ldr	r3, [pc, #196]	; (8004f94 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ece:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ed2:	0a1b      	lsrs	r3, r3, #8
 8004ed4:	f003 030f 	and.w	r3, r3, #15
 8004ed8:	61fb      	str	r3, [r7, #28]
 8004eda:	e005      	b.n	8004ee8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004edc:	4b2d      	ldr	r3, [pc, #180]	; (8004f94 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	091b      	lsrs	r3, r3, #4
 8004ee2:	f003 030f 	and.w	r3, r3, #15
 8004ee6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004ee8:	4a2b      	ldr	r2, [pc, #172]	; (8004f98 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ef0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d10d      	bne.n	8004f14 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004ef8:	69fb      	ldr	r3, [r7, #28]
 8004efa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004efc:	e00a      	b.n	8004f14 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	2b04      	cmp	r3, #4
 8004f02:	d102      	bne.n	8004f0a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004f04:	4b25      	ldr	r3, [pc, #148]	; (8004f9c <HAL_RCC_GetSysClockFreq+0x110>)
 8004f06:	61bb      	str	r3, [r7, #24]
 8004f08:	e004      	b.n	8004f14 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	2b08      	cmp	r3, #8
 8004f0e:	d101      	bne.n	8004f14 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004f10:	4b23      	ldr	r3, [pc, #140]	; (8004fa0 <HAL_RCC_GetSysClockFreq+0x114>)
 8004f12:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	2b0c      	cmp	r3, #12
 8004f18:	d134      	bne.n	8004f84 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004f1a:	4b1e      	ldr	r3, [pc, #120]	; (8004f94 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f1c:	68db      	ldr	r3, [r3, #12]
 8004f1e:	f003 0303 	and.w	r3, r3, #3
 8004f22:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	2b02      	cmp	r3, #2
 8004f28:	d003      	beq.n	8004f32 <HAL_RCC_GetSysClockFreq+0xa6>
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	2b03      	cmp	r3, #3
 8004f2e:	d003      	beq.n	8004f38 <HAL_RCC_GetSysClockFreq+0xac>
 8004f30:	e005      	b.n	8004f3e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004f32:	4b1a      	ldr	r3, [pc, #104]	; (8004f9c <HAL_RCC_GetSysClockFreq+0x110>)
 8004f34:	617b      	str	r3, [r7, #20]
      break;
 8004f36:	e005      	b.n	8004f44 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004f38:	4b19      	ldr	r3, [pc, #100]	; (8004fa0 <HAL_RCC_GetSysClockFreq+0x114>)
 8004f3a:	617b      	str	r3, [r7, #20]
      break;
 8004f3c:	e002      	b.n	8004f44 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004f3e:	69fb      	ldr	r3, [r7, #28]
 8004f40:	617b      	str	r3, [r7, #20]
      break;
 8004f42:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004f44:	4b13      	ldr	r3, [pc, #76]	; (8004f94 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	091b      	lsrs	r3, r3, #4
 8004f4a:	f003 0307 	and.w	r3, r3, #7
 8004f4e:	3301      	adds	r3, #1
 8004f50:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004f52:	4b10      	ldr	r3, [pc, #64]	; (8004f94 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	0a1b      	lsrs	r3, r3, #8
 8004f58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f5c:	697a      	ldr	r2, [r7, #20]
 8004f5e:	fb03 f202 	mul.w	r2, r3, r2
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f68:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004f6a:	4b0a      	ldr	r3, [pc, #40]	; (8004f94 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f6c:	68db      	ldr	r3, [r3, #12]
 8004f6e:	0e5b      	lsrs	r3, r3, #25
 8004f70:	f003 0303 	and.w	r3, r3, #3
 8004f74:	3301      	adds	r3, #1
 8004f76:	005b      	lsls	r3, r3, #1
 8004f78:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004f7a:	697a      	ldr	r2, [r7, #20]
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f82:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004f84:	69bb      	ldr	r3, [r7, #24]
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3724      	adds	r7, #36	; 0x24
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr
 8004f92:	bf00      	nop
 8004f94:	40021000 	.word	0x40021000
 8004f98:	08011054 	.word	0x08011054
 8004f9c:	00f42400 	.word	0x00f42400
 8004fa0:	007a1200 	.word	0x007a1200

08004fa4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fa8:	4b03      	ldr	r3, [pc, #12]	; (8004fb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004faa:	681b      	ldr	r3, [r3, #0]
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr
 8004fb6:	bf00      	nop
 8004fb8:	20000000 	.word	0x20000000

08004fbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004fc0:	f7ff fff0 	bl	8004fa4 <HAL_RCC_GetHCLKFreq>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	4b06      	ldr	r3, [pc, #24]	; (8004fe0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	0a1b      	lsrs	r3, r3, #8
 8004fcc:	f003 0307 	and.w	r3, r3, #7
 8004fd0:	4904      	ldr	r1, [pc, #16]	; (8004fe4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004fd2:	5ccb      	ldrb	r3, [r1, r3]
 8004fd4:	f003 031f 	and.w	r3, r3, #31
 8004fd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	bd80      	pop	{r7, pc}
 8004fe0:	40021000 	.word	0x40021000
 8004fe4:	0801104c 	.word	0x0801104c

08004fe8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004fec:	f7ff ffda 	bl	8004fa4 <HAL_RCC_GetHCLKFreq>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	4b06      	ldr	r3, [pc, #24]	; (800500c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	0adb      	lsrs	r3, r3, #11
 8004ff8:	f003 0307 	and.w	r3, r3, #7
 8004ffc:	4904      	ldr	r1, [pc, #16]	; (8005010 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004ffe:	5ccb      	ldrb	r3, [r1, r3]
 8005000:	f003 031f 	and.w	r3, r3, #31
 8005004:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005008:	4618      	mov	r0, r3
 800500a:	bd80      	pop	{r7, pc}
 800500c:	40021000 	.word	0x40021000
 8005010:	0801104c 	.word	0x0801104c

08005014 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b086      	sub	sp, #24
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800501c:	2300      	movs	r3, #0
 800501e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005020:	4b2a      	ldr	r3, [pc, #168]	; (80050cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005024:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005028:	2b00      	cmp	r3, #0
 800502a:	d003      	beq.n	8005034 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800502c:	f7ff f9ee 	bl	800440c <HAL_PWREx_GetVoltageRange>
 8005030:	6178      	str	r0, [r7, #20]
 8005032:	e014      	b.n	800505e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005034:	4b25      	ldr	r3, [pc, #148]	; (80050cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005038:	4a24      	ldr	r2, [pc, #144]	; (80050cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800503a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800503e:	6593      	str	r3, [r2, #88]	; 0x58
 8005040:	4b22      	ldr	r3, [pc, #136]	; (80050cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005044:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005048:	60fb      	str	r3, [r7, #12]
 800504a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800504c:	f7ff f9de 	bl	800440c <HAL_PWREx_GetVoltageRange>
 8005050:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005052:	4b1e      	ldr	r3, [pc, #120]	; (80050cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005056:	4a1d      	ldr	r2, [pc, #116]	; (80050cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005058:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800505c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005064:	d10b      	bne.n	800507e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2b80      	cmp	r3, #128	; 0x80
 800506a:	d919      	bls.n	80050a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2ba0      	cmp	r3, #160	; 0xa0
 8005070:	d902      	bls.n	8005078 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005072:	2302      	movs	r3, #2
 8005074:	613b      	str	r3, [r7, #16]
 8005076:	e013      	b.n	80050a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005078:	2301      	movs	r3, #1
 800507a:	613b      	str	r3, [r7, #16]
 800507c:	e010      	b.n	80050a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2b80      	cmp	r3, #128	; 0x80
 8005082:	d902      	bls.n	800508a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005084:	2303      	movs	r3, #3
 8005086:	613b      	str	r3, [r7, #16]
 8005088:	e00a      	b.n	80050a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2b80      	cmp	r3, #128	; 0x80
 800508e:	d102      	bne.n	8005096 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005090:	2302      	movs	r3, #2
 8005092:	613b      	str	r3, [r7, #16]
 8005094:	e004      	b.n	80050a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2b70      	cmp	r3, #112	; 0x70
 800509a:	d101      	bne.n	80050a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800509c:	2301      	movs	r3, #1
 800509e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80050a0:	4b0b      	ldr	r3, [pc, #44]	; (80050d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f023 0207 	bic.w	r2, r3, #7
 80050a8:	4909      	ldr	r1, [pc, #36]	; (80050d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	4313      	orrs	r3, r2
 80050ae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80050b0:	4b07      	ldr	r3, [pc, #28]	; (80050d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f003 0307 	and.w	r3, r3, #7
 80050b8:	693a      	ldr	r2, [r7, #16]
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d001      	beq.n	80050c2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e000      	b.n	80050c4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80050c2:	2300      	movs	r3, #0
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3718      	adds	r7, #24
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}
 80050cc:	40021000 	.word	0x40021000
 80050d0:	40022000 	.word	0x40022000

080050d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b086      	sub	sp, #24
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80050dc:	2300      	movs	r3, #0
 80050de:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80050e0:	2300      	movs	r3, #0
 80050e2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d041      	beq.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050f4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80050f8:	d02a      	beq.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80050fa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80050fe:	d824      	bhi.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005100:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005104:	d008      	beq.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005106:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800510a:	d81e      	bhi.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800510c:	2b00      	cmp	r3, #0
 800510e:	d00a      	beq.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005110:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005114:	d010      	beq.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005116:	e018      	b.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005118:	4b86      	ldr	r3, [pc, #536]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	4a85      	ldr	r2, [pc, #532]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800511e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005122:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005124:	e015      	b.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	3304      	adds	r3, #4
 800512a:	2100      	movs	r1, #0
 800512c:	4618      	mov	r0, r3
 800512e:	f000 fabb 	bl	80056a8 <RCCEx_PLLSAI1_Config>
 8005132:	4603      	mov	r3, r0
 8005134:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005136:	e00c      	b.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	3320      	adds	r3, #32
 800513c:	2100      	movs	r1, #0
 800513e:	4618      	mov	r0, r3
 8005140:	f000 fba6 	bl	8005890 <RCCEx_PLLSAI2_Config>
 8005144:	4603      	mov	r3, r0
 8005146:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005148:	e003      	b.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	74fb      	strb	r3, [r7, #19]
      break;
 800514e:	e000      	b.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005150:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005152:	7cfb      	ldrb	r3, [r7, #19]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d10b      	bne.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005158:	4b76      	ldr	r3, [pc, #472]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800515a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800515e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005166:	4973      	ldr	r1, [pc, #460]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005168:	4313      	orrs	r3, r2
 800516a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800516e:	e001      	b.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005170:	7cfb      	ldrb	r3, [r7, #19]
 8005172:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800517c:	2b00      	cmp	r3, #0
 800517e:	d041      	beq.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005184:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005188:	d02a      	beq.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800518a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800518e:	d824      	bhi.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005190:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005194:	d008      	beq.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005196:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800519a:	d81e      	bhi.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x106>
 800519c:	2b00      	cmp	r3, #0
 800519e:	d00a      	beq.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80051a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80051a4:	d010      	beq.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80051a6:	e018      	b.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80051a8:	4b62      	ldr	r3, [pc, #392]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	4a61      	ldr	r2, [pc, #388]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051b2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80051b4:	e015      	b.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	3304      	adds	r3, #4
 80051ba:	2100      	movs	r1, #0
 80051bc:	4618      	mov	r0, r3
 80051be:	f000 fa73 	bl	80056a8 <RCCEx_PLLSAI1_Config>
 80051c2:	4603      	mov	r3, r0
 80051c4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80051c6:	e00c      	b.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	3320      	adds	r3, #32
 80051cc:	2100      	movs	r1, #0
 80051ce:	4618      	mov	r0, r3
 80051d0:	f000 fb5e 	bl	8005890 <RCCEx_PLLSAI2_Config>
 80051d4:	4603      	mov	r3, r0
 80051d6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80051d8:	e003      	b.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	74fb      	strb	r3, [r7, #19]
      break;
 80051de:	e000      	b.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80051e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051e2:	7cfb      	ldrb	r3, [r7, #19]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d10b      	bne.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80051e8:	4b52      	ldr	r3, [pc, #328]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ee:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051f6:	494f      	ldr	r1, [pc, #316]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051f8:	4313      	orrs	r3, r2
 80051fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80051fe:	e001      	b.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005200:	7cfb      	ldrb	r3, [r7, #19]
 8005202:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800520c:	2b00      	cmp	r3, #0
 800520e:	f000 80a0 	beq.w	8005352 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005212:	2300      	movs	r3, #0
 8005214:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005216:	4b47      	ldr	r3, [pc, #284]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800521a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800521e:	2b00      	cmp	r3, #0
 8005220:	d101      	bne.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005222:	2301      	movs	r3, #1
 8005224:	e000      	b.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005226:	2300      	movs	r3, #0
 8005228:	2b00      	cmp	r3, #0
 800522a:	d00d      	beq.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800522c:	4b41      	ldr	r3, [pc, #260]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800522e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005230:	4a40      	ldr	r2, [pc, #256]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005232:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005236:	6593      	str	r3, [r2, #88]	; 0x58
 8005238:	4b3e      	ldr	r3, [pc, #248]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800523a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800523c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005240:	60bb      	str	r3, [r7, #8]
 8005242:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005244:	2301      	movs	r3, #1
 8005246:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005248:	4b3b      	ldr	r3, [pc, #236]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a3a      	ldr	r2, [pc, #232]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800524e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005252:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005254:	f7fd f99a 	bl	800258c <HAL_GetTick>
 8005258:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800525a:	e009      	b.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800525c:	f7fd f996 	bl	800258c <HAL_GetTick>
 8005260:	4602      	mov	r2, r0
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	1ad3      	subs	r3, r2, r3
 8005266:	2b02      	cmp	r3, #2
 8005268:	d902      	bls.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800526a:	2303      	movs	r3, #3
 800526c:	74fb      	strb	r3, [r7, #19]
        break;
 800526e:	e005      	b.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005270:	4b31      	ldr	r3, [pc, #196]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005278:	2b00      	cmp	r3, #0
 800527a:	d0ef      	beq.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800527c:	7cfb      	ldrb	r3, [r7, #19]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d15c      	bne.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005282:	4b2c      	ldr	r3, [pc, #176]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005288:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800528c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d01f      	beq.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800529a:	697a      	ldr	r2, [r7, #20]
 800529c:	429a      	cmp	r2, r3
 800529e:	d019      	beq.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80052a0:	4b24      	ldr	r3, [pc, #144]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052aa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80052ac:	4b21      	ldr	r3, [pc, #132]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052b2:	4a20      	ldr	r2, [pc, #128]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80052bc:	4b1d      	ldr	r3, [pc, #116]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052c2:	4a1c      	ldr	r2, [pc, #112]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80052cc:	4a19      	ldr	r2, [pc, #100]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	f003 0301 	and.w	r3, r3, #1
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d016      	beq.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052de:	f7fd f955 	bl	800258c <HAL_GetTick>
 80052e2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052e4:	e00b      	b.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052e6:	f7fd f951 	bl	800258c <HAL_GetTick>
 80052ea:	4602      	mov	r2, r0
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	1ad3      	subs	r3, r2, r3
 80052f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d902      	bls.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80052f8:	2303      	movs	r3, #3
 80052fa:	74fb      	strb	r3, [r7, #19]
            break;
 80052fc:	e006      	b.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052fe:	4b0d      	ldr	r3, [pc, #52]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005300:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005304:	f003 0302 	and.w	r3, r3, #2
 8005308:	2b00      	cmp	r3, #0
 800530a:	d0ec      	beq.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800530c:	7cfb      	ldrb	r3, [r7, #19]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d10c      	bne.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005312:	4b08      	ldr	r3, [pc, #32]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005314:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005318:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005322:	4904      	ldr	r1, [pc, #16]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005324:	4313      	orrs	r3, r2
 8005326:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800532a:	e009      	b.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800532c:	7cfb      	ldrb	r3, [r7, #19]
 800532e:	74bb      	strb	r3, [r7, #18]
 8005330:	e006      	b.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005332:	bf00      	nop
 8005334:	40021000 	.word	0x40021000
 8005338:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800533c:	7cfb      	ldrb	r3, [r7, #19]
 800533e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005340:	7c7b      	ldrb	r3, [r7, #17]
 8005342:	2b01      	cmp	r3, #1
 8005344:	d105      	bne.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005346:	4b9e      	ldr	r3, [pc, #632]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800534a:	4a9d      	ldr	r2, [pc, #628]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800534c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005350:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f003 0301 	and.w	r3, r3, #1
 800535a:	2b00      	cmp	r3, #0
 800535c:	d00a      	beq.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800535e:	4b98      	ldr	r3, [pc, #608]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005364:	f023 0203 	bic.w	r2, r3, #3
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800536c:	4994      	ldr	r1, [pc, #592]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800536e:	4313      	orrs	r3, r2
 8005370:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f003 0302 	and.w	r3, r3, #2
 800537c:	2b00      	cmp	r3, #0
 800537e:	d00a      	beq.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005380:	4b8f      	ldr	r3, [pc, #572]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005386:	f023 020c 	bic.w	r2, r3, #12
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800538e:	498c      	ldr	r1, [pc, #560]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005390:	4313      	orrs	r3, r2
 8005392:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 0304 	and.w	r3, r3, #4
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d00a      	beq.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80053a2:	4b87      	ldr	r3, [pc, #540]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053a8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b0:	4983      	ldr	r1, [pc, #524]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053b2:	4313      	orrs	r3, r2
 80053b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f003 0308 	and.w	r3, r3, #8
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d00a      	beq.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80053c4:	4b7e      	ldr	r3, [pc, #504]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053ca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053d2:	497b      	ldr	r1, [pc, #492]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053d4:	4313      	orrs	r3, r2
 80053d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f003 0310 	and.w	r3, r3, #16
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d00a      	beq.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80053e6:	4b76      	ldr	r3, [pc, #472]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053f4:	4972      	ldr	r1, [pc, #456]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053f6:	4313      	orrs	r3, r2
 80053f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 0320 	and.w	r3, r3, #32
 8005404:	2b00      	cmp	r3, #0
 8005406:	d00a      	beq.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005408:	4b6d      	ldr	r3, [pc, #436]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800540a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800540e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005416:	496a      	ldr	r1, [pc, #424]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005418:	4313      	orrs	r3, r2
 800541a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005426:	2b00      	cmp	r3, #0
 8005428:	d00a      	beq.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800542a:	4b65      	ldr	r3, [pc, #404]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800542c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005430:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005438:	4961      	ldr	r1, [pc, #388]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800543a:	4313      	orrs	r3, r2
 800543c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005448:	2b00      	cmp	r3, #0
 800544a:	d00a      	beq.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800544c:	4b5c      	ldr	r3, [pc, #368]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800544e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005452:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800545a:	4959      	ldr	r1, [pc, #356]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800545c:	4313      	orrs	r3, r2
 800545e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800546a:	2b00      	cmp	r3, #0
 800546c:	d00a      	beq.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800546e:	4b54      	ldr	r3, [pc, #336]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005474:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800547c:	4950      	ldr	r1, [pc, #320]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800547e:	4313      	orrs	r3, r2
 8005480:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800548c:	2b00      	cmp	r3, #0
 800548e:	d00a      	beq.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005490:	4b4b      	ldr	r3, [pc, #300]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005496:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800549e:	4948      	ldr	r1, [pc, #288]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054a0:	4313      	orrs	r3, r2
 80054a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d00a      	beq.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80054b2:	4b43      	ldr	r3, [pc, #268]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054c0:	493f      	ldr	r1, [pc, #252]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054c2:	4313      	orrs	r3, r2
 80054c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d028      	beq.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80054d4:	4b3a      	ldr	r3, [pc, #232]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054da:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054e2:	4937      	ldr	r1, [pc, #220]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054e4:	4313      	orrs	r3, r2
 80054e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054f2:	d106      	bne.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054f4:	4b32      	ldr	r3, [pc, #200]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	4a31      	ldr	r2, [pc, #196]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054fe:	60d3      	str	r3, [r2, #12]
 8005500:	e011      	b.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005506:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800550a:	d10c      	bne.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	3304      	adds	r3, #4
 8005510:	2101      	movs	r1, #1
 8005512:	4618      	mov	r0, r3
 8005514:	f000 f8c8 	bl	80056a8 <RCCEx_PLLSAI1_Config>
 8005518:	4603      	mov	r3, r0
 800551a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800551c:	7cfb      	ldrb	r3, [r7, #19]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d001      	beq.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005522:	7cfb      	ldrb	r3, [r7, #19]
 8005524:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800552e:	2b00      	cmp	r3, #0
 8005530:	d028      	beq.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005532:	4b23      	ldr	r3, [pc, #140]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005534:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005538:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005540:	491f      	ldr	r1, [pc, #124]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005542:	4313      	orrs	r3, r2
 8005544:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800554c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005550:	d106      	bne.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005552:	4b1b      	ldr	r3, [pc, #108]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005554:	68db      	ldr	r3, [r3, #12]
 8005556:	4a1a      	ldr	r2, [pc, #104]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005558:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800555c:	60d3      	str	r3, [r2, #12]
 800555e:	e011      	b.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005564:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005568:	d10c      	bne.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	3304      	adds	r3, #4
 800556e:	2101      	movs	r1, #1
 8005570:	4618      	mov	r0, r3
 8005572:	f000 f899 	bl	80056a8 <RCCEx_PLLSAI1_Config>
 8005576:	4603      	mov	r3, r0
 8005578:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800557a:	7cfb      	ldrb	r3, [r7, #19]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d001      	beq.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005580:	7cfb      	ldrb	r3, [r7, #19]
 8005582:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800558c:	2b00      	cmp	r3, #0
 800558e:	d02b      	beq.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005590:	4b0b      	ldr	r3, [pc, #44]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005596:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800559e:	4908      	ldr	r1, [pc, #32]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055a0:	4313      	orrs	r3, r2
 80055a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055ae:	d109      	bne.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055b0:	4b03      	ldr	r3, [pc, #12]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	4a02      	ldr	r2, [pc, #8]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055ba:	60d3      	str	r3, [r2, #12]
 80055bc:	e014      	b.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80055be:	bf00      	nop
 80055c0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80055cc:	d10c      	bne.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	3304      	adds	r3, #4
 80055d2:	2101      	movs	r1, #1
 80055d4:	4618      	mov	r0, r3
 80055d6:	f000 f867 	bl	80056a8 <RCCEx_PLLSAI1_Config>
 80055da:	4603      	mov	r3, r0
 80055dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80055de:	7cfb      	ldrb	r3, [r7, #19]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d001      	beq.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80055e4:	7cfb      	ldrb	r3, [r7, #19]
 80055e6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d02f      	beq.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80055f4:	4b2b      	ldr	r3, [pc, #172]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80055f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055fa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005602:	4928      	ldr	r1, [pc, #160]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005604:	4313      	orrs	r3, r2
 8005606:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800560e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005612:	d10d      	bne.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	3304      	adds	r3, #4
 8005618:	2102      	movs	r1, #2
 800561a:	4618      	mov	r0, r3
 800561c:	f000 f844 	bl	80056a8 <RCCEx_PLLSAI1_Config>
 8005620:	4603      	mov	r3, r0
 8005622:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005624:	7cfb      	ldrb	r3, [r7, #19]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d014      	beq.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800562a:	7cfb      	ldrb	r3, [r7, #19]
 800562c:	74bb      	strb	r3, [r7, #18]
 800562e:	e011      	b.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005634:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005638:	d10c      	bne.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	3320      	adds	r3, #32
 800563e:	2102      	movs	r1, #2
 8005640:	4618      	mov	r0, r3
 8005642:	f000 f925 	bl	8005890 <RCCEx_PLLSAI2_Config>
 8005646:	4603      	mov	r3, r0
 8005648:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800564a:	7cfb      	ldrb	r3, [r7, #19]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d001      	beq.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005650:	7cfb      	ldrb	r3, [r7, #19]
 8005652:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800565c:	2b00      	cmp	r3, #0
 800565e:	d00a      	beq.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005660:	4b10      	ldr	r3, [pc, #64]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005666:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800566e:	490d      	ldr	r1, [pc, #52]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005670:	4313      	orrs	r3, r2
 8005672:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800567e:	2b00      	cmp	r3, #0
 8005680:	d00b      	beq.n	800569a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005682:	4b08      	ldr	r3, [pc, #32]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005684:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005688:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005692:	4904      	ldr	r1, [pc, #16]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005694:	4313      	orrs	r3, r2
 8005696:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800569a:	7cbb      	ldrb	r3, [r7, #18]
}
 800569c:	4618      	mov	r0, r3
 800569e:	3718      	adds	r7, #24
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}
 80056a4:	40021000 	.word	0x40021000

080056a8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b084      	sub	sp, #16
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80056b2:	2300      	movs	r3, #0
 80056b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80056b6:	4b75      	ldr	r3, [pc, #468]	; (800588c <RCCEx_PLLSAI1_Config+0x1e4>)
 80056b8:	68db      	ldr	r3, [r3, #12]
 80056ba:	f003 0303 	and.w	r3, r3, #3
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d018      	beq.n	80056f4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80056c2:	4b72      	ldr	r3, [pc, #456]	; (800588c <RCCEx_PLLSAI1_Config+0x1e4>)
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	f003 0203 	and.w	r2, r3, #3
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	429a      	cmp	r2, r3
 80056d0:	d10d      	bne.n	80056ee <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
       ||
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d009      	beq.n	80056ee <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80056da:	4b6c      	ldr	r3, [pc, #432]	; (800588c <RCCEx_PLLSAI1_Config+0x1e4>)
 80056dc:	68db      	ldr	r3, [r3, #12]
 80056de:	091b      	lsrs	r3, r3, #4
 80056e0:	f003 0307 	and.w	r3, r3, #7
 80056e4:	1c5a      	adds	r2, r3, #1
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	685b      	ldr	r3, [r3, #4]
       ||
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d047      	beq.n	800577e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	73fb      	strb	r3, [r7, #15]
 80056f2:	e044      	b.n	800577e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	2b03      	cmp	r3, #3
 80056fa:	d018      	beq.n	800572e <RCCEx_PLLSAI1_Config+0x86>
 80056fc:	2b03      	cmp	r3, #3
 80056fe:	d825      	bhi.n	800574c <RCCEx_PLLSAI1_Config+0xa4>
 8005700:	2b01      	cmp	r3, #1
 8005702:	d002      	beq.n	800570a <RCCEx_PLLSAI1_Config+0x62>
 8005704:	2b02      	cmp	r3, #2
 8005706:	d009      	beq.n	800571c <RCCEx_PLLSAI1_Config+0x74>
 8005708:	e020      	b.n	800574c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800570a:	4b60      	ldr	r3, [pc, #384]	; (800588c <RCCEx_PLLSAI1_Config+0x1e4>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f003 0302 	and.w	r3, r3, #2
 8005712:	2b00      	cmp	r3, #0
 8005714:	d11d      	bne.n	8005752 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800571a:	e01a      	b.n	8005752 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800571c:	4b5b      	ldr	r3, [pc, #364]	; (800588c <RCCEx_PLLSAI1_Config+0x1e4>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005724:	2b00      	cmp	r3, #0
 8005726:	d116      	bne.n	8005756 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800572c:	e013      	b.n	8005756 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800572e:	4b57      	ldr	r3, [pc, #348]	; (800588c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005736:	2b00      	cmp	r3, #0
 8005738:	d10f      	bne.n	800575a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800573a:	4b54      	ldr	r3, [pc, #336]	; (800588c <RCCEx_PLLSAI1_Config+0x1e4>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005742:	2b00      	cmp	r3, #0
 8005744:	d109      	bne.n	800575a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800574a:	e006      	b.n	800575a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	73fb      	strb	r3, [r7, #15]
      break;
 8005750:	e004      	b.n	800575c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005752:	bf00      	nop
 8005754:	e002      	b.n	800575c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005756:	bf00      	nop
 8005758:	e000      	b.n	800575c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800575a:	bf00      	nop
    }

    if(status == HAL_OK)
 800575c:	7bfb      	ldrb	r3, [r7, #15]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d10d      	bne.n	800577e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005762:	4b4a      	ldr	r3, [pc, #296]	; (800588c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005764:	68db      	ldr	r3, [r3, #12]
 8005766:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6819      	ldr	r1, [r3, #0]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	3b01      	subs	r3, #1
 8005774:	011b      	lsls	r3, r3, #4
 8005776:	430b      	orrs	r3, r1
 8005778:	4944      	ldr	r1, [pc, #272]	; (800588c <RCCEx_PLLSAI1_Config+0x1e4>)
 800577a:	4313      	orrs	r3, r2
 800577c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800577e:	7bfb      	ldrb	r3, [r7, #15]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d17d      	bne.n	8005880 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005784:	4b41      	ldr	r3, [pc, #260]	; (800588c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a40      	ldr	r2, [pc, #256]	; (800588c <RCCEx_PLLSAI1_Config+0x1e4>)
 800578a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800578e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005790:	f7fc fefc 	bl	800258c <HAL_GetTick>
 8005794:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005796:	e009      	b.n	80057ac <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005798:	f7fc fef8 	bl	800258c <HAL_GetTick>
 800579c:	4602      	mov	r2, r0
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	1ad3      	subs	r3, r2, r3
 80057a2:	2b02      	cmp	r3, #2
 80057a4:	d902      	bls.n	80057ac <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80057a6:	2303      	movs	r3, #3
 80057a8:	73fb      	strb	r3, [r7, #15]
        break;
 80057aa:	e005      	b.n	80057b8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80057ac:	4b37      	ldr	r3, [pc, #220]	; (800588c <RCCEx_PLLSAI1_Config+0x1e4>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d1ef      	bne.n	8005798 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80057b8:	7bfb      	ldrb	r3, [r7, #15]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d160      	bne.n	8005880 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d111      	bne.n	80057e8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80057c4:	4b31      	ldr	r3, [pc, #196]	; (800588c <RCCEx_PLLSAI1_Config+0x1e4>)
 80057c6:	691b      	ldr	r3, [r3, #16]
 80057c8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80057cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	6892      	ldr	r2, [r2, #8]
 80057d4:	0211      	lsls	r1, r2, #8
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	68d2      	ldr	r2, [r2, #12]
 80057da:	0912      	lsrs	r2, r2, #4
 80057dc:	0452      	lsls	r2, r2, #17
 80057de:	430a      	orrs	r2, r1
 80057e0:	492a      	ldr	r1, [pc, #168]	; (800588c <RCCEx_PLLSAI1_Config+0x1e4>)
 80057e2:	4313      	orrs	r3, r2
 80057e4:	610b      	str	r3, [r1, #16]
 80057e6:	e027      	b.n	8005838 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	d112      	bne.n	8005814 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80057ee:	4b27      	ldr	r3, [pc, #156]	; (800588c <RCCEx_PLLSAI1_Config+0x1e4>)
 80057f0:	691b      	ldr	r3, [r3, #16]
 80057f2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80057f6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80057fa:	687a      	ldr	r2, [r7, #4]
 80057fc:	6892      	ldr	r2, [r2, #8]
 80057fe:	0211      	lsls	r1, r2, #8
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	6912      	ldr	r2, [r2, #16]
 8005804:	0852      	lsrs	r2, r2, #1
 8005806:	3a01      	subs	r2, #1
 8005808:	0552      	lsls	r2, r2, #21
 800580a:	430a      	orrs	r2, r1
 800580c:	491f      	ldr	r1, [pc, #124]	; (800588c <RCCEx_PLLSAI1_Config+0x1e4>)
 800580e:	4313      	orrs	r3, r2
 8005810:	610b      	str	r3, [r1, #16]
 8005812:	e011      	b.n	8005838 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005814:	4b1d      	ldr	r3, [pc, #116]	; (800588c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005816:	691b      	ldr	r3, [r3, #16]
 8005818:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800581c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005820:	687a      	ldr	r2, [r7, #4]
 8005822:	6892      	ldr	r2, [r2, #8]
 8005824:	0211      	lsls	r1, r2, #8
 8005826:	687a      	ldr	r2, [r7, #4]
 8005828:	6952      	ldr	r2, [r2, #20]
 800582a:	0852      	lsrs	r2, r2, #1
 800582c:	3a01      	subs	r2, #1
 800582e:	0652      	lsls	r2, r2, #25
 8005830:	430a      	orrs	r2, r1
 8005832:	4916      	ldr	r1, [pc, #88]	; (800588c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005834:	4313      	orrs	r3, r2
 8005836:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005838:	4b14      	ldr	r3, [pc, #80]	; (800588c <RCCEx_PLLSAI1_Config+0x1e4>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a13      	ldr	r2, [pc, #76]	; (800588c <RCCEx_PLLSAI1_Config+0x1e4>)
 800583e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005842:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005844:	f7fc fea2 	bl	800258c <HAL_GetTick>
 8005848:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800584a:	e009      	b.n	8005860 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800584c:	f7fc fe9e 	bl	800258c <HAL_GetTick>
 8005850:	4602      	mov	r2, r0
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	1ad3      	subs	r3, r2, r3
 8005856:	2b02      	cmp	r3, #2
 8005858:	d902      	bls.n	8005860 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800585a:	2303      	movs	r3, #3
 800585c:	73fb      	strb	r3, [r7, #15]
          break;
 800585e:	e005      	b.n	800586c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005860:	4b0a      	ldr	r3, [pc, #40]	; (800588c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005868:	2b00      	cmp	r3, #0
 800586a:	d0ef      	beq.n	800584c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800586c:	7bfb      	ldrb	r3, [r7, #15]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d106      	bne.n	8005880 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005872:	4b06      	ldr	r3, [pc, #24]	; (800588c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005874:	691a      	ldr	r2, [r3, #16]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	699b      	ldr	r3, [r3, #24]
 800587a:	4904      	ldr	r1, [pc, #16]	; (800588c <RCCEx_PLLSAI1_Config+0x1e4>)
 800587c:	4313      	orrs	r3, r2
 800587e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005880:	7bfb      	ldrb	r3, [r7, #15]
}
 8005882:	4618      	mov	r0, r3
 8005884:	3710      	adds	r7, #16
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}
 800588a:	bf00      	nop
 800588c:	40021000 	.word	0x40021000

08005890 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b084      	sub	sp, #16
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800589a:	2300      	movs	r3, #0
 800589c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800589e:	4b6a      	ldr	r3, [pc, #424]	; (8005a48 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058a0:	68db      	ldr	r3, [r3, #12]
 80058a2:	f003 0303 	and.w	r3, r3, #3
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d018      	beq.n	80058dc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80058aa:	4b67      	ldr	r3, [pc, #412]	; (8005a48 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	f003 0203 	and.w	r2, r3, #3
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	429a      	cmp	r2, r3
 80058b8:	d10d      	bne.n	80058d6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
       ||
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d009      	beq.n	80058d6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80058c2:	4b61      	ldr	r3, [pc, #388]	; (8005a48 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058c4:	68db      	ldr	r3, [r3, #12]
 80058c6:	091b      	lsrs	r3, r3, #4
 80058c8:	f003 0307 	and.w	r3, r3, #7
 80058cc:	1c5a      	adds	r2, r3, #1
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	685b      	ldr	r3, [r3, #4]
       ||
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d047      	beq.n	8005966 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	73fb      	strb	r3, [r7, #15]
 80058da:	e044      	b.n	8005966 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	2b03      	cmp	r3, #3
 80058e2:	d018      	beq.n	8005916 <RCCEx_PLLSAI2_Config+0x86>
 80058e4:	2b03      	cmp	r3, #3
 80058e6:	d825      	bhi.n	8005934 <RCCEx_PLLSAI2_Config+0xa4>
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d002      	beq.n	80058f2 <RCCEx_PLLSAI2_Config+0x62>
 80058ec:	2b02      	cmp	r3, #2
 80058ee:	d009      	beq.n	8005904 <RCCEx_PLLSAI2_Config+0x74>
 80058f0:	e020      	b.n	8005934 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80058f2:	4b55      	ldr	r3, [pc, #340]	; (8005a48 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f003 0302 	and.w	r3, r3, #2
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d11d      	bne.n	800593a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005902:	e01a      	b.n	800593a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005904:	4b50      	ldr	r3, [pc, #320]	; (8005a48 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800590c:	2b00      	cmp	r3, #0
 800590e:	d116      	bne.n	800593e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005910:	2301      	movs	r3, #1
 8005912:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005914:	e013      	b.n	800593e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005916:	4b4c      	ldr	r3, [pc, #304]	; (8005a48 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800591e:	2b00      	cmp	r3, #0
 8005920:	d10f      	bne.n	8005942 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005922:	4b49      	ldr	r3, [pc, #292]	; (8005a48 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800592a:	2b00      	cmp	r3, #0
 800592c:	d109      	bne.n	8005942 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005932:	e006      	b.n	8005942 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	73fb      	strb	r3, [r7, #15]
      break;
 8005938:	e004      	b.n	8005944 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800593a:	bf00      	nop
 800593c:	e002      	b.n	8005944 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800593e:	bf00      	nop
 8005940:	e000      	b.n	8005944 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005942:	bf00      	nop
    }

    if(status == HAL_OK)
 8005944:	7bfb      	ldrb	r3, [r7, #15]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d10d      	bne.n	8005966 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800594a:	4b3f      	ldr	r3, [pc, #252]	; (8005a48 <RCCEx_PLLSAI2_Config+0x1b8>)
 800594c:	68db      	ldr	r3, [r3, #12]
 800594e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6819      	ldr	r1, [r3, #0]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	3b01      	subs	r3, #1
 800595c:	011b      	lsls	r3, r3, #4
 800595e:	430b      	orrs	r3, r1
 8005960:	4939      	ldr	r1, [pc, #228]	; (8005a48 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005962:	4313      	orrs	r3, r2
 8005964:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005966:	7bfb      	ldrb	r3, [r7, #15]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d167      	bne.n	8005a3c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800596c:	4b36      	ldr	r3, [pc, #216]	; (8005a48 <RCCEx_PLLSAI2_Config+0x1b8>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a35      	ldr	r2, [pc, #212]	; (8005a48 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005972:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005976:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005978:	f7fc fe08 	bl	800258c <HAL_GetTick>
 800597c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800597e:	e009      	b.n	8005994 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005980:	f7fc fe04 	bl	800258c <HAL_GetTick>
 8005984:	4602      	mov	r2, r0
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	1ad3      	subs	r3, r2, r3
 800598a:	2b02      	cmp	r3, #2
 800598c:	d902      	bls.n	8005994 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800598e:	2303      	movs	r3, #3
 8005990:	73fb      	strb	r3, [r7, #15]
        break;
 8005992:	e005      	b.n	80059a0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005994:	4b2c      	ldr	r3, [pc, #176]	; (8005a48 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800599c:	2b00      	cmp	r3, #0
 800599e:	d1ef      	bne.n	8005980 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80059a0:	7bfb      	ldrb	r3, [r7, #15]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d14a      	bne.n	8005a3c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d111      	bne.n	80059d0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80059ac:	4b26      	ldr	r3, [pc, #152]	; (8005a48 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059ae:	695b      	ldr	r3, [r3, #20]
 80059b0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80059b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059b8:	687a      	ldr	r2, [r7, #4]
 80059ba:	6892      	ldr	r2, [r2, #8]
 80059bc:	0211      	lsls	r1, r2, #8
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	68d2      	ldr	r2, [r2, #12]
 80059c2:	0912      	lsrs	r2, r2, #4
 80059c4:	0452      	lsls	r2, r2, #17
 80059c6:	430a      	orrs	r2, r1
 80059c8:	491f      	ldr	r1, [pc, #124]	; (8005a48 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059ca:	4313      	orrs	r3, r2
 80059cc:	614b      	str	r3, [r1, #20]
 80059ce:	e011      	b.n	80059f4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80059d0:	4b1d      	ldr	r3, [pc, #116]	; (8005a48 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059d2:	695b      	ldr	r3, [r3, #20]
 80059d4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80059d8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80059dc:	687a      	ldr	r2, [r7, #4]
 80059de:	6892      	ldr	r2, [r2, #8]
 80059e0:	0211      	lsls	r1, r2, #8
 80059e2:	687a      	ldr	r2, [r7, #4]
 80059e4:	6912      	ldr	r2, [r2, #16]
 80059e6:	0852      	lsrs	r2, r2, #1
 80059e8:	3a01      	subs	r2, #1
 80059ea:	0652      	lsls	r2, r2, #25
 80059ec:	430a      	orrs	r2, r1
 80059ee:	4916      	ldr	r1, [pc, #88]	; (8005a48 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059f0:	4313      	orrs	r3, r2
 80059f2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80059f4:	4b14      	ldr	r3, [pc, #80]	; (8005a48 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a13      	ldr	r2, [pc, #76]	; (8005a48 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059fe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a00:	f7fc fdc4 	bl	800258c <HAL_GetTick>
 8005a04:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005a06:	e009      	b.n	8005a1c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005a08:	f7fc fdc0 	bl	800258c <HAL_GetTick>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	1ad3      	subs	r3, r2, r3
 8005a12:	2b02      	cmp	r3, #2
 8005a14:	d902      	bls.n	8005a1c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005a16:	2303      	movs	r3, #3
 8005a18:	73fb      	strb	r3, [r7, #15]
          break;
 8005a1a:	e005      	b.n	8005a28 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005a1c:	4b0a      	ldr	r3, [pc, #40]	; (8005a48 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d0ef      	beq.n	8005a08 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005a28:	7bfb      	ldrb	r3, [r7, #15]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d106      	bne.n	8005a3c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005a2e:	4b06      	ldr	r3, [pc, #24]	; (8005a48 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a30:	695a      	ldr	r2, [r3, #20]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	695b      	ldr	r3, [r3, #20]
 8005a36:	4904      	ldr	r1, [pc, #16]	; (8005a48 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3710      	adds	r7, #16
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}
 8005a46:	bf00      	nop
 8005a48:	40021000 	.word	0x40021000

08005a4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b084      	sub	sp, #16
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d101      	bne.n	8005a5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e095      	b.n	8005b8a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d108      	bne.n	8005a78 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a6e:	d009      	beq.n	8005a84 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2200      	movs	r2, #0
 8005a74:	61da      	str	r2, [r3, #28]
 8005a76:	e005      	b.n	8005a84 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2200      	movs	r2, #0
 8005a88:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d106      	bne.n	8005aa4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f7fc fa66 	bl	8001f70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2202      	movs	r2, #2
 8005aa8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	681a      	ldr	r2, [r3, #0]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005aba:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	68db      	ldr	r3, [r3, #12]
 8005ac0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005ac4:	d902      	bls.n	8005acc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	60fb      	str	r3, [r7, #12]
 8005aca:	e002      	b.n	8005ad2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005acc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ad0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	68db      	ldr	r3, [r3, #12]
 8005ad6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005ada:	d007      	beq.n	8005aec <HAL_SPI_Init+0xa0>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005ae4:	d002      	beq.n	8005aec <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005afc:	431a      	orrs	r2, r3
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	691b      	ldr	r3, [r3, #16]
 8005b02:	f003 0302 	and.w	r3, r3, #2
 8005b06:	431a      	orrs	r2, r3
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	695b      	ldr	r3, [r3, #20]
 8005b0c:	f003 0301 	and.w	r3, r3, #1
 8005b10:	431a      	orrs	r2, r3
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	699b      	ldr	r3, [r3, #24]
 8005b16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b1a:	431a      	orrs	r2, r3
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	69db      	ldr	r3, [r3, #28]
 8005b20:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b24:	431a      	orrs	r2, r3
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6a1b      	ldr	r3, [r3, #32]
 8005b2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b2e:	ea42 0103 	orr.w	r1, r2, r3
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b36:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	430a      	orrs	r2, r1
 8005b40:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	699b      	ldr	r3, [r3, #24]
 8005b46:	0c1b      	lsrs	r3, r3, #16
 8005b48:	f003 0204 	and.w	r2, r3, #4
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b50:	f003 0310 	and.w	r3, r3, #16
 8005b54:	431a      	orrs	r2, r3
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b5a:	f003 0308 	and.w	r3, r3, #8
 8005b5e:	431a      	orrs	r2, r3
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	68db      	ldr	r3, [r3, #12]
 8005b64:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005b68:	ea42 0103 	orr.w	r1, r2, r3
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	430a      	orrs	r2, r1
 8005b78:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2201      	movs	r2, #1
 8005b84:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005b88:	2300      	movs	r3, #0
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3710      	adds	r7, #16
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}

08005b92 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b92:	b580      	push	{r7, lr}
 8005b94:	b088      	sub	sp, #32
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	60f8      	str	r0, [r7, #12]
 8005b9a:	60b9      	str	r1, [r7, #8]
 8005b9c:	603b      	str	r3, [r7, #0]
 8005b9e:	4613      	mov	r3, r2
 8005ba0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d101      	bne.n	8005bb4 <HAL_SPI_Transmit+0x22>
 8005bb0:	2302      	movs	r3, #2
 8005bb2:	e158      	b.n	8005e66 <HAL_SPI_Transmit+0x2d4>
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005bbc:	f7fc fce6 	bl	800258c <HAL_GetTick>
 8005bc0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005bc2:	88fb      	ldrh	r3, [r7, #6]
 8005bc4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d002      	beq.n	8005bd8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005bd2:	2302      	movs	r3, #2
 8005bd4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005bd6:	e13d      	b.n	8005e54 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d002      	beq.n	8005be4 <HAL_SPI_Transmit+0x52>
 8005bde:	88fb      	ldrh	r3, [r7, #6]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d102      	bne.n	8005bea <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005be4:	2301      	movs	r3, #1
 8005be6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005be8:	e134      	b.n	8005e54 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2203      	movs	r2, #3
 8005bee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	68ba      	ldr	r2, [r7, #8]
 8005bfc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	88fa      	ldrh	r2, [r7, #6]
 8005c02:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	88fa      	ldrh	r2, [r7, #6]
 8005c08:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2200      	movs	r2, #0
 8005c14:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2200      	movs	r2, #0
 8005c24:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c34:	d10f      	bne.n	8005c56 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c44:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c54:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c60:	2b40      	cmp	r3, #64	; 0x40
 8005c62:	d007      	beq.n	8005c74 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	681a      	ldr	r2, [r3, #0]
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c72:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	68db      	ldr	r3, [r3, #12]
 8005c78:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005c7c:	d94b      	bls.n	8005d16 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d002      	beq.n	8005c8c <HAL_SPI_Transmit+0xfa>
 8005c86:	8afb      	ldrh	r3, [r7, #22]
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	d13e      	bne.n	8005d0a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c90:	881a      	ldrh	r2, [r3, #0]
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c9c:	1c9a      	adds	r2, r3, #2
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	3b01      	subs	r3, #1
 8005caa:	b29a      	uxth	r2, r3
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005cb0:	e02b      	b.n	8005d0a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	f003 0302 	and.w	r3, r3, #2
 8005cbc:	2b02      	cmp	r3, #2
 8005cbe:	d112      	bne.n	8005ce6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc4:	881a      	ldrh	r2, [r3, #0]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cd0:	1c9a      	adds	r2, r3, #2
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	3b01      	subs	r3, #1
 8005cde:	b29a      	uxth	r2, r3
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005ce4:	e011      	b.n	8005d0a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ce6:	f7fc fc51 	bl	800258c <HAL_GetTick>
 8005cea:	4602      	mov	r2, r0
 8005cec:	69bb      	ldr	r3, [r7, #24]
 8005cee:	1ad3      	subs	r3, r2, r3
 8005cf0:	683a      	ldr	r2, [r7, #0]
 8005cf2:	429a      	cmp	r2, r3
 8005cf4:	d803      	bhi.n	8005cfe <HAL_SPI_Transmit+0x16c>
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005cfc:	d102      	bne.n	8005d04 <HAL_SPI_Transmit+0x172>
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d102      	bne.n	8005d0a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005d04:	2303      	movs	r3, #3
 8005d06:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005d08:	e0a4      	b.n	8005e54 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d1ce      	bne.n	8005cb2 <HAL_SPI_Transmit+0x120>
 8005d14:	e07c      	b.n	8005e10 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d002      	beq.n	8005d24 <HAL_SPI_Transmit+0x192>
 8005d1e:	8afb      	ldrh	r3, [r7, #22]
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d170      	bne.n	8005e06 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	2b01      	cmp	r3, #1
 8005d2c:	d912      	bls.n	8005d54 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d32:	881a      	ldrh	r2, [r3, #0]
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d3e:	1c9a      	adds	r2, r3, #2
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	3b02      	subs	r3, #2
 8005d4c:	b29a      	uxth	r2, r3
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005d52:	e058      	b.n	8005e06 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	330c      	adds	r3, #12
 8005d5e:	7812      	ldrb	r2, [r2, #0]
 8005d60:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d66:	1c5a      	adds	r2, r3, #1
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	3b01      	subs	r3, #1
 8005d74:	b29a      	uxth	r2, r3
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005d7a:	e044      	b.n	8005e06 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	f003 0302 	and.w	r3, r3, #2
 8005d86:	2b02      	cmp	r3, #2
 8005d88:	d12b      	bne.n	8005de2 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d912      	bls.n	8005dba <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d98:	881a      	ldrh	r2, [r3, #0]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da4:	1c9a      	adds	r2, r3, #2
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dae:	b29b      	uxth	r3, r3
 8005db0:	3b02      	subs	r3, #2
 8005db2:	b29a      	uxth	r2, r3
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005db8:	e025      	b.n	8005e06 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	330c      	adds	r3, #12
 8005dc4:	7812      	ldrb	r2, [r2, #0]
 8005dc6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dcc:	1c5a      	adds	r2, r3, #1
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dd6:	b29b      	uxth	r3, r3
 8005dd8:	3b01      	subs	r3, #1
 8005dda:	b29a      	uxth	r2, r3
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005de0:	e011      	b.n	8005e06 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005de2:	f7fc fbd3 	bl	800258c <HAL_GetTick>
 8005de6:	4602      	mov	r2, r0
 8005de8:	69bb      	ldr	r3, [r7, #24]
 8005dea:	1ad3      	subs	r3, r2, r3
 8005dec:	683a      	ldr	r2, [r7, #0]
 8005dee:	429a      	cmp	r2, r3
 8005df0:	d803      	bhi.n	8005dfa <HAL_SPI_Transmit+0x268>
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005df8:	d102      	bne.n	8005e00 <HAL_SPI_Transmit+0x26e>
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d102      	bne.n	8005e06 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005e00:	2303      	movs	r3, #3
 8005e02:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005e04:	e026      	b.n	8005e54 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d1b5      	bne.n	8005d7c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005e10:	69ba      	ldr	r2, [r7, #24]
 8005e12:	6839      	ldr	r1, [r7, #0]
 8005e14:	68f8      	ldr	r0, [r7, #12]
 8005e16:	f000 f949 	bl	80060ac <SPI_EndRxTxTransaction>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d002      	beq.n	8005e26 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2220      	movs	r2, #32
 8005e24:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d10a      	bne.n	8005e44 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e2e:	2300      	movs	r3, #0
 8005e30:	613b      	str	r3, [r7, #16]
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	68db      	ldr	r3, [r3, #12]
 8005e38:	613b      	str	r3, [r7, #16]
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	613b      	str	r3, [r7, #16]
 8005e42:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d002      	beq.n	8005e52 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	77fb      	strb	r3, [r7, #31]
 8005e50:	e000      	b.n	8005e54 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8005e52:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2201      	movs	r2, #1
 8005e58:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005e64:	7ffb      	ldrb	r3, [r7, #31]
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3720      	adds	r7, #32
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
	...

08005e70 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b088      	sub	sp, #32
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	60f8      	str	r0, [r7, #12]
 8005e78:	60b9      	str	r1, [r7, #8]
 8005e7a:	603b      	str	r3, [r7, #0]
 8005e7c:	4613      	mov	r3, r2
 8005e7e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005e80:	f7fc fb84 	bl	800258c <HAL_GetTick>
 8005e84:	4602      	mov	r2, r0
 8005e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e88:	1a9b      	subs	r3, r3, r2
 8005e8a:	683a      	ldr	r2, [r7, #0]
 8005e8c:	4413      	add	r3, r2
 8005e8e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005e90:	f7fc fb7c 	bl	800258c <HAL_GetTick>
 8005e94:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005e96:	4b39      	ldr	r3, [pc, #228]	; (8005f7c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	015b      	lsls	r3, r3, #5
 8005e9c:	0d1b      	lsrs	r3, r3, #20
 8005e9e:	69fa      	ldr	r2, [r7, #28]
 8005ea0:	fb02 f303 	mul.w	r3, r2, r3
 8005ea4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ea6:	e054      	b.n	8005f52 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005eae:	d050      	beq.n	8005f52 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005eb0:	f7fc fb6c 	bl	800258c <HAL_GetTick>
 8005eb4:	4602      	mov	r2, r0
 8005eb6:	69bb      	ldr	r3, [r7, #24]
 8005eb8:	1ad3      	subs	r3, r2, r3
 8005eba:	69fa      	ldr	r2, [r7, #28]
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	d902      	bls.n	8005ec6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005ec0:	69fb      	ldr	r3, [r7, #28]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d13d      	bne.n	8005f42 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	685a      	ldr	r2, [r3, #4]
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005ed4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ede:	d111      	bne.n	8005f04 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ee8:	d004      	beq.n	8005ef4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ef2:	d107      	bne.n	8005f04 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	681a      	ldr	r2, [r3, #0]
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f02:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f0c:	d10f      	bne.n	8005f2e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f1c:	601a      	str	r2, [r3, #0]
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f2c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2201      	movs	r2, #1
 8005f32:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005f3e:	2303      	movs	r3, #3
 8005f40:	e017      	b.n	8005f72 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d101      	bne.n	8005f4c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005f48:	2300      	movs	r3, #0
 8005f4a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	3b01      	subs	r3, #1
 8005f50:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	689a      	ldr	r2, [r3, #8]
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	4013      	ands	r3, r2
 8005f5c:	68ba      	ldr	r2, [r7, #8]
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	bf0c      	ite	eq
 8005f62:	2301      	moveq	r3, #1
 8005f64:	2300      	movne	r3, #0
 8005f66:	b2db      	uxtb	r3, r3
 8005f68:	461a      	mov	r2, r3
 8005f6a:	79fb      	ldrb	r3, [r7, #7]
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	d19b      	bne.n	8005ea8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005f70:	2300      	movs	r3, #0
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3720      	adds	r7, #32
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}
 8005f7a:	bf00      	nop
 8005f7c:	20000000 	.word	0x20000000

08005f80 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b08a      	sub	sp, #40	; 0x28
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	60b9      	str	r1, [r7, #8]
 8005f8a:	607a      	str	r2, [r7, #4]
 8005f8c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005f92:	f7fc fafb 	bl	800258c <HAL_GetTick>
 8005f96:	4602      	mov	r2, r0
 8005f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f9a:	1a9b      	subs	r3, r3, r2
 8005f9c:	683a      	ldr	r2, [r7, #0]
 8005f9e:	4413      	add	r3, r2
 8005fa0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005fa2:	f7fc faf3 	bl	800258c <HAL_GetTick>
 8005fa6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	330c      	adds	r3, #12
 8005fae:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005fb0:	4b3d      	ldr	r3, [pc, #244]	; (80060a8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005fb2:	681a      	ldr	r2, [r3, #0]
 8005fb4:	4613      	mov	r3, r2
 8005fb6:	009b      	lsls	r3, r3, #2
 8005fb8:	4413      	add	r3, r2
 8005fba:	00da      	lsls	r2, r3, #3
 8005fbc:	1ad3      	subs	r3, r2, r3
 8005fbe:	0d1b      	lsrs	r3, r3, #20
 8005fc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fc2:	fb02 f303 	mul.w	r3, r2, r3
 8005fc6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005fc8:	e060      	b.n	800608c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005fd0:	d107      	bne.n	8005fe2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d104      	bne.n	8005fe2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005fd8:	69fb      	ldr	r3, [r7, #28]
 8005fda:	781b      	ldrb	r3, [r3, #0]
 8005fdc:	b2db      	uxtb	r3, r3
 8005fde:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005fe0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005fe8:	d050      	beq.n	800608c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005fea:	f7fc facf 	bl	800258c <HAL_GetTick>
 8005fee:	4602      	mov	r2, r0
 8005ff0:	6a3b      	ldr	r3, [r7, #32]
 8005ff2:	1ad3      	subs	r3, r2, r3
 8005ff4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	d902      	bls.n	8006000 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d13d      	bne.n	800607c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	685a      	ldr	r2, [r3, #4]
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800600e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006018:	d111      	bne.n	800603e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006022:	d004      	beq.n	800602e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	689b      	ldr	r3, [r3, #8]
 8006028:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800602c:	d107      	bne.n	800603e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800603c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006042:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006046:	d10f      	bne.n	8006068 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006056:	601a      	str	r2, [r3, #0]
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006066:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2201      	movs	r2, #1
 800606c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2200      	movs	r2, #0
 8006074:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006078:	2303      	movs	r3, #3
 800607a:	e010      	b.n	800609e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800607c:	69bb      	ldr	r3, [r7, #24]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d101      	bne.n	8006086 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006082:	2300      	movs	r3, #0
 8006084:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006086:	69bb      	ldr	r3, [r7, #24]
 8006088:	3b01      	subs	r3, #1
 800608a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	689a      	ldr	r2, [r3, #8]
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	4013      	ands	r3, r2
 8006096:	687a      	ldr	r2, [r7, #4]
 8006098:	429a      	cmp	r2, r3
 800609a:	d196      	bne.n	8005fca <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800609c:	2300      	movs	r3, #0
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3728      	adds	r7, #40	; 0x28
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}
 80060a6:	bf00      	nop
 80060a8:	20000000 	.word	0x20000000

080060ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b086      	sub	sp, #24
 80060b0:	af02      	add	r7, sp, #8
 80060b2:	60f8      	str	r0, [r7, #12]
 80060b4:	60b9      	str	r1, [r7, #8]
 80060b6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	9300      	str	r3, [sp, #0]
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	2200      	movs	r2, #0
 80060c0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80060c4:	68f8      	ldr	r0, [r7, #12]
 80060c6:	f7ff ff5b 	bl	8005f80 <SPI_WaitFifoStateUntilTimeout>
 80060ca:	4603      	mov	r3, r0
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d007      	beq.n	80060e0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060d4:	f043 0220 	orr.w	r2, r3, #32
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80060dc:	2303      	movs	r3, #3
 80060de:	e027      	b.n	8006130 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	9300      	str	r3, [sp, #0]
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	2200      	movs	r2, #0
 80060e8:	2180      	movs	r1, #128	; 0x80
 80060ea:	68f8      	ldr	r0, [r7, #12]
 80060ec:	f7ff fec0 	bl	8005e70 <SPI_WaitFlagStateUntilTimeout>
 80060f0:	4603      	mov	r3, r0
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d007      	beq.n	8006106 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060fa:	f043 0220 	orr.w	r2, r3, #32
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006102:	2303      	movs	r3, #3
 8006104:	e014      	b.n	8006130 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	9300      	str	r3, [sp, #0]
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	2200      	movs	r2, #0
 800610e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006112:	68f8      	ldr	r0, [r7, #12]
 8006114:	f7ff ff34 	bl	8005f80 <SPI_WaitFifoStateUntilTimeout>
 8006118:	4603      	mov	r3, r0
 800611a:	2b00      	cmp	r3, #0
 800611c:	d007      	beq.n	800612e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006122:	f043 0220 	orr.w	r2, r3, #32
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800612a:	2303      	movs	r3, #3
 800612c:	e000      	b.n	8006130 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800612e:	2300      	movs	r3, #0
}
 8006130:	4618      	mov	r0, r3
 8006132:	3710      	adds	r7, #16
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}

08006138 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b082      	sub	sp, #8
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d101      	bne.n	800614a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006146:	2301      	movs	r3, #1
 8006148:	e040      	b.n	80061cc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800614e:	2b00      	cmp	r3, #0
 8006150:	d106      	bne.n	8006160 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2200      	movs	r2, #0
 8006156:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f7fc f8d8 	bl	8002310 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2224      	movs	r2, #36	; 0x24
 8006164:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f022 0201 	bic.w	r2, r2, #1
 8006174:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f000 fc22 	bl	80069c0 <UART_SetConfig>
 800617c:	4603      	mov	r3, r0
 800617e:	2b01      	cmp	r3, #1
 8006180:	d101      	bne.n	8006186 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006182:	2301      	movs	r3, #1
 8006184:	e022      	b.n	80061cc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800618a:	2b00      	cmp	r3, #0
 800618c:	d002      	beq.n	8006194 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f000 fece 	bl	8006f30 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	685a      	ldr	r2, [r3, #4]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80061a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	689a      	ldr	r2, [r3, #8]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80061b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	681a      	ldr	r2, [r3, #0]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f042 0201 	orr.w	r2, r2, #1
 80061c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f000 ff55 	bl	8007074 <UART_CheckIdleState>
 80061ca:	4603      	mov	r3, r0
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3708      	adds	r7, #8
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}

080061d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b08a      	sub	sp, #40	; 0x28
 80061d8:	af02      	add	r7, sp, #8
 80061da:	60f8      	str	r0, [r7, #12]
 80061dc:	60b9      	str	r1, [r7, #8]
 80061de:	603b      	str	r3, [r7, #0]
 80061e0:	4613      	mov	r3, r2
 80061e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80061e8:	2b20      	cmp	r3, #32
 80061ea:	f040 8082 	bne.w	80062f2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d002      	beq.n	80061fa <HAL_UART_Transmit+0x26>
 80061f4:	88fb      	ldrh	r3, [r7, #6]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d101      	bne.n	80061fe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80061fa:	2301      	movs	r3, #1
 80061fc:	e07a      	b.n	80062f4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006204:	2b01      	cmp	r3, #1
 8006206:	d101      	bne.n	800620c <HAL_UART_Transmit+0x38>
 8006208:	2302      	movs	r3, #2
 800620a:	e073      	b.n	80062f4 <HAL_UART_Transmit+0x120>
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2201      	movs	r2, #1
 8006210:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2200      	movs	r2, #0
 8006218:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2221      	movs	r2, #33	; 0x21
 8006220:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006222:	f7fc f9b3 	bl	800258c <HAL_GetTick>
 8006226:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	88fa      	ldrh	r2, [r7, #6]
 800622c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	88fa      	ldrh	r2, [r7, #6]
 8006234:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006240:	d108      	bne.n	8006254 <HAL_UART_Transmit+0x80>
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	691b      	ldr	r3, [r3, #16]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d104      	bne.n	8006254 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800624a:	2300      	movs	r3, #0
 800624c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	61bb      	str	r3, [r7, #24]
 8006252:	e003      	b.n	800625c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006258:	2300      	movs	r3, #0
 800625a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2200      	movs	r2, #0
 8006260:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006264:	e02d      	b.n	80062c2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	9300      	str	r3, [sp, #0]
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	2200      	movs	r2, #0
 800626e:	2180      	movs	r1, #128	; 0x80
 8006270:	68f8      	ldr	r0, [r7, #12]
 8006272:	f000 ff48 	bl	8007106 <UART_WaitOnFlagUntilTimeout>
 8006276:	4603      	mov	r3, r0
 8006278:	2b00      	cmp	r3, #0
 800627a:	d001      	beq.n	8006280 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800627c:	2303      	movs	r3, #3
 800627e:	e039      	b.n	80062f4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8006280:	69fb      	ldr	r3, [r7, #28]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d10b      	bne.n	800629e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006286:	69bb      	ldr	r3, [r7, #24]
 8006288:	881a      	ldrh	r2, [r3, #0]
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006292:	b292      	uxth	r2, r2
 8006294:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006296:	69bb      	ldr	r3, [r7, #24]
 8006298:	3302      	adds	r3, #2
 800629a:	61bb      	str	r3, [r7, #24]
 800629c:	e008      	b.n	80062b0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800629e:	69fb      	ldr	r3, [r7, #28]
 80062a0:	781a      	ldrb	r2, [r3, #0]
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	b292      	uxth	r2, r2
 80062a8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80062aa:	69fb      	ldr	r3, [r7, #28]
 80062ac:	3301      	adds	r3, #1
 80062ae:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	3b01      	subs	r3, #1
 80062ba:	b29a      	uxth	r2, r3
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80062c8:	b29b      	uxth	r3, r3
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d1cb      	bne.n	8006266 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	9300      	str	r3, [sp, #0]
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	2200      	movs	r2, #0
 80062d6:	2140      	movs	r1, #64	; 0x40
 80062d8:	68f8      	ldr	r0, [r7, #12]
 80062da:	f000 ff14 	bl	8007106 <UART_WaitOnFlagUntilTimeout>
 80062de:	4603      	mov	r3, r0
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d001      	beq.n	80062e8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80062e4:	2303      	movs	r3, #3
 80062e6:	e005      	b.n	80062f4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2220      	movs	r2, #32
 80062ec:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80062ee:	2300      	movs	r3, #0
 80062f0:	e000      	b.n	80062f4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80062f2:	2302      	movs	r3, #2
  }
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	3720      	adds	r7, #32
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}

080062fc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b08a      	sub	sp, #40	; 0x28
 8006300:	af00      	add	r7, sp, #0
 8006302:	60f8      	str	r0, [r7, #12]
 8006304:	60b9      	str	r1, [r7, #8]
 8006306:	4613      	mov	r3, r2
 8006308:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800630e:	2b20      	cmp	r3, #32
 8006310:	d142      	bne.n	8006398 <HAL_UART_Receive_DMA+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d002      	beq.n	800631e <HAL_UART_Receive_DMA+0x22>
 8006318:	88fb      	ldrh	r3, [r7, #6]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d101      	bne.n	8006322 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 800631e:	2301      	movs	r3, #1
 8006320:	e03b      	b.n	800639a <HAL_UART_Receive_DMA+0x9e>
    }

    __HAL_LOCK(huart);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006328:	2b01      	cmp	r3, #1
 800632a:	d101      	bne.n	8006330 <HAL_UART_Receive_DMA+0x34>
 800632c:	2302      	movs	r3, #2
 800632e:	e034      	b.n	800639a <HAL_UART_Receive_DMA+0x9e>
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2201      	movs	r2, #1
 8006334:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2200      	movs	r2, #0
 800633c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a18      	ldr	r2, [pc, #96]	; (80063a4 <HAL_UART_Receive_DMA+0xa8>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d01f      	beq.n	8006388 <HAL_UART_Receive_DMA+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006352:	2b00      	cmp	r3, #0
 8006354:	d018      	beq.n	8006388 <HAL_UART_Receive_DMA+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	e853 3f00 	ldrex	r3, [r3]
 8006362:	613b      	str	r3, [r7, #16]
   return(result);
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800636a:	627b      	str	r3, [r7, #36]	; 0x24
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	461a      	mov	r2, r3
 8006372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006374:	623b      	str	r3, [r7, #32]
 8006376:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006378:	69f9      	ldr	r1, [r7, #28]
 800637a:	6a3a      	ldr	r2, [r7, #32]
 800637c:	e841 2300 	strex	r3, r2, [r1]
 8006380:	61bb      	str	r3, [r7, #24]
   return(result);
 8006382:	69bb      	ldr	r3, [r7, #24]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d1e6      	bne.n	8006356 <HAL_UART_Receive_DMA+0x5a>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006388:	88fb      	ldrh	r3, [r7, #6]
 800638a:	461a      	mov	r2, r3
 800638c:	68b9      	ldr	r1, [r7, #8]
 800638e:	68f8      	ldr	r0, [r7, #12]
 8006390:	f000 ff7e 	bl	8007290 <UART_Start_Receive_DMA>
 8006394:	4603      	mov	r3, r0
 8006396:	e000      	b.n	800639a <HAL_UART_Receive_DMA+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8006398:	2302      	movs	r3, #2
  }
}
 800639a:	4618      	mov	r0, r3
 800639c:	3728      	adds	r7, #40	; 0x28
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}
 80063a2:	bf00      	nop
 80063a4:	40008000 	.word	0x40008000

080063a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b0ba      	sub	sp, #232	; 0xe8
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	69db      	ldr	r3, [r3, #28]
 80063b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80063ce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80063d2:	f640 030f 	movw	r3, #2063	; 0x80f
 80063d6:	4013      	ands	r3, r2
 80063d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80063dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d115      	bne.n	8006410 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80063e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063e8:	f003 0320 	and.w	r3, r3, #32
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d00f      	beq.n	8006410 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80063f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063f4:	f003 0320 	and.w	r3, r3, #32
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d009      	beq.n	8006410 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006400:	2b00      	cmp	r3, #0
 8006402:	f000 82a6 	beq.w	8006952 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	4798      	blx	r3
      }
      return;
 800640e:	e2a0      	b.n	8006952 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006410:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006414:	2b00      	cmp	r3, #0
 8006416:	f000 8117 	beq.w	8006648 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800641a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800641e:	f003 0301 	and.w	r3, r3, #1
 8006422:	2b00      	cmp	r3, #0
 8006424:	d106      	bne.n	8006434 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006426:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800642a:	4b85      	ldr	r3, [pc, #532]	; (8006640 <HAL_UART_IRQHandler+0x298>)
 800642c:	4013      	ands	r3, r2
 800642e:	2b00      	cmp	r3, #0
 8006430:	f000 810a 	beq.w	8006648 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006434:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006438:	f003 0301 	and.w	r3, r3, #1
 800643c:	2b00      	cmp	r3, #0
 800643e:	d011      	beq.n	8006464 <HAL_UART_IRQHandler+0xbc>
 8006440:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006448:	2b00      	cmp	r3, #0
 800644a:	d00b      	beq.n	8006464 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	2201      	movs	r2, #1
 8006452:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800645a:	f043 0201 	orr.w	r2, r3, #1
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006464:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006468:	f003 0302 	and.w	r3, r3, #2
 800646c:	2b00      	cmp	r3, #0
 800646e:	d011      	beq.n	8006494 <HAL_UART_IRQHandler+0xec>
 8006470:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006474:	f003 0301 	and.w	r3, r3, #1
 8006478:	2b00      	cmp	r3, #0
 800647a:	d00b      	beq.n	8006494 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	2202      	movs	r2, #2
 8006482:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800648a:	f043 0204 	orr.w	r2, r3, #4
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006494:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006498:	f003 0304 	and.w	r3, r3, #4
 800649c:	2b00      	cmp	r3, #0
 800649e:	d011      	beq.n	80064c4 <HAL_UART_IRQHandler+0x11c>
 80064a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064a4:	f003 0301 	and.w	r3, r3, #1
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d00b      	beq.n	80064c4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	2204      	movs	r2, #4
 80064b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80064ba:	f043 0202 	orr.w	r2, r3, #2
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80064c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064c8:	f003 0308 	and.w	r3, r3, #8
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d017      	beq.n	8006500 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80064d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064d4:	f003 0320 	and.w	r3, r3, #32
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d105      	bne.n	80064e8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80064dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064e0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d00b      	beq.n	8006500 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	2208      	movs	r2, #8
 80064ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80064f6:	f043 0208 	orr.w	r2, r3, #8
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006500:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006504:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006508:	2b00      	cmp	r3, #0
 800650a:	d012      	beq.n	8006532 <HAL_UART_IRQHandler+0x18a>
 800650c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006510:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006514:	2b00      	cmp	r3, #0
 8006516:	d00c      	beq.n	8006532 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006520:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006528:	f043 0220 	orr.w	r2, r3, #32
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006538:	2b00      	cmp	r3, #0
 800653a:	f000 820c 	beq.w	8006956 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800653e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006542:	f003 0320 	and.w	r3, r3, #32
 8006546:	2b00      	cmp	r3, #0
 8006548:	d00d      	beq.n	8006566 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800654a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800654e:	f003 0320 	and.w	r3, r3, #32
 8006552:	2b00      	cmp	r3, #0
 8006554:	d007      	beq.n	8006566 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800655a:	2b00      	cmp	r3, #0
 800655c:	d003      	beq.n	8006566 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800656c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800657a:	2b40      	cmp	r3, #64	; 0x40
 800657c:	d005      	beq.n	800658a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800657e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006582:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006586:	2b00      	cmp	r3, #0
 8006588:	d04f      	beq.n	800662a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f000 ff4c 	bl	8007428 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800659a:	2b40      	cmp	r3, #64	; 0x40
 800659c:	d141      	bne.n	8006622 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	3308      	adds	r3, #8
 80065a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80065ac:	e853 3f00 	ldrex	r3, [r3]
 80065b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80065b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80065b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	3308      	adds	r3, #8
 80065c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80065ca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80065ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80065d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80065da:	e841 2300 	strex	r3, r2, [r1]
 80065de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80065e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d1d9      	bne.n	800659e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d013      	beq.n	800661a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065f6:	4a13      	ldr	r2, [pc, #76]	; (8006644 <HAL_UART_IRQHandler+0x29c>)
 80065f8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065fe:	4618      	mov	r0, r3
 8006600:	f7fc fa5c 	bl	8002abc <HAL_DMA_Abort_IT>
 8006604:	4603      	mov	r3, r0
 8006606:	2b00      	cmp	r3, #0
 8006608:	d017      	beq.n	800663a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800660e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006610:	687a      	ldr	r2, [r7, #4]
 8006612:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006614:	4610      	mov	r0, r2
 8006616:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006618:	e00f      	b.n	800663a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f000 f9ba 	bl	8006994 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006620:	e00b      	b.n	800663a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f000 f9b6 	bl	8006994 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006628:	e007      	b.n	800663a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f000 f9b2 	bl	8006994 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2200      	movs	r2, #0
 8006634:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006638:	e18d      	b.n	8006956 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800663a:	bf00      	nop
    return;
 800663c:	e18b      	b.n	8006956 <HAL_UART_IRQHandler+0x5ae>
 800663e:	bf00      	nop
 8006640:	04000120 	.word	0x04000120
 8006644:	080076c7 	.word	0x080076c7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800664c:	2b01      	cmp	r3, #1
 800664e:	f040 8146 	bne.w	80068de <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006652:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006656:	f003 0310 	and.w	r3, r3, #16
 800665a:	2b00      	cmp	r3, #0
 800665c:	f000 813f 	beq.w	80068de <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006660:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006664:	f003 0310 	and.w	r3, r3, #16
 8006668:	2b00      	cmp	r3, #0
 800666a:	f000 8138 	beq.w	80068de <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	2210      	movs	r2, #16
 8006674:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006680:	2b40      	cmp	r3, #64	; 0x40
 8006682:	f040 80b4 	bne.w	80067ee <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006692:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006696:	2b00      	cmp	r3, #0
 8006698:	f000 815f 	beq.w	800695a <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80066a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80066a6:	429a      	cmp	r2, r3
 80066a8:	f080 8157 	bcs.w	800695a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80066b2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f003 0320 	and.w	r3, r3, #32
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	f040 8085 	bne.w	80067d2 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80066d4:	e853 3f00 	ldrex	r3, [r3]
 80066d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80066dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80066e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	461a      	mov	r2, r3
 80066ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80066f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80066f6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80066fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006702:	e841 2300 	strex	r3, r2, [r1]
 8006706:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800670a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800670e:	2b00      	cmp	r3, #0
 8006710:	d1da      	bne.n	80066c8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	3308      	adds	r3, #8
 8006718:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800671a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800671c:	e853 3f00 	ldrex	r3, [r3]
 8006720:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006722:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006724:	f023 0301 	bic.w	r3, r3, #1
 8006728:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	3308      	adds	r3, #8
 8006732:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006736:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800673a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800673c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800673e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006742:	e841 2300 	strex	r3, r2, [r1]
 8006746:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006748:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800674a:	2b00      	cmp	r3, #0
 800674c:	d1e1      	bne.n	8006712 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	3308      	adds	r3, #8
 8006754:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006756:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006758:	e853 3f00 	ldrex	r3, [r3]
 800675c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800675e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006760:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006764:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	3308      	adds	r3, #8
 800676e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006772:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006774:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006776:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006778:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800677a:	e841 2300 	strex	r3, r2, [r1]
 800677e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006780:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006782:	2b00      	cmp	r3, #0
 8006784:	d1e3      	bne.n	800674e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2220      	movs	r2, #32
 800678a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2200      	movs	r2, #0
 8006790:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006798:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800679a:	e853 3f00 	ldrex	r3, [r3]
 800679e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80067a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067a2:	f023 0310 	bic.w	r3, r3, #16
 80067a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	461a      	mov	r2, r3
 80067b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80067b4:	65bb      	str	r3, [r7, #88]	; 0x58
 80067b6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067b8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80067ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80067bc:	e841 2300 	strex	r3, r2, [r1]
 80067c0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80067c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d1e4      	bne.n	8006792 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067cc:	4618      	mov	r0, r3
 80067ce:	f7fc f937 	bl	8002a40 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80067de:	b29b      	uxth	r3, r3
 80067e0:	1ad3      	subs	r3, r2, r3
 80067e2:	b29b      	uxth	r3, r3
 80067e4:	4619      	mov	r1, r3
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f000 f8de 	bl	80069a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80067ec:	e0b5      	b.n	800695a <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80067fa:	b29b      	uxth	r3, r3
 80067fc:	1ad3      	subs	r3, r2, r3
 80067fe:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006808:	b29b      	uxth	r3, r3
 800680a:	2b00      	cmp	r3, #0
 800680c:	f000 80a7 	beq.w	800695e <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8006810:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006814:	2b00      	cmp	r3, #0
 8006816:	f000 80a2 	beq.w	800695e <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006822:	e853 3f00 	ldrex	r3, [r3]
 8006826:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800682a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800682e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	461a      	mov	r2, r3
 8006838:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800683c:	647b      	str	r3, [r7, #68]	; 0x44
 800683e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006840:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006842:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006844:	e841 2300 	strex	r3, r2, [r1]
 8006848:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800684a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800684c:	2b00      	cmp	r3, #0
 800684e:	d1e4      	bne.n	800681a <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	3308      	adds	r3, #8
 8006856:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800685a:	e853 3f00 	ldrex	r3, [r3]
 800685e:	623b      	str	r3, [r7, #32]
   return(result);
 8006860:	6a3b      	ldr	r3, [r7, #32]
 8006862:	f023 0301 	bic.w	r3, r3, #1
 8006866:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	3308      	adds	r3, #8
 8006870:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006874:	633a      	str	r2, [r7, #48]	; 0x30
 8006876:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006878:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800687a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800687c:	e841 2300 	strex	r3, r2, [r1]
 8006880:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006884:	2b00      	cmp	r3, #0
 8006886:	d1e3      	bne.n	8006850 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2220      	movs	r2, #32
 800688c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2200      	movs	r2, #0
 8006892:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2200      	movs	r2, #0
 8006898:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	e853 3f00 	ldrex	r3, [r3]
 80068a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f023 0310 	bic.w	r3, r3, #16
 80068ae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	461a      	mov	r2, r3
 80068b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80068bc:	61fb      	str	r3, [r7, #28]
 80068be:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c0:	69b9      	ldr	r1, [r7, #24]
 80068c2:	69fa      	ldr	r2, [r7, #28]
 80068c4:	e841 2300 	strex	r3, r2, [r1]
 80068c8:	617b      	str	r3, [r7, #20]
   return(result);
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d1e4      	bne.n	800689a <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80068d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80068d4:	4619      	mov	r1, r3
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f000 f866 	bl	80069a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80068dc:	e03f      	b.n	800695e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80068de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d00e      	beq.n	8006908 <HAL_UART_IRQHandler+0x560>
 80068ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d008      	beq.n	8006908 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80068fe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f000 ff20 	bl	8007746 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006906:	e02d      	b.n	8006964 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006908:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800690c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006910:	2b00      	cmp	r3, #0
 8006912:	d00e      	beq.n	8006932 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006914:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006918:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800691c:	2b00      	cmp	r3, #0
 800691e:	d008      	beq.n	8006932 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006924:	2b00      	cmp	r3, #0
 8006926:	d01c      	beq.n	8006962 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	4798      	blx	r3
    }
    return;
 8006930:	e017      	b.n	8006962 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006932:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800693a:	2b00      	cmp	r3, #0
 800693c:	d012      	beq.n	8006964 <HAL_UART_IRQHandler+0x5bc>
 800693e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006946:	2b00      	cmp	r3, #0
 8006948:	d00c      	beq.n	8006964 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f000 fed1 	bl	80076f2 <UART_EndTransmit_IT>
    return;
 8006950:	e008      	b.n	8006964 <HAL_UART_IRQHandler+0x5bc>
      return;
 8006952:	bf00      	nop
 8006954:	e006      	b.n	8006964 <HAL_UART_IRQHandler+0x5bc>
    return;
 8006956:	bf00      	nop
 8006958:	e004      	b.n	8006964 <HAL_UART_IRQHandler+0x5bc>
      return;
 800695a:	bf00      	nop
 800695c:	e002      	b.n	8006964 <HAL_UART_IRQHandler+0x5bc>
      return;
 800695e:	bf00      	nop
 8006960:	e000      	b.n	8006964 <HAL_UART_IRQHandler+0x5bc>
    return;
 8006962:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006964:	37e8      	adds	r7, #232	; 0xe8
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}
 800696a:	bf00      	nop

0800696c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800696c:	b480      	push	{r7}
 800696e:	b083      	sub	sp, #12
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006974:	bf00      	nop
 8006976:	370c      	adds	r7, #12
 8006978:	46bd      	mov	sp, r7
 800697a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697e:	4770      	bx	lr

08006980 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006980:	b480      	push	{r7}
 8006982:	b083      	sub	sp, #12
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006988:	bf00      	nop
 800698a:	370c      	adds	r7, #12
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr

08006994 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006994:	b480      	push	{r7}
 8006996:	b083      	sub	sp, #12
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800699c:	bf00      	nop
 800699e:	370c      	adds	r7, #12
 80069a0:	46bd      	mov	sp, r7
 80069a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a6:	4770      	bx	lr

080069a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b083      	sub	sp, #12
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
 80069b0:	460b      	mov	r3, r1
 80069b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80069b4:	bf00      	nop
 80069b6:	370c      	adds	r7, #12
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr

080069c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069c4:	b08a      	sub	sp, #40	; 0x28
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80069ca:	2300      	movs	r3, #0
 80069cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	689a      	ldr	r2, [r3, #8]
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	691b      	ldr	r3, [r3, #16]
 80069d8:	431a      	orrs	r2, r3
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	695b      	ldr	r3, [r3, #20]
 80069de:	431a      	orrs	r2, r3
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	69db      	ldr	r3, [r3, #28]
 80069e4:	4313      	orrs	r3, r2
 80069e6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	681a      	ldr	r2, [r3, #0]
 80069ee:	4ba4      	ldr	r3, [pc, #656]	; (8006c80 <UART_SetConfig+0x2c0>)
 80069f0:	4013      	ands	r3, r2
 80069f2:	68fa      	ldr	r2, [r7, #12]
 80069f4:	6812      	ldr	r2, [r2, #0]
 80069f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80069f8:	430b      	orrs	r3, r1
 80069fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	68da      	ldr	r2, [r3, #12]
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	430a      	orrs	r2, r1
 8006a10:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	699b      	ldr	r3, [r3, #24]
 8006a16:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a99      	ldr	r2, [pc, #612]	; (8006c84 <UART_SetConfig+0x2c4>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d004      	beq.n	8006a2c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	6a1b      	ldr	r3, [r3, #32]
 8006a26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a3c:	430a      	orrs	r2, r1
 8006a3e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a90      	ldr	r2, [pc, #576]	; (8006c88 <UART_SetConfig+0x2c8>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d126      	bne.n	8006a98 <UART_SetConfig+0xd8>
 8006a4a:	4b90      	ldr	r3, [pc, #576]	; (8006c8c <UART_SetConfig+0x2cc>)
 8006a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a50:	f003 0303 	and.w	r3, r3, #3
 8006a54:	2b03      	cmp	r3, #3
 8006a56:	d81b      	bhi.n	8006a90 <UART_SetConfig+0xd0>
 8006a58:	a201      	add	r2, pc, #4	; (adr r2, 8006a60 <UART_SetConfig+0xa0>)
 8006a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a5e:	bf00      	nop
 8006a60:	08006a71 	.word	0x08006a71
 8006a64:	08006a81 	.word	0x08006a81
 8006a68:	08006a79 	.word	0x08006a79
 8006a6c:	08006a89 	.word	0x08006a89
 8006a70:	2301      	movs	r3, #1
 8006a72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a76:	e116      	b.n	8006ca6 <UART_SetConfig+0x2e6>
 8006a78:	2302      	movs	r3, #2
 8006a7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a7e:	e112      	b.n	8006ca6 <UART_SetConfig+0x2e6>
 8006a80:	2304      	movs	r3, #4
 8006a82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a86:	e10e      	b.n	8006ca6 <UART_SetConfig+0x2e6>
 8006a88:	2308      	movs	r3, #8
 8006a8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a8e:	e10a      	b.n	8006ca6 <UART_SetConfig+0x2e6>
 8006a90:	2310      	movs	r3, #16
 8006a92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a96:	e106      	b.n	8006ca6 <UART_SetConfig+0x2e6>
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a7c      	ldr	r2, [pc, #496]	; (8006c90 <UART_SetConfig+0x2d0>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d138      	bne.n	8006b14 <UART_SetConfig+0x154>
 8006aa2:	4b7a      	ldr	r3, [pc, #488]	; (8006c8c <UART_SetConfig+0x2cc>)
 8006aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aa8:	f003 030c 	and.w	r3, r3, #12
 8006aac:	2b0c      	cmp	r3, #12
 8006aae:	d82d      	bhi.n	8006b0c <UART_SetConfig+0x14c>
 8006ab0:	a201      	add	r2, pc, #4	; (adr r2, 8006ab8 <UART_SetConfig+0xf8>)
 8006ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ab6:	bf00      	nop
 8006ab8:	08006aed 	.word	0x08006aed
 8006abc:	08006b0d 	.word	0x08006b0d
 8006ac0:	08006b0d 	.word	0x08006b0d
 8006ac4:	08006b0d 	.word	0x08006b0d
 8006ac8:	08006afd 	.word	0x08006afd
 8006acc:	08006b0d 	.word	0x08006b0d
 8006ad0:	08006b0d 	.word	0x08006b0d
 8006ad4:	08006b0d 	.word	0x08006b0d
 8006ad8:	08006af5 	.word	0x08006af5
 8006adc:	08006b0d 	.word	0x08006b0d
 8006ae0:	08006b0d 	.word	0x08006b0d
 8006ae4:	08006b0d 	.word	0x08006b0d
 8006ae8:	08006b05 	.word	0x08006b05
 8006aec:	2300      	movs	r3, #0
 8006aee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006af2:	e0d8      	b.n	8006ca6 <UART_SetConfig+0x2e6>
 8006af4:	2302      	movs	r3, #2
 8006af6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006afa:	e0d4      	b.n	8006ca6 <UART_SetConfig+0x2e6>
 8006afc:	2304      	movs	r3, #4
 8006afe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b02:	e0d0      	b.n	8006ca6 <UART_SetConfig+0x2e6>
 8006b04:	2308      	movs	r3, #8
 8006b06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b0a:	e0cc      	b.n	8006ca6 <UART_SetConfig+0x2e6>
 8006b0c:	2310      	movs	r3, #16
 8006b0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b12:	e0c8      	b.n	8006ca6 <UART_SetConfig+0x2e6>
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a5e      	ldr	r2, [pc, #376]	; (8006c94 <UART_SetConfig+0x2d4>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d125      	bne.n	8006b6a <UART_SetConfig+0x1aa>
 8006b1e:	4b5b      	ldr	r3, [pc, #364]	; (8006c8c <UART_SetConfig+0x2cc>)
 8006b20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b24:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006b28:	2b30      	cmp	r3, #48	; 0x30
 8006b2a:	d016      	beq.n	8006b5a <UART_SetConfig+0x19a>
 8006b2c:	2b30      	cmp	r3, #48	; 0x30
 8006b2e:	d818      	bhi.n	8006b62 <UART_SetConfig+0x1a2>
 8006b30:	2b20      	cmp	r3, #32
 8006b32:	d00a      	beq.n	8006b4a <UART_SetConfig+0x18a>
 8006b34:	2b20      	cmp	r3, #32
 8006b36:	d814      	bhi.n	8006b62 <UART_SetConfig+0x1a2>
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d002      	beq.n	8006b42 <UART_SetConfig+0x182>
 8006b3c:	2b10      	cmp	r3, #16
 8006b3e:	d008      	beq.n	8006b52 <UART_SetConfig+0x192>
 8006b40:	e00f      	b.n	8006b62 <UART_SetConfig+0x1a2>
 8006b42:	2300      	movs	r3, #0
 8006b44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b48:	e0ad      	b.n	8006ca6 <UART_SetConfig+0x2e6>
 8006b4a:	2302      	movs	r3, #2
 8006b4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b50:	e0a9      	b.n	8006ca6 <UART_SetConfig+0x2e6>
 8006b52:	2304      	movs	r3, #4
 8006b54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b58:	e0a5      	b.n	8006ca6 <UART_SetConfig+0x2e6>
 8006b5a:	2308      	movs	r3, #8
 8006b5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b60:	e0a1      	b.n	8006ca6 <UART_SetConfig+0x2e6>
 8006b62:	2310      	movs	r3, #16
 8006b64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b68:	e09d      	b.n	8006ca6 <UART_SetConfig+0x2e6>
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a4a      	ldr	r2, [pc, #296]	; (8006c98 <UART_SetConfig+0x2d8>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d125      	bne.n	8006bc0 <UART_SetConfig+0x200>
 8006b74:	4b45      	ldr	r3, [pc, #276]	; (8006c8c <UART_SetConfig+0x2cc>)
 8006b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b7a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006b7e:	2bc0      	cmp	r3, #192	; 0xc0
 8006b80:	d016      	beq.n	8006bb0 <UART_SetConfig+0x1f0>
 8006b82:	2bc0      	cmp	r3, #192	; 0xc0
 8006b84:	d818      	bhi.n	8006bb8 <UART_SetConfig+0x1f8>
 8006b86:	2b80      	cmp	r3, #128	; 0x80
 8006b88:	d00a      	beq.n	8006ba0 <UART_SetConfig+0x1e0>
 8006b8a:	2b80      	cmp	r3, #128	; 0x80
 8006b8c:	d814      	bhi.n	8006bb8 <UART_SetConfig+0x1f8>
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d002      	beq.n	8006b98 <UART_SetConfig+0x1d8>
 8006b92:	2b40      	cmp	r3, #64	; 0x40
 8006b94:	d008      	beq.n	8006ba8 <UART_SetConfig+0x1e8>
 8006b96:	e00f      	b.n	8006bb8 <UART_SetConfig+0x1f8>
 8006b98:	2300      	movs	r3, #0
 8006b9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b9e:	e082      	b.n	8006ca6 <UART_SetConfig+0x2e6>
 8006ba0:	2302      	movs	r3, #2
 8006ba2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ba6:	e07e      	b.n	8006ca6 <UART_SetConfig+0x2e6>
 8006ba8:	2304      	movs	r3, #4
 8006baa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bae:	e07a      	b.n	8006ca6 <UART_SetConfig+0x2e6>
 8006bb0:	2308      	movs	r3, #8
 8006bb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bb6:	e076      	b.n	8006ca6 <UART_SetConfig+0x2e6>
 8006bb8:	2310      	movs	r3, #16
 8006bba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bbe:	e072      	b.n	8006ca6 <UART_SetConfig+0x2e6>
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a35      	ldr	r2, [pc, #212]	; (8006c9c <UART_SetConfig+0x2dc>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d12a      	bne.n	8006c20 <UART_SetConfig+0x260>
 8006bca:	4b30      	ldr	r3, [pc, #192]	; (8006c8c <UART_SetConfig+0x2cc>)
 8006bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bd4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006bd8:	d01a      	beq.n	8006c10 <UART_SetConfig+0x250>
 8006bda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006bde:	d81b      	bhi.n	8006c18 <UART_SetConfig+0x258>
 8006be0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006be4:	d00c      	beq.n	8006c00 <UART_SetConfig+0x240>
 8006be6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bea:	d815      	bhi.n	8006c18 <UART_SetConfig+0x258>
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d003      	beq.n	8006bf8 <UART_SetConfig+0x238>
 8006bf0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bf4:	d008      	beq.n	8006c08 <UART_SetConfig+0x248>
 8006bf6:	e00f      	b.n	8006c18 <UART_SetConfig+0x258>
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bfe:	e052      	b.n	8006ca6 <UART_SetConfig+0x2e6>
 8006c00:	2302      	movs	r3, #2
 8006c02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c06:	e04e      	b.n	8006ca6 <UART_SetConfig+0x2e6>
 8006c08:	2304      	movs	r3, #4
 8006c0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c0e:	e04a      	b.n	8006ca6 <UART_SetConfig+0x2e6>
 8006c10:	2308      	movs	r3, #8
 8006c12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c16:	e046      	b.n	8006ca6 <UART_SetConfig+0x2e6>
 8006c18:	2310      	movs	r3, #16
 8006c1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c1e:	e042      	b.n	8006ca6 <UART_SetConfig+0x2e6>
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a17      	ldr	r2, [pc, #92]	; (8006c84 <UART_SetConfig+0x2c4>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d13a      	bne.n	8006ca0 <UART_SetConfig+0x2e0>
 8006c2a:	4b18      	ldr	r3, [pc, #96]	; (8006c8c <UART_SetConfig+0x2cc>)
 8006c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c30:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006c34:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c38:	d01a      	beq.n	8006c70 <UART_SetConfig+0x2b0>
 8006c3a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c3e:	d81b      	bhi.n	8006c78 <UART_SetConfig+0x2b8>
 8006c40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c44:	d00c      	beq.n	8006c60 <UART_SetConfig+0x2a0>
 8006c46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c4a:	d815      	bhi.n	8006c78 <UART_SetConfig+0x2b8>
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d003      	beq.n	8006c58 <UART_SetConfig+0x298>
 8006c50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c54:	d008      	beq.n	8006c68 <UART_SetConfig+0x2a8>
 8006c56:	e00f      	b.n	8006c78 <UART_SetConfig+0x2b8>
 8006c58:	2300      	movs	r3, #0
 8006c5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c5e:	e022      	b.n	8006ca6 <UART_SetConfig+0x2e6>
 8006c60:	2302      	movs	r3, #2
 8006c62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c66:	e01e      	b.n	8006ca6 <UART_SetConfig+0x2e6>
 8006c68:	2304      	movs	r3, #4
 8006c6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c6e:	e01a      	b.n	8006ca6 <UART_SetConfig+0x2e6>
 8006c70:	2308      	movs	r3, #8
 8006c72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c76:	e016      	b.n	8006ca6 <UART_SetConfig+0x2e6>
 8006c78:	2310      	movs	r3, #16
 8006c7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c7e:	e012      	b.n	8006ca6 <UART_SetConfig+0x2e6>
 8006c80:	efff69f3 	.word	0xefff69f3
 8006c84:	40008000 	.word	0x40008000
 8006c88:	40013800 	.word	0x40013800
 8006c8c:	40021000 	.word	0x40021000
 8006c90:	40004400 	.word	0x40004400
 8006c94:	40004800 	.word	0x40004800
 8006c98:	40004c00 	.word	0x40004c00
 8006c9c:	40005000 	.word	0x40005000
 8006ca0:	2310      	movs	r3, #16
 8006ca2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a9f      	ldr	r2, [pc, #636]	; (8006f28 <UART_SetConfig+0x568>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d17a      	bne.n	8006da6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006cb0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006cb4:	2b08      	cmp	r3, #8
 8006cb6:	d824      	bhi.n	8006d02 <UART_SetConfig+0x342>
 8006cb8:	a201      	add	r2, pc, #4	; (adr r2, 8006cc0 <UART_SetConfig+0x300>)
 8006cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cbe:	bf00      	nop
 8006cc0:	08006ce5 	.word	0x08006ce5
 8006cc4:	08006d03 	.word	0x08006d03
 8006cc8:	08006ced 	.word	0x08006ced
 8006ccc:	08006d03 	.word	0x08006d03
 8006cd0:	08006cf3 	.word	0x08006cf3
 8006cd4:	08006d03 	.word	0x08006d03
 8006cd8:	08006d03 	.word	0x08006d03
 8006cdc:	08006d03 	.word	0x08006d03
 8006ce0:	08006cfb 	.word	0x08006cfb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ce4:	f7fe f96a 	bl	8004fbc <HAL_RCC_GetPCLK1Freq>
 8006ce8:	61f8      	str	r0, [r7, #28]
        break;
 8006cea:	e010      	b.n	8006d0e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006cec:	4b8f      	ldr	r3, [pc, #572]	; (8006f2c <UART_SetConfig+0x56c>)
 8006cee:	61fb      	str	r3, [r7, #28]
        break;
 8006cf0:	e00d      	b.n	8006d0e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006cf2:	f7fe f8cb 	bl	8004e8c <HAL_RCC_GetSysClockFreq>
 8006cf6:	61f8      	str	r0, [r7, #28]
        break;
 8006cf8:	e009      	b.n	8006d0e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cfe:	61fb      	str	r3, [r7, #28]
        break;
 8006d00:	e005      	b.n	8006d0e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006d02:	2300      	movs	r3, #0
 8006d04:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006d06:	2301      	movs	r3, #1
 8006d08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006d0c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006d0e:	69fb      	ldr	r3, [r7, #28]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	f000 80fb 	beq.w	8006f0c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	685a      	ldr	r2, [r3, #4]
 8006d1a:	4613      	mov	r3, r2
 8006d1c:	005b      	lsls	r3, r3, #1
 8006d1e:	4413      	add	r3, r2
 8006d20:	69fa      	ldr	r2, [r7, #28]
 8006d22:	429a      	cmp	r2, r3
 8006d24:	d305      	bcc.n	8006d32 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006d2c:	69fa      	ldr	r2, [r7, #28]
 8006d2e:	429a      	cmp	r2, r3
 8006d30:	d903      	bls.n	8006d3a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006d32:	2301      	movs	r3, #1
 8006d34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006d38:	e0e8      	b.n	8006f0c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006d3a:	69fb      	ldr	r3, [r7, #28]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	461c      	mov	r4, r3
 8006d40:	4615      	mov	r5, r2
 8006d42:	f04f 0200 	mov.w	r2, #0
 8006d46:	f04f 0300 	mov.w	r3, #0
 8006d4a:	022b      	lsls	r3, r5, #8
 8006d4c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006d50:	0222      	lsls	r2, r4, #8
 8006d52:	68f9      	ldr	r1, [r7, #12]
 8006d54:	6849      	ldr	r1, [r1, #4]
 8006d56:	0849      	lsrs	r1, r1, #1
 8006d58:	2000      	movs	r0, #0
 8006d5a:	4688      	mov	r8, r1
 8006d5c:	4681      	mov	r9, r0
 8006d5e:	eb12 0a08 	adds.w	sl, r2, r8
 8006d62:	eb43 0b09 	adc.w	fp, r3, r9
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	603b      	str	r3, [r7, #0]
 8006d6e:	607a      	str	r2, [r7, #4]
 8006d70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d74:	4650      	mov	r0, sl
 8006d76:	4659      	mov	r1, fp
 8006d78:	f7f9 ff66 	bl	8000c48 <__aeabi_uldivmod>
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	460b      	mov	r3, r1
 8006d80:	4613      	mov	r3, r2
 8006d82:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006d84:	69bb      	ldr	r3, [r7, #24]
 8006d86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d8a:	d308      	bcc.n	8006d9e <UART_SetConfig+0x3de>
 8006d8c:	69bb      	ldr	r3, [r7, #24]
 8006d8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d92:	d204      	bcs.n	8006d9e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	69ba      	ldr	r2, [r7, #24]
 8006d9a:	60da      	str	r2, [r3, #12]
 8006d9c:	e0b6      	b.n	8006f0c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006da4:	e0b2      	b.n	8006f0c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	69db      	ldr	r3, [r3, #28]
 8006daa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006dae:	d15e      	bne.n	8006e6e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006db0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006db4:	2b08      	cmp	r3, #8
 8006db6:	d828      	bhi.n	8006e0a <UART_SetConfig+0x44a>
 8006db8:	a201      	add	r2, pc, #4	; (adr r2, 8006dc0 <UART_SetConfig+0x400>)
 8006dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dbe:	bf00      	nop
 8006dc0:	08006de5 	.word	0x08006de5
 8006dc4:	08006ded 	.word	0x08006ded
 8006dc8:	08006df5 	.word	0x08006df5
 8006dcc:	08006e0b 	.word	0x08006e0b
 8006dd0:	08006dfb 	.word	0x08006dfb
 8006dd4:	08006e0b 	.word	0x08006e0b
 8006dd8:	08006e0b 	.word	0x08006e0b
 8006ddc:	08006e0b 	.word	0x08006e0b
 8006de0:	08006e03 	.word	0x08006e03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006de4:	f7fe f8ea 	bl	8004fbc <HAL_RCC_GetPCLK1Freq>
 8006de8:	61f8      	str	r0, [r7, #28]
        break;
 8006dea:	e014      	b.n	8006e16 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006dec:	f7fe f8fc 	bl	8004fe8 <HAL_RCC_GetPCLK2Freq>
 8006df0:	61f8      	str	r0, [r7, #28]
        break;
 8006df2:	e010      	b.n	8006e16 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006df4:	4b4d      	ldr	r3, [pc, #308]	; (8006f2c <UART_SetConfig+0x56c>)
 8006df6:	61fb      	str	r3, [r7, #28]
        break;
 8006df8:	e00d      	b.n	8006e16 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006dfa:	f7fe f847 	bl	8004e8c <HAL_RCC_GetSysClockFreq>
 8006dfe:	61f8      	str	r0, [r7, #28]
        break;
 8006e00:	e009      	b.n	8006e16 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e06:	61fb      	str	r3, [r7, #28]
        break;
 8006e08:	e005      	b.n	8006e16 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006e14:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006e16:	69fb      	ldr	r3, [r7, #28]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d077      	beq.n	8006f0c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006e1c:	69fb      	ldr	r3, [r7, #28]
 8006e1e:	005a      	lsls	r2, r3, #1
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	085b      	lsrs	r3, r3, #1
 8006e26:	441a      	add	r2, r3
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e30:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e32:	69bb      	ldr	r3, [r7, #24]
 8006e34:	2b0f      	cmp	r3, #15
 8006e36:	d916      	bls.n	8006e66 <UART_SetConfig+0x4a6>
 8006e38:	69bb      	ldr	r3, [r7, #24]
 8006e3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e3e:	d212      	bcs.n	8006e66 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e40:	69bb      	ldr	r3, [r7, #24]
 8006e42:	b29b      	uxth	r3, r3
 8006e44:	f023 030f 	bic.w	r3, r3, #15
 8006e48:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e4a:	69bb      	ldr	r3, [r7, #24]
 8006e4c:	085b      	lsrs	r3, r3, #1
 8006e4e:	b29b      	uxth	r3, r3
 8006e50:	f003 0307 	and.w	r3, r3, #7
 8006e54:	b29a      	uxth	r2, r3
 8006e56:	8afb      	ldrh	r3, [r7, #22]
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	8afa      	ldrh	r2, [r7, #22]
 8006e62:	60da      	str	r2, [r3, #12]
 8006e64:	e052      	b.n	8006f0c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006e66:	2301      	movs	r3, #1
 8006e68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006e6c:	e04e      	b.n	8006f0c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006e6e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006e72:	2b08      	cmp	r3, #8
 8006e74:	d827      	bhi.n	8006ec6 <UART_SetConfig+0x506>
 8006e76:	a201      	add	r2, pc, #4	; (adr r2, 8006e7c <UART_SetConfig+0x4bc>)
 8006e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e7c:	08006ea1 	.word	0x08006ea1
 8006e80:	08006ea9 	.word	0x08006ea9
 8006e84:	08006eb1 	.word	0x08006eb1
 8006e88:	08006ec7 	.word	0x08006ec7
 8006e8c:	08006eb7 	.word	0x08006eb7
 8006e90:	08006ec7 	.word	0x08006ec7
 8006e94:	08006ec7 	.word	0x08006ec7
 8006e98:	08006ec7 	.word	0x08006ec7
 8006e9c:	08006ebf 	.word	0x08006ebf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ea0:	f7fe f88c 	bl	8004fbc <HAL_RCC_GetPCLK1Freq>
 8006ea4:	61f8      	str	r0, [r7, #28]
        break;
 8006ea6:	e014      	b.n	8006ed2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ea8:	f7fe f89e 	bl	8004fe8 <HAL_RCC_GetPCLK2Freq>
 8006eac:	61f8      	str	r0, [r7, #28]
        break;
 8006eae:	e010      	b.n	8006ed2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006eb0:	4b1e      	ldr	r3, [pc, #120]	; (8006f2c <UART_SetConfig+0x56c>)
 8006eb2:	61fb      	str	r3, [r7, #28]
        break;
 8006eb4:	e00d      	b.n	8006ed2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006eb6:	f7fd ffe9 	bl	8004e8c <HAL_RCC_GetSysClockFreq>
 8006eba:	61f8      	str	r0, [r7, #28]
        break;
 8006ebc:	e009      	b.n	8006ed2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ebe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ec2:	61fb      	str	r3, [r7, #28]
        break;
 8006ec4:	e005      	b.n	8006ed2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006ed0:	bf00      	nop
    }

    if (pclk != 0U)
 8006ed2:	69fb      	ldr	r3, [r7, #28]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d019      	beq.n	8006f0c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	085a      	lsrs	r2, r3, #1
 8006ede:	69fb      	ldr	r3, [r7, #28]
 8006ee0:	441a      	add	r2, r3
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eea:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006eec:	69bb      	ldr	r3, [r7, #24]
 8006eee:	2b0f      	cmp	r3, #15
 8006ef0:	d909      	bls.n	8006f06 <UART_SetConfig+0x546>
 8006ef2:	69bb      	ldr	r3, [r7, #24]
 8006ef4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ef8:	d205      	bcs.n	8006f06 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006efa:	69bb      	ldr	r3, [r7, #24]
 8006efc:	b29a      	uxth	r2, r3
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	60da      	str	r2, [r3, #12]
 8006f04:	e002      	b.n	8006f0c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006f06:	2301      	movs	r3, #1
 8006f08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2200      	movs	r2, #0
 8006f16:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006f18:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	3728      	adds	r7, #40	; 0x28
 8006f20:	46bd      	mov	sp, r7
 8006f22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f26:	bf00      	nop
 8006f28:	40008000 	.word	0x40008000
 8006f2c:	00f42400 	.word	0x00f42400

08006f30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b083      	sub	sp, #12
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f3c:	f003 0301 	and.w	r3, r3, #1
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d00a      	beq.n	8006f5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	430a      	orrs	r2, r1
 8006f58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f5e:	f003 0302 	and.w	r3, r3, #2
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d00a      	beq.n	8006f7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	430a      	orrs	r2, r1
 8006f7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f80:	f003 0304 	and.w	r3, r3, #4
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d00a      	beq.n	8006f9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	430a      	orrs	r2, r1
 8006f9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fa2:	f003 0308 	and.w	r3, r3, #8
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d00a      	beq.n	8006fc0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	430a      	orrs	r2, r1
 8006fbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc4:	f003 0310 	and.w	r3, r3, #16
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d00a      	beq.n	8006fe2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	689b      	ldr	r3, [r3, #8]
 8006fd2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	430a      	orrs	r2, r1
 8006fe0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe6:	f003 0320 	and.w	r3, r3, #32
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d00a      	beq.n	8007004 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	689b      	ldr	r3, [r3, #8]
 8006ff4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	430a      	orrs	r2, r1
 8007002:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007008:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800700c:	2b00      	cmp	r3, #0
 800700e:	d01a      	beq.n	8007046 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	430a      	orrs	r2, r1
 8007024:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800702a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800702e:	d10a      	bne.n	8007046 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	430a      	orrs	r2, r1
 8007044:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800704a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800704e:	2b00      	cmp	r3, #0
 8007050:	d00a      	beq.n	8007068 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	685b      	ldr	r3, [r3, #4]
 8007058:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	430a      	orrs	r2, r1
 8007066:	605a      	str	r2, [r3, #4]
  }
}
 8007068:	bf00      	nop
 800706a:	370c      	adds	r7, #12
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr

08007074 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b086      	sub	sp, #24
 8007078:	af02      	add	r7, sp, #8
 800707a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2200      	movs	r2, #0
 8007080:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007084:	f7fb fa82 	bl	800258c <HAL_GetTick>
 8007088:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f003 0308 	and.w	r3, r3, #8
 8007094:	2b08      	cmp	r3, #8
 8007096:	d10e      	bne.n	80070b6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007098:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800709c:	9300      	str	r3, [sp, #0]
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	2200      	movs	r2, #0
 80070a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f000 f82d 	bl	8007106 <UART_WaitOnFlagUntilTimeout>
 80070ac:	4603      	mov	r3, r0
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d001      	beq.n	80070b6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80070b2:	2303      	movs	r3, #3
 80070b4:	e023      	b.n	80070fe <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f003 0304 	and.w	r3, r3, #4
 80070c0:	2b04      	cmp	r3, #4
 80070c2:	d10e      	bne.n	80070e2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80070c8:	9300      	str	r3, [sp, #0]
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2200      	movs	r2, #0
 80070ce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f000 f817 	bl	8007106 <UART_WaitOnFlagUntilTimeout>
 80070d8:	4603      	mov	r3, r0
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d001      	beq.n	80070e2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80070de:	2303      	movs	r3, #3
 80070e0:	e00d      	b.n	80070fe <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2220      	movs	r2, #32
 80070e6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2220      	movs	r2, #32
 80070ec:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2200      	movs	r2, #0
 80070f2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2200      	movs	r2, #0
 80070f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80070fc:	2300      	movs	r3, #0
}
 80070fe:	4618      	mov	r0, r3
 8007100:	3710      	adds	r7, #16
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}

08007106 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007106:	b580      	push	{r7, lr}
 8007108:	b09c      	sub	sp, #112	; 0x70
 800710a:	af00      	add	r7, sp, #0
 800710c:	60f8      	str	r0, [r7, #12]
 800710e:	60b9      	str	r1, [r7, #8]
 8007110:	603b      	str	r3, [r7, #0]
 8007112:	4613      	mov	r3, r2
 8007114:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007116:	e0a5      	b.n	8007264 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007118:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800711a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800711e:	f000 80a1 	beq.w	8007264 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007122:	f7fb fa33 	bl	800258c <HAL_GetTick>
 8007126:	4602      	mov	r2, r0
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	1ad3      	subs	r3, r2, r3
 800712c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800712e:	429a      	cmp	r2, r3
 8007130:	d302      	bcc.n	8007138 <UART_WaitOnFlagUntilTimeout+0x32>
 8007132:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007134:	2b00      	cmp	r3, #0
 8007136:	d13e      	bne.n	80071b6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800713e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007140:	e853 3f00 	ldrex	r3, [r3]
 8007144:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007146:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007148:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800714c:	667b      	str	r3, [r7, #100]	; 0x64
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	461a      	mov	r2, r3
 8007154:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007156:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007158:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800715a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800715c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800715e:	e841 2300 	strex	r3, r2, [r1]
 8007162:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007164:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007166:	2b00      	cmp	r3, #0
 8007168:	d1e6      	bne.n	8007138 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	3308      	adds	r3, #8
 8007170:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007172:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007174:	e853 3f00 	ldrex	r3, [r3]
 8007178:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800717a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800717c:	f023 0301 	bic.w	r3, r3, #1
 8007180:	663b      	str	r3, [r7, #96]	; 0x60
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	3308      	adds	r3, #8
 8007188:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800718a:	64ba      	str	r2, [r7, #72]	; 0x48
 800718c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800718e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007190:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007192:	e841 2300 	strex	r3, r2, [r1]
 8007196:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007198:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800719a:	2b00      	cmp	r3, #0
 800719c:	d1e5      	bne.n	800716a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2220      	movs	r2, #32
 80071a2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	2220      	movs	r2, #32
 80071a8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	2200      	movs	r2, #0
 80071ae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80071b2:	2303      	movs	r3, #3
 80071b4:	e067      	b.n	8007286 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f003 0304 	and.w	r3, r3, #4
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d04f      	beq.n	8007264 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	69db      	ldr	r3, [r3, #28]
 80071ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80071ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071d2:	d147      	bne.n	8007264 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80071dc:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071e6:	e853 3f00 	ldrex	r3, [r3]
 80071ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80071ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80071f2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	461a      	mov	r2, r3
 80071fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071fc:	637b      	str	r3, [r7, #52]	; 0x34
 80071fe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007200:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007202:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007204:	e841 2300 	strex	r3, r2, [r1]
 8007208:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800720a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800720c:	2b00      	cmp	r3, #0
 800720e:	d1e6      	bne.n	80071de <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	3308      	adds	r3, #8
 8007216:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	e853 3f00 	ldrex	r3, [r3]
 800721e:	613b      	str	r3, [r7, #16]
   return(result);
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	f023 0301 	bic.w	r3, r3, #1
 8007226:	66bb      	str	r3, [r7, #104]	; 0x68
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	3308      	adds	r3, #8
 800722e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007230:	623a      	str	r2, [r7, #32]
 8007232:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007234:	69f9      	ldr	r1, [r7, #28]
 8007236:	6a3a      	ldr	r2, [r7, #32]
 8007238:	e841 2300 	strex	r3, r2, [r1]
 800723c:	61bb      	str	r3, [r7, #24]
   return(result);
 800723e:	69bb      	ldr	r3, [r7, #24]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d1e5      	bne.n	8007210 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	2220      	movs	r2, #32
 8007248:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2220      	movs	r2, #32
 800724e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2220      	movs	r2, #32
 8007254:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2200      	movs	r2, #0
 800725c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007260:	2303      	movs	r3, #3
 8007262:	e010      	b.n	8007286 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	69da      	ldr	r2, [r3, #28]
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	4013      	ands	r3, r2
 800726e:	68ba      	ldr	r2, [r7, #8]
 8007270:	429a      	cmp	r2, r3
 8007272:	bf0c      	ite	eq
 8007274:	2301      	moveq	r3, #1
 8007276:	2300      	movne	r3, #0
 8007278:	b2db      	uxtb	r3, r3
 800727a:	461a      	mov	r2, r3
 800727c:	79fb      	ldrb	r3, [r7, #7]
 800727e:	429a      	cmp	r2, r3
 8007280:	f43f af4a 	beq.w	8007118 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007284:	2300      	movs	r3, #0
}
 8007286:	4618      	mov	r0, r3
 8007288:	3770      	adds	r7, #112	; 0x70
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}
	...

08007290 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b096      	sub	sp, #88	; 0x58
 8007294:	af00      	add	r7, sp, #0
 8007296:	60f8      	str	r0, [r7, #12]
 8007298:	60b9      	str	r1, [r7, #8]
 800729a:	4613      	mov	r3, r2
 800729c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	68ba      	ldr	r2, [r7, #8]
 80072a2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	88fa      	ldrh	r2, [r7, #6]
 80072a8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2200      	movs	r2, #0
 80072b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	2222      	movs	r2, #34	; 0x22
 80072b8:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d02b      	beq.n	800731a <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072c6:	4a42      	ldr	r2, [pc, #264]	; (80073d0 <UART_Start_Receive_DMA+0x140>)
 80072c8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072ce:	4a41      	ldr	r2, [pc, #260]	; (80073d4 <UART_Start_Receive_DMA+0x144>)
 80072d0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072d6:	4a40      	ldr	r2, [pc, #256]	; (80073d8 <UART_Start_Receive_DMA+0x148>)
 80072d8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072de:	2200      	movs	r2, #0
 80072e0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	3324      	adds	r3, #36	; 0x24
 80072ec:	4619      	mov	r1, r3
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072f2:	461a      	mov	r2, r3
 80072f4:	88fb      	ldrh	r3, [r7, #6]
 80072f6:	f7fb fb43 	bl	8002980 <HAL_DMA_Start_IT>
 80072fa:	4603      	mov	r3, r0
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d00c      	beq.n	800731a <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2210      	movs	r2, #16
 8007304:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2200      	movs	r2, #0
 800730c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	2220      	movs	r2, #32
 8007314:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 8007316:	2301      	movs	r3, #1
 8007318:	e055      	b.n	80073c6 <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2200      	movs	r2, #0
 800731e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	691b      	ldr	r3, [r3, #16]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d018      	beq.n	800735c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007330:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007332:	e853 3f00 	ldrex	r3, [r3]
 8007336:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800733a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800733e:	657b      	str	r3, [r7, #84]	; 0x54
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	461a      	mov	r2, r3
 8007346:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007348:	64bb      	str	r3, [r7, #72]	; 0x48
 800734a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800734c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800734e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007350:	e841 2300 	strex	r3, r2, [r1]
 8007354:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007356:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007358:	2b00      	cmp	r3, #0
 800735a:	d1e6      	bne.n	800732a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	3308      	adds	r3, #8
 8007362:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007366:	e853 3f00 	ldrex	r3, [r3]
 800736a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800736c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736e:	f043 0301 	orr.w	r3, r3, #1
 8007372:	653b      	str	r3, [r7, #80]	; 0x50
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	3308      	adds	r3, #8
 800737a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800737c:	637a      	str	r2, [r7, #52]	; 0x34
 800737e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007380:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007382:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007384:	e841 2300 	strex	r3, r2, [r1]
 8007388:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800738a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800738c:	2b00      	cmp	r3, #0
 800738e:	d1e5      	bne.n	800735c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	3308      	adds	r3, #8
 8007396:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	e853 3f00 	ldrex	r3, [r3]
 800739e:	613b      	str	r3, [r7, #16]
   return(result);
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	3308      	adds	r3, #8
 80073ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80073b0:	623a      	str	r2, [r7, #32]
 80073b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b4:	69f9      	ldr	r1, [r7, #28]
 80073b6:	6a3a      	ldr	r2, [r7, #32]
 80073b8:	e841 2300 	strex	r3, r2, [r1]
 80073bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80073be:	69bb      	ldr	r3, [r7, #24]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d1e5      	bne.n	8007390 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80073c4:	2300      	movs	r3, #0
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3758      	adds	r7, #88	; 0x58
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}
 80073ce:	bf00      	nop
 80073d0:	080074ef 	.word	0x080074ef
 80073d4:	08007613 	.word	0x08007613
 80073d8:	0800764b 	.word	0x0800764b

080073dc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80073dc:	b480      	push	{r7}
 80073de:	b089      	sub	sp, #36	; 0x24
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	e853 3f00 	ldrex	r3, [r3]
 80073f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80073f8:	61fb      	str	r3, [r7, #28]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	461a      	mov	r2, r3
 8007400:	69fb      	ldr	r3, [r7, #28]
 8007402:	61bb      	str	r3, [r7, #24]
 8007404:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007406:	6979      	ldr	r1, [r7, #20]
 8007408:	69ba      	ldr	r2, [r7, #24]
 800740a:	e841 2300 	strex	r3, r2, [r1]
 800740e:	613b      	str	r3, [r7, #16]
   return(result);
 8007410:	693b      	ldr	r3, [r7, #16]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d1e6      	bne.n	80073e4 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2220      	movs	r2, #32
 800741a:	679a      	str	r2, [r3, #120]	; 0x78
}
 800741c:	bf00      	nop
 800741e:	3724      	adds	r7, #36	; 0x24
 8007420:	46bd      	mov	sp, r7
 8007422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007426:	4770      	bx	lr

08007428 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007428:	b480      	push	{r7}
 800742a:	b095      	sub	sp, #84	; 0x54
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007438:	e853 3f00 	ldrex	r3, [r3]
 800743c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800743e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007440:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007444:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	461a      	mov	r2, r3
 800744c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800744e:	643b      	str	r3, [r7, #64]	; 0x40
 8007450:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007452:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007454:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007456:	e841 2300 	strex	r3, r2, [r1]
 800745a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800745c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800745e:	2b00      	cmp	r3, #0
 8007460:	d1e6      	bne.n	8007430 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	3308      	adds	r3, #8
 8007468:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800746a:	6a3b      	ldr	r3, [r7, #32]
 800746c:	e853 3f00 	ldrex	r3, [r3]
 8007470:	61fb      	str	r3, [r7, #28]
   return(result);
 8007472:	69fb      	ldr	r3, [r7, #28]
 8007474:	f023 0301 	bic.w	r3, r3, #1
 8007478:	64bb      	str	r3, [r7, #72]	; 0x48
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	3308      	adds	r3, #8
 8007480:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007482:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007484:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007486:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007488:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800748a:	e841 2300 	strex	r3, r2, [r1]
 800748e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007492:	2b00      	cmp	r3, #0
 8007494:	d1e5      	bne.n	8007462 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800749a:	2b01      	cmp	r3, #1
 800749c:	d118      	bne.n	80074d0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	e853 3f00 	ldrex	r3, [r3]
 80074aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	f023 0310 	bic.w	r3, r3, #16
 80074b2:	647b      	str	r3, [r7, #68]	; 0x44
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	461a      	mov	r2, r3
 80074ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074bc:	61bb      	str	r3, [r7, #24]
 80074be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074c0:	6979      	ldr	r1, [r7, #20]
 80074c2:	69ba      	ldr	r2, [r7, #24]
 80074c4:	e841 2300 	strex	r3, r2, [r1]
 80074c8:	613b      	str	r3, [r7, #16]
   return(result);
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d1e6      	bne.n	800749e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2220      	movs	r2, #32
 80074d4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2200      	movs	r2, #0
 80074da:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2200      	movs	r2, #0
 80074e0:	665a      	str	r2, [r3, #100]	; 0x64
}
 80074e2:	bf00      	nop
 80074e4:	3754      	adds	r7, #84	; 0x54
 80074e6:	46bd      	mov	sp, r7
 80074e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ec:	4770      	bx	lr

080074ee <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80074ee:	b580      	push	{r7, lr}
 80074f0:	b09c      	sub	sp, #112	; 0x70
 80074f2:	af00      	add	r7, sp, #0
 80074f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074fa:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f003 0320 	and.w	r3, r3, #32
 8007506:	2b00      	cmp	r3, #0
 8007508:	d170      	bne.n	80075ec <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 800750a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800750c:	2200      	movs	r2, #0
 800750e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007512:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007518:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800751a:	e853 3f00 	ldrex	r3, [r3]
 800751e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007520:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007522:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007526:	66bb      	str	r3, [r7, #104]	; 0x68
 8007528:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	461a      	mov	r2, r3
 800752e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007530:	65bb      	str	r3, [r7, #88]	; 0x58
 8007532:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007534:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007536:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007538:	e841 2300 	strex	r3, r2, [r1]
 800753c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800753e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007540:	2b00      	cmp	r3, #0
 8007542:	d1e6      	bne.n	8007512 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007544:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	3308      	adds	r3, #8
 800754a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800754c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800754e:	e853 3f00 	ldrex	r3, [r3]
 8007552:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007554:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007556:	f023 0301 	bic.w	r3, r3, #1
 800755a:	667b      	str	r3, [r7, #100]	; 0x64
 800755c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	3308      	adds	r3, #8
 8007562:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007564:	647a      	str	r2, [r7, #68]	; 0x44
 8007566:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007568:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800756a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800756c:	e841 2300 	strex	r3, r2, [r1]
 8007570:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007572:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007574:	2b00      	cmp	r3, #0
 8007576:	d1e5      	bne.n	8007544 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007578:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	3308      	adds	r3, #8
 800757e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007582:	e853 3f00 	ldrex	r3, [r3]
 8007586:	623b      	str	r3, [r7, #32]
   return(result);
 8007588:	6a3b      	ldr	r3, [r7, #32]
 800758a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800758e:	663b      	str	r3, [r7, #96]	; 0x60
 8007590:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	3308      	adds	r3, #8
 8007596:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007598:	633a      	str	r2, [r7, #48]	; 0x30
 800759a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800759c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800759e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075a0:	e841 2300 	strex	r3, r2, [r1]
 80075a4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80075a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d1e5      	bne.n	8007578 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80075ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075ae:	2220      	movs	r2, #32
 80075b0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075b6:	2b01      	cmp	r3, #1
 80075b8:	d118      	bne.n	80075ec <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075c0:	693b      	ldr	r3, [r7, #16]
 80075c2:	e853 3f00 	ldrex	r3, [r3]
 80075c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f023 0310 	bic.w	r3, r3, #16
 80075ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80075d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	461a      	mov	r2, r3
 80075d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80075d8:	61fb      	str	r3, [r7, #28]
 80075da:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075dc:	69b9      	ldr	r1, [r7, #24]
 80075de:	69fa      	ldr	r2, [r7, #28]
 80075e0:	e841 2300 	strex	r3, r2, [r1]
 80075e4:	617b      	str	r3, [r7, #20]
   return(result);
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d1e6      	bne.n	80075ba <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075f0:	2b01      	cmp	r3, #1
 80075f2:	d107      	bne.n	8007604 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80075f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075f6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80075fa:	4619      	mov	r1, r3
 80075fc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80075fe:	f7ff f9d3 	bl	80069a8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007602:	e002      	b.n	800760a <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 8007604:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007606:	f7fa fc4d 	bl	8001ea4 <HAL_UART_RxCpltCallback>
}
 800760a:	bf00      	nop
 800760c:	3770      	adds	r7, #112	; 0x70
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}

08007612 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007612:	b580      	push	{r7, lr}
 8007614:	b084      	sub	sp, #16
 8007616:	af00      	add	r7, sp, #0
 8007618:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800761e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007624:	2b01      	cmp	r3, #1
 8007626:	d109      	bne.n	800763c <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800762e:	085b      	lsrs	r3, r3, #1
 8007630:	b29b      	uxth	r3, r3
 8007632:	4619      	mov	r1, r3
 8007634:	68f8      	ldr	r0, [r7, #12]
 8007636:	f7ff f9b7 	bl	80069a8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800763a:	e002      	b.n	8007642 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800763c:	68f8      	ldr	r0, [r7, #12]
 800763e:	f7ff f99f 	bl	8006980 <HAL_UART_RxHalfCpltCallback>
}
 8007642:	bf00      	nop
 8007644:	3710      	adds	r7, #16
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}

0800764a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800764a:	b580      	push	{r7, lr}
 800764c:	b086      	sub	sp, #24
 800764e:	af00      	add	r7, sp, #0
 8007650:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007656:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800765c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007662:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	689b      	ldr	r3, [r3, #8]
 800766a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800766e:	2b80      	cmp	r3, #128	; 0x80
 8007670:	d109      	bne.n	8007686 <UART_DMAError+0x3c>
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	2b21      	cmp	r3, #33	; 0x21
 8007676:	d106      	bne.n	8007686 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	2200      	movs	r2, #0
 800767c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8007680:	6978      	ldr	r0, [r7, #20]
 8007682:	f7ff feab 	bl	80073dc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	689b      	ldr	r3, [r3, #8]
 800768c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007690:	2b40      	cmp	r3, #64	; 0x40
 8007692:	d109      	bne.n	80076a8 <UART_DMAError+0x5e>
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2b22      	cmp	r3, #34	; 0x22
 8007698:	d106      	bne.n	80076a8 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	2200      	movs	r2, #0
 800769e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80076a2:	6978      	ldr	r0, [r7, #20]
 80076a4:	f7ff fec0 	bl	8007428 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076ae:	f043 0210 	orr.w	r2, r3, #16
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80076b8:	6978      	ldr	r0, [r7, #20]
 80076ba:	f7ff f96b 	bl	8006994 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80076be:	bf00      	nop
 80076c0:	3718      	adds	r7, #24
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}

080076c6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80076c6:	b580      	push	{r7, lr}
 80076c8:	b084      	sub	sp, #16
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076d2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	2200      	movs	r2, #0
 80076d8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	2200      	movs	r2, #0
 80076e0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80076e4:	68f8      	ldr	r0, [r7, #12]
 80076e6:	f7ff f955 	bl	8006994 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80076ea:	bf00      	nop
 80076ec:	3710      	adds	r7, #16
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}

080076f2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80076f2:	b580      	push	{r7, lr}
 80076f4:	b088      	sub	sp, #32
 80076f6:	af00      	add	r7, sp, #0
 80076f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	e853 3f00 	ldrex	r3, [r3]
 8007706:	60bb      	str	r3, [r7, #8]
   return(result);
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800770e:	61fb      	str	r3, [r7, #28]
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	461a      	mov	r2, r3
 8007716:	69fb      	ldr	r3, [r7, #28]
 8007718:	61bb      	str	r3, [r7, #24]
 800771a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800771c:	6979      	ldr	r1, [r7, #20]
 800771e:	69ba      	ldr	r2, [r7, #24]
 8007720:	e841 2300 	strex	r3, r2, [r1]
 8007724:	613b      	str	r3, [r7, #16]
   return(result);
 8007726:	693b      	ldr	r3, [r7, #16]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d1e6      	bne.n	80076fa <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2220      	movs	r2, #32
 8007730:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2200      	movs	r2, #0
 8007736:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f7ff f917 	bl	800696c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800773e:	bf00      	nop
 8007740:	3720      	adds	r7, #32
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}

08007746 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007746:	b480      	push	{r7}
 8007748:	b083      	sub	sp, #12
 800774a:	af00      	add	r7, sp, #0
 800774c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800774e:	bf00      	nop
 8007750:	370c      	adds	r7, #12
 8007752:	46bd      	mov	sp, r7
 8007754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007758:	4770      	bx	lr

0800775a <bitmap_init>:
    return bitmap->width * (bitmap->depth / 8) * bitmap->height;
};

/* Initialise bitmap with given buffer. */
void bitmap_init(bitmap_t *bitmap, uint8_t *buffer)
{
 800775a:	b480      	push	{r7}
 800775c:	b083      	sub	sp, #12
 800775e:	af00      	add	r7, sp, #0
 8007760:	6078      	str	r0, [r7, #4]
 8007762:	6039      	str	r1, [r7, #0]
    bitmap->pitch = bitmap->width * (bitmap->depth / 8);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	881a      	ldrh	r2, [r3, #0]
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	799b      	ldrb	r3, [r3, #6]
 800776c:	08db      	lsrs	r3, r3, #3
 800776e:	b2db      	uxtb	r3, r3
 8007770:	b29b      	uxth	r3, r3
 8007772:	fb12 f303 	smulbb	r3, r2, r3
 8007776:	b29a      	uxth	r2, r3
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	809a      	strh	r2, [r3, #4]
    bitmap->size = bitmap->pitch * bitmap->height;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	889b      	ldrh	r3, [r3, #4]
 8007780:	461a      	mov	r2, r3
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	885b      	ldrh	r3, [r3, #2]
 8007786:	fb02 f303 	mul.w	r3, r2, r3
 800778a:	461a      	mov	r2, r3
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	609a      	str	r2, [r3, #8]
    bitmap->buffer = buffer;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	683a      	ldr	r2, [r7, #0]
 8007794:	60da      	str	r2, [r3, #12]
}
 8007796:	bf00      	nop
 8007798:	370c      	adds	r7, #12
 800779a:	46bd      	mov	sp, r7
 800779c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a0:	4770      	bx	lr

080077a2 <code>:
static const uint8_t RIGHT = 0b0010;
static const uint8_t BOTTOM = 0b0100;
static const uint8_t TOP = 0b1000;

static uint8_t code(int16_t x0, int16_t y0, window_t window)
{
 80077a2:	b490      	push	{r4, r7}
 80077a4:	b086      	sub	sp, #24
 80077a6:	af00      	add	r7, sp, #0
 80077a8:	4604      	mov	r4, r0
 80077aa:	4608      	mov	r0, r1
 80077ac:	1d39      	adds	r1, r7, #4
 80077ae:	e881 000c 	stmia.w	r1, {r2, r3}
 80077b2:	4623      	mov	r3, r4
 80077b4:	81fb      	strh	r3, [r7, #14]
 80077b6:	4603      	mov	r3, r0
 80077b8:	81bb      	strh	r3, [r7, #12]
    uint8_t code = INSIDE;
 80077ba:	2300      	movs	r3, #0
 80077bc:	75fb      	strb	r3, [r7, #23]

    if (x0 < window.x0) {
 80077be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80077c2:	88ba      	ldrh	r2, [r7, #4]
 80077c4:	4293      	cmp	r3, r2
 80077c6:	da04      	bge.n	80077d2 <code+0x30>
        code |= LEFT;
 80077c8:	2201      	movs	r2, #1
 80077ca:	7dfb      	ldrb	r3, [r7, #23]
 80077cc:	4313      	orrs	r3, r2
 80077ce:	75fb      	strb	r3, [r7, #23]
 80077d0:	e008      	b.n	80077e4 <code+0x42>
    } else if (x0 > window.x1) {
 80077d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80077d6:	893a      	ldrh	r2, [r7, #8]
 80077d8:	4293      	cmp	r3, r2
 80077da:	dd03      	ble.n	80077e4 <code+0x42>
        code |= RIGHT;
 80077dc:	2202      	movs	r2, #2
 80077de:	7dfb      	ldrb	r3, [r7, #23]
 80077e0:	4313      	orrs	r3, r2
 80077e2:	75fb      	strb	r3, [r7, #23]
    } if (y0 < window.y0) {
 80077e4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80077e8:	88fa      	ldrh	r2, [r7, #6]
 80077ea:	4293      	cmp	r3, r2
 80077ec:	da04      	bge.n	80077f8 <code+0x56>
        code |= BOTTOM;
 80077ee:	2204      	movs	r2, #4
 80077f0:	7dfb      	ldrb	r3, [r7, #23]
 80077f2:	4313      	orrs	r3, r2
 80077f4:	75fb      	strb	r3, [r7, #23]
 80077f6:	e008      	b.n	800780a <code+0x68>
    } else if (y0 > window.y1) {
 80077f8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80077fc:	897a      	ldrh	r2, [r7, #10]
 80077fe:	4293      	cmp	r3, r2
 8007800:	dd03      	ble.n	800780a <code+0x68>
        code |= TOP;
 8007802:	2208      	movs	r2, #8
 8007804:	7dfb      	ldrb	r3, [r7, #23]
 8007806:	4313      	orrs	r3, r2
 8007808:	75fb      	strb	r3, [r7, #23]
    }

    return code;
 800780a:	7dfb      	ldrb	r3, [r7, #23]
}
 800780c:	4618      	mov	r0, r3
 800780e:	3718      	adds	r7, #24
 8007810:	46bd      	mov	sp, r7
 8007812:	bc90      	pop	{r4, r7}
 8007814:	4770      	bx	lr

08007816 <clip_line>:

bool clip_line(int16_t *x0, int16_t *y0, int16_t *x1, int16_t *y1, window_t window)
{
 8007816:	b580      	push	{r7, lr}
 8007818:	b088      	sub	sp, #32
 800781a:	af00      	add	r7, sp, #0
 800781c:	60f8      	str	r0, [r7, #12]
 800781e:	60b9      	str	r1, [r7, #8]
 8007820:	607a      	str	r2, [r7, #4]
 8007822:	603b      	str	r3, [r7, #0]
    uint8_t code0 = code(*x0, *y0, window);
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	f9b3 0000 	ldrsh.w	r0, [r3]
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	f9b3 1000 	ldrsh.w	r1, [r3]
 8007830:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007834:	cb0c      	ldmia	r3, {r2, r3}
 8007836:	f7ff ffb4 	bl	80077a2 <code>
 800783a:	4603      	mov	r3, r0
 800783c:	77fb      	strb	r3, [r7, #31]
    uint8_t code1 = code(*x1, *y1, window);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f9b3 0000 	ldrsh.w	r0, [r3]
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	f9b3 1000 	ldrsh.w	r1, [r3]
 800784a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800784e:	cb0c      	ldmia	r3, {r2, r3}
 8007850:	f7ff ffa7 	bl	80077a2 <code>
 8007854:	4603      	mov	r3, r0
 8007856:	77bb      	strb	r3, [r7, #30]

    bool accept = false;
 8007858:	2300      	movs	r3, #0
 800785a:	777b      	strb	r3, [r7, #29]

    while (true) {
        if (!(code0 | code1)) {
 800785c:	7ffa      	ldrb	r2, [r7, #31]
 800785e:	7fbb      	ldrb	r3, [r7, #30]
 8007860:	4313      	orrs	r3, r2
 8007862:	b2db      	uxtb	r3, r3
 8007864:	2b00      	cmp	r3, #0
 8007866:	d102      	bne.n	800786e <clip_line+0x58>
            /* Both endpoints inside clipping window, trivial accept. */
            accept = true;
 8007868:	2301      	movs	r3, #1
 800786a:	777b      	strb	r3, [r7, #29]
            break;
 800786c:	e0e9      	b.n	8007a42 <clip_line+0x22c>
        } else if (code0 & code1) {
 800786e:	7ffa      	ldrb	r2, [r7, #31]
 8007870:	7fbb      	ldrb	r3, [r7, #30]
 8007872:	4013      	ands	r3, r2
 8007874:	b2db      	uxtb	r3, r3
 8007876:	2b00      	cmp	r3, #0
 8007878:	f040 80e2 	bne.w	8007a40 <clip_line+0x22a>
            /* Both endpoints outside clipping window, trivial reject. */
            break;
        } else {
            /* Part of line inside clipping window, nontrivial situation. */

            int16_t x = 0;
 800787c:	2300      	movs	r3, #0
 800787e:	837b      	strh	r3, [r7, #26]
            int16_t y = 0;
 8007880:	2300      	movs	r3, #0
 8007882:	833b      	strh	r3, [r7, #24]
            uint8_t code3 = code0 ? code0 : code1;
 8007884:	7ffb      	ldrb	r3, [r7, #31]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d001      	beq.n	800788e <clip_line+0x78>
 800788a:	7ffb      	ldrb	r3, [r7, #31]
 800788c:	e000      	b.n	8007890 <clip_line+0x7a>
 800788e:	7fbb      	ldrb	r3, [r7, #30]
 8007890:	75fb      	strb	r3, [r7, #23]

            /* Find intersection point. */
            /* slope = (y1 - y0) / (x1 - x0) */
            /* x = x0 + (1 / slope) * (ym - y0), where ym is ymin or ymax */
            /* y = y0 + slope * (xm - x0), where xm is xmin or xmax */
            if (code3 & TOP) {
 8007892:	2208      	movs	r2, #8
 8007894:	7dfb      	ldrb	r3, [r7, #23]
 8007896:	4013      	ands	r3, r2
 8007898:	b2db      	uxtb	r3, r3
 800789a:	2b00      	cmp	r3, #0
 800789c:	d024      	beq.n	80078e8 <clip_line+0xd2>
                x = *x0 + (*x1 - *x0) * (window.y1 - *y0) / (*y1 - *y0);
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80078a4:	b29a      	uxth	r2, r3
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80078ac:	4619      	mov	r1, r3
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80078b4:	1acb      	subs	r3, r1, r3
 80078b6:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 80078b8:	4608      	mov	r0, r1
 80078ba:	68b9      	ldr	r1, [r7, #8]
 80078bc:	f9b1 1000 	ldrsh.w	r1, [r1]
 80078c0:	1a41      	subs	r1, r0, r1
 80078c2:	fb03 f101 	mul.w	r1, r3, r1
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80078cc:	4618      	mov	r0, r3
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80078d4:	1ac3      	subs	r3, r0, r3
 80078d6:	fb91 f3f3 	sdiv	r3, r1, r3
 80078da:	b29b      	uxth	r3, r3
 80078dc:	4413      	add	r3, r2
 80078de:	b29b      	uxth	r3, r3
 80078e0:	837b      	strh	r3, [r7, #26]
                y = window.y1;
 80078e2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80078e4:	833b      	strh	r3, [r7, #24]
 80078e6:	e07f      	b.n	80079e8 <clip_line+0x1d2>
            } else if (code3 & BOTTOM) {
 80078e8:	2204      	movs	r2, #4
 80078ea:	7dfb      	ldrb	r3, [r7, #23]
 80078ec:	4013      	ands	r3, r2
 80078ee:	b2db      	uxtb	r3, r3
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d024      	beq.n	800793e <clip_line+0x128>
                x = *x0 + (*x1 - *x0) * (window.y0 - *y0) / (*y1 - *y0);
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80078fa:	b29a      	uxth	r2, r3
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007902:	4619      	mov	r1, r3
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	f9b3 3000 	ldrsh.w	r3, [r3]
 800790a:	1acb      	subs	r3, r1, r3
 800790c:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 800790e:	4608      	mov	r0, r1
 8007910:	68b9      	ldr	r1, [r7, #8]
 8007912:	f9b1 1000 	ldrsh.w	r1, [r1]
 8007916:	1a41      	subs	r1, r0, r1
 8007918:	fb03 f101 	mul.w	r1, r3, r1
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007922:	4618      	mov	r0, r3
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	f9b3 3000 	ldrsh.w	r3, [r3]
 800792a:	1ac3      	subs	r3, r0, r3
 800792c:	fb91 f3f3 	sdiv	r3, r1, r3
 8007930:	b29b      	uxth	r3, r3
 8007932:	4413      	add	r3, r2
 8007934:	b29b      	uxth	r3, r3
 8007936:	837b      	strh	r3, [r7, #26]
                y = window.y0;
 8007938:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800793a:	833b      	strh	r3, [r7, #24]
 800793c:	e054      	b.n	80079e8 <clip_line+0x1d2>
            } else if (code3 & RIGHT) {
 800793e:	2202      	movs	r2, #2
 8007940:	7dfb      	ldrb	r3, [r7, #23]
 8007942:	4013      	ands	r3, r2
 8007944:	b2db      	uxtb	r3, r3
 8007946:	2b00      	cmp	r3, #0
 8007948:	d024      	beq.n	8007994 <clip_line+0x17e>
                y = *y0 + (*y1 - *y0) * (window.x1 - *x0) / (*x1 - *x0);
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007950:	b29a      	uxth	r2, r3
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007958:	4619      	mov	r1, r3
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007960:	1acb      	subs	r3, r1, r3
 8007962:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8007964:	4608      	mov	r0, r1
 8007966:	68f9      	ldr	r1, [r7, #12]
 8007968:	f9b1 1000 	ldrsh.w	r1, [r1]
 800796c:	1a41      	subs	r1, r0, r1
 800796e:	fb03 f101 	mul.w	r1, r3, r1
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007978:	4618      	mov	r0, r3
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007980:	1ac3      	subs	r3, r0, r3
 8007982:	fb91 f3f3 	sdiv	r3, r1, r3
 8007986:	b29b      	uxth	r3, r3
 8007988:	4413      	add	r3, r2
 800798a:	b29b      	uxth	r3, r3
 800798c:	833b      	strh	r3, [r7, #24]
                x = window.x1;
 800798e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007990:	837b      	strh	r3, [r7, #26]
 8007992:	e029      	b.n	80079e8 <clip_line+0x1d2>
            }  else if (code3 & LEFT) {
 8007994:	2201      	movs	r2, #1
 8007996:	7dfb      	ldrb	r3, [r7, #23]
 8007998:	4013      	ands	r3, r2
 800799a:	b2db      	uxtb	r3, r3
 800799c:	2b00      	cmp	r3, #0
 800799e:	d023      	beq.n	80079e8 <clip_line+0x1d2>
                y = *y0 + (*y1 - *y0) * (window.x0 - *x0) / (*x1 - *x0);
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80079a6:	b29a      	uxth	r2, r3
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80079ae:	4619      	mov	r1, r3
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80079b6:	1acb      	subs	r3, r1, r3
 80079b8:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 80079ba:	4608      	mov	r0, r1
 80079bc:	68f9      	ldr	r1, [r7, #12]
 80079be:	f9b1 1000 	ldrsh.w	r1, [r1]
 80079c2:	1a41      	subs	r1, r0, r1
 80079c4:	fb03 f101 	mul.w	r1, r3, r1
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80079ce:	4618      	mov	r0, r3
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80079d6:	1ac3      	subs	r3, r0, r3
 80079d8:	fb91 f3f3 	sdiv	r3, r1, r3
 80079dc:	b29b      	uxth	r3, r3
 80079de:	4413      	add	r3, r2
 80079e0:	b29b      	uxth	r3, r3
 80079e2:	833b      	strh	r3, [r7, #24]
                x = window.x0;
 80079e4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80079e6:	837b      	strh	r3, [r7, #26]
            }

            /* Replace the outside point with the intersection point. */
            if (code3 == code0) {
 80079e8:	7dfa      	ldrb	r2, [r7, #23]
 80079ea:	7ffb      	ldrb	r3, [r7, #31]
 80079ec:	429a      	cmp	r2, r3
 80079ee:	d113      	bne.n	8007a18 <clip_line+0x202>
                *x0 = x;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	8b7a      	ldrh	r2, [r7, #26]
 80079f4:	801a      	strh	r2, [r3, #0]
                *y0 = y;
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	8b3a      	ldrh	r2, [r7, #24]
 80079fa:	801a      	strh	r2, [r3, #0]
                code0 = code(*x0, *y0, window);
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	f9b3 0000 	ldrsh.w	r0, [r3]
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	f9b3 1000 	ldrsh.w	r1, [r3]
 8007a08:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007a0c:	cb0c      	ldmia	r3, {r2, r3}
 8007a0e:	f7ff fec8 	bl	80077a2 <code>
 8007a12:	4603      	mov	r3, r0
 8007a14:	77fb      	strb	r3, [r7, #31]
 8007a16:	e721      	b.n	800785c <clip_line+0x46>
            } else {
                *x1 = x;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	8b7a      	ldrh	r2, [r7, #26]
 8007a1c:	801a      	strh	r2, [r3, #0]
                *y1 = y;
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	8b3a      	ldrh	r2, [r7, #24]
 8007a22:	801a      	strh	r2, [r3, #0]
                code1 = code(*x1, *y1, window);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f9b3 0000 	ldrsh.w	r0, [r3]
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	f9b3 1000 	ldrsh.w	r1, [r3]
 8007a30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007a34:	cb0c      	ldmia	r3, {r2, r3}
 8007a36:	f7ff feb4 	bl	80077a2 <code>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	77bb      	strb	r3, [r7, #30]
        if (!(code0 | code1)) {
 8007a3e:	e70d      	b.n	800785c <clip_line+0x46>
            break;
 8007a40:	bf00      	nop
            }
        }
    }

    return accept;
 8007a42:	7f7b      	ldrb	r3, [r7, #29]
 8007a44:	4618      	mov	r0, r3
 8007a46:	3720      	adds	r7, #32
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}

08007a4c <fontx_meta>:
#include <stddef.h>
#include <string.h>

#include "fontx.h"

uint8_t fontx_meta(fontx_meta_t *meta, const uint8_t *font) {
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b082      	sub	sp, #8
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
 8007a54:	6039      	str	r1, [r7, #0]

    memcpy(meta->name, &font[FONTX_NAME], 8);
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	3306      	adds	r3, #6
 8007a5c:	2208      	movs	r2, #8
 8007a5e:	4619      	mov	r1, r3
 8007a60:	f000 febc 	bl	80087dc <memcpy>
    meta->width = font[FONTX_WIDTH];
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	7b9a      	ldrb	r2, [r3, #14]
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	725a      	strb	r2, [r3, #9]
    meta->height = font[FONTX_HEIGHT];
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	7bda      	ldrb	r2, [r3, #15]
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	729a      	strb	r2, [r3, #10]
    meta->type = font[FONTX_TYPE];
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	7c1a      	ldrb	r2, [r3, #16]
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	72da      	strb	r2, [r3, #11]

    return 0;
 8007a7c:	2300      	movs	r3, #0
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	3708      	adds	r7, #8
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}

08007a86 <fontx_glyph>:


uint8_t fontx_glyph(fontx_glyph_t *glyph, wchar_t code, const uint8_t* font) {
 8007a86:	b580      	push	{r7, lr}
 8007a88:	b08e      	sub	sp, #56	; 0x38
 8007a8a:	af00      	add	r7, sp, #0
 8007a8c:	60f8      	str	r0, [r7, #12]
 8007a8e:	60b9      	str	r1, [r7, #8]
 8007a90:	607a      	str	r2, [r7, #4]
    uint32_t nc, bc, sb, eb;
    uint8_t status;
    const uint8_t *block_table;
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 8007a92:	f107 0314 	add.w	r3, r7, #20
 8007a96:	6879      	ldr	r1, [r7, #4]
 8007a98:	4618      	mov	r0, r3
 8007a9a:	f7ff ffd7 	bl	8007a4c <fontx_meta>
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (0 != status) {
 8007aa4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d002      	beq.n	8007ab2 <fontx_glyph+0x2c>
        return status;
 8007aac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007ab0:	e077      	b.n	8007ba2 <fontx_glyph+0x11c>
    }

    glyph->width = meta.width;
 8007ab2:	7f7a      	ldrb	r2, [r7, #29]
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	701a      	strb	r2, [r3, #0]
    glyph->height = meta.height;
 8007ab8:	7fba      	ldrb	r2, [r7, #30]
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	705a      	strb	r2, [r3, #1]
    glyph->pitch = (meta.width + 7) / 8;
 8007abe:	7f7b      	ldrb	r3, [r7, #29]
 8007ac0:	3307      	adds	r3, #7
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	da00      	bge.n	8007ac8 <fontx_glyph+0x42>
 8007ac6:	3307      	adds	r3, #7
 8007ac8:	10db      	asrs	r3, r3, #3
 8007aca:	b2da      	uxtb	r2, r3
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	70da      	strb	r2, [r3, #3]
    glyph->size = glyph->pitch * meta.height;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	78da      	ldrb	r2, [r3, #3]
 8007ad4:	7fbb      	ldrb	r3, [r7, #30]
 8007ad6:	fb12 f303 	smulbb	r3, r2, r3
 8007ada:	b2da      	uxtb	r2, r3
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	709a      	strb	r2, [r3, #2]

    if (FONTX_TYPE_SBCS == meta.type) {
 8007ae0:	7ffb      	ldrb	r3, [r7, #31]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d10f      	bne.n	8007b06 <fontx_glyph+0x80>
        if (code < 0x100) {
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	2bff      	cmp	r3, #255	; 0xff
 8007aea:	d859      	bhi.n	8007ba0 <fontx_glyph+0x11a>
            glyph->buffer = &font[FONTX_GLYPH_DATA_START + code * glyph->size];
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	789b      	ldrb	r3, [r3, #2]
 8007af0:	461a      	mov	r2, r3
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	fb02 f303 	mul.w	r3, r2, r3
 8007af8:	3311      	adds	r3, #17
 8007afa:	687a      	ldr	r2, [r7, #4]
 8007afc:	441a      	add	r2, r3
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	605a      	str	r2, [r3, #4]
            return FONTX_OK;
 8007b02:	2300      	movs	r3, #0
 8007b04:	e04d      	b.n	8007ba2 <fontx_glyph+0x11c>
        }
    } else {
        block_table = &font[FONTX_BLOCK_TABLE_START];
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	3312      	adds	r3, #18
 8007b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        nc = 0;
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	637b      	str	r3, [r7, #52]	; 0x34
        bc = font[FONTX_BLOCK_TABLE_SIZE];
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	3311      	adds	r3, #17
 8007b14:	781b      	ldrb	r3, [r3, #0]
 8007b16:	633b      	str	r3, [r7, #48]	; 0x30
        while (bc--) {
 8007b18:	e03d      	b.n	8007b96 <fontx_glyph+0x110>
            /* Get range of the code block_table. */
            sb = block_table[0] + block_table[1] * 0x100;
 8007b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b1c:	781b      	ldrb	r3, [r3, #0]
 8007b1e:	461a      	mov	r2, r3
 8007b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b22:	3301      	adds	r3, #1
 8007b24:	781b      	ldrb	r3, [r3, #0]
 8007b26:	021b      	lsls	r3, r3, #8
 8007b28:	4413      	add	r3, r2
 8007b2a:	627b      	str	r3, [r7, #36]	; 0x24
            eb = block_table[2] + block_table[3] * 0x100;
 8007b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b2e:	3302      	adds	r3, #2
 8007b30:	781b      	ldrb	r3, [r3, #0]
 8007b32:	461a      	mov	r2, r3
 8007b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b36:	3303      	adds	r3, #3
 8007b38:	781b      	ldrb	r3, [r3, #0]
 8007b3a:	021b      	lsls	r3, r3, #8
 8007b3c:	4413      	add	r3, r2
 8007b3e:	623b      	str	r3, [r7, #32]

             /* Check if in the code block_table. */
            if (code >= sb && code <= eb) {
 8007b40:	68ba      	ldr	r2, [r7, #8]
 8007b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b44:	429a      	cmp	r2, r3
 8007b46:	d31c      	bcc.n	8007b82 <fontx_glyph+0xfc>
 8007b48:	68ba      	ldr	r2, [r7, #8]
 8007b4a:	6a3b      	ldr	r3, [r7, #32]
 8007b4c:	429a      	cmp	r2, r3
 8007b4e:	d818      	bhi.n	8007b82 <fontx_glyph+0xfc>
                /* Number of codes from top of the block_table. */
                nc += code - sb;
 8007b50:	68ba      	ldr	r2, [r7, #8]
 8007b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b54:	1ad3      	subs	r3, r2, r3
 8007b56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b58:	4413      	add	r3, r2
 8007b5a:	637b      	str	r3, [r7, #52]	; 0x34
                glyph->buffer = &font[
                    FONTX_BLOCK_TABLE_START +
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	3311      	adds	r3, #17
 8007b60:	781b      	ldrb	r3, [r3, #0]
 8007b62:	009b      	lsls	r3, r3, #2
 8007b64:	461a      	mov	r2, r3
                    nc * glyph->size
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	789b      	ldrb	r3, [r3, #2]
 8007b6a:	4619      	mov	r1, r3
 8007b6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b6e:	fb01 f303 	mul.w	r3, r1, r3
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 8007b72:	4413      	add	r3, r2
 8007b74:	3312      	adds	r3, #18
                glyph->buffer = &font[
 8007b76:	687a      	ldr	r2, [r7, #4]
 8007b78:	441a      	add	r2, r3
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	605a      	str	r2, [r3, #4]
                ];
                return FONTX_OK;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	e00f      	b.n	8007ba2 <fontx_glyph+0x11c>
            }
            /* Number of codes in the previous block_tables. */
            nc += eb - sb + 1;
 8007b82:	6a3a      	ldr	r2, [r7, #32]
 8007b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b86:	1ad2      	subs	r2, r2, r3
 8007b88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b8a:	4413      	add	r3, r2
 8007b8c:	3301      	adds	r3, #1
 8007b8e:	637b      	str	r3, [r7, #52]	; 0x34
            /* Next code block_table. */
            block_table += 4;
 8007b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b92:	3304      	adds	r3, #4
 8007b94:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (bc--) {
 8007b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b98:	1e5a      	subs	r2, r3, #1
 8007b9a:	633a      	str	r2, [r7, #48]	; 0x30
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d1bc      	bne.n	8007b1a <fontx_glyph+0x94>
        }
    }

    return FONTX_ERR_GLYPH_NOT_FOUND;
 8007ba0:	2301      	movs	r3, #1
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	3738      	adds	r7, #56	; 0x38
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}

08007baa <min>:
#include "hsl.h"

hsl_t rgb888_to_hsl(rgb_t *rgb);
uint16_t rgb888_to_rgb565(rgb_t *input);

static inline int min(int a, int b) {
 8007baa:	b480      	push	{r7}
 8007bac:	b083      	sub	sp, #12
 8007bae:	af00      	add	r7, sp, #0
 8007bb0:	6078      	str	r0, [r7, #4]
 8007bb2:	6039      	str	r1, [r7, #0]
    if (a > b) {
 8007bb4:	687a      	ldr	r2, [r7, #4]
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	429a      	cmp	r2, r3
 8007bba:	dd01      	ble.n	8007bc0 <min+0x16>
        return b;
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	e000      	b.n	8007bc2 <min+0x18>
    };
    return a;
 8007bc0:	687b      	ldr	r3, [r7, #4]
}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	370c      	adds	r7, #12
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bcc:	4770      	bx	lr

08007bce <max>:

static inline int max(int a, int b) {
 8007bce:	b480      	push	{r7}
 8007bd0:	b083      	sub	sp, #12
 8007bd2:	af00      	add	r7, sp, #0
 8007bd4:	6078      	str	r0, [r7, #4]
 8007bd6:	6039      	str	r1, [r7, #0]
    if (a > b) {
 8007bd8:	687a      	ldr	r2, [r7, #4]
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	429a      	cmp	r2, r3
 8007bde:	dd01      	ble.n	8007be4 <max+0x16>
        return a;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	e000      	b.n	8007be6 <max+0x18>
    }
    return b;
 8007be4:	683b      	ldr	r3, [r7, #0]
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	370c      	adds	r7, #12
 8007bea:	46bd      	mov	sp, r7
 8007bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf0:	4770      	bx	lr
	...

08007bf4 <hagl_set_clip_window>:
    .y0 = 0,
    .x1 = DISPLAY_WIDTH - 1,
    .y1 = DISPLAY_HEIGHT - 1,
};

void hagl_set_clip_window(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 8007bf4:	b490      	push	{r4, r7}
 8007bf6:	b082      	sub	sp, #8
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	4604      	mov	r4, r0
 8007bfc:	4608      	mov	r0, r1
 8007bfe:	4611      	mov	r1, r2
 8007c00:	461a      	mov	r2, r3
 8007c02:	4623      	mov	r3, r4
 8007c04:	80fb      	strh	r3, [r7, #6]
 8007c06:	4603      	mov	r3, r0
 8007c08:	80bb      	strh	r3, [r7, #4]
 8007c0a:	460b      	mov	r3, r1
 8007c0c:	807b      	strh	r3, [r7, #2]
 8007c0e:	4613      	mov	r3, r2
 8007c10:	803b      	strh	r3, [r7, #0]
    clip_window.x0 = x0;
 8007c12:	4a08      	ldr	r2, [pc, #32]	; (8007c34 <hagl_set_clip_window+0x40>)
 8007c14:	88fb      	ldrh	r3, [r7, #6]
 8007c16:	8013      	strh	r3, [r2, #0]
    clip_window.y0 = y0;
 8007c18:	4a06      	ldr	r2, [pc, #24]	; (8007c34 <hagl_set_clip_window+0x40>)
 8007c1a:	88bb      	ldrh	r3, [r7, #4]
 8007c1c:	8053      	strh	r3, [r2, #2]
    clip_window.x1 = x1;
 8007c1e:	4a05      	ldr	r2, [pc, #20]	; (8007c34 <hagl_set_clip_window+0x40>)
 8007c20:	887b      	ldrh	r3, [r7, #2]
 8007c22:	8093      	strh	r3, [r2, #4]
    clip_window.y1 = y1;
 8007c24:	4a03      	ldr	r2, [pc, #12]	; (8007c34 <hagl_set_clip_window+0x40>)
 8007c26:	883b      	ldrh	r3, [r7, #0]
 8007c28:	80d3      	strh	r3, [r2, #6]
}
 8007c2a:	bf00      	nop
 8007c2c:	3708      	adds	r7, #8
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bc90      	pop	{r4, r7}
 8007c32:	4770      	bx	lr
 8007c34:	2000000c 	.word	0x2000000c

08007c38 <hagl_put_pixel>:

void hagl_put_pixel(int16_t x0, int16_t y0, color_t color)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b082      	sub	sp, #8
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	4603      	mov	r3, r0
 8007c40:	80fb      	strh	r3, [r7, #6]
 8007c42:	460b      	mov	r3, r1
 8007c44:	80bb      	strh	r3, [r7, #4]
 8007c46:	4613      	mov	r3, r2
 8007c48:	807b      	strh	r3, [r7, #2]
    /* x0 or y0 is before the edge, nothing to do. */
    if ((x0 < clip_window.x0) || (y0 < clip_window.y0))  {
 8007c4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007c4e:	4a12      	ldr	r2, [pc, #72]	; (8007c98 <hagl_put_pixel+0x60>)
 8007c50:	8812      	ldrh	r2, [r2, #0]
 8007c52:	4293      	cmp	r3, r2
 8007c54:	db1a      	blt.n	8007c8c <hagl_put_pixel+0x54>
 8007c56:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8007c5a:	4a0f      	ldr	r2, [pc, #60]	; (8007c98 <hagl_put_pixel+0x60>)
 8007c5c:	8852      	ldrh	r2, [r2, #2]
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	db14      	blt.n	8007c8c <hagl_put_pixel+0x54>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 8007c62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007c66:	4a0c      	ldr	r2, [pc, #48]	; (8007c98 <hagl_put_pixel+0x60>)
 8007c68:	8892      	ldrh	r2, [r2, #4]
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	dc10      	bgt.n	8007c90 <hagl_put_pixel+0x58>
 8007c6e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8007c72:	4a09      	ldr	r2, [pc, #36]	; (8007c98 <hagl_put_pixel+0x60>)
 8007c74:	88d2      	ldrh	r2, [r2, #6]
 8007c76:	4293      	cmp	r3, r2
 8007c78:	dc0a      	bgt.n	8007c90 <hagl_put_pixel+0x58>
        return;
    }

    /* If still in bounds set the pixel. */
    hagl_hal_put_pixel(x0, y0, color);
 8007c7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007c7e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8007c82:	887a      	ldrh	r2, [r7, #2]
 8007c84:	4618      	mov	r0, r3
 8007c86:	f7f9 fbdb 	bl	8001440 <lcd_draw_point>
 8007c8a:	e002      	b.n	8007c92 <hagl_put_pixel+0x5a>
        return;
 8007c8c:	bf00      	nop
 8007c8e:	e000      	b.n	8007c92 <hagl_put_pixel+0x5a>
        return;
 8007c90:	bf00      	nop
}
 8007c92:	3708      	adds	r7, #8
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}
 8007c98:	2000000c 	.word	0x2000000c

08007c9c <hagl_draw_hline>:
#else
    return hagl_color(0, 0, 0);
#endif /* HAGL_HAS_HAL_GET_PIXEL */
}

void hagl_draw_hline(int16_t x0, int16_t y0, uint16_t w, color_t color) {
 8007c9c:	b590      	push	{r4, r7, lr}
 8007c9e:	b085      	sub	sp, #20
 8007ca0:	af02      	add	r7, sp, #8
 8007ca2:	4604      	mov	r4, r0
 8007ca4:	4608      	mov	r0, r1
 8007ca6:	4611      	mov	r1, r2
 8007ca8:	461a      	mov	r2, r3
 8007caa:	4623      	mov	r3, r4
 8007cac:	80fb      	strh	r3, [r7, #6]
 8007cae:	4603      	mov	r3, r0
 8007cb0:	80bb      	strh	r3, [r7, #4]
 8007cb2:	460b      	mov	r3, r1
 8007cb4:	807b      	strh	r3, [r7, #2]
 8007cb6:	4613      	mov	r3, r2
 8007cb8:	803b      	strh	r3, [r7, #0]
        width = width - (x0 + width - clip_window.x1);
    }

    hagl_hal_hline(x0, y0, width, color);
#else
    hagl_draw_line(x0, y0, x0 + w, y0, color);
 8007cba:	88fa      	ldrh	r2, [r7, #6]
 8007cbc:	887b      	ldrh	r3, [r7, #2]
 8007cbe:	4413      	add	r3, r2
 8007cc0:	b29b      	uxth	r3, r3
 8007cc2:	b21a      	sxth	r2, r3
 8007cc4:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8007cc8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8007ccc:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8007cd0:	883b      	ldrh	r3, [r7, #0]
 8007cd2:	9300      	str	r3, [sp, #0]
 8007cd4:	4623      	mov	r3, r4
 8007cd6:	f000 f805 	bl	8007ce4 <hagl_draw_line>
#endif
}
 8007cda:	bf00      	nop
 8007cdc:	370c      	adds	r7, #12
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd90      	pop	{r4, r7, pc}
	...

08007ce4 <hagl_draw_line>:

/*
 * Draw a line using Bresenham's algorithm with given color.
 */
void hagl_draw_line(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 8007ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ce6:	b089      	sub	sp, #36	; 0x24
 8007ce8:	af02      	add	r7, sp, #8
 8007cea:	4604      	mov	r4, r0
 8007cec:	4608      	mov	r0, r1
 8007cee:	4611      	mov	r1, r2
 8007cf0:	461a      	mov	r2, r3
 8007cf2:	4623      	mov	r3, r4
 8007cf4:	80fb      	strh	r3, [r7, #6]
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	80bb      	strh	r3, [r7, #4]
 8007cfa:	460b      	mov	r3, r1
 8007cfc:	807b      	strh	r3, [r7, #2]
 8007cfe:	4613      	mov	r3, r2
 8007d00:	803b      	strh	r3, [r7, #0]
    /* Clip coordinates to fit clip window. */
    if (false == clip_line(&x0, &y0, &x1, &y1, clip_window)) {
 8007d02:	463b      	mov	r3, r7
 8007d04:	1cba      	adds	r2, r7, #2
 8007d06:	1d3d      	adds	r5, r7, #4
 8007d08:	1dbc      	adds	r4, r7, #6
 8007d0a:	494a      	ldr	r1, [pc, #296]	; (8007e34 <hagl_draw_line+0x150>)
 8007d0c:	466e      	mov	r6, sp
 8007d0e:	c903      	ldmia	r1, {r0, r1}
 8007d10:	e886 0003 	stmia.w	r6, {r0, r1}
 8007d14:	4629      	mov	r1, r5
 8007d16:	4620      	mov	r0, r4
 8007d18:	f7ff fd7d 	bl	8007816 <clip_line>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	f083 0301 	eor.w	r3, r3, #1
 8007d22:	b2db      	uxtb	r3, r3
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d17e      	bne.n	8007e26 <hagl_draw_line+0x142>
    int16_t dy;
    int16_t sy;
    int16_t err;
    int16_t e2;

    dx = ABS(x1 - x0);
 8007d28:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007d2c:	461a      	mov	r2, r3
 8007d2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007d32:	1ad3      	subs	r3, r2, r3
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	bfb8      	it	lt
 8007d38:	425b      	neglt	r3, r3
 8007d3a:	82bb      	strh	r3, [r7, #20]
    sx = x0 < x1 ? 1 : -1;
 8007d3c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007d40:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007d44:	429a      	cmp	r2, r3
 8007d46:	da01      	bge.n	8007d4c <hagl_draw_line+0x68>
 8007d48:	2301      	movs	r3, #1
 8007d4a:	e001      	b.n	8007d50 <hagl_draw_line+0x6c>
 8007d4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d50:	827b      	strh	r3, [r7, #18]
    dy = ABS(y1 - y0);
 8007d52:	f9b7 3000 	ldrsh.w	r3, [r7]
 8007d56:	461a      	mov	r2, r3
 8007d58:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8007d5c:	1ad3      	subs	r3, r2, r3
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	bfb8      	it	lt
 8007d62:	425b      	neglt	r3, r3
 8007d64:	823b      	strh	r3, [r7, #16]
    sy = y0 < y1 ? 1 : -1;
 8007d66:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8007d6a:	f9b7 3000 	ldrsh.w	r3, [r7]
 8007d6e:	429a      	cmp	r2, r3
 8007d70:	da01      	bge.n	8007d76 <hagl_draw_line+0x92>
 8007d72:	2301      	movs	r3, #1
 8007d74:	e001      	b.n	8007d7a <hagl_draw_line+0x96>
 8007d76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d7a:	81fb      	strh	r3, [r7, #14]
    err = (dx > dy ? dx : -dy) / 2;
 8007d7c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8007d80:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8007d84:	429a      	cmp	r2, r3
 8007d86:	dd06      	ble.n	8007d96 <hagl_draw_line+0xb2>
 8007d88:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007d8c:	0fda      	lsrs	r2, r3, #31
 8007d8e:	4413      	add	r3, r2
 8007d90:	105b      	asrs	r3, r3, #1
 8007d92:	b21b      	sxth	r3, r3
 8007d94:	e006      	b.n	8007da4 <hagl_draw_line+0xc0>
 8007d96:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8007d9a:	0fda      	lsrs	r2, r3, #31
 8007d9c:	4413      	add	r3, r2
 8007d9e:	105b      	asrs	r3, r3, #1
 8007da0:	425b      	negs	r3, r3
 8007da2:	b21b      	sxth	r3, r3
 8007da4:	82fb      	strh	r3, [r7, #22]

    while (1) {
        hagl_put_pixel(x0, y0, color);
 8007da6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007daa:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8007dae:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8007db0:	4618      	mov	r0, r3
 8007db2:	f7ff ff41 	bl	8007c38 <hagl_put_pixel>

        if (x0 == x1 && y0 == y1) {
 8007db6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007dba:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007dbe:	429a      	cmp	r2, r3
 8007dc0:	d105      	bne.n	8007dce <hagl_draw_line+0xea>
 8007dc2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8007dc6:	f9b7 3000 	ldrsh.w	r3, [r7]
 8007dca:	429a      	cmp	r2, r3
 8007dcc:	d02d      	beq.n	8007e2a <hagl_draw_line+0x146>
            break;
        };

        e2 = err + err;
 8007dce:	8afb      	ldrh	r3, [r7, #22]
 8007dd0:	005b      	lsls	r3, r3, #1
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	81bb      	strh	r3, [r7, #12]

        if (e2 > -dx) {
 8007dd6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8007dda:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007dde:	425b      	negs	r3, r3
 8007de0:	429a      	cmp	r2, r3
 8007de2:	dd0c      	ble.n	8007dfe <hagl_draw_line+0x11a>
            err -= dy;
 8007de4:	8afa      	ldrh	r2, [r7, #22]
 8007de6:	8a3b      	ldrh	r3, [r7, #16]
 8007de8:	1ad3      	subs	r3, r2, r3
 8007dea:	b29b      	uxth	r3, r3
 8007dec:	82fb      	strh	r3, [r7, #22]
            x0 += sx;
 8007dee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007df2:	b29a      	uxth	r2, r3
 8007df4:	8a7b      	ldrh	r3, [r7, #18]
 8007df6:	4413      	add	r3, r2
 8007df8:	b29b      	uxth	r3, r3
 8007dfa:	b21b      	sxth	r3, r3
 8007dfc:	80fb      	strh	r3, [r7, #6]
        }

        if (e2 < dy) {
 8007dfe:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8007e02:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8007e06:	429a      	cmp	r2, r3
 8007e08:	dacd      	bge.n	8007da6 <hagl_draw_line+0xc2>
            err += dx;
 8007e0a:	8afa      	ldrh	r2, [r7, #22]
 8007e0c:	8abb      	ldrh	r3, [r7, #20]
 8007e0e:	4413      	add	r3, r2
 8007e10:	b29b      	uxth	r3, r3
 8007e12:	82fb      	strh	r3, [r7, #22]
            y0 += sy;
 8007e14:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8007e18:	b29a      	uxth	r2, r3
 8007e1a:	89fb      	ldrh	r3, [r7, #14]
 8007e1c:	4413      	add	r3, r2
 8007e1e:	b29b      	uxth	r3, r3
 8007e20:	b21b      	sxth	r3, r3
 8007e22:	80bb      	strh	r3, [r7, #4]
        hagl_put_pixel(x0, y0, color);
 8007e24:	e7bf      	b.n	8007da6 <hagl_draw_line+0xc2>
        return;
 8007e26:	bf00      	nop
 8007e28:	e000      	b.n	8007e2c <hagl_draw_line+0x148>
            break;
 8007e2a:	bf00      	nop
        }
    }
}
 8007e2c:	371c      	adds	r7, #28
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e32:	bf00      	nop
 8007e34:	2000000c 	.word	0x2000000c

08007e38 <hagl_fill_rectangle>:

/*
 * Draw a filled rectangle with given color.
 */
void hagl_fill_rectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 8007e38:	b590      	push	{r4, r7, lr}
 8007e3a:	b085      	sub	sp, #20
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	4604      	mov	r4, r0
 8007e40:	4608      	mov	r0, r1
 8007e42:	4611      	mov	r1, r2
 8007e44:	461a      	mov	r2, r3
 8007e46:	4623      	mov	r3, r4
 8007e48:	80fb      	strh	r3, [r7, #6]
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	80bb      	strh	r3, [r7, #4]
 8007e4e:	460b      	mov	r3, r1
 8007e50:	807b      	strh	r3, [r7, #2]
 8007e52:	4613      	mov	r3, r2
 8007e54:	803b      	strh	r3, [r7, #0]
    /* Make sure x0 is smaller than x1. */
    if (x0 > x1) {
 8007e56:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007e5a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007e5e:	429a      	cmp	r2, r3
 8007e60:	dd0e      	ble.n	8007e80 <hagl_fill_rectangle+0x48>
        x0 = x0 + x1;
 8007e62:	88fa      	ldrh	r2, [r7, #6]
 8007e64:	887b      	ldrh	r3, [r7, #2]
 8007e66:	4413      	add	r3, r2
 8007e68:	b29b      	uxth	r3, r3
 8007e6a:	80fb      	strh	r3, [r7, #6]
        x1 = x0 - x1;
 8007e6c:	88fa      	ldrh	r2, [r7, #6]
 8007e6e:	887b      	ldrh	r3, [r7, #2]
 8007e70:	1ad3      	subs	r3, r2, r3
 8007e72:	b29b      	uxth	r3, r3
 8007e74:	807b      	strh	r3, [r7, #2]
        x0 = x0 - x1;
 8007e76:	88fa      	ldrh	r2, [r7, #6]
 8007e78:	887b      	ldrh	r3, [r7, #2]
 8007e7a:	1ad3      	subs	r3, r2, r3
 8007e7c:	b29b      	uxth	r3, r3
 8007e7e:	80fb      	strh	r3, [r7, #6]
    }

    /* Make sure y0 is smaller than y1. */
    if (y0 > y1) {
 8007e80:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8007e84:	f9b7 3000 	ldrsh.w	r3, [r7]
 8007e88:	429a      	cmp	r2, r3
 8007e8a:	dd0e      	ble.n	8007eaa <hagl_fill_rectangle+0x72>
        y0 = y0 + y1;
 8007e8c:	88ba      	ldrh	r2, [r7, #4]
 8007e8e:	883b      	ldrh	r3, [r7, #0]
 8007e90:	4413      	add	r3, r2
 8007e92:	b29b      	uxth	r3, r3
 8007e94:	80bb      	strh	r3, [r7, #4]
        y1 = y0 - y1;
 8007e96:	88ba      	ldrh	r2, [r7, #4]
 8007e98:	883b      	ldrh	r3, [r7, #0]
 8007e9a:	1ad3      	subs	r3, r2, r3
 8007e9c:	b29b      	uxth	r3, r3
 8007e9e:	803b      	strh	r3, [r7, #0]
        y0 = y0 - y1;
 8007ea0:	88ba      	ldrh	r2, [r7, #4]
 8007ea2:	883b      	ldrh	r3, [r7, #0]
 8007ea4:	1ad3      	subs	r3, r2, r3
 8007ea6:	b29b      	uxth	r3, r3
 8007ea8:	80bb      	strh	r3, [r7, #4]
    }

    /* x1 or y1 is before the edge, nothing to do. */
    if ((x1 < clip_window.x0) || (y1 < clip_window.y0))  {
 8007eaa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007eae:	4a33      	ldr	r2, [pc, #204]	; (8007f7c <hagl_fill_rectangle+0x144>)
 8007eb0:	8812      	ldrh	r2, [r2, #0]
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	db5b      	blt.n	8007f6e <hagl_fill_rectangle+0x136>
 8007eb6:	f9b7 3000 	ldrsh.w	r3, [r7]
 8007eba:	4a30      	ldr	r2, [pc, #192]	; (8007f7c <hagl_fill_rectangle+0x144>)
 8007ebc:	8852      	ldrh	r2, [r2, #2]
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	db55      	blt.n	8007f6e <hagl_fill_rectangle+0x136>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 8007ec2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007ec6:	4a2d      	ldr	r2, [pc, #180]	; (8007f7c <hagl_fill_rectangle+0x144>)
 8007ec8:	8892      	ldrh	r2, [r2, #4]
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	dc51      	bgt.n	8007f72 <hagl_fill_rectangle+0x13a>
 8007ece:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8007ed2:	4a2a      	ldr	r2, [pc, #168]	; (8007f7c <hagl_fill_rectangle+0x144>)
 8007ed4:	88d2      	ldrh	r2, [r2, #6]
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	dc4b      	bgt.n	8007f72 <hagl_fill_rectangle+0x13a>
        return;
    }

    x0 = max(x0, clip_window.x0);
 8007eda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007ede:	4a27      	ldr	r2, [pc, #156]	; (8007f7c <hagl_fill_rectangle+0x144>)
 8007ee0:	8812      	ldrh	r2, [r2, #0]
 8007ee2:	4611      	mov	r1, r2
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	f7ff fe72 	bl	8007bce <max>
 8007eea:	4603      	mov	r3, r0
 8007eec:	80fb      	strh	r3, [r7, #6]
    y0 = max(y0, clip_window.y0);
 8007eee:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8007ef2:	4a22      	ldr	r2, [pc, #136]	; (8007f7c <hagl_fill_rectangle+0x144>)
 8007ef4:	8852      	ldrh	r2, [r2, #2]
 8007ef6:	4611      	mov	r1, r2
 8007ef8:	4618      	mov	r0, r3
 8007efa:	f7ff fe68 	bl	8007bce <max>
 8007efe:	4603      	mov	r3, r0
 8007f00:	80bb      	strh	r3, [r7, #4]
    x1 = min(x1, clip_window.x1);
 8007f02:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007f06:	4a1d      	ldr	r2, [pc, #116]	; (8007f7c <hagl_fill_rectangle+0x144>)
 8007f08:	8892      	ldrh	r2, [r2, #4]
 8007f0a:	4611      	mov	r1, r2
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f7ff fe4c 	bl	8007baa <min>
 8007f12:	4603      	mov	r3, r0
 8007f14:	807b      	strh	r3, [r7, #2]
    y1 = min(y1, clip_window.y1);
 8007f16:	f9b7 3000 	ldrsh.w	r3, [r7]
 8007f1a:	4a18      	ldr	r2, [pc, #96]	; (8007f7c <hagl_fill_rectangle+0x144>)
 8007f1c:	88d2      	ldrh	r2, [r2, #6]
 8007f1e:	4611      	mov	r1, r2
 8007f20:	4618      	mov	r0, r3
 8007f22:	f7ff fe42 	bl	8007baa <min>
 8007f26:	4603      	mov	r3, r0
 8007f28:	803b      	strh	r3, [r7, #0]

    uint16_t width = x1 - x0 + 1;
 8007f2a:	887a      	ldrh	r2, [r7, #2]
 8007f2c:	88fb      	ldrh	r3, [r7, #6]
 8007f2e:	1ad3      	subs	r3, r2, r3
 8007f30:	b29b      	uxth	r3, r3
 8007f32:	3301      	adds	r3, #1
 8007f34:	81bb      	strh	r3, [r7, #12]
    uint16_t height = y1 - y0 + 1;
 8007f36:	883a      	ldrh	r2, [r7, #0]
 8007f38:	88bb      	ldrh	r3, [r7, #4]
 8007f3a:	1ad3      	subs	r3, r2, r3
 8007f3c:	b29b      	uxth	r3, r3
 8007f3e:	3301      	adds	r3, #1
 8007f40:	817b      	strh	r3, [r7, #10]

    for (uint16_t i = 0; i < height; i++) {
 8007f42:	2300      	movs	r3, #0
 8007f44:	81fb      	strh	r3, [r7, #14]
 8007f46:	e00d      	b.n	8007f64 <hagl_fill_rectangle+0x12c>
#ifdef HAGL_HAS_HAL_HLINE
        /* Already clipped so can call HAL directly. */
        hagl_hal_hline(x0, y0 + i, width, color);
#else
        hagl_draw_hline(x0, y0 + i, width, color);
 8007f48:	88ba      	ldrh	r2, [r7, #4]
 8007f4a:	89fb      	ldrh	r3, [r7, #14]
 8007f4c:	4413      	add	r3, r2
 8007f4e:	b29b      	uxth	r3, r3
 8007f50:	b219      	sxth	r1, r3
 8007f52:	8c3b      	ldrh	r3, [r7, #32]
 8007f54:	89ba      	ldrh	r2, [r7, #12]
 8007f56:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8007f5a:	f7ff fe9f 	bl	8007c9c <hagl_draw_hline>
    for (uint16_t i = 0; i < height; i++) {
 8007f5e:	89fb      	ldrh	r3, [r7, #14]
 8007f60:	3301      	adds	r3, #1
 8007f62:	81fb      	strh	r3, [r7, #14]
 8007f64:	89fa      	ldrh	r2, [r7, #14]
 8007f66:	897b      	ldrh	r3, [r7, #10]
 8007f68:	429a      	cmp	r2, r3
 8007f6a:	d3ed      	bcc.n	8007f48 <hagl_fill_rectangle+0x110>
 8007f6c:	e002      	b.n	8007f74 <hagl_fill_rectangle+0x13c>
        return;
 8007f6e:	bf00      	nop
 8007f70:	e000      	b.n	8007f74 <hagl_fill_rectangle+0x13c>
        return;
 8007f72:	bf00      	nop
#endif
    }
}
 8007f74:	3714      	adds	r7, #20
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd90      	pop	{r4, r7, pc}
 8007f7a:	bf00      	nop
 8007f7c:	2000000c 	.word	0x2000000c

08007f80 <hagl_put_char>:

    return 0;
}

uint8_t hagl_put_char(wchar_t code, int16_t x0, int16_t y0, color_t color, const uint8_t *font)
{
 8007f80:	b590      	push	{r4, r7, lr}
 8007f82:	f5ad 5d81 	sub.w	sp, sp, #4128	; 0x1020
 8007f86:	b085      	sub	sp, #20
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8007f8e:	f844 0c24 	str.w	r0, [r4, #-36]
 8007f92:	460c      	mov	r4, r1
 8007f94:	4610      	mov	r0, r2
 8007f96:	4619      	mov	r1, r3
 8007f98:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007f9c:	4622      	mov	r2, r4
 8007f9e:	f823 2c26 	strh.w	r2, [r3, #-38]
 8007fa2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007fa6:	4602      	mov	r2, r0
 8007fa8:	f823 2c28 	strh.w	r2, [r3, #-40]
 8007fac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007fb0:	460a      	mov	r2, r1
 8007fb2:	f823 2c2a 	strh.w	r2, [r3, #-42]
    uint8_t set, status;
    color_t buffer[HAGL_CHAR_BUFFER_SIZE];
    bitmap_t bitmap;
    fontx_glyph_t glyph;

    status = fontx_glyph(&glyph, code, font);
 8007fb6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007fba:	4619      	mov	r1, r3
 8007fbc:	f107 0310 	add.w	r3, r7, #16
 8007fc0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007fc4:	6812      	ldr	r2, [r2, #0]
 8007fc6:	f851 1c24 	ldr.w	r1, [r1, #-36]
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f7ff fd5b 	bl	8007a86 <fontx_glyph>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8007fd6:	f102 0209 	add.w	r2, r2, #9
 8007fda:	7013      	strb	r3, [r2, #0]

    if (0 != status) {
 8007fdc:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8007fe0:	f103 0309 	add.w	r3, r3, #9
 8007fe4:	781b      	ldrb	r3, [r3, #0]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d001      	beq.n	8007fee <hagl_put_char+0x6e>
        return 0;
 8007fea:	2300      	movs	r3, #0
 8007fec:	e0c9      	b.n	8008182 <hagl_put_char+0x202>
    }

    bitmap.width = glyph.width,
 8007fee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007ff2:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8007ff6:	b29a      	uxth	r2, r3
 8007ff8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007ffc:	f823 2c18 	strh.w	r2, [r3, #-24]
    bitmap.height = glyph.height,
 8008000:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008004:	f813 3c1f 	ldrb.w	r3, [r3, #-31]
 8008008:	b29a      	uxth	r2, r3
 800800a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800800e:	f823 2c16 	strh.w	r2, [r3, #-22]
    bitmap.depth = DISPLAY_DEPTH,
 8008012:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008016:	2210      	movs	r2, #16
 8008018:	f803 2c12 	strb.w	r2, [r3, #-18]

    bitmap_init(&bitmap, (uint8_t *)buffer);
 800801c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008020:	3a08      	subs	r2, #8
 8008022:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008026:	3b18      	subs	r3, #24
 8008028:	4611      	mov	r1, r2
 800802a:	4618      	mov	r0, r3
 800802c:	f7ff fb95 	bl	800775a <bitmap_init>

    color_t *ptr = (color_t *) bitmap.buffer;
 8008030:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008034:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 8008038:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800803c:	f102 020c 	add.w	r2, r2, #12
 8008040:	6013      	str	r3, [r2, #0]

    for (uint8_t y = 0; y < glyph.height; y++) {
 8008042:	2300      	movs	r3, #0
 8008044:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8008048:	f102 020b 	add.w	r2, r2, #11
 800804c:	7013      	strb	r3, [r2, #0]
 800804e:	e079      	b.n	8008144 <hagl_put_char+0x1c4>
        for (uint8_t x = 0; x < glyph.width; x++) {
 8008050:	2300      	movs	r3, #0
 8008052:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8008056:	f102 020a 	add.w	r2, r2, #10
 800805a:	7013      	strb	r3, [r2, #0]
 800805c:	e04f      	b.n	80080fe <hagl_put_char+0x17e>
            set = *(glyph.buffer + x / 8) & (0x80 >> (x % 8));
 800805e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008062:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8008066:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800806a:	f102 020a 	add.w	r2, r2, #10
 800806e:	7812      	ldrb	r2, [r2, #0]
 8008070:	08d2      	lsrs	r2, r2, #3
 8008072:	b2d2      	uxtb	r2, r2
 8008074:	4413      	add	r3, r2
 8008076:	781b      	ldrb	r3, [r3, #0]
 8008078:	b25a      	sxtb	r2, r3
 800807a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800807e:	f103 030a 	add.w	r3, r3, #10
 8008082:	781b      	ldrb	r3, [r3, #0]
 8008084:	f003 0307 	and.w	r3, r3, #7
 8008088:	2180      	movs	r1, #128	; 0x80
 800808a:	fa41 f303 	asr.w	r3, r1, r3
 800808e:	b25b      	sxtb	r3, r3
 8008090:	4013      	ands	r3, r2
 8008092:	b25b      	sxtb	r3, r3
 8008094:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8008098:	f102 0208 	add.w	r2, r2, #8
 800809c:	7013      	strb	r3, [r2, #0]
            if (set) {
 800809e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80080a2:	f103 0308 	add.w	r3, r3, #8
 80080a6:	781b      	ldrb	r3, [r3, #0]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d010      	beq.n	80080ce <hagl_put_char+0x14e>
                *(ptr++) = color;
 80080ac:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80080b0:	f103 030c 	add.w	r3, r3, #12
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	1c9a      	adds	r2, r3, #2
 80080b8:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 80080bc:	f101 010c 	add.w	r1, r1, #12
 80080c0:	600a      	str	r2, [r1, #0]
 80080c2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80080c6:	f832 2c2a 	ldrh.w	r2, [r2, #-42]
 80080ca:	801a      	strh	r2, [r3, #0]
 80080cc:	e00c      	b.n	80080e8 <hagl_put_char+0x168>
            } else {
                *(ptr++) = 0x0000;
 80080ce:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80080d2:	f103 030c 	add.w	r3, r3, #12
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	1c9a      	adds	r2, r3, #2
 80080da:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 80080de:	f101 010c 	add.w	r1, r1, #12
 80080e2:	600a      	str	r2, [r1, #0]
 80080e4:	2200      	movs	r2, #0
 80080e6:	801a      	strh	r2, [r3, #0]
        for (uint8_t x = 0; x < glyph.width; x++) {
 80080e8:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80080ec:	f103 030a 	add.w	r3, r3, #10
 80080f0:	781b      	ldrb	r3, [r3, #0]
 80080f2:	3301      	adds	r3, #1
 80080f4:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80080f8:	f102 020a 	add.w	r2, r2, #10
 80080fc:	7013      	strb	r3, [r2, #0]
 80080fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008102:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8008106:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800810a:	f102 020a 	add.w	r2, r2, #10
 800810e:	7812      	ldrb	r2, [r2, #0]
 8008110:	429a      	cmp	r2, r3
 8008112:	d3a4      	bcc.n	800805e <hagl_put_char+0xde>
            }
        }
        glyph.buffer += glyph.pitch;
 8008114:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008118:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 800811c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008120:	f812 2c1d 	ldrb.w	r2, [r2, #-29]
 8008124:	4413      	add	r3, r2
 8008126:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800812a:	f842 3c1c 	str.w	r3, [r2, #-28]
    for (uint8_t y = 0; y < glyph.height; y++) {
 800812e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8008132:	f103 030b 	add.w	r3, r3, #11
 8008136:	781b      	ldrb	r3, [r3, #0]
 8008138:	3301      	adds	r3, #1
 800813a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800813e:	f102 020b 	add.w	r2, r2, #11
 8008142:	7013      	strb	r3, [r2, #0]
 8008144:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008148:	f813 3c1f 	ldrb.w	r3, [r3, #-31]
 800814c:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8008150:	f102 020b 	add.w	r2, r2, #11
 8008154:	7812      	ldrb	r2, [r2, #0]
 8008156:	429a      	cmp	r2, r3
 8008158:	f4ff af7a 	bcc.w	8008050 <hagl_put_char+0xd0>
    }

    hagl_blit(x0, y0, &bitmap);
 800815c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008160:	3b18      	subs	r3, #24
 8008162:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008166:	f932 1c28 	ldrsh.w	r1, [r2, #-40]
 800816a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800816e:	f932 0c26 	ldrsh.w	r0, [r2, #-38]
 8008172:	461a      	mov	r2, r3
 8008174:	f000 f85a 	bl	800822c <hagl_blit>

    return bitmap.width;
 8008178:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800817c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8008180:	b2db      	uxtb	r3, r3
}
 8008182:	4618      	mov	r0, r3
 8008184:	f507 5781 	add.w	r7, r7, #4128	; 0x1020
 8008188:	3714      	adds	r7, #20
 800818a:	46bd      	mov	sp, r7
 800818c:	bd90      	pop	{r4, r7, pc}

0800818e <hagl_put_text>:
 * Write a string of text by calling hagl_put_char() repeadetly. CR and LF
 * continue from the next line.
 */

uint16_t hagl_put_text(const wchar_t *str, int16_t x0, int16_t y0, color_t color, const unsigned char *font)
{
 800818e:	b580      	push	{r7, lr}
 8008190:	b08c      	sub	sp, #48	; 0x30
 8008192:	af02      	add	r7, sp, #8
 8008194:	60f8      	str	r0, [r7, #12]
 8008196:	4608      	mov	r0, r1
 8008198:	4611      	mov	r1, r2
 800819a:	461a      	mov	r2, r3
 800819c:	4603      	mov	r3, r0
 800819e:	817b      	strh	r3, [r7, #10]
 80081a0:	460b      	mov	r3, r1
 80081a2:	813b      	strh	r3, [r7, #8]
 80081a4:	4613      	mov	r3, r2
 80081a6:	80fb      	strh	r3, [r7, #6]
    wchar_t temp;
    uint8_t status;
    uint16_t original = x0;
 80081a8:	897b      	ldrh	r3, [r7, #10]
 80081aa:	84fb      	strh	r3, [r7, #38]	; 0x26
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 80081ac:	f107 0314 	add.w	r3, r7, #20
 80081b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80081b2:	4618      	mov	r0, r3
 80081b4:	f7ff fc4a 	bl	8007a4c <fontx_meta>
 80081b8:	4603      	mov	r3, r0
 80081ba:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    if (0 != status) {
 80081be:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d001      	beq.n	80081ca <hagl_put_text+0x3c>
        return 0;
 80081c6:	2300      	movs	r3, #0
 80081c8:	e02c      	b.n	8008224 <hagl_put_text+0x96>
    }

    do {
        temp = *str++;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	1d1a      	adds	r2, r3, #4
 80081ce:	60fa      	str	r2, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	623b      	str	r3, [r7, #32]
        if (13 == temp || 10 == temp) {
 80081d4:	6a3b      	ldr	r3, [r7, #32]
 80081d6:	2b0d      	cmp	r3, #13
 80081d8:	d002      	beq.n	80081e0 <hagl_put_text+0x52>
 80081da:	6a3b      	ldr	r3, [r7, #32]
 80081dc:	2b0a      	cmp	r3, #10
 80081de:	d108      	bne.n	80081f2 <hagl_put_text+0x64>
            x0 = 0;
 80081e0:	2300      	movs	r3, #0
 80081e2:	817b      	strh	r3, [r7, #10]
            y0 += meta.height;
 80081e4:	7fbb      	ldrb	r3, [r7, #30]
 80081e6:	b29a      	uxth	r2, r3
 80081e8:	893b      	ldrh	r3, [r7, #8]
 80081ea:	4413      	add	r3, r2
 80081ec:	b29b      	uxth	r3, r3
 80081ee:	813b      	strh	r3, [r7, #8]
 80081f0:	e010      	b.n	8008214 <hagl_put_text+0x86>
        } else {
            x0 += hagl_put_char(temp, x0, y0, color, font);
 80081f2:	88f8      	ldrh	r0, [r7, #6]
 80081f4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80081f8:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80081fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081fe:	9300      	str	r3, [sp, #0]
 8008200:	4603      	mov	r3, r0
 8008202:	6a38      	ldr	r0, [r7, #32]
 8008204:	f7ff febc 	bl	8007f80 <hagl_put_char>
 8008208:	4603      	mov	r3, r0
 800820a:	b29a      	uxth	r2, r3
 800820c:	897b      	ldrh	r3, [r7, #10]
 800820e:	4413      	add	r3, r2
 8008210:	b29b      	uxth	r3, r3
 8008212:	817b      	strh	r3, [r7, #10]
        }
    } while (*str != 0);
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d1d6      	bne.n	80081ca <hagl_put_text+0x3c>

    return x0 - original;
 800821c:	897a      	ldrh	r2, [r7, #10]
 800821e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008220:	1ad3      	subs	r3, r2, r3
 8008222:	b29b      	uxth	r3, r3
}
 8008224:	4618      	mov	r0, r3
 8008226:	3728      	adds	r7, #40	; 0x28
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}

0800822c <hagl_blit>:
 * configurable source and destination see the file blit.c.
 *
 * TODO: Handle transparency.
 */

void hagl_blit(int16_t x0, int16_t y0, bitmap_t *source) {
 800822c:	b580      	push	{r7, lr}
 800822e:	b086      	sub	sp, #24
 8008230:	af00      	add	r7, sp, #0
 8008232:	4603      	mov	r3, r0
 8008234:	603a      	str	r2, [r7, #0]
 8008236:	80fb      	strh	r3, [r7, #6]
 8008238:	460b      	mov	r3, r1
 800823a:	80bb      	strh	r3, [r7, #4]
        /* Inside of bounds, can use HAL provided blit. */
        hagl_hal_blit(x0, y0, source);
    }
#else
    color_t color;
    color_t *ptr = (color_t *) source->buffer;
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	68db      	ldr	r3, [r3, #12]
 8008240:	617b      	str	r3, [r7, #20]

    for (uint16_t y = 0; y < source->height; y++) {
 8008242:	2300      	movs	r3, #0
 8008244:	827b      	strh	r3, [r7, #18]
 8008246:	e020      	b.n	800828a <hagl_blit+0x5e>
        for (uint16_t x = 0; x < source->width; x++) {
 8008248:	2300      	movs	r3, #0
 800824a:	823b      	strh	r3, [r7, #16]
 800824c:	e015      	b.n	800827a <hagl_blit+0x4e>
            color = *(ptr++);
 800824e:	697b      	ldr	r3, [r7, #20]
 8008250:	1c9a      	adds	r2, r3, #2
 8008252:	617a      	str	r2, [r7, #20]
 8008254:	881b      	ldrh	r3, [r3, #0]
 8008256:	81fb      	strh	r3, [r7, #14]
            hagl_put_pixel(x0 + x, y0 + y, color);
 8008258:	88fa      	ldrh	r2, [r7, #6]
 800825a:	8a3b      	ldrh	r3, [r7, #16]
 800825c:	4413      	add	r3, r2
 800825e:	b29b      	uxth	r3, r3
 8008260:	b218      	sxth	r0, r3
 8008262:	88ba      	ldrh	r2, [r7, #4]
 8008264:	8a7b      	ldrh	r3, [r7, #18]
 8008266:	4413      	add	r3, r2
 8008268:	b29b      	uxth	r3, r3
 800826a:	b21b      	sxth	r3, r3
 800826c:	89fa      	ldrh	r2, [r7, #14]
 800826e:	4619      	mov	r1, r3
 8008270:	f7ff fce2 	bl	8007c38 <hagl_put_pixel>
        for (uint16_t x = 0; x < source->width; x++) {
 8008274:	8a3b      	ldrh	r3, [r7, #16]
 8008276:	3301      	adds	r3, #1
 8008278:	823b      	strh	r3, [r7, #16]
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	881b      	ldrh	r3, [r3, #0]
 800827e:	8a3a      	ldrh	r2, [r7, #16]
 8008280:	429a      	cmp	r2, r3
 8008282:	d3e4      	bcc.n	800824e <hagl_blit+0x22>
    for (uint16_t y = 0; y < source->height; y++) {
 8008284:	8a7b      	ldrh	r3, [r7, #18]
 8008286:	3301      	adds	r3, #1
 8008288:	827b      	strh	r3, [r7, #18]
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	885b      	ldrh	r3, [r3, #2]
 800828e:	8a7a      	ldrh	r2, [r7, #18]
 8008290:	429a      	cmp	r2, r3
 8008292:	d3d9      	bcc.n	8008248 <hagl_blit+0x1c>
        }
    }
#endif
};
 8008294:	bf00      	nop
 8008296:	bf00      	nop
 8008298:	3718      	adds	r7, #24
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}
	...

080082a0 <hagl_clear_screen>:
        }
    }
#endif
};

void hagl_clear_screen() {
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b084      	sub	sp, #16
 80082a4:	af02      	add	r7, sp, #8
#ifdef HAGL_HAS_HAL_CLEAR_SCREEN
    hagl_hal_clear_screen();
#else
    uint16_t x0 = clip_window.x0;
 80082a6:	4b12      	ldr	r3, [pc, #72]	; (80082f0 <hagl_clear_screen+0x50>)
 80082a8:	881b      	ldrh	r3, [r3, #0]
 80082aa:	80fb      	strh	r3, [r7, #6]
    uint16_t y0 = clip_window.y0;
 80082ac:	4b10      	ldr	r3, [pc, #64]	; (80082f0 <hagl_clear_screen+0x50>)
 80082ae:	885b      	ldrh	r3, [r3, #2]
 80082b0:	80bb      	strh	r3, [r7, #4]
    uint16_t x1 = clip_window.x1;
 80082b2:	4b0f      	ldr	r3, [pc, #60]	; (80082f0 <hagl_clear_screen+0x50>)
 80082b4:	889b      	ldrh	r3, [r3, #4]
 80082b6:	807b      	strh	r3, [r7, #2]
    uint16_t y1 = clip_window.y1;
 80082b8:	4b0d      	ldr	r3, [pc, #52]	; (80082f0 <hagl_clear_screen+0x50>)
 80082ba:	88db      	ldrh	r3, [r3, #6]
 80082bc:	803b      	strh	r3, [r7, #0]

    hagl_set_clip_window(0, 0, DISPLAY_WIDTH - 1, DISPLAY_HEIGHT -1);
 80082be:	237f      	movs	r3, #127	; 0x7f
 80082c0:	229f      	movs	r2, #159	; 0x9f
 80082c2:	2100      	movs	r1, #0
 80082c4:	2000      	movs	r0, #0
 80082c6:	f7ff fc95 	bl	8007bf4 <hagl_set_clip_window>
    hagl_fill_rectangle(0, 0, DISPLAY_WIDTH - 1, DISPLAY_HEIGHT -1, 0x00);
 80082ca:	2300      	movs	r3, #0
 80082cc:	9300      	str	r3, [sp, #0]
 80082ce:	237f      	movs	r3, #127	; 0x7f
 80082d0:	229f      	movs	r2, #159	; 0x9f
 80082d2:	2100      	movs	r1, #0
 80082d4:	2000      	movs	r0, #0
 80082d6:	f7ff fdaf 	bl	8007e38 <hagl_fill_rectangle>
    hagl_set_clip_window(x0, y0, x1, y1);
 80082da:	883b      	ldrh	r3, [r7, #0]
 80082dc:	887a      	ldrh	r2, [r7, #2]
 80082de:	88b9      	ldrh	r1, [r7, #4]
 80082e0:	88f8      	ldrh	r0, [r7, #6]
 80082e2:	f7ff fc87 	bl	8007bf4 <hagl_set_clip_window>
#endif
}
 80082e6:	bf00      	nop
 80082e8:	3708      	adds	r7, #8
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}
 80082ee:	bf00      	nop
 80082f0:	2000000c 	.word	0x2000000c

080082f4 <hagl_init>:
#else
    return rgb565(r, g, b);
#endif
}

bitmap_t *hagl_init() {
 80082f4:	b580      	push	{r7, lr}
 80082f6:	af00      	add	r7, sp, #0
#ifdef HAGL_HAS_HAL_INIT
    bitmap_t *bb = hagl_hal_init();
    hagl_clear_screen();
    return bb;
#else
    hagl_clear_screen();
 80082f8:	f7ff ffd2 	bl	80082a0 <hagl_clear_screen>
    return NULL;
 80082fc:	2300      	movs	r3, #0
#endif
};
 80082fe:	4618      	mov	r0, r3
 8008300:	bd80      	pop	{r7, pc}
	...

08008304 <__errno>:
 8008304:	4b01      	ldr	r3, [pc, #4]	; (800830c <__errno+0x8>)
 8008306:	6818      	ldr	r0, [r3, #0]
 8008308:	4770      	bx	lr
 800830a:	bf00      	nop
 800830c:	20000014 	.word	0x20000014

08008310 <__sflush_r>:
 8008310:	898a      	ldrh	r2, [r1, #12]
 8008312:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008316:	4605      	mov	r5, r0
 8008318:	0710      	lsls	r0, r2, #28
 800831a:	460c      	mov	r4, r1
 800831c:	d458      	bmi.n	80083d0 <__sflush_r+0xc0>
 800831e:	684b      	ldr	r3, [r1, #4]
 8008320:	2b00      	cmp	r3, #0
 8008322:	dc05      	bgt.n	8008330 <__sflush_r+0x20>
 8008324:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008326:	2b00      	cmp	r3, #0
 8008328:	dc02      	bgt.n	8008330 <__sflush_r+0x20>
 800832a:	2000      	movs	r0, #0
 800832c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008330:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008332:	2e00      	cmp	r6, #0
 8008334:	d0f9      	beq.n	800832a <__sflush_r+0x1a>
 8008336:	2300      	movs	r3, #0
 8008338:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800833c:	682f      	ldr	r7, [r5, #0]
 800833e:	602b      	str	r3, [r5, #0]
 8008340:	d032      	beq.n	80083a8 <__sflush_r+0x98>
 8008342:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008344:	89a3      	ldrh	r3, [r4, #12]
 8008346:	075a      	lsls	r2, r3, #29
 8008348:	d505      	bpl.n	8008356 <__sflush_r+0x46>
 800834a:	6863      	ldr	r3, [r4, #4]
 800834c:	1ac0      	subs	r0, r0, r3
 800834e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008350:	b10b      	cbz	r3, 8008356 <__sflush_r+0x46>
 8008352:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008354:	1ac0      	subs	r0, r0, r3
 8008356:	2300      	movs	r3, #0
 8008358:	4602      	mov	r2, r0
 800835a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800835c:	6a21      	ldr	r1, [r4, #32]
 800835e:	4628      	mov	r0, r5
 8008360:	47b0      	blx	r6
 8008362:	1c43      	adds	r3, r0, #1
 8008364:	89a3      	ldrh	r3, [r4, #12]
 8008366:	d106      	bne.n	8008376 <__sflush_r+0x66>
 8008368:	6829      	ldr	r1, [r5, #0]
 800836a:	291d      	cmp	r1, #29
 800836c:	d82c      	bhi.n	80083c8 <__sflush_r+0xb8>
 800836e:	4a2a      	ldr	r2, [pc, #168]	; (8008418 <__sflush_r+0x108>)
 8008370:	40ca      	lsrs	r2, r1
 8008372:	07d6      	lsls	r6, r2, #31
 8008374:	d528      	bpl.n	80083c8 <__sflush_r+0xb8>
 8008376:	2200      	movs	r2, #0
 8008378:	6062      	str	r2, [r4, #4]
 800837a:	04d9      	lsls	r1, r3, #19
 800837c:	6922      	ldr	r2, [r4, #16]
 800837e:	6022      	str	r2, [r4, #0]
 8008380:	d504      	bpl.n	800838c <__sflush_r+0x7c>
 8008382:	1c42      	adds	r2, r0, #1
 8008384:	d101      	bne.n	800838a <__sflush_r+0x7a>
 8008386:	682b      	ldr	r3, [r5, #0]
 8008388:	b903      	cbnz	r3, 800838c <__sflush_r+0x7c>
 800838a:	6560      	str	r0, [r4, #84]	; 0x54
 800838c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800838e:	602f      	str	r7, [r5, #0]
 8008390:	2900      	cmp	r1, #0
 8008392:	d0ca      	beq.n	800832a <__sflush_r+0x1a>
 8008394:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008398:	4299      	cmp	r1, r3
 800839a:	d002      	beq.n	80083a2 <__sflush_r+0x92>
 800839c:	4628      	mov	r0, r5
 800839e:	f000 fa33 	bl	8008808 <_free_r>
 80083a2:	2000      	movs	r0, #0
 80083a4:	6360      	str	r0, [r4, #52]	; 0x34
 80083a6:	e7c1      	b.n	800832c <__sflush_r+0x1c>
 80083a8:	6a21      	ldr	r1, [r4, #32]
 80083aa:	2301      	movs	r3, #1
 80083ac:	4628      	mov	r0, r5
 80083ae:	47b0      	blx	r6
 80083b0:	1c41      	adds	r1, r0, #1
 80083b2:	d1c7      	bne.n	8008344 <__sflush_r+0x34>
 80083b4:	682b      	ldr	r3, [r5, #0]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d0c4      	beq.n	8008344 <__sflush_r+0x34>
 80083ba:	2b1d      	cmp	r3, #29
 80083bc:	d001      	beq.n	80083c2 <__sflush_r+0xb2>
 80083be:	2b16      	cmp	r3, #22
 80083c0:	d101      	bne.n	80083c6 <__sflush_r+0xb6>
 80083c2:	602f      	str	r7, [r5, #0]
 80083c4:	e7b1      	b.n	800832a <__sflush_r+0x1a>
 80083c6:	89a3      	ldrh	r3, [r4, #12]
 80083c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083cc:	81a3      	strh	r3, [r4, #12]
 80083ce:	e7ad      	b.n	800832c <__sflush_r+0x1c>
 80083d0:	690f      	ldr	r7, [r1, #16]
 80083d2:	2f00      	cmp	r7, #0
 80083d4:	d0a9      	beq.n	800832a <__sflush_r+0x1a>
 80083d6:	0793      	lsls	r3, r2, #30
 80083d8:	680e      	ldr	r6, [r1, #0]
 80083da:	bf08      	it	eq
 80083dc:	694b      	ldreq	r3, [r1, #20]
 80083de:	600f      	str	r7, [r1, #0]
 80083e0:	bf18      	it	ne
 80083e2:	2300      	movne	r3, #0
 80083e4:	eba6 0807 	sub.w	r8, r6, r7
 80083e8:	608b      	str	r3, [r1, #8]
 80083ea:	f1b8 0f00 	cmp.w	r8, #0
 80083ee:	dd9c      	ble.n	800832a <__sflush_r+0x1a>
 80083f0:	6a21      	ldr	r1, [r4, #32]
 80083f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80083f4:	4643      	mov	r3, r8
 80083f6:	463a      	mov	r2, r7
 80083f8:	4628      	mov	r0, r5
 80083fa:	47b0      	blx	r6
 80083fc:	2800      	cmp	r0, #0
 80083fe:	dc06      	bgt.n	800840e <__sflush_r+0xfe>
 8008400:	89a3      	ldrh	r3, [r4, #12]
 8008402:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008406:	81a3      	strh	r3, [r4, #12]
 8008408:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800840c:	e78e      	b.n	800832c <__sflush_r+0x1c>
 800840e:	4407      	add	r7, r0
 8008410:	eba8 0800 	sub.w	r8, r8, r0
 8008414:	e7e9      	b.n	80083ea <__sflush_r+0xda>
 8008416:	bf00      	nop
 8008418:	20400001 	.word	0x20400001

0800841c <_fflush_r>:
 800841c:	b538      	push	{r3, r4, r5, lr}
 800841e:	690b      	ldr	r3, [r1, #16]
 8008420:	4605      	mov	r5, r0
 8008422:	460c      	mov	r4, r1
 8008424:	b913      	cbnz	r3, 800842c <_fflush_r+0x10>
 8008426:	2500      	movs	r5, #0
 8008428:	4628      	mov	r0, r5
 800842a:	bd38      	pop	{r3, r4, r5, pc}
 800842c:	b118      	cbz	r0, 8008436 <_fflush_r+0x1a>
 800842e:	6983      	ldr	r3, [r0, #24]
 8008430:	b90b      	cbnz	r3, 8008436 <_fflush_r+0x1a>
 8008432:	f000 f899 	bl	8008568 <__sinit>
 8008436:	4b14      	ldr	r3, [pc, #80]	; (8008488 <_fflush_r+0x6c>)
 8008438:	429c      	cmp	r4, r3
 800843a:	d11b      	bne.n	8008474 <_fflush_r+0x58>
 800843c:	686c      	ldr	r4, [r5, #4]
 800843e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d0ef      	beq.n	8008426 <_fflush_r+0xa>
 8008446:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008448:	07d0      	lsls	r0, r2, #31
 800844a:	d404      	bmi.n	8008456 <_fflush_r+0x3a>
 800844c:	0599      	lsls	r1, r3, #22
 800844e:	d402      	bmi.n	8008456 <_fflush_r+0x3a>
 8008450:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008452:	f000 f94c 	bl	80086ee <__retarget_lock_acquire_recursive>
 8008456:	4628      	mov	r0, r5
 8008458:	4621      	mov	r1, r4
 800845a:	f7ff ff59 	bl	8008310 <__sflush_r>
 800845e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008460:	07da      	lsls	r2, r3, #31
 8008462:	4605      	mov	r5, r0
 8008464:	d4e0      	bmi.n	8008428 <_fflush_r+0xc>
 8008466:	89a3      	ldrh	r3, [r4, #12]
 8008468:	059b      	lsls	r3, r3, #22
 800846a:	d4dd      	bmi.n	8008428 <_fflush_r+0xc>
 800846c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800846e:	f000 f93f 	bl	80086f0 <__retarget_lock_release_recursive>
 8008472:	e7d9      	b.n	8008428 <_fflush_r+0xc>
 8008474:	4b05      	ldr	r3, [pc, #20]	; (800848c <_fflush_r+0x70>)
 8008476:	429c      	cmp	r4, r3
 8008478:	d101      	bne.n	800847e <_fflush_r+0x62>
 800847a:	68ac      	ldr	r4, [r5, #8]
 800847c:	e7df      	b.n	800843e <_fflush_r+0x22>
 800847e:	4b04      	ldr	r3, [pc, #16]	; (8008490 <_fflush_r+0x74>)
 8008480:	429c      	cmp	r4, r3
 8008482:	bf08      	it	eq
 8008484:	68ec      	ldreq	r4, [r5, #12]
 8008486:	e7da      	b.n	800843e <_fflush_r+0x22>
 8008488:	080110a4 	.word	0x080110a4
 800848c:	080110c4 	.word	0x080110c4
 8008490:	08011084 	.word	0x08011084

08008494 <fflush>:
 8008494:	4601      	mov	r1, r0
 8008496:	b920      	cbnz	r0, 80084a2 <fflush+0xe>
 8008498:	4b04      	ldr	r3, [pc, #16]	; (80084ac <fflush+0x18>)
 800849a:	4905      	ldr	r1, [pc, #20]	; (80084b0 <fflush+0x1c>)
 800849c:	6818      	ldr	r0, [r3, #0]
 800849e:	f000 b8e1 	b.w	8008664 <_fwalk_reent>
 80084a2:	4b04      	ldr	r3, [pc, #16]	; (80084b4 <fflush+0x20>)
 80084a4:	6818      	ldr	r0, [r3, #0]
 80084a6:	f7ff bfb9 	b.w	800841c <_fflush_r>
 80084aa:	bf00      	nop
 80084ac:	080110e4 	.word	0x080110e4
 80084b0:	0800841d 	.word	0x0800841d
 80084b4:	20000014 	.word	0x20000014

080084b8 <std>:
 80084b8:	2300      	movs	r3, #0
 80084ba:	b510      	push	{r4, lr}
 80084bc:	4604      	mov	r4, r0
 80084be:	e9c0 3300 	strd	r3, r3, [r0]
 80084c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80084c6:	6083      	str	r3, [r0, #8]
 80084c8:	8181      	strh	r1, [r0, #12]
 80084ca:	6643      	str	r3, [r0, #100]	; 0x64
 80084cc:	81c2      	strh	r2, [r0, #14]
 80084ce:	6183      	str	r3, [r0, #24]
 80084d0:	4619      	mov	r1, r3
 80084d2:	2208      	movs	r2, #8
 80084d4:	305c      	adds	r0, #92	; 0x5c
 80084d6:	f000 f98f 	bl	80087f8 <memset>
 80084da:	4b05      	ldr	r3, [pc, #20]	; (80084f0 <std+0x38>)
 80084dc:	6263      	str	r3, [r4, #36]	; 0x24
 80084de:	4b05      	ldr	r3, [pc, #20]	; (80084f4 <std+0x3c>)
 80084e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80084e2:	4b05      	ldr	r3, [pc, #20]	; (80084f8 <std+0x40>)
 80084e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80084e6:	4b05      	ldr	r3, [pc, #20]	; (80084fc <std+0x44>)
 80084e8:	6224      	str	r4, [r4, #32]
 80084ea:	6323      	str	r3, [r4, #48]	; 0x30
 80084ec:	bd10      	pop	{r4, pc}
 80084ee:	bf00      	nop
 80084f0:	08009405 	.word	0x08009405
 80084f4:	08009427 	.word	0x08009427
 80084f8:	0800945f 	.word	0x0800945f
 80084fc:	08009483 	.word	0x08009483

08008500 <_cleanup_r>:
 8008500:	4901      	ldr	r1, [pc, #4]	; (8008508 <_cleanup_r+0x8>)
 8008502:	f000 b8af 	b.w	8008664 <_fwalk_reent>
 8008506:	bf00      	nop
 8008508:	0800841d 	.word	0x0800841d

0800850c <__sfmoreglue>:
 800850c:	b570      	push	{r4, r5, r6, lr}
 800850e:	2268      	movs	r2, #104	; 0x68
 8008510:	1e4d      	subs	r5, r1, #1
 8008512:	4355      	muls	r5, r2
 8008514:	460e      	mov	r6, r1
 8008516:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800851a:	f000 f9e1 	bl	80088e0 <_malloc_r>
 800851e:	4604      	mov	r4, r0
 8008520:	b140      	cbz	r0, 8008534 <__sfmoreglue+0x28>
 8008522:	2100      	movs	r1, #0
 8008524:	e9c0 1600 	strd	r1, r6, [r0]
 8008528:	300c      	adds	r0, #12
 800852a:	60a0      	str	r0, [r4, #8]
 800852c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008530:	f000 f962 	bl	80087f8 <memset>
 8008534:	4620      	mov	r0, r4
 8008536:	bd70      	pop	{r4, r5, r6, pc}

08008538 <__sfp_lock_acquire>:
 8008538:	4801      	ldr	r0, [pc, #4]	; (8008540 <__sfp_lock_acquire+0x8>)
 800853a:	f000 b8d8 	b.w	80086ee <__retarget_lock_acquire_recursive>
 800853e:	bf00      	nop
 8008540:	2000042d 	.word	0x2000042d

08008544 <__sfp_lock_release>:
 8008544:	4801      	ldr	r0, [pc, #4]	; (800854c <__sfp_lock_release+0x8>)
 8008546:	f000 b8d3 	b.w	80086f0 <__retarget_lock_release_recursive>
 800854a:	bf00      	nop
 800854c:	2000042d 	.word	0x2000042d

08008550 <__sinit_lock_acquire>:
 8008550:	4801      	ldr	r0, [pc, #4]	; (8008558 <__sinit_lock_acquire+0x8>)
 8008552:	f000 b8cc 	b.w	80086ee <__retarget_lock_acquire_recursive>
 8008556:	bf00      	nop
 8008558:	2000042e 	.word	0x2000042e

0800855c <__sinit_lock_release>:
 800855c:	4801      	ldr	r0, [pc, #4]	; (8008564 <__sinit_lock_release+0x8>)
 800855e:	f000 b8c7 	b.w	80086f0 <__retarget_lock_release_recursive>
 8008562:	bf00      	nop
 8008564:	2000042e 	.word	0x2000042e

08008568 <__sinit>:
 8008568:	b510      	push	{r4, lr}
 800856a:	4604      	mov	r4, r0
 800856c:	f7ff fff0 	bl	8008550 <__sinit_lock_acquire>
 8008570:	69a3      	ldr	r3, [r4, #24]
 8008572:	b11b      	cbz	r3, 800857c <__sinit+0x14>
 8008574:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008578:	f7ff bff0 	b.w	800855c <__sinit_lock_release>
 800857c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008580:	6523      	str	r3, [r4, #80]	; 0x50
 8008582:	4b13      	ldr	r3, [pc, #76]	; (80085d0 <__sinit+0x68>)
 8008584:	4a13      	ldr	r2, [pc, #76]	; (80085d4 <__sinit+0x6c>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	62a2      	str	r2, [r4, #40]	; 0x28
 800858a:	42a3      	cmp	r3, r4
 800858c:	bf04      	itt	eq
 800858e:	2301      	moveq	r3, #1
 8008590:	61a3      	streq	r3, [r4, #24]
 8008592:	4620      	mov	r0, r4
 8008594:	f000 f820 	bl	80085d8 <__sfp>
 8008598:	6060      	str	r0, [r4, #4]
 800859a:	4620      	mov	r0, r4
 800859c:	f000 f81c 	bl	80085d8 <__sfp>
 80085a0:	60a0      	str	r0, [r4, #8]
 80085a2:	4620      	mov	r0, r4
 80085a4:	f000 f818 	bl	80085d8 <__sfp>
 80085a8:	2200      	movs	r2, #0
 80085aa:	60e0      	str	r0, [r4, #12]
 80085ac:	2104      	movs	r1, #4
 80085ae:	6860      	ldr	r0, [r4, #4]
 80085b0:	f7ff ff82 	bl	80084b8 <std>
 80085b4:	68a0      	ldr	r0, [r4, #8]
 80085b6:	2201      	movs	r2, #1
 80085b8:	2109      	movs	r1, #9
 80085ba:	f7ff ff7d 	bl	80084b8 <std>
 80085be:	68e0      	ldr	r0, [r4, #12]
 80085c0:	2202      	movs	r2, #2
 80085c2:	2112      	movs	r1, #18
 80085c4:	f7ff ff78 	bl	80084b8 <std>
 80085c8:	2301      	movs	r3, #1
 80085ca:	61a3      	str	r3, [r4, #24]
 80085cc:	e7d2      	b.n	8008574 <__sinit+0xc>
 80085ce:	bf00      	nop
 80085d0:	080110e4 	.word	0x080110e4
 80085d4:	08008501 	.word	0x08008501

080085d8 <__sfp>:
 80085d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085da:	4607      	mov	r7, r0
 80085dc:	f7ff ffac 	bl	8008538 <__sfp_lock_acquire>
 80085e0:	4b1e      	ldr	r3, [pc, #120]	; (800865c <__sfp+0x84>)
 80085e2:	681e      	ldr	r6, [r3, #0]
 80085e4:	69b3      	ldr	r3, [r6, #24]
 80085e6:	b913      	cbnz	r3, 80085ee <__sfp+0x16>
 80085e8:	4630      	mov	r0, r6
 80085ea:	f7ff ffbd 	bl	8008568 <__sinit>
 80085ee:	3648      	adds	r6, #72	; 0x48
 80085f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80085f4:	3b01      	subs	r3, #1
 80085f6:	d503      	bpl.n	8008600 <__sfp+0x28>
 80085f8:	6833      	ldr	r3, [r6, #0]
 80085fa:	b30b      	cbz	r3, 8008640 <__sfp+0x68>
 80085fc:	6836      	ldr	r6, [r6, #0]
 80085fe:	e7f7      	b.n	80085f0 <__sfp+0x18>
 8008600:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008604:	b9d5      	cbnz	r5, 800863c <__sfp+0x64>
 8008606:	4b16      	ldr	r3, [pc, #88]	; (8008660 <__sfp+0x88>)
 8008608:	60e3      	str	r3, [r4, #12]
 800860a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800860e:	6665      	str	r5, [r4, #100]	; 0x64
 8008610:	f000 f86c 	bl	80086ec <__retarget_lock_init_recursive>
 8008614:	f7ff ff96 	bl	8008544 <__sfp_lock_release>
 8008618:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800861c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008620:	6025      	str	r5, [r4, #0]
 8008622:	61a5      	str	r5, [r4, #24]
 8008624:	2208      	movs	r2, #8
 8008626:	4629      	mov	r1, r5
 8008628:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800862c:	f000 f8e4 	bl	80087f8 <memset>
 8008630:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008634:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008638:	4620      	mov	r0, r4
 800863a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800863c:	3468      	adds	r4, #104	; 0x68
 800863e:	e7d9      	b.n	80085f4 <__sfp+0x1c>
 8008640:	2104      	movs	r1, #4
 8008642:	4638      	mov	r0, r7
 8008644:	f7ff ff62 	bl	800850c <__sfmoreglue>
 8008648:	4604      	mov	r4, r0
 800864a:	6030      	str	r0, [r6, #0]
 800864c:	2800      	cmp	r0, #0
 800864e:	d1d5      	bne.n	80085fc <__sfp+0x24>
 8008650:	f7ff ff78 	bl	8008544 <__sfp_lock_release>
 8008654:	230c      	movs	r3, #12
 8008656:	603b      	str	r3, [r7, #0]
 8008658:	e7ee      	b.n	8008638 <__sfp+0x60>
 800865a:	bf00      	nop
 800865c:	080110e4 	.word	0x080110e4
 8008660:	ffff0001 	.word	0xffff0001

08008664 <_fwalk_reent>:
 8008664:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008668:	4606      	mov	r6, r0
 800866a:	4688      	mov	r8, r1
 800866c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008670:	2700      	movs	r7, #0
 8008672:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008676:	f1b9 0901 	subs.w	r9, r9, #1
 800867a:	d505      	bpl.n	8008688 <_fwalk_reent+0x24>
 800867c:	6824      	ldr	r4, [r4, #0]
 800867e:	2c00      	cmp	r4, #0
 8008680:	d1f7      	bne.n	8008672 <_fwalk_reent+0xe>
 8008682:	4638      	mov	r0, r7
 8008684:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008688:	89ab      	ldrh	r3, [r5, #12]
 800868a:	2b01      	cmp	r3, #1
 800868c:	d907      	bls.n	800869e <_fwalk_reent+0x3a>
 800868e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008692:	3301      	adds	r3, #1
 8008694:	d003      	beq.n	800869e <_fwalk_reent+0x3a>
 8008696:	4629      	mov	r1, r5
 8008698:	4630      	mov	r0, r6
 800869a:	47c0      	blx	r8
 800869c:	4307      	orrs	r7, r0
 800869e:	3568      	adds	r5, #104	; 0x68
 80086a0:	e7e9      	b.n	8008676 <_fwalk_reent+0x12>
	...

080086a4 <__libc_init_array>:
 80086a4:	b570      	push	{r4, r5, r6, lr}
 80086a6:	4d0d      	ldr	r5, [pc, #52]	; (80086dc <__libc_init_array+0x38>)
 80086a8:	4c0d      	ldr	r4, [pc, #52]	; (80086e0 <__libc_init_array+0x3c>)
 80086aa:	1b64      	subs	r4, r4, r5
 80086ac:	10a4      	asrs	r4, r4, #2
 80086ae:	2600      	movs	r6, #0
 80086b0:	42a6      	cmp	r6, r4
 80086b2:	d109      	bne.n	80086c8 <__libc_init_array+0x24>
 80086b4:	4d0b      	ldr	r5, [pc, #44]	; (80086e4 <__libc_init_array+0x40>)
 80086b6:	4c0c      	ldr	r4, [pc, #48]	; (80086e8 <__libc_init_array+0x44>)
 80086b8:	f004 fc84 	bl	800cfc4 <_init>
 80086bc:	1b64      	subs	r4, r4, r5
 80086be:	10a4      	asrs	r4, r4, #2
 80086c0:	2600      	movs	r6, #0
 80086c2:	42a6      	cmp	r6, r4
 80086c4:	d105      	bne.n	80086d2 <__libc_init_array+0x2e>
 80086c6:	bd70      	pop	{r4, r5, r6, pc}
 80086c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80086cc:	4798      	blx	r3
 80086ce:	3601      	adds	r6, #1
 80086d0:	e7ee      	b.n	80086b0 <__libc_init_array+0xc>
 80086d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80086d6:	4798      	blx	r3
 80086d8:	3601      	adds	r6, #1
 80086da:	e7f2      	b.n	80086c2 <__libc_init_array+0x1e>
 80086dc:	08011678 	.word	0x08011678
 80086e0:	08011678 	.word	0x08011678
 80086e4:	08011678 	.word	0x08011678
 80086e8:	0801167c 	.word	0x0801167c

080086ec <__retarget_lock_init_recursive>:
 80086ec:	4770      	bx	lr

080086ee <__retarget_lock_acquire_recursive>:
 80086ee:	4770      	bx	lr

080086f0 <__retarget_lock_release_recursive>:
 80086f0:	4770      	bx	lr

080086f2 <__swhatbuf_r>:
 80086f2:	b570      	push	{r4, r5, r6, lr}
 80086f4:	460e      	mov	r6, r1
 80086f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086fa:	2900      	cmp	r1, #0
 80086fc:	b096      	sub	sp, #88	; 0x58
 80086fe:	4614      	mov	r4, r2
 8008700:	461d      	mov	r5, r3
 8008702:	da08      	bge.n	8008716 <__swhatbuf_r+0x24>
 8008704:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008708:	2200      	movs	r2, #0
 800870a:	602a      	str	r2, [r5, #0]
 800870c:	061a      	lsls	r2, r3, #24
 800870e:	d410      	bmi.n	8008732 <__swhatbuf_r+0x40>
 8008710:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008714:	e00e      	b.n	8008734 <__swhatbuf_r+0x42>
 8008716:	466a      	mov	r2, sp
 8008718:	f001 fe48 	bl	800a3ac <_fstat_r>
 800871c:	2800      	cmp	r0, #0
 800871e:	dbf1      	blt.n	8008704 <__swhatbuf_r+0x12>
 8008720:	9a01      	ldr	r2, [sp, #4]
 8008722:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008726:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800872a:	425a      	negs	r2, r3
 800872c:	415a      	adcs	r2, r3
 800872e:	602a      	str	r2, [r5, #0]
 8008730:	e7ee      	b.n	8008710 <__swhatbuf_r+0x1e>
 8008732:	2340      	movs	r3, #64	; 0x40
 8008734:	2000      	movs	r0, #0
 8008736:	6023      	str	r3, [r4, #0]
 8008738:	b016      	add	sp, #88	; 0x58
 800873a:	bd70      	pop	{r4, r5, r6, pc}

0800873c <__smakebuf_r>:
 800873c:	898b      	ldrh	r3, [r1, #12]
 800873e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008740:	079d      	lsls	r5, r3, #30
 8008742:	4606      	mov	r6, r0
 8008744:	460c      	mov	r4, r1
 8008746:	d507      	bpl.n	8008758 <__smakebuf_r+0x1c>
 8008748:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800874c:	6023      	str	r3, [r4, #0]
 800874e:	6123      	str	r3, [r4, #16]
 8008750:	2301      	movs	r3, #1
 8008752:	6163      	str	r3, [r4, #20]
 8008754:	b002      	add	sp, #8
 8008756:	bd70      	pop	{r4, r5, r6, pc}
 8008758:	ab01      	add	r3, sp, #4
 800875a:	466a      	mov	r2, sp
 800875c:	f7ff ffc9 	bl	80086f2 <__swhatbuf_r>
 8008760:	9900      	ldr	r1, [sp, #0]
 8008762:	4605      	mov	r5, r0
 8008764:	4630      	mov	r0, r6
 8008766:	f000 f8bb 	bl	80088e0 <_malloc_r>
 800876a:	b948      	cbnz	r0, 8008780 <__smakebuf_r+0x44>
 800876c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008770:	059a      	lsls	r2, r3, #22
 8008772:	d4ef      	bmi.n	8008754 <__smakebuf_r+0x18>
 8008774:	f023 0303 	bic.w	r3, r3, #3
 8008778:	f043 0302 	orr.w	r3, r3, #2
 800877c:	81a3      	strh	r3, [r4, #12]
 800877e:	e7e3      	b.n	8008748 <__smakebuf_r+0xc>
 8008780:	4b0d      	ldr	r3, [pc, #52]	; (80087b8 <__smakebuf_r+0x7c>)
 8008782:	62b3      	str	r3, [r6, #40]	; 0x28
 8008784:	89a3      	ldrh	r3, [r4, #12]
 8008786:	6020      	str	r0, [r4, #0]
 8008788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800878c:	81a3      	strh	r3, [r4, #12]
 800878e:	9b00      	ldr	r3, [sp, #0]
 8008790:	6163      	str	r3, [r4, #20]
 8008792:	9b01      	ldr	r3, [sp, #4]
 8008794:	6120      	str	r0, [r4, #16]
 8008796:	b15b      	cbz	r3, 80087b0 <__smakebuf_r+0x74>
 8008798:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800879c:	4630      	mov	r0, r6
 800879e:	f001 fe17 	bl	800a3d0 <_isatty_r>
 80087a2:	b128      	cbz	r0, 80087b0 <__smakebuf_r+0x74>
 80087a4:	89a3      	ldrh	r3, [r4, #12]
 80087a6:	f023 0303 	bic.w	r3, r3, #3
 80087aa:	f043 0301 	orr.w	r3, r3, #1
 80087ae:	81a3      	strh	r3, [r4, #12]
 80087b0:	89a0      	ldrh	r0, [r4, #12]
 80087b2:	4305      	orrs	r5, r0
 80087b4:	81a5      	strh	r5, [r4, #12]
 80087b6:	e7cd      	b.n	8008754 <__smakebuf_r+0x18>
 80087b8:	08008501 	.word	0x08008501

080087bc <malloc>:
 80087bc:	4b02      	ldr	r3, [pc, #8]	; (80087c8 <malloc+0xc>)
 80087be:	4601      	mov	r1, r0
 80087c0:	6818      	ldr	r0, [r3, #0]
 80087c2:	f000 b88d 	b.w	80088e0 <_malloc_r>
 80087c6:	bf00      	nop
 80087c8:	20000014 	.word	0x20000014

080087cc <free>:
 80087cc:	4b02      	ldr	r3, [pc, #8]	; (80087d8 <free+0xc>)
 80087ce:	4601      	mov	r1, r0
 80087d0:	6818      	ldr	r0, [r3, #0]
 80087d2:	f000 b819 	b.w	8008808 <_free_r>
 80087d6:	bf00      	nop
 80087d8:	20000014 	.word	0x20000014

080087dc <memcpy>:
 80087dc:	440a      	add	r2, r1
 80087de:	4291      	cmp	r1, r2
 80087e0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80087e4:	d100      	bne.n	80087e8 <memcpy+0xc>
 80087e6:	4770      	bx	lr
 80087e8:	b510      	push	{r4, lr}
 80087ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80087ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80087f2:	4291      	cmp	r1, r2
 80087f4:	d1f9      	bne.n	80087ea <memcpy+0xe>
 80087f6:	bd10      	pop	{r4, pc}

080087f8 <memset>:
 80087f8:	4402      	add	r2, r0
 80087fa:	4603      	mov	r3, r0
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d100      	bne.n	8008802 <memset+0xa>
 8008800:	4770      	bx	lr
 8008802:	f803 1b01 	strb.w	r1, [r3], #1
 8008806:	e7f9      	b.n	80087fc <memset+0x4>

08008808 <_free_r>:
 8008808:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800880a:	2900      	cmp	r1, #0
 800880c:	d044      	beq.n	8008898 <_free_r+0x90>
 800880e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008812:	9001      	str	r0, [sp, #4]
 8008814:	2b00      	cmp	r3, #0
 8008816:	f1a1 0404 	sub.w	r4, r1, #4
 800881a:	bfb8      	it	lt
 800881c:	18e4      	addlt	r4, r4, r3
 800881e:	f001 fdfd 	bl	800a41c <__malloc_lock>
 8008822:	4a1e      	ldr	r2, [pc, #120]	; (800889c <_free_r+0x94>)
 8008824:	9801      	ldr	r0, [sp, #4]
 8008826:	6813      	ldr	r3, [r2, #0]
 8008828:	b933      	cbnz	r3, 8008838 <_free_r+0x30>
 800882a:	6063      	str	r3, [r4, #4]
 800882c:	6014      	str	r4, [r2, #0]
 800882e:	b003      	add	sp, #12
 8008830:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008834:	f001 bdf8 	b.w	800a428 <__malloc_unlock>
 8008838:	42a3      	cmp	r3, r4
 800883a:	d908      	bls.n	800884e <_free_r+0x46>
 800883c:	6825      	ldr	r5, [r4, #0]
 800883e:	1961      	adds	r1, r4, r5
 8008840:	428b      	cmp	r3, r1
 8008842:	bf01      	itttt	eq
 8008844:	6819      	ldreq	r1, [r3, #0]
 8008846:	685b      	ldreq	r3, [r3, #4]
 8008848:	1949      	addeq	r1, r1, r5
 800884a:	6021      	streq	r1, [r4, #0]
 800884c:	e7ed      	b.n	800882a <_free_r+0x22>
 800884e:	461a      	mov	r2, r3
 8008850:	685b      	ldr	r3, [r3, #4]
 8008852:	b10b      	cbz	r3, 8008858 <_free_r+0x50>
 8008854:	42a3      	cmp	r3, r4
 8008856:	d9fa      	bls.n	800884e <_free_r+0x46>
 8008858:	6811      	ldr	r1, [r2, #0]
 800885a:	1855      	adds	r5, r2, r1
 800885c:	42a5      	cmp	r5, r4
 800885e:	d10b      	bne.n	8008878 <_free_r+0x70>
 8008860:	6824      	ldr	r4, [r4, #0]
 8008862:	4421      	add	r1, r4
 8008864:	1854      	adds	r4, r2, r1
 8008866:	42a3      	cmp	r3, r4
 8008868:	6011      	str	r1, [r2, #0]
 800886a:	d1e0      	bne.n	800882e <_free_r+0x26>
 800886c:	681c      	ldr	r4, [r3, #0]
 800886e:	685b      	ldr	r3, [r3, #4]
 8008870:	6053      	str	r3, [r2, #4]
 8008872:	4421      	add	r1, r4
 8008874:	6011      	str	r1, [r2, #0]
 8008876:	e7da      	b.n	800882e <_free_r+0x26>
 8008878:	d902      	bls.n	8008880 <_free_r+0x78>
 800887a:	230c      	movs	r3, #12
 800887c:	6003      	str	r3, [r0, #0]
 800887e:	e7d6      	b.n	800882e <_free_r+0x26>
 8008880:	6825      	ldr	r5, [r4, #0]
 8008882:	1961      	adds	r1, r4, r5
 8008884:	428b      	cmp	r3, r1
 8008886:	bf04      	itt	eq
 8008888:	6819      	ldreq	r1, [r3, #0]
 800888a:	685b      	ldreq	r3, [r3, #4]
 800888c:	6063      	str	r3, [r4, #4]
 800888e:	bf04      	itt	eq
 8008890:	1949      	addeq	r1, r1, r5
 8008892:	6021      	streq	r1, [r4, #0]
 8008894:	6054      	str	r4, [r2, #4]
 8008896:	e7ca      	b.n	800882e <_free_r+0x26>
 8008898:	b003      	add	sp, #12
 800889a:	bd30      	pop	{r4, r5, pc}
 800889c:	20000430 	.word	0x20000430

080088a0 <sbrk_aligned>:
 80088a0:	b570      	push	{r4, r5, r6, lr}
 80088a2:	4e0e      	ldr	r6, [pc, #56]	; (80088dc <sbrk_aligned+0x3c>)
 80088a4:	460c      	mov	r4, r1
 80088a6:	6831      	ldr	r1, [r6, #0]
 80088a8:	4605      	mov	r5, r0
 80088aa:	b911      	cbnz	r1, 80088b2 <sbrk_aligned+0x12>
 80088ac:	f000 fd9a 	bl	80093e4 <_sbrk_r>
 80088b0:	6030      	str	r0, [r6, #0]
 80088b2:	4621      	mov	r1, r4
 80088b4:	4628      	mov	r0, r5
 80088b6:	f000 fd95 	bl	80093e4 <_sbrk_r>
 80088ba:	1c43      	adds	r3, r0, #1
 80088bc:	d00a      	beq.n	80088d4 <sbrk_aligned+0x34>
 80088be:	1cc4      	adds	r4, r0, #3
 80088c0:	f024 0403 	bic.w	r4, r4, #3
 80088c4:	42a0      	cmp	r0, r4
 80088c6:	d007      	beq.n	80088d8 <sbrk_aligned+0x38>
 80088c8:	1a21      	subs	r1, r4, r0
 80088ca:	4628      	mov	r0, r5
 80088cc:	f000 fd8a 	bl	80093e4 <_sbrk_r>
 80088d0:	3001      	adds	r0, #1
 80088d2:	d101      	bne.n	80088d8 <sbrk_aligned+0x38>
 80088d4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80088d8:	4620      	mov	r0, r4
 80088da:	bd70      	pop	{r4, r5, r6, pc}
 80088dc:	20000434 	.word	0x20000434

080088e0 <_malloc_r>:
 80088e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088e4:	1ccd      	adds	r5, r1, #3
 80088e6:	f025 0503 	bic.w	r5, r5, #3
 80088ea:	3508      	adds	r5, #8
 80088ec:	2d0c      	cmp	r5, #12
 80088ee:	bf38      	it	cc
 80088f0:	250c      	movcc	r5, #12
 80088f2:	2d00      	cmp	r5, #0
 80088f4:	4607      	mov	r7, r0
 80088f6:	db01      	blt.n	80088fc <_malloc_r+0x1c>
 80088f8:	42a9      	cmp	r1, r5
 80088fa:	d905      	bls.n	8008908 <_malloc_r+0x28>
 80088fc:	230c      	movs	r3, #12
 80088fe:	603b      	str	r3, [r7, #0]
 8008900:	2600      	movs	r6, #0
 8008902:	4630      	mov	r0, r6
 8008904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008908:	4e2e      	ldr	r6, [pc, #184]	; (80089c4 <_malloc_r+0xe4>)
 800890a:	f001 fd87 	bl	800a41c <__malloc_lock>
 800890e:	6833      	ldr	r3, [r6, #0]
 8008910:	461c      	mov	r4, r3
 8008912:	bb34      	cbnz	r4, 8008962 <_malloc_r+0x82>
 8008914:	4629      	mov	r1, r5
 8008916:	4638      	mov	r0, r7
 8008918:	f7ff ffc2 	bl	80088a0 <sbrk_aligned>
 800891c:	1c43      	adds	r3, r0, #1
 800891e:	4604      	mov	r4, r0
 8008920:	d14d      	bne.n	80089be <_malloc_r+0xde>
 8008922:	6834      	ldr	r4, [r6, #0]
 8008924:	4626      	mov	r6, r4
 8008926:	2e00      	cmp	r6, #0
 8008928:	d140      	bne.n	80089ac <_malloc_r+0xcc>
 800892a:	6823      	ldr	r3, [r4, #0]
 800892c:	4631      	mov	r1, r6
 800892e:	4638      	mov	r0, r7
 8008930:	eb04 0803 	add.w	r8, r4, r3
 8008934:	f000 fd56 	bl	80093e4 <_sbrk_r>
 8008938:	4580      	cmp	r8, r0
 800893a:	d13a      	bne.n	80089b2 <_malloc_r+0xd2>
 800893c:	6821      	ldr	r1, [r4, #0]
 800893e:	3503      	adds	r5, #3
 8008940:	1a6d      	subs	r5, r5, r1
 8008942:	f025 0503 	bic.w	r5, r5, #3
 8008946:	3508      	adds	r5, #8
 8008948:	2d0c      	cmp	r5, #12
 800894a:	bf38      	it	cc
 800894c:	250c      	movcc	r5, #12
 800894e:	4629      	mov	r1, r5
 8008950:	4638      	mov	r0, r7
 8008952:	f7ff ffa5 	bl	80088a0 <sbrk_aligned>
 8008956:	3001      	adds	r0, #1
 8008958:	d02b      	beq.n	80089b2 <_malloc_r+0xd2>
 800895a:	6823      	ldr	r3, [r4, #0]
 800895c:	442b      	add	r3, r5
 800895e:	6023      	str	r3, [r4, #0]
 8008960:	e00e      	b.n	8008980 <_malloc_r+0xa0>
 8008962:	6822      	ldr	r2, [r4, #0]
 8008964:	1b52      	subs	r2, r2, r5
 8008966:	d41e      	bmi.n	80089a6 <_malloc_r+0xc6>
 8008968:	2a0b      	cmp	r2, #11
 800896a:	d916      	bls.n	800899a <_malloc_r+0xba>
 800896c:	1961      	adds	r1, r4, r5
 800896e:	42a3      	cmp	r3, r4
 8008970:	6025      	str	r5, [r4, #0]
 8008972:	bf18      	it	ne
 8008974:	6059      	strne	r1, [r3, #4]
 8008976:	6863      	ldr	r3, [r4, #4]
 8008978:	bf08      	it	eq
 800897a:	6031      	streq	r1, [r6, #0]
 800897c:	5162      	str	r2, [r4, r5]
 800897e:	604b      	str	r3, [r1, #4]
 8008980:	4638      	mov	r0, r7
 8008982:	f104 060b 	add.w	r6, r4, #11
 8008986:	f001 fd4f 	bl	800a428 <__malloc_unlock>
 800898a:	f026 0607 	bic.w	r6, r6, #7
 800898e:	1d23      	adds	r3, r4, #4
 8008990:	1af2      	subs	r2, r6, r3
 8008992:	d0b6      	beq.n	8008902 <_malloc_r+0x22>
 8008994:	1b9b      	subs	r3, r3, r6
 8008996:	50a3      	str	r3, [r4, r2]
 8008998:	e7b3      	b.n	8008902 <_malloc_r+0x22>
 800899a:	6862      	ldr	r2, [r4, #4]
 800899c:	42a3      	cmp	r3, r4
 800899e:	bf0c      	ite	eq
 80089a0:	6032      	streq	r2, [r6, #0]
 80089a2:	605a      	strne	r2, [r3, #4]
 80089a4:	e7ec      	b.n	8008980 <_malloc_r+0xa0>
 80089a6:	4623      	mov	r3, r4
 80089a8:	6864      	ldr	r4, [r4, #4]
 80089aa:	e7b2      	b.n	8008912 <_malloc_r+0x32>
 80089ac:	4634      	mov	r4, r6
 80089ae:	6876      	ldr	r6, [r6, #4]
 80089b0:	e7b9      	b.n	8008926 <_malloc_r+0x46>
 80089b2:	230c      	movs	r3, #12
 80089b4:	603b      	str	r3, [r7, #0]
 80089b6:	4638      	mov	r0, r7
 80089b8:	f001 fd36 	bl	800a428 <__malloc_unlock>
 80089bc:	e7a1      	b.n	8008902 <_malloc_r+0x22>
 80089be:	6025      	str	r5, [r4, #0]
 80089c0:	e7de      	b.n	8008980 <_malloc_r+0xa0>
 80089c2:	bf00      	nop
 80089c4:	20000430 	.word	0x20000430

080089c8 <__cvt>:
 80089c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80089cc:	ec55 4b10 	vmov	r4, r5, d0
 80089d0:	2d00      	cmp	r5, #0
 80089d2:	460e      	mov	r6, r1
 80089d4:	4619      	mov	r1, r3
 80089d6:	462b      	mov	r3, r5
 80089d8:	bfbb      	ittet	lt
 80089da:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80089de:	461d      	movlt	r5, r3
 80089e0:	2300      	movge	r3, #0
 80089e2:	232d      	movlt	r3, #45	; 0x2d
 80089e4:	700b      	strb	r3, [r1, #0]
 80089e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80089e8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80089ec:	4691      	mov	r9, r2
 80089ee:	f023 0820 	bic.w	r8, r3, #32
 80089f2:	bfbc      	itt	lt
 80089f4:	4622      	movlt	r2, r4
 80089f6:	4614      	movlt	r4, r2
 80089f8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80089fc:	d005      	beq.n	8008a0a <__cvt+0x42>
 80089fe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008a02:	d100      	bne.n	8008a06 <__cvt+0x3e>
 8008a04:	3601      	adds	r6, #1
 8008a06:	2102      	movs	r1, #2
 8008a08:	e000      	b.n	8008a0c <__cvt+0x44>
 8008a0a:	2103      	movs	r1, #3
 8008a0c:	ab03      	add	r3, sp, #12
 8008a0e:	9301      	str	r3, [sp, #4]
 8008a10:	ab02      	add	r3, sp, #8
 8008a12:	9300      	str	r3, [sp, #0]
 8008a14:	ec45 4b10 	vmov	d0, r4, r5
 8008a18:	4653      	mov	r3, sl
 8008a1a:	4632      	mov	r2, r6
 8008a1c:	f000 fed8 	bl	80097d0 <_dtoa_r>
 8008a20:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008a24:	4607      	mov	r7, r0
 8008a26:	d102      	bne.n	8008a2e <__cvt+0x66>
 8008a28:	f019 0f01 	tst.w	r9, #1
 8008a2c:	d022      	beq.n	8008a74 <__cvt+0xac>
 8008a2e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008a32:	eb07 0906 	add.w	r9, r7, r6
 8008a36:	d110      	bne.n	8008a5a <__cvt+0x92>
 8008a38:	783b      	ldrb	r3, [r7, #0]
 8008a3a:	2b30      	cmp	r3, #48	; 0x30
 8008a3c:	d10a      	bne.n	8008a54 <__cvt+0x8c>
 8008a3e:	2200      	movs	r2, #0
 8008a40:	2300      	movs	r3, #0
 8008a42:	4620      	mov	r0, r4
 8008a44:	4629      	mov	r1, r5
 8008a46:	f7f8 f83f 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a4a:	b918      	cbnz	r0, 8008a54 <__cvt+0x8c>
 8008a4c:	f1c6 0601 	rsb	r6, r6, #1
 8008a50:	f8ca 6000 	str.w	r6, [sl]
 8008a54:	f8da 3000 	ldr.w	r3, [sl]
 8008a58:	4499      	add	r9, r3
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	4620      	mov	r0, r4
 8008a60:	4629      	mov	r1, r5
 8008a62:	f7f8 f831 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a66:	b108      	cbz	r0, 8008a6c <__cvt+0xa4>
 8008a68:	f8cd 900c 	str.w	r9, [sp, #12]
 8008a6c:	2230      	movs	r2, #48	; 0x30
 8008a6e:	9b03      	ldr	r3, [sp, #12]
 8008a70:	454b      	cmp	r3, r9
 8008a72:	d307      	bcc.n	8008a84 <__cvt+0xbc>
 8008a74:	9b03      	ldr	r3, [sp, #12]
 8008a76:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008a78:	1bdb      	subs	r3, r3, r7
 8008a7a:	4638      	mov	r0, r7
 8008a7c:	6013      	str	r3, [r2, #0]
 8008a7e:	b004      	add	sp, #16
 8008a80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a84:	1c59      	adds	r1, r3, #1
 8008a86:	9103      	str	r1, [sp, #12]
 8008a88:	701a      	strb	r2, [r3, #0]
 8008a8a:	e7f0      	b.n	8008a6e <__cvt+0xa6>

08008a8c <__exponent>:
 8008a8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a8e:	4603      	mov	r3, r0
 8008a90:	2900      	cmp	r1, #0
 8008a92:	bfb8      	it	lt
 8008a94:	4249      	neglt	r1, r1
 8008a96:	f803 2b02 	strb.w	r2, [r3], #2
 8008a9a:	bfb4      	ite	lt
 8008a9c:	222d      	movlt	r2, #45	; 0x2d
 8008a9e:	222b      	movge	r2, #43	; 0x2b
 8008aa0:	2909      	cmp	r1, #9
 8008aa2:	7042      	strb	r2, [r0, #1]
 8008aa4:	dd2a      	ble.n	8008afc <__exponent+0x70>
 8008aa6:	f10d 0407 	add.w	r4, sp, #7
 8008aaa:	46a4      	mov	ip, r4
 8008aac:	270a      	movs	r7, #10
 8008aae:	46a6      	mov	lr, r4
 8008ab0:	460a      	mov	r2, r1
 8008ab2:	fb91 f6f7 	sdiv	r6, r1, r7
 8008ab6:	fb07 1516 	mls	r5, r7, r6, r1
 8008aba:	3530      	adds	r5, #48	; 0x30
 8008abc:	2a63      	cmp	r2, #99	; 0x63
 8008abe:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8008ac2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008ac6:	4631      	mov	r1, r6
 8008ac8:	dcf1      	bgt.n	8008aae <__exponent+0x22>
 8008aca:	3130      	adds	r1, #48	; 0x30
 8008acc:	f1ae 0502 	sub.w	r5, lr, #2
 8008ad0:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008ad4:	1c44      	adds	r4, r0, #1
 8008ad6:	4629      	mov	r1, r5
 8008ad8:	4561      	cmp	r1, ip
 8008ada:	d30a      	bcc.n	8008af2 <__exponent+0x66>
 8008adc:	f10d 0209 	add.w	r2, sp, #9
 8008ae0:	eba2 020e 	sub.w	r2, r2, lr
 8008ae4:	4565      	cmp	r5, ip
 8008ae6:	bf88      	it	hi
 8008ae8:	2200      	movhi	r2, #0
 8008aea:	4413      	add	r3, r2
 8008aec:	1a18      	subs	r0, r3, r0
 8008aee:	b003      	add	sp, #12
 8008af0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008af2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008af6:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008afa:	e7ed      	b.n	8008ad8 <__exponent+0x4c>
 8008afc:	2330      	movs	r3, #48	; 0x30
 8008afe:	3130      	adds	r1, #48	; 0x30
 8008b00:	7083      	strb	r3, [r0, #2]
 8008b02:	70c1      	strb	r1, [r0, #3]
 8008b04:	1d03      	adds	r3, r0, #4
 8008b06:	e7f1      	b.n	8008aec <__exponent+0x60>

08008b08 <_printf_float>:
 8008b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b0c:	ed2d 8b02 	vpush	{d8}
 8008b10:	b08d      	sub	sp, #52	; 0x34
 8008b12:	460c      	mov	r4, r1
 8008b14:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008b18:	4616      	mov	r6, r2
 8008b1a:	461f      	mov	r7, r3
 8008b1c:	4605      	mov	r5, r0
 8008b1e:	f001 fc67 	bl	800a3f0 <_localeconv_r>
 8008b22:	f8d0 a000 	ldr.w	sl, [r0]
 8008b26:	4650      	mov	r0, sl
 8008b28:	f7f7 fb52 	bl	80001d0 <strlen>
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	930a      	str	r3, [sp, #40]	; 0x28
 8008b30:	6823      	ldr	r3, [r4, #0]
 8008b32:	9305      	str	r3, [sp, #20]
 8008b34:	f8d8 3000 	ldr.w	r3, [r8]
 8008b38:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008b3c:	3307      	adds	r3, #7
 8008b3e:	f023 0307 	bic.w	r3, r3, #7
 8008b42:	f103 0208 	add.w	r2, r3, #8
 8008b46:	f8c8 2000 	str.w	r2, [r8]
 8008b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b4e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008b52:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008b56:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008b5a:	9307      	str	r3, [sp, #28]
 8008b5c:	f8cd 8018 	str.w	r8, [sp, #24]
 8008b60:	ee08 0a10 	vmov	s16, r0
 8008b64:	4b9f      	ldr	r3, [pc, #636]	; (8008de4 <_printf_float+0x2dc>)
 8008b66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008b6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008b6e:	f7f7 ffdd 	bl	8000b2c <__aeabi_dcmpun>
 8008b72:	bb88      	cbnz	r0, 8008bd8 <_printf_float+0xd0>
 8008b74:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008b78:	4b9a      	ldr	r3, [pc, #616]	; (8008de4 <_printf_float+0x2dc>)
 8008b7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008b7e:	f7f7 ffb7 	bl	8000af0 <__aeabi_dcmple>
 8008b82:	bb48      	cbnz	r0, 8008bd8 <_printf_float+0xd0>
 8008b84:	2200      	movs	r2, #0
 8008b86:	2300      	movs	r3, #0
 8008b88:	4640      	mov	r0, r8
 8008b8a:	4649      	mov	r1, r9
 8008b8c:	f7f7 ffa6 	bl	8000adc <__aeabi_dcmplt>
 8008b90:	b110      	cbz	r0, 8008b98 <_printf_float+0x90>
 8008b92:	232d      	movs	r3, #45	; 0x2d
 8008b94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b98:	4b93      	ldr	r3, [pc, #588]	; (8008de8 <_printf_float+0x2e0>)
 8008b9a:	4894      	ldr	r0, [pc, #592]	; (8008dec <_printf_float+0x2e4>)
 8008b9c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008ba0:	bf94      	ite	ls
 8008ba2:	4698      	movls	r8, r3
 8008ba4:	4680      	movhi	r8, r0
 8008ba6:	2303      	movs	r3, #3
 8008ba8:	6123      	str	r3, [r4, #16]
 8008baa:	9b05      	ldr	r3, [sp, #20]
 8008bac:	f023 0204 	bic.w	r2, r3, #4
 8008bb0:	6022      	str	r2, [r4, #0]
 8008bb2:	f04f 0900 	mov.w	r9, #0
 8008bb6:	9700      	str	r7, [sp, #0]
 8008bb8:	4633      	mov	r3, r6
 8008bba:	aa0b      	add	r2, sp, #44	; 0x2c
 8008bbc:	4621      	mov	r1, r4
 8008bbe:	4628      	mov	r0, r5
 8008bc0:	f000 f9d8 	bl	8008f74 <_printf_common>
 8008bc4:	3001      	adds	r0, #1
 8008bc6:	f040 8090 	bne.w	8008cea <_printf_float+0x1e2>
 8008bca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008bce:	b00d      	add	sp, #52	; 0x34
 8008bd0:	ecbd 8b02 	vpop	{d8}
 8008bd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bd8:	4642      	mov	r2, r8
 8008bda:	464b      	mov	r3, r9
 8008bdc:	4640      	mov	r0, r8
 8008bde:	4649      	mov	r1, r9
 8008be0:	f7f7 ffa4 	bl	8000b2c <__aeabi_dcmpun>
 8008be4:	b140      	cbz	r0, 8008bf8 <_printf_float+0xf0>
 8008be6:	464b      	mov	r3, r9
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	bfbc      	itt	lt
 8008bec:	232d      	movlt	r3, #45	; 0x2d
 8008bee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008bf2:	487f      	ldr	r0, [pc, #508]	; (8008df0 <_printf_float+0x2e8>)
 8008bf4:	4b7f      	ldr	r3, [pc, #508]	; (8008df4 <_printf_float+0x2ec>)
 8008bf6:	e7d1      	b.n	8008b9c <_printf_float+0x94>
 8008bf8:	6863      	ldr	r3, [r4, #4]
 8008bfa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008bfe:	9206      	str	r2, [sp, #24]
 8008c00:	1c5a      	adds	r2, r3, #1
 8008c02:	d13f      	bne.n	8008c84 <_printf_float+0x17c>
 8008c04:	2306      	movs	r3, #6
 8008c06:	6063      	str	r3, [r4, #4]
 8008c08:	9b05      	ldr	r3, [sp, #20]
 8008c0a:	6861      	ldr	r1, [r4, #4]
 8008c0c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008c10:	2300      	movs	r3, #0
 8008c12:	9303      	str	r3, [sp, #12]
 8008c14:	ab0a      	add	r3, sp, #40	; 0x28
 8008c16:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008c1a:	ab09      	add	r3, sp, #36	; 0x24
 8008c1c:	ec49 8b10 	vmov	d0, r8, r9
 8008c20:	9300      	str	r3, [sp, #0]
 8008c22:	6022      	str	r2, [r4, #0]
 8008c24:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008c28:	4628      	mov	r0, r5
 8008c2a:	f7ff fecd 	bl	80089c8 <__cvt>
 8008c2e:	9b06      	ldr	r3, [sp, #24]
 8008c30:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008c32:	2b47      	cmp	r3, #71	; 0x47
 8008c34:	4680      	mov	r8, r0
 8008c36:	d108      	bne.n	8008c4a <_printf_float+0x142>
 8008c38:	1cc8      	adds	r0, r1, #3
 8008c3a:	db02      	blt.n	8008c42 <_printf_float+0x13a>
 8008c3c:	6863      	ldr	r3, [r4, #4]
 8008c3e:	4299      	cmp	r1, r3
 8008c40:	dd41      	ble.n	8008cc6 <_printf_float+0x1be>
 8008c42:	f1ab 0b02 	sub.w	fp, fp, #2
 8008c46:	fa5f fb8b 	uxtb.w	fp, fp
 8008c4a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008c4e:	d820      	bhi.n	8008c92 <_printf_float+0x18a>
 8008c50:	3901      	subs	r1, #1
 8008c52:	465a      	mov	r2, fp
 8008c54:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008c58:	9109      	str	r1, [sp, #36]	; 0x24
 8008c5a:	f7ff ff17 	bl	8008a8c <__exponent>
 8008c5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c60:	1813      	adds	r3, r2, r0
 8008c62:	2a01      	cmp	r2, #1
 8008c64:	4681      	mov	r9, r0
 8008c66:	6123      	str	r3, [r4, #16]
 8008c68:	dc02      	bgt.n	8008c70 <_printf_float+0x168>
 8008c6a:	6822      	ldr	r2, [r4, #0]
 8008c6c:	07d2      	lsls	r2, r2, #31
 8008c6e:	d501      	bpl.n	8008c74 <_printf_float+0x16c>
 8008c70:	3301      	adds	r3, #1
 8008c72:	6123      	str	r3, [r4, #16]
 8008c74:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d09c      	beq.n	8008bb6 <_printf_float+0xae>
 8008c7c:	232d      	movs	r3, #45	; 0x2d
 8008c7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c82:	e798      	b.n	8008bb6 <_printf_float+0xae>
 8008c84:	9a06      	ldr	r2, [sp, #24]
 8008c86:	2a47      	cmp	r2, #71	; 0x47
 8008c88:	d1be      	bne.n	8008c08 <_printf_float+0x100>
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d1bc      	bne.n	8008c08 <_printf_float+0x100>
 8008c8e:	2301      	movs	r3, #1
 8008c90:	e7b9      	b.n	8008c06 <_printf_float+0xfe>
 8008c92:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008c96:	d118      	bne.n	8008cca <_printf_float+0x1c2>
 8008c98:	2900      	cmp	r1, #0
 8008c9a:	6863      	ldr	r3, [r4, #4]
 8008c9c:	dd0b      	ble.n	8008cb6 <_printf_float+0x1ae>
 8008c9e:	6121      	str	r1, [r4, #16]
 8008ca0:	b913      	cbnz	r3, 8008ca8 <_printf_float+0x1a0>
 8008ca2:	6822      	ldr	r2, [r4, #0]
 8008ca4:	07d0      	lsls	r0, r2, #31
 8008ca6:	d502      	bpl.n	8008cae <_printf_float+0x1a6>
 8008ca8:	3301      	adds	r3, #1
 8008caa:	440b      	add	r3, r1
 8008cac:	6123      	str	r3, [r4, #16]
 8008cae:	65a1      	str	r1, [r4, #88]	; 0x58
 8008cb0:	f04f 0900 	mov.w	r9, #0
 8008cb4:	e7de      	b.n	8008c74 <_printf_float+0x16c>
 8008cb6:	b913      	cbnz	r3, 8008cbe <_printf_float+0x1b6>
 8008cb8:	6822      	ldr	r2, [r4, #0]
 8008cba:	07d2      	lsls	r2, r2, #31
 8008cbc:	d501      	bpl.n	8008cc2 <_printf_float+0x1ba>
 8008cbe:	3302      	adds	r3, #2
 8008cc0:	e7f4      	b.n	8008cac <_printf_float+0x1a4>
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	e7f2      	b.n	8008cac <_printf_float+0x1a4>
 8008cc6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008cca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ccc:	4299      	cmp	r1, r3
 8008cce:	db05      	blt.n	8008cdc <_printf_float+0x1d4>
 8008cd0:	6823      	ldr	r3, [r4, #0]
 8008cd2:	6121      	str	r1, [r4, #16]
 8008cd4:	07d8      	lsls	r0, r3, #31
 8008cd6:	d5ea      	bpl.n	8008cae <_printf_float+0x1a6>
 8008cd8:	1c4b      	adds	r3, r1, #1
 8008cda:	e7e7      	b.n	8008cac <_printf_float+0x1a4>
 8008cdc:	2900      	cmp	r1, #0
 8008cde:	bfd4      	ite	le
 8008ce0:	f1c1 0202 	rsble	r2, r1, #2
 8008ce4:	2201      	movgt	r2, #1
 8008ce6:	4413      	add	r3, r2
 8008ce8:	e7e0      	b.n	8008cac <_printf_float+0x1a4>
 8008cea:	6823      	ldr	r3, [r4, #0]
 8008cec:	055a      	lsls	r2, r3, #21
 8008cee:	d407      	bmi.n	8008d00 <_printf_float+0x1f8>
 8008cf0:	6923      	ldr	r3, [r4, #16]
 8008cf2:	4642      	mov	r2, r8
 8008cf4:	4631      	mov	r1, r6
 8008cf6:	4628      	mov	r0, r5
 8008cf8:	47b8      	blx	r7
 8008cfa:	3001      	adds	r0, #1
 8008cfc:	d12c      	bne.n	8008d58 <_printf_float+0x250>
 8008cfe:	e764      	b.n	8008bca <_printf_float+0xc2>
 8008d00:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008d04:	f240 80e0 	bls.w	8008ec8 <_printf_float+0x3c0>
 8008d08:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	2300      	movs	r3, #0
 8008d10:	f7f7 feda 	bl	8000ac8 <__aeabi_dcmpeq>
 8008d14:	2800      	cmp	r0, #0
 8008d16:	d034      	beq.n	8008d82 <_printf_float+0x27a>
 8008d18:	4a37      	ldr	r2, [pc, #220]	; (8008df8 <_printf_float+0x2f0>)
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	4631      	mov	r1, r6
 8008d1e:	4628      	mov	r0, r5
 8008d20:	47b8      	blx	r7
 8008d22:	3001      	adds	r0, #1
 8008d24:	f43f af51 	beq.w	8008bca <_printf_float+0xc2>
 8008d28:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008d2c:	429a      	cmp	r2, r3
 8008d2e:	db02      	blt.n	8008d36 <_printf_float+0x22e>
 8008d30:	6823      	ldr	r3, [r4, #0]
 8008d32:	07d8      	lsls	r0, r3, #31
 8008d34:	d510      	bpl.n	8008d58 <_printf_float+0x250>
 8008d36:	ee18 3a10 	vmov	r3, s16
 8008d3a:	4652      	mov	r2, sl
 8008d3c:	4631      	mov	r1, r6
 8008d3e:	4628      	mov	r0, r5
 8008d40:	47b8      	blx	r7
 8008d42:	3001      	adds	r0, #1
 8008d44:	f43f af41 	beq.w	8008bca <_printf_float+0xc2>
 8008d48:	f04f 0800 	mov.w	r8, #0
 8008d4c:	f104 091a 	add.w	r9, r4, #26
 8008d50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d52:	3b01      	subs	r3, #1
 8008d54:	4543      	cmp	r3, r8
 8008d56:	dc09      	bgt.n	8008d6c <_printf_float+0x264>
 8008d58:	6823      	ldr	r3, [r4, #0]
 8008d5a:	079b      	lsls	r3, r3, #30
 8008d5c:	f100 8105 	bmi.w	8008f6a <_printf_float+0x462>
 8008d60:	68e0      	ldr	r0, [r4, #12]
 8008d62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d64:	4298      	cmp	r0, r3
 8008d66:	bfb8      	it	lt
 8008d68:	4618      	movlt	r0, r3
 8008d6a:	e730      	b.n	8008bce <_printf_float+0xc6>
 8008d6c:	2301      	movs	r3, #1
 8008d6e:	464a      	mov	r2, r9
 8008d70:	4631      	mov	r1, r6
 8008d72:	4628      	mov	r0, r5
 8008d74:	47b8      	blx	r7
 8008d76:	3001      	adds	r0, #1
 8008d78:	f43f af27 	beq.w	8008bca <_printf_float+0xc2>
 8008d7c:	f108 0801 	add.w	r8, r8, #1
 8008d80:	e7e6      	b.n	8008d50 <_printf_float+0x248>
 8008d82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	dc39      	bgt.n	8008dfc <_printf_float+0x2f4>
 8008d88:	4a1b      	ldr	r2, [pc, #108]	; (8008df8 <_printf_float+0x2f0>)
 8008d8a:	2301      	movs	r3, #1
 8008d8c:	4631      	mov	r1, r6
 8008d8e:	4628      	mov	r0, r5
 8008d90:	47b8      	blx	r7
 8008d92:	3001      	adds	r0, #1
 8008d94:	f43f af19 	beq.w	8008bca <_printf_float+0xc2>
 8008d98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008d9c:	4313      	orrs	r3, r2
 8008d9e:	d102      	bne.n	8008da6 <_printf_float+0x29e>
 8008da0:	6823      	ldr	r3, [r4, #0]
 8008da2:	07d9      	lsls	r1, r3, #31
 8008da4:	d5d8      	bpl.n	8008d58 <_printf_float+0x250>
 8008da6:	ee18 3a10 	vmov	r3, s16
 8008daa:	4652      	mov	r2, sl
 8008dac:	4631      	mov	r1, r6
 8008dae:	4628      	mov	r0, r5
 8008db0:	47b8      	blx	r7
 8008db2:	3001      	adds	r0, #1
 8008db4:	f43f af09 	beq.w	8008bca <_printf_float+0xc2>
 8008db8:	f04f 0900 	mov.w	r9, #0
 8008dbc:	f104 0a1a 	add.w	sl, r4, #26
 8008dc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dc2:	425b      	negs	r3, r3
 8008dc4:	454b      	cmp	r3, r9
 8008dc6:	dc01      	bgt.n	8008dcc <_printf_float+0x2c4>
 8008dc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008dca:	e792      	b.n	8008cf2 <_printf_float+0x1ea>
 8008dcc:	2301      	movs	r3, #1
 8008dce:	4652      	mov	r2, sl
 8008dd0:	4631      	mov	r1, r6
 8008dd2:	4628      	mov	r0, r5
 8008dd4:	47b8      	blx	r7
 8008dd6:	3001      	adds	r0, #1
 8008dd8:	f43f aef7 	beq.w	8008bca <_printf_float+0xc2>
 8008ddc:	f109 0901 	add.w	r9, r9, #1
 8008de0:	e7ee      	b.n	8008dc0 <_printf_float+0x2b8>
 8008de2:	bf00      	nop
 8008de4:	7fefffff 	.word	0x7fefffff
 8008de8:	080110e8 	.word	0x080110e8
 8008dec:	080110ec 	.word	0x080110ec
 8008df0:	080110f4 	.word	0x080110f4
 8008df4:	080110f0 	.word	0x080110f0
 8008df8:	080110f8 	.word	0x080110f8
 8008dfc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008dfe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008e00:	429a      	cmp	r2, r3
 8008e02:	bfa8      	it	ge
 8008e04:	461a      	movge	r2, r3
 8008e06:	2a00      	cmp	r2, #0
 8008e08:	4691      	mov	r9, r2
 8008e0a:	dc37      	bgt.n	8008e7c <_printf_float+0x374>
 8008e0c:	f04f 0b00 	mov.w	fp, #0
 8008e10:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008e14:	f104 021a 	add.w	r2, r4, #26
 8008e18:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008e1a:	9305      	str	r3, [sp, #20]
 8008e1c:	eba3 0309 	sub.w	r3, r3, r9
 8008e20:	455b      	cmp	r3, fp
 8008e22:	dc33      	bgt.n	8008e8c <_printf_float+0x384>
 8008e24:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008e28:	429a      	cmp	r2, r3
 8008e2a:	db3b      	blt.n	8008ea4 <_printf_float+0x39c>
 8008e2c:	6823      	ldr	r3, [r4, #0]
 8008e2e:	07da      	lsls	r2, r3, #31
 8008e30:	d438      	bmi.n	8008ea4 <_printf_float+0x39c>
 8008e32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e34:	9a05      	ldr	r2, [sp, #20]
 8008e36:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008e38:	1a9a      	subs	r2, r3, r2
 8008e3a:	eba3 0901 	sub.w	r9, r3, r1
 8008e3e:	4591      	cmp	r9, r2
 8008e40:	bfa8      	it	ge
 8008e42:	4691      	movge	r9, r2
 8008e44:	f1b9 0f00 	cmp.w	r9, #0
 8008e48:	dc35      	bgt.n	8008eb6 <_printf_float+0x3ae>
 8008e4a:	f04f 0800 	mov.w	r8, #0
 8008e4e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008e52:	f104 0a1a 	add.w	sl, r4, #26
 8008e56:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008e5a:	1a9b      	subs	r3, r3, r2
 8008e5c:	eba3 0309 	sub.w	r3, r3, r9
 8008e60:	4543      	cmp	r3, r8
 8008e62:	f77f af79 	ble.w	8008d58 <_printf_float+0x250>
 8008e66:	2301      	movs	r3, #1
 8008e68:	4652      	mov	r2, sl
 8008e6a:	4631      	mov	r1, r6
 8008e6c:	4628      	mov	r0, r5
 8008e6e:	47b8      	blx	r7
 8008e70:	3001      	adds	r0, #1
 8008e72:	f43f aeaa 	beq.w	8008bca <_printf_float+0xc2>
 8008e76:	f108 0801 	add.w	r8, r8, #1
 8008e7a:	e7ec      	b.n	8008e56 <_printf_float+0x34e>
 8008e7c:	4613      	mov	r3, r2
 8008e7e:	4631      	mov	r1, r6
 8008e80:	4642      	mov	r2, r8
 8008e82:	4628      	mov	r0, r5
 8008e84:	47b8      	blx	r7
 8008e86:	3001      	adds	r0, #1
 8008e88:	d1c0      	bne.n	8008e0c <_printf_float+0x304>
 8008e8a:	e69e      	b.n	8008bca <_printf_float+0xc2>
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	4631      	mov	r1, r6
 8008e90:	4628      	mov	r0, r5
 8008e92:	9205      	str	r2, [sp, #20]
 8008e94:	47b8      	blx	r7
 8008e96:	3001      	adds	r0, #1
 8008e98:	f43f ae97 	beq.w	8008bca <_printf_float+0xc2>
 8008e9c:	9a05      	ldr	r2, [sp, #20]
 8008e9e:	f10b 0b01 	add.w	fp, fp, #1
 8008ea2:	e7b9      	b.n	8008e18 <_printf_float+0x310>
 8008ea4:	ee18 3a10 	vmov	r3, s16
 8008ea8:	4652      	mov	r2, sl
 8008eaa:	4631      	mov	r1, r6
 8008eac:	4628      	mov	r0, r5
 8008eae:	47b8      	blx	r7
 8008eb0:	3001      	adds	r0, #1
 8008eb2:	d1be      	bne.n	8008e32 <_printf_float+0x32a>
 8008eb4:	e689      	b.n	8008bca <_printf_float+0xc2>
 8008eb6:	9a05      	ldr	r2, [sp, #20]
 8008eb8:	464b      	mov	r3, r9
 8008eba:	4442      	add	r2, r8
 8008ebc:	4631      	mov	r1, r6
 8008ebe:	4628      	mov	r0, r5
 8008ec0:	47b8      	blx	r7
 8008ec2:	3001      	adds	r0, #1
 8008ec4:	d1c1      	bne.n	8008e4a <_printf_float+0x342>
 8008ec6:	e680      	b.n	8008bca <_printf_float+0xc2>
 8008ec8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008eca:	2a01      	cmp	r2, #1
 8008ecc:	dc01      	bgt.n	8008ed2 <_printf_float+0x3ca>
 8008ece:	07db      	lsls	r3, r3, #31
 8008ed0:	d538      	bpl.n	8008f44 <_printf_float+0x43c>
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	4642      	mov	r2, r8
 8008ed6:	4631      	mov	r1, r6
 8008ed8:	4628      	mov	r0, r5
 8008eda:	47b8      	blx	r7
 8008edc:	3001      	adds	r0, #1
 8008ede:	f43f ae74 	beq.w	8008bca <_printf_float+0xc2>
 8008ee2:	ee18 3a10 	vmov	r3, s16
 8008ee6:	4652      	mov	r2, sl
 8008ee8:	4631      	mov	r1, r6
 8008eea:	4628      	mov	r0, r5
 8008eec:	47b8      	blx	r7
 8008eee:	3001      	adds	r0, #1
 8008ef0:	f43f ae6b 	beq.w	8008bca <_printf_float+0xc2>
 8008ef4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008ef8:	2200      	movs	r2, #0
 8008efa:	2300      	movs	r3, #0
 8008efc:	f7f7 fde4 	bl	8000ac8 <__aeabi_dcmpeq>
 8008f00:	b9d8      	cbnz	r0, 8008f3a <_printf_float+0x432>
 8008f02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f04:	f108 0201 	add.w	r2, r8, #1
 8008f08:	3b01      	subs	r3, #1
 8008f0a:	4631      	mov	r1, r6
 8008f0c:	4628      	mov	r0, r5
 8008f0e:	47b8      	blx	r7
 8008f10:	3001      	adds	r0, #1
 8008f12:	d10e      	bne.n	8008f32 <_printf_float+0x42a>
 8008f14:	e659      	b.n	8008bca <_printf_float+0xc2>
 8008f16:	2301      	movs	r3, #1
 8008f18:	4652      	mov	r2, sl
 8008f1a:	4631      	mov	r1, r6
 8008f1c:	4628      	mov	r0, r5
 8008f1e:	47b8      	blx	r7
 8008f20:	3001      	adds	r0, #1
 8008f22:	f43f ae52 	beq.w	8008bca <_printf_float+0xc2>
 8008f26:	f108 0801 	add.w	r8, r8, #1
 8008f2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f2c:	3b01      	subs	r3, #1
 8008f2e:	4543      	cmp	r3, r8
 8008f30:	dcf1      	bgt.n	8008f16 <_printf_float+0x40e>
 8008f32:	464b      	mov	r3, r9
 8008f34:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008f38:	e6dc      	b.n	8008cf4 <_printf_float+0x1ec>
 8008f3a:	f04f 0800 	mov.w	r8, #0
 8008f3e:	f104 0a1a 	add.w	sl, r4, #26
 8008f42:	e7f2      	b.n	8008f2a <_printf_float+0x422>
 8008f44:	2301      	movs	r3, #1
 8008f46:	4642      	mov	r2, r8
 8008f48:	e7df      	b.n	8008f0a <_printf_float+0x402>
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	464a      	mov	r2, r9
 8008f4e:	4631      	mov	r1, r6
 8008f50:	4628      	mov	r0, r5
 8008f52:	47b8      	blx	r7
 8008f54:	3001      	adds	r0, #1
 8008f56:	f43f ae38 	beq.w	8008bca <_printf_float+0xc2>
 8008f5a:	f108 0801 	add.w	r8, r8, #1
 8008f5e:	68e3      	ldr	r3, [r4, #12]
 8008f60:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008f62:	1a5b      	subs	r3, r3, r1
 8008f64:	4543      	cmp	r3, r8
 8008f66:	dcf0      	bgt.n	8008f4a <_printf_float+0x442>
 8008f68:	e6fa      	b.n	8008d60 <_printf_float+0x258>
 8008f6a:	f04f 0800 	mov.w	r8, #0
 8008f6e:	f104 0919 	add.w	r9, r4, #25
 8008f72:	e7f4      	b.n	8008f5e <_printf_float+0x456>

08008f74 <_printf_common>:
 8008f74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f78:	4616      	mov	r6, r2
 8008f7a:	4699      	mov	r9, r3
 8008f7c:	688a      	ldr	r2, [r1, #8]
 8008f7e:	690b      	ldr	r3, [r1, #16]
 8008f80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008f84:	4293      	cmp	r3, r2
 8008f86:	bfb8      	it	lt
 8008f88:	4613      	movlt	r3, r2
 8008f8a:	6033      	str	r3, [r6, #0]
 8008f8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008f90:	4607      	mov	r7, r0
 8008f92:	460c      	mov	r4, r1
 8008f94:	b10a      	cbz	r2, 8008f9a <_printf_common+0x26>
 8008f96:	3301      	adds	r3, #1
 8008f98:	6033      	str	r3, [r6, #0]
 8008f9a:	6823      	ldr	r3, [r4, #0]
 8008f9c:	0699      	lsls	r1, r3, #26
 8008f9e:	bf42      	ittt	mi
 8008fa0:	6833      	ldrmi	r3, [r6, #0]
 8008fa2:	3302      	addmi	r3, #2
 8008fa4:	6033      	strmi	r3, [r6, #0]
 8008fa6:	6825      	ldr	r5, [r4, #0]
 8008fa8:	f015 0506 	ands.w	r5, r5, #6
 8008fac:	d106      	bne.n	8008fbc <_printf_common+0x48>
 8008fae:	f104 0a19 	add.w	sl, r4, #25
 8008fb2:	68e3      	ldr	r3, [r4, #12]
 8008fb4:	6832      	ldr	r2, [r6, #0]
 8008fb6:	1a9b      	subs	r3, r3, r2
 8008fb8:	42ab      	cmp	r3, r5
 8008fba:	dc26      	bgt.n	800900a <_printf_common+0x96>
 8008fbc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008fc0:	1e13      	subs	r3, r2, #0
 8008fc2:	6822      	ldr	r2, [r4, #0]
 8008fc4:	bf18      	it	ne
 8008fc6:	2301      	movne	r3, #1
 8008fc8:	0692      	lsls	r2, r2, #26
 8008fca:	d42b      	bmi.n	8009024 <_printf_common+0xb0>
 8008fcc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008fd0:	4649      	mov	r1, r9
 8008fd2:	4638      	mov	r0, r7
 8008fd4:	47c0      	blx	r8
 8008fd6:	3001      	adds	r0, #1
 8008fd8:	d01e      	beq.n	8009018 <_printf_common+0xa4>
 8008fda:	6823      	ldr	r3, [r4, #0]
 8008fdc:	68e5      	ldr	r5, [r4, #12]
 8008fde:	6832      	ldr	r2, [r6, #0]
 8008fe0:	f003 0306 	and.w	r3, r3, #6
 8008fe4:	2b04      	cmp	r3, #4
 8008fe6:	bf08      	it	eq
 8008fe8:	1aad      	subeq	r5, r5, r2
 8008fea:	68a3      	ldr	r3, [r4, #8]
 8008fec:	6922      	ldr	r2, [r4, #16]
 8008fee:	bf0c      	ite	eq
 8008ff0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008ff4:	2500      	movne	r5, #0
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	bfc4      	itt	gt
 8008ffa:	1a9b      	subgt	r3, r3, r2
 8008ffc:	18ed      	addgt	r5, r5, r3
 8008ffe:	2600      	movs	r6, #0
 8009000:	341a      	adds	r4, #26
 8009002:	42b5      	cmp	r5, r6
 8009004:	d11a      	bne.n	800903c <_printf_common+0xc8>
 8009006:	2000      	movs	r0, #0
 8009008:	e008      	b.n	800901c <_printf_common+0xa8>
 800900a:	2301      	movs	r3, #1
 800900c:	4652      	mov	r2, sl
 800900e:	4649      	mov	r1, r9
 8009010:	4638      	mov	r0, r7
 8009012:	47c0      	blx	r8
 8009014:	3001      	adds	r0, #1
 8009016:	d103      	bne.n	8009020 <_printf_common+0xac>
 8009018:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800901c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009020:	3501      	adds	r5, #1
 8009022:	e7c6      	b.n	8008fb2 <_printf_common+0x3e>
 8009024:	18e1      	adds	r1, r4, r3
 8009026:	1c5a      	adds	r2, r3, #1
 8009028:	2030      	movs	r0, #48	; 0x30
 800902a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800902e:	4422      	add	r2, r4
 8009030:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009034:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009038:	3302      	adds	r3, #2
 800903a:	e7c7      	b.n	8008fcc <_printf_common+0x58>
 800903c:	2301      	movs	r3, #1
 800903e:	4622      	mov	r2, r4
 8009040:	4649      	mov	r1, r9
 8009042:	4638      	mov	r0, r7
 8009044:	47c0      	blx	r8
 8009046:	3001      	adds	r0, #1
 8009048:	d0e6      	beq.n	8009018 <_printf_common+0xa4>
 800904a:	3601      	adds	r6, #1
 800904c:	e7d9      	b.n	8009002 <_printf_common+0x8e>
	...

08009050 <_printf_i>:
 8009050:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009054:	7e0f      	ldrb	r7, [r1, #24]
 8009056:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009058:	2f78      	cmp	r7, #120	; 0x78
 800905a:	4691      	mov	r9, r2
 800905c:	4680      	mov	r8, r0
 800905e:	460c      	mov	r4, r1
 8009060:	469a      	mov	sl, r3
 8009062:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009066:	d807      	bhi.n	8009078 <_printf_i+0x28>
 8009068:	2f62      	cmp	r7, #98	; 0x62
 800906a:	d80a      	bhi.n	8009082 <_printf_i+0x32>
 800906c:	2f00      	cmp	r7, #0
 800906e:	f000 80d8 	beq.w	8009222 <_printf_i+0x1d2>
 8009072:	2f58      	cmp	r7, #88	; 0x58
 8009074:	f000 80a3 	beq.w	80091be <_printf_i+0x16e>
 8009078:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800907c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009080:	e03a      	b.n	80090f8 <_printf_i+0xa8>
 8009082:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009086:	2b15      	cmp	r3, #21
 8009088:	d8f6      	bhi.n	8009078 <_printf_i+0x28>
 800908a:	a101      	add	r1, pc, #4	; (adr r1, 8009090 <_printf_i+0x40>)
 800908c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009090:	080090e9 	.word	0x080090e9
 8009094:	080090fd 	.word	0x080090fd
 8009098:	08009079 	.word	0x08009079
 800909c:	08009079 	.word	0x08009079
 80090a0:	08009079 	.word	0x08009079
 80090a4:	08009079 	.word	0x08009079
 80090a8:	080090fd 	.word	0x080090fd
 80090ac:	08009079 	.word	0x08009079
 80090b0:	08009079 	.word	0x08009079
 80090b4:	08009079 	.word	0x08009079
 80090b8:	08009079 	.word	0x08009079
 80090bc:	08009209 	.word	0x08009209
 80090c0:	0800912d 	.word	0x0800912d
 80090c4:	080091eb 	.word	0x080091eb
 80090c8:	08009079 	.word	0x08009079
 80090cc:	08009079 	.word	0x08009079
 80090d0:	0800922b 	.word	0x0800922b
 80090d4:	08009079 	.word	0x08009079
 80090d8:	0800912d 	.word	0x0800912d
 80090dc:	08009079 	.word	0x08009079
 80090e0:	08009079 	.word	0x08009079
 80090e4:	080091f3 	.word	0x080091f3
 80090e8:	682b      	ldr	r3, [r5, #0]
 80090ea:	1d1a      	adds	r2, r3, #4
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	602a      	str	r2, [r5, #0]
 80090f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80090f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80090f8:	2301      	movs	r3, #1
 80090fa:	e0a3      	b.n	8009244 <_printf_i+0x1f4>
 80090fc:	6820      	ldr	r0, [r4, #0]
 80090fe:	6829      	ldr	r1, [r5, #0]
 8009100:	0606      	lsls	r6, r0, #24
 8009102:	f101 0304 	add.w	r3, r1, #4
 8009106:	d50a      	bpl.n	800911e <_printf_i+0xce>
 8009108:	680e      	ldr	r6, [r1, #0]
 800910a:	602b      	str	r3, [r5, #0]
 800910c:	2e00      	cmp	r6, #0
 800910e:	da03      	bge.n	8009118 <_printf_i+0xc8>
 8009110:	232d      	movs	r3, #45	; 0x2d
 8009112:	4276      	negs	r6, r6
 8009114:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009118:	485e      	ldr	r0, [pc, #376]	; (8009294 <_printf_i+0x244>)
 800911a:	230a      	movs	r3, #10
 800911c:	e019      	b.n	8009152 <_printf_i+0x102>
 800911e:	680e      	ldr	r6, [r1, #0]
 8009120:	602b      	str	r3, [r5, #0]
 8009122:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009126:	bf18      	it	ne
 8009128:	b236      	sxthne	r6, r6
 800912a:	e7ef      	b.n	800910c <_printf_i+0xbc>
 800912c:	682b      	ldr	r3, [r5, #0]
 800912e:	6820      	ldr	r0, [r4, #0]
 8009130:	1d19      	adds	r1, r3, #4
 8009132:	6029      	str	r1, [r5, #0]
 8009134:	0601      	lsls	r1, r0, #24
 8009136:	d501      	bpl.n	800913c <_printf_i+0xec>
 8009138:	681e      	ldr	r6, [r3, #0]
 800913a:	e002      	b.n	8009142 <_printf_i+0xf2>
 800913c:	0646      	lsls	r6, r0, #25
 800913e:	d5fb      	bpl.n	8009138 <_printf_i+0xe8>
 8009140:	881e      	ldrh	r6, [r3, #0]
 8009142:	4854      	ldr	r0, [pc, #336]	; (8009294 <_printf_i+0x244>)
 8009144:	2f6f      	cmp	r7, #111	; 0x6f
 8009146:	bf0c      	ite	eq
 8009148:	2308      	moveq	r3, #8
 800914a:	230a      	movne	r3, #10
 800914c:	2100      	movs	r1, #0
 800914e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009152:	6865      	ldr	r5, [r4, #4]
 8009154:	60a5      	str	r5, [r4, #8]
 8009156:	2d00      	cmp	r5, #0
 8009158:	bfa2      	ittt	ge
 800915a:	6821      	ldrge	r1, [r4, #0]
 800915c:	f021 0104 	bicge.w	r1, r1, #4
 8009160:	6021      	strge	r1, [r4, #0]
 8009162:	b90e      	cbnz	r6, 8009168 <_printf_i+0x118>
 8009164:	2d00      	cmp	r5, #0
 8009166:	d04d      	beq.n	8009204 <_printf_i+0x1b4>
 8009168:	4615      	mov	r5, r2
 800916a:	fbb6 f1f3 	udiv	r1, r6, r3
 800916e:	fb03 6711 	mls	r7, r3, r1, r6
 8009172:	5dc7      	ldrb	r7, [r0, r7]
 8009174:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009178:	4637      	mov	r7, r6
 800917a:	42bb      	cmp	r3, r7
 800917c:	460e      	mov	r6, r1
 800917e:	d9f4      	bls.n	800916a <_printf_i+0x11a>
 8009180:	2b08      	cmp	r3, #8
 8009182:	d10b      	bne.n	800919c <_printf_i+0x14c>
 8009184:	6823      	ldr	r3, [r4, #0]
 8009186:	07de      	lsls	r6, r3, #31
 8009188:	d508      	bpl.n	800919c <_printf_i+0x14c>
 800918a:	6923      	ldr	r3, [r4, #16]
 800918c:	6861      	ldr	r1, [r4, #4]
 800918e:	4299      	cmp	r1, r3
 8009190:	bfde      	ittt	le
 8009192:	2330      	movle	r3, #48	; 0x30
 8009194:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009198:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800919c:	1b52      	subs	r2, r2, r5
 800919e:	6122      	str	r2, [r4, #16]
 80091a0:	f8cd a000 	str.w	sl, [sp]
 80091a4:	464b      	mov	r3, r9
 80091a6:	aa03      	add	r2, sp, #12
 80091a8:	4621      	mov	r1, r4
 80091aa:	4640      	mov	r0, r8
 80091ac:	f7ff fee2 	bl	8008f74 <_printf_common>
 80091b0:	3001      	adds	r0, #1
 80091b2:	d14c      	bne.n	800924e <_printf_i+0x1fe>
 80091b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80091b8:	b004      	add	sp, #16
 80091ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091be:	4835      	ldr	r0, [pc, #212]	; (8009294 <_printf_i+0x244>)
 80091c0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80091c4:	6829      	ldr	r1, [r5, #0]
 80091c6:	6823      	ldr	r3, [r4, #0]
 80091c8:	f851 6b04 	ldr.w	r6, [r1], #4
 80091cc:	6029      	str	r1, [r5, #0]
 80091ce:	061d      	lsls	r5, r3, #24
 80091d0:	d514      	bpl.n	80091fc <_printf_i+0x1ac>
 80091d2:	07df      	lsls	r7, r3, #31
 80091d4:	bf44      	itt	mi
 80091d6:	f043 0320 	orrmi.w	r3, r3, #32
 80091da:	6023      	strmi	r3, [r4, #0]
 80091dc:	b91e      	cbnz	r6, 80091e6 <_printf_i+0x196>
 80091de:	6823      	ldr	r3, [r4, #0]
 80091e0:	f023 0320 	bic.w	r3, r3, #32
 80091e4:	6023      	str	r3, [r4, #0]
 80091e6:	2310      	movs	r3, #16
 80091e8:	e7b0      	b.n	800914c <_printf_i+0xfc>
 80091ea:	6823      	ldr	r3, [r4, #0]
 80091ec:	f043 0320 	orr.w	r3, r3, #32
 80091f0:	6023      	str	r3, [r4, #0]
 80091f2:	2378      	movs	r3, #120	; 0x78
 80091f4:	4828      	ldr	r0, [pc, #160]	; (8009298 <_printf_i+0x248>)
 80091f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80091fa:	e7e3      	b.n	80091c4 <_printf_i+0x174>
 80091fc:	0659      	lsls	r1, r3, #25
 80091fe:	bf48      	it	mi
 8009200:	b2b6      	uxthmi	r6, r6
 8009202:	e7e6      	b.n	80091d2 <_printf_i+0x182>
 8009204:	4615      	mov	r5, r2
 8009206:	e7bb      	b.n	8009180 <_printf_i+0x130>
 8009208:	682b      	ldr	r3, [r5, #0]
 800920a:	6826      	ldr	r6, [r4, #0]
 800920c:	6961      	ldr	r1, [r4, #20]
 800920e:	1d18      	adds	r0, r3, #4
 8009210:	6028      	str	r0, [r5, #0]
 8009212:	0635      	lsls	r5, r6, #24
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	d501      	bpl.n	800921c <_printf_i+0x1cc>
 8009218:	6019      	str	r1, [r3, #0]
 800921a:	e002      	b.n	8009222 <_printf_i+0x1d2>
 800921c:	0670      	lsls	r0, r6, #25
 800921e:	d5fb      	bpl.n	8009218 <_printf_i+0x1c8>
 8009220:	8019      	strh	r1, [r3, #0]
 8009222:	2300      	movs	r3, #0
 8009224:	6123      	str	r3, [r4, #16]
 8009226:	4615      	mov	r5, r2
 8009228:	e7ba      	b.n	80091a0 <_printf_i+0x150>
 800922a:	682b      	ldr	r3, [r5, #0]
 800922c:	1d1a      	adds	r2, r3, #4
 800922e:	602a      	str	r2, [r5, #0]
 8009230:	681d      	ldr	r5, [r3, #0]
 8009232:	6862      	ldr	r2, [r4, #4]
 8009234:	2100      	movs	r1, #0
 8009236:	4628      	mov	r0, r5
 8009238:	f7f6 ffd2 	bl	80001e0 <memchr>
 800923c:	b108      	cbz	r0, 8009242 <_printf_i+0x1f2>
 800923e:	1b40      	subs	r0, r0, r5
 8009240:	6060      	str	r0, [r4, #4]
 8009242:	6863      	ldr	r3, [r4, #4]
 8009244:	6123      	str	r3, [r4, #16]
 8009246:	2300      	movs	r3, #0
 8009248:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800924c:	e7a8      	b.n	80091a0 <_printf_i+0x150>
 800924e:	6923      	ldr	r3, [r4, #16]
 8009250:	462a      	mov	r2, r5
 8009252:	4649      	mov	r1, r9
 8009254:	4640      	mov	r0, r8
 8009256:	47d0      	blx	sl
 8009258:	3001      	adds	r0, #1
 800925a:	d0ab      	beq.n	80091b4 <_printf_i+0x164>
 800925c:	6823      	ldr	r3, [r4, #0]
 800925e:	079b      	lsls	r3, r3, #30
 8009260:	d413      	bmi.n	800928a <_printf_i+0x23a>
 8009262:	68e0      	ldr	r0, [r4, #12]
 8009264:	9b03      	ldr	r3, [sp, #12]
 8009266:	4298      	cmp	r0, r3
 8009268:	bfb8      	it	lt
 800926a:	4618      	movlt	r0, r3
 800926c:	e7a4      	b.n	80091b8 <_printf_i+0x168>
 800926e:	2301      	movs	r3, #1
 8009270:	4632      	mov	r2, r6
 8009272:	4649      	mov	r1, r9
 8009274:	4640      	mov	r0, r8
 8009276:	47d0      	blx	sl
 8009278:	3001      	adds	r0, #1
 800927a:	d09b      	beq.n	80091b4 <_printf_i+0x164>
 800927c:	3501      	adds	r5, #1
 800927e:	68e3      	ldr	r3, [r4, #12]
 8009280:	9903      	ldr	r1, [sp, #12]
 8009282:	1a5b      	subs	r3, r3, r1
 8009284:	42ab      	cmp	r3, r5
 8009286:	dcf2      	bgt.n	800926e <_printf_i+0x21e>
 8009288:	e7eb      	b.n	8009262 <_printf_i+0x212>
 800928a:	2500      	movs	r5, #0
 800928c:	f104 0619 	add.w	r6, r4, #25
 8009290:	e7f5      	b.n	800927e <_printf_i+0x22e>
 8009292:	bf00      	nop
 8009294:	080110fa 	.word	0x080110fa
 8009298:	0801110b 	.word	0x0801110b

0800929c <iprintf>:
 800929c:	b40f      	push	{r0, r1, r2, r3}
 800929e:	4b0a      	ldr	r3, [pc, #40]	; (80092c8 <iprintf+0x2c>)
 80092a0:	b513      	push	{r0, r1, r4, lr}
 80092a2:	681c      	ldr	r4, [r3, #0]
 80092a4:	b124      	cbz	r4, 80092b0 <iprintf+0x14>
 80092a6:	69a3      	ldr	r3, [r4, #24]
 80092a8:	b913      	cbnz	r3, 80092b0 <iprintf+0x14>
 80092aa:	4620      	mov	r0, r4
 80092ac:	f7ff f95c 	bl	8008568 <__sinit>
 80092b0:	ab05      	add	r3, sp, #20
 80092b2:	9a04      	ldr	r2, [sp, #16]
 80092b4:	68a1      	ldr	r1, [r4, #8]
 80092b6:	9301      	str	r3, [sp, #4]
 80092b8:	4620      	mov	r0, r4
 80092ba:	f001 fc7f 	bl	800abbc <_vfiprintf_r>
 80092be:	b002      	add	sp, #8
 80092c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092c4:	b004      	add	sp, #16
 80092c6:	4770      	bx	lr
 80092c8:	20000014 	.word	0x20000014

080092cc <putchar>:
 80092cc:	4b09      	ldr	r3, [pc, #36]	; (80092f4 <putchar+0x28>)
 80092ce:	b513      	push	{r0, r1, r4, lr}
 80092d0:	681c      	ldr	r4, [r3, #0]
 80092d2:	4601      	mov	r1, r0
 80092d4:	b134      	cbz	r4, 80092e4 <putchar+0x18>
 80092d6:	69a3      	ldr	r3, [r4, #24]
 80092d8:	b923      	cbnz	r3, 80092e4 <putchar+0x18>
 80092da:	9001      	str	r0, [sp, #4]
 80092dc:	4620      	mov	r0, r4
 80092de:	f7ff f943 	bl	8008568 <__sinit>
 80092e2:	9901      	ldr	r1, [sp, #4]
 80092e4:	68a2      	ldr	r2, [r4, #8]
 80092e6:	4620      	mov	r0, r4
 80092e8:	b002      	add	sp, #8
 80092ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092ee:	f001 bd95 	b.w	800ae1c <_putc_r>
 80092f2:	bf00      	nop
 80092f4:	20000014 	.word	0x20000014

080092f8 <_puts_r>:
 80092f8:	b570      	push	{r4, r5, r6, lr}
 80092fa:	460e      	mov	r6, r1
 80092fc:	4605      	mov	r5, r0
 80092fe:	b118      	cbz	r0, 8009308 <_puts_r+0x10>
 8009300:	6983      	ldr	r3, [r0, #24]
 8009302:	b90b      	cbnz	r3, 8009308 <_puts_r+0x10>
 8009304:	f7ff f930 	bl	8008568 <__sinit>
 8009308:	69ab      	ldr	r3, [r5, #24]
 800930a:	68ac      	ldr	r4, [r5, #8]
 800930c:	b913      	cbnz	r3, 8009314 <_puts_r+0x1c>
 800930e:	4628      	mov	r0, r5
 8009310:	f7ff f92a 	bl	8008568 <__sinit>
 8009314:	4b2c      	ldr	r3, [pc, #176]	; (80093c8 <_puts_r+0xd0>)
 8009316:	429c      	cmp	r4, r3
 8009318:	d120      	bne.n	800935c <_puts_r+0x64>
 800931a:	686c      	ldr	r4, [r5, #4]
 800931c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800931e:	07db      	lsls	r3, r3, #31
 8009320:	d405      	bmi.n	800932e <_puts_r+0x36>
 8009322:	89a3      	ldrh	r3, [r4, #12]
 8009324:	0598      	lsls	r0, r3, #22
 8009326:	d402      	bmi.n	800932e <_puts_r+0x36>
 8009328:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800932a:	f7ff f9e0 	bl	80086ee <__retarget_lock_acquire_recursive>
 800932e:	89a3      	ldrh	r3, [r4, #12]
 8009330:	0719      	lsls	r1, r3, #28
 8009332:	d51d      	bpl.n	8009370 <_puts_r+0x78>
 8009334:	6923      	ldr	r3, [r4, #16]
 8009336:	b1db      	cbz	r3, 8009370 <_puts_r+0x78>
 8009338:	3e01      	subs	r6, #1
 800933a:	68a3      	ldr	r3, [r4, #8]
 800933c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009340:	3b01      	subs	r3, #1
 8009342:	60a3      	str	r3, [r4, #8]
 8009344:	bb39      	cbnz	r1, 8009396 <_puts_r+0x9e>
 8009346:	2b00      	cmp	r3, #0
 8009348:	da38      	bge.n	80093bc <_puts_r+0xc4>
 800934a:	4622      	mov	r2, r4
 800934c:	210a      	movs	r1, #10
 800934e:	4628      	mov	r0, r5
 8009350:	f000 f8d0 	bl	80094f4 <__swbuf_r>
 8009354:	3001      	adds	r0, #1
 8009356:	d011      	beq.n	800937c <_puts_r+0x84>
 8009358:	250a      	movs	r5, #10
 800935a:	e011      	b.n	8009380 <_puts_r+0x88>
 800935c:	4b1b      	ldr	r3, [pc, #108]	; (80093cc <_puts_r+0xd4>)
 800935e:	429c      	cmp	r4, r3
 8009360:	d101      	bne.n	8009366 <_puts_r+0x6e>
 8009362:	68ac      	ldr	r4, [r5, #8]
 8009364:	e7da      	b.n	800931c <_puts_r+0x24>
 8009366:	4b1a      	ldr	r3, [pc, #104]	; (80093d0 <_puts_r+0xd8>)
 8009368:	429c      	cmp	r4, r3
 800936a:	bf08      	it	eq
 800936c:	68ec      	ldreq	r4, [r5, #12]
 800936e:	e7d5      	b.n	800931c <_puts_r+0x24>
 8009370:	4621      	mov	r1, r4
 8009372:	4628      	mov	r0, r5
 8009374:	f000 f922 	bl	80095bc <__swsetup_r>
 8009378:	2800      	cmp	r0, #0
 800937a:	d0dd      	beq.n	8009338 <_puts_r+0x40>
 800937c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8009380:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009382:	07da      	lsls	r2, r3, #31
 8009384:	d405      	bmi.n	8009392 <_puts_r+0x9a>
 8009386:	89a3      	ldrh	r3, [r4, #12]
 8009388:	059b      	lsls	r3, r3, #22
 800938a:	d402      	bmi.n	8009392 <_puts_r+0x9a>
 800938c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800938e:	f7ff f9af 	bl	80086f0 <__retarget_lock_release_recursive>
 8009392:	4628      	mov	r0, r5
 8009394:	bd70      	pop	{r4, r5, r6, pc}
 8009396:	2b00      	cmp	r3, #0
 8009398:	da04      	bge.n	80093a4 <_puts_r+0xac>
 800939a:	69a2      	ldr	r2, [r4, #24]
 800939c:	429a      	cmp	r2, r3
 800939e:	dc06      	bgt.n	80093ae <_puts_r+0xb6>
 80093a0:	290a      	cmp	r1, #10
 80093a2:	d004      	beq.n	80093ae <_puts_r+0xb6>
 80093a4:	6823      	ldr	r3, [r4, #0]
 80093a6:	1c5a      	adds	r2, r3, #1
 80093a8:	6022      	str	r2, [r4, #0]
 80093aa:	7019      	strb	r1, [r3, #0]
 80093ac:	e7c5      	b.n	800933a <_puts_r+0x42>
 80093ae:	4622      	mov	r2, r4
 80093b0:	4628      	mov	r0, r5
 80093b2:	f000 f89f 	bl	80094f4 <__swbuf_r>
 80093b6:	3001      	adds	r0, #1
 80093b8:	d1bf      	bne.n	800933a <_puts_r+0x42>
 80093ba:	e7df      	b.n	800937c <_puts_r+0x84>
 80093bc:	6823      	ldr	r3, [r4, #0]
 80093be:	250a      	movs	r5, #10
 80093c0:	1c5a      	adds	r2, r3, #1
 80093c2:	6022      	str	r2, [r4, #0]
 80093c4:	701d      	strb	r5, [r3, #0]
 80093c6:	e7db      	b.n	8009380 <_puts_r+0x88>
 80093c8:	080110a4 	.word	0x080110a4
 80093cc:	080110c4 	.word	0x080110c4
 80093d0:	08011084 	.word	0x08011084

080093d4 <puts>:
 80093d4:	4b02      	ldr	r3, [pc, #8]	; (80093e0 <puts+0xc>)
 80093d6:	4601      	mov	r1, r0
 80093d8:	6818      	ldr	r0, [r3, #0]
 80093da:	f7ff bf8d 	b.w	80092f8 <_puts_r>
 80093de:	bf00      	nop
 80093e0:	20000014 	.word	0x20000014

080093e4 <_sbrk_r>:
 80093e4:	b538      	push	{r3, r4, r5, lr}
 80093e6:	4d06      	ldr	r5, [pc, #24]	; (8009400 <_sbrk_r+0x1c>)
 80093e8:	2300      	movs	r3, #0
 80093ea:	4604      	mov	r4, r0
 80093ec:	4608      	mov	r0, r1
 80093ee:	602b      	str	r3, [r5, #0]
 80093f0:	f7f8 ff12 	bl	8002218 <_sbrk>
 80093f4:	1c43      	adds	r3, r0, #1
 80093f6:	d102      	bne.n	80093fe <_sbrk_r+0x1a>
 80093f8:	682b      	ldr	r3, [r5, #0]
 80093fa:	b103      	cbz	r3, 80093fe <_sbrk_r+0x1a>
 80093fc:	6023      	str	r3, [r4, #0]
 80093fe:	bd38      	pop	{r3, r4, r5, pc}
 8009400:	20000438 	.word	0x20000438

08009404 <__sread>:
 8009404:	b510      	push	{r4, lr}
 8009406:	460c      	mov	r4, r1
 8009408:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800940c:	f001 fd4e 	bl	800aeac <_read_r>
 8009410:	2800      	cmp	r0, #0
 8009412:	bfab      	itete	ge
 8009414:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009416:	89a3      	ldrhlt	r3, [r4, #12]
 8009418:	181b      	addge	r3, r3, r0
 800941a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800941e:	bfac      	ite	ge
 8009420:	6563      	strge	r3, [r4, #84]	; 0x54
 8009422:	81a3      	strhlt	r3, [r4, #12]
 8009424:	bd10      	pop	{r4, pc}

08009426 <__swrite>:
 8009426:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800942a:	461f      	mov	r7, r3
 800942c:	898b      	ldrh	r3, [r1, #12]
 800942e:	05db      	lsls	r3, r3, #23
 8009430:	4605      	mov	r5, r0
 8009432:	460c      	mov	r4, r1
 8009434:	4616      	mov	r6, r2
 8009436:	d505      	bpl.n	8009444 <__swrite+0x1e>
 8009438:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800943c:	2302      	movs	r3, #2
 800943e:	2200      	movs	r2, #0
 8009440:	f000 ffda 	bl	800a3f8 <_lseek_r>
 8009444:	89a3      	ldrh	r3, [r4, #12]
 8009446:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800944a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800944e:	81a3      	strh	r3, [r4, #12]
 8009450:	4632      	mov	r2, r6
 8009452:	463b      	mov	r3, r7
 8009454:	4628      	mov	r0, r5
 8009456:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800945a:	f000 b89d 	b.w	8009598 <_write_r>

0800945e <__sseek>:
 800945e:	b510      	push	{r4, lr}
 8009460:	460c      	mov	r4, r1
 8009462:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009466:	f000 ffc7 	bl	800a3f8 <_lseek_r>
 800946a:	1c43      	adds	r3, r0, #1
 800946c:	89a3      	ldrh	r3, [r4, #12]
 800946e:	bf15      	itete	ne
 8009470:	6560      	strne	r0, [r4, #84]	; 0x54
 8009472:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009476:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800947a:	81a3      	strheq	r3, [r4, #12]
 800947c:	bf18      	it	ne
 800947e:	81a3      	strhne	r3, [r4, #12]
 8009480:	bd10      	pop	{r4, pc}

08009482 <__sclose>:
 8009482:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009486:	f000 b907 	b.w	8009698 <_close_r>
	...

0800948c <swprintf>:
 800948c:	b40c      	push	{r2, r3}
 800948e:	b530      	push	{r4, r5, lr}
 8009490:	4b17      	ldr	r3, [pc, #92]	; (80094f0 <swprintf+0x64>)
 8009492:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8009496:	681d      	ldr	r5, [r3, #0]
 8009498:	b09d      	sub	sp, #116	; 0x74
 800949a:	460c      	mov	r4, r1
 800949c:	d308      	bcc.n	80094b0 <swprintf+0x24>
 800949e:	238b      	movs	r3, #139	; 0x8b
 80094a0:	602b      	str	r3, [r5, #0]
 80094a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80094a6:	b01d      	add	sp, #116	; 0x74
 80094a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80094ac:	b002      	add	sp, #8
 80094ae:	4770      	bx	lr
 80094b0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80094b4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80094b8:	9002      	str	r0, [sp, #8]
 80094ba:	9006      	str	r0, [sp, #24]
 80094bc:	b1b1      	cbz	r1, 80094ec <swprintf+0x60>
 80094be:	1e4b      	subs	r3, r1, #1
 80094c0:	009b      	lsls	r3, r3, #2
 80094c2:	9304      	str	r3, [sp, #16]
 80094c4:	9307      	str	r3, [sp, #28]
 80094c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80094ca:	f8ad 3016 	strh.w	r3, [sp, #22]
 80094ce:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80094d0:	ab21      	add	r3, sp, #132	; 0x84
 80094d2:	a902      	add	r1, sp, #8
 80094d4:	4628      	mov	r0, r5
 80094d6:	9301      	str	r3, [sp, #4]
 80094d8:	f001 fd6a 	bl	800afb0 <_svfwprintf_r>
 80094dc:	2c00      	cmp	r4, #0
 80094de:	d0de      	beq.n	800949e <swprintf+0x12>
 80094e0:	9b02      	ldr	r3, [sp, #8]
 80094e2:	2200      	movs	r2, #0
 80094e4:	42a0      	cmp	r0, r4
 80094e6:	601a      	str	r2, [r3, #0]
 80094e8:	d3dd      	bcc.n	80094a6 <swprintf+0x1a>
 80094ea:	e7d8      	b.n	800949e <swprintf+0x12>
 80094ec:	460b      	mov	r3, r1
 80094ee:	e7e8      	b.n	80094c2 <swprintf+0x36>
 80094f0:	20000014 	.word	0x20000014

080094f4 <__swbuf_r>:
 80094f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094f6:	460e      	mov	r6, r1
 80094f8:	4614      	mov	r4, r2
 80094fa:	4605      	mov	r5, r0
 80094fc:	b118      	cbz	r0, 8009506 <__swbuf_r+0x12>
 80094fe:	6983      	ldr	r3, [r0, #24]
 8009500:	b90b      	cbnz	r3, 8009506 <__swbuf_r+0x12>
 8009502:	f7ff f831 	bl	8008568 <__sinit>
 8009506:	4b21      	ldr	r3, [pc, #132]	; (800958c <__swbuf_r+0x98>)
 8009508:	429c      	cmp	r4, r3
 800950a:	d12b      	bne.n	8009564 <__swbuf_r+0x70>
 800950c:	686c      	ldr	r4, [r5, #4]
 800950e:	69a3      	ldr	r3, [r4, #24]
 8009510:	60a3      	str	r3, [r4, #8]
 8009512:	89a3      	ldrh	r3, [r4, #12]
 8009514:	071a      	lsls	r2, r3, #28
 8009516:	d52f      	bpl.n	8009578 <__swbuf_r+0x84>
 8009518:	6923      	ldr	r3, [r4, #16]
 800951a:	b36b      	cbz	r3, 8009578 <__swbuf_r+0x84>
 800951c:	6923      	ldr	r3, [r4, #16]
 800951e:	6820      	ldr	r0, [r4, #0]
 8009520:	1ac0      	subs	r0, r0, r3
 8009522:	6963      	ldr	r3, [r4, #20]
 8009524:	b2f6      	uxtb	r6, r6
 8009526:	4283      	cmp	r3, r0
 8009528:	4637      	mov	r7, r6
 800952a:	dc04      	bgt.n	8009536 <__swbuf_r+0x42>
 800952c:	4621      	mov	r1, r4
 800952e:	4628      	mov	r0, r5
 8009530:	f7fe ff74 	bl	800841c <_fflush_r>
 8009534:	bb30      	cbnz	r0, 8009584 <__swbuf_r+0x90>
 8009536:	68a3      	ldr	r3, [r4, #8]
 8009538:	3b01      	subs	r3, #1
 800953a:	60a3      	str	r3, [r4, #8]
 800953c:	6823      	ldr	r3, [r4, #0]
 800953e:	1c5a      	adds	r2, r3, #1
 8009540:	6022      	str	r2, [r4, #0]
 8009542:	701e      	strb	r6, [r3, #0]
 8009544:	6963      	ldr	r3, [r4, #20]
 8009546:	3001      	adds	r0, #1
 8009548:	4283      	cmp	r3, r0
 800954a:	d004      	beq.n	8009556 <__swbuf_r+0x62>
 800954c:	89a3      	ldrh	r3, [r4, #12]
 800954e:	07db      	lsls	r3, r3, #31
 8009550:	d506      	bpl.n	8009560 <__swbuf_r+0x6c>
 8009552:	2e0a      	cmp	r6, #10
 8009554:	d104      	bne.n	8009560 <__swbuf_r+0x6c>
 8009556:	4621      	mov	r1, r4
 8009558:	4628      	mov	r0, r5
 800955a:	f7fe ff5f 	bl	800841c <_fflush_r>
 800955e:	b988      	cbnz	r0, 8009584 <__swbuf_r+0x90>
 8009560:	4638      	mov	r0, r7
 8009562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009564:	4b0a      	ldr	r3, [pc, #40]	; (8009590 <__swbuf_r+0x9c>)
 8009566:	429c      	cmp	r4, r3
 8009568:	d101      	bne.n	800956e <__swbuf_r+0x7a>
 800956a:	68ac      	ldr	r4, [r5, #8]
 800956c:	e7cf      	b.n	800950e <__swbuf_r+0x1a>
 800956e:	4b09      	ldr	r3, [pc, #36]	; (8009594 <__swbuf_r+0xa0>)
 8009570:	429c      	cmp	r4, r3
 8009572:	bf08      	it	eq
 8009574:	68ec      	ldreq	r4, [r5, #12]
 8009576:	e7ca      	b.n	800950e <__swbuf_r+0x1a>
 8009578:	4621      	mov	r1, r4
 800957a:	4628      	mov	r0, r5
 800957c:	f000 f81e 	bl	80095bc <__swsetup_r>
 8009580:	2800      	cmp	r0, #0
 8009582:	d0cb      	beq.n	800951c <__swbuf_r+0x28>
 8009584:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009588:	e7ea      	b.n	8009560 <__swbuf_r+0x6c>
 800958a:	bf00      	nop
 800958c:	080110a4 	.word	0x080110a4
 8009590:	080110c4 	.word	0x080110c4
 8009594:	08011084 	.word	0x08011084

08009598 <_write_r>:
 8009598:	b538      	push	{r3, r4, r5, lr}
 800959a:	4d07      	ldr	r5, [pc, #28]	; (80095b8 <_write_r+0x20>)
 800959c:	4604      	mov	r4, r0
 800959e:	4608      	mov	r0, r1
 80095a0:	4611      	mov	r1, r2
 80095a2:	2200      	movs	r2, #0
 80095a4:	602a      	str	r2, [r5, #0]
 80095a6:	461a      	mov	r2, r3
 80095a8:	f7f8 fde5 	bl	8002176 <_write>
 80095ac:	1c43      	adds	r3, r0, #1
 80095ae:	d102      	bne.n	80095b6 <_write_r+0x1e>
 80095b0:	682b      	ldr	r3, [r5, #0]
 80095b2:	b103      	cbz	r3, 80095b6 <_write_r+0x1e>
 80095b4:	6023      	str	r3, [r4, #0]
 80095b6:	bd38      	pop	{r3, r4, r5, pc}
 80095b8:	20000438 	.word	0x20000438

080095bc <__swsetup_r>:
 80095bc:	4b32      	ldr	r3, [pc, #200]	; (8009688 <__swsetup_r+0xcc>)
 80095be:	b570      	push	{r4, r5, r6, lr}
 80095c0:	681d      	ldr	r5, [r3, #0]
 80095c2:	4606      	mov	r6, r0
 80095c4:	460c      	mov	r4, r1
 80095c6:	b125      	cbz	r5, 80095d2 <__swsetup_r+0x16>
 80095c8:	69ab      	ldr	r3, [r5, #24]
 80095ca:	b913      	cbnz	r3, 80095d2 <__swsetup_r+0x16>
 80095cc:	4628      	mov	r0, r5
 80095ce:	f7fe ffcb 	bl	8008568 <__sinit>
 80095d2:	4b2e      	ldr	r3, [pc, #184]	; (800968c <__swsetup_r+0xd0>)
 80095d4:	429c      	cmp	r4, r3
 80095d6:	d10f      	bne.n	80095f8 <__swsetup_r+0x3c>
 80095d8:	686c      	ldr	r4, [r5, #4]
 80095da:	89a3      	ldrh	r3, [r4, #12]
 80095dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80095e0:	0719      	lsls	r1, r3, #28
 80095e2:	d42c      	bmi.n	800963e <__swsetup_r+0x82>
 80095e4:	06dd      	lsls	r5, r3, #27
 80095e6:	d411      	bmi.n	800960c <__swsetup_r+0x50>
 80095e8:	2309      	movs	r3, #9
 80095ea:	6033      	str	r3, [r6, #0]
 80095ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80095f0:	81a3      	strh	r3, [r4, #12]
 80095f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80095f6:	e03e      	b.n	8009676 <__swsetup_r+0xba>
 80095f8:	4b25      	ldr	r3, [pc, #148]	; (8009690 <__swsetup_r+0xd4>)
 80095fa:	429c      	cmp	r4, r3
 80095fc:	d101      	bne.n	8009602 <__swsetup_r+0x46>
 80095fe:	68ac      	ldr	r4, [r5, #8]
 8009600:	e7eb      	b.n	80095da <__swsetup_r+0x1e>
 8009602:	4b24      	ldr	r3, [pc, #144]	; (8009694 <__swsetup_r+0xd8>)
 8009604:	429c      	cmp	r4, r3
 8009606:	bf08      	it	eq
 8009608:	68ec      	ldreq	r4, [r5, #12]
 800960a:	e7e6      	b.n	80095da <__swsetup_r+0x1e>
 800960c:	0758      	lsls	r0, r3, #29
 800960e:	d512      	bpl.n	8009636 <__swsetup_r+0x7a>
 8009610:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009612:	b141      	cbz	r1, 8009626 <__swsetup_r+0x6a>
 8009614:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009618:	4299      	cmp	r1, r3
 800961a:	d002      	beq.n	8009622 <__swsetup_r+0x66>
 800961c:	4630      	mov	r0, r6
 800961e:	f7ff f8f3 	bl	8008808 <_free_r>
 8009622:	2300      	movs	r3, #0
 8009624:	6363      	str	r3, [r4, #52]	; 0x34
 8009626:	89a3      	ldrh	r3, [r4, #12]
 8009628:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800962c:	81a3      	strh	r3, [r4, #12]
 800962e:	2300      	movs	r3, #0
 8009630:	6063      	str	r3, [r4, #4]
 8009632:	6923      	ldr	r3, [r4, #16]
 8009634:	6023      	str	r3, [r4, #0]
 8009636:	89a3      	ldrh	r3, [r4, #12]
 8009638:	f043 0308 	orr.w	r3, r3, #8
 800963c:	81a3      	strh	r3, [r4, #12]
 800963e:	6923      	ldr	r3, [r4, #16]
 8009640:	b94b      	cbnz	r3, 8009656 <__swsetup_r+0x9a>
 8009642:	89a3      	ldrh	r3, [r4, #12]
 8009644:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009648:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800964c:	d003      	beq.n	8009656 <__swsetup_r+0x9a>
 800964e:	4621      	mov	r1, r4
 8009650:	4630      	mov	r0, r6
 8009652:	f7ff f873 	bl	800873c <__smakebuf_r>
 8009656:	89a0      	ldrh	r0, [r4, #12]
 8009658:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800965c:	f010 0301 	ands.w	r3, r0, #1
 8009660:	d00a      	beq.n	8009678 <__swsetup_r+0xbc>
 8009662:	2300      	movs	r3, #0
 8009664:	60a3      	str	r3, [r4, #8]
 8009666:	6963      	ldr	r3, [r4, #20]
 8009668:	425b      	negs	r3, r3
 800966a:	61a3      	str	r3, [r4, #24]
 800966c:	6923      	ldr	r3, [r4, #16]
 800966e:	b943      	cbnz	r3, 8009682 <__swsetup_r+0xc6>
 8009670:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009674:	d1ba      	bne.n	80095ec <__swsetup_r+0x30>
 8009676:	bd70      	pop	{r4, r5, r6, pc}
 8009678:	0781      	lsls	r1, r0, #30
 800967a:	bf58      	it	pl
 800967c:	6963      	ldrpl	r3, [r4, #20]
 800967e:	60a3      	str	r3, [r4, #8]
 8009680:	e7f4      	b.n	800966c <__swsetup_r+0xb0>
 8009682:	2000      	movs	r0, #0
 8009684:	e7f7      	b.n	8009676 <__swsetup_r+0xba>
 8009686:	bf00      	nop
 8009688:	20000014 	.word	0x20000014
 800968c:	080110a4 	.word	0x080110a4
 8009690:	080110c4 	.word	0x080110c4
 8009694:	08011084 	.word	0x08011084

08009698 <_close_r>:
 8009698:	b538      	push	{r3, r4, r5, lr}
 800969a:	4d06      	ldr	r5, [pc, #24]	; (80096b4 <_close_r+0x1c>)
 800969c:	2300      	movs	r3, #0
 800969e:	4604      	mov	r4, r0
 80096a0:	4608      	mov	r0, r1
 80096a2:	602b      	str	r3, [r5, #0]
 80096a4:	f7f8 fd83 	bl	80021ae <_close>
 80096a8:	1c43      	adds	r3, r0, #1
 80096aa:	d102      	bne.n	80096b2 <_close_r+0x1a>
 80096ac:	682b      	ldr	r3, [r5, #0]
 80096ae:	b103      	cbz	r3, 80096b2 <_close_r+0x1a>
 80096b0:	6023      	str	r3, [r4, #0]
 80096b2:	bd38      	pop	{r3, r4, r5, pc}
 80096b4:	20000438 	.word	0x20000438

080096b8 <quorem>:
 80096b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096bc:	6903      	ldr	r3, [r0, #16]
 80096be:	690c      	ldr	r4, [r1, #16]
 80096c0:	42a3      	cmp	r3, r4
 80096c2:	4607      	mov	r7, r0
 80096c4:	f2c0 8081 	blt.w	80097ca <quorem+0x112>
 80096c8:	3c01      	subs	r4, #1
 80096ca:	f101 0814 	add.w	r8, r1, #20
 80096ce:	f100 0514 	add.w	r5, r0, #20
 80096d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80096d6:	9301      	str	r3, [sp, #4]
 80096d8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80096dc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80096e0:	3301      	adds	r3, #1
 80096e2:	429a      	cmp	r2, r3
 80096e4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80096e8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80096ec:	fbb2 f6f3 	udiv	r6, r2, r3
 80096f0:	d331      	bcc.n	8009756 <quorem+0x9e>
 80096f2:	f04f 0e00 	mov.w	lr, #0
 80096f6:	4640      	mov	r0, r8
 80096f8:	46ac      	mov	ip, r5
 80096fa:	46f2      	mov	sl, lr
 80096fc:	f850 2b04 	ldr.w	r2, [r0], #4
 8009700:	b293      	uxth	r3, r2
 8009702:	fb06 e303 	mla	r3, r6, r3, lr
 8009706:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800970a:	b29b      	uxth	r3, r3
 800970c:	ebaa 0303 	sub.w	r3, sl, r3
 8009710:	f8dc a000 	ldr.w	sl, [ip]
 8009714:	0c12      	lsrs	r2, r2, #16
 8009716:	fa13 f38a 	uxtah	r3, r3, sl
 800971a:	fb06 e202 	mla	r2, r6, r2, lr
 800971e:	9300      	str	r3, [sp, #0]
 8009720:	9b00      	ldr	r3, [sp, #0]
 8009722:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009726:	b292      	uxth	r2, r2
 8009728:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800972c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009730:	f8bd 3000 	ldrh.w	r3, [sp]
 8009734:	4581      	cmp	r9, r0
 8009736:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800973a:	f84c 3b04 	str.w	r3, [ip], #4
 800973e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009742:	d2db      	bcs.n	80096fc <quorem+0x44>
 8009744:	f855 300b 	ldr.w	r3, [r5, fp]
 8009748:	b92b      	cbnz	r3, 8009756 <quorem+0x9e>
 800974a:	9b01      	ldr	r3, [sp, #4]
 800974c:	3b04      	subs	r3, #4
 800974e:	429d      	cmp	r5, r3
 8009750:	461a      	mov	r2, r3
 8009752:	d32e      	bcc.n	80097b2 <quorem+0xfa>
 8009754:	613c      	str	r4, [r7, #16]
 8009756:	4638      	mov	r0, r7
 8009758:	f001 f8ee 	bl	800a938 <__mcmp>
 800975c:	2800      	cmp	r0, #0
 800975e:	db24      	blt.n	80097aa <quorem+0xf2>
 8009760:	3601      	adds	r6, #1
 8009762:	4628      	mov	r0, r5
 8009764:	f04f 0c00 	mov.w	ip, #0
 8009768:	f858 2b04 	ldr.w	r2, [r8], #4
 800976c:	f8d0 e000 	ldr.w	lr, [r0]
 8009770:	b293      	uxth	r3, r2
 8009772:	ebac 0303 	sub.w	r3, ip, r3
 8009776:	0c12      	lsrs	r2, r2, #16
 8009778:	fa13 f38e 	uxtah	r3, r3, lr
 800977c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009780:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009784:	b29b      	uxth	r3, r3
 8009786:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800978a:	45c1      	cmp	r9, r8
 800978c:	f840 3b04 	str.w	r3, [r0], #4
 8009790:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009794:	d2e8      	bcs.n	8009768 <quorem+0xb0>
 8009796:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800979a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800979e:	b922      	cbnz	r2, 80097aa <quorem+0xf2>
 80097a0:	3b04      	subs	r3, #4
 80097a2:	429d      	cmp	r5, r3
 80097a4:	461a      	mov	r2, r3
 80097a6:	d30a      	bcc.n	80097be <quorem+0x106>
 80097a8:	613c      	str	r4, [r7, #16]
 80097aa:	4630      	mov	r0, r6
 80097ac:	b003      	add	sp, #12
 80097ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097b2:	6812      	ldr	r2, [r2, #0]
 80097b4:	3b04      	subs	r3, #4
 80097b6:	2a00      	cmp	r2, #0
 80097b8:	d1cc      	bne.n	8009754 <quorem+0x9c>
 80097ba:	3c01      	subs	r4, #1
 80097bc:	e7c7      	b.n	800974e <quorem+0x96>
 80097be:	6812      	ldr	r2, [r2, #0]
 80097c0:	3b04      	subs	r3, #4
 80097c2:	2a00      	cmp	r2, #0
 80097c4:	d1f0      	bne.n	80097a8 <quorem+0xf0>
 80097c6:	3c01      	subs	r4, #1
 80097c8:	e7eb      	b.n	80097a2 <quorem+0xea>
 80097ca:	2000      	movs	r0, #0
 80097cc:	e7ee      	b.n	80097ac <quorem+0xf4>
	...

080097d0 <_dtoa_r>:
 80097d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097d4:	ed2d 8b04 	vpush	{d8-d9}
 80097d8:	ec57 6b10 	vmov	r6, r7, d0
 80097dc:	b093      	sub	sp, #76	; 0x4c
 80097de:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80097e0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80097e4:	9106      	str	r1, [sp, #24]
 80097e6:	ee10 aa10 	vmov	sl, s0
 80097ea:	4604      	mov	r4, r0
 80097ec:	9209      	str	r2, [sp, #36]	; 0x24
 80097ee:	930c      	str	r3, [sp, #48]	; 0x30
 80097f0:	46bb      	mov	fp, r7
 80097f2:	b975      	cbnz	r5, 8009812 <_dtoa_r+0x42>
 80097f4:	2010      	movs	r0, #16
 80097f6:	f7fe ffe1 	bl	80087bc <malloc>
 80097fa:	4602      	mov	r2, r0
 80097fc:	6260      	str	r0, [r4, #36]	; 0x24
 80097fe:	b920      	cbnz	r0, 800980a <_dtoa_r+0x3a>
 8009800:	4ba7      	ldr	r3, [pc, #668]	; (8009aa0 <_dtoa_r+0x2d0>)
 8009802:	21ea      	movs	r1, #234	; 0xea
 8009804:	48a7      	ldr	r0, [pc, #668]	; (8009aa4 <_dtoa_r+0x2d4>)
 8009806:	f002 f965 	bl	800bad4 <__assert_func>
 800980a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800980e:	6005      	str	r5, [r0, #0]
 8009810:	60c5      	str	r5, [r0, #12]
 8009812:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009814:	6819      	ldr	r1, [r3, #0]
 8009816:	b151      	cbz	r1, 800982e <_dtoa_r+0x5e>
 8009818:	685a      	ldr	r2, [r3, #4]
 800981a:	604a      	str	r2, [r1, #4]
 800981c:	2301      	movs	r3, #1
 800981e:	4093      	lsls	r3, r2
 8009820:	608b      	str	r3, [r1, #8]
 8009822:	4620      	mov	r0, r4
 8009824:	f000 fe46 	bl	800a4b4 <_Bfree>
 8009828:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800982a:	2200      	movs	r2, #0
 800982c:	601a      	str	r2, [r3, #0]
 800982e:	1e3b      	subs	r3, r7, #0
 8009830:	bfaa      	itet	ge
 8009832:	2300      	movge	r3, #0
 8009834:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009838:	f8c8 3000 	strge.w	r3, [r8]
 800983c:	4b9a      	ldr	r3, [pc, #616]	; (8009aa8 <_dtoa_r+0x2d8>)
 800983e:	bfbc      	itt	lt
 8009840:	2201      	movlt	r2, #1
 8009842:	f8c8 2000 	strlt.w	r2, [r8]
 8009846:	ea33 030b 	bics.w	r3, r3, fp
 800984a:	d11b      	bne.n	8009884 <_dtoa_r+0xb4>
 800984c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800984e:	f242 730f 	movw	r3, #9999	; 0x270f
 8009852:	6013      	str	r3, [r2, #0]
 8009854:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009858:	4333      	orrs	r3, r6
 800985a:	f000 8592 	beq.w	800a382 <_dtoa_r+0xbb2>
 800985e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009860:	b963      	cbnz	r3, 800987c <_dtoa_r+0xac>
 8009862:	4b92      	ldr	r3, [pc, #584]	; (8009aac <_dtoa_r+0x2dc>)
 8009864:	e022      	b.n	80098ac <_dtoa_r+0xdc>
 8009866:	4b92      	ldr	r3, [pc, #584]	; (8009ab0 <_dtoa_r+0x2e0>)
 8009868:	9301      	str	r3, [sp, #4]
 800986a:	3308      	adds	r3, #8
 800986c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800986e:	6013      	str	r3, [r2, #0]
 8009870:	9801      	ldr	r0, [sp, #4]
 8009872:	b013      	add	sp, #76	; 0x4c
 8009874:	ecbd 8b04 	vpop	{d8-d9}
 8009878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800987c:	4b8b      	ldr	r3, [pc, #556]	; (8009aac <_dtoa_r+0x2dc>)
 800987e:	9301      	str	r3, [sp, #4]
 8009880:	3303      	adds	r3, #3
 8009882:	e7f3      	b.n	800986c <_dtoa_r+0x9c>
 8009884:	2200      	movs	r2, #0
 8009886:	2300      	movs	r3, #0
 8009888:	4650      	mov	r0, sl
 800988a:	4659      	mov	r1, fp
 800988c:	f7f7 f91c 	bl	8000ac8 <__aeabi_dcmpeq>
 8009890:	ec4b ab19 	vmov	d9, sl, fp
 8009894:	4680      	mov	r8, r0
 8009896:	b158      	cbz	r0, 80098b0 <_dtoa_r+0xe0>
 8009898:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800989a:	2301      	movs	r3, #1
 800989c:	6013      	str	r3, [r2, #0]
 800989e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	f000 856b 	beq.w	800a37c <_dtoa_r+0xbac>
 80098a6:	4883      	ldr	r0, [pc, #524]	; (8009ab4 <_dtoa_r+0x2e4>)
 80098a8:	6018      	str	r0, [r3, #0]
 80098aa:	1e43      	subs	r3, r0, #1
 80098ac:	9301      	str	r3, [sp, #4]
 80098ae:	e7df      	b.n	8009870 <_dtoa_r+0xa0>
 80098b0:	ec4b ab10 	vmov	d0, sl, fp
 80098b4:	aa10      	add	r2, sp, #64	; 0x40
 80098b6:	a911      	add	r1, sp, #68	; 0x44
 80098b8:	4620      	mov	r0, r4
 80098ba:	f001 f8e3 	bl	800aa84 <__d2b>
 80098be:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80098c2:	ee08 0a10 	vmov	s16, r0
 80098c6:	2d00      	cmp	r5, #0
 80098c8:	f000 8084 	beq.w	80099d4 <_dtoa_r+0x204>
 80098cc:	ee19 3a90 	vmov	r3, s19
 80098d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80098d4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80098d8:	4656      	mov	r6, sl
 80098da:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80098de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80098e2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80098e6:	4b74      	ldr	r3, [pc, #464]	; (8009ab8 <_dtoa_r+0x2e8>)
 80098e8:	2200      	movs	r2, #0
 80098ea:	4630      	mov	r0, r6
 80098ec:	4639      	mov	r1, r7
 80098ee:	f7f6 fccb 	bl	8000288 <__aeabi_dsub>
 80098f2:	a365      	add	r3, pc, #404	; (adr r3, 8009a88 <_dtoa_r+0x2b8>)
 80098f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098f8:	f7f6 fe7e 	bl	80005f8 <__aeabi_dmul>
 80098fc:	a364      	add	r3, pc, #400	; (adr r3, 8009a90 <_dtoa_r+0x2c0>)
 80098fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009902:	f7f6 fcc3 	bl	800028c <__adddf3>
 8009906:	4606      	mov	r6, r0
 8009908:	4628      	mov	r0, r5
 800990a:	460f      	mov	r7, r1
 800990c:	f7f6 fe0a 	bl	8000524 <__aeabi_i2d>
 8009910:	a361      	add	r3, pc, #388	; (adr r3, 8009a98 <_dtoa_r+0x2c8>)
 8009912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009916:	f7f6 fe6f 	bl	80005f8 <__aeabi_dmul>
 800991a:	4602      	mov	r2, r0
 800991c:	460b      	mov	r3, r1
 800991e:	4630      	mov	r0, r6
 8009920:	4639      	mov	r1, r7
 8009922:	f7f6 fcb3 	bl	800028c <__adddf3>
 8009926:	4606      	mov	r6, r0
 8009928:	460f      	mov	r7, r1
 800992a:	f7f7 f915 	bl	8000b58 <__aeabi_d2iz>
 800992e:	2200      	movs	r2, #0
 8009930:	9000      	str	r0, [sp, #0]
 8009932:	2300      	movs	r3, #0
 8009934:	4630      	mov	r0, r6
 8009936:	4639      	mov	r1, r7
 8009938:	f7f7 f8d0 	bl	8000adc <__aeabi_dcmplt>
 800993c:	b150      	cbz	r0, 8009954 <_dtoa_r+0x184>
 800993e:	9800      	ldr	r0, [sp, #0]
 8009940:	f7f6 fdf0 	bl	8000524 <__aeabi_i2d>
 8009944:	4632      	mov	r2, r6
 8009946:	463b      	mov	r3, r7
 8009948:	f7f7 f8be 	bl	8000ac8 <__aeabi_dcmpeq>
 800994c:	b910      	cbnz	r0, 8009954 <_dtoa_r+0x184>
 800994e:	9b00      	ldr	r3, [sp, #0]
 8009950:	3b01      	subs	r3, #1
 8009952:	9300      	str	r3, [sp, #0]
 8009954:	9b00      	ldr	r3, [sp, #0]
 8009956:	2b16      	cmp	r3, #22
 8009958:	d85a      	bhi.n	8009a10 <_dtoa_r+0x240>
 800995a:	9a00      	ldr	r2, [sp, #0]
 800995c:	4b57      	ldr	r3, [pc, #348]	; (8009abc <_dtoa_r+0x2ec>)
 800995e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009966:	ec51 0b19 	vmov	r0, r1, d9
 800996a:	f7f7 f8b7 	bl	8000adc <__aeabi_dcmplt>
 800996e:	2800      	cmp	r0, #0
 8009970:	d050      	beq.n	8009a14 <_dtoa_r+0x244>
 8009972:	9b00      	ldr	r3, [sp, #0]
 8009974:	3b01      	subs	r3, #1
 8009976:	9300      	str	r3, [sp, #0]
 8009978:	2300      	movs	r3, #0
 800997a:	930b      	str	r3, [sp, #44]	; 0x2c
 800997c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800997e:	1b5d      	subs	r5, r3, r5
 8009980:	1e6b      	subs	r3, r5, #1
 8009982:	9305      	str	r3, [sp, #20]
 8009984:	bf45      	ittet	mi
 8009986:	f1c5 0301 	rsbmi	r3, r5, #1
 800998a:	9304      	strmi	r3, [sp, #16]
 800998c:	2300      	movpl	r3, #0
 800998e:	2300      	movmi	r3, #0
 8009990:	bf4c      	ite	mi
 8009992:	9305      	strmi	r3, [sp, #20]
 8009994:	9304      	strpl	r3, [sp, #16]
 8009996:	9b00      	ldr	r3, [sp, #0]
 8009998:	2b00      	cmp	r3, #0
 800999a:	db3d      	blt.n	8009a18 <_dtoa_r+0x248>
 800999c:	9b05      	ldr	r3, [sp, #20]
 800999e:	9a00      	ldr	r2, [sp, #0]
 80099a0:	920a      	str	r2, [sp, #40]	; 0x28
 80099a2:	4413      	add	r3, r2
 80099a4:	9305      	str	r3, [sp, #20]
 80099a6:	2300      	movs	r3, #0
 80099a8:	9307      	str	r3, [sp, #28]
 80099aa:	9b06      	ldr	r3, [sp, #24]
 80099ac:	2b09      	cmp	r3, #9
 80099ae:	f200 8089 	bhi.w	8009ac4 <_dtoa_r+0x2f4>
 80099b2:	2b05      	cmp	r3, #5
 80099b4:	bfc4      	itt	gt
 80099b6:	3b04      	subgt	r3, #4
 80099b8:	9306      	strgt	r3, [sp, #24]
 80099ba:	9b06      	ldr	r3, [sp, #24]
 80099bc:	f1a3 0302 	sub.w	r3, r3, #2
 80099c0:	bfcc      	ite	gt
 80099c2:	2500      	movgt	r5, #0
 80099c4:	2501      	movle	r5, #1
 80099c6:	2b03      	cmp	r3, #3
 80099c8:	f200 8087 	bhi.w	8009ada <_dtoa_r+0x30a>
 80099cc:	e8df f003 	tbb	[pc, r3]
 80099d0:	59383a2d 	.word	0x59383a2d
 80099d4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80099d8:	441d      	add	r5, r3
 80099da:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80099de:	2b20      	cmp	r3, #32
 80099e0:	bfc1      	itttt	gt
 80099e2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80099e6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80099ea:	fa0b f303 	lslgt.w	r3, fp, r3
 80099ee:	fa26 f000 	lsrgt.w	r0, r6, r0
 80099f2:	bfda      	itte	le
 80099f4:	f1c3 0320 	rsble	r3, r3, #32
 80099f8:	fa06 f003 	lslle.w	r0, r6, r3
 80099fc:	4318      	orrgt	r0, r3
 80099fe:	f7f6 fd81 	bl	8000504 <__aeabi_ui2d>
 8009a02:	2301      	movs	r3, #1
 8009a04:	4606      	mov	r6, r0
 8009a06:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009a0a:	3d01      	subs	r5, #1
 8009a0c:	930e      	str	r3, [sp, #56]	; 0x38
 8009a0e:	e76a      	b.n	80098e6 <_dtoa_r+0x116>
 8009a10:	2301      	movs	r3, #1
 8009a12:	e7b2      	b.n	800997a <_dtoa_r+0x1aa>
 8009a14:	900b      	str	r0, [sp, #44]	; 0x2c
 8009a16:	e7b1      	b.n	800997c <_dtoa_r+0x1ac>
 8009a18:	9b04      	ldr	r3, [sp, #16]
 8009a1a:	9a00      	ldr	r2, [sp, #0]
 8009a1c:	1a9b      	subs	r3, r3, r2
 8009a1e:	9304      	str	r3, [sp, #16]
 8009a20:	4253      	negs	r3, r2
 8009a22:	9307      	str	r3, [sp, #28]
 8009a24:	2300      	movs	r3, #0
 8009a26:	930a      	str	r3, [sp, #40]	; 0x28
 8009a28:	e7bf      	b.n	80099aa <_dtoa_r+0x1da>
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	9308      	str	r3, [sp, #32]
 8009a2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	dc55      	bgt.n	8009ae0 <_dtoa_r+0x310>
 8009a34:	2301      	movs	r3, #1
 8009a36:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009a3a:	461a      	mov	r2, r3
 8009a3c:	9209      	str	r2, [sp, #36]	; 0x24
 8009a3e:	e00c      	b.n	8009a5a <_dtoa_r+0x28a>
 8009a40:	2301      	movs	r3, #1
 8009a42:	e7f3      	b.n	8009a2c <_dtoa_r+0x25c>
 8009a44:	2300      	movs	r3, #0
 8009a46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a48:	9308      	str	r3, [sp, #32]
 8009a4a:	9b00      	ldr	r3, [sp, #0]
 8009a4c:	4413      	add	r3, r2
 8009a4e:	9302      	str	r3, [sp, #8]
 8009a50:	3301      	adds	r3, #1
 8009a52:	2b01      	cmp	r3, #1
 8009a54:	9303      	str	r3, [sp, #12]
 8009a56:	bfb8      	it	lt
 8009a58:	2301      	movlt	r3, #1
 8009a5a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	6042      	str	r2, [r0, #4]
 8009a60:	2204      	movs	r2, #4
 8009a62:	f102 0614 	add.w	r6, r2, #20
 8009a66:	429e      	cmp	r6, r3
 8009a68:	6841      	ldr	r1, [r0, #4]
 8009a6a:	d93d      	bls.n	8009ae8 <_dtoa_r+0x318>
 8009a6c:	4620      	mov	r0, r4
 8009a6e:	f000 fce1 	bl	800a434 <_Balloc>
 8009a72:	9001      	str	r0, [sp, #4]
 8009a74:	2800      	cmp	r0, #0
 8009a76:	d13b      	bne.n	8009af0 <_dtoa_r+0x320>
 8009a78:	4b11      	ldr	r3, [pc, #68]	; (8009ac0 <_dtoa_r+0x2f0>)
 8009a7a:	4602      	mov	r2, r0
 8009a7c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009a80:	e6c0      	b.n	8009804 <_dtoa_r+0x34>
 8009a82:	2301      	movs	r3, #1
 8009a84:	e7df      	b.n	8009a46 <_dtoa_r+0x276>
 8009a86:	bf00      	nop
 8009a88:	636f4361 	.word	0x636f4361
 8009a8c:	3fd287a7 	.word	0x3fd287a7
 8009a90:	8b60c8b3 	.word	0x8b60c8b3
 8009a94:	3fc68a28 	.word	0x3fc68a28
 8009a98:	509f79fb 	.word	0x509f79fb
 8009a9c:	3fd34413 	.word	0x3fd34413
 8009aa0:	08011129 	.word	0x08011129
 8009aa4:	08011140 	.word	0x08011140
 8009aa8:	7ff00000 	.word	0x7ff00000
 8009aac:	08011125 	.word	0x08011125
 8009ab0:	0801111c 	.word	0x0801111c
 8009ab4:	080110f9 	.word	0x080110f9
 8009ab8:	3ff80000 	.word	0x3ff80000
 8009abc:	08011230 	.word	0x08011230
 8009ac0:	0801119b 	.word	0x0801119b
 8009ac4:	2501      	movs	r5, #1
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	9306      	str	r3, [sp, #24]
 8009aca:	9508      	str	r5, [sp, #32]
 8009acc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009ad0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	2312      	movs	r3, #18
 8009ad8:	e7b0      	b.n	8009a3c <_dtoa_r+0x26c>
 8009ada:	2301      	movs	r3, #1
 8009adc:	9308      	str	r3, [sp, #32]
 8009ade:	e7f5      	b.n	8009acc <_dtoa_r+0x2fc>
 8009ae0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ae2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009ae6:	e7b8      	b.n	8009a5a <_dtoa_r+0x28a>
 8009ae8:	3101      	adds	r1, #1
 8009aea:	6041      	str	r1, [r0, #4]
 8009aec:	0052      	lsls	r2, r2, #1
 8009aee:	e7b8      	b.n	8009a62 <_dtoa_r+0x292>
 8009af0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009af2:	9a01      	ldr	r2, [sp, #4]
 8009af4:	601a      	str	r2, [r3, #0]
 8009af6:	9b03      	ldr	r3, [sp, #12]
 8009af8:	2b0e      	cmp	r3, #14
 8009afa:	f200 809d 	bhi.w	8009c38 <_dtoa_r+0x468>
 8009afe:	2d00      	cmp	r5, #0
 8009b00:	f000 809a 	beq.w	8009c38 <_dtoa_r+0x468>
 8009b04:	9b00      	ldr	r3, [sp, #0]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	dd32      	ble.n	8009b70 <_dtoa_r+0x3a0>
 8009b0a:	4ab7      	ldr	r2, [pc, #732]	; (8009de8 <_dtoa_r+0x618>)
 8009b0c:	f003 030f 	and.w	r3, r3, #15
 8009b10:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009b14:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009b18:	9b00      	ldr	r3, [sp, #0]
 8009b1a:	05d8      	lsls	r0, r3, #23
 8009b1c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009b20:	d516      	bpl.n	8009b50 <_dtoa_r+0x380>
 8009b22:	4bb2      	ldr	r3, [pc, #712]	; (8009dec <_dtoa_r+0x61c>)
 8009b24:	ec51 0b19 	vmov	r0, r1, d9
 8009b28:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009b2c:	f7f6 fe8e 	bl	800084c <__aeabi_ddiv>
 8009b30:	f007 070f 	and.w	r7, r7, #15
 8009b34:	4682      	mov	sl, r0
 8009b36:	468b      	mov	fp, r1
 8009b38:	2503      	movs	r5, #3
 8009b3a:	4eac      	ldr	r6, [pc, #688]	; (8009dec <_dtoa_r+0x61c>)
 8009b3c:	b957      	cbnz	r7, 8009b54 <_dtoa_r+0x384>
 8009b3e:	4642      	mov	r2, r8
 8009b40:	464b      	mov	r3, r9
 8009b42:	4650      	mov	r0, sl
 8009b44:	4659      	mov	r1, fp
 8009b46:	f7f6 fe81 	bl	800084c <__aeabi_ddiv>
 8009b4a:	4682      	mov	sl, r0
 8009b4c:	468b      	mov	fp, r1
 8009b4e:	e028      	b.n	8009ba2 <_dtoa_r+0x3d2>
 8009b50:	2502      	movs	r5, #2
 8009b52:	e7f2      	b.n	8009b3a <_dtoa_r+0x36a>
 8009b54:	07f9      	lsls	r1, r7, #31
 8009b56:	d508      	bpl.n	8009b6a <_dtoa_r+0x39a>
 8009b58:	4640      	mov	r0, r8
 8009b5a:	4649      	mov	r1, r9
 8009b5c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009b60:	f7f6 fd4a 	bl	80005f8 <__aeabi_dmul>
 8009b64:	3501      	adds	r5, #1
 8009b66:	4680      	mov	r8, r0
 8009b68:	4689      	mov	r9, r1
 8009b6a:	107f      	asrs	r7, r7, #1
 8009b6c:	3608      	adds	r6, #8
 8009b6e:	e7e5      	b.n	8009b3c <_dtoa_r+0x36c>
 8009b70:	f000 809b 	beq.w	8009caa <_dtoa_r+0x4da>
 8009b74:	9b00      	ldr	r3, [sp, #0]
 8009b76:	4f9d      	ldr	r7, [pc, #628]	; (8009dec <_dtoa_r+0x61c>)
 8009b78:	425e      	negs	r6, r3
 8009b7a:	4b9b      	ldr	r3, [pc, #620]	; (8009de8 <_dtoa_r+0x618>)
 8009b7c:	f006 020f 	and.w	r2, r6, #15
 8009b80:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b88:	ec51 0b19 	vmov	r0, r1, d9
 8009b8c:	f7f6 fd34 	bl	80005f8 <__aeabi_dmul>
 8009b90:	1136      	asrs	r6, r6, #4
 8009b92:	4682      	mov	sl, r0
 8009b94:	468b      	mov	fp, r1
 8009b96:	2300      	movs	r3, #0
 8009b98:	2502      	movs	r5, #2
 8009b9a:	2e00      	cmp	r6, #0
 8009b9c:	d17a      	bne.n	8009c94 <_dtoa_r+0x4c4>
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d1d3      	bne.n	8009b4a <_dtoa_r+0x37a>
 8009ba2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	f000 8082 	beq.w	8009cae <_dtoa_r+0x4de>
 8009baa:	4b91      	ldr	r3, [pc, #580]	; (8009df0 <_dtoa_r+0x620>)
 8009bac:	2200      	movs	r2, #0
 8009bae:	4650      	mov	r0, sl
 8009bb0:	4659      	mov	r1, fp
 8009bb2:	f7f6 ff93 	bl	8000adc <__aeabi_dcmplt>
 8009bb6:	2800      	cmp	r0, #0
 8009bb8:	d079      	beq.n	8009cae <_dtoa_r+0x4de>
 8009bba:	9b03      	ldr	r3, [sp, #12]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d076      	beq.n	8009cae <_dtoa_r+0x4de>
 8009bc0:	9b02      	ldr	r3, [sp, #8]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	dd36      	ble.n	8009c34 <_dtoa_r+0x464>
 8009bc6:	9b00      	ldr	r3, [sp, #0]
 8009bc8:	4650      	mov	r0, sl
 8009bca:	4659      	mov	r1, fp
 8009bcc:	1e5f      	subs	r7, r3, #1
 8009bce:	2200      	movs	r2, #0
 8009bd0:	4b88      	ldr	r3, [pc, #544]	; (8009df4 <_dtoa_r+0x624>)
 8009bd2:	f7f6 fd11 	bl	80005f8 <__aeabi_dmul>
 8009bd6:	9e02      	ldr	r6, [sp, #8]
 8009bd8:	4682      	mov	sl, r0
 8009bda:	468b      	mov	fp, r1
 8009bdc:	3501      	adds	r5, #1
 8009bde:	4628      	mov	r0, r5
 8009be0:	f7f6 fca0 	bl	8000524 <__aeabi_i2d>
 8009be4:	4652      	mov	r2, sl
 8009be6:	465b      	mov	r3, fp
 8009be8:	f7f6 fd06 	bl	80005f8 <__aeabi_dmul>
 8009bec:	4b82      	ldr	r3, [pc, #520]	; (8009df8 <_dtoa_r+0x628>)
 8009bee:	2200      	movs	r2, #0
 8009bf0:	f7f6 fb4c 	bl	800028c <__adddf3>
 8009bf4:	46d0      	mov	r8, sl
 8009bf6:	46d9      	mov	r9, fp
 8009bf8:	4682      	mov	sl, r0
 8009bfa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009bfe:	2e00      	cmp	r6, #0
 8009c00:	d158      	bne.n	8009cb4 <_dtoa_r+0x4e4>
 8009c02:	4b7e      	ldr	r3, [pc, #504]	; (8009dfc <_dtoa_r+0x62c>)
 8009c04:	2200      	movs	r2, #0
 8009c06:	4640      	mov	r0, r8
 8009c08:	4649      	mov	r1, r9
 8009c0a:	f7f6 fb3d 	bl	8000288 <__aeabi_dsub>
 8009c0e:	4652      	mov	r2, sl
 8009c10:	465b      	mov	r3, fp
 8009c12:	4680      	mov	r8, r0
 8009c14:	4689      	mov	r9, r1
 8009c16:	f7f6 ff7f 	bl	8000b18 <__aeabi_dcmpgt>
 8009c1a:	2800      	cmp	r0, #0
 8009c1c:	f040 8295 	bne.w	800a14a <_dtoa_r+0x97a>
 8009c20:	4652      	mov	r2, sl
 8009c22:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009c26:	4640      	mov	r0, r8
 8009c28:	4649      	mov	r1, r9
 8009c2a:	f7f6 ff57 	bl	8000adc <__aeabi_dcmplt>
 8009c2e:	2800      	cmp	r0, #0
 8009c30:	f040 8289 	bne.w	800a146 <_dtoa_r+0x976>
 8009c34:	ec5b ab19 	vmov	sl, fp, d9
 8009c38:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	f2c0 8148 	blt.w	8009ed0 <_dtoa_r+0x700>
 8009c40:	9a00      	ldr	r2, [sp, #0]
 8009c42:	2a0e      	cmp	r2, #14
 8009c44:	f300 8144 	bgt.w	8009ed0 <_dtoa_r+0x700>
 8009c48:	4b67      	ldr	r3, [pc, #412]	; (8009de8 <_dtoa_r+0x618>)
 8009c4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009c4e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009c52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	f280 80d5 	bge.w	8009e04 <_dtoa_r+0x634>
 8009c5a:	9b03      	ldr	r3, [sp, #12]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	f300 80d1 	bgt.w	8009e04 <_dtoa_r+0x634>
 8009c62:	f040 826f 	bne.w	800a144 <_dtoa_r+0x974>
 8009c66:	4b65      	ldr	r3, [pc, #404]	; (8009dfc <_dtoa_r+0x62c>)
 8009c68:	2200      	movs	r2, #0
 8009c6a:	4640      	mov	r0, r8
 8009c6c:	4649      	mov	r1, r9
 8009c6e:	f7f6 fcc3 	bl	80005f8 <__aeabi_dmul>
 8009c72:	4652      	mov	r2, sl
 8009c74:	465b      	mov	r3, fp
 8009c76:	f7f6 ff45 	bl	8000b04 <__aeabi_dcmpge>
 8009c7a:	9e03      	ldr	r6, [sp, #12]
 8009c7c:	4637      	mov	r7, r6
 8009c7e:	2800      	cmp	r0, #0
 8009c80:	f040 8245 	bne.w	800a10e <_dtoa_r+0x93e>
 8009c84:	9d01      	ldr	r5, [sp, #4]
 8009c86:	2331      	movs	r3, #49	; 0x31
 8009c88:	f805 3b01 	strb.w	r3, [r5], #1
 8009c8c:	9b00      	ldr	r3, [sp, #0]
 8009c8e:	3301      	adds	r3, #1
 8009c90:	9300      	str	r3, [sp, #0]
 8009c92:	e240      	b.n	800a116 <_dtoa_r+0x946>
 8009c94:	07f2      	lsls	r2, r6, #31
 8009c96:	d505      	bpl.n	8009ca4 <_dtoa_r+0x4d4>
 8009c98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c9c:	f7f6 fcac 	bl	80005f8 <__aeabi_dmul>
 8009ca0:	3501      	adds	r5, #1
 8009ca2:	2301      	movs	r3, #1
 8009ca4:	1076      	asrs	r6, r6, #1
 8009ca6:	3708      	adds	r7, #8
 8009ca8:	e777      	b.n	8009b9a <_dtoa_r+0x3ca>
 8009caa:	2502      	movs	r5, #2
 8009cac:	e779      	b.n	8009ba2 <_dtoa_r+0x3d2>
 8009cae:	9f00      	ldr	r7, [sp, #0]
 8009cb0:	9e03      	ldr	r6, [sp, #12]
 8009cb2:	e794      	b.n	8009bde <_dtoa_r+0x40e>
 8009cb4:	9901      	ldr	r1, [sp, #4]
 8009cb6:	4b4c      	ldr	r3, [pc, #304]	; (8009de8 <_dtoa_r+0x618>)
 8009cb8:	4431      	add	r1, r6
 8009cba:	910d      	str	r1, [sp, #52]	; 0x34
 8009cbc:	9908      	ldr	r1, [sp, #32]
 8009cbe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009cc2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009cc6:	2900      	cmp	r1, #0
 8009cc8:	d043      	beq.n	8009d52 <_dtoa_r+0x582>
 8009cca:	494d      	ldr	r1, [pc, #308]	; (8009e00 <_dtoa_r+0x630>)
 8009ccc:	2000      	movs	r0, #0
 8009cce:	f7f6 fdbd 	bl	800084c <__aeabi_ddiv>
 8009cd2:	4652      	mov	r2, sl
 8009cd4:	465b      	mov	r3, fp
 8009cd6:	f7f6 fad7 	bl	8000288 <__aeabi_dsub>
 8009cda:	9d01      	ldr	r5, [sp, #4]
 8009cdc:	4682      	mov	sl, r0
 8009cde:	468b      	mov	fp, r1
 8009ce0:	4649      	mov	r1, r9
 8009ce2:	4640      	mov	r0, r8
 8009ce4:	f7f6 ff38 	bl	8000b58 <__aeabi_d2iz>
 8009ce8:	4606      	mov	r6, r0
 8009cea:	f7f6 fc1b 	bl	8000524 <__aeabi_i2d>
 8009cee:	4602      	mov	r2, r0
 8009cf0:	460b      	mov	r3, r1
 8009cf2:	4640      	mov	r0, r8
 8009cf4:	4649      	mov	r1, r9
 8009cf6:	f7f6 fac7 	bl	8000288 <__aeabi_dsub>
 8009cfa:	3630      	adds	r6, #48	; 0x30
 8009cfc:	f805 6b01 	strb.w	r6, [r5], #1
 8009d00:	4652      	mov	r2, sl
 8009d02:	465b      	mov	r3, fp
 8009d04:	4680      	mov	r8, r0
 8009d06:	4689      	mov	r9, r1
 8009d08:	f7f6 fee8 	bl	8000adc <__aeabi_dcmplt>
 8009d0c:	2800      	cmp	r0, #0
 8009d0e:	d163      	bne.n	8009dd8 <_dtoa_r+0x608>
 8009d10:	4642      	mov	r2, r8
 8009d12:	464b      	mov	r3, r9
 8009d14:	4936      	ldr	r1, [pc, #216]	; (8009df0 <_dtoa_r+0x620>)
 8009d16:	2000      	movs	r0, #0
 8009d18:	f7f6 fab6 	bl	8000288 <__aeabi_dsub>
 8009d1c:	4652      	mov	r2, sl
 8009d1e:	465b      	mov	r3, fp
 8009d20:	f7f6 fedc 	bl	8000adc <__aeabi_dcmplt>
 8009d24:	2800      	cmp	r0, #0
 8009d26:	f040 80b5 	bne.w	8009e94 <_dtoa_r+0x6c4>
 8009d2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d2c:	429d      	cmp	r5, r3
 8009d2e:	d081      	beq.n	8009c34 <_dtoa_r+0x464>
 8009d30:	4b30      	ldr	r3, [pc, #192]	; (8009df4 <_dtoa_r+0x624>)
 8009d32:	2200      	movs	r2, #0
 8009d34:	4650      	mov	r0, sl
 8009d36:	4659      	mov	r1, fp
 8009d38:	f7f6 fc5e 	bl	80005f8 <__aeabi_dmul>
 8009d3c:	4b2d      	ldr	r3, [pc, #180]	; (8009df4 <_dtoa_r+0x624>)
 8009d3e:	4682      	mov	sl, r0
 8009d40:	468b      	mov	fp, r1
 8009d42:	4640      	mov	r0, r8
 8009d44:	4649      	mov	r1, r9
 8009d46:	2200      	movs	r2, #0
 8009d48:	f7f6 fc56 	bl	80005f8 <__aeabi_dmul>
 8009d4c:	4680      	mov	r8, r0
 8009d4e:	4689      	mov	r9, r1
 8009d50:	e7c6      	b.n	8009ce0 <_dtoa_r+0x510>
 8009d52:	4650      	mov	r0, sl
 8009d54:	4659      	mov	r1, fp
 8009d56:	f7f6 fc4f 	bl	80005f8 <__aeabi_dmul>
 8009d5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d5c:	9d01      	ldr	r5, [sp, #4]
 8009d5e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009d60:	4682      	mov	sl, r0
 8009d62:	468b      	mov	fp, r1
 8009d64:	4649      	mov	r1, r9
 8009d66:	4640      	mov	r0, r8
 8009d68:	f7f6 fef6 	bl	8000b58 <__aeabi_d2iz>
 8009d6c:	4606      	mov	r6, r0
 8009d6e:	f7f6 fbd9 	bl	8000524 <__aeabi_i2d>
 8009d72:	3630      	adds	r6, #48	; 0x30
 8009d74:	4602      	mov	r2, r0
 8009d76:	460b      	mov	r3, r1
 8009d78:	4640      	mov	r0, r8
 8009d7a:	4649      	mov	r1, r9
 8009d7c:	f7f6 fa84 	bl	8000288 <__aeabi_dsub>
 8009d80:	f805 6b01 	strb.w	r6, [r5], #1
 8009d84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d86:	429d      	cmp	r5, r3
 8009d88:	4680      	mov	r8, r0
 8009d8a:	4689      	mov	r9, r1
 8009d8c:	f04f 0200 	mov.w	r2, #0
 8009d90:	d124      	bne.n	8009ddc <_dtoa_r+0x60c>
 8009d92:	4b1b      	ldr	r3, [pc, #108]	; (8009e00 <_dtoa_r+0x630>)
 8009d94:	4650      	mov	r0, sl
 8009d96:	4659      	mov	r1, fp
 8009d98:	f7f6 fa78 	bl	800028c <__adddf3>
 8009d9c:	4602      	mov	r2, r0
 8009d9e:	460b      	mov	r3, r1
 8009da0:	4640      	mov	r0, r8
 8009da2:	4649      	mov	r1, r9
 8009da4:	f7f6 feb8 	bl	8000b18 <__aeabi_dcmpgt>
 8009da8:	2800      	cmp	r0, #0
 8009daa:	d173      	bne.n	8009e94 <_dtoa_r+0x6c4>
 8009dac:	4652      	mov	r2, sl
 8009dae:	465b      	mov	r3, fp
 8009db0:	4913      	ldr	r1, [pc, #76]	; (8009e00 <_dtoa_r+0x630>)
 8009db2:	2000      	movs	r0, #0
 8009db4:	f7f6 fa68 	bl	8000288 <__aeabi_dsub>
 8009db8:	4602      	mov	r2, r0
 8009dba:	460b      	mov	r3, r1
 8009dbc:	4640      	mov	r0, r8
 8009dbe:	4649      	mov	r1, r9
 8009dc0:	f7f6 fe8c 	bl	8000adc <__aeabi_dcmplt>
 8009dc4:	2800      	cmp	r0, #0
 8009dc6:	f43f af35 	beq.w	8009c34 <_dtoa_r+0x464>
 8009dca:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009dcc:	1e6b      	subs	r3, r5, #1
 8009dce:	930f      	str	r3, [sp, #60]	; 0x3c
 8009dd0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009dd4:	2b30      	cmp	r3, #48	; 0x30
 8009dd6:	d0f8      	beq.n	8009dca <_dtoa_r+0x5fa>
 8009dd8:	9700      	str	r7, [sp, #0]
 8009dda:	e049      	b.n	8009e70 <_dtoa_r+0x6a0>
 8009ddc:	4b05      	ldr	r3, [pc, #20]	; (8009df4 <_dtoa_r+0x624>)
 8009dde:	f7f6 fc0b 	bl	80005f8 <__aeabi_dmul>
 8009de2:	4680      	mov	r8, r0
 8009de4:	4689      	mov	r9, r1
 8009de6:	e7bd      	b.n	8009d64 <_dtoa_r+0x594>
 8009de8:	08011230 	.word	0x08011230
 8009dec:	08011208 	.word	0x08011208
 8009df0:	3ff00000 	.word	0x3ff00000
 8009df4:	40240000 	.word	0x40240000
 8009df8:	401c0000 	.word	0x401c0000
 8009dfc:	40140000 	.word	0x40140000
 8009e00:	3fe00000 	.word	0x3fe00000
 8009e04:	9d01      	ldr	r5, [sp, #4]
 8009e06:	4656      	mov	r6, sl
 8009e08:	465f      	mov	r7, fp
 8009e0a:	4642      	mov	r2, r8
 8009e0c:	464b      	mov	r3, r9
 8009e0e:	4630      	mov	r0, r6
 8009e10:	4639      	mov	r1, r7
 8009e12:	f7f6 fd1b 	bl	800084c <__aeabi_ddiv>
 8009e16:	f7f6 fe9f 	bl	8000b58 <__aeabi_d2iz>
 8009e1a:	4682      	mov	sl, r0
 8009e1c:	f7f6 fb82 	bl	8000524 <__aeabi_i2d>
 8009e20:	4642      	mov	r2, r8
 8009e22:	464b      	mov	r3, r9
 8009e24:	f7f6 fbe8 	bl	80005f8 <__aeabi_dmul>
 8009e28:	4602      	mov	r2, r0
 8009e2a:	460b      	mov	r3, r1
 8009e2c:	4630      	mov	r0, r6
 8009e2e:	4639      	mov	r1, r7
 8009e30:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009e34:	f7f6 fa28 	bl	8000288 <__aeabi_dsub>
 8009e38:	f805 6b01 	strb.w	r6, [r5], #1
 8009e3c:	9e01      	ldr	r6, [sp, #4]
 8009e3e:	9f03      	ldr	r7, [sp, #12]
 8009e40:	1bae      	subs	r6, r5, r6
 8009e42:	42b7      	cmp	r7, r6
 8009e44:	4602      	mov	r2, r0
 8009e46:	460b      	mov	r3, r1
 8009e48:	d135      	bne.n	8009eb6 <_dtoa_r+0x6e6>
 8009e4a:	f7f6 fa1f 	bl	800028c <__adddf3>
 8009e4e:	4642      	mov	r2, r8
 8009e50:	464b      	mov	r3, r9
 8009e52:	4606      	mov	r6, r0
 8009e54:	460f      	mov	r7, r1
 8009e56:	f7f6 fe5f 	bl	8000b18 <__aeabi_dcmpgt>
 8009e5a:	b9d0      	cbnz	r0, 8009e92 <_dtoa_r+0x6c2>
 8009e5c:	4642      	mov	r2, r8
 8009e5e:	464b      	mov	r3, r9
 8009e60:	4630      	mov	r0, r6
 8009e62:	4639      	mov	r1, r7
 8009e64:	f7f6 fe30 	bl	8000ac8 <__aeabi_dcmpeq>
 8009e68:	b110      	cbz	r0, 8009e70 <_dtoa_r+0x6a0>
 8009e6a:	f01a 0f01 	tst.w	sl, #1
 8009e6e:	d110      	bne.n	8009e92 <_dtoa_r+0x6c2>
 8009e70:	4620      	mov	r0, r4
 8009e72:	ee18 1a10 	vmov	r1, s16
 8009e76:	f000 fb1d 	bl	800a4b4 <_Bfree>
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	9800      	ldr	r0, [sp, #0]
 8009e7e:	702b      	strb	r3, [r5, #0]
 8009e80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009e82:	3001      	adds	r0, #1
 8009e84:	6018      	str	r0, [r3, #0]
 8009e86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	f43f acf1 	beq.w	8009870 <_dtoa_r+0xa0>
 8009e8e:	601d      	str	r5, [r3, #0]
 8009e90:	e4ee      	b.n	8009870 <_dtoa_r+0xa0>
 8009e92:	9f00      	ldr	r7, [sp, #0]
 8009e94:	462b      	mov	r3, r5
 8009e96:	461d      	mov	r5, r3
 8009e98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009e9c:	2a39      	cmp	r2, #57	; 0x39
 8009e9e:	d106      	bne.n	8009eae <_dtoa_r+0x6de>
 8009ea0:	9a01      	ldr	r2, [sp, #4]
 8009ea2:	429a      	cmp	r2, r3
 8009ea4:	d1f7      	bne.n	8009e96 <_dtoa_r+0x6c6>
 8009ea6:	9901      	ldr	r1, [sp, #4]
 8009ea8:	2230      	movs	r2, #48	; 0x30
 8009eaa:	3701      	adds	r7, #1
 8009eac:	700a      	strb	r2, [r1, #0]
 8009eae:	781a      	ldrb	r2, [r3, #0]
 8009eb0:	3201      	adds	r2, #1
 8009eb2:	701a      	strb	r2, [r3, #0]
 8009eb4:	e790      	b.n	8009dd8 <_dtoa_r+0x608>
 8009eb6:	4ba6      	ldr	r3, [pc, #664]	; (800a150 <_dtoa_r+0x980>)
 8009eb8:	2200      	movs	r2, #0
 8009eba:	f7f6 fb9d 	bl	80005f8 <__aeabi_dmul>
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	4606      	mov	r6, r0
 8009ec4:	460f      	mov	r7, r1
 8009ec6:	f7f6 fdff 	bl	8000ac8 <__aeabi_dcmpeq>
 8009eca:	2800      	cmp	r0, #0
 8009ecc:	d09d      	beq.n	8009e0a <_dtoa_r+0x63a>
 8009ece:	e7cf      	b.n	8009e70 <_dtoa_r+0x6a0>
 8009ed0:	9a08      	ldr	r2, [sp, #32]
 8009ed2:	2a00      	cmp	r2, #0
 8009ed4:	f000 80d7 	beq.w	800a086 <_dtoa_r+0x8b6>
 8009ed8:	9a06      	ldr	r2, [sp, #24]
 8009eda:	2a01      	cmp	r2, #1
 8009edc:	f300 80ba 	bgt.w	800a054 <_dtoa_r+0x884>
 8009ee0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009ee2:	2a00      	cmp	r2, #0
 8009ee4:	f000 80b2 	beq.w	800a04c <_dtoa_r+0x87c>
 8009ee8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009eec:	9e07      	ldr	r6, [sp, #28]
 8009eee:	9d04      	ldr	r5, [sp, #16]
 8009ef0:	9a04      	ldr	r2, [sp, #16]
 8009ef2:	441a      	add	r2, r3
 8009ef4:	9204      	str	r2, [sp, #16]
 8009ef6:	9a05      	ldr	r2, [sp, #20]
 8009ef8:	2101      	movs	r1, #1
 8009efa:	441a      	add	r2, r3
 8009efc:	4620      	mov	r0, r4
 8009efe:	9205      	str	r2, [sp, #20]
 8009f00:	f000 fb90 	bl	800a624 <__i2b>
 8009f04:	4607      	mov	r7, r0
 8009f06:	2d00      	cmp	r5, #0
 8009f08:	dd0c      	ble.n	8009f24 <_dtoa_r+0x754>
 8009f0a:	9b05      	ldr	r3, [sp, #20]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	dd09      	ble.n	8009f24 <_dtoa_r+0x754>
 8009f10:	42ab      	cmp	r3, r5
 8009f12:	9a04      	ldr	r2, [sp, #16]
 8009f14:	bfa8      	it	ge
 8009f16:	462b      	movge	r3, r5
 8009f18:	1ad2      	subs	r2, r2, r3
 8009f1a:	9204      	str	r2, [sp, #16]
 8009f1c:	9a05      	ldr	r2, [sp, #20]
 8009f1e:	1aed      	subs	r5, r5, r3
 8009f20:	1ad3      	subs	r3, r2, r3
 8009f22:	9305      	str	r3, [sp, #20]
 8009f24:	9b07      	ldr	r3, [sp, #28]
 8009f26:	b31b      	cbz	r3, 8009f70 <_dtoa_r+0x7a0>
 8009f28:	9b08      	ldr	r3, [sp, #32]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	f000 80af 	beq.w	800a08e <_dtoa_r+0x8be>
 8009f30:	2e00      	cmp	r6, #0
 8009f32:	dd13      	ble.n	8009f5c <_dtoa_r+0x78c>
 8009f34:	4639      	mov	r1, r7
 8009f36:	4632      	mov	r2, r6
 8009f38:	4620      	mov	r0, r4
 8009f3a:	f000 fc33 	bl	800a7a4 <__pow5mult>
 8009f3e:	ee18 2a10 	vmov	r2, s16
 8009f42:	4601      	mov	r1, r0
 8009f44:	4607      	mov	r7, r0
 8009f46:	4620      	mov	r0, r4
 8009f48:	f000 fb82 	bl	800a650 <__multiply>
 8009f4c:	ee18 1a10 	vmov	r1, s16
 8009f50:	4680      	mov	r8, r0
 8009f52:	4620      	mov	r0, r4
 8009f54:	f000 faae 	bl	800a4b4 <_Bfree>
 8009f58:	ee08 8a10 	vmov	s16, r8
 8009f5c:	9b07      	ldr	r3, [sp, #28]
 8009f5e:	1b9a      	subs	r2, r3, r6
 8009f60:	d006      	beq.n	8009f70 <_dtoa_r+0x7a0>
 8009f62:	ee18 1a10 	vmov	r1, s16
 8009f66:	4620      	mov	r0, r4
 8009f68:	f000 fc1c 	bl	800a7a4 <__pow5mult>
 8009f6c:	ee08 0a10 	vmov	s16, r0
 8009f70:	2101      	movs	r1, #1
 8009f72:	4620      	mov	r0, r4
 8009f74:	f000 fb56 	bl	800a624 <__i2b>
 8009f78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	4606      	mov	r6, r0
 8009f7e:	f340 8088 	ble.w	800a092 <_dtoa_r+0x8c2>
 8009f82:	461a      	mov	r2, r3
 8009f84:	4601      	mov	r1, r0
 8009f86:	4620      	mov	r0, r4
 8009f88:	f000 fc0c 	bl	800a7a4 <__pow5mult>
 8009f8c:	9b06      	ldr	r3, [sp, #24]
 8009f8e:	2b01      	cmp	r3, #1
 8009f90:	4606      	mov	r6, r0
 8009f92:	f340 8081 	ble.w	800a098 <_dtoa_r+0x8c8>
 8009f96:	f04f 0800 	mov.w	r8, #0
 8009f9a:	6933      	ldr	r3, [r6, #16]
 8009f9c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009fa0:	6918      	ldr	r0, [r3, #16]
 8009fa2:	f000 faef 	bl	800a584 <__hi0bits>
 8009fa6:	f1c0 0020 	rsb	r0, r0, #32
 8009faa:	9b05      	ldr	r3, [sp, #20]
 8009fac:	4418      	add	r0, r3
 8009fae:	f010 001f 	ands.w	r0, r0, #31
 8009fb2:	f000 8092 	beq.w	800a0da <_dtoa_r+0x90a>
 8009fb6:	f1c0 0320 	rsb	r3, r0, #32
 8009fba:	2b04      	cmp	r3, #4
 8009fbc:	f340 808a 	ble.w	800a0d4 <_dtoa_r+0x904>
 8009fc0:	f1c0 001c 	rsb	r0, r0, #28
 8009fc4:	9b04      	ldr	r3, [sp, #16]
 8009fc6:	4403      	add	r3, r0
 8009fc8:	9304      	str	r3, [sp, #16]
 8009fca:	9b05      	ldr	r3, [sp, #20]
 8009fcc:	4403      	add	r3, r0
 8009fce:	4405      	add	r5, r0
 8009fd0:	9305      	str	r3, [sp, #20]
 8009fd2:	9b04      	ldr	r3, [sp, #16]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	dd07      	ble.n	8009fe8 <_dtoa_r+0x818>
 8009fd8:	ee18 1a10 	vmov	r1, s16
 8009fdc:	461a      	mov	r2, r3
 8009fde:	4620      	mov	r0, r4
 8009fe0:	f000 fc3a 	bl	800a858 <__lshift>
 8009fe4:	ee08 0a10 	vmov	s16, r0
 8009fe8:	9b05      	ldr	r3, [sp, #20]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	dd05      	ble.n	8009ffa <_dtoa_r+0x82a>
 8009fee:	4631      	mov	r1, r6
 8009ff0:	461a      	mov	r2, r3
 8009ff2:	4620      	mov	r0, r4
 8009ff4:	f000 fc30 	bl	800a858 <__lshift>
 8009ff8:	4606      	mov	r6, r0
 8009ffa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d06e      	beq.n	800a0de <_dtoa_r+0x90e>
 800a000:	ee18 0a10 	vmov	r0, s16
 800a004:	4631      	mov	r1, r6
 800a006:	f000 fc97 	bl	800a938 <__mcmp>
 800a00a:	2800      	cmp	r0, #0
 800a00c:	da67      	bge.n	800a0de <_dtoa_r+0x90e>
 800a00e:	9b00      	ldr	r3, [sp, #0]
 800a010:	3b01      	subs	r3, #1
 800a012:	ee18 1a10 	vmov	r1, s16
 800a016:	9300      	str	r3, [sp, #0]
 800a018:	220a      	movs	r2, #10
 800a01a:	2300      	movs	r3, #0
 800a01c:	4620      	mov	r0, r4
 800a01e:	f000 fa6b 	bl	800a4f8 <__multadd>
 800a022:	9b08      	ldr	r3, [sp, #32]
 800a024:	ee08 0a10 	vmov	s16, r0
 800a028:	2b00      	cmp	r3, #0
 800a02a:	f000 81b1 	beq.w	800a390 <_dtoa_r+0xbc0>
 800a02e:	2300      	movs	r3, #0
 800a030:	4639      	mov	r1, r7
 800a032:	220a      	movs	r2, #10
 800a034:	4620      	mov	r0, r4
 800a036:	f000 fa5f 	bl	800a4f8 <__multadd>
 800a03a:	9b02      	ldr	r3, [sp, #8]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	4607      	mov	r7, r0
 800a040:	f300 808e 	bgt.w	800a160 <_dtoa_r+0x990>
 800a044:	9b06      	ldr	r3, [sp, #24]
 800a046:	2b02      	cmp	r3, #2
 800a048:	dc51      	bgt.n	800a0ee <_dtoa_r+0x91e>
 800a04a:	e089      	b.n	800a160 <_dtoa_r+0x990>
 800a04c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a04e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a052:	e74b      	b.n	8009eec <_dtoa_r+0x71c>
 800a054:	9b03      	ldr	r3, [sp, #12]
 800a056:	1e5e      	subs	r6, r3, #1
 800a058:	9b07      	ldr	r3, [sp, #28]
 800a05a:	42b3      	cmp	r3, r6
 800a05c:	bfbf      	itttt	lt
 800a05e:	9b07      	ldrlt	r3, [sp, #28]
 800a060:	9607      	strlt	r6, [sp, #28]
 800a062:	1af2      	sublt	r2, r6, r3
 800a064:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a066:	bfb6      	itet	lt
 800a068:	189b      	addlt	r3, r3, r2
 800a06a:	1b9e      	subge	r6, r3, r6
 800a06c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a06e:	9b03      	ldr	r3, [sp, #12]
 800a070:	bfb8      	it	lt
 800a072:	2600      	movlt	r6, #0
 800a074:	2b00      	cmp	r3, #0
 800a076:	bfb7      	itett	lt
 800a078:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a07c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a080:	1a9d      	sublt	r5, r3, r2
 800a082:	2300      	movlt	r3, #0
 800a084:	e734      	b.n	8009ef0 <_dtoa_r+0x720>
 800a086:	9e07      	ldr	r6, [sp, #28]
 800a088:	9d04      	ldr	r5, [sp, #16]
 800a08a:	9f08      	ldr	r7, [sp, #32]
 800a08c:	e73b      	b.n	8009f06 <_dtoa_r+0x736>
 800a08e:	9a07      	ldr	r2, [sp, #28]
 800a090:	e767      	b.n	8009f62 <_dtoa_r+0x792>
 800a092:	9b06      	ldr	r3, [sp, #24]
 800a094:	2b01      	cmp	r3, #1
 800a096:	dc18      	bgt.n	800a0ca <_dtoa_r+0x8fa>
 800a098:	f1ba 0f00 	cmp.w	sl, #0
 800a09c:	d115      	bne.n	800a0ca <_dtoa_r+0x8fa>
 800a09e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a0a2:	b993      	cbnz	r3, 800a0ca <_dtoa_r+0x8fa>
 800a0a4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a0a8:	0d1b      	lsrs	r3, r3, #20
 800a0aa:	051b      	lsls	r3, r3, #20
 800a0ac:	b183      	cbz	r3, 800a0d0 <_dtoa_r+0x900>
 800a0ae:	9b04      	ldr	r3, [sp, #16]
 800a0b0:	3301      	adds	r3, #1
 800a0b2:	9304      	str	r3, [sp, #16]
 800a0b4:	9b05      	ldr	r3, [sp, #20]
 800a0b6:	3301      	adds	r3, #1
 800a0b8:	9305      	str	r3, [sp, #20]
 800a0ba:	f04f 0801 	mov.w	r8, #1
 800a0be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	f47f af6a 	bne.w	8009f9a <_dtoa_r+0x7ca>
 800a0c6:	2001      	movs	r0, #1
 800a0c8:	e76f      	b.n	8009faa <_dtoa_r+0x7da>
 800a0ca:	f04f 0800 	mov.w	r8, #0
 800a0ce:	e7f6      	b.n	800a0be <_dtoa_r+0x8ee>
 800a0d0:	4698      	mov	r8, r3
 800a0d2:	e7f4      	b.n	800a0be <_dtoa_r+0x8ee>
 800a0d4:	f43f af7d 	beq.w	8009fd2 <_dtoa_r+0x802>
 800a0d8:	4618      	mov	r0, r3
 800a0da:	301c      	adds	r0, #28
 800a0dc:	e772      	b.n	8009fc4 <_dtoa_r+0x7f4>
 800a0de:	9b03      	ldr	r3, [sp, #12]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	dc37      	bgt.n	800a154 <_dtoa_r+0x984>
 800a0e4:	9b06      	ldr	r3, [sp, #24]
 800a0e6:	2b02      	cmp	r3, #2
 800a0e8:	dd34      	ble.n	800a154 <_dtoa_r+0x984>
 800a0ea:	9b03      	ldr	r3, [sp, #12]
 800a0ec:	9302      	str	r3, [sp, #8]
 800a0ee:	9b02      	ldr	r3, [sp, #8]
 800a0f0:	b96b      	cbnz	r3, 800a10e <_dtoa_r+0x93e>
 800a0f2:	4631      	mov	r1, r6
 800a0f4:	2205      	movs	r2, #5
 800a0f6:	4620      	mov	r0, r4
 800a0f8:	f000 f9fe 	bl	800a4f8 <__multadd>
 800a0fc:	4601      	mov	r1, r0
 800a0fe:	4606      	mov	r6, r0
 800a100:	ee18 0a10 	vmov	r0, s16
 800a104:	f000 fc18 	bl	800a938 <__mcmp>
 800a108:	2800      	cmp	r0, #0
 800a10a:	f73f adbb 	bgt.w	8009c84 <_dtoa_r+0x4b4>
 800a10e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a110:	9d01      	ldr	r5, [sp, #4]
 800a112:	43db      	mvns	r3, r3
 800a114:	9300      	str	r3, [sp, #0]
 800a116:	f04f 0800 	mov.w	r8, #0
 800a11a:	4631      	mov	r1, r6
 800a11c:	4620      	mov	r0, r4
 800a11e:	f000 f9c9 	bl	800a4b4 <_Bfree>
 800a122:	2f00      	cmp	r7, #0
 800a124:	f43f aea4 	beq.w	8009e70 <_dtoa_r+0x6a0>
 800a128:	f1b8 0f00 	cmp.w	r8, #0
 800a12c:	d005      	beq.n	800a13a <_dtoa_r+0x96a>
 800a12e:	45b8      	cmp	r8, r7
 800a130:	d003      	beq.n	800a13a <_dtoa_r+0x96a>
 800a132:	4641      	mov	r1, r8
 800a134:	4620      	mov	r0, r4
 800a136:	f000 f9bd 	bl	800a4b4 <_Bfree>
 800a13a:	4639      	mov	r1, r7
 800a13c:	4620      	mov	r0, r4
 800a13e:	f000 f9b9 	bl	800a4b4 <_Bfree>
 800a142:	e695      	b.n	8009e70 <_dtoa_r+0x6a0>
 800a144:	2600      	movs	r6, #0
 800a146:	4637      	mov	r7, r6
 800a148:	e7e1      	b.n	800a10e <_dtoa_r+0x93e>
 800a14a:	9700      	str	r7, [sp, #0]
 800a14c:	4637      	mov	r7, r6
 800a14e:	e599      	b.n	8009c84 <_dtoa_r+0x4b4>
 800a150:	40240000 	.word	0x40240000
 800a154:	9b08      	ldr	r3, [sp, #32]
 800a156:	2b00      	cmp	r3, #0
 800a158:	f000 80ca 	beq.w	800a2f0 <_dtoa_r+0xb20>
 800a15c:	9b03      	ldr	r3, [sp, #12]
 800a15e:	9302      	str	r3, [sp, #8]
 800a160:	2d00      	cmp	r5, #0
 800a162:	dd05      	ble.n	800a170 <_dtoa_r+0x9a0>
 800a164:	4639      	mov	r1, r7
 800a166:	462a      	mov	r2, r5
 800a168:	4620      	mov	r0, r4
 800a16a:	f000 fb75 	bl	800a858 <__lshift>
 800a16e:	4607      	mov	r7, r0
 800a170:	f1b8 0f00 	cmp.w	r8, #0
 800a174:	d05b      	beq.n	800a22e <_dtoa_r+0xa5e>
 800a176:	6879      	ldr	r1, [r7, #4]
 800a178:	4620      	mov	r0, r4
 800a17a:	f000 f95b 	bl	800a434 <_Balloc>
 800a17e:	4605      	mov	r5, r0
 800a180:	b928      	cbnz	r0, 800a18e <_dtoa_r+0x9be>
 800a182:	4b87      	ldr	r3, [pc, #540]	; (800a3a0 <_dtoa_r+0xbd0>)
 800a184:	4602      	mov	r2, r0
 800a186:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a18a:	f7ff bb3b 	b.w	8009804 <_dtoa_r+0x34>
 800a18e:	693a      	ldr	r2, [r7, #16]
 800a190:	3202      	adds	r2, #2
 800a192:	0092      	lsls	r2, r2, #2
 800a194:	f107 010c 	add.w	r1, r7, #12
 800a198:	300c      	adds	r0, #12
 800a19a:	f7fe fb1f 	bl	80087dc <memcpy>
 800a19e:	2201      	movs	r2, #1
 800a1a0:	4629      	mov	r1, r5
 800a1a2:	4620      	mov	r0, r4
 800a1a4:	f000 fb58 	bl	800a858 <__lshift>
 800a1a8:	9b01      	ldr	r3, [sp, #4]
 800a1aa:	f103 0901 	add.w	r9, r3, #1
 800a1ae:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a1b2:	4413      	add	r3, r2
 800a1b4:	9305      	str	r3, [sp, #20]
 800a1b6:	f00a 0301 	and.w	r3, sl, #1
 800a1ba:	46b8      	mov	r8, r7
 800a1bc:	9304      	str	r3, [sp, #16]
 800a1be:	4607      	mov	r7, r0
 800a1c0:	4631      	mov	r1, r6
 800a1c2:	ee18 0a10 	vmov	r0, s16
 800a1c6:	f7ff fa77 	bl	80096b8 <quorem>
 800a1ca:	4641      	mov	r1, r8
 800a1cc:	9002      	str	r0, [sp, #8]
 800a1ce:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a1d2:	ee18 0a10 	vmov	r0, s16
 800a1d6:	f000 fbaf 	bl	800a938 <__mcmp>
 800a1da:	463a      	mov	r2, r7
 800a1dc:	9003      	str	r0, [sp, #12]
 800a1de:	4631      	mov	r1, r6
 800a1e0:	4620      	mov	r0, r4
 800a1e2:	f000 fbc5 	bl	800a970 <__mdiff>
 800a1e6:	68c2      	ldr	r2, [r0, #12]
 800a1e8:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800a1ec:	4605      	mov	r5, r0
 800a1ee:	bb02      	cbnz	r2, 800a232 <_dtoa_r+0xa62>
 800a1f0:	4601      	mov	r1, r0
 800a1f2:	ee18 0a10 	vmov	r0, s16
 800a1f6:	f000 fb9f 	bl	800a938 <__mcmp>
 800a1fa:	4602      	mov	r2, r0
 800a1fc:	4629      	mov	r1, r5
 800a1fe:	4620      	mov	r0, r4
 800a200:	9207      	str	r2, [sp, #28]
 800a202:	f000 f957 	bl	800a4b4 <_Bfree>
 800a206:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a20a:	ea43 0102 	orr.w	r1, r3, r2
 800a20e:	9b04      	ldr	r3, [sp, #16]
 800a210:	430b      	orrs	r3, r1
 800a212:	464d      	mov	r5, r9
 800a214:	d10f      	bne.n	800a236 <_dtoa_r+0xa66>
 800a216:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a21a:	d02a      	beq.n	800a272 <_dtoa_r+0xaa2>
 800a21c:	9b03      	ldr	r3, [sp, #12]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	dd02      	ble.n	800a228 <_dtoa_r+0xa58>
 800a222:	9b02      	ldr	r3, [sp, #8]
 800a224:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a228:	f88b a000 	strb.w	sl, [fp]
 800a22c:	e775      	b.n	800a11a <_dtoa_r+0x94a>
 800a22e:	4638      	mov	r0, r7
 800a230:	e7ba      	b.n	800a1a8 <_dtoa_r+0x9d8>
 800a232:	2201      	movs	r2, #1
 800a234:	e7e2      	b.n	800a1fc <_dtoa_r+0xa2c>
 800a236:	9b03      	ldr	r3, [sp, #12]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	db04      	blt.n	800a246 <_dtoa_r+0xa76>
 800a23c:	9906      	ldr	r1, [sp, #24]
 800a23e:	430b      	orrs	r3, r1
 800a240:	9904      	ldr	r1, [sp, #16]
 800a242:	430b      	orrs	r3, r1
 800a244:	d122      	bne.n	800a28c <_dtoa_r+0xabc>
 800a246:	2a00      	cmp	r2, #0
 800a248:	ddee      	ble.n	800a228 <_dtoa_r+0xa58>
 800a24a:	ee18 1a10 	vmov	r1, s16
 800a24e:	2201      	movs	r2, #1
 800a250:	4620      	mov	r0, r4
 800a252:	f000 fb01 	bl	800a858 <__lshift>
 800a256:	4631      	mov	r1, r6
 800a258:	ee08 0a10 	vmov	s16, r0
 800a25c:	f000 fb6c 	bl	800a938 <__mcmp>
 800a260:	2800      	cmp	r0, #0
 800a262:	dc03      	bgt.n	800a26c <_dtoa_r+0xa9c>
 800a264:	d1e0      	bne.n	800a228 <_dtoa_r+0xa58>
 800a266:	f01a 0f01 	tst.w	sl, #1
 800a26a:	d0dd      	beq.n	800a228 <_dtoa_r+0xa58>
 800a26c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a270:	d1d7      	bne.n	800a222 <_dtoa_r+0xa52>
 800a272:	2339      	movs	r3, #57	; 0x39
 800a274:	f88b 3000 	strb.w	r3, [fp]
 800a278:	462b      	mov	r3, r5
 800a27a:	461d      	mov	r5, r3
 800a27c:	3b01      	subs	r3, #1
 800a27e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a282:	2a39      	cmp	r2, #57	; 0x39
 800a284:	d071      	beq.n	800a36a <_dtoa_r+0xb9a>
 800a286:	3201      	adds	r2, #1
 800a288:	701a      	strb	r2, [r3, #0]
 800a28a:	e746      	b.n	800a11a <_dtoa_r+0x94a>
 800a28c:	2a00      	cmp	r2, #0
 800a28e:	dd07      	ble.n	800a2a0 <_dtoa_r+0xad0>
 800a290:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a294:	d0ed      	beq.n	800a272 <_dtoa_r+0xaa2>
 800a296:	f10a 0301 	add.w	r3, sl, #1
 800a29a:	f88b 3000 	strb.w	r3, [fp]
 800a29e:	e73c      	b.n	800a11a <_dtoa_r+0x94a>
 800a2a0:	9b05      	ldr	r3, [sp, #20]
 800a2a2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a2a6:	4599      	cmp	r9, r3
 800a2a8:	d047      	beq.n	800a33a <_dtoa_r+0xb6a>
 800a2aa:	ee18 1a10 	vmov	r1, s16
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	220a      	movs	r2, #10
 800a2b2:	4620      	mov	r0, r4
 800a2b4:	f000 f920 	bl	800a4f8 <__multadd>
 800a2b8:	45b8      	cmp	r8, r7
 800a2ba:	ee08 0a10 	vmov	s16, r0
 800a2be:	f04f 0300 	mov.w	r3, #0
 800a2c2:	f04f 020a 	mov.w	r2, #10
 800a2c6:	4641      	mov	r1, r8
 800a2c8:	4620      	mov	r0, r4
 800a2ca:	d106      	bne.n	800a2da <_dtoa_r+0xb0a>
 800a2cc:	f000 f914 	bl	800a4f8 <__multadd>
 800a2d0:	4680      	mov	r8, r0
 800a2d2:	4607      	mov	r7, r0
 800a2d4:	f109 0901 	add.w	r9, r9, #1
 800a2d8:	e772      	b.n	800a1c0 <_dtoa_r+0x9f0>
 800a2da:	f000 f90d 	bl	800a4f8 <__multadd>
 800a2de:	4639      	mov	r1, r7
 800a2e0:	4680      	mov	r8, r0
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	220a      	movs	r2, #10
 800a2e6:	4620      	mov	r0, r4
 800a2e8:	f000 f906 	bl	800a4f8 <__multadd>
 800a2ec:	4607      	mov	r7, r0
 800a2ee:	e7f1      	b.n	800a2d4 <_dtoa_r+0xb04>
 800a2f0:	9b03      	ldr	r3, [sp, #12]
 800a2f2:	9302      	str	r3, [sp, #8]
 800a2f4:	9d01      	ldr	r5, [sp, #4]
 800a2f6:	ee18 0a10 	vmov	r0, s16
 800a2fa:	4631      	mov	r1, r6
 800a2fc:	f7ff f9dc 	bl	80096b8 <quorem>
 800a300:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a304:	9b01      	ldr	r3, [sp, #4]
 800a306:	f805 ab01 	strb.w	sl, [r5], #1
 800a30a:	1aea      	subs	r2, r5, r3
 800a30c:	9b02      	ldr	r3, [sp, #8]
 800a30e:	4293      	cmp	r3, r2
 800a310:	dd09      	ble.n	800a326 <_dtoa_r+0xb56>
 800a312:	ee18 1a10 	vmov	r1, s16
 800a316:	2300      	movs	r3, #0
 800a318:	220a      	movs	r2, #10
 800a31a:	4620      	mov	r0, r4
 800a31c:	f000 f8ec 	bl	800a4f8 <__multadd>
 800a320:	ee08 0a10 	vmov	s16, r0
 800a324:	e7e7      	b.n	800a2f6 <_dtoa_r+0xb26>
 800a326:	9b02      	ldr	r3, [sp, #8]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	bfc8      	it	gt
 800a32c:	461d      	movgt	r5, r3
 800a32e:	9b01      	ldr	r3, [sp, #4]
 800a330:	bfd8      	it	le
 800a332:	2501      	movle	r5, #1
 800a334:	441d      	add	r5, r3
 800a336:	f04f 0800 	mov.w	r8, #0
 800a33a:	ee18 1a10 	vmov	r1, s16
 800a33e:	2201      	movs	r2, #1
 800a340:	4620      	mov	r0, r4
 800a342:	f000 fa89 	bl	800a858 <__lshift>
 800a346:	4631      	mov	r1, r6
 800a348:	ee08 0a10 	vmov	s16, r0
 800a34c:	f000 faf4 	bl	800a938 <__mcmp>
 800a350:	2800      	cmp	r0, #0
 800a352:	dc91      	bgt.n	800a278 <_dtoa_r+0xaa8>
 800a354:	d102      	bne.n	800a35c <_dtoa_r+0xb8c>
 800a356:	f01a 0f01 	tst.w	sl, #1
 800a35a:	d18d      	bne.n	800a278 <_dtoa_r+0xaa8>
 800a35c:	462b      	mov	r3, r5
 800a35e:	461d      	mov	r5, r3
 800a360:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a364:	2a30      	cmp	r2, #48	; 0x30
 800a366:	d0fa      	beq.n	800a35e <_dtoa_r+0xb8e>
 800a368:	e6d7      	b.n	800a11a <_dtoa_r+0x94a>
 800a36a:	9a01      	ldr	r2, [sp, #4]
 800a36c:	429a      	cmp	r2, r3
 800a36e:	d184      	bne.n	800a27a <_dtoa_r+0xaaa>
 800a370:	9b00      	ldr	r3, [sp, #0]
 800a372:	3301      	adds	r3, #1
 800a374:	9300      	str	r3, [sp, #0]
 800a376:	2331      	movs	r3, #49	; 0x31
 800a378:	7013      	strb	r3, [r2, #0]
 800a37a:	e6ce      	b.n	800a11a <_dtoa_r+0x94a>
 800a37c:	4b09      	ldr	r3, [pc, #36]	; (800a3a4 <_dtoa_r+0xbd4>)
 800a37e:	f7ff ba95 	b.w	80098ac <_dtoa_r+0xdc>
 800a382:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a384:	2b00      	cmp	r3, #0
 800a386:	f47f aa6e 	bne.w	8009866 <_dtoa_r+0x96>
 800a38a:	4b07      	ldr	r3, [pc, #28]	; (800a3a8 <_dtoa_r+0xbd8>)
 800a38c:	f7ff ba8e 	b.w	80098ac <_dtoa_r+0xdc>
 800a390:	9b02      	ldr	r3, [sp, #8]
 800a392:	2b00      	cmp	r3, #0
 800a394:	dcae      	bgt.n	800a2f4 <_dtoa_r+0xb24>
 800a396:	9b06      	ldr	r3, [sp, #24]
 800a398:	2b02      	cmp	r3, #2
 800a39a:	f73f aea8 	bgt.w	800a0ee <_dtoa_r+0x91e>
 800a39e:	e7a9      	b.n	800a2f4 <_dtoa_r+0xb24>
 800a3a0:	0801119b 	.word	0x0801119b
 800a3a4:	080110f8 	.word	0x080110f8
 800a3a8:	0801111c 	.word	0x0801111c

0800a3ac <_fstat_r>:
 800a3ac:	b538      	push	{r3, r4, r5, lr}
 800a3ae:	4d07      	ldr	r5, [pc, #28]	; (800a3cc <_fstat_r+0x20>)
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	4604      	mov	r4, r0
 800a3b4:	4608      	mov	r0, r1
 800a3b6:	4611      	mov	r1, r2
 800a3b8:	602b      	str	r3, [r5, #0]
 800a3ba:	f7f7 ff04 	bl	80021c6 <_fstat>
 800a3be:	1c43      	adds	r3, r0, #1
 800a3c0:	d102      	bne.n	800a3c8 <_fstat_r+0x1c>
 800a3c2:	682b      	ldr	r3, [r5, #0]
 800a3c4:	b103      	cbz	r3, 800a3c8 <_fstat_r+0x1c>
 800a3c6:	6023      	str	r3, [r4, #0]
 800a3c8:	bd38      	pop	{r3, r4, r5, pc}
 800a3ca:	bf00      	nop
 800a3cc:	20000438 	.word	0x20000438

0800a3d0 <_isatty_r>:
 800a3d0:	b538      	push	{r3, r4, r5, lr}
 800a3d2:	4d06      	ldr	r5, [pc, #24]	; (800a3ec <_isatty_r+0x1c>)
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	4604      	mov	r4, r0
 800a3d8:	4608      	mov	r0, r1
 800a3da:	602b      	str	r3, [r5, #0]
 800a3dc:	f7f7 ff03 	bl	80021e6 <_isatty>
 800a3e0:	1c43      	adds	r3, r0, #1
 800a3e2:	d102      	bne.n	800a3ea <_isatty_r+0x1a>
 800a3e4:	682b      	ldr	r3, [r5, #0]
 800a3e6:	b103      	cbz	r3, 800a3ea <_isatty_r+0x1a>
 800a3e8:	6023      	str	r3, [r4, #0]
 800a3ea:	bd38      	pop	{r3, r4, r5, pc}
 800a3ec:	20000438 	.word	0x20000438

0800a3f0 <_localeconv_r>:
 800a3f0:	4800      	ldr	r0, [pc, #0]	; (800a3f4 <_localeconv_r+0x4>)
 800a3f2:	4770      	bx	lr
 800a3f4:	20000168 	.word	0x20000168

0800a3f8 <_lseek_r>:
 800a3f8:	b538      	push	{r3, r4, r5, lr}
 800a3fa:	4d07      	ldr	r5, [pc, #28]	; (800a418 <_lseek_r+0x20>)
 800a3fc:	4604      	mov	r4, r0
 800a3fe:	4608      	mov	r0, r1
 800a400:	4611      	mov	r1, r2
 800a402:	2200      	movs	r2, #0
 800a404:	602a      	str	r2, [r5, #0]
 800a406:	461a      	mov	r2, r3
 800a408:	f7f7 fef8 	bl	80021fc <_lseek>
 800a40c:	1c43      	adds	r3, r0, #1
 800a40e:	d102      	bne.n	800a416 <_lseek_r+0x1e>
 800a410:	682b      	ldr	r3, [r5, #0]
 800a412:	b103      	cbz	r3, 800a416 <_lseek_r+0x1e>
 800a414:	6023      	str	r3, [r4, #0]
 800a416:	bd38      	pop	{r3, r4, r5, pc}
 800a418:	20000438 	.word	0x20000438

0800a41c <__malloc_lock>:
 800a41c:	4801      	ldr	r0, [pc, #4]	; (800a424 <__malloc_lock+0x8>)
 800a41e:	f7fe b966 	b.w	80086ee <__retarget_lock_acquire_recursive>
 800a422:	bf00      	nop
 800a424:	2000042c 	.word	0x2000042c

0800a428 <__malloc_unlock>:
 800a428:	4801      	ldr	r0, [pc, #4]	; (800a430 <__malloc_unlock+0x8>)
 800a42a:	f7fe b961 	b.w	80086f0 <__retarget_lock_release_recursive>
 800a42e:	bf00      	nop
 800a430:	2000042c 	.word	0x2000042c

0800a434 <_Balloc>:
 800a434:	b570      	push	{r4, r5, r6, lr}
 800a436:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a438:	4604      	mov	r4, r0
 800a43a:	460d      	mov	r5, r1
 800a43c:	b976      	cbnz	r6, 800a45c <_Balloc+0x28>
 800a43e:	2010      	movs	r0, #16
 800a440:	f7fe f9bc 	bl	80087bc <malloc>
 800a444:	4602      	mov	r2, r0
 800a446:	6260      	str	r0, [r4, #36]	; 0x24
 800a448:	b920      	cbnz	r0, 800a454 <_Balloc+0x20>
 800a44a:	4b18      	ldr	r3, [pc, #96]	; (800a4ac <_Balloc+0x78>)
 800a44c:	4818      	ldr	r0, [pc, #96]	; (800a4b0 <_Balloc+0x7c>)
 800a44e:	2166      	movs	r1, #102	; 0x66
 800a450:	f001 fb40 	bl	800bad4 <__assert_func>
 800a454:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a458:	6006      	str	r6, [r0, #0]
 800a45a:	60c6      	str	r6, [r0, #12]
 800a45c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a45e:	68f3      	ldr	r3, [r6, #12]
 800a460:	b183      	cbz	r3, 800a484 <_Balloc+0x50>
 800a462:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a464:	68db      	ldr	r3, [r3, #12]
 800a466:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a46a:	b9b8      	cbnz	r0, 800a49c <_Balloc+0x68>
 800a46c:	2101      	movs	r1, #1
 800a46e:	fa01 f605 	lsl.w	r6, r1, r5
 800a472:	1d72      	adds	r2, r6, #5
 800a474:	0092      	lsls	r2, r2, #2
 800a476:	4620      	mov	r0, r4
 800a478:	f000 fb60 	bl	800ab3c <_calloc_r>
 800a47c:	b160      	cbz	r0, 800a498 <_Balloc+0x64>
 800a47e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a482:	e00e      	b.n	800a4a2 <_Balloc+0x6e>
 800a484:	2221      	movs	r2, #33	; 0x21
 800a486:	2104      	movs	r1, #4
 800a488:	4620      	mov	r0, r4
 800a48a:	f000 fb57 	bl	800ab3c <_calloc_r>
 800a48e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a490:	60f0      	str	r0, [r6, #12]
 800a492:	68db      	ldr	r3, [r3, #12]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d1e4      	bne.n	800a462 <_Balloc+0x2e>
 800a498:	2000      	movs	r0, #0
 800a49a:	bd70      	pop	{r4, r5, r6, pc}
 800a49c:	6802      	ldr	r2, [r0, #0]
 800a49e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a4a8:	e7f7      	b.n	800a49a <_Balloc+0x66>
 800a4aa:	bf00      	nop
 800a4ac:	08011129 	.word	0x08011129
 800a4b0:	080111ac 	.word	0x080111ac

0800a4b4 <_Bfree>:
 800a4b4:	b570      	push	{r4, r5, r6, lr}
 800a4b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a4b8:	4605      	mov	r5, r0
 800a4ba:	460c      	mov	r4, r1
 800a4bc:	b976      	cbnz	r6, 800a4dc <_Bfree+0x28>
 800a4be:	2010      	movs	r0, #16
 800a4c0:	f7fe f97c 	bl	80087bc <malloc>
 800a4c4:	4602      	mov	r2, r0
 800a4c6:	6268      	str	r0, [r5, #36]	; 0x24
 800a4c8:	b920      	cbnz	r0, 800a4d4 <_Bfree+0x20>
 800a4ca:	4b09      	ldr	r3, [pc, #36]	; (800a4f0 <_Bfree+0x3c>)
 800a4cc:	4809      	ldr	r0, [pc, #36]	; (800a4f4 <_Bfree+0x40>)
 800a4ce:	218a      	movs	r1, #138	; 0x8a
 800a4d0:	f001 fb00 	bl	800bad4 <__assert_func>
 800a4d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a4d8:	6006      	str	r6, [r0, #0]
 800a4da:	60c6      	str	r6, [r0, #12]
 800a4dc:	b13c      	cbz	r4, 800a4ee <_Bfree+0x3a>
 800a4de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a4e0:	6862      	ldr	r2, [r4, #4]
 800a4e2:	68db      	ldr	r3, [r3, #12]
 800a4e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a4e8:	6021      	str	r1, [r4, #0]
 800a4ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a4ee:	bd70      	pop	{r4, r5, r6, pc}
 800a4f0:	08011129 	.word	0x08011129
 800a4f4:	080111ac 	.word	0x080111ac

0800a4f8 <__multadd>:
 800a4f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4fc:	690d      	ldr	r5, [r1, #16]
 800a4fe:	4607      	mov	r7, r0
 800a500:	460c      	mov	r4, r1
 800a502:	461e      	mov	r6, r3
 800a504:	f101 0c14 	add.w	ip, r1, #20
 800a508:	2000      	movs	r0, #0
 800a50a:	f8dc 3000 	ldr.w	r3, [ip]
 800a50e:	b299      	uxth	r1, r3
 800a510:	fb02 6101 	mla	r1, r2, r1, r6
 800a514:	0c1e      	lsrs	r6, r3, #16
 800a516:	0c0b      	lsrs	r3, r1, #16
 800a518:	fb02 3306 	mla	r3, r2, r6, r3
 800a51c:	b289      	uxth	r1, r1
 800a51e:	3001      	adds	r0, #1
 800a520:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a524:	4285      	cmp	r5, r0
 800a526:	f84c 1b04 	str.w	r1, [ip], #4
 800a52a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a52e:	dcec      	bgt.n	800a50a <__multadd+0x12>
 800a530:	b30e      	cbz	r6, 800a576 <__multadd+0x7e>
 800a532:	68a3      	ldr	r3, [r4, #8]
 800a534:	42ab      	cmp	r3, r5
 800a536:	dc19      	bgt.n	800a56c <__multadd+0x74>
 800a538:	6861      	ldr	r1, [r4, #4]
 800a53a:	4638      	mov	r0, r7
 800a53c:	3101      	adds	r1, #1
 800a53e:	f7ff ff79 	bl	800a434 <_Balloc>
 800a542:	4680      	mov	r8, r0
 800a544:	b928      	cbnz	r0, 800a552 <__multadd+0x5a>
 800a546:	4602      	mov	r2, r0
 800a548:	4b0c      	ldr	r3, [pc, #48]	; (800a57c <__multadd+0x84>)
 800a54a:	480d      	ldr	r0, [pc, #52]	; (800a580 <__multadd+0x88>)
 800a54c:	21b5      	movs	r1, #181	; 0xb5
 800a54e:	f001 fac1 	bl	800bad4 <__assert_func>
 800a552:	6922      	ldr	r2, [r4, #16]
 800a554:	3202      	adds	r2, #2
 800a556:	f104 010c 	add.w	r1, r4, #12
 800a55a:	0092      	lsls	r2, r2, #2
 800a55c:	300c      	adds	r0, #12
 800a55e:	f7fe f93d 	bl	80087dc <memcpy>
 800a562:	4621      	mov	r1, r4
 800a564:	4638      	mov	r0, r7
 800a566:	f7ff ffa5 	bl	800a4b4 <_Bfree>
 800a56a:	4644      	mov	r4, r8
 800a56c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a570:	3501      	adds	r5, #1
 800a572:	615e      	str	r6, [r3, #20]
 800a574:	6125      	str	r5, [r4, #16]
 800a576:	4620      	mov	r0, r4
 800a578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a57c:	0801119b 	.word	0x0801119b
 800a580:	080111ac 	.word	0x080111ac

0800a584 <__hi0bits>:
 800a584:	0c03      	lsrs	r3, r0, #16
 800a586:	041b      	lsls	r3, r3, #16
 800a588:	b9d3      	cbnz	r3, 800a5c0 <__hi0bits+0x3c>
 800a58a:	0400      	lsls	r0, r0, #16
 800a58c:	2310      	movs	r3, #16
 800a58e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a592:	bf04      	itt	eq
 800a594:	0200      	lsleq	r0, r0, #8
 800a596:	3308      	addeq	r3, #8
 800a598:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a59c:	bf04      	itt	eq
 800a59e:	0100      	lsleq	r0, r0, #4
 800a5a0:	3304      	addeq	r3, #4
 800a5a2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a5a6:	bf04      	itt	eq
 800a5a8:	0080      	lsleq	r0, r0, #2
 800a5aa:	3302      	addeq	r3, #2
 800a5ac:	2800      	cmp	r0, #0
 800a5ae:	db05      	blt.n	800a5bc <__hi0bits+0x38>
 800a5b0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a5b4:	f103 0301 	add.w	r3, r3, #1
 800a5b8:	bf08      	it	eq
 800a5ba:	2320      	moveq	r3, #32
 800a5bc:	4618      	mov	r0, r3
 800a5be:	4770      	bx	lr
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	e7e4      	b.n	800a58e <__hi0bits+0xa>

0800a5c4 <__lo0bits>:
 800a5c4:	6803      	ldr	r3, [r0, #0]
 800a5c6:	f013 0207 	ands.w	r2, r3, #7
 800a5ca:	4601      	mov	r1, r0
 800a5cc:	d00b      	beq.n	800a5e6 <__lo0bits+0x22>
 800a5ce:	07da      	lsls	r2, r3, #31
 800a5d0:	d423      	bmi.n	800a61a <__lo0bits+0x56>
 800a5d2:	0798      	lsls	r0, r3, #30
 800a5d4:	bf49      	itett	mi
 800a5d6:	085b      	lsrmi	r3, r3, #1
 800a5d8:	089b      	lsrpl	r3, r3, #2
 800a5da:	2001      	movmi	r0, #1
 800a5dc:	600b      	strmi	r3, [r1, #0]
 800a5de:	bf5c      	itt	pl
 800a5e0:	600b      	strpl	r3, [r1, #0]
 800a5e2:	2002      	movpl	r0, #2
 800a5e4:	4770      	bx	lr
 800a5e6:	b298      	uxth	r0, r3
 800a5e8:	b9a8      	cbnz	r0, 800a616 <__lo0bits+0x52>
 800a5ea:	0c1b      	lsrs	r3, r3, #16
 800a5ec:	2010      	movs	r0, #16
 800a5ee:	b2da      	uxtb	r2, r3
 800a5f0:	b90a      	cbnz	r2, 800a5f6 <__lo0bits+0x32>
 800a5f2:	3008      	adds	r0, #8
 800a5f4:	0a1b      	lsrs	r3, r3, #8
 800a5f6:	071a      	lsls	r2, r3, #28
 800a5f8:	bf04      	itt	eq
 800a5fa:	091b      	lsreq	r3, r3, #4
 800a5fc:	3004      	addeq	r0, #4
 800a5fe:	079a      	lsls	r2, r3, #30
 800a600:	bf04      	itt	eq
 800a602:	089b      	lsreq	r3, r3, #2
 800a604:	3002      	addeq	r0, #2
 800a606:	07da      	lsls	r2, r3, #31
 800a608:	d403      	bmi.n	800a612 <__lo0bits+0x4e>
 800a60a:	085b      	lsrs	r3, r3, #1
 800a60c:	f100 0001 	add.w	r0, r0, #1
 800a610:	d005      	beq.n	800a61e <__lo0bits+0x5a>
 800a612:	600b      	str	r3, [r1, #0]
 800a614:	4770      	bx	lr
 800a616:	4610      	mov	r0, r2
 800a618:	e7e9      	b.n	800a5ee <__lo0bits+0x2a>
 800a61a:	2000      	movs	r0, #0
 800a61c:	4770      	bx	lr
 800a61e:	2020      	movs	r0, #32
 800a620:	4770      	bx	lr
	...

0800a624 <__i2b>:
 800a624:	b510      	push	{r4, lr}
 800a626:	460c      	mov	r4, r1
 800a628:	2101      	movs	r1, #1
 800a62a:	f7ff ff03 	bl	800a434 <_Balloc>
 800a62e:	4602      	mov	r2, r0
 800a630:	b928      	cbnz	r0, 800a63e <__i2b+0x1a>
 800a632:	4b05      	ldr	r3, [pc, #20]	; (800a648 <__i2b+0x24>)
 800a634:	4805      	ldr	r0, [pc, #20]	; (800a64c <__i2b+0x28>)
 800a636:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a63a:	f001 fa4b 	bl	800bad4 <__assert_func>
 800a63e:	2301      	movs	r3, #1
 800a640:	6144      	str	r4, [r0, #20]
 800a642:	6103      	str	r3, [r0, #16]
 800a644:	bd10      	pop	{r4, pc}
 800a646:	bf00      	nop
 800a648:	0801119b 	.word	0x0801119b
 800a64c:	080111ac 	.word	0x080111ac

0800a650 <__multiply>:
 800a650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a654:	4691      	mov	r9, r2
 800a656:	690a      	ldr	r2, [r1, #16]
 800a658:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a65c:	429a      	cmp	r2, r3
 800a65e:	bfb8      	it	lt
 800a660:	460b      	movlt	r3, r1
 800a662:	460c      	mov	r4, r1
 800a664:	bfbc      	itt	lt
 800a666:	464c      	movlt	r4, r9
 800a668:	4699      	movlt	r9, r3
 800a66a:	6927      	ldr	r7, [r4, #16]
 800a66c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a670:	68a3      	ldr	r3, [r4, #8]
 800a672:	6861      	ldr	r1, [r4, #4]
 800a674:	eb07 060a 	add.w	r6, r7, sl
 800a678:	42b3      	cmp	r3, r6
 800a67a:	b085      	sub	sp, #20
 800a67c:	bfb8      	it	lt
 800a67e:	3101      	addlt	r1, #1
 800a680:	f7ff fed8 	bl	800a434 <_Balloc>
 800a684:	b930      	cbnz	r0, 800a694 <__multiply+0x44>
 800a686:	4602      	mov	r2, r0
 800a688:	4b44      	ldr	r3, [pc, #272]	; (800a79c <__multiply+0x14c>)
 800a68a:	4845      	ldr	r0, [pc, #276]	; (800a7a0 <__multiply+0x150>)
 800a68c:	f240 115d 	movw	r1, #349	; 0x15d
 800a690:	f001 fa20 	bl	800bad4 <__assert_func>
 800a694:	f100 0514 	add.w	r5, r0, #20
 800a698:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a69c:	462b      	mov	r3, r5
 800a69e:	2200      	movs	r2, #0
 800a6a0:	4543      	cmp	r3, r8
 800a6a2:	d321      	bcc.n	800a6e8 <__multiply+0x98>
 800a6a4:	f104 0314 	add.w	r3, r4, #20
 800a6a8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a6ac:	f109 0314 	add.w	r3, r9, #20
 800a6b0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a6b4:	9202      	str	r2, [sp, #8]
 800a6b6:	1b3a      	subs	r2, r7, r4
 800a6b8:	3a15      	subs	r2, #21
 800a6ba:	f022 0203 	bic.w	r2, r2, #3
 800a6be:	3204      	adds	r2, #4
 800a6c0:	f104 0115 	add.w	r1, r4, #21
 800a6c4:	428f      	cmp	r7, r1
 800a6c6:	bf38      	it	cc
 800a6c8:	2204      	movcc	r2, #4
 800a6ca:	9201      	str	r2, [sp, #4]
 800a6cc:	9a02      	ldr	r2, [sp, #8]
 800a6ce:	9303      	str	r3, [sp, #12]
 800a6d0:	429a      	cmp	r2, r3
 800a6d2:	d80c      	bhi.n	800a6ee <__multiply+0x9e>
 800a6d4:	2e00      	cmp	r6, #0
 800a6d6:	dd03      	ble.n	800a6e0 <__multiply+0x90>
 800a6d8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d05a      	beq.n	800a796 <__multiply+0x146>
 800a6e0:	6106      	str	r6, [r0, #16]
 800a6e2:	b005      	add	sp, #20
 800a6e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6e8:	f843 2b04 	str.w	r2, [r3], #4
 800a6ec:	e7d8      	b.n	800a6a0 <__multiply+0x50>
 800a6ee:	f8b3 a000 	ldrh.w	sl, [r3]
 800a6f2:	f1ba 0f00 	cmp.w	sl, #0
 800a6f6:	d024      	beq.n	800a742 <__multiply+0xf2>
 800a6f8:	f104 0e14 	add.w	lr, r4, #20
 800a6fc:	46a9      	mov	r9, r5
 800a6fe:	f04f 0c00 	mov.w	ip, #0
 800a702:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a706:	f8d9 1000 	ldr.w	r1, [r9]
 800a70a:	fa1f fb82 	uxth.w	fp, r2
 800a70e:	b289      	uxth	r1, r1
 800a710:	fb0a 110b 	mla	r1, sl, fp, r1
 800a714:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a718:	f8d9 2000 	ldr.w	r2, [r9]
 800a71c:	4461      	add	r1, ip
 800a71e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a722:	fb0a c20b 	mla	r2, sl, fp, ip
 800a726:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a72a:	b289      	uxth	r1, r1
 800a72c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a730:	4577      	cmp	r7, lr
 800a732:	f849 1b04 	str.w	r1, [r9], #4
 800a736:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a73a:	d8e2      	bhi.n	800a702 <__multiply+0xb2>
 800a73c:	9a01      	ldr	r2, [sp, #4]
 800a73e:	f845 c002 	str.w	ip, [r5, r2]
 800a742:	9a03      	ldr	r2, [sp, #12]
 800a744:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a748:	3304      	adds	r3, #4
 800a74a:	f1b9 0f00 	cmp.w	r9, #0
 800a74e:	d020      	beq.n	800a792 <__multiply+0x142>
 800a750:	6829      	ldr	r1, [r5, #0]
 800a752:	f104 0c14 	add.w	ip, r4, #20
 800a756:	46ae      	mov	lr, r5
 800a758:	f04f 0a00 	mov.w	sl, #0
 800a75c:	f8bc b000 	ldrh.w	fp, [ip]
 800a760:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a764:	fb09 220b 	mla	r2, r9, fp, r2
 800a768:	4492      	add	sl, r2
 800a76a:	b289      	uxth	r1, r1
 800a76c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a770:	f84e 1b04 	str.w	r1, [lr], #4
 800a774:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a778:	f8be 1000 	ldrh.w	r1, [lr]
 800a77c:	0c12      	lsrs	r2, r2, #16
 800a77e:	fb09 1102 	mla	r1, r9, r2, r1
 800a782:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a786:	4567      	cmp	r7, ip
 800a788:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a78c:	d8e6      	bhi.n	800a75c <__multiply+0x10c>
 800a78e:	9a01      	ldr	r2, [sp, #4]
 800a790:	50a9      	str	r1, [r5, r2]
 800a792:	3504      	adds	r5, #4
 800a794:	e79a      	b.n	800a6cc <__multiply+0x7c>
 800a796:	3e01      	subs	r6, #1
 800a798:	e79c      	b.n	800a6d4 <__multiply+0x84>
 800a79a:	bf00      	nop
 800a79c:	0801119b 	.word	0x0801119b
 800a7a0:	080111ac 	.word	0x080111ac

0800a7a4 <__pow5mult>:
 800a7a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7a8:	4615      	mov	r5, r2
 800a7aa:	f012 0203 	ands.w	r2, r2, #3
 800a7ae:	4606      	mov	r6, r0
 800a7b0:	460f      	mov	r7, r1
 800a7b2:	d007      	beq.n	800a7c4 <__pow5mult+0x20>
 800a7b4:	4c25      	ldr	r4, [pc, #148]	; (800a84c <__pow5mult+0xa8>)
 800a7b6:	3a01      	subs	r2, #1
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a7be:	f7ff fe9b 	bl	800a4f8 <__multadd>
 800a7c2:	4607      	mov	r7, r0
 800a7c4:	10ad      	asrs	r5, r5, #2
 800a7c6:	d03d      	beq.n	800a844 <__pow5mult+0xa0>
 800a7c8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a7ca:	b97c      	cbnz	r4, 800a7ec <__pow5mult+0x48>
 800a7cc:	2010      	movs	r0, #16
 800a7ce:	f7fd fff5 	bl	80087bc <malloc>
 800a7d2:	4602      	mov	r2, r0
 800a7d4:	6270      	str	r0, [r6, #36]	; 0x24
 800a7d6:	b928      	cbnz	r0, 800a7e4 <__pow5mult+0x40>
 800a7d8:	4b1d      	ldr	r3, [pc, #116]	; (800a850 <__pow5mult+0xac>)
 800a7da:	481e      	ldr	r0, [pc, #120]	; (800a854 <__pow5mult+0xb0>)
 800a7dc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a7e0:	f001 f978 	bl	800bad4 <__assert_func>
 800a7e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a7e8:	6004      	str	r4, [r0, #0]
 800a7ea:	60c4      	str	r4, [r0, #12]
 800a7ec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a7f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a7f4:	b94c      	cbnz	r4, 800a80a <__pow5mult+0x66>
 800a7f6:	f240 2171 	movw	r1, #625	; 0x271
 800a7fa:	4630      	mov	r0, r6
 800a7fc:	f7ff ff12 	bl	800a624 <__i2b>
 800a800:	2300      	movs	r3, #0
 800a802:	f8c8 0008 	str.w	r0, [r8, #8]
 800a806:	4604      	mov	r4, r0
 800a808:	6003      	str	r3, [r0, #0]
 800a80a:	f04f 0900 	mov.w	r9, #0
 800a80e:	07eb      	lsls	r3, r5, #31
 800a810:	d50a      	bpl.n	800a828 <__pow5mult+0x84>
 800a812:	4639      	mov	r1, r7
 800a814:	4622      	mov	r2, r4
 800a816:	4630      	mov	r0, r6
 800a818:	f7ff ff1a 	bl	800a650 <__multiply>
 800a81c:	4639      	mov	r1, r7
 800a81e:	4680      	mov	r8, r0
 800a820:	4630      	mov	r0, r6
 800a822:	f7ff fe47 	bl	800a4b4 <_Bfree>
 800a826:	4647      	mov	r7, r8
 800a828:	106d      	asrs	r5, r5, #1
 800a82a:	d00b      	beq.n	800a844 <__pow5mult+0xa0>
 800a82c:	6820      	ldr	r0, [r4, #0]
 800a82e:	b938      	cbnz	r0, 800a840 <__pow5mult+0x9c>
 800a830:	4622      	mov	r2, r4
 800a832:	4621      	mov	r1, r4
 800a834:	4630      	mov	r0, r6
 800a836:	f7ff ff0b 	bl	800a650 <__multiply>
 800a83a:	6020      	str	r0, [r4, #0]
 800a83c:	f8c0 9000 	str.w	r9, [r0]
 800a840:	4604      	mov	r4, r0
 800a842:	e7e4      	b.n	800a80e <__pow5mult+0x6a>
 800a844:	4638      	mov	r0, r7
 800a846:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a84a:	bf00      	nop
 800a84c:	080112f8 	.word	0x080112f8
 800a850:	08011129 	.word	0x08011129
 800a854:	080111ac 	.word	0x080111ac

0800a858 <__lshift>:
 800a858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a85c:	460c      	mov	r4, r1
 800a85e:	6849      	ldr	r1, [r1, #4]
 800a860:	6923      	ldr	r3, [r4, #16]
 800a862:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a866:	68a3      	ldr	r3, [r4, #8]
 800a868:	4607      	mov	r7, r0
 800a86a:	4691      	mov	r9, r2
 800a86c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a870:	f108 0601 	add.w	r6, r8, #1
 800a874:	42b3      	cmp	r3, r6
 800a876:	db0b      	blt.n	800a890 <__lshift+0x38>
 800a878:	4638      	mov	r0, r7
 800a87a:	f7ff fddb 	bl	800a434 <_Balloc>
 800a87e:	4605      	mov	r5, r0
 800a880:	b948      	cbnz	r0, 800a896 <__lshift+0x3e>
 800a882:	4602      	mov	r2, r0
 800a884:	4b2a      	ldr	r3, [pc, #168]	; (800a930 <__lshift+0xd8>)
 800a886:	482b      	ldr	r0, [pc, #172]	; (800a934 <__lshift+0xdc>)
 800a888:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a88c:	f001 f922 	bl	800bad4 <__assert_func>
 800a890:	3101      	adds	r1, #1
 800a892:	005b      	lsls	r3, r3, #1
 800a894:	e7ee      	b.n	800a874 <__lshift+0x1c>
 800a896:	2300      	movs	r3, #0
 800a898:	f100 0114 	add.w	r1, r0, #20
 800a89c:	f100 0210 	add.w	r2, r0, #16
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	4553      	cmp	r3, sl
 800a8a4:	db37      	blt.n	800a916 <__lshift+0xbe>
 800a8a6:	6920      	ldr	r0, [r4, #16]
 800a8a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a8ac:	f104 0314 	add.w	r3, r4, #20
 800a8b0:	f019 091f 	ands.w	r9, r9, #31
 800a8b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a8b8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a8bc:	d02f      	beq.n	800a91e <__lshift+0xc6>
 800a8be:	f1c9 0e20 	rsb	lr, r9, #32
 800a8c2:	468a      	mov	sl, r1
 800a8c4:	f04f 0c00 	mov.w	ip, #0
 800a8c8:	681a      	ldr	r2, [r3, #0]
 800a8ca:	fa02 f209 	lsl.w	r2, r2, r9
 800a8ce:	ea42 020c 	orr.w	r2, r2, ip
 800a8d2:	f84a 2b04 	str.w	r2, [sl], #4
 800a8d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8da:	4298      	cmp	r0, r3
 800a8dc:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a8e0:	d8f2      	bhi.n	800a8c8 <__lshift+0x70>
 800a8e2:	1b03      	subs	r3, r0, r4
 800a8e4:	3b15      	subs	r3, #21
 800a8e6:	f023 0303 	bic.w	r3, r3, #3
 800a8ea:	3304      	adds	r3, #4
 800a8ec:	f104 0215 	add.w	r2, r4, #21
 800a8f0:	4290      	cmp	r0, r2
 800a8f2:	bf38      	it	cc
 800a8f4:	2304      	movcc	r3, #4
 800a8f6:	f841 c003 	str.w	ip, [r1, r3]
 800a8fa:	f1bc 0f00 	cmp.w	ip, #0
 800a8fe:	d001      	beq.n	800a904 <__lshift+0xac>
 800a900:	f108 0602 	add.w	r6, r8, #2
 800a904:	3e01      	subs	r6, #1
 800a906:	4638      	mov	r0, r7
 800a908:	612e      	str	r6, [r5, #16]
 800a90a:	4621      	mov	r1, r4
 800a90c:	f7ff fdd2 	bl	800a4b4 <_Bfree>
 800a910:	4628      	mov	r0, r5
 800a912:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a916:	f842 0f04 	str.w	r0, [r2, #4]!
 800a91a:	3301      	adds	r3, #1
 800a91c:	e7c1      	b.n	800a8a2 <__lshift+0x4a>
 800a91e:	3904      	subs	r1, #4
 800a920:	f853 2b04 	ldr.w	r2, [r3], #4
 800a924:	f841 2f04 	str.w	r2, [r1, #4]!
 800a928:	4298      	cmp	r0, r3
 800a92a:	d8f9      	bhi.n	800a920 <__lshift+0xc8>
 800a92c:	e7ea      	b.n	800a904 <__lshift+0xac>
 800a92e:	bf00      	nop
 800a930:	0801119b 	.word	0x0801119b
 800a934:	080111ac 	.word	0x080111ac

0800a938 <__mcmp>:
 800a938:	b530      	push	{r4, r5, lr}
 800a93a:	6902      	ldr	r2, [r0, #16]
 800a93c:	690c      	ldr	r4, [r1, #16]
 800a93e:	1b12      	subs	r2, r2, r4
 800a940:	d10e      	bne.n	800a960 <__mcmp+0x28>
 800a942:	f100 0314 	add.w	r3, r0, #20
 800a946:	3114      	adds	r1, #20
 800a948:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a94c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a950:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a954:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a958:	42a5      	cmp	r5, r4
 800a95a:	d003      	beq.n	800a964 <__mcmp+0x2c>
 800a95c:	d305      	bcc.n	800a96a <__mcmp+0x32>
 800a95e:	2201      	movs	r2, #1
 800a960:	4610      	mov	r0, r2
 800a962:	bd30      	pop	{r4, r5, pc}
 800a964:	4283      	cmp	r3, r0
 800a966:	d3f3      	bcc.n	800a950 <__mcmp+0x18>
 800a968:	e7fa      	b.n	800a960 <__mcmp+0x28>
 800a96a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a96e:	e7f7      	b.n	800a960 <__mcmp+0x28>

0800a970 <__mdiff>:
 800a970:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a974:	460c      	mov	r4, r1
 800a976:	4606      	mov	r6, r0
 800a978:	4611      	mov	r1, r2
 800a97a:	4620      	mov	r0, r4
 800a97c:	4690      	mov	r8, r2
 800a97e:	f7ff ffdb 	bl	800a938 <__mcmp>
 800a982:	1e05      	subs	r5, r0, #0
 800a984:	d110      	bne.n	800a9a8 <__mdiff+0x38>
 800a986:	4629      	mov	r1, r5
 800a988:	4630      	mov	r0, r6
 800a98a:	f7ff fd53 	bl	800a434 <_Balloc>
 800a98e:	b930      	cbnz	r0, 800a99e <__mdiff+0x2e>
 800a990:	4b3a      	ldr	r3, [pc, #232]	; (800aa7c <__mdiff+0x10c>)
 800a992:	4602      	mov	r2, r0
 800a994:	f240 2132 	movw	r1, #562	; 0x232
 800a998:	4839      	ldr	r0, [pc, #228]	; (800aa80 <__mdiff+0x110>)
 800a99a:	f001 f89b 	bl	800bad4 <__assert_func>
 800a99e:	2301      	movs	r3, #1
 800a9a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a9a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9a8:	bfa4      	itt	ge
 800a9aa:	4643      	movge	r3, r8
 800a9ac:	46a0      	movge	r8, r4
 800a9ae:	4630      	mov	r0, r6
 800a9b0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a9b4:	bfa6      	itte	ge
 800a9b6:	461c      	movge	r4, r3
 800a9b8:	2500      	movge	r5, #0
 800a9ba:	2501      	movlt	r5, #1
 800a9bc:	f7ff fd3a 	bl	800a434 <_Balloc>
 800a9c0:	b920      	cbnz	r0, 800a9cc <__mdiff+0x5c>
 800a9c2:	4b2e      	ldr	r3, [pc, #184]	; (800aa7c <__mdiff+0x10c>)
 800a9c4:	4602      	mov	r2, r0
 800a9c6:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a9ca:	e7e5      	b.n	800a998 <__mdiff+0x28>
 800a9cc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a9d0:	6926      	ldr	r6, [r4, #16]
 800a9d2:	60c5      	str	r5, [r0, #12]
 800a9d4:	f104 0914 	add.w	r9, r4, #20
 800a9d8:	f108 0514 	add.w	r5, r8, #20
 800a9dc:	f100 0e14 	add.w	lr, r0, #20
 800a9e0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a9e4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a9e8:	f108 0210 	add.w	r2, r8, #16
 800a9ec:	46f2      	mov	sl, lr
 800a9ee:	2100      	movs	r1, #0
 800a9f0:	f859 3b04 	ldr.w	r3, [r9], #4
 800a9f4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a9f8:	fa1f f883 	uxth.w	r8, r3
 800a9fc:	fa11 f18b 	uxtah	r1, r1, fp
 800aa00:	0c1b      	lsrs	r3, r3, #16
 800aa02:	eba1 0808 	sub.w	r8, r1, r8
 800aa06:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800aa0a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800aa0e:	fa1f f888 	uxth.w	r8, r8
 800aa12:	1419      	asrs	r1, r3, #16
 800aa14:	454e      	cmp	r6, r9
 800aa16:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800aa1a:	f84a 3b04 	str.w	r3, [sl], #4
 800aa1e:	d8e7      	bhi.n	800a9f0 <__mdiff+0x80>
 800aa20:	1b33      	subs	r3, r6, r4
 800aa22:	3b15      	subs	r3, #21
 800aa24:	f023 0303 	bic.w	r3, r3, #3
 800aa28:	3304      	adds	r3, #4
 800aa2a:	3415      	adds	r4, #21
 800aa2c:	42a6      	cmp	r6, r4
 800aa2e:	bf38      	it	cc
 800aa30:	2304      	movcc	r3, #4
 800aa32:	441d      	add	r5, r3
 800aa34:	4473      	add	r3, lr
 800aa36:	469e      	mov	lr, r3
 800aa38:	462e      	mov	r6, r5
 800aa3a:	4566      	cmp	r6, ip
 800aa3c:	d30e      	bcc.n	800aa5c <__mdiff+0xec>
 800aa3e:	f10c 0203 	add.w	r2, ip, #3
 800aa42:	1b52      	subs	r2, r2, r5
 800aa44:	f022 0203 	bic.w	r2, r2, #3
 800aa48:	3d03      	subs	r5, #3
 800aa4a:	45ac      	cmp	ip, r5
 800aa4c:	bf38      	it	cc
 800aa4e:	2200      	movcc	r2, #0
 800aa50:	441a      	add	r2, r3
 800aa52:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800aa56:	b17b      	cbz	r3, 800aa78 <__mdiff+0x108>
 800aa58:	6107      	str	r7, [r0, #16]
 800aa5a:	e7a3      	b.n	800a9a4 <__mdiff+0x34>
 800aa5c:	f856 8b04 	ldr.w	r8, [r6], #4
 800aa60:	fa11 f288 	uxtah	r2, r1, r8
 800aa64:	1414      	asrs	r4, r2, #16
 800aa66:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800aa6a:	b292      	uxth	r2, r2
 800aa6c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800aa70:	f84e 2b04 	str.w	r2, [lr], #4
 800aa74:	1421      	asrs	r1, r4, #16
 800aa76:	e7e0      	b.n	800aa3a <__mdiff+0xca>
 800aa78:	3f01      	subs	r7, #1
 800aa7a:	e7ea      	b.n	800aa52 <__mdiff+0xe2>
 800aa7c:	0801119b 	.word	0x0801119b
 800aa80:	080111ac 	.word	0x080111ac

0800aa84 <__d2b>:
 800aa84:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aa88:	4689      	mov	r9, r1
 800aa8a:	2101      	movs	r1, #1
 800aa8c:	ec57 6b10 	vmov	r6, r7, d0
 800aa90:	4690      	mov	r8, r2
 800aa92:	f7ff fccf 	bl	800a434 <_Balloc>
 800aa96:	4604      	mov	r4, r0
 800aa98:	b930      	cbnz	r0, 800aaa8 <__d2b+0x24>
 800aa9a:	4602      	mov	r2, r0
 800aa9c:	4b25      	ldr	r3, [pc, #148]	; (800ab34 <__d2b+0xb0>)
 800aa9e:	4826      	ldr	r0, [pc, #152]	; (800ab38 <__d2b+0xb4>)
 800aaa0:	f240 310a 	movw	r1, #778	; 0x30a
 800aaa4:	f001 f816 	bl	800bad4 <__assert_func>
 800aaa8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800aaac:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800aab0:	bb35      	cbnz	r5, 800ab00 <__d2b+0x7c>
 800aab2:	2e00      	cmp	r6, #0
 800aab4:	9301      	str	r3, [sp, #4]
 800aab6:	d028      	beq.n	800ab0a <__d2b+0x86>
 800aab8:	4668      	mov	r0, sp
 800aaba:	9600      	str	r6, [sp, #0]
 800aabc:	f7ff fd82 	bl	800a5c4 <__lo0bits>
 800aac0:	9900      	ldr	r1, [sp, #0]
 800aac2:	b300      	cbz	r0, 800ab06 <__d2b+0x82>
 800aac4:	9a01      	ldr	r2, [sp, #4]
 800aac6:	f1c0 0320 	rsb	r3, r0, #32
 800aaca:	fa02 f303 	lsl.w	r3, r2, r3
 800aace:	430b      	orrs	r3, r1
 800aad0:	40c2      	lsrs	r2, r0
 800aad2:	6163      	str	r3, [r4, #20]
 800aad4:	9201      	str	r2, [sp, #4]
 800aad6:	9b01      	ldr	r3, [sp, #4]
 800aad8:	61a3      	str	r3, [r4, #24]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	bf14      	ite	ne
 800aade:	2202      	movne	r2, #2
 800aae0:	2201      	moveq	r2, #1
 800aae2:	6122      	str	r2, [r4, #16]
 800aae4:	b1d5      	cbz	r5, 800ab1c <__d2b+0x98>
 800aae6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800aaea:	4405      	add	r5, r0
 800aaec:	f8c9 5000 	str.w	r5, [r9]
 800aaf0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800aaf4:	f8c8 0000 	str.w	r0, [r8]
 800aaf8:	4620      	mov	r0, r4
 800aafa:	b003      	add	sp, #12
 800aafc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ab00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ab04:	e7d5      	b.n	800aab2 <__d2b+0x2e>
 800ab06:	6161      	str	r1, [r4, #20]
 800ab08:	e7e5      	b.n	800aad6 <__d2b+0x52>
 800ab0a:	a801      	add	r0, sp, #4
 800ab0c:	f7ff fd5a 	bl	800a5c4 <__lo0bits>
 800ab10:	9b01      	ldr	r3, [sp, #4]
 800ab12:	6163      	str	r3, [r4, #20]
 800ab14:	2201      	movs	r2, #1
 800ab16:	6122      	str	r2, [r4, #16]
 800ab18:	3020      	adds	r0, #32
 800ab1a:	e7e3      	b.n	800aae4 <__d2b+0x60>
 800ab1c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ab20:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ab24:	f8c9 0000 	str.w	r0, [r9]
 800ab28:	6918      	ldr	r0, [r3, #16]
 800ab2a:	f7ff fd2b 	bl	800a584 <__hi0bits>
 800ab2e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ab32:	e7df      	b.n	800aaf4 <__d2b+0x70>
 800ab34:	0801119b 	.word	0x0801119b
 800ab38:	080111ac 	.word	0x080111ac

0800ab3c <_calloc_r>:
 800ab3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ab3e:	fba1 2402 	umull	r2, r4, r1, r2
 800ab42:	b94c      	cbnz	r4, 800ab58 <_calloc_r+0x1c>
 800ab44:	4611      	mov	r1, r2
 800ab46:	9201      	str	r2, [sp, #4]
 800ab48:	f7fd feca 	bl	80088e0 <_malloc_r>
 800ab4c:	9a01      	ldr	r2, [sp, #4]
 800ab4e:	4605      	mov	r5, r0
 800ab50:	b930      	cbnz	r0, 800ab60 <_calloc_r+0x24>
 800ab52:	4628      	mov	r0, r5
 800ab54:	b003      	add	sp, #12
 800ab56:	bd30      	pop	{r4, r5, pc}
 800ab58:	220c      	movs	r2, #12
 800ab5a:	6002      	str	r2, [r0, #0]
 800ab5c:	2500      	movs	r5, #0
 800ab5e:	e7f8      	b.n	800ab52 <_calloc_r+0x16>
 800ab60:	4621      	mov	r1, r4
 800ab62:	f7fd fe49 	bl	80087f8 <memset>
 800ab66:	e7f4      	b.n	800ab52 <_calloc_r+0x16>

0800ab68 <__sfputc_r>:
 800ab68:	6893      	ldr	r3, [r2, #8]
 800ab6a:	3b01      	subs	r3, #1
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	b410      	push	{r4}
 800ab70:	6093      	str	r3, [r2, #8]
 800ab72:	da08      	bge.n	800ab86 <__sfputc_r+0x1e>
 800ab74:	6994      	ldr	r4, [r2, #24]
 800ab76:	42a3      	cmp	r3, r4
 800ab78:	db01      	blt.n	800ab7e <__sfputc_r+0x16>
 800ab7a:	290a      	cmp	r1, #10
 800ab7c:	d103      	bne.n	800ab86 <__sfputc_r+0x1e>
 800ab7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab82:	f7fe bcb7 	b.w	80094f4 <__swbuf_r>
 800ab86:	6813      	ldr	r3, [r2, #0]
 800ab88:	1c58      	adds	r0, r3, #1
 800ab8a:	6010      	str	r0, [r2, #0]
 800ab8c:	7019      	strb	r1, [r3, #0]
 800ab8e:	4608      	mov	r0, r1
 800ab90:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab94:	4770      	bx	lr

0800ab96 <__sfputs_r>:
 800ab96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab98:	4606      	mov	r6, r0
 800ab9a:	460f      	mov	r7, r1
 800ab9c:	4614      	mov	r4, r2
 800ab9e:	18d5      	adds	r5, r2, r3
 800aba0:	42ac      	cmp	r4, r5
 800aba2:	d101      	bne.n	800aba8 <__sfputs_r+0x12>
 800aba4:	2000      	movs	r0, #0
 800aba6:	e007      	b.n	800abb8 <__sfputs_r+0x22>
 800aba8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abac:	463a      	mov	r2, r7
 800abae:	4630      	mov	r0, r6
 800abb0:	f7ff ffda 	bl	800ab68 <__sfputc_r>
 800abb4:	1c43      	adds	r3, r0, #1
 800abb6:	d1f3      	bne.n	800aba0 <__sfputs_r+0xa>
 800abb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800abbc <_vfiprintf_r>:
 800abbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abc0:	460d      	mov	r5, r1
 800abc2:	b09d      	sub	sp, #116	; 0x74
 800abc4:	4614      	mov	r4, r2
 800abc6:	4698      	mov	r8, r3
 800abc8:	4606      	mov	r6, r0
 800abca:	b118      	cbz	r0, 800abd4 <_vfiprintf_r+0x18>
 800abcc:	6983      	ldr	r3, [r0, #24]
 800abce:	b90b      	cbnz	r3, 800abd4 <_vfiprintf_r+0x18>
 800abd0:	f7fd fcca 	bl	8008568 <__sinit>
 800abd4:	4b89      	ldr	r3, [pc, #548]	; (800adfc <_vfiprintf_r+0x240>)
 800abd6:	429d      	cmp	r5, r3
 800abd8:	d11b      	bne.n	800ac12 <_vfiprintf_r+0x56>
 800abda:	6875      	ldr	r5, [r6, #4]
 800abdc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800abde:	07d9      	lsls	r1, r3, #31
 800abe0:	d405      	bmi.n	800abee <_vfiprintf_r+0x32>
 800abe2:	89ab      	ldrh	r3, [r5, #12]
 800abe4:	059a      	lsls	r2, r3, #22
 800abe6:	d402      	bmi.n	800abee <_vfiprintf_r+0x32>
 800abe8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800abea:	f7fd fd80 	bl	80086ee <__retarget_lock_acquire_recursive>
 800abee:	89ab      	ldrh	r3, [r5, #12]
 800abf0:	071b      	lsls	r3, r3, #28
 800abf2:	d501      	bpl.n	800abf8 <_vfiprintf_r+0x3c>
 800abf4:	692b      	ldr	r3, [r5, #16]
 800abf6:	b9eb      	cbnz	r3, 800ac34 <_vfiprintf_r+0x78>
 800abf8:	4629      	mov	r1, r5
 800abfa:	4630      	mov	r0, r6
 800abfc:	f7fe fcde 	bl	80095bc <__swsetup_r>
 800ac00:	b1c0      	cbz	r0, 800ac34 <_vfiprintf_r+0x78>
 800ac02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ac04:	07dc      	lsls	r4, r3, #31
 800ac06:	d50e      	bpl.n	800ac26 <_vfiprintf_r+0x6a>
 800ac08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ac0c:	b01d      	add	sp, #116	; 0x74
 800ac0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac12:	4b7b      	ldr	r3, [pc, #492]	; (800ae00 <_vfiprintf_r+0x244>)
 800ac14:	429d      	cmp	r5, r3
 800ac16:	d101      	bne.n	800ac1c <_vfiprintf_r+0x60>
 800ac18:	68b5      	ldr	r5, [r6, #8]
 800ac1a:	e7df      	b.n	800abdc <_vfiprintf_r+0x20>
 800ac1c:	4b79      	ldr	r3, [pc, #484]	; (800ae04 <_vfiprintf_r+0x248>)
 800ac1e:	429d      	cmp	r5, r3
 800ac20:	bf08      	it	eq
 800ac22:	68f5      	ldreq	r5, [r6, #12]
 800ac24:	e7da      	b.n	800abdc <_vfiprintf_r+0x20>
 800ac26:	89ab      	ldrh	r3, [r5, #12]
 800ac28:	0598      	lsls	r0, r3, #22
 800ac2a:	d4ed      	bmi.n	800ac08 <_vfiprintf_r+0x4c>
 800ac2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ac2e:	f7fd fd5f 	bl	80086f0 <__retarget_lock_release_recursive>
 800ac32:	e7e9      	b.n	800ac08 <_vfiprintf_r+0x4c>
 800ac34:	2300      	movs	r3, #0
 800ac36:	9309      	str	r3, [sp, #36]	; 0x24
 800ac38:	2320      	movs	r3, #32
 800ac3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ac3e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ac42:	2330      	movs	r3, #48	; 0x30
 800ac44:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ae08 <_vfiprintf_r+0x24c>
 800ac48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ac4c:	f04f 0901 	mov.w	r9, #1
 800ac50:	4623      	mov	r3, r4
 800ac52:	469a      	mov	sl, r3
 800ac54:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac58:	b10a      	cbz	r2, 800ac5e <_vfiprintf_r+0xa2>
 800ac5a:	2a25      	cmp	r2, #37	; 0x25
 800ac5c:	d1f9      	bne.n	800ac52 <_vfiprintf_r+0x96>
 800ac5e:	ebba 0b04 	subs.w	fp, sl, r4
 800ac62:	d00b      	beq.n	800ac7c <_vfiprintf_r+0xc0>
 800ac64:	465b      	mov	r3, fp
 800ac66:	4622      	mov	r2, r4
 800ac68:	4629      	mov	r1, r5
 800ac6a:	4630      	mov	r0, r6
 800ac6c:	f7ff ff93 	bl	800ab96 <__sfputs_r>
 800ac70:	3001      	adds	r0, #1
 800ac72:	f000 80aa 	beq.w	800adca <_vfiprintf_r+0x20e>
 800ac76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac78:	445a      	add	r2, fp
 800ac7a:	9209      	str	r2, [sp, #36]	; 0x24
 800ac7c:	f89a 3000 	ldrb.w	r3, [sl]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	f000 80a2 	beq.w	800adca <_vfiprintf_r+0x20e>
 800ac86:	2300      	movs	r3, #0
 800ac88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ac8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ac90:	f10a 0a01 	add.w	sl, sl, #1
 800ac94:	9304      	str	r3, [sp, #16]
 800ac96:	9307      	str	r3, [sp, #28]
 800ac98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ac9c:	931a      	str	r3, [sp, #104]	; 0x68
 800ac9e:	4654      	mov	r4, sl
 800aca0:	2205      	movs	r2, #5
 800aca2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aca6:	4858      	ldr	r0, [pc, #352]	; (800ae08 <_vfiprintf_r+0x24c>)
 800aca8:	f7f5 fa9a 	bl	80001e0 <memchr>
 800acac:	9a04      	ldr	r2, [sp, #16]
 800acae:	b9d8      	cbnz	r0, 800ace8 <_vfiprintf_r+0x12c>
 800acb0:	06d1      	lsls	r1, r2, #27
 800acb2:	bf44      	itt	mi
 800acb4:	2320      	movmi	r3, #32
 800acb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800acba:	0713      	lsls	r3, r2, #28
 800acbc:	bf44      	itt	mi
 800acbe:	232b      	movmi	r3, #43	; 0x2b
 800acc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800acc4:	f89a 3000 	ldrb.w	r3, [sl]
 800acc8:	2b2a      	cmp	r3, #42	; 0x2a
 800acca:	d015      	beq.n	800acf8 <_vfiprintf_r+0x13c>
 800accc:	9a07      	ldr	r2, [sp, #28]
 800acce:	4654      	mov	r4, sl
 800acd0:	2000      	movs	r0, #0
 800acd2:	f04f 0c0a 	mov.w	ip, #10
 800acd6:	4621      	mov	r1, r4
 800acd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800acdc:	3b30      	subs	r3, #48	; 0x30
 800acde:	2b09      	cmp	r3, #9
 800ace0:	d94e      	bls.n	800ad80 <_vfiprintf_r+0x1c4>
 800ace2:	b1b0      	cbz	r0, 800ad12 <_vfiprintf_r+0x156>
 800ace4:	9207      	str	r2, [sp, #28]
 800ace6:	e014      	b.n	800ad12 <_vfiprintf_r+0x156>
 800ace8:	eba0 0308 	sub.w	r3, r0, r8
 800acec:	fa09 f303 	lsl.w	r3, r9, r3
 800acf0:	4313      	orrs	r3, r2
 800acf2:	9304      	str	r3, [sp, #16]
 800acf4:	46a2      	mov	sl, r4
 800acf6:	e7d2      	b.n	800ac9e <_vfiprintf_r+0xe2>
 800acf8:	9b03      	ldr	r3, [sp, #12]
 800acfa:	1d19      	adds	r1, r3, #4
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	9103      	str	r1, [sp, #12]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	bfbb      	ittet	lt
 800ad04:	425b      	neglt	r3, r3
 800ad06:	f042 0202 	orrlt.w	r2, r2, #2
 800ad0a:	9307      	strge	r3, [sp, #28]
 800ad0c:	9307      	strlt	r3, [sp, #28]
 800ad0e:	bfb8      	it	lt
 800ad10:	9204      	strlt	r2, [sp, #16]
 800ad12:	7823      	ldrb	r3, [r4, #0]
 800ad14:	2b2e      	cmp	r3, #46	; 0x2e
 800ad16:	d10c      	bne.n	800ad32 <_vfiprintf_r+0x176>
 800ad18:	7863      	ldrb	r3, [r4, #1]
 800ad1a:	2b2a      	cmp	r3, #42	; 0x2a
 800ad1c:	d135      	bne.n	800ad8a <_vfiprintf_r+0x1ce>
 800ad1e:	9b03      	ldr	r3, [sp, #12]
 800ad20:	1d1a      	adds	r2, r3, #4
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	9203      	str	r2, [sp, #12]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	bfb8      	it	lt
 800ad2a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ad2e:	3402      	adds	r4, #2
 800ad30:	9305      	str	r3, [sp, #20]
 800ad32:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ae18 <_vfiprintf_r+0x25c>
 800ad36:	7821      	ldrb	r1, [r4, #0]
 800ad38:	2203      	movs	r2, #3
 800ad3a:	4650      	mov	r0, sl
 800ad3c:	f7f5 fa50 	bl	80001e0 <memchr>
 800ad40:	b140      	cbz	r0, 800ad54 <_vfiprintf_r+0x198>
 800ad42:	2340      	movs	r3, #64	; 0x40
 800ad44:	eba0 000a 	sub.w	r0, r0, sl
 800ad48:	fa03 f000 	lsl.w	r0, r3, r0
 800ad4c:	9b04      	ldr	r3, [sp, #16]
 800ad4e:	4303      	orrs	r3, r0
 800ad50:	3401      	adds	r4, #1
 800ad52:	9304      	str	r3, [sp, #16]
 800ad54:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad58:	482c      	ldr	r0, [pc, #176]	; (800ae0c <_vfiprintf_r+0x250>)
 800ad5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ad5e:	2206      	movs	r2, #6
 800ad60:	f7f5 fa3e 	bl	80001e0 <memchr>
 800ad64:	2800      	cmp	r0, #0
 800ad66:	d03f      	beq.n	800ade8 <_vfiprintf_r+0x22c>
 800ad68:	4b29      	ldr	r3, [pc, #164]	; (800ae10 <_vfiprintf_r+0x254>)
 800ad6a:	bb1b      	cbnz	r3, 800adb4 <_vfiprintf_r+0x1f8>
 800ad6c:	9b03      	ldr	r3, [sp, #12]
 800ad6e:	3307      	adds	r3, #7
 800ad70:	f023 0307 	bic.w	r3, r3, #7
 800ad74:	3308      	adds	r3, #8
 800ad76:	9303      	str	r3, [sp, #12]
 800ad78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad7a:	443b      	add	r3, r7
 800ad7c:	9309      	str	r3, [sp, #36]	; 0x24
 800ad7e:	e767      	b.n	800ac50 <_vfiprintf_r+0x94>
 800ad80:	fb0c 3202 	mla	r2, ip, r2, r3
 800ad84:	460c      	mov	r4, r1
 800ad86:	2001      	movs	r0, #1
 800ad88:	e7a5      	b.n	800acd6 <_vfiprintf_r+0x11a>
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	3401      	adds	r4, #1
 800ad8e:	9305      	str	r3, [sp, #20]
 800ad90:	4619      	mov	r1, r3
 800ad92:	f04f 0c0a 	mov.w	ip, #10
 800ad96:	4620      	mov	r0, r4
 800ad98:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad9c:	3a30      	subs	r2, #48	; 0x30
 800ad9e:	2a09      	cmp	r2, #9
 800ada0:	d903      	bls.n	800adaa <_vfiprintf_r+0x1ee>
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d0c5      	beq.n	800ad32 <_vfiprintf_r+0x176>
 800ada6:	9105      	str	r1, [sp, #20]
 800ada8:	e7c3      	b.n	800ad32 <_vfiprintf_r+0x176>
 800adaa:	fb0c 2101 	mla	r1, ip, r1, r2
 800adae:	4604      	mov	r4, r0
 800adb0:	2301      	movs	r3, #1
 800adb2:	e7f0      	b.n	800ad96 <_vfiprintf_r+0x1da>
 800adb4:	ab03      	add	r3, sp, #12
 800adb6:	9300      	str	r3, [sp, #0]
 800adb8:	462a      	mov	r2, r5
 800adba:	4b16      	ldr	r3, [pc, #88]	; (800ae14 <_vfiprintf_r+0x258>)
 800adbc:	a904      	add	r1, sp, #16
 800adbe:	4630      	mov	r0, r6
 800adc0:	f7fd fea2 	bl	8008b08 <_printf_float>
 800adc4:	4607      	mov	r7, r0
 800adc6:	1c78      	adds	r0, r7, #1
 800adc8:	d1d6      	bne.n	800ad78 <_vfiprintf_r+0x1bc>
 800adca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800adcc:	07d9      	lsls	r1, r3, #31
 800adce:	d405      	bmi.n	800addc <_vfiprintf_r+0x220>
 800add0:	89ab      	ldrh	r3, [r5, #12]
 800add2:	059a      	lsls	r2, r3, #22
 800add4:	d402      	bmi.n	800addc <_vfiprintf_r+0x220>
 800add6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800add8:	f7fd fc8a 	bl	80086f0 <__retarget_lock_release_recursive>
 800addc:	89ab      	ldrh	r3, [r5, #12]
 800adde:	065b      	lsls	r3, r3, #25
 800ade0:	f53f af12 	bmi.w	800ac08 <_vfiprintf_r+0x4c>
 800ade4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ade6:	e711      	b.n	800ac0c <_vfiprintf_r+0x50>
 800ade8:	ab03      	add	r3, sp, #12
 800adea:	9300      	str	r3, [sp, #0]
 800adec:	462a      	mov	r2, r5
 800adee:	4b09      	ldr	r3, [pc, #36]	; (800ae14 <_vfiprintf_r+0x258>)
 800adf0:	a904      	add	r1, sp, #16
 800adf2:	4630      	mov	r0, r6
 800adf4:	f7fe f92c 	bl	8009050 <_printf_i>
 800adf8:	e7e4      	b.n	800adc4 <_vfiprintf_r+0x208>
 800adfa:	bf00      	nop
 800adfc:	080110a4 	.word	0x080110a4
 800ae00:	080110c4 	.word	0x080110c4
 800ae04:	08011084 	.word	0x08011084
 800ae08:	08011304 	.word	0x08011304
 800ae0c:	0801130e 	.word	0x0801130e
 800ae10:	08008b09 	.word	0x08008b09
 800ae14:	0800ab97 	.word	0x0800ab97
 800ae18:	0801130a 	.word	0x0801130a

0800ae1c <_putc_r>:
 800ae1c:	b570      	push	{r4, r5, r6, lr}
 800ae1e:	460d      	mov	r5, r1
 800ae20:	4614      	mov	r4, r2
 800ae22:	4606      	mov	r6, r0
 800ae24:	b118      	cbz	r0, 800ae2e <_putc_r+0x12>
 800ae26:	6983      	ldr	r3, [r0, #24]
 800ae28:	b90b      	cbnz	r3, 800ae2e <_putc_r+0x12>
 800ae2a:	f7fd fb9d 	bl	8008568 <__sinit>
 800ae2e:	4b1c      	ldr	r3, [pc, #112]	; (800aea0 <_putc_r+0x84>)
 800ae30:	429c      	cmp	r4, r3
 800ae32:	d124      	bne.n	800ae7e <_putc_r+0x62>
 800ae34:	6874      	ldr	r4, [r6, #4]
 800ae36:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ae38:	07d8      	lsls	r0, r3, #31
 800ae3a:	d405      	bmi.n	800ae48 <_putc_r+0x2c>
 800ae3c:	89a3      	ldrh	r3, [r4, #12]
 800ae3e:	0599      	lsls	r1, r3, #22
 800ae40:	d402      	bmi.n	800ae48 <_putc_r+0x2c>
 800ae42:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae44:	f7fd fc53 	bl	80086ee <__retarget_lock_acquire_recursive>
 800ae48:	68a3      	ldr	r3, [r4, #8]
 800ae4a:	3b01      	subs	r3, #1
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	60a3      	str	r3, [r4, #8]
 800ae50:	da05      	bge.n	800ae5e <_putc_r+0x42>
 800ae52:	69a2      	ldr	r2, [r4, #24]
 800ae54:	4293      	cmp	r3, r2
 800ae56:	db1c      	blt.n	800ae92 <_putc_r+0x76>
 800ae58:	b2eb      	uxtb	r3, r5
 800ae5a:	2b0a      	cmp	r3, #10
 800ae5c:	d019      	beq.n	800ae92 <_putc_r+0x76>
 800ae5e:	6823      	ldr	r3, [r4, #0]
 800ae60:	1c5a      	adds	r2, r3, #1
 800ae62:	6022      	str	r2, [r4, #0]
 800ae64:	701d      	strb	r5, [r3, #0]
 800ae66:	b2ed      	uxtb	r5, r5
 800ae68:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ae6a:	07da      	lsls	r2, r3, #31
 800ae6c:	d405      	bmi.n	800ae7a <_putc_r+0x5e>
 800ae6e:	89a3      	ldrh	r3, [r4, #12]
 800ae70:	059b      	lsls	r3, r3, #22
 800ae72:	d402      	bmi.n	800ae7a <_putc_r+0x5e>
 800ae74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae76:	f7fd fc3b 	bl	80086f0 <__retarget_lock_release_recursive>
 800ae7a:	4628      	mov	r0, r5
 800ae7c:	bd70      	pop	{r4, r5, r6, pc}
 800ae7e:	4b09      	ldr	r3, [pc, #36]	; (800aea4 <_putc_r+0x88>)
 800ae80:	429c      	cmp	r4, r3
 800ae82:	d101      	bne.n	800ae88 <_putc_r+0x6c>
 800ae84:	68b4      	ldr	r4, [r6, #8]
 800ae86:	e7d6      	b.n	800ae36 <_putc_r+0x1a>
 800ae88:	4b07      	ldr	r3, [pc, #28]	; (800aea8 <_putc_r+0x8c>)
 800ae8a:	429c      	cmp	r4, r3
 800ae8c:	bf08      	it	eq
 800ae8e:	68f4      	ldreq	r4, [r6, #12]
 800ae90:	e7d1      	b.n	800ae36 <_putc_r+0x1a>
 800ae92:	4629      	mov	r1, r5
 800ae94:	4622      	mov	r2, r4
 800ae96:	4630      	mov	r0, r6
 800ae98:	f7fe fb2c 	bl	80094f4 <__swbuf_r>
 800ae9c:	4605      	mov	r5, r0
 800ae9e:	e7e3      	b.n	800ae68 <_putc_r+0x4c>
 800aea0:	080110a4 	.word	0x080110a4
 800aea4:	080110c4 	.word	0x080110c4
 800aea8:	08011084 	.word	0x08011084

0800aeac <_read_r>:
 800aeac:	b538      	push	{r3, r4, r5, lr}
 800aeae:	4d07      	ldr	r5, [pc, #28]	; (800aecc <_read_r+0x20>)
 800aeb0:	4604      	mov	r4, r0
 800aeb2:	4608      	mov	r0, r1
 800aeb4:	4611      	mov	r1, r2
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	602a      	str	r2, [r5, #0]
 800aeba:	461a      	mov	r2, r3
 800aebc:	f7f7 f93e 	bl	800213c <_read>
 800aec0:	1c43      	adds	r3, r0, #1
 800aec2:	d102      	bne.n	800aeca <_read_r+0x1e>
 800aec4:	682b      	ldr	r3, [r5, #0]
 800aec6:	b103      	cbz	r3, 800aeca <_read_r+0x1e>
 800aec8:	6023      	str	r3, [r4, #0]
 800aeca:	bd38      	pop	{r3, r4, r5, pc}
 800aecc:	20000438 	.word	0x20000438

0800aed0 <wcvt>:
 800aed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aed4:	b085      	sub	sp, #20
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	461d      	mov	r5, r3
 800aeda:	4614      	mov	r4, r2
 800aedc:	bfbc      	itt	lt
 800aede:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800aee2:	4614      	movlt	r4, r2
 800aee4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800aee6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800aee8:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 800aeec:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
 800aef0:	bfb6      	itet	lt
 800aef2:	461d      	movlt	r5, r3
 800aef4:	2300      	movge	r3, #0
 800aef6:	232d      	movlt	r3, #45	; 0x2d
 800aef8:	6013      	str	r3, [r2, #0]
 800aefa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800aefc:	f023 0820 	bic.w	r8, r3, #32
 800af00:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800af04:	d005      	beq.n	800af12 <wcvt+0x42>
 800af06:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800af0a:	d100      	bne.n	800af0e <wcvt+0x3e>
 800af0c:	3601      	adds	r6, #1
 800af0e:	2102      	movs	r1, #2
 800af10:	e000      	b.n	800af14 <wcvt+0x44>
 800af12:	2103      	movs	r1, #3
 800af14:	ab03      	add	r3, sp, #12
 800af16:	9301      	str	r3, [sp, #4]
 800af18:	ab02      	add	r3, sp, #8
 800af1a:	9300      	str	r3, [sp, #0]
 800af1c:	ec45 4b10 	vmov	d0, r4, r5
 800af20:	4653      	mov	r3, sl
 800af22:	4632      	mov	r2, r6
 800af24:	f7fe fc54 	bl	80097d0 <_dtoa_r>
 800af28:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800af2c:	4607      	mov	r7, r0
 800af2e:	d112      	bne.n	800af56 <wcvt+0x86>
 800af30:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800af32:	07db      	lsls	r3, r3, #31
 800af34:	d40f      	bmi.n	800af56 <wcvt+0x86>
 800af36:	9b03      	ldr	r3, [sp, #12]
 800af38:	1bdb      	subs	r3, r3, r7
 800af3a:	f8cb 3000 	str.w	r3, [fp]
 800af3e:	2300      	movs	r3, #0
 800af40:	f8db 2000 	ldr.w	r2, [fp]
 800af44:	429a      	cmp	r2, r3
 800af46:	dd02      	ble.n	800af4e <wcvt+0x7e>
 800af48:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800af4a:	4293      	cmp	r3, r2
 800af4c:	db2a      	blt.n	800afa4 <wcvt+0xd4>
 800af4e:	9814      	ldr	r0, [sp, #80]	; 0x50
 800af50:	b005      	add	sp, #20
 800af52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af56:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800af5a:	eb07 0906 	add.w	r9, r7, r6
 800af5e:	d110      	bne.n	800af82 <wcvt+0xb2>
 800af60:	783b      	ldrb	r3, [r7, #0]
 800af62:	2b30      	cmp	r3, #48	; 0x30
 800af64:	d10a      	bne.n	800af7c <wcvt+0xac>
 800af66:	2200      	movs	r2, #0
 800af68:	2300      	movs	r3, #0
 800af6a:	4620      	mov	r0, r4
 800af6c:	4629      	mov	r1, r5
 800af6e:	f7f5 fdab 	bl	8000ac8 <__aeabi_dcmpeq>
 800af72:	b918      	cbnz	r0, 800af7c <wcvt+0xac>
 800af74:	f1c6 0601 	rsb	r6, r6, #1
 800af78:	f8ca 6000 	str.w	r6, [sl]
 800af7c:	f8da 3000 	ldr.w	r3, [sl]
 800af80:	4499      	add	r9, r3
 800af82:	2200      	movs	r2, #0
 800af84:	2300      	movs	r3, #0
 800af86:	4620      	mov	r0, r4
 800af88:	4629      	mov	r1, r5
 800af8a:	f7f5 fd9d 	bl	8000ac8 <__aeabi_dcmpeq>
 800af8e:	b108      	cbz	r0, 800af94 <wcvt+0xc4>
 800af90:	f8cd 900c 	str.w	r9, [sp, #12]
 800af94:	2230      	movs	r2, #48	; 0x30
 800af96:	9b03      	ldr	r3, [sp, #12]
 800af98:	454b      	cmp	r3, r9
 800af9a:	d2cc      	bcs.n	800af36 <wcvt+0x66>
 800af9c:	1c59      	adds	r1, r3, #1
 800af9e:	9103      	str	r1, [sp, #12]
 800afa0:	701a      	strb	r2, [r3, #0]
 800afa2:	e7f8      	b.n	800af96 <wcvt+0xc6>
 800afa4:	9914      	ldr	r1, [sp, #80]	; 0x50
 800afa6:	5cfa      	ldrb	r2, [r7, r3]
 800afa8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800afac:	3301      	adds	r3, #1
 800afae:	e7c7      	b.n	800af40 <wcvt+0x70>

0800afb0 <_svfwprintf_r>:
 800afb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afb4:	ed2d 8b04 	vpush	{d8-d9}
 800afb8:	b0d3      	sub	sp, #332	; 0x14c
 800afba:	461d      	mov	r5, r3
 800afbc:	2300      	movs	r3, #0
 800afbe:	4689      	mov	r9, r1
 800afc0:	9319      	str	r3, [sp, #100]	; 0x64
 800afc2:	4683      	mov	fp, r0
 800afc4:	920b      	str	r2, [sp, #44]	; 0x2c
 800afc6:	f7ff fa13 	bl	800a3f0 <_localeconv_r>
 800afca:	6803      	ldr	r3, [r0, #0]
 800afcc:	781b      	ldrb	r3, [r3, #0]
 800afce:	9316      	str	r3, [sp, #88]	; 0x58
 800afd0:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800afd4:	061e      	lsls	r6, r3, #24
 800afd6:	d51a      	bpl.n	800b00e <_svfwprintf_r+0x5e>
 800afd8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800afdc:	b9bb      	cbnz	r3, 800b00e <_svfwprintf_r+0x5e>
 800afde:	2140      	movs	r1, #64	; 0x40
 800afe0:	4658      	mov	r0, fp
 800afe2:	f7fd fc7d 	bl	80088e0 <_malloc_r>
 800afe6:	f8c9 0000 	str.w	r0, [r9]
 800afea:	f8c9 0010 	str.w	r0, [r9, #16]
 800afee:	b958      	cbnz	r0, 800b008 <_svfwprintf_r+0x58>
 800aff0:	230c      	movs	r3, #12
 800aff2:	f8cb 3000 	str.w	r3, [fp]
 800aff6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800affa:	930d      	str	r3, [sp, #52]	; 0x34
 800affc:	980d      	ldr	r0, [sp, #52]	; 0x34
 800affe:	b053      	add	sp, #332	; 0x14c
 800b000:	ecbd 8b04 	vpop	{d8-d9}
 800b004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b008:	2340      	movs	r3, #64	; 0x40
 800b00a:	f8c9 3014 	str.w	r3, [r9, #20]
 800b00e:	ed9f 7b8e 	vldr	d7, [pc, #568]	; 800b248 <_svfwprintf_r+0x298>
 800b012:	2300      	movs	r3, #0
 800b014:	930f      	str	r3, [sp, #60]	; 0x3c
 800b016:	9311      	str	r3, [sp, #68]	; 0x44
 800b018:	930d      	str	r3, [sp, #52]	; 0x34
 800b01a:	eeb0 8a47 	vmov.f32	s16, s14
 800b01e:	eef0 8a67 	vmov.f32	s17, s15
 800b022:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b024:	461c      	mov	r4, r3
 800b026:	f853 2b04 	ldr.w	r2, [r3], #4
 800b02a:	b10a      	cbz	r2, 800b030 <_svfwprintf_r+0x80>
 800b02c:	2a25      	cmp	r2, #37	; 0x25
 800b02e:	d1f9      	bne.n	800b024 <_svfwprintf_r+0x74>
 800b030:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b032:	42a3      	cmp	r3, r4
 800b034:	d00d      	beq.n	800b052 <_svfwprintf_r+0xa2>
 800b036:	1ae6      	subs	r6, r4, r3
 800b038:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b03a:	4633      	mov	r3, r6
 800b03c:	4649      	mov	r1, r9
 800b03e:	4658      	mov	r0, fp
 800b040:	f000 fe1d 	bl	800bc7e <__ssputs_r>
 800b044:	3001      	adds	r0, #1
 800b046:	f000 80e9 	beq.w	800b21c <_svfwprintf_r+0x26c>
 800b04a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b04c:	eb03 03a6 	add.w	r3, r3, r6, asr #2
 800b050:	930d      	str	r3, [sp, #52]	; 0x34
 800b052:	6823      	ldr	r3, [r4, #0]
 800b054:	2b00      	cmp	r3, #0
 800b056:	f000 80e1 	beq.w	800b21c <_svfwprintf_r+0x26c>
 800b05a:	2100      	movs	r1, #0
 800b05c:	1d22      	adds	r2, r4, #4
 800b05e:	9115      	str	r1, [sp, #84]	; 0x54
 800b060:	460e      	mov	r6, r1
 800b062:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b066:	910c      	str	r1, [sp, #48]	; 0x30
 800b068:	460f      	mov	r7, r1
 800b06a:	200a      	movs	r0, #10
 800b06c:	4613      	mov	r3, r2
 800b06e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b072:	9209      	str	r2, [sp, #36]	; 0x24
 800b074:	930b      	str	r3, [sp, #44]	; 0x2c
 800b076:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b078:	2b39      	cmp	r3, #57	; 0x39
 800b07a:	d84c      	bhi.n	800b116 <_svfwprintf_r+0x166>
 800b07c:	2b1f      	cmp	r3, #31
 800b07e:	d94f      	bls.n	800b120 <_svfwprintf_r+0x170>
 800b080:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b082:	3b20      	subs	r3, #32
 800b084:	2b19      	cmp	r3, #25
 800b086:	d84a      	bhi.n	800b11e <_svfwprintf_r+0x16e>
 800b088:	e8df f003 	tbb	[pc, r3]
 800b08c:	7049496b 	.word	0x7049496b
 800b090:	49494949 	.word	0x49494949
 800b094:	6c734949 	.word	0x6c734949
 800b098:	497d7a49 	.word	0x497d7a49
 800b09c:	9b9b9b98 	.word	0x9b9b9b98
 800b0a0:	9b9b9b9b 	.word	0x9b9b9b9b
 800b0a4:	9b9b      	.short	0x9b9b
 800b0a6:	2b33      	cmp	r3, #51	; 0x33
 800b0a8:	d839      	bhi.n	800b11e <_svfwprintf_r+0x16e>
 800b0aa:	e8df f013 	tbh	[pc, r3, lsl #1]
 800b0ae:	00e5      	.short	0x00e5
 800b0b0:	00e50038 	.word	0x00e50038
 800b0b4:	00380038 	.word	0x00380038
 800b0b8:	00380038 	.word	0x00380038
 800b0bc:	0038009c 	.word	0x0038009c
 800b0c0:	00380038 	.word	0x00380038
 800b0c4:	00380038 	.word	0x00380038
 800b0c8:	00380038 	.word	0x00380038
 800b0cc:	00380038 	.word	0x00380038
 800b0d0:	00380038 	.word	0x00380038
 800b0d4:	0038031e 	.word	0x0038031e
 800b0d8:	00380038 	.word	0x00380038
 800b0dc:	00380038 	.word	0x00380038
 800b0e0:	00380038 	.word	0x00380038
 800b0e4:	00380038 	.word	0x00380038
 800b0e8:	00a50038 	.word	0x00a50038
 800b0ec:	00e500d3 	.word	0x00e500d3
 800b0f0:	00e500e5 	.word	0x00e500e5
 800b0f4:	00d3009f 	.word	0x00d3009f
 800b0f8:	00380038 	.word	0x00380038
 800b0fc:	003800a2 	.word	0x003800a2
 800b100:	02950284 	.word	0x02950284
 800b104:	00a202b3 	.word	0x00a202b3
 800b108:	02c20038 	.word	0x02c20038
 800b10c:	03120038 	.word	0x03120038
 800b110:	00380038 	.word	0x00380038
 800b114:	0042      	.short	0x0042
 800b116:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b118:	3b45      	subs	r3, #69	; 0x45
 800b11a:	2b33      	cmp	r3, #51	; 0x33
 800b11c:	d9c3      	bls.n	800b0a6 <_svfwprintf_r+0xf6>
 800b11e:	b111      	cbz	r1, 800b126 <_svfwprintf_r+0x176>
 800b120:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b122:	2b00      	cmp	r3, #0
 800b124:	d07a      	beq.n	800b21c <_svfwprintf_r+0x26c>
 800b126:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b128:	932a      	str	r3, [sp, #168]	; 0xa8
 800b12a:	2000      	movs	r0, #0
 800b12c:	9015      	str	r0, [sp, #84]	; 0x54
 800b12e:	950a      	str	r5, [sp, #40]	; 0x28
 800b130:	e081      	b.n	800b236 <_svfwprintf_r+0x286>
 800b132:	b101      	cbz	r1, 800b136 <_svfwprintf_r+0x186>
 800b134:	9615      	str	r6, [sp, #84]	; 0x54
 800b136:	4b46      	ldr	r3, [pc, #280]	; (800b250 <_svfwprintf_r+0x2a0>)
 800b138:	930f      	str	r3, [sp, #60]	; 0x3c
 800b13a:	462a      	mov	r2, r5
 800b13c:	06f8      	lsls	r0, r7, #27
 800b13e:	f852 3b04 	ldr.w	r3, [r2], #4
 800b142:	920a      	str	r2, [sp, #40]	; 0x28
 800b144:	d402      	bmi.n	800b14c <_svfwprintf_r+0x19c>
 800b146:	0679      	lsls	r1, r7, #25
 800b148:	bf48      	it	mi
 800b14a:	b29b      	uxthmi	r3, r3
 800b14c:	07fa      	lsls	r2, r7, #31
 800b14e:	d506      	bpl.n	800b15e <_svfwprintf_r+0x1ae>
 800b150:	b12b      	cbz	r3, 800b15e <_svfwprintf_r+0x1ae>
 800b152:	2230      	movs	r2, #48	; 0x30
 800b154:	921a      	str	r2, [sp, #104]	; 0x68
 800b156:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b158:	921b      	str	r2, [sp, #108]	; 0x6c
 800b15a:	f047 0702 	orr.w	r7, r7, #2
 800b15e:	2202      	movs	r2, #2
 800b160:	e242      	b.n	800b5e8 <_svfwprintf_r+0x638>
 800b162:	b90e      	cbnz	r6, 800b168 <_svfwprintf_r+0x1b8>
 800b164:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800b166:	2101      	movs	r1, #1
 800b168:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b16a:	e77f      	b.n	800b06c <_svfwprintf_r+0xbc>
 800b16c:	f047 0701 	orr.w	r7, r7, #1
 800b170:	e7fa      	b.n	800b168 <_svfwprintf_r+0x1b8>
 800b172:	f855 3b04 	ldr.w	r3, [r5], #4
 800b176:	930c      	str	r3, [sp, #48]	; 0x30
 800b178:	2b00      	cmp	r3, #0
 800b17a:	daf5      	bge.n	800b168 <_svfwprintf_r+0x1b8>
 800b17c:	425b      	negs	r3, r3
 800b17e:	930c      	str	r3, [sp, #48]	; 0x30
 800b180:	f047 0704 	orr.w	r7, r7, #4
 800b184:	e7f0      	b.n	800b168 <_svfwprintf_r+0x1b8>
 800b186:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b188:	f852 3b04 	ldr.w	r3, [r2], #4
 800b18c:	9309      	str	r3, [sp, #36]	; 0x24
 800b18e:	2b2a      	cmp	r3, #42	; 0x2a
 800b190:	d112      	bne.n	800b1b8 <_svfwprintf_r+0x208>
 800b192:	f855 4b04 	ldr.w	r4, [r5], #4
 800b196:	920b      	str	r2, [sp, #44]	; 0x2c
 800b198:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
 800b19c:	e7e4      	b.n	800b168 <_svfwprintf_r+0x1b8>
 800b19e:	fb00 3404 	mla	r4, r0, r4, r3
 800b1a2:	f852 3b04 	ldr.w	r3, [r2], #4
 800b1a6:	9309      	str	r3, [sp, #36]	; 0x24
 800b1a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1aa:	3b30      	subs	r3, #48	; 0x30
 800b1ac:	2b09      	cmp	r3, #9
 800b1ae:	d9f6      	bls.n	800b19e <_svfwprintf_r+0x1ee>
 800b1b0:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
 800b1b4:	920b      	str	r2, [sp, #44]	; 0x2c
 800b1b6:	e75e      	b.n	800b076 <_svfwprintf_r+0xc6>
 800b1b8:	2400      	movs	r4, #0
 800b1ba:	e7f5      	b.n	800b1a8 <_svfwprintf_r+0x1f8>
 800b1bc:	f047 0780 	orr.w	r7, r7, #128	; 0x80
 800b1c0:	e7d2      	b.n	800b168 <_svfwprintf_r+0x1b8>
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	930c      	str	r3, [sp, #48]	; 0x30
 800b1c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b1c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1ca:	fb00 3302 	mla	r3, r0, r2, r3
 800b1ce:	3b30      	subs	r3, #48	; 0x30
 800b1d0:	930c      	str	r3, [sp, #48]	; 0x30
 800b1d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b1d4:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1d8:	930b      	str	r3, [sp, #44]	; 0x2c
 800b1da:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800b1de:	2b09      	cmp	r3, #9
 800b1e0:	9209      	str	r2, [sp, #36]	; 0x24
 800b1e2:	d9f0      	bls.n	800b1c6 <_svfwprintf_r+0x216>
 800b1e4:	e747      	b.n	800b076 <_svfwprintf_r+0xc6>
 800b1e6:	f047 0708 	orr.w	r7, r7, #8
 800b1ea:	e7bd      	b.n	800b168 <_svfwprintf_r+0x1b8>
 800b1ec:	f047 0740 	orr.w	r7, r7, #64	; 0x40
 800b1f0:	e7ba      	b.n	800b168 <_svfwprintf_r+0x1b8>
 800b1f2:	f047 0710 	orr.w	r7, r7, #16
 800b1f6:	e7b7      	b.n	800b168 <_svfwprintf_r+0x1b8>
 800b1f8:	b101      	cbz	r1, 800b1fc <_svfwprintf_r+0x24c>
 800b1fa:	9615      	str	r6, [sp, #84]	; 0x54
 800b1fc:	462b      	mov	r3, r5
 800b1fe:	06fd      	lsls	r5, r7, #27
 800b200:	f853 0b04 	ldr.w	r0, [r3], #4
 800b204:	930a      	str	r3, [sp, #40]	; 0x28
 800b206:	d412      	bmi.n	800b22e <_svfwprintf_r+0x27e>
 800b208:	f000 fc82 	bl	800bb10 <btowc>
 800b20c:	1c44      	adds	r4, r0, #1
 800b20e:	d10e      	bne.n	800b22e <_svfwprintf_r+0x27e>
 800b210:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800b214:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b218:	f8a9 300c 	strh.w	r3, [r9, #12]
 800b21c:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800b220:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b224:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b226:	bf18      	it	ne
 800b228:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 800b22c:	e6e5      	b.n	800affa <_svfwprintf_r+0x4a>
 800b22e:	902a      	str	r0, [sp, #168]	; 0xa8
 800b230:	2000      	movs	r0, #0
 800b232:	902b      	str	r0, [sp, #172]	; 0xac
 800b234:	9015      	str	r0, [sp, #84]	; 0x54
 800b236:	4680      	mov	r8, r0
 800b238:	2401      	movs	r4, #1
 800b23a:	4606      	mov	r6, r0
 800b23c:	4605      	mov	r5, r0
 800b23e:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 800b242:	e104      	b.n	800b44e <_svfwprintf_r+0x49e>
 800b244:	f3af 8000 	nop.w
	...
 800b250:	0801139c 	.word	0x0801139c
 800b254:	b101      	cbz	r1, 800b258 <_svfwprintf_r+0x2a8>
 800b256:	9615      	str	r6, [sp, #84]	; 0x54
 800b258:	462a      	mov	r2, r5
 800b25a:	06f9      	lsls	r1, r7, #27
 800b25c:	f852 3b04 	ldr.w	r3, [r2], #4
 800b260:	920a      	str	r2, [sp, #40]	; 0x28
 800b262:	d402      	bmi.n	800b26a <_svfwprintf_r+0x2ba>
 800b264:	067a      	lsls	r2, r7, #25
 800b266:	bf48      	it	mi
 800b268:	b21b      	sxthmi	r3, r3
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	da02      	bge.n	800b274 <_svfwprintf_r+0x2c4>
 800b26e:	222d      	movs	r2, #45	; 0x2d
 800b270:	425b      	negs	r3, r3
 800b272:	9215      	str	r2, [sp, #84]	; 0x54
 800b274:	2201      	movs	r2, #1
 800b276:	e1b9      	b.n	800b5ec <_svfwprintf_r+0x63c>
 800b278:	b101      	cbz	r1, 800b27c <_svfwprintf_r+0x2cc>
 800b27a:	9615      	str	r6, [sp, #84]	; 0x54
 800b27c:	3507      	adds	r5, #7
 800b27e:	f025 0307 	bic.w	r3, r5, #7
 800b282:	ecb3 7b02 	vldmia	r3!, {d7}
 800b286:	930a      	str	r3, [sp, #40]	; 0x28
 800b288:	eeb0 8a47 	vmov.f32	s16, s14
 800b28c:	eef0 8a67 	vmov.f32	s17, s15
 800b290:	ee18 3a90 	vmov	r3, s17
 800b294:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b298:	ee09 3a90 	vmov	s19, r3
 800b29c:	eeb0 9a47 	vmov.f32	s18, s14
 800b2a0:	4ba6      	ldr	r3, [pc, #664]	; (800b53c <_svfwprintf_r+0x58c>)
 800b2a2:	ec51 0b19 	vmov	r0, r1, d9
 800b2a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b2aa:	f7f5 fc3f 	bl	8000b2c <__aeabi_dcmpun>
 800b2ae:	b9f0      	cbnz	r0, 800b2ee <_svfwprintf_r+0x33e>
 800b2b0:	4ba2      	ldr	r3, [pc, #648]	; (800b53c <_svfwprintf_r+0x58c>)
 800b2b2:	ec51 0b19 	vmov	r0, r1, d9
 800b2b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b2ba:	f7f5 fc19 	bl	8000af0 <__aeabi_dcmple>
 800b2be:	b9b0      	cbnz	r0, 800b2ee <_svfwprintf_r+0x33e>
 800b2c0:	ec51 0b18 	vmov	r0, r1, d8
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	f7f5 fc08 	bl	8000adc <__aeabi_dcmplt>
 800b2cc:	b108      	cbz	r0, 800b2d2 <_svfwprintf_r+0x322>
 800b2ce:	232d      	movs	r3, #45	; 0x2d
 800b2d0:	9315      	str	r3, [sp, #84]	; 0x54
 800b2d2:	4b9b      	ldr	r3, [pc, #620]	; (800b540 <_svfwprintf_r+0x590>)
 800b2d4:	489b      	ldr	r0, [pc, #620]	; (800b544 <_svfwprintf_r+0x594>)
 800b2d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b2d8:	f027 0780 	bic.w	r7, r7, #128	; 0x80
 800b2dc:	2a47      	cmp	r2, #71	; 0x47
 800b2de:	bf94      	ite	ls
 800b2e0:	469a      	movls	sl, r3
 800b2e2:	4682      	movhi	sl, r0
 800b2e4:	f04f 0800 	mov.w	r8, #0
 800b2e8:	2403      	movs	r4, #3
 800b2ea:	4646      	mov	r6, r8
 800b2ec:	e3d4      	b.n	800ba98 <_svfwprintf_r+0xae8>
 800b2ee:	ec53 2b18 	vmov	r2, r3, d8
 800b2f2:	ec51 0b18 	vmov	r0, r1, d8
 800b2f6:	f7f5 fc19 	bl	8000b2c <__aeabi_dcmpun>
 800b2fa:	b140      	cbz	r0, 800b30e <_svfwprintf_r+0x35e>
 800b2fc:	ee18 3a90 	vmov	r3, s17
 800b300:	2b00      	cmp	r3, #0
 800b302:	bfbc      	itt	lt
 800b304:	232d      	movlt	r3, #45	; 0x2d
 800b306:	9315      	strlt	r3, [sp, #84]	; 0x54
 800b308:	488f      	ldr	r0, [pc, #572]	; (800b548 <_svfwprintf_r+0x598>)
 800b30a:	4b90      	ldr	r3, [pc, #576]	; (800b54c <_svfwprintf_r+0x59c>)
 800b30c:	e7e3      	b.n	800b2d6 <_svfwprintf_r+0x326>
 800b30e:	1c63      	adds	r3, r4, #1
 800b310:	f000 810f 	beq.w	800b532 <_svfwprintf_r+0x582>
 800b314:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b316:	f023 0320 	bic.w	r3, r3, #32
 800b31a:	2b47      	cmp	r3, #71	; 0x47
 800b31c:	d102      	bne.n	800b324 <_svfwprintf_r+0x374>
 800b31e:	2c00      	cmp	r4, #0
 800b320:	bf08      	it	eq
 800b322:	2401      	moveq	r4, #1
 800b324:	f447 7380 	orr.w	r3, r7, #256	; 0x100
 800b328:	930e      	str	r3, [sp, #56]	; 0x38
 800b32a:	2328      	movs	r3, #40	; 0x28
 800b32c:	9307      	str	r3, [sp, #28]
 800b32e:	ab19      	add	r3, sp, #100	; 0x64
 800b330:	9305      	str	r3, [sp, #20]
 800b332:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b334:	9304      	str	r3, [sp, #16]
 800b336:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b338:	f10d 08a8 	add.w	r8, sp, #168	; 0xa8
 800b33c:	ae18      	add	r6, sp, #96	; 0x60
 800b33e:	ad17      	add	r5, sp, #92	; 0x5c
 800b340:	e9cd 4300 	strd	r4, r3, [sp]
 800b344:	f8cd 8018 	str.w	r8, [sp, #24]
 800b348:	ec53 2b18 	vmov	r2, r3, d8
 800b34c:	9603      	str	r6, [sp, #12]
 800b34e:	9502      	str	r5, [sp, #8]
 800b350:	4658      	mov	r0, fp
 800b352:	f7ff fdbd 	bl	800aed0 <wcvt>
 800b356:	4540      	cmp	r0, r8
 800b358:	4682      	mov	sl, r0
 800b35a:	f040 80ec 	bne.w	800b536 <_svfwprintf_r+0x586>
 800b35e:	9919      	ldr	r1, [sp, #100]	; 0x64
 800b360:	2928      	cmp	r1, #40	; 0x28
 800b362:	f340 80e8 	ble.w	800b536 <_svfwprintf_r+0x586>
 800b366:	0089      	lsls	r1, r1, #2
 800b368:	4658      	mov	r0, fp
 800b36a:	f7fd fab9 	bl	80088e0 <_malloc_r>
 800b36e:	4680      	mov	r8, r0
 800b370:	2800      	cmp	r0, #0
 800b372:	f43f af4d 	beq.w	800b210 <_svfwprintf_r+0x260>
 800b376:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b378:	9502      	str	r5, [sp, #8]
 800b37a:	e9cd 0306 	strd	r0, r3, [sp, #24]
 800b37e:	ab19      	add	r3, sp, #100	; 0x64
 800b380:	9305      	str	r3, [sp, #20]
 800b382:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b384:	e9cd 6303 	strd	r6, r3, [sp, #12]
 800b388:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b38a:	4658      	mov	r0, fp
 800b38c:	e9cd 4300 	strd	r4, r3, [sp]
 800b390:	ec53 2b18 	vmov	r2, r3, d8
 800b394:	f7ff fd9c 	bl	800aed0 <wcvt>
 800b398:	4682      	mov	sl, r0
 800b39a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b39c:	9d18      	ldr	r5, [sp, #96]	; 0x60
 800b39e:	f023 0320 	bic.w	r3, r3, #32
 800b3a2:	2b47      	cmp	r3, #71	; 0x47
 800b3a4:	f040 80d6 	bne.w	800b554 <_svfwprintf_r+0x5a4>
 800b3a8:	1cee      	adds	r6, r5, #3
 800b3aa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b3ac:	db02      	blt.n	800b3b4 <_svfwprintf_r+0x404>
 800b3ae:	42ac      	cmp	r4, r5
 800b3b0:	f280 80ec 	bge.w	800b58c <_svfwprintf_r+0x5dc>
 800b3b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3b6:	3b02      	subs	r3, #2
 800b3b8:	9309      	str	r3, [sp, #36]	; 0x24
 800b3ba:	1e6b      	subs	r3, r5, #1
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b3c0:	9318      	str	r3, [sp, #96]	; 0x60
 800b3c2:	bfb8      	it	lt
 800b3c4:	f1c5 0301 	rsblt	r3, r5, #1
 800b3c8:	921c      	str	r2, [sp, #112]	; 0x70
 800b3ca:	bfb4      	ite	lt
 800b3cc:	222d      	movlt	r2, #45	; 0x2d
 800b3ce:	222b      	movge	r2, #43	; 0x2b
 800b3d0:	2b09      	cmp	r3, #9
 800b3d2:	921d      	str	r2, [sp, #116]	; 0x74
 800b3d4:	f340 80d1 	ble.w	800b57a <_svfwprintf_r+0x5ca>
 800b3d8:	a82a      	add	r0, sp, #168	; 0xa8
 800b3da:	250a      	movs	r5, #10
 800b3dc:	4602      	mov	r2, r0
 800b3de:	fb93 f4f5 	sdiv	r4, r3, r5
 800b3e2:	fb05 3114 	mls	r1, r5, r4, r3
 800b3e6:	3130      	adds	r1, #48	; 0x30
 800b3e8:	f842 1c04 	str.w	r1, [r2, #-4]
 800b3ec:	4619      	mov	r1, r3
 800b3ee:	2963      	cmp	r1, #99	; 0x63
 800b3f0:	f1a0 0004 	sub.w	r0, r0, #4
 800b3f4:	4623      	mov	r3, r4
 800b3f6:	dcf1      	bgt.n	800b3dc <_svfwprintf_r+0x42c>
 800b3f8:	3330      	adds	r3, #48	; 0x30
 800b3fa:	f840 3c04 	str.w	r3, [r0, #-4]
 800b3fe:	f1a2 0108 	sub.w	r1, r2, #8
 800b402:	a81e      	add	r0, sp, #120	; 0x78
 800b404:	ab2a      	add	r3, sp, #168	; 0xa8
 800b406:	4299      	cmp	r1, r3
 800b408:	f0c0 80b2 	bcc.w	800b570 <_svfwprintf_r+0x5c0>
 800b40c:	f10d 04b3 	add.w	r4, sp, #179	; 0xb3
 800b410:	1aa4      	subs	r4, r4, r2
 800b412:	f024 0403 	bic.w	r4, r4, #3
 800b416:	3a0b      	subs	r2, #11
 800b418:	4293      	cmp	r3, r2
 800b41a:	bf38      	it	cc
 800b41c:	2400      	movcc	r4, #0
 800b41e:	ab1e      	add	r3, sp, #120	; 0x78
 800b420:	441c      	add	r4, r3
 800b422:	a81c      	add	r0, sp, #112	; 0x70
 800b424:	1a24      	subs	r4, r4, r0
 800b426:	10a3      	asrs	r3, r4, #2
 800b428:	9311      	str	r3, [sp, #68]	; 0x44
 800b42a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b42c:	2b01      	cmp	r3, #1
 800b42e:	eb03 04a4 	add.w	r4, r3, r4, asr #2
 800b432:	dc02      	bgt.n	800b43a <_svfwprintf_r+0x48a>
 800b434:	f017 0501 	ands.w	r5, r7, #1
 800b438:	d001      	beq.n	800b43e <_svfwprintf_r+0x48e>
 800b43a:	3401      	adds	r4, #1
 800b43c:	2500      	movs	r5, #0
 800b43e:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800b440:	2e00      	cmp	r6, #0
 800b442:	f000 817e 	beq.w	800b742 <_svfwprintf_r+0x792>
 800b446:	232d      	movs	r3, #45	; 0x2d
 800b448:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800b44a:	9315      	str	r3, [sp, #84]	; 0x54
 800b44c:	2600      	movs	r6, #0
 800b44e:	42a6      	cmp	r6, r4
 800b450:	4633      	mov	r3, r6
 800b452:	bfb8      	it	lt
 800b454:	4623      	movlt	r3, r4
 800b456:	930e      	str	r3, [sp, #56]	; 0x38
 800b458:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b45a:	b113      	cbz	r3, 800b462 <_svfwprintf_r+0x4b2>
 800b45c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b45e:	3301      	adds	r3, #1
 800b460:	930e      	str	r3, [sp, #56]	; 0x38
 800b462:	f017 0302 	ands.w	r3, r7, #2
 800b466:	9312      	str	r3, [sp, #72]	; 0x48
 800b468:	bf1e      	ittt	ne
 800b46a:	9b0e      	ldrne	r3, [sp, #56]	; 0x38
 800b46c:	3302      	addne	r3, #2
 800b46e:	930e      	strne	r3, [sp, #56]	; 0x38
 800b470:	f017 0384 	ands.w	r3, r7, #132	; 0x84
 800b474:	9313      	str	r3, [sp, #76]	; 0x4c
 800b476:	f000 8166 	beq.w	800b746 <_svfwprintf_r+0x796>
 800b47a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b47c:	b143      	cbz	r3, 800b490 <_svfwprintf_r+0x4e0>
 800b47e:	2304      	movs	r3, #4
 800b480:	aa15      	add	r2, sp, #84	; 0x54
 800b482:	4649      	mov	r1, r9
 800b484:	4658      	mov	r0, fp
 800b486:	f000 fbfa 	bl	800bc7e <__ssputs_r>
 800b48a:	3001      	adds	r0, #1
 800b48c:	f000 816e 	beq.w	800b76c <_svfwprintf_r+0x7bc>
 800b490:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b492:	b143      	cbz	r3, 800b4a6 <_svfwprintf_r+0x4f6>
 800b494:	2308      	movs	r3, #8
 800b496:	aa1a      	add	r2, sp, #104	; 0x68
 800b498:	4649      	mov	r1, r9
 800b49a:	4658      	mov	r0, fp
 800b49c:	f000 fbef 	bl	800bc7e <__ssputs_r>
 800b4a0:	3001      	adds	r0, #1
 800b4a2:	f000 8163 	beq.w	800b76c <_svfwprintf_r+0x7bc>
 800b4a6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b4a8:	2b80      	cmp	r3, #128	; 0x80
 800b4aa:	d113      	bne.n	800b4d4 <_svfwprintf_r+0x524>
 800b4ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b4ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b4b0:	1a9b      	subs	r3, r3, r2
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	9310      	str	r3, [sp, #64]	; 0x40
 800b4b6:	dd0d      	ble.n	800b4d4 <_svfwprintf_r+0x524>
 800b4b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b4ba:	4a25      	ldr	r2, [pc, #148]	; (800b550 <_svfwprintf_r+0x5a0>)
 800b4bc:	2b10      	cmp	r3, #16
 800b4be:	f300 816a 	bgt.w	800b796 <_svfwprintf_r+0x7e6>
 800b4c2:	4a23      	ldr	r2, [pc, #140]	; (800b550 <_svfwprintf_r+0x5a0>)
 800b4c4:	009b      	lsls	r3, r3, #2
 800b4c6:	4649      	mov	r1, r9
 800b4c8:	4658      	mov	r0, fp
 800b4ca:	f000 fbd8 	bl	800bc7e <__ssputs_r>
 800b4ce:	3001      	adds	r0, #1
 800b4d0:	f000 814c 	beq.w	800b76c <_svfwprintf_r+0x7bc>
 800b4d4:	1b36      	subs	r6, r6, r4
 800b4d6:	2e00      	cmp	r6, #0
 800b4d8:	dd0c      	ble.n	800b4f4 <_svfwprintf_r+0x544>
 800b4da:	2e10      	cmp	r6, #16
 800b4dc:	4a1c      	ldr	r2, [pc, #112]	; (800b550 <_svfwprintf_r+0x5a0>)
 800b4de:	f300 8165 	bgt.w	800b7ac <_svfwprintf_r+0x7fc>
 800b4e2:	4a1b      	ldr	r2, [pc, #108]	; (800b550 <_svfwprintf_r+0x5a0>)
 800b4e4:	00b3      	lsls	r3, r6, #2
 800b4e6:	4649      	mov	r1, r9
 800b4e8:	4658      	mov	r0, fp
 800b4ea:	f000 fbc8 	bl	800bc7e <__ssputs_r>
 800b4ee:	3001      	adds	r0, #1
 800b4f0:	f000 813c 	beq.w	800b76c <_svfwprintf_r+0x7bc>
 800b4f4:	05f9      	lsls	r1, r7, #23
 800b4f6:	f100 8162 	bmi.w	800b7be <_svfwprintf_r+0x80e>
 800b4fa:	00a3      	lsls	r3, r4, #2
 800b4fc:	4652      	mov	r2, sl
 800b4fe:	4649      	mov	r1, r9
 800b500:	4658      	mov	r0, fp
 800b502:	f000 fbbc 	bl	800bc7e <__ssputs_r>
 800b506:	3001      	adds	r0, #1
 800b508:	f000 8130 	beq.w	800b76c <_svfwprintf_r+0x7bc>
 800b50c:	077a      	lsls	r2, r7, #29
 800b50e:	f100 8281 	bmi.w	800ba14 <_svfwprintf_r+0xa64>
 800b512:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b516:	990e      	ldr	r1, [sp, #56]	; 0x38
 800b518:	428a      	cmp	r2, r1
 800b51a:	bfac      	ite	ge
 800b51c:	189b      	addge	r3, r3, r2
 800b51e:	185b      	addlt	r3, r3, r1
 800b520:	930d      	str	r3, [sp, #52]	; 0x34
 800b522:	f1b8 0f00 	cmp.w	r8, #0
 800b526:	d055      	beq.n	800b5d4 <_svfwprintf_r+0x624>
 800b528:	4641      	mov	r1, r8
 800b52a:	4658      	mov	r0, fp
 800b52c:	f7fd f96c 	bl	8008808 <_free_r>
 800b530:	e050      	b.n	800b5d4 <_svfwprintf_r+0x624>
 800b532:	2406      	movs	r4, #6
 800b534:	e6f6      	b.n	800b324 <_svfwprintf_r+0x374>
 800b536:	f04f 0800 	mov.w	r8, #0
 800b53a:	e72e      	b.n	800b39a <_svfwprintf_r+0x3ea>
 800b53c:	7fefffff 	.word	0x7fefffff
 800b540:	08011318 	.word	0x08011318
 800b544:	08011328 	.word	0x08011328
 800b548:	08011348 	.word	0x08011348
 800b54c:	08011338 	.word	0x08011338
 800b550:	08011428 	.word	0x08011428
 800b554:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b556:	2b66      	cmp	r3, #102	; 0x66
 800b558:	f47f af2f 	bne.w	800b3ba <_svfwprintf_r+0x40a>
 800b55c:	f007 0301 	and.w	r3, r7, #1
 800b560:	2d00      	cmp	r5, #0
 800b562:	ea43 0304 	orr.w	r3, r3, r4
 800b566:	dd0e      	ble.n	800b586 <_svfwprintf_r+0x5d6>
 800b568:	b1fb      	cbz	r3, 800b5aa <_svfwprintf_r+0x5fa>
 800b56a:	3401      	adds	r4, #1
 800b56c:	442c      	add	r4, r5
 800b56e:	e766      	b.n	800b43e <_svfwprintf_r+0x48e>
 800b570:	f851 4b04 	ldr.w	r4, [r1], #4
 800b574:	f840 4b04 	str.w	r4, [r0], #4
 800b578:	e745      	b.n	800b406 <_svfwprintf_r+0x456>
 800b57a:	2230      	movs	r2, #48	; 0x30
 800b57c:	4413      	add	r3, r2
 800b57e:	921e      	str	r2, [sp, #120]	; 0x78
 800b580:	931f      	str	r3, [sp, #124]	; 0x7c
 800b582:	ac20      	add	r4, sp, #128	; 0x80
 800b584:	e74d      	b.n	800b422 <_svfwprintf_r+0x472>
 800b586:	b193      	cbz	r3, 800b5ae <_svfwprintf_r+0x5fe>
 800b588:	3402      	adds	r4, #2
 800b58a:	e758      	b.n	800b43e <_svfwprintf_r+0x48e>
 800b58c:	42ab      	cmp	r3, r5
 800b58e:	dc05      	bgt.n	800b59c <_svfwprintf_r+0x5ec>
 800b590:	07fc      	lsls	r4, r7, #31
 800b592:	d50e      	bpl.n	800b5b2 <_svfwprintf_r+0x602>
 800b594:	1c6c      	adds	r4, r5, #1
 800b596:	2367      	movs	r3, #103	; 0x67
 800b598:	9309      	str	r3, [sp, #36]	; 0x24
 800b59a:	e750      	b.n	800b43e <_svfwprintf_r+0x48e>
 800b59c:	2d00      	cmp	r5, #0
 800b59e:	bfd4      	ite	le
 800b5a0:	f1c5 0402 	rsble	r4, r5, #2
 800b5a4:	2401      	movgt	r4, #1
 800b5a6:	441c      	add	r4, r3
 800b5a8:	e7f5      	b.n	800b596 <_svfwprintf_r+0x5e6>
 800b5aa:	462c      	mov	r4, r5
 800b5ac:	e747      	b.n	800b43e <_svfwprintf_r+0x48e>
 800b5ae:	2401      	movs	r4, #1
 800b5b0:	e745      	b.n	800b43e <_svfwprintf_r+0x48e>
 800b5b2:	462c      	mov	r4, r5
 800b5b4:	e7ef      	b.n	800b596 <_svfwprintf_r+0x5e6>
 800b5b6:	b101      	cbz	r1, 800b5ba <_svfwprintf_r+0x60a>
 800b5b8:	9615      	str	r6, [sp, #84]	; 0x54
 800b5ba:	1d2b      	adds	r3, r5, #4
 800b5bc:	06f8      	lsls	r0, r7, #27
 800b5be:	930a      	str	r3, [sp, #40]	; 0x28
 800b5c0:	d503      	bpl.n	800b5ca <_svfwprintf_r+0x61a>
 800b5c2:	682b      	ldr	r3, [r5, #0]
 800b5c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b5c6:	601a      	str	r2, [r3, #0]
 800b5c8:	e004      	b.n	800b5d4 <_svfwprintf_r+0x624>
 800b5ca:	0679      	lsls	r1, r7, #25
 800b5cc:	d5f9      	bpl.n	800b5c2 <_svfwprintf_r+0x612>
 800b5ce:	682b      	ldr	r3, [r5, #0]
 800b5d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b5d2:	801a      	strh	r2, [r3, #0]
 800b5d4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b5d6:	e524      	b.n	800b022 <_svfwprintf_r+0x72>
 800b5d8:	462a      	mov	r2, r5
 800b5da:	f017 0110 	ands.w	r1, r7, #16
 800b5de:	f852 3b04 	ldr.w	r3, [r2], #4
 800b5e2:	920a      	str	r2, [sp, #40]	; 0x28
 800b5e4:	d011      	beq.n	800b60a <_svfwprintf_r+0x65a>
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	2100      	movs	r1, #0
 800b5ea:	9115      	str	r1, [sp, #84]	; 0x54
 800b5ec:	1c66      	adds	r6, r4, #1
 800b5ee:	f000 822e 	beq.w	800ba4e <_svfwprintf_r+0xa9e>
 800b5f2:	f027 0180 	bic.w	r1, r7, #128	; 0x80
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	f040 822d 	bne.w	800ba56 <_svfwprintf_r+0xaa6>
 800b5fc:	2c00      	cmp	r4, #0
 800b5fe:	f000 8098 	beq.w	800b732 <_svfwprintf_r+0x782>
 800b602:	2a01      	cmp	r2, #1
 800b604:	f040 822a 	bne.w	800ba5c <_svfwprintf_r+0xaac>
 800b608:	e075      	b.n	800b6f6 <_svfwprintf_r+0x746>
 800b60a:	f017 0240 	ands.w	r2, r7, #64	; 0x40
 800b60e:	d0eb      	beq.n	800b5e8 <_svfwprintf_r+0x638>
 800b610:	b29b      	uxth	r3, r3
 800b612:	e7e8      	b.n	800b5e6 <_svfwprintf_r+0x636>
 800b614:	462a      	mov	r2, r5
 800b616:	2178      	movs	r1, #120	; 0x78
 800b618:	f852 3b04 	ldr.w	r3, [r2], #4
 800b61c:	920a      	str	r2, [sp, #40]	; 0x28
 800b61e:	2230      	movs	r2, #48	; 0x30
 800b620:	e9cd 211a 	strd	r2, r1, [sp, #104]	; 0x68
 800b624:	4a9e      	ldr	r2, [pc, #632]	; (800b8a0 <_svfwprintf_r+0x8f0>)
 800b626:	920f      	str	r2, [sp, #60]	; 0x3c
 800b628:	f047 0702 	orr.w	r7, r7, #2
 800b62c:	2202      	movs	r2, #2
 800b62e:	9109      	str	r1, [sp, #36]	; 0x24
 800b630:	e7da      	b.n	800b5e8 <_svfwprintf_r+0x638>
 800b632:	462b      	mov	r3, r5
 800b634:	2600      	movs	r6, #0
 800b636:	f853 ab04 	ldr.w	sl, [r3], #4
 800b63a:	930a      	str	r3, [sp, #40]	; 0x28
 800b63c:	f017 0510 	ands.w	r5, r7, #16
 800b640:	9615      	str	r6, [sp, #84]	; 0x54
 800b642:	d12d      	bne.n	800b6a0 <_svfwprintf_r+0x6f0>
 800b644:	1c62      	adds	r2, r4, #1
 800b646:	d014      	beq.n	800b672 <_svfwprintf_r+0x6c2>
 800b648:	4622      	mov	r2, r4
 800b64a:	4629      	mov	r1, r5
 800b64c:	4650      	mov	r0, sl
 800b64e:	4626      	mov	r6, r4
 800b650:	f7f4 fdc6 	bl	80001e0 <memchr>
 800b654:	b108      	cbz	r0, 800b65a <_svfwprintf_r+0x6aa>
 800b656:	eba0 060a 	sub.w	r6, r0, sl
 800b65a:	2e27      	cmp	r6, #39	; 0x27
 800b65c:	d90e      	bls.n	800b67c <_svfwprintf_r+0x6cc>
 800b65e:	1c71      	adds	r1, r6, #1
 800b660:	0089      	lsls	r1, r1, #2
 800b662:	4658      	mov	r0, fp
 800b664:	f7fd f93c 	bl	80088e0 <_malloc_r>
 800b668:	2800      	cmp	r0, #0
 800b66a:	f43f add1 	beq.w	800b210 <_svfwprintf_r+0x260>
 800b66e:	4680      	mov	r8, r0
 800b670:	e007      	b.n	800b682 <_svfwprintf_r+0x6d2>
 800b672:	4650      	mov	r0, sl
 800b674:	f7f4 fdac 	bl	80001d0 <strlen>
 800b678:	4606      	mov	r6, r0
 800b67a:	e7ee      	b.n	800b65a <_svfwprintf_r+0x6aa>
 800b67c:	f04f 0800 	mov.w	r8, #0
 800b680:	a82a      	add	r0, sp, #168	; 0xa8
 800b682:	4634      	mov	r4, r6
 800b684:	2300      	movs	r3, #0
 800b686:	42b3      	cmp	r3, r6
 800b688:	d104      	bne.n	800b694 <_svfwprintf_r+0x6e4>
 800b68a:	2600      	movs	r6, #0
 800b68c:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 800b690:	4682      	mov	sl, r0
 800b692:	e6dc      	b.n	800b44e <_svfwprintf_r+0x49e>
 800b694:	f81a 2003 	ldrb.w	r2, [sl, r3]
 800b698:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 800b69c:	3301      	adds	r3, #1
 800b69e:	e7f2      	b.n	800b686 <_svfwprintf_r+0x6d6>
 800b6a0:	1c63      	adds	r3, r4, #1
 800b6a2:	d011      	beq.n	800b6c8 <_svfwprintf_r+0x718>
 800b6a4:	4622      	mov	r2, r4
 800b6a6:	4631      	mov	r1, r6
 800b6a8:	4650      	mov	r0, sl
 800b6aa:	f000 fa04 	bl	800bab6 <wmemchr>
 800b6ae:	4680      	mov	r8, r0
 800b6b0:	2800      	cmp	r0, #0
 800b6b2:	f43f ae1a 	beq.w	800b2ea <_svfwprintf_r+0x33a>
 800b6b6:	eba0 080a 	sub.w	r8, r0, sl
 800b6ba:	ea4f 08a8 	mov.w	r8, r8, asr #2
 800b6be:	4544      	cmp	r4, r8
 800b6c0:	bfa8      	it	ge
 800b6c2:	4644      	movge	r4, r8
 800b6c4:	46b0      	mov	r8, r6
 800b6c6:	e610      	b.n	800b2ea <_svfwprintf_r+0x33a>
 800b6c8:	4650      	mov	r0, sl
 800b6ca:	f000 f9eb 	bl	800baa4 <wcslen>
 800b6ce:	4604      	mov	r4, r0
 800b6d0:	e7f8      	b.n	800b6c4 <_svfwprintf_r+0x714>
 800b6d2:	462a      	mov	r2, r5
 800b6d4:	06fe      	lsls	r6, r7, #27
 800b6d6:	f852 3b04 	ldr.w	r3, [r2], #4
 800b6da:	920a      	str	r2, [sp, #40]	; 0x28
 800b6dc:	d501      	bpl.n	800b6e2 <_svfwprintf_r+0x732>
 800b6de:	2201      	movs	r2, #1
 800b6e0:	e782      	b.n	800b5e8 <_svfwprintf_r+0x638>
 800b6e2:	067d      	lsls	r5, r7, #25
 800b6e4:	bf48      	it	mi
 800b6e6:	b29b      	uxthmi	r3, r3
 800b6e8:	e7f9      	b.n	800b6de <_svfwprintf_r+0x72e>
 800b6ea:	b101      	cbz	r1, 800b6ee <_svfwprintf_r+0x73e>
 800b6ec:	9615      	str	r6, [sp, #84]	; 0x54
 800b6ee:	4b6d      	ldr	r3, [pc, #436]	; (800b8a4 <_svfwprintf_r+0x8f4>)
 800b6f0:	e522      	b.n	800b138 <_svfwprintf_r+0x188>
 800b6f2:	2b09      	cmp	r3, #9
 800b6f4:	d804      	bhi.n	800b700 <_svfwprintf_r+0x750>
 800b6f6:	3330      	adds	r3, #48	; 0x30
 800b6f8:	9351      	str	r3, [sp, #324]	; 0x144
 800b6fa:	f50d 7aa2 	add.w	sl, sp, #324	; 0x144
 800b6fe:	e1c3      	b.n	800ba88 <_svfwprintf_r+0xad8>
 800b700:	f50d 7aa4 	add.w	sl, sp, #328	; 0x148
 800b704:	250a      	movs	r5, #10
 800b706:	fbb3 f0f5 	udiv	r0, r3, r5
 800b70a:	fb05 3210 	mls	r2, r5, r0, r3
 800b70e:	3230      	adds	r2, #48	; 0x30
 800b710:	f84a 2d04 	str.w	r2, [sl, #-4]!
 800b714:	461a      	mov	r2, r3
 800b716:	2a09      	cmp	r2, #9
 800b718:	4603      	mov	r3, r0
 800b71a:	d8f4      	bhi.n	800b706 <_svfwprintf_r+0x756>
 800b71c:	e1b4      	b.n	800ba88 <_svfwprintf_r+0xad8>
 800b71e:	f003 020f 	and.w	r2, r3, #15
 800b722:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800b724:	091b      	lsrs	r3, r3, #4
 800b726:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800b72a:	f84a 2d04 	str.w	r2, [sl, #-4]!
 800b72e:	d1f6      	bne.n	800b71e <_svfwprintf_r+0x76e>
 800b730:	e1aa      	b.n	800ba88 <_svfwprintf_r+0xad8>
 800b732:	b91a      	cbnz	r2, 800b73c <_svfwprintf_r+0x78c>
 800b734:	07f8      	lsls	r0, r7, #31
 800b736:	d501      	bpl.n	800b73c <_svfwprintf_r+0x78c>
 800b738:	2330      	movs	r3, #48	; 0x30
 800b73a:	e7dd      	b.n	800b6f8 <_svfwprintf_r+0x748>
 800b73c:	f50d 7aa4 	add.w	sl, sp, #328	; 0x148
 800b740:	e1a2      	b.n	800ba88 <_svfwprintf_r+0xad8>
 800b742:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800b744:	e683      	b.n	800b44e <_svfwprintf_r+0x49e>
 800b746:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b748:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b74a:	1a9b      	subs	r3, r3, r2
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	9310      	str	r3, [sp, #64]	; 0x40
 800b750:	f77f ae93 	ble.w	800b47a <_svfwprintf_r+0x4ca>
 800b754:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b756:	2b10      	cmp	r3, #16
 800b758:	dc11      	bgt.n	800b77e <_svfwprintf_r+0x7ce>
 800b75a:	4a53      	ldr	r2, [pc, #332]	; (800b8a8 <_svfwprintf_r+0x8f8>)
 800b75c:	009b      	lsls	r3, r3, #2
 800b75e:	4649      	mov	r1, r9
 800b760:	4658      	mov	r0, fp
 800b762:	f000 fa8c 	bl	800bc7e <__ssputs_r>
 800b766:	3001      	adds	r0, #1
 800b768:	f47f ae87 	bne.w	800b47a <_svfwprintf_r+0x4ca>
 800b76c:	f1b8 0f00 	cmp.w	r8, #0
 800b770:	f43f ad54 	beq.w	800b21c <_svfwprintf_r+0x26c>
 800b774:	4641      	mov	r1, r8
 800b776:	4658      	mov	r0, fp
 800b778:	f7fd f846 	bl	8008808 <_free_r>
 800b77c:	e54e      	b.n	800b21c <_svfwprintf_r+0x26c>
 800b77e:	4a4a      	ldr	r2, [pc, #296]	; (800b8a8 <_svfwprintf_r+0x8f8>)
 800b780:	2340      	movs	r3, #64	; 0x40
 800b782:	4649      	mov	r1, r9
 800b784:	4658      	mov	r0, fp
 800b786:	f000 fa7a 	bl	800bc7e <__ssputs_r>
 800b78a:	3001      	adds	r0, #1
 800b78c:	d0ee      	beq.n	800b76c <_svfwprintf_r+0x7bc>
 800b78e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b790:	3b10      	subs	r3, #16
 800b792:	9310      	str	r3, [sp, #64]	; 0x40
 800b794:	e7de      	b.n	800b754 <_svfwprintf_r+0x7a4>
 800b796:	2340      	movs	r3, #64	; 0x40
 800b798:	4649      	mov	r1, r9
 800b79a:	4658      	mov	r0, fp
 800b79c:	f000 fa6f 	bl	800bc7e <__ssputs_r>
 800b7a0:	3001      	adds	r0, #1
 800b7a2:	d0e3      	beq.n	800b76c <_svfwprintf_r+0x7bc>
 800b7a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b7a6:	3b10      	subs	r3, #16
 800b7a8:	9310      	str	r3, [sp, #64]	; 0x40
 800b7aa:	e685      	b.n	800b4b8 <_svfwprintf_r+0x508>
 800b7ac:	2340      	movs	r3, #64	; 0x40
 800b7ae:	4649      	mov	r1, r9
 800b7b0:	4658      	mov	r0, fp
 800b7b2:	f000 fa64 	bl	800bc7e <__ssputs_r>
 800b7b6:	3001      	adds	r0, #1
 800b7b8:	d0d8      	beq.n	800b76c <_svfwprintf_r+0x7bc>
 800b7ba:	3e10      	subs	r6, #16
 800b7bc:	e68d      	b.n	800b4da <_svfwprintf_r+0x52a>
 800b7be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7c0:	2b65      	cmp	r3, #101	; 0x65
 800b7c2:	f240 80e5 	bls.w	800b990 <_svfwprintf_r+0x9e0>
 800b7c6:	ec51 0b18 	vmov	r0, r1, d8
 800b7ca:	2200      	movs	r2, #0
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	f7f5 f97b 	bl	8000ac8 <__aeabi_dcmpeq>
 800b7d2:	b358      	cbz	r0, 800b82c <_svfwprintf_r+0x87c>
 800b7d4:	4a35      	ldr	r2, [pc, #212]	; (800b8ac <_svfwprintf_r+0x8fc>)
 800b7d6:	2304      	movs	r3, #4
 800b7d8:	4649      	mov	r1, r9
 800b7da:	4658      	mov	r0, fp
 800b7dc:	f000 fa4f 	bl	800bc7e <__ssputs_r>
 800b7e0:	3001      	adds	r0, #1
 800b7e2:	d0c3      	beq.n	800b76c <_svfwprintf_r+0x7bc>
 800b7e4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800b7e8:	429a      	cmp	r2, r3
 800b7ea:	db02      	blt.n	800b7f2 <_svfwprintf_r+0x842>
 800b7ec:	07fb      	lsls	r3, r7, #31
 800b7ee:	f57f ae8d 	bpl.w	800b50c <_svfwprintf_r+0x55c>
 800b7f2:	2304      	movs	r3, #4
 800b7f4:	aa16      	add	r2, sp, #88	; 0x58
 800b7f6:	4649      	mov	r1, r9
 800b7f8:	4658      	mov	r0, fp
 800b7fa:	f000 fa40 	bl	800bc7e <__ssputs_r>
 800b7fe:	3001      	adds	r0, #1
 800b800:	d0b4      	beq.n	800b76c <_svfwprintf_r+0x7bc>
 800b802:	9c19      	ldr	r4, [sp, #100]	; 0x64
 800b804:	3c01      	subs	r4, #1
 800b806:	2c00      	cmp	r4, #0
 800b808:	f77f ae80 	ble.w	800b50c <_svfwprintf_r+0x55c>
 800b80c:	4d28      	ldr	r5, [pc, #160]	; (800b8b0 <_svfwprintf_r+0x900>)
 800b80e:	2c10      	cmp	r4, #16
 800b810:	dc02      	bgt.n	800b818 <_svfwprintf_r+0x868>
 800b812:	00a3      	lsls	r3, r4, #2
 800b814:	4a26      	ldr	r2, [pc, #152]	; (800b8b0 <_svfwprintf_r+0x900>)
 800b816:	e672      	b.n	800b4fe <_svfwprintf_r+0x54e>
 800b818:	2340      	movs	r3, #64	; 0x40
 800b81a:	462a      	mov	r2, r5
 800b81c:	4649      	mov	r1, r9
 800b81e:	4658      	mov	r0, fp
 800b820:	f000 fa2d 	bl	800bc7e <__ssputs_r>
 800b824:	3001      	adds	r0, #1
 800b826:	d0a1      	beq.n	800b76c <_svfwprintf_r+0x7bc>
 800b828:	3c10      	subs	r4, #16
 800b82a:	e7f0      	b.n	800b80e <_svfwprintf_r+0x85e>
 800b82c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800b82e:	2b00      	cmp	r3, #0
 800b830:	dc40      	bgt.n	800b8b4 <_svfwprintf_r+0x904>
 800b832:	4a1e      	ldr	r2, [pc, #120]	; (800b8ac <_svfwprintf_r+0x8fc>)
 800b834:	2304      	movs	r3, #4
 800b836:	4649      	mov	r1, r9
 800b838:	4658      	mov	r0, fp
 800b83a:	f000 fa20 	bl	800bc7e <__ssputs_r>
 800b83e:	3001      	adds	r0, #1
 800b840:	d094      	beq.n	800b76c <_svfwprintf_r+0x7bc>
 800b842:	e9dd 3218 	ldrd	r3, r2, [sp, #96]	; 0x60
 800b846:	4313      	orrs	r3, r2
 800b848:	f007 0201 	and.w	r2, r7, #1
 800b84c:	4313      	orrs	r3, r2
 800b84e:	f43f ae5d 	beq.w	800b50c <_svfwprintf_r+0x55c>
 800b852:	2304      	movs	r3, #4
 800b854:	aa16      	add	r2, sp, #88	; 0x58
 800b856:	4649      	mov	r1, r9
 800b858:	4658      	mov	r0, fp
 800b85a:	f000 fa10 	bl	800bc7e <__ssputs_r>
 800b85e:	3001      	adds	r0, #1
 800b860:	d084      	beq.n	800b76c <_svfwprintf_r+0x7bc>
 800b862:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800b864:	2c00      	cmp	r4, #0
 800b866:	da0c      	bge.n	800b882 <_svfwprintf_r+0x8d2>
 800b868:	4d11      	ldr	r5, [pc, #68]	; (800b8b0 <_svfwprintf_r+0x900>)
 800b86a:	4264      	negs	r4, r4
 800b86c:	2c10      	cmp	r4, #16
 800b86e:	dc0b      	bgt.n	800b888 <_svfwprintf_r+0x8d8>
 800b870:	4a0f      	ldr	r2, [pc, #60]	; (800b8b0 <_svfwprintf_r+0x900>)
 800b872:	00a3      	lsls	r3, r4, #2
 800b874:	4649      	mov	r1, r9
 800b876:	4658      	mov	r0, fp
 800b878:	f000 fa01 	bl	800bc7e <__ssputs_r>
 800b87c:	3001      	adds	r0, #1
 800b87e:	f43f af75 	beq.w	800b76c <_svfwprintf_r+0x7bc>
 800b882:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b884:	009b      	lsls	r3, r3, #2
 800b886:	e639      	b.n	800b4fc <_svfwprintf_r+0x54c>
 800b888:	2340      	movs	r3, #64	; 0x40
 800b88a:	462a      	mov	r2, r5
 800b88c:	4649      	mov	r1, r9
 800b88e:	4658      	mov	r0, fp
 800b890:	f000 f9f5 	bl	800bc7e <__ssputs_r>
 800b894:	3001      	adds	r0, #1
 800b896:	f43f af69 	beq.w	800b76c <_svfwprintf_r+0x7bc>
 800b89a:	3c10      	subs	r4, #16
 800b89c:	e7e6      	b.n	800b86c <_svfwprintf_r+0x8bc>
 800b89e:	bf00      	nop
 800b8a0:	0801139c 	.word	0x0801139c
 800b8a4:	08011358 	.word	0x08011358
 800b8a8:	080113e8 	.word	0x080113e8
 800b8ac:	080113e0 	.word	0x080113e0
 800b8b0:	08011428 	.word	0x08011428
 800b8b4:	9c19      	ldr	r4, [sp, #100]	; 0x64
 800b8b6:	f344 041d 	sbfx	r4, r4, #0, #30
 800b8ba:	42ac      	cmp	r4, r5
 800b8bc:	bfa8      	it	ge
 800b8be:	462c      	movge	r4, r5
 800b8c0:	2c00      	cmp	r4, #0
 800b8c2:	dc20      	bgt.n	800b906 <_svfwprintf_r+0x956>
 800b8c4:	2c00      	cmp	r4, #0
 800b8c6:	bfac      	ite	ge
 800b8c8:	1b2e      	subge	r6, r5, r4
 800b8ca:	462e      	movlt	r6, r5
 800b8cc:	2e00      	cmp	r6, #0
 800b8ce:	dd0b      	ble.n	800b8e8 <_svfwprintf_r+0x938>
 800b8d0:	4c72      	ldr	r4, [pc, #456]	; (800ba9c <_svfwprintf_r+0xaec>)
 800b8d2:	2e10      	cmp	r6, #16
 800b8d4:	dc20      	bgt.n	800b918 <_svfwprintf_r+0x968>
 800b8d6:	4a71      	ldr	r2, [pc, #452]	; (800ba9c <_svfwprintf_r+0xaec>)
 800b8d8:	00b3      	lsls	r3, r6, #2
 800b8da:	4649      	mov	r1, r9
 800b8dc:	4658      	mov	r0, fp
 800b8de:	f000 f9ce 	bl	800bc7e <__ssputs_r>
 800b8e2:	3001      	adds	r0, #1
 800b8e4:	f43f af42 	beq.w	800b76c <_svfwprintf_r+0x7bc>
 800b8e8:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800b8ec:	429a      	cmp	r2, r3
 800b8ee:	ea4f 0585 	mov.w	r5, r5, lsl #2
 800b8f2:	da1c      	bge.n	800b92e <_svfwprintf_r+0x97e>
 800b8f4:	2304      	movs	r3, #4
 800b8f6:	aa16      	add	r2, sp, #88	; 0x58
 800b8f8:	4649      	mov	r1, r9
 800b8fa:	4658      	mov	r0, fp
 800b8fc:	f000 f9bf 	bl	800bc7e <__ssputs_r>
 800b900:	3001      	adds	r0, #1
 800b902:	d116      	bne.n	800b932 <_svfwprintf_r+0x982>
 800b904:	e732      	b.n	800b76c <_svfwprintf_r+0x7bc>
 800b906:	00a3      	lsls	r3, r4, #2
 800b908:	4652      	mov	r2, sl
 800b90a:	4649      	mov	r1, r9
 800b90c:	4658      	mov	r0, fp
 800b90e:	f000 f9b6 	bl	800bc7e <__ssputs_r>
 800b912:	3001      	adds	r0, #1
 800b914:	d1d6      	bne.n	800b8c4 <_svfwprintf_r+0x914>
 800b916:	e729      	b.n	800b76c <_svfwprintf_r+0x7bc>
 800b918:	2340      	movs	r3, #64	; 0x40
 800b91a:	4622      	mov	r2, r4
 800b91c:	4649      	mov	r1, r9
 800b91e:	4658      	mov	r0, fp
 800b920:	f000 f9ad 	bl	800bc7e <__ssputs_r>
 800b924:	3001      	adds	r0, #1
 800b926:	f43f af21 	beq.w	800b76c <_svfwprintf_r+0x7bc>
 800b92a:	3e10      	subs	r6, #16
 800b92c:	e7d1      	b.n	800b8d2 <_svfwprintf_r+0x922>
 800b92e:	07fe      	lsls	r6, r7, #31
 800b930:	d4e0      	bmi.n	800b8f4 <_svfwprintf_r+0x944>
 800b932:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b934:	ebc5 0483 	rsb	r4, r5, r3, lsl #2
 800b938:	10a2      	asrs	r2, r4, #2
 800b93a:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800b93c:	1b1c      	subs	r4, r3, r4
 800b93e:	4294      	cmp	r4, r2
 800b940:	bfa8      	it	ge
 800b942:	4614      	movge	r4, r2
 800b944:	2c00      	cmp	r4, #0
 800b946:	dd09      	ble.n	800b95c <_svfwprintf_r+0x9ac>
 800b948:	00a3      	lsls	r3, r4, #2
 800b94a:	eb0a 0205 	add.w	r2, sl, r5
 800b94e:	4649      	mov	r1, r9
 800b950:	4658      	mov	r0, fp
 800b952:	f000 f994 	bl	800bc7e <__ssputs_r>
 800b956:	3001      	adds	r0, #1
 800b958:	f43f af08 	beq.w	800b76c <_svfwprintf_r+0x7bc>
 800b95c:	e9dd 3518 	ldrd	r3, r5, [sp, #96]	; 0x60
 800b960:	2c00      	cmp	r4, #0
 800b962:	eba5 0503 	sub.w	r5, r5, r3
 800b966:	bfa8      	it	ge
 800b968:	1b2d      	subge	r5, r5, r4
 800b96a:	2d00      	cmp	r5, #0
 800b96c:	f77f adce 	ble.w	800b50c <_svfwprintf_r+0x55c>
 800b970:	4c4a      	ldr	r4, [pc, #296]	; (800ba9c <_svfwprintf_r+0xaec>)
 800b972:	2d10      	cmp	r5, #16
 800b974:	dc01      	bgt.n	800b97a <_svfwprintf_r+0x9ca>
 800b976:	00ab      	lsls	r3, r5, #2
 800b978:	e74c      	b.n	800b814 <_svfwprintf_r+0x864>
 800b97a:	2340      	movs	r3, #64	; 0x40
 800b97c:	4622      	mov	r2, r4
 800b97e:	4649      	mov	r1, r9
 800b980:	4658      	mov	r0, fp
 800b982:	f000 f97c 	bl	800bc7e <__ssputs_r>
 800b986:	3001      	adds	r0, #1
 800b988:	f43f aef0 	beq.w	800b76c <_svfwprintf_r+0x7bc>
 800b98c:	3d10      	subs	r5, #16
 800b98e:	e7f0      	b.n	800b972 <_svfwprintf_r+0x9c2>
 800b990:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b992:	2b01      	cmp	r3, #1
 800b994:	4652      	mov	r2, sl
 800b996:	f04f 0304 	mov.w	r3, #4
 800b99a:	4649      	mov	r1, r9
 800b99c:	4658      	mov	r0, fp
 800b99e:	dc01      	bgt.n	800b9a4 <_svfwprintf_r+0x9f4>
 800b9a0:	07fc      	lsls	r4, r7, #31
 800b9a2:	d51b      	bpl.n	800b9dc <_svfwprintf_r+0xa2c>
 800b9a4:	f000 f96b 	bl	800bc7e <__ssputs_r>
 800b9a8:	3001      	adds	r0, #1
 800b9aa:	f43f aedf 	beq.w	800b76c <_svfwprintf_r+0x7bc>
 800b9ae:	2304      	movs	r3, #4
 800b9b0:	aa16      	add	r2, sp, #88	; 0x58
 800b9b2:	4649      	mov	r1, r9
 800b9b4:	4658      	mov	r0, fp
 800b9b6:	f000 f962 	bl	800bc7e <__ssputs_r>
 800b9ba:	3001      	adds	r0, #1
 800b9bc:	f43f aed6 	beq.w	800b76c <_svfwprintf_r+0x7bc>
 800b9c0:	9c19      	ldr	r4, [sp, #100]	; 0x64
 800b9c2:	ec51 0b18 	vmov	r0, r1, d8
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	3c01      	subs	r4, #1
 800b9cc:	f7f5 f87c 	bl	8000ac8 <__aeabi_dcmpeq>
 800b9d0:	b968      	cbnz	r0, 800b9ee <_svfwprintf_r+0xa3e>
 800b9d2:	00a3      	lsls	r3, r4, #2
 800b9d4:	f10a 0204 	add.w	r2, sl, #4
 800b9d8:	4649      	mov	r1, r9
 800b9da:	4658      	mov	r0, fp
 800b9dc:	f000 f94f 	bl	800bc7e <__ssputs_r>
 800b9e0:	3001      	adds	r0, #1
 800b9e2:	f43f aec3 	beq.w	800b76c <_svfwprintf_r+0x7bc>
 800b9e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b9e8:	aa1c      	add	r2, sp, #112	; 0x70
 800b9ea:	009b      	lsls	r3, r3, #2
 800b9ec:	e587      	b.n	800b4fe <_svfwprintf_r+0x54e>
 800b9ee:	2c00      	cmp	r4, #0
 800b9f0:	ddf9      	ble.n	800b9e6 <_svfwprintf_r+0xa36>
 800b9f2:	4d2a      	ldr	r5, [pc, #168]	; (800ba9c <_svfwprintf_r+0xaec>)
 800b9f4:	2c10      	cmp	r4, #16
 800b9f6:	dc02      	bgt.n	800b9fe <_svfwprintf_r+0xa4e>
 800b9f8:	4a28      	ldr	r2, [pc, #160]	; (800ba9c <_svfwprintf_r+0xaec>)
 800b9fa:	00a3      	lsls	r3, r4, #2
 800b9fc:	e7ec      	b.n	800b9d8 <_svfwprintf_r+0xa28>
 800b9fe:	2340      	movs	r3, #64	; 0x40
 800ba00:	462a      	mov	r2, r5
 800ba02:	4649      	mov	r1, r9
 800ba04:	4658      	mov	r0, fp
 800ba06:	f000 f93a 	bl	800bc7e <__ssputs_r>
 800ba0a:	3001      	adds	r0, #1
 800ba0c:	f43f aeae 	beq.w	800b76c <_svfwprintf_r+0x7bc>
 800ba10:	3c10      	subs	r4, #16
 800ba12:	e7ef      	b.n	800b9f4 <_svfwprintf_r+0xa44>
 800ba14:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ba16:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ba18:	1a9c      	subs	r4, r3, r2
 800ba1a:	2c00      	cmp	r4, #0
 800ba1c:	f77f ad79 	ble.w	800b512 <_svfwprintf_r+0x562>
 800ba20:	2c10      	cmp	r4, #16
 800ba22:	dc09      	bgt.n	800ba38 <_svfwprintf_r+0xa88>
 800ba24:	4a1e      	ldr	r2, [pc, #120]	; (800baa0 <_svfwprintf_r+0xaf0>)
 800ba26:	00a3      	lsls	r3, r4, #2
 800ba28:	4649      	mov	r1, r9
 800ba2a:	4658      	mov	r0, fp
 800ba2c:	f000 f927 	bl	800bc7e <__ssputs_r>
 800ba30:	3001      	adds	r0, #1
 800ba32:	f47f ad6e 	bne.w	800b512 <_svfwprintf_r+0x562>
 800ba36:	e699      	b.n	800b76c <_svfwprintf_r+0x7bc>
 800ba38:	4a19      	ldr	r2, [pc, #100]	; (800baa0 <_svfwprintf_r+0xaf0>)
 800ba3a:	2340      	movs	r3, #64	; 0x40
 800ba3c:	4649      	mov	r1, r9
 800ba3e:	4658      	mov	r0, fp
 800ba40:	f000 f91d 	bl	800bc7e <__ssputs_r>
 800ba44:	3001      	adds	r0, #1
 800ba46:	f43f ae91 	beq.w	800b76c <_svfwprintf_r+0x7bc>
 800ba4a:	3c10      	subs	r4, #16
 800ba4c:	e7e8      	b.n	800ba20 <_svfwprintf_r+0xa70>
 800ba4e:	4639      	mov	r1, r7
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	f43f add6 	beq.w	800b602 <_svfwprintf_r+0x652>
 800ba56:	2a01      	cmp	r2, #1
 800ba58:	f43f ae4b 	beq.w	800b6f2 <_svfwprintf_r+0x742>
 800ba5c:	2a02      	cmp	r2, #2
 800ba5e:	f50d 7aa4 	add.w	sl, sp, #328	; 0x148
 800ba62:	f43f ae5c 	beq.w	800b71e <_svfwprintf_r+0x76e>
 800ba66:	f003 0207 	and.w	r2, r3, #7
 800ba6a:	3230      	adds	r2, #48	; 0x30
 800ba6c:	08db      	lsrs	r3, r3, #3
 800ba6e:	4650      	mov	r0, sl
 800ba70:	f84a 2d04 	str.w	r2, [sl, #-4]!
 800ba74:	d1f7      	bne.n	800ba66 <_svfwprintf_r+0xab6>
 800ba76:	07cd      	lsls	r5, r1, #31
 800ba78:	d506      	bpl.n	800ba88 <_svfwprintf_r+0xad8>
 800ba7a:	2a30      	cmp	r2, #48	; 0x30
 800ba7c:	d004      	beq.n	800ba88 <_svfwprintf_r+0xad8>
 800ba7e:	2330      	movs	r3, #48	; 0x30
 800ba80:	f84a 3c04 	str.w	r3, [sl, #-4]
 800ba84:	f1a0 0a08 	sub.w	sl, r0, #8
 800ba88:	ab52      	add	r3, sp, #328	; 0x148
 800ba8a:	4626      	mov	r6, r4
 800ba8c:	eba3 040a 	sub.w	r4, r3, sl
 800ba90:	10a4      	asrs	r4, r4, #2
 800ba92:	460f      	mov	r7, r1
 800ba94:	f04f 0800 	mov.w	r8, #0
 800ba98:	4645      	mov	r5, r8
 800ba9a:	e4d8      	b.n	800b44e <_svfwprintf_r+0x49e>
 800ba9c:	08011428 	.word	0x08011428
 800baa0:	080113e8 	.word	0x080113e8

0800baa4 <wcslen>:
 800baa4:	4602      	mov	r2, r0
 800baa6:	4613      	mov	r3, r2
 800baa8:	3204      	adds	r2, #4
 800baaa:	6819      	ldr	r1, [r3, #0]
 800baac:	2900      	cmp	r1, #0
 800baae:	d1fa      	bne.n	800baa6 <wcslen+0x2>
 800bab0:	1a18      	subs	r0, r3, r0
 800bab2:	1080      	asrs	r0, r0, #2
 800bab4:	4770      	bx	lr

0800bab6 <wmemchr>:
 800bab6:	b530      	push	{r4, r5, lr}
 800bab8:	2400      	movs	r4, #0
 800baba:	4294      	cmp	r4, r2
 800babc:	4603      	mov	r3, r0
 800babe:	d102      	bne.n	800bac6 <wmemchr+0x10>
 800bac0:	2300      	movs	r3, #0
 800bac2:	4618      	mov	r0, r3
 800bac4:	bd30      	pop	{r4, r5, pc}
 800bac6:	681d      	ldr	r5, [r3, #0]
 800bac8:	428d      	cmp	r5, r1
 800baca:	f100 0004 	add.w	r0, r0, #4
 800bace:	d0f8      	beq.n	800bac2 <wmemchr+0xc>
 800bad0:	3401      	adds	r4, #1
 800bad2:	e7f2      	b.n	800baba <wmemchr+0x4>

0800bad4 <__assert_func>:
 800bad4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bad6:	4614      	mov	r4, r2
 800bad8:	461a      	mov	r2, r3
 800bada:	4b09      	ldr	r3, [pc, #36]	; (800bb00 <__assert_func+0x2c>)
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	4605      	mov	r5, r0
 800bae0:	68d8      	ldr	r0, [r3, #12]
 800bae2:	b14c      	cbz	r4, 800baf8 <__assert_func+0x24>
 800bae4:	4b07      	ldr	r3, [pc, #28]	; (800bb04 <__assert_func+0x30>)
 800bae6:	9100      	str	r1, [sp, #0]
 800bae8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800baec:	4906      	ldr	r1, [pc, #24]	; (800bb08 <__assert_func+0x34>)
 800baee:	462b      	mov	r3, r5
 800baf0:	f000 f858 	bl	800bba4 <fiprintf>
 800baf4:	f000 f92b 	bl	800bd4e <abort>
 800baf8:	4b04      	ldr	r3, [pc, #16]	; (800bb0c <__assert_func+0x38>)
 800bafa:	461c      	mov	r4, r3
 800bafc:	e7f3      	b.n	800bae6 <__assert_func+0x12>
 800bafe:	bf00      	nop
 800bb00:	20000014 	.word	0x20000014
 800bb04:	08011468 	.word	0x08011468
 800bb08:	08011475 	.word	0x08011475
 800bb0c:	080114a3 	.word	0x080114a3

0800bb10 <btowc>:
 800bb10:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb12:	1c43      	adds	r3, r0, #1
 800bb14:	b087      	sub	sp, #28
 800bb16:	d103      	bne.n	800bb20 <btowc+0x10>
 800bb18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bb1c:	b007      	add	sp, #28
 800bb1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb20:	4d1c      	ldr	r5, [pc, #112]	; (800bb94 <btowc+0x84>)
 800bb22:	f88d 000b 	strb.w	r0, [sp, #11]
 800bb26:	ae04      	add	r6, sp, #16
 800bb28:	2208      	movs	r2, #8
 800bb2a:	2100      	movs	r1, #0
 800bb2c:	4630      	mov	r0, r6
 800bb2e:	f7fc fe63 	bl	80087f8 <memset>
 800bb32:	682f      	ldr	r7, [r5, #0]
 800bb34:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800bb36:	b9fc      	cbnz	r4, 800bb78 <btowc+0x68>
 800bb38:	2050      	movs	r0, #80	; 0x50
 800bb3a:	f7fc fe3f 	bl	80087bc <malloc>
 800bb3e:	4602      	mov	r2, r0
 800bb40:	65b8      	str	r0, [r7, #88]	; 0x58
 800bb42:	b920      	cbnz	r0, 800bb4e <btowc+0x3e>
 800bb44:	4b14      	ldr	r3, [pc, #80]	; (800bb98 <btowc+0x88>)
 800bb46:	4815      	ldr	r0, [pc, #84]	; (800bb9c <btowc+0x8c>)
 800bb48:	2118      	movs	r1, #24
 800bb4a:	f7ff ffc3 	bl	800bad4 <__assert_func>
 800bb4e:	682b      	ldr	r3, [r5, #0]
 800bb50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb52:	e9c3 4400 	strd	r4, r4, [r3]
 800bb56:	e9c3 4402 	strd	r4, r4, [r3, #8]
 800bb5a:	e9c3 4404 	strd	r4, r4, [r3, #16]
 800bb5e:	e9c3 440a 	strd	r4, r4, [r3, #40]	; 0x28
 800bb62:	e9c3 440c 	strd	r4, r4, [r3, #48]	; 0x30
 800bb66:	e9c3 440e 	strd	r4, r4, [r3, #56]	; 0x38
 800bb6a:	e9c3 4410 	strd	r4, r4, [r3, #64]	; 0x40
 800bb6e:	e9c3 4412 	strd	r4, r4, [r3, #72]	; 0x48
 800bb72:	619c      	str	r4, [r3, #24]
 800bb74:	771c      	strb	r4, [r3, #28]
 800bb76:	625c      	str	r4, [r3, #36]	; 0x24
 800bb78:	4b09      	ldr	r3, [pc, #36]	; (800bba0 <btowc+0x90>)
 800bb7a:	9600      	str	r6, [sp, #0]
 800bb7c:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
 800bb80:	6828      	ldr	r0, [r5, #0]
 800bb82:	2301      	movs	r3, #1
 800bb84:	f10d 020b 	add.w	r2, sp, #11
 800bb88:	a903      	add	r1, sp, #12
 800bb8a:	47a0      	blx	r4
 800bb8c:	2801      	cmp	r0, #1
 800bb8e:	d8c3      	bhi.n	800bb18 <btowc+0x8>
 800bb90:	9803      	ldr	r0, [sp, #12]
 800bb92:	e7c3      	b.n	800bb1c <btowc+0xc>
 800bb94:	20000014 	.word	0x20000014
 800bb98:	08011129 	.word	0x08011129
 800bb9c:	080114a4 	.word	0x080114a4
 800bba0:	20000078 	.word	0x20000078

0800bba4 <fiprintf>:
 800bba4:	b40e      	push	{r1, r2, r3}
 800bba6:	b503      	push	{r0, r1, lr}
 800bba8:	4601      	mov	r1, r0
 800bbaa:	ab03      	add	r3, sp, #12
 800bbac:	4805      	ldr	r0, [pc, #20]	; (800bbc4 <fiprintf+0x20>)
 800bbae:	f853 2b04 	ldr.w	r2, [r3], #4
 800bbb2:	6800      	ldr	r0, [r0, #0]
 800bbb4:	9301      	str	r3, [sp, #4]
 800bbb6:	f7ff f801 	bl	800abbc <_vfiprintf_r>
 800bbba:	b002      	add	sp, #8
 800bbbc:	f85d eb04 	ldr.w	lr, [sp], #4
 800bbc0:	b003      	add	sp, #12
 800bbc2:	4770      	bx	lr
 800bbc4:	20000014 	.word	0x20000014

0800bbc8 <__ascii_mbtowc>:
 800bbc8:	b082      	sub	sp, #8
 800bbca:	b901      	cbnz	r1, 800bbce <__ascii_mbtowc+0x6>
 800bbcc:	a901      	add	r1, sp, #4
 800bbce:	b142      	cbz	r2, 800bbe2 <__ascii_mbtowc+0x1a>
 800bbd0:	b14b      	cbz	r3, 800bbe6 <__ascii_mbtowc+0x1e>
 800bbd2:	7813      	ldrb	r3, [r2, #0]
 800bbd4:	600b      	str	r3, [r1, #0]
 800bbd6:	7812      	ldrb	r2, [r2, #0]
 800bbd8:	1e10      	subs	r0, r2, #0
 800bbda:	bf18      	it	ne
 800bbdc:	2001      	movne	r0, #1
 800bbde:	b002      	add	sp, #8
 800bbe0:	4770      	bx	lr
 800bbe2:	4610      	mov	r0, r2
 800bbe4:	e7fb      	b.n	800bbde <__ascii_mbtowc+0x16>
 800bbe6:	f06f 0001 	mvn.w	r0, #1
 800bbea:	e7f8      	b.n	800bbde <__ascii_mbtowc+0x16>

0800bbec <memmove>:
 800bbec:	4288      	cmp	r0, r1
 800bbee:	b510      	push	{r4, lr}
 800bbf0:	eb01 0402 	add.w	r4, r1, r2
 800bbf4:	d902      	bls.n	800bbfc <memmove+0x10>
 800bbf6:	4284      	cmp	r4, r0
 800bbf8:	4623      	mov	r3, r4
 800bbfa:	d807      	bhi.n	800bc0c <memmove+0x20>
 800bbfc:	1e43      	subs	r3, r0, #1
 800bbfe:	42a1      	cmp	r1, r4
 800bc00:	d008      	beq.n	800bc14 <memmove+0x28>
 800bc02:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bc06:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bc0a:	e7f8      	b.n	800bbfe <memmove+0x12>
 800bc0c:	4402      	add	r2, r0
 800bc0e:	4601      	mov	r1, r0
 800bc10:	428a      	cmp	r2, r1
 800bc12:	d100      	bne.n	800bc16 <memmove+0x2a>
 800bc14:	bd10      	pop	{r4, pc}
 800bc16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bc1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bc1e:	e7f7      	b.n	800bc10 <memmove+0x24>

0800bc20 <_realloc_r>:
 800bc20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc24:	4680      	mov	r8, r0
 800bc26:	4614      	mov	r4, r2
 800bc28:	460e      	mov	r6, r1
 800bc2a:	b921      	cbnz	r1, 800bc36 <_realloc_r+0x16>
 800bc2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bc30:	4611      	mov	r1, r2
 800bc32:	f7fc be55 	b.w	80088e0 <_malloc_r>
 800bc36:	b92a      	cbnz	r2, 800bc44 <_realloc_r+0x24>
 800bc38:	f7fc fde6 	bl	8008808 <_free_r>
 800bc3c:	4625      	mov	r5, r4
 800bc3e:	4628      	mov	r0, r5
 800bc40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc44:	f000 f88a 	bl	800bd5c <_malloc_usable_size_r>
 800bc48:	4284      	cmp	r4, r0
 800bc4a:	4607      	mov	r7, r0
 800bc4c:	d802      	bhi.n	800bc54 <_realloc_r+0x34>
 800bc4e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bc52:	d812      	bhi.n	800bc7a <_realloc_r+0x5a>
 800bc54:	4621      	mov	r1, r4
 800bc56:	4640      	mov	r0, r8
 800bc58:	f7fc fe42 	bl	80088e0 <_malloc_r>
 800bc5c:	4605      	mov	r5, r0
 800bc5e:	2800      	cmp	r0, #0
 800bc60:	d0ed      	beq.n	800bc3e <_realloc_r+0x1e>
 800bc62:	42bc      	cmp	r4, r7
 800bc64:	4622      	mov	r2, r4
 800bc66:	4631      	mov	r1, r6
 800bc68:	bf28      	it	cs
 800bc6a:	463a      	movcs	r2, r7
 800bc6c:	f7fc fdb6 	bl	80087dc <memcpy>
 800bc70:	4631      	mov	r1, r6
 800bc72:	4640      	mov	r0, r8
 800bc74:	f7fc fdc8 	bl	8008808 <_free_r>
 800bc78:	e7e1      	b.n	800bc3e <_realloc_r+0x1e>
 800bc7a:	4635      	mov	r5, r6
 800bc7c:	e7df      	b.n	800bc3e <_realloc_r+0x1e>

0800bc7e <__ssputs_r>:
 800bc7e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc82:	688e      	ldr	r6, [r1, #8]
 800bc84:	429e      	cmp	r6, r3
 800bc86:	4682      	mov	sl, r0
 800bc88:	460c      	mov	r4, r1
 800bc8a:	4690      	mov	r8, r2
 800bc8c:	461f      	mov	r7, r3
 800bc8e:	d838      	bhi.n	800bd02 <__ssputs_r+0x84>
 800bc90:	898a      	ldrh	r2, [r1, #12]
 800bc92:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bc96:	d032      	beq.n	800bcfe <__ssputs_r+0x80>
 800bc98:	6825      	ldr	r5, [r4, #0]
 800bc9a:	6909      	ldr	r1, [r1, #16]
 800bc9c:	eba5 0901 	sub.w	r9, r5, r1
 800bca0:	6965      	ldr	r5, [r4, #20]
 800bca2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bca6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bcaa:	3301      	adds	r3, #1
 800bcac:	444b      	add	r3, r9
 800bcae:	106d      	asrs	r5, r5, #1
 800bcb0:	429d      	cmp	r5, r3
 800bcb2:	bf38      	it	cc
 800bcb4:	461d      	movcc	r5, r3
 800bcb6:	0553      	lsls	r3, r2, #21
 800bcb8:	d531      	bpl.n	800bd1e <__ssputs_r+0xa0>
 800bcba:	4629      	mov	r1, r5
 800bcbc:	f7fc fe10 	bl	80088e0 <_malloc_r>
 800bcc0:	4606      	mov	r6, r0
 800bcc2:	b950      	cbnz	r0, 800bcda <__ssputs_r+0x5c>
 800bcc4:	230c      	movs	r3, #12
 800bcc6:	f8ca 3000 	str.w	r3, [sl]
 800bcca:	89a3      	ldrh	r3, [r4, #12]
 800bccc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bcd0:	81a3      	strh	r3, [r4, #12]
 800bcd2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bcd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcda:	6921      	ldr	r1, [r4, #16]
 800bcdc:	464a      	mov	r2, r9
 800bcde:	f7fc fd7d 	bl	80087dc <memcpy>
 800bce2:	89a3      	ldrh	r3, [r4, #12]
 800bce4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bce8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bcec:	81a3      	strh	r3, [r4, #12]
 800bcee:	6126      	str	r6, [r4, #16]
 800bcf0:	6165      	str	r5, [r4, #20]
 800bcf2:	444e      	add	r6, r9
 800bcf4:	eba5 0509 	sub.w	r5, r5, r9
 800bcf8:	6026      	str	r6, [r4, #0]
 800bcfa:	60a5      	str	r5, [r4, #8]
 800bcfc:	463e      	mov	r6, r7
 800bcfe:	42be      	cmp	r6, r7
 800bd00:	d900      	bls.n	800bd04 <__ssputs_r+0x86>
 800bd02:	463e      	mov	r6, r7
 800bd04:	6820      	ldr	r0, [r4, #0]
 800bd06:	4632      	mov	r2, r6
 800bd08:	4641      	mov	r1, r8
 800bd0a:	f7ff ff6f 	bl	800bbec <memmove>
 800bd0e:	68a3      	ldr	r3, [r4, #8]
 800bd10:	1b9b      	subs	r3, r3, r6
 800bd12:	60a3      	str	r3, [r4, #8]
 800bd14:	6823      	ldr	r3, [r4, #0]
 800bd16:	4433      	add	r3, r6
 800bd18:	6023      	str	r3, [r4, #0]
 800bd1a:	2000      	movs	r0, #0
 800bd1c:	e7db      	b.n	800bcd6 <__ssputs_r+0x58>
 800bd1e:	462a      	mov	r2, r5
 800bd20:	f7ff ff7e 	bl	800bc20 <_realloc_r>
 800bd24:	4606      	mov	r6, r0
 800bd26:	2800      	cmp	r0, #0
 800bd28:	d1e1      	bne.n	800bcee <__ssputs_r+0x70>
 800bd2a:	6921      	ldr	r1, [r4, #16]
 800bd2c:	4650      	mov	r0, sl
 800bd2e:	f7fc fd6b 	bl	8008808 <_free_r>
 800bd32:	e7c7      	b.n	800bcc4 <__ssputs_r+0x46>

0800bd34 <__ascii_wctomb>:
 800bd34:	b149      	cbz	r1, 800bd4a <__ascii_wctomb+0x16>
 800bd36:	2aff      	cmp	r2, #255	; 0xff
 800bd38:	bf85      	ittet	hi
 800bd3a:	238a      	movhi	r3, #138	; 0x8a
 800bd3c:	6003      	strhi	r3, [r0, #0]
 800bd3e:	700a      	strbls	r2, [r1, #0]
 800bd40:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800bd44:	bf98      	it	ls
 800bd46:	2001      	movls	r0, #1
 800bd48:	4770      	bx	lr
 800bd4a:	4608      	mov	r0, r1
 800bd4c:	4770      	bx	lr

0800bd4e <abort>:
 800bd4e:	b508      	push	{r3, lr}
 800bd50:	2006      	movs	r0, #6
 800bd52:	f000 f833 	bl	800bdbc <raise>
 800bd56:	2001      	movs	r0, #1
 800bd58:	f7f6 f9e6 	bl	8002128 <_exit>

0800bd5c <_malloc_usable_size_r>:
 800bd5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bd60:	1f18      	subs	r0, r3, #4
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	bfbc      	itt	lt
 800bd66:	580b      	ldrlt	r3, [r1, r0]
 800bd68:	18c0      	addlt	r0, r0, r3
 800bd6a:	4770      	bx	lr

0800bd6c <_raise_r>:
 800bd6c:	291f      	cmp	r1, #31
 800bd6e:	b538      	push	{r3, r4, r5, lr}
 800bd70:	4604      	mov	r4, r0
 800bd72:	460d      	mov	r5, r1
 800bd74:	d904      	bls.n	800bd80 <_raise_r+0x14>
 800bd76:	2316      	movs	r3, #22
 800bd78:	6003      	str	r3, [r0, #0]
 800bd7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bd7e:	bd38      	pop	{r3, r4, r5, pc}
 800bd80:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bd82:	b112      	cbz	r2, 800bd8a <_raise_r+0x1e>
 800bd84:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bd88:	b94b      	cbnz	r3, 800bd9e <_raise_r+0x32>
 800bd8a:	4620      	mov	r0, r4
 800bd8c:	f000 f830 	bl	800bdf0 <_getpid_r>
 800bd90:	462a      	mov	r2, r5
 800bd92:	4601      	mov	r1, r0
 800bd94:	4620      	mov	r0, r4
 800bd96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bd9a:	f000 b817 	b.w	800bdcc <_kill_r>
 800bd9e:	2b01      	cmp	r3, #1
 800bda0:	d00a      	beq.n	800bdb8 <_raise_r+0x4c>
 800bda2:	1c59      	adds	r1, r3, #1
 800bda4:	d103      	bne.n	800bdae <_raise_r+0x42>
 800bda6:	2316      	movs	r3, #22
 800bda8:	6003      	str	r3, [r0, #0]
 800bdaa:	2001      	movs	r0, #1
 800bdac:	e7e7      	b.n	800bd7e <_raise_r+0x12>
 800bdae:	2400      	movs	r4, #0
 800bdb0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bdb4:	4628      	mov	r0, r5
 800bdb6:	4798      	blx	r3
 800bdb8:	2000      	movs	r0, #0
 800bdba:	e7e0      	b.n	800bd7e <_raise_r+0x12>

0800bdbc <raise>:
 800bdbc:	4b02      	ldr	r3, [pc, #8]	; (800bdc8 <raise+0xc>)
 800bdbe:	4601      	mov	r1, r0
 800bdc0:	6818      	ldr	r0, [r3, #0]
 800bdc2:	f7ff bfd3 	b.w	800bd6c <_raise_r>
 800bdc6:	bf00      	nop
 800bdc8:	20000014 	.word	0x20000014

0800bdcc <_kill_r>:
 800bdcc:	b538      	push	{r3, r4, r5, lr}
 800bdce:	4d07      	ldr	r5, [pc, #28]	; (800bdec <_kill_r+0x20>)
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	4604      	mov	r4, r0
 800bdd4:	4608      	mov	r0, r1
 800bdd6:	4611      	mov	r1, r2
 800bdd8:	602b      	str	r3, [r5, #0]
 800bdda:	f7f6 f995 	bl	8002108 <_kill>
 800bdde:	1c43      	adds	r3, r0, #1
 800bde0:	d102      	bne.n	800bde8 <_kill_r+0x1c>
 800bde2:	682b      	ldr	r3, [r5, #0]
 800bde4:	b103      	cbz	r3, 800bde8 <_kill_r+0x1c>
 800bde6:	6023      	str	r3, [r4, #0]
 800bde8:	bd38      	pop	{r3, r4, r5, pc}
 800bdea:	bf00      	nop
 800bdec:	20000438 	.word	0x20000438

0800bdf0 <_getpid_r>:
 800bdf0:	f7f6 b982 	b.w	80020f8 <_getpid>
 800bdf4:	0000      	movs	r0, r0
	...

0800bdf8 <exp>:
 800bdf8:	b538      	push	{r3, r4, r5, lr}
 800bdfa:	ed2d 8b02 	vpush	{d8}
 800bdfe:	ec55 4b10 	vmov	r4, r5, d0
 800be02:	f000 f8b1 	bl	800bf68 <__ieee754_exp>
 800be06:	eeb0 8a40 	vmov.f32	s16, s0
 800be0a:	eef0 8a60 	vmov.f32	s17, s1
 800be0e:	ec45 4b10 	vmov	d0, r4, r5
 800be12:	f001 f846 	bl	800cea2 <finite>
 800be16:	b168      	cbz	r0, 800be34 <exp+0x3c>
 800be18:	a317      	add	r3, pc, #92	; (adr r3, 800be78 <exp+0x80>)
 800be1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be1e:	4620      	mov	r0, r4
 800be20:	4629      	mov	r1, r5
 800be22:	f7f4 fe79 	bl	8000b18 <__aeabi_dcmpgt>
 800be26:	b160      	cbz	r0, 800be42 <exp+0x4a>
 800be28:	f7fc fa6c 	bl	8008304 <__errno>
 800be2c:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 800be68 <exp+0x70>
 800be30:	2322      	movs	r3, #34	; 0x22
 800be32:	6003      	str	r3, [r0, #0]
 800be34:	eeb0 0a48 	vmov.f32	s0, s16
 800be38:	eef0 0a68 	vmov.f32	s1, s17
 800be3c:	ecbd 8b02 	vpop	{d8}
 800be40:	bd38      	pop	{r3, r4, r5, pc}
 800be42:	a30f      	add	r3, pc, #60	; (adr r3, 800be80 <exp+0x88>)
 800be44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be48:	4620      	mov	r0, r4
 800be4a:	4629      	mov	r1, r5
 800be4c:	f7f4 fe46 	bl	8000adc <__aeabi_dcmplt>
 800be50:	2800      	cmp	r0, #0
 800be52:	d0ef      	beq.n	800be34 <exp+0x3c>
 800be54:	f7fc fa56 	bl	8008304 <__errno>
 800be58:	2322      	movs	r3, #34	; 0x22
 800be5a:	ed9f 8b05 	vldr	d8, [pc, #20]	; 800be70 <exp+0x78>
 800be5e:	6003      	str	r3, [r0, #0]
 800be60:	e7e8      	b.n	800be34 <exp+0x3c>
 800be62:	bf00      	nop
 800be64:	f3af 8000 	nop.w
 800be68:	00000000 	.word	0x00000000
 800be6c:	7ff00000 	.word	0x7ff00000
	...
 800be78:	fefa39ef 	.word	0xfefa39ef
 800be7c:	40862e42 	.word	0x40862e42
 800be80:	d52d3051 	.word	0xd52d3051
 800be84:	c0874910 	.word	0xc0874910

0800be88 <pow>:
 800be88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be8a:	ed2d 8b02 	vpush	{d8}
 800be8e:	eeb0 8a40 	vmov.f32	s16, s0
 800be92:	eef0 8a60 	vmov.f32	s17, s1
 800be96:	ec55 4b11 	vmov	r4, r5, d1
 800be9a:	f000 f9e9 	bl	800c270 <__ieee754_pow>
 800be9e:	4622      	mov	r2, r4
 800bea0:	462b      	mov	r3, r5
 800bea2:	4620      	mov	r0, r4
 800bea4:	4629      	mov	r1, r5
 800bea6:	ec57 6b10 	vmov	r6, r7, d0
 800beaa:	f7f4 fe3f 	bl	8000b2c <__aeabi_dcmpun>
 800beae:	2800      	cmp	r0, #0
 800beb0:	d13b      	bne.n	800bf2a <pow+0xa2>
 800beb2:	ec51 0b18 	vmov	r0, r1, d8
 800beb6:	2200      	movs	r2, #0
 800beb8:	2300      	movs	r3, #0
 800beba:	f7f4 fe05 	bl	8000ac8 <__aeabi_dcmpeq>
 800bebe:	b1b8      	cbz	r0, 800bef0 <pow+0x68>
 800bec0:	2200      	movs	r2, #0
 800bec2:	2300      	movs	r3, #0
 800bec4:	4620      	mov	r0, r4
 800bec6:	4629      	mov	r1, r5
 800bec8:	f7f4 fdfe 	bl	8000ac8 <__aeabi_dcmpeq>
 800becc:	2800      	cmp	r0, #0
 800bece:	d146      	bne.n	800bf5e <pow+0xd6>
 800bed0:	ec45 4b10 	vmov	d0, r4, r5
 800bed4:	f000 ffe5 	bl	800cea2 <finite>
 800bed8:	b338      	cbz	r0, 800bf2a <pow+0xa2>
 800beda:	2200      	movs	r2, #0
 800bedc:	2300      	movs	r3, #0
 800bede:	4620      	mov	r0, r4
 800bee0:	4629      	mov	r1, r5
 800bee2:	f7f4 fdfb 	bl	8000adc <__aeabi_dcmplt>
 800bee6:	b300      	cbz	r0, 800bf2a <pow+0xa2>
 800bee8:	f7fc fa0c 	bl	8008304 <__errno>
 800beec:	2322      	movs	r3, #34	; 0x22
 800beee:	e01b      	b.n	800bf28 <pow+0xa0>
 800bef0:	ec47 6b10 	vmov	d0, r6, r7
 800bef4:	f000 ffd5 	bl	800cea2 <finite>
 800bef8:	b9e0      	cbnz	r0, 800bf34 <pow+0xac>
 800befa:	eeb0 0a48 	vmov.f32	s0, s16
 800befe:	eef0 0a68 	vmov.f32	s1, s17
 800bf02:	f000 ffce 	bl	800cea2 <finite>
 800bf06:	b1a8      	cbz	r0, 800bf34 <pow+0xac>
 800bf08:	ec45 4b10 	vmov	d0, r4, r5
 800bf0c:	f000 ffc9 	bl	800cea2 <finite>
 800bf10:	b180      	cbz	r0, 800bf34 <pow+0xac>
 800bf12:	4632      	mov	r2, r6
 800bf14:	463b      	mov	r3, r7
 800bf16:	4630      	mov	r0, r6
 800bf18:	4639      	mov	r1, r7
 800bf1a:	f7f4 fe07 	bl	8000b2c <__aeabi_dcmpun>
 800bf1e:	2800      	cmp	r0, #0
 800bf20:	d0e2      	beq.n	800bee8 <pow+0x60>
 800bf22:	f7fc f9ef 	bl	8008304 <__errno>
 800bf26:	2321      	movs	r3, #33	; 0x21
 800bf28:	6003      	str	r3, [r0, #0]
 800bf2a:	ecbd 8b02 	vpop	{d8}
 800bf2e:	ec47 6b10 	vmov	d0, r6, r7
 800bf32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf34:	2200      	movs	r2, #0
 800bf36:	2300      	movs	r3, #0
 800bf38:	4630      	mov	r0, r6
 800bf3a:	4639      	mov	r1, r7
 800bf3c:	f7f4 fdc4 	bl	8000ac8 <__aeabi_dcmpeq>
 800bf40:	2800      	cmp	r0, #0
 800bf42:	d0f2      	beq.n	800bf2a <pow+0xa2>
 800bf44:	eeb0 0a48 	vmov.f32	s0, s16
 800bf48:	eef0 0a68 	vmov.f32	s1, s17
 800bf4c:	f000 ffa9 	bl	800cea2 <finite>
 800bf50:	2800      	cmp	r0, #0
 800bf52:	d0ea      	beq.n	800bf2a <pow+0xa2>
 800bf54:	ec45 4b10 	vmov	d0, r4, r5
 800bf58:	f000 ffa3 	bl	800cea2 <finite>
 800bf5c:	e7c3      	b.n	800bee6 <pow+0x5e>
 800bf5e:	4f01      	ldr	r7, [pc, #4]	; (800bf64 <pow+0xdc>)
 800bf60:	2600      	movs	r6, #0
 800bf62:	e7e2      	b.n	800bf2a <pow+0xa2>
 800bf64:	3ff00000 	.word	0x3ff00000

0800bf68 <__ieee754_exp>:
 800bf68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf6c:	ec55 4b10 	vmov	r4, r5, d0
 800bf70:	49b5      	ldr	r1, [pc, #724]	; (800c248 <__ieee754_exp+0x2e0>)
 800bf72:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800bf76:	428b      	cmp	r3, r1
 800bf78:	ed2d 8b04 	vpush	{d8-d9}
 800bf7c:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 800bf80:	d93d      	bls.n	800bffe <__ieee754_exp+0x96>
 800bf82:	49b2      	ldr	r1, [pc, #712]	; (800c24c <__ieee754_exp+0x2e4>)
 800bf84:	428b      	cmp	r3, r1
 800bf86:	d918      	bls.n	800bfba <__ieee754_exp+0x52>
 800bf88:	ee10 3a10 	vmov	r3, s0
 800bf8c:	f3c5 0213 	ubfx	r2, r5, #0, #20
 800bf90:	4313      	orrs	r3, r2
 800bf92:	d009      	beq.n	800bfa8 <__ieee754_exp+0x40>
 800bf94:	ee10 2a10 	vmov	r2, s0
 800bf98:	462b      	mov	r3, r5
 800bf9a:	4620      	mov	r0, r4
 800bf9c:	4629      	mov	r1, r5
 800bf9e:	f7f4 f975 	bl	800028c <__adddf3>
 800bfa2:	4604      	mov	r4, r0
 800bfa4:	460d      	mov	r5, r1
 800bfa6:	e002      	b.n	800bfae <__ieee754_exp+0x46>
 800bfa8:	b10e      	cbz	r6, 800bfae <__ieee754_exp+0x46>
 800bfaa:	2400      	movs	r4, #0
 800bfac:	2500      	movs	r5, #0
 800bfae:	ecbd 8b04 	vpop	{d8-d9}
 800bfb2:	ec45 4b10 	vmov	d0, r4, r5
 800bfb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfba:	a38d      	add	r3, pc, #564	; (adr r3, 800c1f0 <__ieee754_exp+0x288>)
 800bfbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfc0:	ee10 0a10 	vmov	r0, s0
 800bfc4:	4629      	mov	r1, r5
 800bfc6:	f7f4 fda7 	bl	8000b18 <__aeabi_dcmpgt>
 800bfca:	4607      	mov	r7, r0
 800bfcc:	b130      	cbz	r0, 800bfdc <__ieee754_exp+0x74>
 800bfce:	ecbd 8b04 	vpop	{d8-d9}
 800bfd2:	2000      	movs	r0, #0
 800bfd4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bfd8:	f000 bf51 	b.w	800ce7e <__math_oflow>
 800bfdc:	a386      	add	r3, pc, #536	; (adr r3, 800c1f8 <__ieee754_exp+0x290>)
 800bfde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfe2:	4620      	mov	r0, r4
 800bfe4:	4629      	mov	r1, r5
 800bfe6:	f7f4 fd79 	bl	8000adc <__aeabi_dcmplt>
 800bfea:	2800      	cmp	r0, #0
 800bfec:	f000 808b 	beq.w	800c106 <__ieee754_exp+0x19e>
 800bff0:	ecbd 8b04 	vpop	{d8-d9}
 800bff4:	4638      	mov	r0, r7
 800bff6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bffa:	f000 bf37 	b.w	800ce6c <__math_uflow>
 800bffe:	4a94      	ldr	r2, [pc, #592]	; (800c250 <__ieee754_exp+0x2e8>)
 800c000:	4293      	cmp	r3, r2
 800c002:	f240 80ac 	bls.w	800c15e <__ieee754_exp+0x1f6>
 800c006:	4a93      	ldr	r2, [pc, #588]	; (800c254 <__ieee754_exp+0x2ec>)
 800c008:	4293      	cmp	r3, r2
 800c00a:	d87c      	bhi.n	800c106 <__ieee754_exp+0x19e>
 800c00c:	4b92      	ldr	r3, [pc, #584]	; (800c258 <__ieee754_exp+0x2f0>)
 800c00e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c012:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c016:	ee10 0a10 	vmov	r0, s0
 800c01a:	4629      	mov	r1, r5
 800c01c:	f7f4 f934 	bl	8000288 <__aeabi_dsub>
 800c020:	4b8e      	ldr	r3, [pc, #568]	; (800c25c <__ieee754_exp+0x2f4>)
 800c022:	00f7      	lsls	r7, r6, #3
 800c024:	443b      	add	r3, r7
 800c026:	ed93 7b00 	vldr	d7, [r3]
 800c02a:	f1c6 0a01 	rsb	sl, r6, #1
 800c02e:	4680      	mov	r8, r0
 800c030:	4689      	mov	r9, r1
 800c032:	ebaa 0a06 	sub.w	sl, sl, r6
 800c036:	eeb0 8a47 	vmov.f32	s16, s14
 800c03a:	eef0 8a67 	vmov.f32	s17, s15
 800c03e:	ec53 2b18 	vmov	r2, r3, d8
 800c042:	4640      	mov	r0, r8
 800c044:	4649      	mov	r1, r9
 800c046:	f7f4 f91f 	bl	8000288 <__aeabi_dsub>
 800c04a:	4604      	mov	r4, r0
 800c04c:	460d      	mov	r5, r1
 800c04e:	4622      	mov	r2, r4
 800c050:	462b      	mov	r3, r5
 800c052:	4620      	mov	r0, r4
 800c054:	4629      	mov	r1, r5
 800c056:	f7f4 facf 	bl	80005f8 <__aeabi_dmul>
 800c05a:	a369      	add	r3, pc, #420	; (adr r3, 800c200 <__ieee754_exp+0x298>)
 800c05c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c060:	4606      	mov	r6, r0
 800c062:	460f      	mov	r7, r1
 800c064:	f7f4 fac8 	bl	80005f8 <__aeabi_dmul>
 800c068:	a367      	add	r3, pc, #412	; (adr r3, 800c208 <__ieee754_exp+0x2a0>)
 800c06a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c06e:	f7f4 f90b 	bl	8000288 <__aeabi_dsub>
 800c072:	4632      	mov	r2, r6
 800c074:	463b      	mov	r3, r7
 800c076:	f7f4 fabf 	bl	80005f8 <__aeabi_dmul>
 800c07a:	a365      	add	r3, pc, #404	; (adr r3, 800c210 <__ieee754_exp+0x2a8>)
 800c07c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c080:	f7f4 f904 	bl	800028c <__adddf3>
 800c084:	4632      	mov	r2, r6
 800c086:	463b      	mov	r3, r7
 800c088:	f7f4 fab6 	bl	80005f8 <__aeabi_dmul>
 800c08c:	a362      	add	r3, pc, #392	; (adr r3, 800c218 <__ieee754_exp+0x2b0>)
 800c08e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c092:	f7f4 f8f9 	bl	8000288 <__aeabi_dsub>
 800c096:	4632      	mov	r2, r6
 800c098:	463b      	mov	r3, r7
 800c09a:	f7f4 faad 	bl	80005f8 <__aeabi_dmul>
 800c09e:	a360      	add	r3, pc, #384	; (adr r3, 800c220 <__ieee754_exp+0x2b8>)
 800c0a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0a4:	f7f4 f8f2 	bl	800028c <__adddf3>
 800c0a8:	4632      	mov	r2, r6
 800c0aa:	463b      	mov	r3, r7
 800c0ac:	f7f4 faa4 	bl	80005f8 <__aeabi_dmul>
 800c0b0:	4602      	mov	r2, r0
 800c0b2:	460b      	mov	r3, r1
 800c0b4:	4620      	mov	r0, r4
 800c0b6:	4629      	mov	r1, r5
 800c0b8:	f7f4 f8e6 	bl	8000288 <__aeabi_dsub>
 800c0bc:	4602      	mov	r2, r0
 800c0be:	460b      	mov	r3, r1
 800c0c0:	4606      	mov	r6, r0
 800c0c2:	460f      	mov	r7, r1
 800c0c4:	4620      	mov	r0, r4
 800c0c6:	4629      	mov	r1, r5
 800c0c8:	f7f4 fa96 	bl	80005f8 <__aeabi_dmul>
 800c0cc:	ec41 0b19 	vmov	d9, r0, r1
 800c0d0:	f1ba 0f00 	cmp.w	sl, #0
 800c0d4:	d15d      	bne.n	800c192 <__ieee754_exp+0x22a>
 800c0d6:	2200      	movs	r2, #0
 800c0d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c0dc:	4630      	mov	r0, r6
 800c0de:	4639      	mov	r1, r7
 800c0e0:	f7f4 f8d2 	bl	8000288 <__aeabi_dsub>
 800c0e4:	4602      	mov	r2, r0
 800c0e6:	460b      	mov	r3, r1
 800c0e8:	ec51 0b19 	vmov	r0, r1, d9
 800c0ec:	f7f4 fbae 	bl	800084c <__aeabi_ddiv>
 800c0f0:	4622      	mov	r2, r4
 800c0f2:	462b      	mov	r3, r5
 800c0f4:	f7f4 f8c8 	bl	8000288 <__aeabi_dsub>
 800c0f8:	4602      	mov	r2, r0
 800c0fa:	460b      	mov	r3, r1
 800c0fc:	2000      	movs	r0, #0
 800c0fe:	4958      	ldr	r1, [pc, #352]	; (800c260 <__ieee754_exp+0x2f8>)
 800c100:	f7f4 f8c2 	bl	8000288 <__aeabi_dsub>
 800c104:	e74d      	b.n	800bfa2 <__ieee754_exp+0x3a>
 800c106:	4857      	ldr	r0, [pc, #348]	; (800c264 <__ieee754_exp+0x2fc>)
 800c108:	a347      	add	r3, pc, #284	; (adr r3, 800c228 <__ieee754_exp+0x2c0>)
 800c10a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c10e:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800c112:	4629      	mov	r1, r5
 800c114:	4620      	mov	r0, r4
 800c116:	f7f4 fa6f 	bl	80005f8 <__aeabi_dmul>
 800c11a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c11e:	f7f4 f8b5 	bl	800028c <__adddf3>
 800c122:	f7f4 fd19 	bl	8000b58 <__aeabi_d2iz>
 800c126:	4682      	mov	sl, r0
 800c128:	f7f4 f9fc 	bl	8000524 <__aeabi_i2d>
 800c12c:	a340      	add	r3, pc, #256	; (adr r3, 800c230 <__ieee754_exp+0x2c8>)
 800c12e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c132:	4606      	mov	r6, r0
 800c134:	460f      	mov	r7, r1
 800c136:	f7f4 fa5f 	bl	80005f8 <__aeabi_dmul>
 800c13a:	4602      	mov	r2, r0
 800c13c:	460b      	mov	r3, r1
 800c13e:	4620      	mov	r0, r4
 800c140:	4629      	mov	r1, r5
 800c142:	f7f4 f8a1 	bl	8000288 <__aeabi_dsub>
 800c146:	a33c      	add	r3, pc, #240	; (adr r3, 800c238 <__ieee754_exp+0x2d0>)
 800c148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c14c:	4680      	mov	r8, r0
 800c14e:	4689      	mov	r9, r1
 800c150:	4630      	mov	r0, r6
 800c152:	4639      	mov	r1, r7
 800c154:	f7f4 fa50 	bl	80005f8 <__aeabi_dmul>
 800c158:	ec41 0b18 	vmov	d8, r0, r1
 800c15c:	e76f      	b.n	800c03e <__ieee754_exp+0xd6>
 800c15e:	4a42      	ldr	r2, [pc, #264]	; (800c268 <__ieee754_exp+0x300>)
 800c160:	4293      	cmp	r3, r2
 800c162:	d811      	bhi.n	800c188 <__ieee754_exp+0x220>
 800c164:	a336      	add	r3, pc, #216	; (adr r3, 800c240 <__ieee754_exp+0x2d8>)
 800c166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c16a:	ee10 0a10 	vmov	r0, s0
 800c16e:	4629      	mov	r1, r5
 800c170:	f7f4 f88c 	bl	800028c <__adddf3>
 800c174:	4b3a      	ldr	r3, [pc, #232]	; (800c260 <__ieee754_exp+0x2f8>)
 800c176:	2200      	movs	r2, #0
 800c178:	f7f4 fcce 	bl	8000b18 <__aeabi_dcmpgt>
 800c17c:	b138      	cbz	r0, 800c18e <__ieee754_exp+0x226>
 800c17e:	4b38      	ldr	r3, [pc, #224]	; (800c260 <__ieee754_exp+0x2f8>)
 800c180:	2200      	movs	r2, #0
 800c182:	4620      	mov	r0, r4
 800c184:	4629      	mov	r1, r5
 800c186:	e70a      	b.n	800bf9e <__ieee754_exp+0x36>
 800c188:	f04f 0a00 	mov.w	sl, #0
 800c18c:	e75f      	b.n	800c04e <__ieee754_exp+0xe6>
 800c18e:	4682      	mov	sl, r0
 800c190:	e75d      	b.n	800c04e <__ieee754_exp+0xe6>
 800c192:	4632      	mov	r2, r6
 800c194:	463b      	mov	r3, r7
 800c196:	2000      	movs	r0, #0
 800c198:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800c19c:	f7f4 f874 	bl	8000288 <__aeabi_dsub>
 800c1a0:	4602      	mov	r2, r0
 800c1a2:	460b      	mov	r3, r1
 800c1a4:	ec51 0b19 	vmov	r0, r1, d9
 800c1a8:	f7f4 fb50 	bl	800084c <__aeabi_ddiv>
 800c1ac:	4602      	mov	r2, r0
 800c1ae:	460b      	mov	r3, r1
 800c1b0:	ec51 0b18 	vmov	r0, r1, d8
 800c1b4:	f7f4 f868 	bl	8000288 <__aeabi_dsub>
 800c1b8:	4642      	mov	r2, r8
 800c1ba:	464b      	mov	r3, r9
 800c1bc:	f7f4 f864 	bl	8000288 <__aeabi_dsub>
 800c1c0:	4602      	mov	r2, r0
 800c1c2:	460b      	mov	r3, r1
 800c1c4:	2000      	movs	r0, #0
 800c1c6:	4926      	ldr	r1, [pc, #152]	; (800c260 <__ieee754_exp+0x2f8>)
 800c1c8:	f7f4 f85e 	bl	8000288 <__aeabi_dsub>
 800c1cc:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 800c1d0:	4592      	cmp	sl, r2
 800c1d2:	db02      	blt.n	800c1da <__ieee754_exp+0x272>
 800c1d4:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800c1d8:	e6e3      	b.n	800bfa2 <__ieee754_exp+0x3a>
 800c1da:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 800c1de:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 800c1e8:	f7f4 fa06 	bl	80005f8 <__aeabi_dmul>
 800c1ec:	e6d9      	b.n	800bfa2 <__ieee754_exp+0x3a>
 800c1ee:	bf00      	nop
 800c1f0:	fefa39ef 	.word	0xfefa39ef
 800c1f4:	40862e42 	.word	0x40862e42
 800c1f8:	d52d3051 	.word	0xd52d3051
 800c1fc:	c0874910 	.word	0xc0874910
 800c200:	72bea4d0 	.word	0x72bea4d0
 800c204:	3e663769 	.word	0x3e663769
 800c208:	c5d26bf1 	.word	0xc5d26bf1
 800c20c:	3ebbbd41 	.word	0x3ebbbd41
 800c210:	af25de2c 	.word	0xaf25de2c
 800c214:	3f11566a 	.word	0x3f11566a
 800c218:	16bebd93 	.word	0x16bebd93
 800c21c:	3f66c16c 	.word	0x3f66c16c
 800c220:	5555553e 	.word	0x5555553e
 800c224:	3fc55555 	.word	0x3fc55555
 800c228:	652b82fe 	.word	0x652b82fe
 800c22c:	3ff71547 	.word	0x3ff71547
 800c230:	fee00000 	.word	0xfee00000
 800c234:	3fe62e42 	.word	0x3fe62e42
 800c238:	35793c76 	.word	0x35793c76
 800c23c:	3dea39ef 	.word	0x3dea39ef
 800c240:	8800759c 	.word	0x8800759c
 800c244:	7e37e43c 	.word	0x7e37e43c
 800c248:	40862e41 	.word	0x40862e41
 800c24c:	7fefffff 	.word	0x7fefffff
 800c250:	3fd62e42 	.word	0x3fd62e42
 800c254:	3ff0a2b1 	.word	0x3ff0a2b1
 800c258:	08011620 	.word	0x08011620
 800c25c:	08011630 	.word	0x08011630
 800c260:	3ff00000 	.word	0x3ff00000
 800c264:	08011610 	.word	0x08011610
 800c268:	3defffff 	.word	0x3defffff
 800c26c:	00000000 	.word	0x00000000

0800c270 <__ieee754_pow>:
 800c270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c274:	ed2d 8b06 	vpush	{d8-d10}
 800c278:	b089      	sub	sp, #36	; 0x24
 800c27a:	ed8d 1b00 	vstr	d1, [sp]
 800c27e:	e9dd 2900 	ldrd	r2, r9, [sp]
 800c282:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800c286:	ea58 0102 	orrs.w	r1, r8, r2
 800c28a:	ec57 6b10 	vmov	r6, r7, d0
 800c28e:	d115      	bne.n	800c2bc <__ieee754_pow+0x4c>
 800c290:	19b3      	adds	r3, r6, r6
 800c292:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800c296:	4152      	adcs	r2, r2
 800c298:	4299      	cmp	r1, r3
 800c29a:	4b89      	ldr	r3, [pc, #548]	; (800c4c0 <__ieee754_pow+0x250>)
 800c29c:	4193      	sbcs	r3, r2
 800c29e:	f080 84d2 	bcs.w	800cc46 <__ieee754_pow+0x9d6>
 800c2a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c2a6:	4630      	mov	r0, r6
 800c2a8:	4639      	mov	r1, r7
 800c2aa:	f7f3 ffef 	bl	800028c <__adddf3>
 800c2ae:	ec41 0b10 	vmov	d0, r0, r1
 800c2b2:	b009      	add	sp, #36	; 0x24
 800c2b4:	ecbd 8b06 	vpop	{d8-d10}
 800c2b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2bc:	4b81      	ldr	r3, [pc, #516]	; (800c4c4 <__ieee754_pow+0x254>)
 800c2be:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800c2c2:	429c      	cmp	r4, r3
 800c2c4:	ee10 aa10 	vmov	sl, s0
 800c2c8:	463d      	mov	r5, r7
 800c2ca:	dc06      	bgt.n	800c2da <__ieee754_pow+0x6a>
 800c2cc:	d101      	bne.n	800c2d2 <__ieee754_pow+0x62>
 800c2ce:	2e00      	cmp	r6, #0
 800c2d0:	d1e7      	bne.n	800c2a2 <__ieee754_pow+0x32>
 800c2d2:	4598      	cmp	r8, r3
 800c2d4:	dc01      	bgt.n	800c2da <__ieee754_pow+0x6a>
 800c2d6:	d10f      	bne.n	800c2f8 <__ieee754_pow+0x88>
 800c2d8:	b172      	cbz	r2, 800c2f8 <__ieee754_pow+0x88>
 800c2da:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800c2de:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800c2e2:	ea55 050a 	orrs.w	r5, r5, sl
 800c2e6:	d1dc      	bne.n	800c2a2 <__ieee754_pow+0x32>
 800c2e8:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c2ec:	18db      	adds	r3, r3, r3
 800c2ee:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800c2f2:	4152      	adcs	r2, r2
 800c2f4:	429d      	cmp	r5, r3
 800c2f6:	e7d0      	b.n	800c29a <__ieee754_pow+0x2a>
 800c2f8:	2d00      	cmp	r5, #0
 800c2fa:	da3b      	bge.n	800c374 <__ieee754_pow+0x104>
 800c2fc:	4b72      	ldr	r3, [pc, #456]	; (800c4c8 <__ieee754_pow+0x258>)
 800c2fe:	4598      	cmp	r8, r3
 800c300:	dc51      	bgt.n	800c3a6 <__ieee754_pow+0x136>
 800c302:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800c306:	4598      	cmp	r8, r3
 800c308:	f340 84ac 	ble.w	800cc64 <__ieee754_pow+0x9f4>
 800c30c:	ea4f 5328 	mov.w	r3, r8, asr #20
 800c310:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c314:	2b14      	cmp	r3, #20
 800c316:	dd0f      	ble.n	800c338 <__ieee754_pow+0xc8>
 800c318:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800c31c:	fa22 f103 	lsr.w	r1, r2, r3
 800c320:	fa01 f303 	lsl.w	r3, r1, r3
 800c324:	4293      	cmp	r3, r2
 800c326:	f040 849d 	bne.w	800cc64 <__ieee754_pow+0x9f4>
 800c32a:	f001 0101 	and.w	r1, r1, #1
 800c32e:	f1c1 0302 	rsb	r3, r1, #2
 800c332:	9304      	str	r3, [sp, #16]
 800c334:	b182      	cbz	r2, 800c358 <__ieee754_pow+0xe8>
 800c336:	e05f      	b.n	800c3f8 <__ieee754_pow+0x188>
 800c338:	2a00      	cmp	r2, #0
 800c33a:	d15b      	bne.n	800c3f4 <__ieee754_pow+0x184>
 800c33c:	f1c3 0314 	rsb	r3, r3, #20
 800c340:	fa48 f103 	asr.w	r1, r8, r3
 800c344:	fa01 f303 	lsl.w	r3, r1, r3
 800c348:	4543      	cmp	r3, r8
 800c34a:	f040 8488 	bne.w	800cc5e <__ieee754_pow+0x9ee>
 800c34e:	f001 0101 	and.w	r1, r1, #1
 800c352:	f1c1 0302 	rsb	r3, r1, #2
 800c356:	9304      	str	r3, [sp, #16]
 800c358:	4b5c      	ldr	r3, [pc, #368]	; (800c4cc <__ieee754_pow+0x25c>)
 800c35a:	4598      	cmp	r8, r3
 800c35c:	d132      	bne.n	800c3c4 <__ieee754_pow+0x154>
 800c35e:	f1b9 0f00 	cmp.w	r9, #0
 800c362:	f280 8478 	bge.w	800cc56 <__ieee754_pow+0x9e6>
 800c366:	4959      	ldr	r1, [pc, #356]	; (800c4cc <__ieee754_pow+0x25c>)
 800c368:	4632      	mov	r2, r6
 800c36a:	463b      	mov	r3, r7
 800c36c:	2000      	movs	r0, #0
 800c36e:	f7f4 fa6d 	bl	800084c <__aeabi_ddiv>
 800c372:	e79c      	b.n	800c2ae <__ieee754_pow+0x3e>
 800c374:	2300      	movs	r3, #0
 800c376:	9304      	str	r3, [sp, #16]
 800c378:	2a00      	cmp	r2, #0
 800c37a:	d13d      	bne.n	800c3f8 <__ieee754_pow+0x188>
 800c37c:	4b51      	ldr	r3, [pc, #324]	; (800c4c4 <__ieee754_pow+0x254>)
 800c37e:	4598      	cmp	r8, r3
 800c380:	d1ea      	bne.n	800c358 <__ieee754_pow+0xe8>
 800c382:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800c386:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800c38a:	ea53 030a 	orrs.w	r3, r3, sl
 800c38e:	f000 845a 	beq.w	800cc46 <__ieee754_pow+0x9d6>
 800c392:	4b4f      	ldr	r3, [pc, #316]	; (800c4d0 <__ieee754_pow+0x260>)
 800c394:	429c      	cmp	r4, r3
 800c396:	dd08      	ble.n	800c3aa <__ieee754_pow+0x13a>
 800c398:	f1b9 0f00 	cmp.w	r9, #0
 800c39c:	f2c0 8457 	blt.w	800cc4e <__ieee754_pow+0x9de>
 800c3a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c3a4:	e783      	b.n	800c2ae <__ieee754_pow+0x3e>
 800c3a6:	2302      	movs	r3, #2
 800c3a8:	e7e5      	b.n	800c376 <__ieee754_pow+0x106>
 800c3aa:	f1b9 0f00 	cmp.w	r9, #0
 800c3ae:	f04f 0000 	mov.w	r0, #0
 800c3b2:	f04f 0100 	mov.w	r1, #0
 800c3b6:	f6bf af7a 	bge.w	800c2ae <__ieee754_pow+0x3e>
 800c3ba:	e9dd 0300 	ldrd	r0, r3, [sp]
 800c3be:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c3c2:	e774      	b.n	800c2ae <__ieee754_pow+0x3e>
 800c3c4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800c3c8:	d106      	bne.n	800c3d8 <__ieee754_pow+0x168>
 800c3ca:	4632      	mov	r2, r6
 800c3cc:	463b      	mov	r3, r7
 800c3ce:	4630      	mov	r0, r6
 800c3d0:	4639      	mov	r1, r7
 800c3d2:	f7f4 f911 	bl	80005f8 <__aeabi_dmul>
 800c3d6:	e76a      	b.n	800c2ae <__ieee754_pow+0x3e>
 800c3d8:	4b3e      	ldr	r3, [pc, #248]	; (800c4d4 <__ieee754_pow+0x264>)
 800c3da:	4599      	cmp	r9, r3
 800c3dc:	d10c      	bne.n	800c3f8 <__ieee754_pow+0x188>
 800c3de:	2d00      	cmp	r5, #0
 800c3e0:	db0a      	blt.n	800c3f8 <__ieee754_pow+0x188>
 800c3e2:	ec47 6b10 	vmov	d0, r6, r7
 800c3e6:	b009      	add	sp, #36	; 0x24
 800c3e8:	ecbd 8b06 	vpop	{d8-d10}
 800c3ec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3f0:	f000 bc6c 	b.w	800cccc <__ieee754_sqrt>
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	9304      	str	r3, [sp, #16]
 800c3f8:	ec47 6b10 	vmov	d0, r6, r7
 800c3fc:	f000 fd48 	bl	800ce90 <fabs>
 800c400:	ec51 0b10 	vmov	r0, r1, d0
 800c404:	f1ba 0f00 	cmp.w	sl, #0
 800c408:	d129      	bne.n	800c45e <__ieee754_pow+0x1ee>
 800c40a:	b124      	cbz	r4, 800c416 <__ieee754_pow+0x1a6>
 800c40c:	4b2f      	ldr	r3, [pc, #188]	; (800c4cc <__ieee754_pow+0x25c>)
 800c40e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800c412:	429a      	cmp	r2, r3
 800c414:	d123      	bne.n	800c45e <__ieee754_pow+0x1ee>
 800c416:	f1b9 0f00 	cmp.w	r9, #0
 800c41a:	da05      	bge.n	800c428 <__ieee754_pow+0x1b8>
 800c41c:	4602      	mov	r2, r0
 800c41e:	460b      	mov	r3, r1
 800c420:	2000      	movs	r0, #0
 800c422:	492a      	ldr	r1, [pc, #168]	; (800c4cc <__ieee754_pow+0x25c>)
 800c424:	f7f4 fa12 	bl	800084c <__aeabi_ddiv>
 800c428:	2d00      	cmp	r5, #0
 800c42a:	f6bf af40 	bge.w	800c2ae <__ieee754_pow+0x3e>
 800c42e:	9b04      	ldr	r3, [sp, #16]
 800c430:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c434:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c438:	4323      	orrs	r3, r4
 800c43a:	d108      	bne.n	800c44e <__ieee754_pow+0x1de>
 800c43c:	4602      	mov	r2, r0
 800c43e:	460b      	mov	r3, r1
 800c440:	4610      	mov	r0, r2
 800c442:	4619      	mov	r1, r3
 800c444:	f7f3 ff20 	bl	8000288 <__aeabi_dsub>
 800c448:	4602      	mov	r2, r0
 800c44a:	460b      	mov	r3, r1
 800c44c:	e78f      	b.n	800c36e <__ieee754_pow+0xfe>
 800c44e:	9b04      	ldr	r3, [sp, #16]
 800c450:	2b01      	cmp	r3, #1
 800c452:	f47f af2c 	bne.w	800c2ae <__ieee754_pow+0x3e>
 800c456:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c45a:	4619      	mov	r1, r3
 800c45c:	e727      	b.n	800c2ae <__ieee754_pow+0x3e>
 800c45e:	0feb      	lsrs	r3, r5, #31
 800c460:	3b01      	subs	r3, #1
 800c462:	9306      	str	r3, [sp, #24]
 800c464:	9a06      	ldr	r2, [sp, #24]
 800c466:	9b04      	ldr	r3, [sp, #16]
 800c468:	4313      	orrs	r3, r2
 800c46a:	d102      	bne.n	800c472 <__ieee754_pow+0x202>
 800c46c:	4632      	mov	r2, r6
 800c46e:	463b      	mov	r3, r7
 800c470:	e7e6      	b.n	800c440 <__ieee754_pow+0x1d0>
 800c472:	4b19      	ldr	r3, [pc, #100]	; (800c4d8 <__ieee754_pow+0x268>)
 800c474:	4598      	cmp	r8, r3
 800c476:	f340 80fb 	ble.w	800c670 <__ieee754_pow+0x400>
 800c47a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800c47e:	4598      	cmp	r8, r3
 800c480:	4b13      	ldr	r3, [pc, #76]	; (800c4d0 <__ieee754_pow+0x260>)
 800c482:	dd0c      	ble.n	800c49e <__ieee754_pow+0x22e>
 800c484:	429c      	cmp	r4, r3
 800c486:	dc0f      	bgt.n	800c4a8 <__ieee754_pow+0x238>
 800c488:	f1b9 0f00 	cmp.w	r9, #0
 800c48c:	da0f      	bge.n	800c4ae <__ieee754_pow+0x23e>
 800c48e:	2000      	movs	r0, #0
 800c490:	b009      	add	sp, #36	; 0x24
 800c492:	ecbd 8b06 	vpop	{d8-d10}
 800c496:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c49a:	f000 bcf0 	b.w	800ce7e <__math_oflow>
 800c49e:	429c      	cmp	r4, r3
 800c4a0:	dbf2      	blt.n	800c488 <__ieee754_pow+0x218>
 800c4a2:	4b0a      	ldr	r3, [pc, #40]	; (800c4cc <__ieee754_pow+0x25c>)
 800c4a4:	429c      	cmp	r4, r3
 800c4a6:	dd19      	ble.n	800c4dc <__ieee754_pow+0x26c>
 800c4a8:	f1b9 0f00 	cmp.w	r9, #0
 800c4ac:	dcef      	bgt.n	800c48e <__ieee754_pow+0x21e>
 800c4ae:	2000      	movs	r0, #0
 800c4b0:	b009      	add	sp, #36	; 0x24
 800c4b2:	ecbd 8b06 	vpop	{d8-d10}
 800c4b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4ba:	f000 bcd7 	b.w	800ce6c <__math_uflow>
 800c4be:	bf00      	nop
 800c4c0:	fff00000 	.word	0xfff00000
 800c4c4:	7ff00000 	.word	0x7ff00000
 800c4c8:	433fffff 	.word	0x433fffff
 800c4cc:	3ff00000 	.word	0x3ff00000
 800c4d0:	3fefffff 	.word	0x3fefffff
 800c4d4:	3fe00000 	.word	0x3fe00000
 800c4d8:	41e00000 	.word	0x41e00000
 800c4dc:	4b60      	ldr	r3, [pc, #384]	; (800c660 <__ieee754_pow+0x3f0>)
 800c4de:	2200      	movs	r2, #0
 800c4e0:	f7f3 fed2 	bl	8000288 <__aeabi_dsub>
 800c4e4:	a354      	add	r3, pc, #336	; (adr r3, 800c638 <__ieee754_pow+0x3c8>)
 800c4e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4ea:	4604      	mov	r4, r0
 800c4ec:	460d      	mov	r5, r1
 800c4ee:	f7f4 f883 	bl	80005f8 <__aeabi_dmul>
 800c4f2:	a353      	add	r3, pc, #332	; (adr r3, 800c640 <__ieee754_pow+0x3d0>)
 800c4f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4f8:	4606      	mov	r6, r0
 800c4fa:	460f      	mov	r7, r1
 800c4fc:	4620      	mov	r0, r4
 800c4fe:	4629      	mov	r1, r5
 800c500:	f7f4 f87a 	bl	80005f8 <__aeabi_dmul>
 800c504:	4b57      	ldr	r3, [pc, #348]	; (800c664 <__ieee754_pow+0x3f4>)
 800c506:	4682      	mov	sl, r0
 800c508:	468b      	mov	fp, r1
 800c50a:	2200      	movs	r2, #0
 800c50c:	4620      	mov	r0, r4
 800c50e:	4629      	mov	r1, r5
 800c510:	f7f4 f872 	bl	80005f8 <__aeabi_dmul>
 800c514:	4602      	mov	r2, r0
 800c516:	460b      	mov	r3, r1
 800c518:	a14b      	add	r1, pc, #300	; (adr r1, 800c648 <__ieee754_pow+0x3d8>)
 800c51a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c51e:	f7f3 feb3 	bl	8000288 <__aeabi_dsub>
 800c522:	4622      	mov	r2, r4
 800c524:	462b      	mov	r3, r5
 800c526:	f7f4 f867 	bl	80005f8 <__aeabi_dmul>
 800c52a:	4602      	mov	r2, r0
 800c52c:	460b      	mov	r3, r1
 800c52e:	2000      	movs	r0, #0
 800c530:	494d      	ldr	r1, [pc, #308]	; (800c668 <__ieee754_pow+0x3f8>)
 800c532:	f7f3 fea9 	bl	8000288 <__aeabi_dsub>
 800c536:	4622      	mov	r2, r4
 800c538:	4680      	mov	r8, r0
 800c53a:	4689      	mov	r9, r1
 800c53c:	462b      	mov	r3, r5
 800c53e:	4620      	mov	r0, r4
 800c540:	4629      	mov	r1, r5
 800c542:	f7f4 f859 	bl	80005f8 <__aeabi_dmul>
 800c546:	4602      	mov	r2, r0
 800c548:	460b      	mov	r3, r1
 800c54a:	4640      	mov	r0, r8
 800c54c:	4649      	mov	r1, r9
 800c54e:	f7f4 f853 	bl	80005f8 <__aeabi_dmul>
 800c552:	a33f      	add	r3, pc, #252	; (adr r3, 800c650 <__ieee754_pow+0x3e0>)
 800c554:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c558:	f7f4 f84e 	bl	80005f8 <__aeabi_dmul>
 800c55c:	4602      	mov	r2, r0
 800c55e:	460b      	mov	r3, r1
 800c560:	4650      	mov	r0, sl
 800c562:	4659      	mov	r1, fp
 800c564:	f7f3 fe90 	bl	8000288 <__aeabi_dsub>
 800c568:	4602      	mov	r2, r0
 800c56a:	460b      	mov	r3, r1
 800c56c:	4680      	mov	r8, r0
 800c56e:	4689      	mov	r9, r1
 800c570:	4630      	mov	r0, r6
 800c572:	4639      	mov	r1, r7
 800c574:	f7f3 fe8a 	bl	800028c <__adddf3>
 800c578:	2000      	movs	r0, #0
 800c57a:	4632      	mov	r2, r6
 800c57c:	463b      	mov	r3, r7
 800c57e:	4604      	mov	r4, r0
 800c580:	460d      	mov	r5, r1
 800c582:	f7f3 fe81 	bl	8000288 <__aeabi_dsub>
 800c586:	4602      	mov	r2, r0
 800c588:	460b      	mov	r3, r1
 800c58a:	4640      	mov	r0, r8
 800c58c:	4649      	mov	r1, r9
 800c58e:	f7f3 fe7b 	bl	8000288 <__aeabi_dsub>
 800c592:	9b04      	ldr	r3, [sp, #16]
 800c594:	9a06      	ldr	r2, [sp, #24]
 800c596:	3b01      	subs	r3, #1
 800c598:	4313      	orrs	r3, r2
 800c59a:	4682      	mov	sl, r0
 800c59c:	468b      	mov	fp, r1
 800c59e:	f040 81e7 	bne.w	800c970 <__ieee754_pow+0x700>
 800c5a2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800c658 <__ieee754_pow+0x3e8>
 800c5a6:	eeb0 8a47 	vmov.f32	s16, s14
 800c5aa:	eef0 8a67 	vmov.f32	s17, s15
 800c5ae:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c5b2:	2600      	movs	r6, #0
 800c5b4:	4632      	mov	r2, r6
 800c5b6:	463b      	mov	r3, r7
 800c5b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c5bc:	f7f3 fe64 	bl	8000288 <__aeabi_dsub>
 800c5c0:	4622      	mov	r2, r4
 800c5c2:	462b      	mov	r3, r5
 800c5c4:	f7f4 f818 	bl	80005f8 <__aeabi_dmul>
 800c5c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c5cc:	4680      	mov	r8, r0
 800c5ce:	4689      	mov	r9, r1
 800c5d0:	4650      	mov	r0, sl
 800c5d2:	4659      	mov	r1, fp
 800c5d4:	f7f4 f810 	bl	80005f8 <__aeabi_dmul>
 800c5d8:	4602      	mov	r2, r0
 800c5da:	460b      	mov	r3, r1
 800c5dc:	4640      	mov	r0, r8
 800c5de:	4649      	mov	r1, r9
 800c5e0:	f7f3 fe54 	bl	800028c <__adddf3>
 800c5e4:	4632      	mov	r2, r6
 800c5e6:	463b      	mov	r3, r7
 800c5e8:	4680      	mov	r8, r0
 800c5ea:	4689      	mov	r9, r1
 800c5ec:	4620      	mov	r0, r4
 800c5ee:	4629      	mov	r1, r5
 800c5f0:	f7f4 f802 	bl	80005f8 <__aeabi_dmul>
 800c5f4:	460b      	mov	r3, r1
 800c5f6:	4604      	mov	r4, r0
 800c5f8:	460d      	mov	r5, r1
 800c5fa:	4602      	mov	r2, r0
 800c5fc:	4649      	mov	r1, r9
 800c5fe:	4640      	mov	r0, r8
 800c600:	f7f3 fe44 	bl	800028c <__adddf3>
 800c604:	4b19      	ldr	r3, [pc, #100]	; (800c66c <__ieee754_pow+0x3fc>)
 800c606:	4299      	cmp	r1, r3
 800c608:	ec45 4b19 	vmov	d9, r4, r5
 800c60c:	4606      	mov	r6, r0
 800c60e:	460f      	mov	r7, r1
 800c610:	468b      	mov	fp, r1
 800c612:	f340 82f1 	ble.w	800cbf8 <__ieee754_pow+0x988>
 800c616:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800c61a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800c61e:	4303      	orrs	r3, r0
 800c620:	f000 81e4 	beq.w	800c9ec <__ieee754_pow+0x77c>
 800c624:	ec51 0b18 	vmov	r0, r1, d8
 800c628:	2200      	movs	r2, #0
 800c62a:	2300      	movs	r3, #0
 800c62c:	f7f4 fa56 	bl	8000adc <__aeabi_dcmplt>
 800c630:	3800      	subs	r0, #0
 800c632:	bf18      	it	ne
 800c634:	2001      	movne	r0, #1
 800c636:	e72b      	b.n	800c490 <__ieee754_pow+0x220>
 800c638:	60000000 	.word	0x60000000
 800c63c:	3ff71547 	.word	0x3ff71547
 800c640:	f85ddf44 	.word	0xf85ddf44
 800c644:	3e54ae0b 	.word	0x3e54ae0b
 800c648:	55555555 	.word	0x55555555
 800c64c:	3fd55555 	.word	0x3fd55555
 800c650:	652b82fe 	.word	0x652b82fe
 800c654:	3ff71547 	.word	0x3ff71547
 800c658:	00000000 	.word	0x00000000
 800c65c:	bff00000 	.word	0xbff00000
 800c660:	3ff00000 	.word	0x3ff00000
 800c664:	3fd00000 	.word	0x3fd00000
 800c668:	3fe00000 	.word	0x3fe00000
 800c66c:	408fffff 	.word	0x408fffff
 800c670:	4bd5      	ldr	r3, [pc, #852]	; (800c9c8 <__ieee754_pow+0x758>)
 800c672:	402b      	ands	r3, r5
 800c674:	2200      	movs	r2, #0
 800c676:	b92b      	cbnz	r3, 800c684 <__ieee754_pow+0x414>
 800c678:	4bd4      	ldr	r3, [pc, #848]	; (800c9cc <__ieee754_pow+0x75c>)
 800c67a:	f7f3 ffbd 	bl	80005f8 <__aeabi_dmul>
 800c67e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800c682:	460c      	mov	r4, r1
 800c684:	1523      	asrs	r3, r4, #20
 800c686:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c68a:	4413      	add	r3, r2
 800c68c:	9305      	str	r3, [sp, #20]
 800c68e:	4bd0      	ldr	r3, [pc, #832]	; (800c9d0 <__ieee754_pow+0x760>)
 800c690:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800c694:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800c698:	429c      	cmp	r4, r3
 800c69a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c69e:	dd08      	ble.n	800c6b2 <__ieee754_pow+0x442>
 800c6a0:	4bcc      	ldr	r3, [pc, #816]	; (800c9d4 <__ieee754_pow+0x764>)
 800c6a2:	429c      	cmp	r4, r3
 800c6a4:	f340 8162 	ble.w	800c96c <__ieee754_pow+0x6fc>
 800c6a8:	9b05      	ldr	r3, [sp, #20]
 800c6aa:	3301      	adds	r3, #1
 800c6ac:	9305      	str	r3, [sp, #20]
 800c6ae:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800c6b2:	2400      	movs	r4, #0
 800c6b4:	00e3      	lsls	r3, r4, #3
 800c6b6:	9307      	str	r3, [sp, #28]
 800c6b8:	4bc7      	ldr	r3, [pc, #796]	; (800c9d8 <__ieee754_pow+0x768>)
 800c6ba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c6be:	ed93 7b00 	vldr	d7, [r3]
 800c6c2:	4629      	mov	r1, r5
 800c6c4:	ec53 2b17 	vmov	r2, r3, d7
 800c6c8:	eeb0 9a47 	vmov.f32	s18, s14
 800c6cc:	eef0 9a67 	vmov.f32	s19, s15
 800c6d0:	4682      	mov	sl, r0
 800c6d2:	f7f3 fdd9 	bl	8000288 <__aeabi_dsub>
 800c6d6:	4652      	mov	r2, sl
 800c6d8:	4606      	mov	r6, r0
 800c6da:	460f      	mov	r7, r1
 800c6dc:	462b      	mov	r3, r5
 800c6de:	ec51 0b19 	vmov	r0, r1, d9
 800c6e2:	f7f3 fdd3 	bl	800028c <__adddf3>
 800c6e6:	4602      	mov	r2, r0
 800c6e8:	460b      	mov	r3, r1
 800c6ea:	2000      	movs	r0, #0
 800c6ec:	49bb      	ldr	r1, [pc, #748]	; (800c9dc <__ieee754_pow+0x76c>)
 800c6ee:	f7f4 f8ad 	bl	800084c <__aeabi_ddiv>
 800c6f2:	ec41 0b1a 	vmov	d10, r0, r1
 800c6f6:	4602      	mov	r2, r0
 800c6f8:	460b      	mov	r3, r1
 800c6fa:	4630      	mov	r0, r6
 800c6fc:	4639      	mov	r1, r7
 800c6fe:	f7f3 ff7b 	bl	80005f8 <__aeabi_dmul>
 800c702:	2300      	movs	r3, #0
 800c704:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c708:	9302      	str	r3, [sp, #8]
 800c70a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c70e:	46ab      	mov	fp, r5
 800c710:	106d      	asrs	r5, r5, #1
 800c712:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800c716:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800c71a:	ec41 0b18 	vmov	d8, r0, r1
 800c71e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800c722:	2200      	movs	r2, #0
 800c724:	4640      	mov	r0, r8
 800c726:	4649      	mov	r1, r9
 800c728:	4614      	mov	r4, r2
 800c72a:	461d      	mov	r5, r3
 800c72c:	f7f3 ff64 	bl	80005f8 <__aeabi_dmul>
 800c730:	4602      	mov	r2, r0
 800c732:	460b      	mov	r3, r1
 800c734:	4630      	mov	r0, r6
 800c736:	4639      	mov	r1, r7
 800c738:	f7f3 fda6 	bl	8000288 <__aeabi_dsub>
 800c73c:	ec53 2b19 	vmov	r2, r3, d9
 800c740:	4606      	mov	r6, r0
 800c742:	460f      	mov	r7, r1
 800c744:	4620      	mov	r0, r4
 800c746:	4629      	mov	r1, r5
 800c748:	f7f3 fd9e 	bl	8000288 <__aeabi_dsub>
 800c74c:	4602      	mov	r2, r0
 800c74e:	460b      	mov	r3, r1
 800c750:	4650      	mov	r0, sl
 800c752:	4659      	mov	r1, fp
 800c754:	f7f3 fd98 	bl	8000288 <__aeabi_dsub>
 800c758:	4642      	mov	r2, r8
 800c75a:	464b      	mov	r3, r9
 800c75c:	f7f3 ff4c 	bl	80005f8 <__aeabi_dmul>
 800c760:	4602      	mov	r2, r0
 800c762:	460b      	mov	r3, r1
 800c764:	4630      	mov	r0, r6
 800c766:	4639      	mov	r1, r7
 800c768:	f7f3 fd8e 	bl	8000288 <__aeabi_dsub>
 800c76c:	ec53 2b1a 	vmov	r2, r3, d10
 800c770:	f7f3 ff42 	bl	80005f8 <__aeabi_dmul>
 800c774:	ec53 2b18 	vmov	r2, r3, d8
 800c778:	ec41 0b19 	vmov	d9, r0, r1
 800c77c:	ec51 0b18 	vmov	r0, r1, d8
 800c780:	f7f3 ff3a 	bl	80005f8 <__aeabi_dmul>
 800c784:	a37c      	add	r3, pc, #496	; (adr r3, 800c978 <__ieee754_pow+0x708>)
 800c786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c78a:	4604      	mov	r4, r0
 800c78c:	460d      	mov	r5, r1
 800c78e:	f7f3 ff33 	bl	80005f8 <__aeabi_dmul>
 800c792:	a37b      	add	r3, pc, #492	; (adr r3, 800c980 <__ieee754_pow+0x710>)
 800c794:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c798:	f7f3 fd78 	bl	800028c <__adddf3>
 800c79c:	4622      	mov	r2, r4
 800c79e:	462b      	mov	r3, r5
 800c7a0:	f7f3 ff2a 	bl	80005f8 <__aeabi_dmul>
 800c7a4:	a378      	add	r3, pc, #480	; (adr r3, 800c988 <__ieee754_pow+0x718>)
 800c7a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7aa:	f7f3 fd6f 	bl	800028c <__adddf3>
 800c7ae:	4622      	mov	r2, r4
 800c7b0:	462b      	mov	r3, r5
 800c7b2:	f7f3 ff21 	bl	80005f8 <__aeabi_dmul>
 800c7b6:	a376      	add	r3, pc, #472	; (adr r3, 800c990 <__ieee754_pow+0x720>)
 800c7b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7bc:	f7f3 fd66 	bl	800028c <__adddf3>
 800c7c0:	4622      	mov	r2, r4
 800c7c2:	462b      	mov	r3, r5
 800c7c4:	f7f3 ff18 	bl	80005f8 <__aeabi_dmul>
 800c7c8:	a373      	add	r3, pc, #460	; (adr r3, 800c998 <__ieee754_pow+0x728>)
 800c7ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7ce:	f7f3 fd5d 	bl	800028c <__adddf3>
 800c7d2:	4622      	mov	r2, r4
 800c7d4:	462b      	mov	r3, r5
 800c7d6:	f7f3 ff0f 	bl	80005f8 <__aeabi_dmul>
 800c7da:	a371      	add	r3, pc, #452	; (adr r3, 800c9a0 <__ieee754_pow+0x730>)
 800c7dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7e0:	f7f3 fd54 	bl	800028c <__adddf3>
 800c7e4:	4622      	mov	r2, r4
 800c7e6:	4606      	mov	r6, r0
 800c7e8:	460f      	mov	r7, r1
 800c7ea:	462b      	mov	r3, r5
 800c7ec:	4620      	mov	r0, r4
 800c7ee:	4629      	mov	r1, r5
 800c7f0:	f7f3 ff02 	bl	80005f8 <__aeabi_dmul>
 800c7f4:	4602      	mov	r2, r0
 800c7f6:	460b      	mov	r3, r1
 800c7f8:	4630      	mov	r0, r6
 800c7fa:	4639      	mov	r1, r7
 800c7fc:	f7f3 fefc 	bl	80005f8 <__aeabi_dmul>
 800c800:	4642      	mov	r2, r8
 800c802:	4604      	mov	r4, r0
 800c804:	460d      	mov	r5, r1
 800c806:	464b      	mov	r3, r9
 800c808:	ec51 0b18 	vmov	r0, r1, d8
 800c80c:	f7f3 fd3e 	bl	800028c <__adddf3>
 800c810:	ec53 2b19 	vmov	r2, r3, d9
 800c814:	f7f3 fef0 	bl	80005f8 <__aeabi_dmul>
 800c818:	4622      	mov	r2, r4
 800c81a:	462b      	mov	r3, r5
 800c81c:	f7f3 fd36 	bl	800028c <__adddf3>
 800c820:	4642      	mov	r2, r8
 800c822:	4682      	mov	sl, r0
 800c824:	468b      	mov	fp, r1
 800c826:	464b      	mov	r3, r9
 800c828:	4640      	mov	r0, r8
 800c82a:	4649      	mov	r1, r9
 800c82c:	f7f3 fee4 	bl	80005f8 <__aeabi_dmul>
 800c830:	4b6b      	ldr	r3, [pc, #428]	; (800c9e0 <__ieee754_pow+0x770>)
 800c832:	2200      	movs	r2, #0
 800c834:	4606      	mov	r6, r0
 800c836:	460f      	mov	r7, r1
 800c838:	f7f3 fd28 	bl	800028c <__adddf3>
 800c83c:	4652      	mov	r2, sl
 800c83e:	465b      	mov	r3, fp
 800c840:	f7f3 fd24 	bl	800028c <__adddf3>
 800c844:	2000      	movs	r0, #0
 800c846:	4604      	mov	r4, r0
 800c848:	460d      	mov	r5, r1
 800c84a:	4602      	mov	r2, r0
 800c84c:	460b      	mov	r3, r1
 800c84e:	4640      	mov	r0, r8
 800c850:	4649      	mov	r1, r9
 800c852:	f7f3 fed1 	bl	80005f8 <__aeabi_dmul>
 800c856:	4b62      	ldr	r3, [pc, #392]	; (800c9e0 <__ieee754_pow+0x770>)
 800c858:	4680      	mov	r8, r0
 800c85a:	4689      	mov	r9, r1
 800c85c:	2200      	movs	r2, #0
 800c85e:	4620      	mov	r0, r4
 800c860:	4629      	mov	r1, r5
 800c862:	f7f3 fd11 	bl	8000288 <__aeabi_dsub>
 800c866:	4632      	mov	r2, r6
 800c868:	463b      	mov	r3, r7
 800c86a:	f7f3 fd0d 	bl	8000288 <__aeabi_dsub>
 800c86e:	4602      	mov	r2, r0
 800c870:	460b      	mov	r3, r1
 800c872:	4650      	mov	r0, sl
 800c874:	4659      	mov	r1, fp
 800c876:	f7f3 fd07 	bl	8000288 <__aeabi_dsub>
 800c87a:	ec53 2b18 	vmov	r2, r3, d8
 800c87e:	f7f3 febb 	bl	80005f8 <__aeabi_dmul>
 800c882:	4622      	mov	r2, r4
 800c884:	4606      	mov	r6, r0
 800c886:	460f      	mov	r7, r1
 800c888:	462b      	mov	r3, r5
 800c88a:	ec51 0b19 	vmov	r0, r1, d9
 800c88e:	f7f3 feb3 	bl	80005f8 <__aeabi_dmul>
 800c892:	4602      	mov	r2, r0
 800c894:	460b      	mov	r3, r1
 800c896:	4630      	mov	r0, r6
 800c898:	4639      	mov	r1, r7
 800c89a:	f7f3 fcf7 	bl	800028c <__adddf3>
 800c89e:	4606      	mov	r6, r0
 800c8a0:	460f      	mov	r7, r1
 800c8a2:	4602      	mov	r2, r0
 800c8a4:	460b      	mov	r3, r1
 800c8a6:	4640      	mov	r0, r8
 800c8a8:	4649      	mov	r1, r9
 800c8aa:	f7f3 fcef 	bl	800028c <__adddf3>
 800c8ae:	a33e      	add	r3, pc, #248	; (adr r3, 800c9a8 <__ieee754_pow+0x738>)
 800c8b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8b4:	2000      	movs	r0, #0
 800c8b6:	4604      	mov	r4, r0
 800c8b8:	460d      	mov	r5, r1
 800c8ba:	f7f3 fe9d 	bl	80005f8 <__aeabi_dmul>
 800c8be:	4642      	mov	r2, r8
 800c8c0:	ec41 0b18 	vmov	d8, r0, r1
 800c8c4:	464b      	mov	r3, r9
 800c8c6:	4620      	mov	r0, r4
 800c8c8:	4629      	mov	r1, r5
 800c8ca:	f7f3 fcdd 	bl	8000288 <__aeabi_dsub>
 800c8ce:	4602      	mov	r2, r0
 800c8d0:	460b      	mov	r3, r1
 800c8d2:	4630      	mov	r0, r6
 800c8d4:	4639      	mov	r1, r7
 800c8d6:	f7f3 fcd7 	bl	8000288 <__aeabi_dsub>
 800c8da:	a335      	add	r3, pc, #212	; (adr r3, 800c9b0 <__ieee754_pow+0x740>)
 800c8dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8e0:	f7f3 fe8a 	bl	80005f8 <__aeabi_dmul>
 800c8e4:	a334      	add	r3, pc, #208	; (adr r3, 800c9b8 <__ieee754_pow+0x748>)
 800c8e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8ea:	4606      	mov	r6, r0
 800c8ec:	460f      	mov	r7, r1
 800c8ee:	4620      	mov	r0, r4
 800c8f0:	4629      	mov	r1, r5
 800c8f2:	f7f3 fe81 	bl	80005f8 <__aeabi_dmul>
 800c8f6:	4602      	mov	r2, r0
 800c8f8:	460b      	mov	r3, r1
 800c8fa:	4630      	mov	r0, r6
 800c8fc:	4639      	mov	r1, r7
 800c8fe:	f7f3 fcc5 	bl	800028c <__adddf3>
 800c902:	9a07      	ldr	r2, [sp, #28]
 800c904:	4b37      	ldr	r3, [pc, #220]	; (800c9e4 <__ieee754_pow+0x774>)
 800c906:	4413      	add	r3, r2
 800c908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c90c:	f7f3 fcbe 	bl	800028c <__adddf3>
 800c910:	4682      	mov	sl, r0
 800c912:	9805      	ldr	r0, [sp, #20]
 800c914:	468b      	mov	fp, r1
 800c916:	f7f3 fe05 	bl	8000524 <__aeabi_i2d>
 800c91a:	9a07      	ldr	r2, [sp, #28]
 800c91c:	4b32      	ldr	r3, [pc, #200]	; (800c9e8 <__ieee754_pow+0x778>)
 800c91e:	4413      	add	r3, r2
 800c920:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c924:	4606      	mov	r6, r0
 800c926:	460f      	mov	r7, r1
 800c928:	4652      	mov	r2, sl
 800c92a:	465b      	mov	r3, fp
 800c92c:	ec51 0b18 	vmov	r0, r1, d8
 800c930:	f7f3 fcac 	bl	800028c <__adddf3>
 800c934:	4642      	mov	r2, r8
 800c936:	464b      	mov	r3, r9
 800c938:	f7f3 fca8 	bl	800028c <__adddf3>
 800c93c:	4632      	mov	r2, r6
 800c93e:	463b      	mov	r3, r7
 800c940:	f7f3 fca4 	bl	800028c <__adddf3>
 800c944:	2000      	movs	r0, #0
 800c946:	4632      	mov	r2, r6
 800c948:	463b      	mov	r3, r7
 800c94a:	4604      	mov	r4, r0
 800c94c:	460d      	mov	r5, r1
 800c94e:	f7f3 fc9b 	bl	8000288 <__aeabi_dsub>
 800c952:	4642      	mov	r2, r8
 800c954:	464b      	mov	r3, r9
 800c956:	f7f3 fc97 	bl	8000288 <__aeabi_dsub>
 800c95a:	ec53 2b18 	vmov	r2, r3, d8
 800c95e:	f7f3 fc93 	bl	8000288 <__aeabi_dsub>
 800c962:	4602      	mov	r2, r0
 800c964:	460b      	mov	r3, r1
 800c966:	4650      	mov	r0, sl
 800c968:	4659      	mov	r1, fp
 800c96a:	e610      	b.n	800c58e <__ieee754_pow+0x31e>
 800c96c:	2401      	movs	r4, #1
 800c96e:	e6a1      	b.n	800c6b4 <__ieee754_pow+0x444>
 800c970:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800c9c0 <__ieee754_pow+0x750>
 800c974:	e617      	b.n	800c5a6 <__ieee754_pow+0x336>
 800c976:	bf00      	nop
 800c978:	4a454eef 	.word	0x4a454eef
 800c97c:	3fca7e28 	.word	0x3fca7e28
 800c980:	93c9db65 	.word	0x93c9db65
 800c984:	3fcd864a 	.word	0x3fcd864a
 800c988:	a91d4101 	.word	0xa91d4101
 800c98c:	3fd17460 	.word	0x3fd17460
 800c990:	518f264d 	.word	0x518f264d
 800c994:	3fd55555 	.word	0x3fd55555
 800c998:	db6fabff 	.word	0xdb6fabff
 800c99c:	3fdb6db6 	.word	0x3fdb6db6
 800c9a0:	33333303 	.word	0x33333303
 800c9a4:	3fe33333 	.word	0x3fe33333
 800c9a8:	e0000000 	.word	0xe0000000
 800c9ac:	3feec709 	.word	0x3feec709
 800c9b0:	dc3a03fd 	.word	0xdc3a03fd
 800c9b4:	3feec709 	.word	0x3feec709
 800c9b8:	145b01f5 	.word	0x145b01f5
 800c9bc:	be3e2fe0 	.word	0xbe3e2fe0
 800c9c0:	00000000 	.word	0x00000000
 800c9c4:	3ff00000 	.word	0x3ff00000
 800c9c8:	7ff00000 	.word	0x7ff00000
 800c9cc:	43400000 	.word	0x43400000
 800c9d0:	0003988e 	.word	0x0003988e
 800c9d4:	000bb679 	.word	0x000bb679
 800c9d8:	08011640 	.word	0x08011640
 800c9dc:	3ff00000 	.word	0x3ff00000
 800c9e0:	40080000 	.word	0x40080000
 800c9e4:	08011660 	.word	0x08011660
 800c9e8:	08011650 	.word	0x08011650
 800c9ec:	a3b5      	add	r3, pc, #724	; (adr r3, 800ccc4 <__ieee754_pow+0xa54>)
 800c9ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9f2:	4640      	mov	r0, r8
 800c9f4:	4649      	mov	r1, r9
 800c9f6:	f7f3 fc49 	bl	800028c <__adddf3>
 800c9fa:	4622      	mov	r2, r4
 800c9fc:	ec41 0b1a 	vmov	d10, r0, r1
 800ca00:	462b      	mov	r3, r5
 800ca02:	4630      	mov	r0, r6
 800ca04:	4639      	mov	r1, r7
 800ca06:	f7f3 fc3f 	bl	8000288 <__aeabi_dsub>
 800ca0a:	4602      	mov	r2, r0
 800ca0c:	460b      	mov	r3, r1
 800ca0e:	ec51 0b1a 	vmov	r0, r1, d10
 800ca12:	f7f4 f881 	bl	8000b18 <__aeabi_dcmpgt>
 800ca16:	2800      	cmp	r0, #0
 800ca18:	f47f ae04 	bne.w	800c624 <__ieee754_pow+0x3b4>
 800ca1c:	4aa4      	ldr	r2, [pc, #656]	; (800ccb0 <__ieee754_pow+0xa40>)
 800ca1e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ca22:	4293      	cmp	r3, r2
 800ca24:	f340 8108 	ble.w	800cc38 <__ieee754_pow+0x9c8>
 800ca28:	151b      	asrs	r3, r3, #20
 800ca2a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800ca2e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800ca32:	fa4a f303 	asr.w	r3, sl, r3
 800ca36:	445b      	add	r3, fp
 800ca38:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800ca3c:	4e9d      	ldr	r6, [pc, #628]	; (800ccb4 <__ieee754_pow+0xa44>)
 800ca3e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800ca42:	4116      	asrs	r6, r2
 800ca44:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800ca48:	2000      	movs	r0, #0
 800ca4a:	ea23 0106 	bic.w	r1, r3, r6
 800ca4e:	f1c2 0214 	rsb	r2, r2, #20
 800ca52:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800ca56:	fa4a fa02 	asr.w	sl, sl, r2
 800ca5a:	f1bb 0f00 	cmp.w	fp, #0
 800ca5e:	4602      	mov	r2, r0
 800ca60:	460b      	mov	r3, r1
 800ca62:	4620      	mov	r0, r4
 800ca64:	4629      	mov	r1, r5
 800ca66:	bfb8      	it	lt
 800ca68:	f1ca 0a00 	rsblt	sl, sl, #0
 800ca6c:	f7f3 fc0c 	bl	8000288 <__aeabi_dsub>
 800ca70:	ec41 0b19 	vmov	d9, r0, r1
 800ca74:	4642      	mov	r2, r8
 800ca76:	464b      	mov	r3, r9
 800ca78:	ec51 0b19 	vmov	r0, r1, d9
 800ca7c:	f7f3 fc06 	bl	800028c <__adddf3>
 800ca80:	a37b      	add	r3, pc, #492	; (adr r3, 800cc70 <__ieee754_pow+0xa00>)
 800ca82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca86:	2000      	movs	r0, #0
 800ca88:	4604      	mov	r4, r0
 800ca8a:	460d      	mov	r5, r1
 800ca8c:	f7f3 fdb4 	bl	80005f8 <__aeabi_dmul>
 800ca90:	ec53 2b19 	vmov	r2, r3, d9
 800ca94:	4606      	mov	r6, r0
 800ca96:	460f      	mov	r7, r1
 800ca98:	4620      	mov	r0, r4
 800ca9a:	4629      	mov	r1, r5
 800ca9c:	f7f3 fbf4 	bl	8000288 <__aeabi_dsub>
 800caa0:	4602      	mov	r2, r0
 800caa2:	460b      	mov	r3, r1
 800caa4:	4640      	mov	r0, r8
 800caa6:	4649      	mov	r1, r9
 800caa8:	f7f3 fbee 	bl	8000288 <__aeabi_dsub>
 800caac:	a372      	add	r3, pc, #456	; (adr r3, 800cc78 <__ieee754_pow+0xa08>)
 800caae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cab2:	f7f3 fda1 	bl	80005f8 <__aeabi_dmul>
 800cab6:	a372      	add	r3, pc, #456	; (adr r3, 800cc80 <__ieee754_pow+0xa10>)
 800cab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cabc:	4680      	mov	r8, r0
 800cabe:	4689      	mov	r9, r1
 800cac0:	4620      	mov	r0, r4
 800cac2:	4629      	mov	r1, r5
 800cac4:	f7f3 fd98 	bl	80005f8 <__aeabi_dmul>
 800cac8:	4602      	mov	r2, r0
 800caca:	460b      	mov	r3, r1
 800cacc:	4640      	mov	r0, r8
 800cace:	4649      	mov	r1, r9
 800cad0:	f7f3 fbdc 	bl	800028c <__adddf3>
 800cad4:	4604      	mov	r4, r0
 800cad6:	460d      	mov	r5, r1
 800cad8:	4602      	mov	r2, r0
 800cada:	460b      	mov	r3, r1
 800cadc:	4630      	mov	r0, r6
 800cade:	4639      	mov	r1, r7
 800cae0:	f7f3 fbd4 	bl	800028c <__adddf3>
 800cae4:	4632      	mov	r2, r6
 800cae6:	463b      	mov	r3, r7
 800cae8:	4680      	mov	r8, r0
 800caea:	4689      	mov	r9, r1
 800caec:	f7f3 fbcc 	bl	8000288 <__aeabi_dsub>
 800caf0:	4602      	mov	r2, r0
 800caf2:	460b      	mov	r3, r1
 800caf4:	4620      	mov	r0, r4
 800caf6:	4629      	mov	r1, r5
 800caf8:	f7f3 fbc6 	bl	8000288 <__aeabi_dsub>
 800cafc:	4642      	mov	r2, r8
 800cafe:	4606      	mov	r6, r0
 800cb00:	460f      	mov	r7, r1
 800cb02:	464b      	mov	r3, r9
 800cb04:	4640      	mov	r0, r8
 800cb06:	4649      	mov	r1, r9
 800cb08:	f7f3 fd76 	bl	80005f8 <__aeabi_dmul>
 800cb0c:	a35e      	add	r3, pc, #376	; (adr r3, 800cc88 <__ieee754_pow+0xa18>)
 800cb0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb12:	4604      	mov	r4, r0
 800cb14:	460d      	mov	r5, r1
 800cb16:	f7f3 fd6f 	bl	80005f8 <__aeabi_dmul>
 800cb1a:	a35d      	add	r3, pc, #372	; (adr r3, 800cc90 <__ieee754_pow+0xa20>)
 800cb1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb20:	f7f3 fbb2 	bl	8000288 <__aeabi_dsub>
 800cb24:	4622      	mov	r2, r4
 800cb26:	462b      	mov	r3, r5
 800cb28:	f7f3 fd66 	bl	80005f8 <__aeabi_dmul>
 800cb2c:	a35a      	add	r3, pc, #360	; (adr r3, 800cc98 <__ieee754_pow+0xa28>)
 800cb2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb32:	f7f3 fbab 	bl	800028c <__adddf3>
 800cb36:	4622      	mov	r2, r4
 800cb38:	462b      	mov	r3, r5
 800cb3a:	f7f3 fd5d 	bl	80005f8 <__aeabi_dmul>
 800cb3e:	a358      	add	r3, pc, #352	; (adr r3, 800cca0 <__ieee754_pow+0xa30>)
 800cb40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb44:	f7f3 fba0 	bl	8000288 <__aeabi_dsub>
 800cb48:	4622      	mov	r2, r4
 800cb4a:	462b      	mov	r3, r5
 800cb4c:	f7f3 fd54 	bl	80005f8 <__aeabi_dmul>
 800cb50:	a355      	add	r3, pc, #340	; (adr r3, 800cca8 <__ieee754_pow+0xa38>)
 800cb52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb56:	f7f3 fb99 	bl	800028c <__adddf3>
 800cb5a:	4622      	mov	r2, r4
 800cb5c:	462b      	mov	r3, r5
 800cb5e:	f7f3 fd4b 	bl	80005f8 <__aeabi_dmul>
 800cb62:	4602      	mov	r2, r0
 800cb64:	460b      	mov	r3, r1
 800cb66:	4640      	mov	r0, r8
 800cb68:	4649      	mov	r1, r9
 800cb6a:	f7f3 fb8d 	bl	8000288 <__aeabi_dsub>
 800cb6e:	4604      	mov	r4, r0
 800cb70:	460d      	mov	r5, r1
 800cb72:	4602      	mov	r2, r0
 800cb74:	460b      	mov	r3, r1
 800cb76:	4640      	mov	r0, r8
 800cb78:	4649      	mov	r1, r9
 800cb7a:	f7f3 fd3d 	bl	80005f8 <__aeabi_dmul>
 800cb7e:	2200      	movs	r2, #0
 800cb80:	ec41 0b19 	vmov	d9, r0, r1
 800cb84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cb88:	4620      	mov	r0, r4
 800cb8a:	4629      	mov	r1, r5
 800cb8c:	f7f3 fb7c 	bl	8000288 <__aeabi_dsub>
 800cb90:	4602      	mov	r2, r0
 800cb92:	460b      	mov	r3, r1
 800cb94:	ec51 0b19 	vmov	r0, r1, d9
 800cb98:	f7f3 fe58 	bl	800084c <__aeabi_ddiv>
 800cb9c:	4632      	mov	r2, r6
 800cb9e:	4604      	mov	r4, r0
 800cba0:	460d      	mov	r5, r1
 800cba2:	463b      	mov	r3, r7
 800cba4:	4640      	mov	r0, r8
 800cba6:	4649      	mov	r1, r9
 800cba8:	f7f3 fd26 	bl	80005f8 <__aeabi_dmul>
 800cbac:	4632      	mov	r2, r6
 800cbae:	463b      	mov	r3, r7
 800cbb0:	f7f3 fb6c 	bl	800028c <__adddf3>
 800cbb4:	4602      	mov	r2, r0
 800cbb6:	460b      	mov	r3, r1
 800cbb8:	4620      	mov	r0, r4
 800cbba:	4629      	mov	r1, r5
 800cbbc:	f7f3 fb64 	bl	8000288 <__aeabi_dsub>
 800cbc0:	4642      	mov	r2, r8
 800cbc2:	464b      	mov	r3, r9
 800cbc4:	f7f3 fb60 	bl	8000288 <__aeabi_dsub>
 800cbc8:	460b      	mov	r3, r1
 800cbca:	4602      	mov	r2, r0
 800cbcc:	493a      	ldr	r1, [pc, #232]	; (800ccb8 <__ieee754_pow+0xa48>)
 800cbce:	2000      	movs	r0, #0
 800cbd0:	f7f3 fb5a 	bl	8000288 <__aeabi_dsub>
 800cbd4:	ec41 0b10 	vmov	d0, r0, r1
 800cbd8:	ee10 3a90 	vmov	r3, s1
 800cbdc:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800cbe0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cbe4:	da2b      	bge.n	800cc3e <__ieee754_pow+0x9ce>
 800cbe6:	4650      	mov	r0, sl
 800cbe8:	f000 f966 	bl	800ceb8 <scalbn>
 800cbec:	ec51 0b10 	vmov	r0, r1, d0
 800cbf0:	ec53 2b18 	vmov	r2, r3, d8
 800cbf4:	f7ff bbed 	b.w	800c3d2 <__ieee754_pow+0x162>
 800cbf8:	4b30      	ldr	r3, [pc, #192]	; (800ccbc <__ieee754_pow+0xa4c>)
 800cbfa:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800cbfe:	429e      	cmp	r6, r3
 800cc00:	f77f af0c 	ble.w	800ca1c <__ieee754_pow+0x7ac>
 800cc04:	4b2e      	ldr	r3, [pc, #184]	; (800ccc0 <__ieee754_pow+0xa50>)
 800cc06:	440b      	add	r3, r1
 800cc08:	4303      	orrs	r3, r0
 800cc0a:	d009      	beq.n	800cc20 <__ieee754_pow+0x9b0>
 800cc0c:	ec51 0b18 	vmov	r0, r1, d8
 800cc10:	2200      	movs	r2, #0
 800cc12:	2300      	movs	r3, #0
 800cc14:	f7f3 ff62 	bl	8000adc <__aeabi_dcmplt>
 800cc18:	3800      	subs	r0, #0
 800cc1a:	bf18      	it	ne
 800cc1c:	2001      	movne	r0, #1
 800cc1e:	e447      	b.n	800c4b0 <__ieee754_pow+0x240>
 800cc20:	4622      	mov	r2, r4
 800cc22:	462b      	mov	r3, r5
 800cc24:	f7f3 fb30 	bl	8000288 <__aeabi_dsub>
 800cc28:	4642      	mov	r2, r8
 800cc2a:	464b      	mov	r3, r9
 800cc2c:	f7f3 ff6a 	bl	8000b04 <__aeabi_dcmpge>
 800cc30:	2800      	cmp	r0, #0
 800cc32:	f43f aef3 	beq.w	800ca1c <__ieee754_pow+0x7ac>
 800cc36:	e7e9      	b.n	800cc0c <__ieee754_pow+0x99c>
 800cc38:	f04f 0a00 	mov.w	sl, #0
 800cc3c:	e71a      	b.n	800ca74 <__ieee754_pow+0x804>
 800cc3e:	ec51 0b10 	vmov	r0, r1, d0
 800cc42:	4619      	mov	r1, r3
 800cc44:	e7d4      	b.n	800cbf0 <__ieee754_pow+0x980>
 800cc46:	491c      	ldr	r1, [pc, #112]	; (800ccb8 <__ieee754_pow+0xa48>)
 800cc48:	2000      	movs	r0, #0
 800cc4a:	f7ff bb30 	b.w	800c2ae <__ieee754_pow+0x3e>
 800cc4e:	2000      	movs	r0, #0
 800cc50:	2100      	movs	r1, #0
 800cc52:	f7ff bb2c 	b.w	800c2ae <__ieee754_pow+0x3e>
 800cc56:	4630      	mov	r0, r6
 800cc58:	4639      	mov	r1, r7
 800cc5a:	f7ff bb28 	b.w	800c2ae <__ieee754_pow+0x3e>
 800cc5e:	9204      	str	r2, [sp, #16]
 800cc60:	f7ff bb7a 	b.w	800c358 <__ieee754_pow+0xe8>
 800cc64:	2300      	movs	r3, #0
 800cc66:	f7ff bb64 	b.w	800c332 <__ieee754_pow+0xc2>
 800cc6a:	bf00      	nop
 800cc6c:	f3af 8000 	nop.w
 800cc70:	00000000 	.word	0x00000000
 800cc74:	3fe62e43 	.word	0x3fe62e43
 800cc78:	fefa39ef 	.word	0xfefa39ef
 800cc7c:	3fe62e42 	.word	0x3fe62e42
 800cc80:	0ca86c39 	.word	0x0ca86c39
 800cc84:	be205c61 	.word	0xbe205c61
 800cc88:	72bea4d0 	.word	0x72bea4d0
 800cc8c:	3e663769 	.word	0x3e663769
 800cc90:	c5d26bf1 	.word	0xc5d26bf1
 800cc94:	3ebbbd41 	.word	0x3ebbbd41
 800cc98:	af25de2c 	.word	0xaf25de2c
 800cc9c:	3f11566a 	.word	0x3f11566a
 800cca0:	16bebd93 	.word	0x16bebd93
 800cca4:	3f66c16c 	.word	0x3f66c16c
 800cca8:	5555553e 	.word	0x5555553e
 800ccac:	3fc55555 	.word	0x3fc55555
 800ccb0:	3fe00000 	.word	0x3fe00000
 800ccb4:	000fffff 	.word	0x000fffff
 800ccb8:	3ff00000 	.word	0x3ff00000
 800ccbc:	4090cbff 	.word	0x4090cbff
 800ccc0:	3f6f3400 	.word	0x3f6f3400
 800ccc4:	652b82fe 	.word	0x652b82fe
 800ccc8:	3c971547 	.word	0x3c971547

0800cccc <__ieee754_sqrt>:
 800cccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccd0:	ec55 4b10 	vmov	r4, r5, d0
 800ccd4:	4e55      	ldr	r6, [pc, #340]	; (800ce2c <__ieee754_sqrt+0x160>)
 800ccd6:	43ae      	bics	r6, r5
 800ccd8:	ee10 0a10 	vmov	r0, s0
 800ccdc:	ee10 3a10 	vmov	r3, s0
 800cce0:	462a      	mov	r2, r5
 800cce2:	4629      	mov	r1, r5
 800cce4:	d110      	bne.n	800cd08 <__ieee754_sqrt+0x3c>
 800cce6:	ee10 2a10 	vmov	r2, s0
 800ccea:	462b      	mov	r3, r5
 800ccec:	f7f3 fc84 	bl	80005f8 <__aeabi_dmul>
 800ccf0:	4602      	mov	r2, r0
 800ccf2:	460b      	mov	r3, r1
 800ccf4:	4620      	mov	r0, r4
 800ccf6:	4629      	mov	r1, r5
 800ccf8:	f7f3 fac8 	bl	800028c <__adddf3>
 800ccfc:	4604      	mov	r4, r0
 800ccfe:	460d      	mov	r5, r1
 800cd00:	ec45 4b10 	vmov	d0, r4, r5
 800cd04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd08:	2d00      	cmp	r5, #0
 800cd0a:	dc10      	bgt.n	800cd2e <__ieee754_sqrt+0x62>
 800cd0c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800cd10:	4330      	orrs	r0, r6
 800cd12:	d0f5      	beq.n	800cd00 <__ieee754_sqrt+0x34>
 800cd14:	b15d      	cbz	r5, 800cd2e <__ieee754_sqrt+0x62>
 800cd16:	ee10 2a10 	vmov	r2, s0
 800cd1a:	462b      	mov	r3, r5
 800cd1c:	ee10 0a10 	vmov	r0, s0
 800cd20:	f7f3 fab2 	bl	8000288 <__aeabi_dsub>
 800cd24:	4602      	mov	r2, r0
 800cd26:	460b      	mov	r3, r1
 800cd28:	f7f3 fd90 	bl	800084c <__aeabi_ddiv>
 800cd2c:	e7e6      	b.n	800ccfc <__ieee754_sqrt+0x30>
 800cd2e:	1512      	asrs	r2, r2, #20
 800cd30:	d074      	beq.n	800ce1c <__ieee754_sqrt+0x150>
 800cd32:	07d4      	lsls	r4, r2, #31
 800cd34:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800cd38:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800cd3c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800cd40:	bf5e      	ittt	pl
 800cd42:	0fda      	lsrpl	r2, r3, #31
 800cd44:	005b      	lslpl	r3, r3, #1
 800cd46:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800cd4a:	2400      	movs	r4, #0
 800cd4c:	0fda      	lsrs	r2, r3, #31
 800cd4e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800cd52:	107f      	asrs	r7, r7, #1
 800cd54:	005b      	lsls	r3, r3, #1
 800cd56:	2516      	movs	r5, #22
 800cd58:	4620      	mov	r0, r4
 800cd5a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800cd5e:	1886      	adds	r6, r0, r2
 800cd60:	428e      	cmp	r6, r1
 800cd62:	bfde      	ittt	le
 800cd64:	1b89      	suble	r1, r1, r6
 800cd66:	18b0      	addle	r0, r6, r2
 800cd68:	18a4      	addle	r4, r4, r2
 800cd6a:	0049      	lsls	r1, r1, #1
 800cd6c:	3d01      	subs	r5, #1
 800cd6e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800cd72:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800cd76:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cd7a:	d1f0      	bne.n	800cd5e <__ieee754_sqrt+0x92>
 800cd7c:	462a      	mov	r2, r5
 800cd7e:	f04f 0e20 	mov.w	lr, #32
 800cd82:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800cd86:	4281      	cmp	r1, r0
 800cd88:	eb06 0c05 	add.w	ip, r6, r5
 800cd8c:	dc02      	bgt.n	800cd94 <__ieee754_sqrt+0xc8>
 800cd8e:	d113      	bne.n	800cdb8 <__ieee754_sqrt+0xec>
 800cd90:	459c      	cmp	ip, r3
 800cd92:	d811      	bhi.n	800cdb8 <__ieee754_sqrt+0xec>
 800cd94:	f1bc 0f00 	cmp.w	ip, #0
 800cd98:	eb0c 0506 	add.w	r5, ip, r6
 800cd9c:	da43      	bge.n	800ce26 <__ieee754_sqrt+0x15a>
 800cd9e:	2d00      	cmp	r5, #0
 800cda0:	db41      	blt.n	800ce26 <__ieee754_sqrt+0x15a>
 800cda2:	f100 0801 	add.w	r8, r0, #1
 800cda6:	1a09      	subs	r1, r1, r0
 800cda8:	459c      	cmp	ip, r3
 800cdaa:	bf88      	it	hi
 800cdac:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 800cdb0:	eba3 030c 	sub.w	r3, r3, ip
 800cdb4:	4432      	add	r2, r6
 800cdb6:	4640      	mov	r0, r8
 800cdb8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800cdbc:	f1be 0e01 	subs.w	lr, lr, #1
 800cdc0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800cdc4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cdc8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800cdcc:	d1db      	bne.n	800cd86 <__ieee754_sqrt+0xba>
 800cdce:	430b      	orrs	r3, r1
 800cdd0:	d006      	beq.n	800cde0 <__ieee754_sqrt+0x114>
 800cdd2:	1c50      	adds	r0, r2, #1
 800cdd4:	bf13      	iteet	ne
 800cdd6:	3201      	addne	r2, #1
 800cdd8:	3401      	addeq	r4, #1
 800cdda:	4672      	moveq	r2, lr
 800cddc:	f022 0201 	bicne.w	r2, r2, #1
 800cde0:	1063      	asrs	r3, r4, #1
 800cde2:	0852      	lsrs	r2, r2, #1
 800cde4:	07e1      	lsls	r1, r4, #31
 800cde6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800cdea:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800cdee:	bf48      	it	mi
 800cdf0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800cdf4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800cdf8:	4614      	mov	r4, r2
 800cdfa:	e781      	b.n	800cd00 <__ieee754_sqrt+0x34>
 800cdfc:	0ad9      	lsrs	r1, r3, #11
 800cdfe:	3815      	subs	r0, #21
 800ce00:	055b      	lsls	r3, r3, #21
 800ce02:	2900      	cmp	r1, #0
 800ce04:	d0fa      	beq.n	800cdfc <__ieee754_sqrt+0x130>
 800ce06:	02cd      	lsls	r5, r1, #11
 800ce08:	d50a      	bpl.n	800ce20 <__ieee754_sqrt+0x154>
 800ce0a:	f1c2 0420 	rsb	r4, r2, #32
 800ce0e:	fa23 f404 	lsr.w	r4, r3, r4
 800ce12:	1e55      	subs	r5, r2, #1
 800ce14:	4093      	lsls	r3, r2
 800ce16:	4321      	orrs	r1, r4
 800ce18:	1b42      	subs	r2, r0, r5
 800ce1a:	e78a      	b.n	800cd32 <__ieee754_sqrt+0x66>
 800ce1c:	4610      	mov	r0, r2
 800ce1e:	e7f0      	b.n	800ce02 <__ieee754_sqrt+0x136>
 800ce20:	0049      	lsls	r1, r1, #1
 800ce22:	3201      	adds	r2, #1
 800ce24:	e7ef      	b.n	800ce06 <__ieee754_sqrt+0x13a>
 800ce26:	4680      	mov	r8, r0
 800ce28:	e7bd      	b.n	800cda6 <__ieee754_sqrt+0xda>
 800ce2a:	bf00      	nop
 800ce2c:	7ff00000 	.word	0x7ff00000

0800ce30 <with_errno>:
 800ce30:	b570      	push	{r4, r5, r6, lr}
 800ce32:	4604      	mov	r4, r0
 800ce34:	460d      	mov	r5, r1
 800ce36:	4616      	mov	r6, r2
 800ce38:	f7fb fa64 	bl	8008304 <__errno>
 800ce3c:	4629      	mov	r1, r5
 800ce3e:	6006      	str	r6, [r0, #0]
 800ce40:	4620      	mov	r0, r4
 800ce42:	bd70      	pop	{r4, r5, r6, pc}

0800ce44 <xflow>:
 800ce44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ce46:	4614      	mov	r4, r2
 800ce48:	461d      	mov	r5, r3
 800ce4a:	b108      	cbz	r0, 800ce50 <xflow+0xc>
 800ce4c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ce50:	e9cd 2300 	strd	r2, r3, [sp]
 800ce54:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ce58:	4620      	mov	r0, r4
 800ce5a:	4629      	mov	r1, r5
 800ce5c:	f7f3 fbcc 	bl	80005f8 <__aeabi_dmul>
 800ce60:	2222      	movs	r2, #34	; 0x22
 800ce62:	b003      	add	sp, #12
 800ce64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ce68:	f7ff bfe2 	b.w	800ce30 <with_errno>

0800ce6c <__math_uflow>:
 800ce6c:	b508      	push	{r3, lr}
 800ce6e:	2200      	movs	r2, #0
 800ce70:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ce74:	f7ff ffe6 	bl	800ce44 <xflow>
 800ce78:	ec41 0b10 	vmov	d0, r0, r1
 800ce7c:	bd08      	pop	{r3, pc}

0800ce7e <__math_oflow>:
 800ce7e:	b508      	push	{r3, lr}
 800ce80:	2200      	movs	r2, #0
 800ce82:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800ce86:	f7ff ffdd 	bl	800ce44 <xflow>
 800ce8a:	ec41 0b10 	vmov	d0, r0, r1
 800ce8e:	bd08      	pop	{r3, pc}

0800ce90 <fabs>:
 800ce90:	ec51 0b10 	vmov	r0, r1, d0
 800ce94:	ee10 2a10 	vmov	r2, s0
 800ce98:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ce9c:	ec43 2b10 	vmov	d0, r2, r3
 800cea0:	4770      	bx	lr

0800cea2 <finite>:
 800cea2:	b082      	sub	sp, #8
 800cea4:	ed8d 0b00 	vstr	d0, [sp]
 800cea8:	9801      	ldr	r0, [sp, #4]
 800ceaa:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800ceae:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800ceb2:	0fc0      	lsrs	r0, r0, #31
 800ceb4:	b002      	add	sp, #8
 800ceb6:	4770      	bx	lr

0800ceb8 <scalbn>:
 800ceb8:	b570      	push	{r4, r5, r6, lr}
 800ceba:	ec55 4b10 	vmov	r4, r5, d0
 800cebe:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800cec2:	4606      	mov	r6, r0
 800cec4:	462b      	mov	r3, r5
 800cec6:	b99a      	cbnz	r2, 800cef0 <scalbn+0x38>
 800cec8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800cecc:	4323      	orrs	r3, r4
 800cece:	d036      	beq.n	800cf3e <scalbn+0x86>
 800ced0:	4b39      	ldr	r3, [pc, #228]	; (800cfb8 <scalbn+0x100>)
 800ced2:	4629      	mov	r1, r5
 800ced4:	ee10 0a10 	vmov	r0, s0
 800ced8:	2200      	movs	r2, #0
 800ceda:	f7f3 fb8d 	bl	80005f8 <__aeabi_dmul>
 800cede:	4b37      	ldr	r3, [pc, #220]	; (800cfbc <scalbn+0x104>)
 800cee0:	429e      	cmp	r6, r3
 800cee2:	4604      	mov	r4, r0
 800cee4:	460d      	mov	r5, r1
 800cee6:	da10      	bge.n	800cf0a <scalbn+0x52>
 800cee8:	a32b      	add	r3, pc, #172	; (adr r3, 800cf98 <scalbn+0xe0>)
 800ceea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceee:	e03a      	b.n	800cf66 <scalbn+0xae>
 800cef0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800cef4:	428a      	cmp	r2, r1
 800cef6:	d10c      	bne.n	800cf12 <scalbn+0x5a>
 800cef8:	ee10 2a10 	vmov	r2, s0
 800cefc:	4620      	mov	r0, r4
 800cefe:	4629      	mov	r1, r5
 800cf00:	f7f3 f9c4 	bl	800028c <__adddf3>
 800cf04:	4604      	mov	r4, r0
 800cf06:	460d      	mov	r5, r1
 800cf08:	e019      	b.n	800cf3e <scalbn+0x86>
 800cf0a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800cf0e:	460b      	mov	r3, r1
 800cf10:	3a36      	subs	r2, #54	; 0x36
 800cf12:	4432      	add	r2, r6
 800cf14:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800cf18:	428a      	cmp	r2, r1
 800cf1a:	dd08      	ble.n	800cf2e <scalbn+0x76>
 800cf1c:	2d00      	cmp	r5, #0
 800cf1e:	a120      	add	r1, pc, #128	; (adr r1, 800cfa0 <scalbn+0xe8>)
 800cf20:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf24:	da1c      	bge.n	800cf60 <scalbn+0xa8>
 800cf26:	a120      	add	r1, pc, #128	; (adr r1, 800cfa8 <scalbn+0xf0>)
 800cf28:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf2c:	e018      	b.n	800cf60 <scalbn+0xa8>
 800cf2e:	2a00      	cmp	r2, #0
 800cf30:	dd08      	ble.n	800cf44 <scalbn+0x8c>
 800cf32:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800cf36:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cf3a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800cf3e:	ec45 4b10 	vmov	d0, r4, r5
 800cf42:	bd70      	pop	{r4, r5, r6, pc}
 800cf44:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800cf48:	da19      	bge.n	800cf7e <scalbn+0xc6>
 800cf4a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800cf4e:	429e      	cmp	r6, r3
 800cf50:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800cf54:	dd0a      	ble.n	800cf6c <scalbn+0xb4>
 800cf56:	a112      	add	r1, pc, #72	; (adr r1, 800cfa0 <scalbn+0xe8>)
 800cf58:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d1e2      	bne.n	800cf26 <scalbn+0x6e>
 800cf60:	a30f      	add	r3, pc, #60	; (adr r3, 800cfa0 <scalbn+0xe8>)
 800cf62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf66:	f7f3 fb47 	bl	80005f8 <__aeabi_dmul>
 800cf6a:	e7cb      	b.n	800cf04 <scalbn+0x4c>
 800cf6c:	a10a      	add	r1, pc, #40	; (adr r1, 800cf98 <scalbn+0xe0>)
 800cf6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d0b8      	beq.n	800cee8 <scalbn+0x30>
 800cf76:	a10e      	add	r1, pc, #56	; (adr r1, 800cfb0 <scalbn+0xf8>)
 800cf78:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf7c:	e7b4      	b.n	800cee8 <scalbn+0x30>
 800cf7e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800cf82:	3236      	adds	r2, #54	; 0x36
 800cf84:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cf88:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800cf8c:	4620      	mov	r0, r4
 800cf8e:	4b0c      	ldr	r3, [pc, #48]	; (800cfc0 <scalbn+0x108>)
 800cf90:	2200      	movs	r2, #0
 800cf92:	e7e8      	b.n	800cf66 <scalbn+0xae>
 800cf94:	f3af 8000 	nop.w
 800cf98:	c2f8f359 	.word	0xc2f8f359
 800cf9c:	01a56e1f 	.word	0x01a56e1f
 800cfa0:	8800759c 	.word	0x8800759c
 800cfa4:	7e37e43c 	.word	0x7e37e43c
 800cfa8:	8800759c 	.word	0x8800759c
 800cfac:	fe37e43c 	.word	0xfe37e43c
 800cfb0:	c2f8f359 	.word	0xc2f8f359
 800cfb4:	81a56e1f 	.word	0x81a56e1f
 800cfb8:	43500000 	.word	0x43500000
 800cfbc:	ffff3cb0 	.word	0xffff3cb0
 800cfc0:	3c900000 	.word	0x3c900000

0800cfc4 <_init>:
 800cfc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfc6:	bf00      	nop
 800cfc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cfca:	bc08      	pop	{r3}
 800cfcc:	469e      	mov	lr, r3
 800cfce:	4770      	bx	lr

0800cfd0 <_fini>:
 800cfd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfd2:	bf00      	nop
 800cfd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cfd6:	bc08      	pop	{r3}
 800cfd8:	469e      	mov	lr, r3
 800cfda:	4770      	bx	lr
